filename,ext,element_type,function.name,function.parameters,embedding,author,repo_name,tag,import,import.name,import.from,import.path,constant,constant.name,constant.value,function.docstring,class.name,method.name,method.parameters,class.field,class.instance_field,class.base,method.decorator,field.name,field.default,function.type,method.type
setup.py,python,function,process_options,(),Function: process_options(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
setup.py,python,function,_get_environment_bool,"(var, default=False)","Function: _get_environment_bool(var, default=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
setup.py,python,function,_parse_bool_user_argument,"(options, name)","Function: _parse_bool_user_argument(options, name)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
setup.py,python,function,_determine_user_arguments,(options),Function: _determine_user_arguments(options),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
setup.py,python,function,_determine_compilation_options,(options),Function: _determine_compilation_options(options),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
setup.py,python,function,_determine_cythonize_options,(options),Function: _determine_cythonize_options(options),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
setup.py,python,function,_determine_version,(options),Function: _determine_version(options),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
setup.py,python,function,create_version_py_file,(options),Function: create_version_py_file(options),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
setup.py,python,function,_extension_extra_sources,(),Function: _extension_extra_sources(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
setup.py,python,function,_create_int_type_file,(options),Function: _create_int_type_file(options),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
setup.py,python,function,create_extension_modules,(options),Function: create_extension_modules(options),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
setup.py,python,function,print_epilogue,(),Function: print_epilogue(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
setup.py,python,import,,,Import: collections,qutip,qutip,v5.0.4,import collections,collections,,,,,,,,,,,,,,,,,
setup.py,python,import,,,Import: os,qutip,qutip,v5.0.4,import os,os,,,,,,,,,,,,,,,,,
setup.py,python,import,,,Import: pathlib,qutip,qutip,v5.0.4,import pathlib,pathlib,,,,,,,,,,,,,,,,,
setup.py,python,import,,,Import: subprocess,qutip,qutip,v5.0.4,import subprocess,subprocess,,,,,,,,,,,,,,,,,
setup.py,python,import,,,Import: sys,qutip,qutip,v5.0.4,import sys,sys,,,,,,,,,,,,,,,,,
setup.py,python,import,,,Import: sysconfig,qutip,qutip,v5.0.4,import sysconfig,sysconfig,,,,,,,,,,,,,,,,,
setup.py,python,import,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,warnings,,,,,,,,,,,,,,,,,
setup.py,python,import,,,Import: packaging.version,qutip,qutip,v5.0.4,import packaging.version,packaging.version,,,,,,,,,,,,,,,,,
setup.py,python,import,,,Import: setup from setuptools,qutip,qutip,v5.0.4,"from setuptools import setup, Extension",setup,setuptools,,,,,,,,,,,,,,,,
setup.py,python,import,,,Import: Extension from setuptools,qutip,qutip,v5.0.4,"from setuptools import setup, Extension",Extension,setuptools,,,,,,,,,,,,,,,,
setup.py,python,import,,,Import: distutils.sysconfig,qutip,qutip,v5.0.4,import distutils.sysconfig,distutils.sysconfig,,,,,,,,,,,,,,,,,
setup.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
setup.py,python,local_import,,,Import: cythonize from Cython.Build,qutip,qutip,v5.0.4,from Cython.Build import cythonize,cythonize,Cython.Build,Cython.Build,,,,,,,,,,,,,,,
setup.py,python,local_import,,,Import: build_ext from Cython.Distutils,qutip,qutip,v5.0.4,from Cython.Distutils import build_ext,build_ext,Cython.Distutils,Cython.Distutils,,,,,,,,,,,,,,,
setup.py,python,,,,File: .,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
setup.py,python,,,,Directory: setup.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
conf.py,python,function,_check_source_folder_and_imported_qutip_match,(),Function: _check_source_folder_and_imported_qutip_match(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
conf.py,python,function,qutip_version,(),Function: qutip_version(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
conf.py,python,constant,,,Constant: needs_sphinx = '1.8.3',qutip,qutip,v5.0.4,,,,,needs_sphinx = '1.8.3',needs_sphinx,'1.8.3',,,,,,,,,,,,
conf.py,python,constant,,,"Constant: extensions = ['sphinx.ext.mathjax',
              'matplotlib.sphinxext.plot_directive',
              'sphinx.ext.autodoc',
              'sphinx.ext.todo',
              'sphinx.ext.doctest',
              'sphinx.ext.autosummary',
              'numpydoc',
              'sphinx.ext.extlinks',
              'sphinx.ext.viewcode',
              'sphinx.ext.ifconfig',
              'sphinx.ext.napoleon',
              'sphinx_gallery.gen_gallery',
              'sphinxcontrib.bibtex']",qutip,qutip,v5.0.4,,,,,"extensions = ['sphinx.ext.mathjax',
              'matplotlib.sphinxext.plot_directive',
              'sphinx.ext.autodoc',
              'sphinx.ext.todo',
              'sphinx.ext.doctest',
              'sphinx.ext.autosummary',
              'numpydoc',
              'sphinx.ext.extlinks',
              'sphinx.ext.viewcode',
              'sphinx.ext.ifconfig',
              'sphinx.ext.napoleon',
              'sphinx_gallery.gen_gallery',
              'sphinxcontrib.bibtex']",extensions,"['sphinx.ext.mathjax',
              'matplotlib.sphinxext.plot_directive',
              'sphinx.ext.autodoc',
              'sphinx.ext.todo',
              'sphinx.ext.doctest',
              'sphinx.ext.autosummary',
              'numpydoc',
              'sphinx.ext.extlinks',
              'sphinx.ext.viewcode',
              'sphinx.ext.ifconfig',
              'sphinx.ext.napoleon',
              'sphinx_gallery.gen_gallery',
              'sphinxcontrib.bibtex']",,,,,,,,,,,,
conf.py,python,constant,,,Constant: templates_path = ['templates'],qutip,qutip,v5.0.4,,,,,templates_path = ['templates'],templates_path,['templates'],,,,,,,,,,,,
conf.py,python,constant,,,Constant: savefig_dir = '_images',qutip,qutip,v5.0.4,,,,,savefig_dir = '_images',savefig_dir,'_images',,,,,,,,,,,,
conf.py,python,constant,,,Constant: source_suffix = '.rst',qutip,qutip,v5.0.4,,,,,source_suffix = '.rst',source_suffix,'.rst',,,,,,,,,,,,
conf.py,python,constant,,,Constant: master_doc = 'index',qutip,qutip,v5.0.4,,,,,master_doc = 'index',master_doc,'index',,,,,,,,,,,,
conf.py,python,constant,,,Constant: project = 'QuTiP: Quantum Toolbox in Python',qutip,qutip,v5.0.4,,,,,project = 'QuTiP: Quantum Toolbox in Python',project,'QuTiP: Quantum Toolbox in Python',,,,,,,,,,,,
conf.py,python,constant,,,"Constant: author = ', '.join([
    'P.D. Nation',
    'J.R. Johansson',
    'A.J.G. Pitchford',
    'C. Granade',
    'A.L. Grimsmo',
    'N. Shammah',
    'S. Ahmed',
    'N. Lambert',
    'B. Li',
    'J. Lishman',
    'S. Cross',
    'A. Galicia',
    'P. Menczel',
    'P. Hopf',
    'and E. Giguère'
])",qutip,qutip,v5.0.4,,,,,"author = ', '.join([
    'P.D. Nation',
    'J.R. Johansson',
    'A.J.G. Pitchford',
    'C. Granade',
    'A.L. Grimsmo',
    'N. Shammah',
    'S. Ahmed',
    'N. Lambert',
    'B. Li',
    'J. Lishman',
    'S. Cross',
    'A. Galicia',
    'P. Menczel',
    'P. Hopf',
    'and E. Giguère'
])",author,"', '.join([
    'P.D. Nation',
    'J.R. Johansson',
    'A.J.G. Pitchford',
    'C. Granade',
    'A.L. Grimsmo',
    'N. Shammah',
    'S. Ahmed',
    'N. Lambert',
    'B. Li',
    'J. Lishman',
    'S. Cross',
    'A. Galicia',
    'P. Menczel',
    'P. Hopf',
    'and E. Giguère'
])",,,,,,,,,,,,
conf.py,python,constant,,,"Constant: copyright = '2011 to 2024 inclusive, QuTiP developers and contributors'",qutip,qutip,v5.0.4,,,,,"copyright = '2011 to 2024 inclusive, QuTiP developers and contributors'",copyright,"'2011 to 2024 inclusive, QuTiP developers and contributors'",,,,,,,,,,,,
conf.py,python,constant,,,Constant: release = qutip_version(),qutip,qutip,v5.0.4,,,,,release = qutip_version(),release,qutip_version(),,,,,,,,,,,,
conf.py,python,constant,,,"Constant: version = ""."".join(release.split(""."")[:2])",qutip,qutip,v5.0.4,,,,,"version = ""."".join(release.split(""."")[:2])",version,"""."".join(release.split(""."")[:2])",,,,,,,,,,,,
conf.py,python,constant,,,"Constant: language = ""en""",qutip,qutip,v5.0.4,,,,,"language = ""en""",language,"""en""",,,,,,,,,,,,
conf.py,python,constant,,,"Constant: exclude_patterns = [
    '_build',
    'Thumbs.db',
    '.DS_Store',
    'gallery/src',  # handled by sphinx-gallery instead.
]",qutip,qutip,v5.0.4,,,,,"exclude_patterns = [
    '_build',
    'Thumbs.db',
    '.DS_Store',
    'gallery/src',  # handled by sphinx-gallery instead.
]",exclude_patterns,"[
    '_build',
    'Thumbs.db',
    '.DS_Store',
    'gallery/src',  # handled by sphinx-gallery instead.
]",,,,,,,,,,,,
conf.py,python,constant,,,Constant: pygments_style = 'sphinx',qutip,qutip,v5.0.4,,,,,pygments_style = 'sphinx',pygments_style,'sphinx',,,,,,,,,,,,
conf.py,python,constant,,,Constant: add_function_parentheses = False,qutip,qutip,v5.0.4,,,,,add_function_parentheses = False,add_function_parentheses,False,,,,,,,,,,,,
conf.py,python,constant,,,Constant: add_module_names = False,qutip,qutip,v5.0.4,,,,,add_module_names = False,add_module_names,False,,,,,,,,,,,,
conf.py,python,constant,,,Constant: show_authors = True,qutip,qutip,v5.0.4,,,,,show_authors = True,show_authors,True,,,,,,,,,,,,
conf.py,python,constant,,,Constant: pygments_style = 'sphinx',qutip,qutip,v5.0.4,,,,,pygments_style = 'sphinx',pygments_style,'sphinx',,,,,,,,,,,,
conf.py,python,constant,,,Constant: todo_include_todos = True,qutip,qutip,v5.0.4,,,,,todo_include_todos = True,todo_include_todos,True,,,,,,,,,,,,
conf.py,python,constant,,,Constant: numpydoc_show_class_members = False,qutip,qutip,v5.0.4,,,,,numpydoc_show_class_members = False,numpydoc_show_class_members,False,,,,,,,,,,,,
conf.py,python,constant,,,Constant: napoleon_numpy_docstring = True,qutip,qutip,v5.0.4,,,,,napoleon_numpy_docstring = True,napoleon_numpy_docstring,True,,,,,,,,,,,,
conf.py,python,constant,,,Constant: napoleon_use_admonition_for_notes = True,qutip,qutip,v5.0.4,,,,,napoleon_use_admonition_for_notes = True,napoleon_use_admonition_for_notes,True,,,,,,,,,,,,
conf.py,python,constant,,,"Constant: bibtex_bibfiles = [
    ""guide/heom/heom.bib"",
]",qutip,qutip,v5.0.4,,,,,"bibtex_bibfiles = [
    ""guide/heom/heom.bib"",
]",bibtex_bibfiles,"[
    ""guide/heom/heom.bib"",
]",,,,,,,,,,,,
conf.py,python,constant,,,Constant: html_theme = 'sphinx_rtd_theme',qutip,qutip,v5.0.4,,,,,html_theme = 'sphinx_rtd_theme',html_theme,'sphinx_rtd_theme',,,,,,,,,,,,
conf.py,python,constant,,,Constant: full_logo= True,qutip,qutip,v5.0.4,,,,,full_logo= True,full_logo,True,,,,,,,,,,,,
conf.py,python,constant,,,"Constant: html_theme_options = {
}",qutip,qutip,v5.0.4,,,,,"html_theme_options = {
}",html_theme_options,"{
}",,,,,,,,,,,,
conf.py,python,constant,,,Constant: html_title = 'QuTiP {} Documentation'.format(version),qutip,qutip,v5.0.4,,,,,html_title = 'QuTiP {} Documentation'.format(version),html_title,'QuTiP {} Documentation'.format(version),,,,,,,,,,,,
conf.py,python,constant,,,Constant: html_short_title = 'QuTiP',qutip,qutip,v5.0.4,,,,,html_short_title = 'QuTiP',html_short_title,'QuTiP',,,,,,,,,,,,
conf.py,python,constant,,,Constant: html_favicon = 'figures/favicon.ico',qutip,qutip,v5.0.4,,,,,html_favicon = 'figures/favicon.ico',html_favicon,'figures/favicon.ico',,,,,,,,,,,,
conf.py,python,constant,,,Constant: html_static_path = ['static'],qutip,qutip,v5.0.4,,,,,html_static_path = ['static'],html_static_path,['static'],,,,,,,,,,,,
conf.py,python,constant,,,"Constant: html_last_updated_fmt = '%b %d, %Y'",qutip,qutip,v5.0.4,,,,,"html_last_updated_fmt = '%b %d, %Y'",html_last_updated_fmt,"'%b %d, %Y'",,,,,,,,,,,,
conf.py,python,constant,,,"Constant: html_sidebars = {'sidebar': ['localtoc.html', 'sourcelink.html', 'searchbox.html']}",qutip,qutip,v5.0.4,,,,,"html_sidebars = {'sidebar': ['localtoc.html', 'sourcelink.html', 'searchbox.html']}",html_sidebars,"{'sidebar': ['localtoc.html', 'sourcelink.html', 'searchbox.html']}",,,,,,,,,,,,
conf.py,python,constant,,,Constant: html_show_sourcelink = False,qutip,qutip,v5.0.4,,,,,html_show_sourcelink = False,html_show_sourcelink,False,,,,,,,,,,,,
conf.py,python,constant,,,Constant: html_show_sphinx = True,qutip,qutip,v5.0.4,,,,,html_show_sphinx = True,html_show_sphinx,True,,,,,,,,,,,,
conf.py,python,constant,,,Constant: html_show_copyright = True,qutip,qutip,v5.0.4,,,,,html_show_copyright = True,html_show_copyright,True,,,,,,,,,,,,
conf.py,python,constant,,,"Constant: html_css_files = [
    'site.css',
]",qutip,qutip,v5.0.4,,,,,"html_css_files = [
    'site.css',
]",html_css_files,"[
    'site.css',
]",,,,,,,,,,,,
conf.py,python,constant,,,Constant: htmlhelp_basename = 'QuTiPdoc',qutip,qutip,v5.0.4,,,,,htmlhelp_basename = 'QuTiPdoc',htmlhelp_basename,'QuTiPdoc',,,,,,,,,,,,
conf.py,python,constant,,,"Constant: mathjax3_config = {
    'TeX': {
        'Macros': {
            'bra': [r'\left\langle{#1}\right\rvert', 1],
            'ket': [r'\left\lvert{#1}\right\rangle', 1],
            'tr': r'\operatorname{tr}',
        },
    },
}",qutip,qutip,v5.0.4,,,,,"mathjax3_config = {
    'TeX': {
        'Macros': {
            'bra': [r'\left\langle{#1}\right\rvert', 1],
            'ket': [r'\left\lvert{#1}\right\rangle', 1],
            'tr': r'\operatorname{tr}',
        },
    },
}",mathjax3_config,"{
    'TeX': {
        'Macros': {
            'bra': [r'\left\langle{#1}\right\rvert', 1],
            'ket': [r'\left\lvert{#1}\right\rangle', 1],
            'tr': r'\operatorname{tr}',
        },
    },
}",,,,,,,,,,,,
conf.py,python,constant,,,"Constant: latex_elements = {
    'papersize': 'a4paper',
    'pointsize': '10pt',
    'classoptions': '',
    'babel': '\\usepackage[english]{babel}',
    'fncychap': '',
    'figure_align': 'H',
    # This preamble is inserted into the build tools for the latex make targets
    # but not any others.  Be sure to change mathjax_config too if you need to
    # define more commands.
    'preamble': r""\usepackage{physics}"",
}",qutip,qutip,v5.0.4,,,,,"latex_elements = {
    'papersize': 'a4paper',
    'pointsize': '10pt',
    'classoptions': '',
    'babel': '\\usepackage[english]{babel}',
    'fncychap': '',
    'figure_align': 'H',
    # This preamble is inserted into the build tools for the latex make targets
    # but not any others.  Be sure to change mathjax_config too if you need to
    # define more commands.
    'preamble': r""\usepackage{physics}"",
}",latex_elements,"{
    'papersize': 'a4paper',
    'pointsize': '10pt',
    'classoptions': '',
    'babel': '\\usepackage[english]{babel}',
    'fncychap': '',
    'figure_align': 'H',
    # This preamble is inserted into the build tools for the latex make targets
    # but not any others.  Be sure to change mathjax_config too if you need to
    # define more commands.
    'preamble': r""\usepackage{physics}"",
}",,,,,,,,,,,,
conf.py,python,constant,,,"Constant: latex_documents = [
  ('index', 'qutip.tex', project, author, 'manual'),
]",qutip,qutip,v5.0.4,,,,,"latex_documents = [
  ('index', 'qutip.tex', project, author, 'manual'),
]",latex_documents,"[
  ('index', 'qutip.tex', project, author, 'manual'),
]",,,,,,,,,,,,
conf.py,python,constant,,,Constant: latex_logo = 'figures/logo.png',qutip,qutip,v5.0.4,,,,,latex_logo = 'figures/logo.png',latex_logo,'figures/logo.png',,,,,,,,,,,,
conf.py,python,constant,,,Constant: latex_keep_old_macro_names=True,qutip,qutip,v5.0.4,,,,,latex_keep_old_macro_names=True,latex_keep_old_macro_names,True,,,,,,,,,,,,
conf.py,python,constant,,,"Constant: man_pages = [
    (master_doc, 'qutip', project, [author], 1)
]",qutip,qutip,v5.0.4,,,,,"man_pages = [
    (master_doc, 'qutip', project, [author], 1)
]",man_pages,"[
    (master_doc, 'qutip', project, [author], 1)
]",,,,,,,,,,,,
conf.py,python,constant,,,Constant: os_nt = False,qutip,qutip,v5.0.4,,,,,os_nt = False,os_nt,False,,,,,,,,,,,,
conf.py,python,constant,,,"Constant: doctest_global_setup = '''
import matplotlib.pyplot as plt
import numpy as np
import os
import warnings
warnings.filterwarnings(""ignore"")
from qutip import *
os_nt = {}
'''.format(os_nt)",qutip,qutip,v5.0.4,,,,,"doctest_global_setup = '''
import matplotlib.pyplot as plt
import numpy as np
import os
import warnings
warnings.filterwarnings(""ignore"")
from qutip import *
os_nt = {}
'''.format(os_nt)",doctest_global_setup,"'''
import matplotlib.pyplot as plt
import numpy as np
import os
import warnings
warnings.filterwarnings(""ignore"")
from qutip import *
os_nt = {}
'''.format(os_nt)",,,,,,,,,,,,
conf.py,python,constant,,,"Constant: plot_working_directory = ""./""",qutip,qutip,v5.0.4,,,,,"plot_working_directory = ""./""",plot_working_directory,"""./""",,,,,,,,,,,,
conf.py,python,constant,,,"Constant: plot_pre_code = """"""
import numpy as np
import matplotlib.pyplot as plt
from qutip import *
plt.close(""all"")
""""""",qutip,qutip,v5.0.4,,,,,"plot_pre_code = """"""
import numpy as np
import matplotlib.pyplot as plt
from qutip import *
plt.close(""all"")
""""""",plot_pre_code,"""""""
import numpy as np
import matplotlib.pyplot as plt
from qutip import *
plt.close(""all"")
""""""",,,,,,,,,,,,
conf.py,python,constant,,,Constant: plot_include_source = True,qutip,qutip,v5.0.4,,,,,plot_include_source = True,plot_include_source,True,,,,,,,,,,,,
conf.py,python,constant,,,Constant: plot_html_show_source_link = False,qutip,qutip,v5.0.4,,,,,plot_html_show_source_link = False,plot_html_show_source_link,False,,,,,,,,,,,,
conf.py,python,constant,,,Constant: plot_html_show_formats = False,qutip,qutip,v5.0.4,,,,,plot_html_show_formats = False,plot_html_show_formats,False,,,,,,,,,,,,
conf.py,python,constant,,,"Constant: texinfo_documents = [
    (master_doc, 'qutip', project,
     author, 'QuTiP',
     'Quantum Toolbox in Python',
     'Miscellaneous'),
]",qutip,qutip,v5.0.4,,,,,"texinfo_documents = [
    (master_doc, 'qutip', project,
     author, 'QuTiP',
     'Quantum Toolbox in Python',
     'Miscellaneous'),
]",texinfo_documents,"[
    (master_doc, 'qutip', project,
     author, 'QuTiP',
     'Quantum Toolbox in Python',
     'Miscellaneous'),
]",,,,,,,,,,,,
conf.py,python,constant,,,Constant: autodoc_member_order = 'alphabetical',qutip,qutip,v5.0.4,,,,,autodoc_member_order = 'alphabetical',autodoc_member_order,'alphabetical',,,,,,,,,,,,
conf.py,python,constant,,,"Constant: extlinks = {
    'arxiv': ('https://arxiv.org/abs/%s', 'arXiv:%s'),
    'doi': ('https://dx.doi.org/%s', 'doi:%s'),
}",qutip,qutip,v5.0.4,,,,,"extlinks = {
    'arxiv': ('https://arxiv.org/abs/%s', 'arXiv:%s'),
    'doi': ('https://dx.doi.org/%s', 'doi:%s'),
}",extlinks,"{
    'arxiv': ('https://arxiv.org/abs/%s', 'arXiv:%s'),
    'doi': ('https://dx.doi.org/%s', 'doi:%s'),
}",,,,,,,,,,,,
conf.py,python,constant,,,"Constant: sphinx_gallery_conf = {
     'examples_dirs': 'gallery/src',   # path to your example scripts
     'gallery_dirs': 'gallery/build',  # save generated examples
     'abort_on_example_error': True  # abort if exception occurs
}",qutip,qutip,v5.0.4,,,,,"sphinx_gallery_conf = {
     'examples_dirs': 'gallery/src',   # path to your example scripts
     'gallery_dirs': 'gallery/build',  # save generated examples
     'abort_on_example_error': True  # abort if exception occurs
}",sphinx_gallery_conf,"{
     'examples_dirs': 'gallery/src',   # path to your example scripts
     'gallery_dirs': 'gallery/build',  # save generated examples
     'abort_on_example_error': True  # abort if exception occurs
}",,,,,,,,,,,,
conf.py,python,constant,,,Constant: ipython_strict_fail = False,qutip,qutip,v5.0.4,,,,,ipython_strict_fail = False,ipython_strict_fail,False,,,,,,,,,,,,
conf.py,python,import,,,Import: os,qutip,qutip,v5.0.4,import os,os,,,,,,,,,,,,,,,,,
conf.py,python,import,,,Import: pathlib,qutip,qutip,v5.0.4,import pathlib,pathlib,,,,,,,,,,,,,,,,,
conf.py,python,import,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,warnings,,,,,,,,,,,,,,,,,
conf.py,python,,,,File: doc,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
conf.py,python,,,,Directory: doc\conf.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
bloch_ex1.py,python,constant,,,Constant: b = qutip.Bloch(),qutip,qutip,v5.0.4,,,,,b = qutip.Bloch(),b,qutip.Bloch(),,,,,,,,,,,,
bloch_ex1.py,python,constant,,,"Constant: th = np.linspace(0, 2*np.pi, 20)",qutip,qutip,v5.0.4,,,,,"th = np.linspace(0, 2*np.pi, 20)",th,"np.linspace(0, 2*np.pi, 20)",,,,,,,,,,,,
bloch_ex1.py,python,constant,,,Constant: xp = np.cos(th),qutip,qutip,v5.0.4,,,,,xp = np.cos(th),xp,np.cos(th),,,,,,,,,,,,
bloch_ex1.py,python,constant,,,Constant: yp = np.sin(th),qutip,qutip,v5.0.4,,,,,yp = np.sin(th),yp,np.sin(th),,,,,,,,,,,,
bloch_ex1.py,python,constant,,,Constant: zp = np.zeros(20),qutip,qutip,v5.0.4,,,,,zp = np.zeros(20),zp,np.zeros(20),,,,,,,,,,,,
bloch_ex1.py,python,constant,,,Constant: xz = np.zeros(20),qutip,qutip,v5.0.4,,,,,xz = np.zeros(20),xz,np.zeros(20),,,,,,,,,,,,
bloch_ex1.py,python,constant,,,Constant: yz = np.sin(th),qutip,qutip,v5.0.4,,,,,yz = np.sin(th),yz,np.sin(th),,,,,,,,,,,,
bloch_ex1.py,python,constant,,,Constant: zz = np.cos(th),qutip,qutip,v5.0.4,,,,,zz = np.cos(th),zz,np.cos(th),,,,,,,,,,,,
bloch_ex1.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
bloch_ex1.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
bloch_ex1.py,python,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
bloch_ex1.py,python,,,,Directory: doc\guide\scripts\bloch_ex1.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
correlation_ex1.py,python,constant,,,"Constant: times = np.linspace(0, 10, 200)",qutip,qutip,v5.0.4,,,,,"times = np.linspace(0, 10, 200)",times,"np.linspace(0, 10, 200)",,,,,,,,,,,,
correlation_ex1.py,python,constant,,,Constant: a = qutip.destroy(10),qutip,qutip,v5.0.4,,,,,a = qutip.destroy(10),a,qutip.destroy(10),,,,,,,,,,,,
correlation_ex1.py,python,constant,,,Constant: x = a.dag() + a,qutip,qutip,v5.0.4,,,,,x = a.dag() + a,x,a.dag() + a,,,,,,,,,,,,
correlation_ex1.py,python,constant,,,Constant: H = a.dag() * a,qutip,qutip,v5.0.4,,,,,H = a.dag() * a,H,a.dag() * a,,,,,,,,,,,,
correlation_ex1.py,python,constant,,,"Constant: corr1 = qutip.correlation_2op_1t(H, None, times, [np.sqrt(0.5) * a], x, x)",qutip,qutip,v5.0.4,,,,,"corr1 = qutip.correlation_2op_1t(H, None, times, [np.sqrt(0.5) * a], x, x)",corr1,"qutip.correlation_2op_1t(H, None, times, [np.sqrt(0.5) * a], x, x)",,,,,,,,,,,,
correlation_ex1.py,python,constant,,,"Constant: corr2 = qutip.correlation_2op_1t(H, None, times, [np.sqrt(1.0) * a], x, x)",qutip,qutip,v5.0.4,,,,,"corr2 = qutip.correlation_2op_1t(H, None, times, [np.sqrt(1.0) * a], x, x)",corr2,"qutip.correlation_2op_1t(H, None, times, [np.sqrt(1.0) * a], x, x)",,,,,,,,,,,,
correlation_ex1.py,python,constant,,,"Constant: corr3 = qutip.correlation_2op_1t(H, None, times, [np.sqrt(2.0) * a], x, x)",qutip,qutip,v5.0.4,,,,,"corr3 = qutip.correlation_2op_1t(H, None, times, [np.sqrt(2.0) * a], x, x)",corr3,"qutip.correlation_2op_1t(H, None, times, [np.sqrt(2.0) * a], x, x)",,,,,,,,,,,,
correlation_ex1.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
correlation_ex1.py,python,import,,,Import: matplotlib.pyplot,qutip,qutip,v5.0.4,import matplotlib.pyplot as plt,matplotlib.pyplot,,,,,,,,,,,,,,,,,
correlation_ex1.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
correlation_ex1.py,python,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
correlation_ex1.py,python,,,,Directory: doc\guide\scripts\correlation_ex1.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
correlation_ex2.py,python,constant,,,"Constant: times = np.linspace(0, 10.0, 200)",qutip,qutip,v5.0.4,,,,,"times = np.linspace(0, 10.0, 200)",times,"np.linspace(0, 10.0, 200)",,,,,,,,,,,,
correlation_ex2.py,python,constant,,,Constant: a = qutip.destroy(10),qutip,qutip,v5.0.4,,,,,a = qutip.destroy(10),a,qutip.destroy(10),,,,,,,,,,,,
correlation_ex2.py,python,constant,,,Constant: x = a.dag() + a,qutip,qutip,v5.0.4,,,,,x = a.dag() + a,x,a.dag() + a,,,,,,,,,,,,
correlation_ex2.py,python,constant,,,Constant: H = a.dag() * a,qutip,qutip,v5.0.4,,,,,H = a.dag() * a,H,a.dag() * a,,,,,,,,,,,,
correlation_ex2.py,python,constant,,,Constant: alpha = 2.5,qutip,qutip,v5.0.4,,,,,alpha = 2.5,alpha,2.5,,,,,,,,,,,,
correlation_ex2.py,python,constant,,,"Constant: rho0 = qutip.coherent_dm(10, alpha)",qutip,qutip,v5.0.4,,,,,"rho0 = qutip.coherent_dm(10, alpha)",rho0,"qutip.coherent_dm(10, alpha)",,,,,,,,,,,,
correlation_ex2.py,python,constant,,,"Constant: corr = qutip.correlation_2op_2t(H, rho0, times, times, [np.sqrt(0.25) * a], x, x)",qutip,qutip,v5.0.4,,,,,"corr = qutip.correlation_2op_2t(H, rho0, times, times, [np.sqrt(0.25) * a], x, x)",corr,"qutip.correlation_2op_2t(H, rho0, times, times, [np.sqrt(0.25) * a], x, x)",,,,,,,,,,,,
correlation_ex2.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
correlation_ex2.py,python,import,,,Import: matplotlib.pyplot,qutip,qutip,v5.0.4,import matplotlib.pyplot as plt,matplotlib.pyplot,,,,,,,,,,,,,,,,,
correlation_ex2.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
correlation_ex2.py,python,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
correlation_ex2.py,python,,,,Directory: doc\guide\scripts\correlation_ex2.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
correlation_ex3.py,python,constant,,,Constant: N = 15,qutip,qutip,v5.0.4,,,,,N = 15,N,15,,,,,,,,,,,,
correlation_ex3.py,python,constant,,,"Constant: taus = np.linspace(0,10.0,200)",qutip,qutip,v5.0.4,,,,,"taus = np.linspace(0,10.0,200)",taus,"np.linspace(0,10.0,200)",,,,,,,,,,,,
correlation_ex3.py,python,constant,,,Constant: a = qutip.destroy(N),qutip,qutip,v5.0.4,,,,,a = qutip.destroy(N),a,qutip.destroy(N),,,,,,,,,,,,
correlation_ex3.py,python,constant,,,Constant: H = 2 * np.pi * a.dag() * a,qutip,qutip,v5.0.4,,,,,H = 2 * np.pi * a.dag() * a,H,2 * np.pi * a.dag() * a,,,,,,,,,,,,
correlation_ex3.py,python,constant,,,Constant: G1 = 0.75,qutip,qutip,v5.0.4,,,,,G1 = 0.75,G1,0.75,,,,,,,,,,,,
correlation_ex3.py,python,constant,,,Constant: n_th = 2.00,qutip,qutip,v5.0.4,,,,,n_th = 2.00,n_th,2.00,,,,,,,,,,,,
correlation_ex3.py,python,constant,,,"Constant: c_ops = [np.sqrt(G1 * (1 + n_th)) * a, np.sqrt(G1 * n_th) * a.dag()]",qutip,qutip,v5.0.4,,,,,"c_ops = [np.sqrt(G1 * (1 + n_th)) * a, np.sqrt(G1 * n_th) * a.dag()]",c_ops,"[np.sqrt(G1 * (1 + n_th)) * a, np.sqrt(G1 * n_th) * a.dag()]",,,,,,,,,,,,
correlation_ex3.py,python,constant,,,"Constant: rho0 = qutip.coherent_dm(N, 2.0)",qutip,qutip,v5.0.4,,,,,"rho0 = qutip.coherent_dm(N, 2.0)",rho0,"qutip.coherent_dm(N, 2.0)",,,,,,,,,,,,
correlation_ex3.py,python,constant,,,"Constant: n = qutip.mesolve(H, rho0, taus, c_ops, [a.dag() * a]).expect[0]",qutip,qutip,v5.0.4,,,,,"n = qutip.mesolve(H, rho0, taus, c_ops, [a.dag() * a]).expect[0]",n,"qutip.mesolve(H, rho0, taus, c_ops, [a.dag() * a]).expect[0]",,,,,,,,,,,,
correlation_ex3.py,python,constant,,,"Constant: G1 = qutip.correlation_2op_1t(H, rho0, taus, c_ops, a.dag(), a)",qutip,qutip,v5.0.4,,,,,"G1 = qutip.correlation_2op_1t(H, rho0, taus, c_ops, a.dag(), a)",G1,"qutip.correlation_2op_1t(H, rho0, taus, c_ops, a.dag(), a)",,,,,,,,,,,,
correlation_ex3.py,python,constant,,,Constant: g1 = np.array(G1) / np.sqrt(n[0] * np.array(n)),qutip,qutip,v5.0.4,,,,,g1 = np.array(G1) / np.sqrt(n[0] * np.array(n)),g1,np.array(G1) / np.sqrt(n[0] * np.array(n)),,,,,,,,,,,,
correlation_ex3.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
correlation_ex3.py,python,import,,,Import: matplotlib.pyplot,qutip,qutip,v5.0.4,import matplotlib.pyplot as plt,matplotlib.pyplot,,,,,,,,,,,,,,,,,
correlation_ex3.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
correlation_ex3.py,python,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
correlation_ex3.py,python,,,,Directory: doc\guide\scripts\correlation_ex3.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
correlation_ex4.py,python,constant,,,Constant: N = 25,qutip,qutip,v5.0.4,,,,,N = 25,N,25,,,,,,,,,,,,
correlation_ex4.py,python,constant,,,"Constant: taus = np.linspace(0, 25.0, 200)",qutip,qutip,v5.0.4,,,,,"taus = np.linspace(0, 25.0, 200)",taus,"np.linspace(0, 25.0, 200)",,,,,,,,,,,,
correlation_ex4.py,python,constant,,,Constant: a = qutip.destroy(N),qutip,qutip,v5.0.4,,,,,a = qutip.destroy(N),a,qutip.destroy(N),,,,,,,,,,,,
correlation_ex4.py,python,constant,,,Constant: H = 2 * np.pi * a.dag() * a,qutip,qutip,v5.0.4,,,,,H = 2 * np.pi * a.dag() * a,H,2 * np.pi * a.dag() * a,,,,,,,,,,,,
correlation_ex4.py,python,constant,,,Constant: kappa = 0.25,qutip,qutip,v5.0.4,,,,,kappa = 0.25,kappa,0.25,,,,,,,,,,,,
correlation_ex4.py,python,constant,,,Constant: n_th = 2.0,qutip,qutip,v5.0.4,,,,,n_th = 2.0,n_th,2.0,,,,,,,,,,,,
correlation_ex4.py,python,constant,,,"Constant: c_ops = [np.sqrt(kappa * (1 + n_th)) * a, np.sqrt(kappa * n_th) * a.dag()]",qutip,qutip,v5.0.4,,,,,"c_ops = [np.sqrt(kappa * (1 + n_th)) * a, np.sqrt(kappa * n_th) * a.dag()]",c_ops,"[np.sqrt(kappa * (1 + n_th)) * a, np.sqrt(kappa * n_th) * a.dag()]",,,,,,,,,,,,
correlation_ex4.py,python,constant,,,"Constant: states = [
    {'state': qutip.coherent_dm(N, np.sqrt(2)), 'label': ""coherent state""},
    {'state': qutip.thermal_dm(N, 2), 'label': ""thermal state""},
    {'state': qutip.fock_dm(N, 2), 'label': ""Fock state""},
]",qutip,qutip,v5.0.4,,,,,"states = [
    {'state': qutip.coherent_dm(N, np.sqrt(2)), 'label': ""coherent state""},
    {'state': qutip.thermal_dm(N, 2), 'label': ""thermal state""},
    {'state': qutip.fock_dm(N, 2), 'label': ""Fock state""},
]",states,"[
    {'state': qutip.coherent_dm(N, np.sqrt(2)), 'label': ""coherent state""},
    {'state': qutip.thermal_dm(N, 2), 'label': ""thermal state""},
    {'state': qutip.fock_dm(N, 2), 'label': ""Fock state""},
]",,,,,,,,,,,,
correlation_ex4.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
correlation_ex4.py,python,import,,,Import: matplotlib.pyplot,qutip,qutip,v5.0.4,import matplotlib.pyplot as plt,matplotlib.pyplot,,,,,,,,,,,,,,,,,
correlation_ex4.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
correlation_ex4.py,python,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
correlation_ex4.py,python,,,,Directory: doc\guide\scripts\correlation_ex4.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
ex_bloch_animation.py,python,function,qubit_integrate,"(w, theta, gamma1, gamma2, psi0, tlist)","Function: qubit_integrate(w, theta, gamma1, gamma2, psi0, tlist)",qutip,qutip,v5.0.4,,,,,,,,"# operators and the hamiltonian",,,,,,,,,,,
ex_bloch_animation.py,python,constant,,,Constant: w     = 1.0 * 2 * np.pi,qutip,qutip,v5.0.4,,,,,w     = 1.0 * 2 * np.pi,w,1.0 * 2 * np.pi,,,,,,,,,,,,
ex_bloch_animation.py,python,constant,,,Constant: theta = 0.2 * np.pi,qutip,qutip,v5.0.4,,,,,theta = 0.2 * np.pi,theta,0.2 * np.pi,,,,,,,,,,,,
ex_bloch_animation.py,python,constant,,,Constant: gamma1 = 0.5,qutip,qutip,v5.0.4,,,,,gamma1 = 0.5,gamma1,0.5,,,,,,,,,,,,
ex_bloch_animation.py,python,constant,,,Constant: gamma2 = 0.2,qutip,qutip,v5.0.4,,,,,gamma2 = 0.2,gamma2,0.2,,,,,,,,,,,,
ex_bloch_animation.py,python,constant,,,Constant: a = 1.0,qutip,qutip,v5.0.4,,,,,a = 1.0,a,1.0,,,,,,,,,,,,
ex_bloch_animation.py,python,constant,,,"Constant: psi0 = (a*qutip.basis(2, 0) + (1-a)*qutip.basis(2, 1))/np.sqrt(a**2 + (1-a)**2)",qutip,qutip,v5.0.4,,,,,"psi0 = (a*qutip.basis(2, 0) + (1-a)*qutip.basis(2, 1))/np.sqrt(a**2 + (1-a)**2)",psi0,"(a*qutip.basis(2, 0) + (1-a)*qutip.basis(2, 1))/np.sqrt(a**2 + (1-a)**2)",,,,,,,,,,,,
ex_bloch_animation.py,python,constant,,,"Constant: tlist = np.linspace(0, 4, 250)",qutip,qutip,v5.0.4,,,,,"tlist = np.linspace(0, 4, 250)",tlist,"np.linspace(0, 4, 250)",,,,,,,,,,,,
ex_bloch_animation.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
ex_bloch_animation.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
ex_bloch_animation.py,python,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
ex_bloch_animation.py,python,,,,Directory: doc\guide\scripts\ex_bloch_animation.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
ex_steady.py,python,constant,,,Constant: N = 20,qutip,qutip,v5.0.4,,,,,N = 20,N,20,,,,,,,,,,,,
ex_steady.py,python,constant,,,Constant: a = qutip.destroy(N),qutip,qutip,v5.0.4,,,,,a = qutip.destroy(N),a,qutip.destroy(N),,,,,,,,,,,,
ex_steady.py,python,constant,,,Constant: H = a.dag() * a,qutip,qutip,v5.0.4,,,,,H = a.dag() * a,H,a.dag() * a,,,,,,,,,,,,
ex_steady.py,python,constant,,,"Constant: psi0 = qutip.basis(N, 10)",qutip,qutip,v5.0.4,,,,,"psi0 = qutip.basis(N, 10)",psi0,"qutip.basis(N, 10)",,,,,,,,,,,,
ex_steady.py,python,constant,,,Constant: kappa = 0.1,qutip,qutip,v5.0.4,,,,,kappa = 0.1,kappa,0.1,,,,,,,,,,,,
ex_steady.py,python,constant,,,Constant: c_op_list = [],qutip,qutip,v5.0.4,,,,,c_op_list = [],c_op_list,[],,,,,,,,,,,,
ex_steady.py,python,constant,,,Constant: n_th_a = 2,qutip,qutip,v5.0.4,,,,,n_th_a = 2,n_th_a,2,,,,,,,,,,,,
ex_steady.py,python,constant,,,Constant: rate = kappa * (1 + n_th_a),qutip,qutip,v5.0.4,,,,,rate = kappa * (1 + n_th_a),rate,kappa * (1 + n_th_a),,,,,,,,,,,,
ex_steady.py,python,constant,,,Constant: rate = kappa * n_th_a,qutip,qutip,v5.0.4,,,,,rate = kappa * n_th_a,rate,kappa * n_th_a,,,,,,,,,,,,
ex_steady.py,python,constant,,,"Constant: final_state = qutip.steadystate(H, c_op_list)",qutip,qutip,v5.0.4,,,,,"final_state = qutip.steadystate(H, c_op_list)",final_state,"qutip.steadystate(H, c_op_list)",,,,,,,,,,,,
ex_steady.py,python,constant,,,"Constant: fexpt = qutip.expect(a.dag() * a, final_state)",qutip,qutip,v5.0.4,,,,,"fexpt = qutip.expect(a.dag() * a, final_state)",fexpt,"qutip.expect(a.dag() * a, final_state)",,,,,,,,,,,,
ex_steady.py,python,constant,,,"Constant: tlist = np.linspace(0, 50, 100)",qutip,qutip,v5.0.4,,,,,"tlist = np.linspace(0, 50, 100)",tlist,"np.linspace(0, 50, 100)",,,,,,,,,,,,
ex_steady.py,python,constant,,,"Constant: mcdata = qutip.mcsolve(H, psi0, tlist, c_op_list, [a.dag() * a], ntraj=100)",qutip,qutip,v5.0.4,,,,,"mcdata = qutip.mcsolve(H, psi0, tlist, c_op_list, [a.dag() * a], ntraj=100)",mcdata,"qutip.mcsolve(H, psi0, tlist, c_op_list, [a.dag() * a], ntraj=100)",,,,,,,,,,,,
ex_steady.py,python,constant,,,"Constant: medata = qutip.mesolve(H, psi0, tlist, c_op_list, [a.dag() * a])",qutip,qutip,v5.0.4,,,,,"medata = qutip.mesolve(H, psi0, tlist, c_op_list, [a.dag() * a])",medata,"qutip.mesolve(H, psi0, tlist, c_op_list, [a.dag() * a])",,,,,,,,,,,,
ex_steady.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
ex_steady.py,python,import,,,Import: matplotlib.pyplot,qutip,qutip,v5.0.4,import matplotlib.pyplot as plt,matplotlib.pyplot,,,,,,,,,,,,,,,,,
ex_steady.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
ex_steady.py,python,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
ex_steady.py,python,,,,Directory: doc\guide\scripts\ex_steady.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet_ex1.py,python,constant,,,Constant: delta = 0.2 * 2*np.pi,qutip,qutip,v5.0.4,,,,,delta = 0.2 * 2*np.pi,delta,0.2 * 2*np.pi,,,,,,,,,,,,
floquet_ex1.py,python,constant,,,Constant: eps0  = 1.0 * 2*np.pi,qutip,qutip,v5.0.4,,,,,eps0  = 1.0 * 2*np.pi,eps0,1.0 * 2*np.pi,,,,,,,,,,,,
floquet_ex1.py,python,constant,,,Constant: A     = 0.5 * 2*np.pi,qutip,qutip,v5.0.4,,,,,A     = 0.5 * 2*np.pi,A,0.5 * 2*np.pi,,,,,,,,,,,,
floquet_ex1.py,python,constant,,,Constant: omega = 1.0 * 2*np.pi,qutip,qutip,v5.0.4,,,,,omega = 1.0 * 2*np.pi,omega,1.0 * 2*np.pi,,,,,,,,,,,,
floquet_ex1.py,python,constant,,,Constant: T      = (2*np.pi)/omega,qutip,qutip,v5.0.4,,,,,T      = (2*np.pi)/omega,T,(2*np.pi)/omega,,,,,,,,,,,,
floquet_ex1.py,python,constant,,,"Constant: tlist  = np.linspace(0.0, 10 * T, 101)",qutip,qutip,v5.0.4,,,,,"tlist  = np.linspace(0.0, 10 * T, 101)",tlist,"np.linspace(0.0, 10 * T, 101)",,,,,,,,,,,,
floquet_ex1.py,python,constant,,,"Constant: psi0   = qutip.basis(2, 0)",qutip,qutip,v5.0.4,,,,,"psi0   = qutip.basis(2, 0)",psi0,"qutip.basis(2, 0)",,,,,,,,,,,,
floquet_ex1.py,python,constant,,,Constant: H0 = - delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(),qutip,qutip,v5.0.4,,,,,H0 = - delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(),H0,- delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(),,,,,,,,,,,,
floquet_ex1.py,python,constant,,,Constant: H1 = A/2.0 * qutip.sigmaz(),qutip,qutip,v5.0.4,,,,,H1 = A/2.0 * qutip.sigmaz(),H1,A/2.0 * qutip.sigmaz(),,,,,,,,,,,,
floquet_ex1.py,python,constant,,,Constant: args = {'w': omega},qutip,qutip,v5.0.4,,,,,args = {'w': omega},args,{'w': omega},,,,,,,,,,,,
floquet_ex1.py,python,constant,,,"Constant: H = [H0, [H1, lambda t, w: np.sin(w * t)]]",qutip,qutip,v5.0.4,,,,,"H = [H0, [H1, lambda t, w: np.sin(w * t)]]",H,"[H0, [H1, lambda t, w: np.sin(w * t)]]",,,,,,,,,,,,
floquet_ex1.py,python,constant,,,"Constant: floquetbasis = qutip.FloquetBasis(H, T, args)",qutip,qutip,v5.0.4,,,,,"floquetbasis = qutip.FloquetBasis(H, T, args)",floquetbasis,"qutip.FloquetBasis(H, T, args)",,,,,,,,,,,,
floquet_ex1.py,python,constant,,,Constant: f_coeff = floquetbasis.to_floquet_basis(psi0),qutip,qutip,v5.0.4,,,,,f_coeff = floquetbasis.to_floquet_basis(psi0),f_coeff,floquetbasis.to_floquet_basis(psi0),,,,,,,,,,,,
floquet_ex1.py,python,constant,,,Constant: p_ex = np.zeros(len(tlist)),qutip,qutip,v5.0.4,,,,,p_ex = np.zeros(len(tlist)),p_ex,np.zeros(len(tlist)),,,,,,,,,,,,
floquet_ex1.py,python,constant,,,"Constant: p_ex_ref = qutip.mesolve(H, psi0, tlist, [], [qutip.num(2)], args).expect[0]",qutip,qutip,v5.0.4,,,,,"p_ex_ref = qutip.mesolve(H, psi0, tlist, [], [qutip.num(2)], args).expect[0]",p_ex_ref,"qutip.mesolve(H, psi0, tlist, [], [qutip.num(2)], args).expect[0]",,,,,,,,,,,,
floquet_ex1.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
floquet_ex1.py,python,import,,,Import: pyplot from matplotlib,qutip,qutip,v5.0.4,from matplotlib import pyplot,pyplot,matplotlib,,,,,,,,,,,,,,,,
floquet_ex1.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
floquet_ex1.py,python,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet_ex1.py,python,,,,Directory: doc\guide\scripts\floquet_ex1.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet_ex2.py,python,constant,,,Constant: delta = 0.0  * 2*np.pi,qutip,qutip,v5.0.4,,,,,delta = 0.0  * 2*np.pi,delta,0.0  * 2*np.pi,,,,,,,,,,,,
floquet_ex2.py,python,constant,,,Constant: eps0  = 1.0 * 2*np.pi,qutip,qutip,v5.0.4,,,,,eps0  = 1.0 * 2*np.pi,eps0,1.0 * 2*np.pi,,,,,,,,,,,,
floquet_ex2.py,python,constant,,,Constant: A     = 0.25 * 2*np.pi,qutip,qutip,v5.0.4,,,,,A     = 0.25 * 2*np.pi,A,0.25 * 2*np.pi,,,,,,,,,,,,
floquet_ex2.py,python,constant,,,Constant: omega = 1.0 * 2*np.pi,qutip,qutip,v5.0.4,,,,,omega = 1.0 * 2*np.pi,omega,1.0 * 2*np.pi,,,,,,,,,,,,
floquet_ex2.py,python,constant,,,Constant: T      = 2*np.pi / omega,qutip,qutip,v5.0.4,,,,,T      = 2*np.pi / omega,T,2*np.pi / omega,,,,,,,,,,,,
floquet_ex2.py,python,constant,,,"Constant: tlist  = np.linspace(0.0, 10 * T, 101)",qutip,qutip,v5.0.4,,,,,"tlist  = np.linspace(0.0, 10 * T, 101)",tlist,"np.linspace(0.0, 10 * T, 101)",,,,,,,,,,,,
floquet_ex2.py,python,constant,,,"Constant: psi0   = qutip.basis(2,0)",qutip,qutip,v5.0.4,,,,,"psi0   = qutip.basis(2,0)",psi0,"qutip.basis(2,0)",,,,,,,,,,,,
floquet_ex2.py,python,constant,,,Constant: H0 = - delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(),qutip,qutip,v5.0.4,,,,,H0 = - delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(),H0,- delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(),,,,,,,,,,,,
floquet_ex2.py,python,constant,,,Constant: H1 = A/2.0 * qutip.sigmax(),qutip,qutip,v5.0.4,,,,,H1 = A/2.0 * qutip.sigmax(),H1,A/2.0 * qutip.sigmax(),,,,,,,,,,,,
floquet_ex2.py,python,constant,,,Constant: args = {'w': omega},qutip,qutip,v5.0.4,,,,,args = {'w': omega},args,{'w': omega},,,,,,,,,,,,
floquet_ex2.py,python,constant,,,"Constant: H = [H0, [H1, lambda t, w: np.sin(w * t)]]",qutip,qutip,v5.0.4,,,,,"H = [H0, [H1, lambda t, w: np.sin(w * t)]]",H,"[H0, [H1, lambda t, w: np.sin(w * t)]]",,,,,,,,,,,,
floquet_ex2.py,python,constant,,,"Constant: floquetbasis = qutip.FloquetBasis(H, T, args, precompute=tlist)",qutip,qutip,v5.0.4,,,,,"floquetbasis = qutip.FloquetBasis(H, T, args, precompute=tlist)",floquetbasis,"qutip.FloquetBasis(H, T, args, precompute=tlist)",,,,,,,,,,,,
floquet_ex2.py,python,constant,,,Constant: f_coeff = floquetbasis.to_floquet_basis(psi0),qutip,qutip,v5.0.4,,,,,f_coeff = floquetbasis.to_floquet_basis(psi0),f_coeff,floquetbasis.to_floquet_basis(psi0),,,,,,,,,,,,
floquet_ex2.py,python,constant,,,Constant: p_ex = np.zeros(len(tlist)),qutip,qutip,v5.0.4,,,,,p_ex = np.zeros(len(tlist)),p_ex,np.zeros(len(tlist)),,,,,,,,,,,,
floquet_ex2.py,python,constant,,,"Constant: p_ex_ref = qutip.mesolve(H, psi0, tlist, [], [qutip.num(2)], args).expect[0]",qutip,qutip,v5.0.4,,,,,"p_ex_ref = qutip.mesolve(H, psi0, tlist, [], [qutip.num(2)], args).expect[0]",p_ex_ref,"qutip.mesolve(H, psi0, tlist, [], [qutip.num(2)], args).expect[0]",,,,,,,,,,,,
floquet_ex2.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
floquet_ex2.py,python,import,,,Import: pyplot from matplotlib,qutip,qutip,v5.0.4,from matplotlib import pyplot,pyplot,matplotlib,,,,,,,,,,,,,,,,
floquet_ex2.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
floquet_ex2.py,python,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet_ex2.py,python,,,,Directory: doc\guide\scripts\floquet_ex2.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet_ex3.py,python,function,noise_spectrum,(omega),Function: noise_spectrum(omega),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet_ex3.py,python,constant,,,Constant: delta = 0.0  * 2*np.pi,qutip,qutip,v5.0.4,,,,,delta = 0.0  * 2*np.pi,delta,0.0  * 2*np.pi,,,,,,,,,,,,
floquet_ex3.py,python,constant,,,Constant: eps0  = 1.0 * 2*np.pi,qutip,qutip,v5.0.4,,,,,eps0  = 1.0 * 2*np.pi,eps0,1.0 * 2*np.pi,,,,,,,,,,,,
floquet_ex3.py,python,constant,,,Constant: A     = 0.25 * 2*np.pi,qutip,qutip,v5.0.4,,,,,A     = 0.25 * 2*np.pi,A,0.25 * 2*np.pi,,,,,,,,,,,,
floquet_ex3.py,python,constant,,,Constant: omega = 1.0 * 2*np.pi,qutip,qutip,v5.0.4,,,,,omega = 1.0 * 2*np.pi,omega,1.0 * 2*np.pi,,,,,,,,,,,,
floquet_ex3.py,python,constant,,,Constant: T      = 2*np.pi / omega,qutip,qutip,v5.0.4,,,,,T      = 2*np.pi / omega,T,2*np.pi / omega,,,,,,,,,,,,
floquet_ex3.py,python,constant,,,"Constant: tlist  = np.linspace(0.0, 20 * T, 301)",qutip,qutip,v5.0.4,,,,,"tlist  = np.linspace(0.0, 20 * T, 301)",tlist,"np.linspace(0.0, 20 * T, 301)",,,,,,,,,,,,
floquet_ex3.py,python,constant,,,"Constant: psi0   = qutip.basis(2,0)",qutip,qutip,v5.0.4,,,,,"psi0   = qutip.basis(2,0)",psi0,"qutip.basis(2,0)",,,,,,,,,,,,
floquet_ex3.py,python,constant,,,Constant: H0 = - delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(),qutip,qutip,v5.0.4,,,,,H0 = - delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(),H0,- delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(),,,,,,,,,,,,
floquet_ex3.py,python,constant,,,Constant: H1 = A/2.0 * qutip.sigmax(),qutip,qutip,v5.0.4,,,,,H1 = A/2.0 * qutip.sigmax(),H1,A/2.0 * qutip.sigmax(),,,,,,,,,,,,
floquet_ex3.py,python,constant,,,Constant: args = {'w': omega},qutip,qutip,v5.0.4,,,,,args = {'w': omega},args,{'w': omega},,,,,,,,,,,,
floquet_ex3.py,python,constant,,,"Constant: H = [H0, [H1, lambda t, w: np.sin(w * t)]]",qutip,qutip,v5.0.4,,,,,"H = [H0, [H1, lambda t, w: np.sin(w * t)]]",H,"[H0, [H1, lambda t, w: np.sin(w * t)]]",,,,,,,,,,,,
floquet_ex3.py,python,constant,,,Constant: gamma1 = 0.1,qutip,qutip,v5.0.4,,,,,gamma1 = 0.1,gamma1,0.1,,,,,,,,,,,,
floquet_ex3.py,python,constant,,,"Constant: output = qutip.fmmesolve(
    H, psi0, tlist, [qutip.sigmax()],
    spectra_cb=[noise_spectrum], T=T,
    args=args, options={""store_floquet_states"": True}
)",qutip,qutip,v5.0.4,,,,,"output = qutip.fmmesolve(
    H, psi0, tlist, [qutip.sigmax()],
    spectra_cb=[noise_spectrum], T=T,
    args=args, options={""store_floquet_states"": True}
)",output,"qutip.fmmesolve(
    H, psi0, tlist, [qutip.sigmax()],
    spectra_cb=[noise_spectrum], T=T,
    args=args, options={""store_floquet_states"": True}
)",,,,,,,,,,,,
floquet_ex3.py,python,constant,,,"Constant: p_ex = np.zeros(tlist.shape, dtype=np.complex128)",qutip,qutip,v5.0.4,,,,,"p_ex = np.zeros(tlist.shape, dtype=np.complex128)",p_ex,"np.zeros(tlist.shape, dtype=np.complex128)",,,,,,,,,,,,
floquet_ex3.py,python,constant,,,"Constant: output = qutip.mesolve(H, psi0, tlist,
                       [np.sqrt(gamma1) * qutip.sigmax()], [qutip.num(2)],
                       args)",qutip,qutip,v5.0.4,,,,,"output = qutip.mesolve(H, psi0, tlist,
                       [np.sqrt(gamma1) * qutip.sigmax()], [qutip.num(2)],
                       args)",output,"qutip.mesolve(H, psi0, tlist,
                       [np.sqrt(gamma1) * qutip.sigmax()], [qutip.num(2)],
                       args)",,,,,,,,,,,,
floquet_ex3.py,python,constant,,,Constant: p_ex_ref = output.expect[0],qutip,qutip,v5.0.4,,,,,p_ex_ref = output.expect[0],p_ex_ref,output.expect[0],,,,,,,,,,,,
floquet_ex3.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
floquet_ex3.py,python,import,,,Import: pyplot from matplotlib,qutip,qutip,v5.0.4,from matplotlib import pyplot,pyplot,matplotlib,,,,,,,,,,,,,,,,
floquet_ex3.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
floquet_ex3.py,python,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet_ex3.py,python,,,,Directory: doc\guide\scripts\floquet_ex3.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
spectrum_ex1.py,python,constant,,,Constant: N = 4,qutip,qutip,v5.0.4,,,,,N = 4,N,4,,,,,,,,,,,,
spectrum_ex1.py,python,constant,,,Constant: wc = wa = 1.0 * 2 * np.pi,qutip,qutip,v5.0.4,,,,,wc = wa = 1.0 * 2 * np.pi,wc,wa = 1.0 * 2 * np.pi,,,,,,,,,,,,
spectrum_ex1.py,python,constant,,,Constant: g  = 0.1 * 2 * np.pi,qutip,qutip,v5.0.4,,,,,g  = 0.1 * 2 * np.pi,g,0.1 * 2 * np.pi,,,,,,,,,,,,
spectrum_ex1.py,python,constant,,,Constant: kappa = 0.75,qutip,qutip,v5.0.4,,,,,kappa = 0.75,kappa,0.75,,,,,,,,,,,,
spectrum_ex1.py,python,constant,,,Constant: gamma = 0.25,qutip,qutip,v5.0.4,,,,,gamma = 0.25,gamma,0.25,,,,,,,,,,,,
spectrum_ex1.py,python,constant,,,"Constant: a  = qutip.tensor(qutip.destroy(N), qutip.qeye(2))",qutip,qutip,v5.0.4,,,,,"a  = qutip.tensor(qutip.destroy(N), qutip.qeye(2))",a,"qutip.tensor(qutip.destroy(N), qutip.qeye(2))",,,,,,,,,,,,
spectrum_ex1.py,python,constant,,,"Constant: sm = qutip.tensor(qutip.qeye(N), qutip.destroy(2))",qutip,qutip,v5.0.4,,,,,"sm = qutip.tensor(qutip.qeye(N), qutip.destroy(2))",sm,"qutip.tensor(qutip.qeye(N), qutip.destroy(2))",,,,,,,,,,,,
spectrum_ex1.py,python,constant,,,Constant: H = wc*a.dag()*a + wa*sm.dag()*sm + g*(a.dag()*sm + a*sm.dag()),qutip,qutip,v5.0.4,,,,,H = wc*a.dag()*a + wa*sm.dag()*sm + g*(a.dag()*sm + a*sm.dag()),H,wc*a.dag()*a + wa*sm.dag()*sm + g*(a.dag()*sm + a*sm.dag()),,,,,,,,,,,,
spectrum_ex1.py,python,constant,,,Constant: n_th = 0.25,qutip,qutip,v5.0.4,,,,,n_th = 0.25,n_th,0.25,,,,,,,,,,,,
spectrum_ex1.py,python,constant,,,"Constant: c_ops = [
    np.sqrt(kappa * (1 + n_th)) * a,
    np.sqrt(kappa * n_th) * a.dag(),
    np.sqrt(gamma) * sm,
]",qutip,qutip,v5.0.4,,,,,"c_ops = [
    np.sqrt(kappa * (1 + n_th)) * a,
    np.sqrt(kappa * n_th) * a.dag(),
    np.sqrt(gamma) * sm,
]",c_ops,"[
    np.sqrt(kappa * (1 + n_th)) * a,
    np.sqrt(kappa * n_th) * a.dag(),
    np.sqrt(gamma) * sm,
]",,,,,,,,,,,,
spectrum_ex1.py,python,constant,,,"Constant: tlist = np.linspace(0, 100, 5000)",qutip,qutip,v5.0.4,,,,,"tlist = np.linspace(0, 100, 5000)",tlist,"np.linspace(0, 100, 5000)",,,,,,,,,,,,
spectrum_ex1.py,python,constant,,,"Constant: corr = qutip.correlation_2op_1t(H, None, tlist, c_ops, a.dag(), a)",qutip,qutip,v5.0.4,,,,,"corr = qutip.correlation_2op_1t(H, None, tlist, c_ops, a.dag(), a)",corr,"qutip.correlation_2op_1t(H, None, tlist, c_ops, a.dag(), a)",,,,,,,,,,,,
spectrum_ex1.py,python,constant,,,"Constant: wlist2 = np.linspace(0.25, 1.75, 200) * 2 * np.pi",qutip,qutip,v5.0.4,,,,,"wlist2 = np.linspace(0.25, 1.75, 200) * 2 * np.pi",wlist2,"np.linspace(0.25, 1.75, 200) * 2 * np.pi",,,,,,,,,,,,
spectrum_ex1.py,python,constant,,,"Constant: spec2 = qutip.spectrum(H, wlist2, c_ops, a.dag(), a)",qutip,qutip,v5.0.4,,,,,"spec2 = qutip.spectrum(H, wlist2, c_ops, a.dag(), a)",spec2,"qutip.spectrum(H, wlist2, c_ops, a.dag(), a)",,,,,,,,,,,,
spectrum_ex1.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
spectrum_ex1.py,python,import,,,Import: pyplot from matplotlib,qutip,qutip,v5.0.4,from matplotlib import pyplot,pyplot,matplotlib,,,,,,,,,,,,,,,,
spectrum_ex1.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
spectrum_ex1.py,python,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
spectrum_ex1.py,python,,,,Directory: doc\guide\scripts\spectrum_ex1.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qutip-structure.py,python,function,_our_tree,"(module, tree)","Function: _our_tree(module, tree)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qutip-structure.py,python,function,_ignore,"(module, root)","Function: _ignore(module, root)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qutip-structure.py,python,function,python_object_tree,"(module, tree=None, seen=None, root=None, nobjects=0)","Function: python_object_tree(module, tree=None, seen=None, root=None, nobjects=0)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qutip-structure.py,python,function,_lookup_color,"(basename, index, color)","Function: _lookup_color(basename, index, color)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qutip-structure.py,python,function,convert_to_d3_struct,"(in_tree, name, index=-1, color=None, basename=None)","Function: convert_to_d3_struct(in_tree, name, index=-1, color=None, basename=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qutip-structure.py,python,constant,,,Constant: root_directory = pathlib.Path(qutip.__file__).parent,qutip,qutip,v5.0.4,,,,,root_directory = pathlib.Path(qutip.__file__).parent,root_directory,pathlib.Path(qutip.__file__).parent,,,,,,,,,,,,
qutip-structure.py,python,constant,,,"Constant: module_groups = [
    # Solvers
    (""#0b5fa5"", {
        ""mesolve"", ""mcsolve"", ""sesolve"", ""stochastic"", ""bloch_redfield"",
        ""nonmarkov"", ""floquet"", ""essolve"", ""correlation"", ""steadystate"",
        ""rhs_generate"", ""propagator"", ""eseries"", ""hsolve"", ""rcsolve"",
        ""scattering"", ""piqs"", ""pdpsolve"",
    }),
    # Options and settings
    (""#043c6b"", {""settings"", ""configrc"", ""solver""}),
    # Visualisation
    (""#3f8fd2"", {
        ""bloch"", ""sphereplot"", ""orbital"", ""visualization"", ""wigner"",
        ""distributions"", ""tomography"", ""topology"",
    }),
    # Operators
    (""#00ae68"", {
        ""operators"", ""superoperator"", ""superop_reps"", ""subsystem_apply"",
    }),
    # States
    (""#007143"", {
        ""states"", ""continuous_variables"", ""qstate"", ""random_objects"",
    }),
    # QIP
    (""#36d695"", {""measurement""}),
    # Metrics and distance measures
    (""#ff4500"", {""entropy"", ""metrics"", ""countstat"", ""semidefinite""}),
    # Core
    (""#692102"", {
        ""qobj"", ""qobjevo"", ""expect"", ""tensor"", ""partial_transpose"", ""ptrace"",
        ""cy"", ""fastsparse"", ""interpolate"",
    }),
    # Utilities
    (""#bf5730"", {
        ""fileio"", ""utilities"", ""ipynbtools"", ""sparse"", ""graph"", ""simdiag"",
        ""permute"", ""demos"", ""about"", ""parallel"", ""version"", ""testing"",
        ""hardware_info"", ""ui"", ""cite"",
    }),
]",qutip,qutip,v5.0.4,,,,,"module_groups = [
    # Solvers
    (""#0b5fa5"", {
        ""mesolve"", ""mcsolve"", ""sesolve"", ""stochastic"", ""bloch_redfield"",
        ""nonmarkov"", ""floquet"", ""essolve"", ""correlation"", ""steadystate"",
        ""rhs_generate"", ""propagator"", ""eseries"", ""hsolve"", ""rcsolve"",
        ""scattering"", ""piqs"", ""pdpsolve"",
    }),
    # Options and settings
    (""#043c6b"", {""settings"", ""configrc"", ""solver""}),
    # Visualisation
    (""#3f8fd2"", {
        ""bloch"", ""sphereplot"", ""orbital"", ""visualization"", ""wigner"",
        ""distributions"", ""tomography"", ""topology"",
    }),
    # Operators
    (""#00ae68"", {
        ""operators"", ""superoperator"", ""superop_reps"", ""subsystem_apply"",
    }),
    # States
    (""#007143"", {
        ""states"", ""continuous_variables"", ""qstate"", ""random_objects"",
    }),
    # QIP
    (""#36d695"", {""measurement""}),
    # Metrics and distance measures
    (""#ff4500"", {""entropy"", ""metrics"", ""countstat"", ""semidefinite""}),
    # Core
    (""#692102"", {
        ""qobj"", ""qobjevo"", ""expect"", ""tensor"", ""partial_transpose"", ""ptrace"",
        ""cy"", ""fastsparse"", ""interpolate"",
    }),
    # Utilities
    (""#bf5730"", {
        ""fileio"", ""utilities"", ""ipynbtools"", ""sparse"", ""graph"", ""simdiag"",
        ""permute"", ""demos"", ""about"", ""parallel"", ""version"", ""testing"",
        ""hardware_info"", ""ui"", ""cite"",
    }),
]",module_groups,"[
    # Solvers
    (""#0b5fa5"", {
        ""mesolve"", ""mcsolve"", ""sesolve"", ""stochastic"", ""bloch_redfield"",
        ""nonmarkov"", ""floquet"", ""essolve"", ""correlation"", ""steadystate"",
        ""rhs_generate"", ""propagator"", ""eseries"", ""hsolve"", ""rcsolve"",
        ""scattering"", ""piqs"", ""pdpsolve"",
    }),
    # Options and settings
    (""#043c6b"", {""settings"", ""configrc"", ""solver""}),
    # Visualisation
    (""#3f8fd2"", {
        ""bloch"", ""sphereplot"", ""orbital"", ""visualization"", ""wigner"",
        ""distributions"", ""tomography"", ""topology"",
    }),
    # Operators
    (""#00ae68"", {
        ""operators"", ""superoperator"", ""superop_reps"", ""subsystem_apply"",
    }),
    # States
    (""#007143"", {
        ""states"", ""continuous_variables"", ""qstate"", ""random_objects"",
    }),
    # QIP
    (""#36d695"", {""measurement""}),
    # Metrics and distance measures
    (""#ff4500"", {""entropy"", ""metrics"", ""countstat"", ""semidefinite""}),
    # Core
    (""#692102"", {
        ""qobj"", ""qobjevo"", ""expect"", ""tensor"", ""partial_transpose"", ""ptrace"",
        ""cy"", ""fastsparse"", ""interpolate"",
    }),
    # Utilities
    (""#bf5730"", {
        ""fileio"", ""utilities"", ""ipynbtools"", ""sparse"", ""graph"", ""simdiag"",
        ""permute"", ""demos"", ""about"", ""parallel"", ""version"", ""testing"",
        ""hardware_info"", ""ui"", ""cite"",
    }),
]",,,,,,,,,,,,
qutip-structure.py,python,constant,,,"Constant: modules_ignored = {
    ""dimensions"",
    ""logging_utils"",
    ""matplotlib_utilities"",
    ""legacy"",
    ""qobjevo_codegen"",
    ""_mkl"",
    ""cy.pyxbuilder"",
    ""cy.openmp"",
    ""cy.graph_utils"",
    ""cy.inter"",
    ""cy.cqobjevo"",
    ""cy.cqobjevo_factor"",
    ""cy.codegen"",
    ""cy.br_codegen"",
    ""cy.ptrace"",
}",qutip,qutip,v5.0.4,,,,,"modules_ignored = {
    ""dimensions"",
    ""logging_utils"",
    ""matplotlib_utilities"",
    ""legacy"",
    ""qobjevo_codegen"",
    ""_mkl"",
    ""cy.pyxbuilder"",
    ""cy.openmp"",
    ""cy.graph_utils"",
    ""cy.inter"",
    ""cy.cqobjevo"",
    ""cy.cqobjevo_factor"",
    ""cy.codegen"",
    ""cy.br_codegen"",
    ""cy.ptrace"",
}",modules_ignored,"{
    ""dimensions"",
    ""logging_utils"",
    ""matplotlib_utilities"",
    ""legacy"",
    ""qobjevo_codegen"",
    ""_mkl"",
    ""cy.pyxbuilder"",
    ""cy.openmp"",
    ""cy.graph_utils"",
    ""cy.inter"",
    ""cy.cqobjevo"",
    ""cy.cqobjevo_factor"",
    ""cy.codegen"",
    ""cy.br_codegen"",
    ""cy.ptrace"",
}",,,,,,,,,,,,
qutip-structure.py,python,import,,,Import: inspect,qutip,qutip,v5.0.4,import inspect,inspect,,,,,,,,,,,,,,,,,
qutip-structure.py,python,import,,,Import: pathlib,qutip,qutip,v5.0.4,import pathlib,pathlib,,,,,,,,,,,,,,,,,
qutip-structure.py,python,import,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,warnings,,,,,,,,,,,,,,,,,
qutip-structure.py,python,import,,,Import: sys,qutip,qutip,v5.0.4,import sys,sys,,,,,,,,,,,,,,,,,
qutip-structure.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
qutip-structure.py,python,,,,File: doc\QuTiP_tree_plot,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qutip-structure.py,python,,,,Directory: doc\QuTiP_tree_plot\qutip-structure.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
about.py,python,function,about,(),Function: about(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
about.py,python,constant,,,Constant: __all__ = ['about'],qutip,qutip,v5.0.4,,,,,__all__ = ['about'],__all__,['about'],,,,,,,,,,,,
about.py,python,import,,,Import: sys,qutip,qutip,v5.0.4,import sys,sys,,,,,,,,,,,,,,,,,
about.py,python,import,,,Import: os,qutip,qutip,v5.0.4,import os,os,,,,,,,,,,,,,,,,,
about.py,python,import,,,Import: platform,qutip,qutip,v5.0.4,import platform,platform,,,,,,,,,,,,,,,,,
about.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy,numpy,,,,,,,,,,,,,,,,,
about.py,python,import,,,Import: scipy,qutip,qutip,v5.0.4,import scipy,scipy,,,,,,,,,,,,,,,,,
about.py,python,import,,,Import: inspect,qutip,qutip,v5.0.4,import inspect,inspect,,,,,,,,,,,,,,,,,
about.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
about.py,python,local_import,,,Import: _blas_info from qutip.settings,qutip,qutip,v5.0.4,"from qutip.settings import _blas_info, settings",_blas_info,qutip.settings,qutip.settings,,,,,,,,,,,,,,,
about.py,python,local_import,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,"from qutip.settings import _blas_info, settings",settings,qutip.settings,qutip.settings,,,,,,,,,,,,,,,
about.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
about.py,python,,,,Directory: qutip\about.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
animation.py,python,function,_result_state,(obj),Function: _result_state(obj),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
animation.py,python,function,anim_wigner_sphere,"(wigners, reflections=False, *, cmap=None,
                       colorbar=True, fig=None, ax=None)","Function: anim_wigner_sphere(wigners, reflections=False, *, cmap=None,
                       colorbar=True, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
animation.py,python,function,anim_hinton,"(rhos, x_basis=None, y_basis=None, color_style=""scaled"",
                label_top=True, *, cmap=None, colorbar=True,
                fig=None, ax=None)","Function: anim_hinton(rhos, x_basis=None, y_basis=None, color_style=""scaled"",
                label_top=True, *, cmap=None, colorbar=True,
                fig=None, ax=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
animation.py,python,function,anim_sphereplot,"(V, theta, phi, *, cmap=None,
                    colorbar=True, fig=None, ax=None)","Function: anim_sphereplot(V, theta, phi, *, cmap=None,
                    colorbar=True, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
animation.py,python,function,anim_matrix_histogram,"(Ms, x_basis=None, y_basis=None, limits=None,
                          bar_style='real', color_limits=None,
                          color_style='real', options=None, *, cmap=None,
                          colorbar=True, fig=None, ax=None)","Function: anim_matrix_histogram(Ms, x_basis=None, y_basis=None, limits=None,
                          bar_style='real', color_limits=None,
                          color_style='real', options=None, *, cmap=None,
                          colorbar=True, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
animation.py,python,function,anim_fock_distribution,"(rhos, fock_numbers=None, color=""green"",
                           unit_y_range=True, *, fig=None, ax=None)","Function: anim_fock_distribution(rhos, fock_numbers=None, color=""green"",
                           unit_y_range=True, *, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
animation.py,python,function,anim_wigner,"(rhos, xvec=None, yvec=None, method='clenshaw', projection='2d',
                g=sqrt(2), sparse=False, parfor=False, *,
                cmap=None, colorbar=False, fig=None, ax=None)","Function: anim_wigner(rhos, xvec=None, yvec=None, method='clenshaw', projection='2d',
                g=sqrt(2), sparse=False, parfor=False, *,
                cmap=None, colorbar=False, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
animation.py,python,function,anim_spin_distribution,"(Ps, THETA, PHI, projection='2d', *,
                           cmap=None, colorbar=False, fig=None, ax=None)","Function: anim_spin_distribution(Ps, THETA, PHI, projection='2d', *,
                           cmap=None, colorbar=False, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
animation.py,python,function,anim_qubism,"(kets, theme='light', how='pairs', grid_iteration=1,
                legend_iteration=0, *, fig=None, ax=None)","Function: anim_qubism(kets, theme='light', how='pairs', grid_iteration=1,
                legend_iteration=0, *, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
animation.py,python,function,anim_schmidt,"(kets, theme='light', splitting=None,
                 labels_iteration=(3, 2), *, fig=None, ax=None)","Function: anim_schmidt(kets, theme='light', splitting=None,
                 labels_iteration=(3, 2), *, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
animation.py,python,constant,,,"Constant: __all__ = ['anim_wigner_sphere', 'anim_hinton', 'anim_sphereplot',
           'anim_matrix_histogram', 'anim_fock_distribution', 'anim_wigner',
           'anim_spin_distribution', 'anim_qubism', 'anim_schmidt']",qutip,qutip,v5.0.4,,,,,"__all__ = ['anim_wigner_sphere', 'anim_hinton', 'anim_sphereplot',
           'anim_matrix_histogram', 'anim_fock_distribution', 'anim_wigner',
           'anim_spin_distribution', 'anim_qubism', 'anim_schmidt']",__all__,"['anim_wigner_sphere', 'anim_hinton', 'anim_sphereplot',
           'anim_matrix_histogram', 'anim_fock_distribution', 'anim_wigner',
           'anim_spin_distribution', 'anim_qubism', 'anim_schmidt']",,,,,,,,,,,,
animation.py,python,import,,,Import: sqrt from numpy,qutip,qutip,v5.0.4,from numpy import sqrt,sqrt,numpy,,,,,,,,,,,,,,,,
animation.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
animation.py,python,,,,Directory: qutip\animation.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
bloch.py,python,class_field,,,"Class field: [instance] Arrow3D._verts3d = xs, ys, zs",qutip,qutip,v5.0.4,,,,,,,,,Arrow3D,__init__,"(self, xs, ys, zs, *args, **kwargs)","self._verts3d = xs, ys, zs","self._verts3d = xs, ys, zs",,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.fig = fig,qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.fig = fig,self.fig = fig,,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch._ext_fig = fig is not None,qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self._ext_fig = fig is not None,self._ext_fig = fig is not None,,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.axes = axes,qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.axes = axes,self.axes = axes,,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.background = background,qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.background = background,self.background = background,,,,,,
bloch.py,python,class_field,,,"Class field: [instance] Bloch.figsize = figsize if figsize else [5, 5]",qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.figsize = figsize if figsize else [5, 5]","self.figsize = figsize if figsize else [5, 5]",,,,,,
bloch.py,python,class_field,,,"Class field: [instance] Bloch.view = view if view else [-60, 30]",qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.view = view if view else [-60, 30]","self.view = view if view else [-60, 30]",,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.sphere_color = '#FFDDDD',qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.sphere_color = '#FFDDDD',self.sphere_color = '#FFDDDD',,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.sphere_alpha = 0.2,qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.sphere_alpha = 0.2,self.sphere_alpha = 0.2,,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.frame_color = 'gray',qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.frame_color = 'gray',self.frame_color = 'gray',,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.frame_width = 1,qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.frame_width = 1,self.frame_width = 1,,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.frame_alpha = 0.2,qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.frame_alpha = 0.2,self.frame_alpha = 0.2,,,,,,
bloch.py,python,class_field,,,"Class field: [instance] Bloch.xlabel = ['$x$', '']",qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.xlabel = ['$x$', '']","self.xlabel = ['$x$', '']",,,,,,
bloch.py,python,class_field,,,"Class field: [instance] Bloch.xlpos = [1.2, -1.2]",qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.xlpos = [1.2, -1.2]","self.xlpos = [1.2, -1.2]",,,,,,
bloch.py,python,class_field,,,"Class field: [instance] Bloch.ylabel = ['$y$', '']",qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.ylabel = ['$y$', '']","self.ylabel = ['$y$', '']",,,,,,
bloch.py,python,class_field,,,"Class field: [instance] Bloch.ylpos = [1.2, -1.2]",qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.ylpos = [1.2, -1.2]","self.ylpos = [1.2, -1.2]",,,,,,
bloch.py,python,class_field,,,"Class field: [instance] Bloch.zlabel = [r'$\left|0\right>$', r'$\left|1\right>$']",qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.zlabel = [r'$\left|0\right>$', r'$\left|1\right>$']","self.zlabel = [r'$\left|0\right>$', r'$\left|1\right>$']",,,,,,
bloch.py,python,class_field,,,"Class field: [instance] Bloch.zlpos = [1.2, -1.2]",qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.zlpos = [1.2, -1.2]","self.zlpos = [1.2, -1.2]",,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.font_color = 'black',qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.font_color = 'black',self.font_color = 'black',,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.font_size = 20,qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.font_size = 20,self.font_size = 20,,,,,,
bloch.py,python,class_field,,,"Class field: [instance] Bloch.vector_default_color = ['g', '#CC6600', 'b', 'r']",qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.vector_default_color = ['g', '#CC6600', 'b', 'r']","self.vector_default_color = ['g', '#CC6600', 'b', 'r']",,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.vector_color = [],qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.vector_color = [],self.vector_color = [],,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.vector_width = 3,qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.vector_width = 3,self.vector_width = 3,,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.vector_style = '-|>',qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.vector_style = '-|>',self.vector_style = '-|>',,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.vector_mutation = 20,qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.vector_mutation = 20,self.vector_mutation = 20,,,,,,
bloch.py,python,class_field,,,"Class field: [instance] Bloch.point_default_color = ['b', 'r', 'g', '#CC6600']",qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.point_default_color = ['b', 'r', 'g', '#CC6600']","self.point_default_color = ['b', 'r', 'g', '#CC6600']",,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.point_color = None,qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.point_color = None,self.point_color = None,,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch._inner_point_color = [],qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self._inner_point_color = [],self._inner_point_color = [],,,,,,
bloch.py,python,class_field,,,"Class field: [instance] Bloch.point_size = [25, 32, 35, 45]",qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.point_size = [25, 32, 35, 45]","self.point_size = [25, 32, 35, 45]",,,,,,
bloch.py,python,class_field,,,"Class field: [instance] Bloch.point_marker = ['o', 's', 'd', '^']",qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.point_marker = ['o', 's', 'd', '^']","self.point_marker = ['o', 's', 'd', '^']",,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.points = [],qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.points = [],self.points = [],,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.vectors = [],qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.vectors = [],self.vectors = [],,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.vector_alpha = [],qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.vector_alpha = [],self.vector_alpha = [],,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.annotations = [],qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.annotations = [],self.annotations = [],,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.savenum = 0,qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.savenum = 0,self.savenum = 0,,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.point_style = [],qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.point_style = [],self.point_style = [],,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch.point_alpha = [],qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.point_alpha = [],self.point_alpha = [],,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch._lines = [],qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self._lines = [],self._lines = [],,,,,,
bloch.py,python,class_field,,,Class field: [instance] Bloch._arcs = [],qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self._arcs = [],self._arcs = [],,,,,,
bloch.py,python,class_method,,,"Class method: Arrow3D.__init__(self, xs, ys, zs, *args, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,Arrow3D,__init__,"(self, xs, ys, zs, *args, **kwargs)",,,,,,,,
bloch.py,python,class_method,,,"Class method: Arrow3D.draw(self, renderer)",qutip,qutip,v5.0.4,,,,,,,,,Arrow3D,draw,"(self, renderer)",,,,,,,,
bloch.py,python,class_method,,,"Class method: Arrow3D.do_3d_projection(self, renderer=None)",qutip,qutip,v5.0.4,,,,,,,,,Arrow3D,do_3d_projection,"(self, renderer=None)",,,,,,,,
bloch.py,python,class_method,,,"Class method: Bloch.__init__(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",qutip,qutip,v5.0.4,,,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",,,,,,,,
bloch.py,python,class_method,,,"Class method: Bloch.set_label_convention(self, convention)",qutip,qutip,v5.0.4,,,,,,,,,Bloch,set_label_convention,"(self, convention)",,,,,,,,
bloch.py,python,class_method,,,Class method: Bloch.__str__(self),qutip,qutip,v5.0.4,,,,,,,,,Bloch,__str__,(self),,,,,,,,
bloch.py,python,class_method,,,Class method: Bloch._repr_png_(self),qutip,qutip,v5.0.4,,,,,,,,,Bloch,_repr_png_,(self),,,,,,,,
bloch.py,python,class_method,,,Class method: Bloch._repr_svg_(self),qutip,qutip,v5.0.4,,,,,,,,,Bloch,_repr_svg_,(self),,,,,,,,
bloch.py,python,class_method,,,Class method: Bloch.clear(self),qutip,qutip,v5.0.4,,,,,,,,,Bloch,clear,(self),,,,,,,,
bloch.py,python,class_method,,,"Class method: Bloch.add_points(self, points, meth='s', colors=None, alpha=1.0)",qutip,qutip,v5.0.4,,,,,,,,,Bloch,add_points,"(self, points, meth='s', colors=None, alpha=1.0)",,,,,,,,
bloch.py,python,class_method,,,"Class method: Bloch.add_states(self, state, kind='vector', colors=None, alpha=1.0)",qutip,qutip,v5.0.4,,,,,,,,,Bloch,add_states,"(self, state, kind='vector', colors=None, alpha=1.0)",,,,,,,,
bloch.py,python,class_method,,,"Class method: Bloch.add_vectors(self, vectors, colors=None, alpha=1.0)",qutip,qutip,v5.0.4,,,,,,,,,Bloch,add_vectors,"(self, vectors, colors=None, alpha=1.0)",,,,,,,,
bloch.py,python,class_method,,,"Class method: Bloch.add_annotation(self, state_or_vector, text, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,Bloch,add_annotation,"(self, state_or_vector, text, **kwargs)",,,,,,,,
bloch.py,python,class_method,,,"Class method: Bloch.add_arc(self, start, end, fmt=""b"", steps=None, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,Bloch,add_arc,"(self, start, end, fmt=""b"", steps=None, **kwargs)",,,,,,,,
bloch.py,python,class_method,,,"Class method: Bloch.add_line(self, start, end, fmt=""k"", **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,Bloch,add_line,"(self, start, end, fmt=""k"", **kwargs)",,,,,,,,
bloch.py,python,class_method,,,Class method: Bloch.make_sphere(self),qutip,qutip,v5.0.4,,,,,,,,,Bloch,make_sphere,(self),,,,,,,,
bloch.py,python,class_method,,,Class method: Bloch.run_from_ipython(self),qutip,qutip,v5.0.4,,,,,,,,,Bloch,run_from_ipython,(self),,,,,,,,
bloch.py,python,class_method,,,Class method: Bloch._is_inline_backend(self),qutip,qutip,v5.0.4,,,,,,,,,Bloch,_is_inline_backend,(self),,,,,,,,
bloch.py,python,class_method,,,Class method: Bloch.render(self),qutip,qutip,v5.0.4,,,,,,,,,Bloch,render,(self),,,,,,,,
bloch.py,python,class_method,,,Class method: Bloch.plot_back(self),qutip,qutip,v5.0.4,,,,,,,,,Bloch,plot_back,(self),,,,,,,,
bloch.py,python,class_method,,,Class method: Bloch.plot_front(self),qutip,qutip,v5.0.4,,,,,,,,,Bloch,plot_front,(self),,,,,,,,
bloch.py,python,class_method,,,Class method: Bloch.plot_axes(self),qutip,qutip,v5.0.4,,,,,,,,,Bloch,plot_axes,(self),,,,,,,,
bloch.py,python,class_method,,,Class method: Bloch.plot_axes_labels(self),qutip,qutip,v5.0.4,,,,,,,,,Bloch,plot_axes_labels,(self),,,,,,,,
bloch.py,python,class_method,,,Class method: Bloch.plot_vectors(self),qutip,qutip,v5.0.4,,,,,,,,,Bloch,plot_vectors,(self),,,,,,,,
bloch.py,python,class_method,,,Class method: Bloch.plot_points(self),qutip,qutip,v5.0.4,,,,,,,,,Bloch,plot_points,(self),,,,,,,,
bloch.py,python,class_method,,,Class method: Bloch.plot_annotations(self),qutip,qutip,v5.0.4,,,,,,,,,Bloch,plot_annotations,(self),,,,,,,,
bloch.py,python,class_method,,,Class method: Bloch.plot_lines(self),qutip,qutip,v5.0.4,,,,,,,,,Bloch,plot_lines,(self),,,,,,,,
bloch.py,python,class_method,,,Class method: Bloch.plot_arcs(self),qutip,qutip,v5.0.4,,,,,,,,,Bloch,plot_arcs,(self),,,,,,,,
bloch.py,python,class_method,,,Class method: Bloch.show(self),qutip,qutip,v5.0.4,,,,,,,,,Bloch,show,(self),,,,,,,,
bloch.py,python,class_method,,,"Class method: Bloch.save(self, name=None, format='png', dirc=None, dpin=None)",qutip,qutip,v5.0.4,,,,,,,,,Bloch,save,"(self, name=None, format='png', dirc=None, dpin=None)",,,,,,,,
bloch.py,python,class,,,Class: Arrow3D(FancyArrowPatch),qutip,qutip,v5.0.4,,,,,,,,,Arrow3D,,,,,(FancyArrowPatch),,,,,
bloch.py,python,class,,,Class: Bloch,qutip,qutip,v5.0.4,,,,,,,,,Bloch,,,,,,,,,,
bloch.py,python,function,_hide_tick_lines_and_labels,(axis),Function: _hide_tick_lines_and_labels(axis),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
bloch.py,python,constant,,,Constant: __all__ = ['Bloch'],qutip,qutip,v5.0.4,,,,,__all__ = ['Bloch'],__all__,['Bloch'],,,,,,,,,,,,
bloch.py,python,import,,,Import: os,qutip,qutip,v5.0.4,import os,os,,,,,,,,,,,,,,,,,
bloch.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
bloch.py,python,import,,,Import: outer from numpy,qutip,qutip,v5.0.4,"from numpy import (outer, cos, sin, ones)",outer,numpy,,,,,,,,,,,,,,,,
bloch.py,python,import,,,Import: cos from numpy,qutip,qutip,v5.0.4,"from numpy import (outer, cos, sin, ones)",cos,numpy,,,,,,,,,,,,,,,,
bloch.py,python,import,,,Import: sin from numpy,qutip,qutip,v5.0.4,"from numpy import (outer, cos, sin, ones)",sin,numpy,,,,,,,,,,,,,,,,
bloch.py,python,import,,,Import: ones from numpy,qutip,qutip,v5.0.4,"from numpy import (outer, cos, sin, ones)",ones,numpy,,,,,,,,,,,,,,,,
bloch.py,python,local_import,,,Import: parse from packaging.version,qutip,qutip,v5.0.4,from packaging.version import parse as parse_version,parse,packaging.version,packaging.version,,,,,,,,,,,,,,,
bloch.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
bloch.py,python,,,,Directory: qutip\bloch.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
cite.py,python,function,cite,"(save=False, path=None)","Function: cite(save=False, path=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
cite.py,python,constant,,,Constant: __all__ = ['cite'],qutip,qutip,v5.0.4,,,,,__all__ = ['cite'],__all__,['cite'],,,,,,,,,,,,
cite.py,python,import,,,Import: os,qutip,qutip,v5.0.4,import os,os,,,,,,,,,,,,,,,,,
cite.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
cite.py,python,,,,Directory: qutip\cite.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
continuous_variables.py,python,function,correlation_matrix,"(basis, rho=None)","Function: correlation_matrix(basis, rho=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
continuous_variables.py,python,function,covariance_matrix,"(basis, rho, symmetrized=True)","Function: covariance_matrix(basis, rho, symmetrized=True)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
continuous_variables.py,python,function,correlation_matrix_field,"(a1, a2, rho=None)","Function: correlation_matrix_field(a1, a2, rho=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
continuous_variables.py,python,function,correlation_matrix_quadrature,"(a1, a2, rho=None, g=np.sqrt(2))","Function: correlation_matrix_quadrature(a1, a2, rho=None, g=np.sqrt(2))",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
continuous_variables.py,python,function,wigner_covariance_matrix,"(a1=None, a2=None, R=None, rho=None, g=np.sqrt(2))","Function: wigner_covariance_matrix(a1=None, a2=None, R=None, rho=None, g=np.sqrt(2))",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
continuous_variables.py,python,function,logarithmic_negativity,"(V, g=np.sqrt(2))","Function: logarithmic_negativity(V, g=np.sqrt(2))",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
continuous_variables.py,python,constant,,,"Constant: __all__ = ['correlation_matrix', 'covariance_matrix',
           'correlation_matrix_field', 'correlation_matrix_quadrature',
           'wigner_covariance_matrix', 'logarithmic_negativity']",qutip,qutip,v5.0.4,,,,,"__all__ = ['correlation_matrix', 'covariance_matrix',
           'correlation_matrix_field', 'correlation_matrix_quadrature',
           'wigner_covariance_matrix', 'logarithmic_negativity']",__all__,"['correlation_matrix', 'covariance_matrix',
           'correlation_matrix_field', 'correlation_matrix_quadrature',
           'wigner_covariance_matrix', 'logarithmic_negativity']",,,,,,,,,,,,
continuous_variables.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
continuous_variables.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
continuous_variables.py,python,,,,Directory: qutip\continuous_variables.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
control.py,python,import,,,Import: sys,qutip,qutip,v5.0.4,import sys,sys,,,,,,,,,,,,,,,,,
control.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
control.py,python,,,,Directory: qutip\control.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
distributions.py,python,class_field,,,Class field: [instance] Distribution.data = data,qutip,qutip,v5.0.4,,,,,,,,,Distribution,__init__,"(self, data=None, xvecs=[], xlabels=[])",self.data = data,self.data = data,,,,,,
distributions.py,python,class_field,,,Class field: [instance] Distribution.xvecs = xvecs,qutip,qutip,v5.0.4,,,,,,,,,Distribution,__init__,"(self, data=None, xvecs=[], xlabels=[])",self.xvecs = xvecs,self.xvecs = xvecs,,,,,,
distributions.py,python,class_field,,,Class field: [instance] Distribution.xlabels = xlabels,qutip,qutip,v5.0.4,,,,,,,,,Distribution,__init__,"(self, data=None, xvecs=[], xlabels=[])",self.xlabels = xlabels,self.xlabels = xlabels,,,,,,
distributions.py,python,class_field,,,"Class field: [instance] WignerDistribution.xvecs = [np.linspace(extent[0][0], extent[0][1], steps),
                      np.linspace(extent[1][0], extent[1][1], steps)]",qutip,qutip,v5.0.4,,,,,,,,,WignerDistribution,__init__,"(self, rho=None, extent=[[-5, 5], [-5, 5]], steps=250)","self.xvecs = [np.linspace(extent[0][0], extent[0][1], steps),
                      np.linspace(extent[1][0], extent[1][1], steps)]","self.xvecs = [np.linspace(extent[0][0], extent[0][1], steps),
                      np.linspace(extent[1][0], extent[1][1], steps)]",,,,,,
distributions.py,python,class_field,,,"Class field: [instance] WignerDistribution.xlabels = [r'$\rm{Re}(\alpha)$', r'$\rm{Im}(\alpha)$']",qutip,qutip,v5.0.4,,,,,,,,,WignerDistribution,__init__,"(self, rho=None, extent=[[-5, 5], [-5, 5]], steps=250)","self.xlabels = [r'$\rm{Re}(\alpha)$', r'$\rm{Im}(\alpha)$']","self.xlabels = [r'$\rm{Re}(\alpha)$', r'$\rm{Im}(\alpha)$']",,,,,,
distributions.py,python,class_field,,,"Class field: [instance] QDistribution.xvecs = [np.linspace(extent[0][0], extent[0][1], steps),
                      np.linspace(extent[1][0], extent[1][1], steps)]",qutip,qutip,v5.0.4,,,,,,,,,QDistribution,__init__,"(self, rho=None, extent=[[-5, 5], [-5, 5]], steps=250)","self.xvecs = [np.linspace(extent[0][0], extent[0][1], steps),
                      np.linspace(extent[1][0], extent[1][1], steps)]","self.xvecs = [np.linspace(extent[0][0], extent[0][1], steps),
                      np.linspace(extent[1][0], extent[1][1], steps)]",,,,,,
distributions.py,python,class_field,,,"Class field: [instance] QDistribution.xlabels = [r'$\rm{Re}(\alpha)$', r'$\rm{Im}(\alpha)$']",qutip,qutip,v5.0.4,,,,,,,,,QDistribution,__init__,"(self, rho=None, extent=[[-5, 5], [-5, 5]], steps=250)","self.xlabels = [r'$\rm{Re}(\alpha)$', r'$\rm{Im}(\alpha)$']","self.xlabels = [r'$\rm{Re}(\alpha)$', r'$\rm{Im}(\alpha)$']",,,,,,
distributions.py,python,class_field,,,"Class field: [instance] TwoModeQuadratureCorrelation.xvecs = [np.linspace(extent[0][0], extent[0][1], steps),
                      np.linspace(extent[1][0], extent[1][1], steps)]",qutip,qutip,v5.0.4,,,,,,,,,TwoModeQuadratureCorrelation,__init__,"(self, state=None, theta1=0.0, theta2=0.0,
                 extent=[[-5, 5], [-5, 5]], steps=250)","self.xvecs = [np.linspace(extent[0][0], extent[0][1], steps),
                      np.linspace(extent[1][0], extent[1][1], steps)]","self.xvecs = [np.linspace(extent[0][0], extent[0][1], steps),
                      np.linspace(extent[1][0], extent[1][1], steps)]",,,,,,
distributions.py,python,class_field,,,"Class field: [instance] TwoModeQuadratureCorrelation.xlabels = [r'$X_1(\theta_1)$', r'$X_2(\theta_2)$']",qutip,qutip,v5.0.4,,,,,,,,,TwoModeQuadratureCorrelation,__init__,"(self, state=None, theta1=0.0, theta2=0.0,
                 extent=[[-5, 5], [-5, 5]], steps=250)","self.xlabels = [r'$X_1(\theta_1)$', r'$X_2(\theta_2)$']","self.xlabels = [r'$X_1(\theta_1)$', r'$X_2(\theta_2)$']",,,,,,
distributions.py,python,class_field,,,Class field: [instance] TwoModeQuadratureCorrelation.theta1 = theta1,qutip,qutip,v5.0.4,,,,,,,,,TwoModeQuadratureCorrelation,__init__,"(self, state=None, theta1=0.0, theta2=0.0,
                 extent=[[-5, 5], [-5, 5]], steps=250)",self.theta1 = theta1,self.theta1 = theta1,,,,,,
distributions.py,python,class_field,,,Class field: [instance] TwoModeQuadratureCorrelation.theta2 = theta2,qutip,qutip,v5.0.4,,,,,,,,,TwoModeQuadratureCorrelation,__init__,"(self, state=None, theta1=0.0, theta2=0.0,
                 extent=[[-5, 5], [-5, 5]], steps=250)",self.theta2 = theta2,self.theta2 = theta2,,,,,,
distributions.py,python,class_field,,,Class field: [instance] TwoModeQuadratureCorrelation.update(state),qutip,qutip,v5.0.4,,,,,,,,,TwoModeQuadratureCorrelation,__init__,"(self, state=None, theta1=0.0, theta2=0.0,
                 extent=[[-5, 5], [-5, 5]], steps=250)",self.update(state),self.update(state),,,,,,
distributions.py,python,class_field,,,"Class field: [instance] HarmonicOscillatorWaveFunction.xvecs = [np.linspace(extent[0], extent[1], steps)]",qutip,qutip,v5.0.4,,,,,,,,,HarmonicOscillatorWaveFunction,__init__,"(self, psi=None, omega=1.0, extent=[-5, 5], steps=250)","self.xvecs = [np.linspace(extent[0], extent[1], steps)]","self.xvecs = [np.linspace(extent[0], extent[1], steps)]",,,,,,
distributions.py,python,class_field,,,Class field: [instance] HarmonicOscillatorWaveFunction.xlabels = [r'$x$'],qutip,qutip,v5.0.4,,,,,,,,,HarmonicOscillatorWaveFunction,__init__,"(self, psi=None, omega=1.0, extent=[-5, 5], steps=250)",self.xlabels = [r'$x$'],self.xlabels = [r'$x$'],,,,,,
distributions.py,python,class_field,,,Class field: [instance] HarmonicOscillatorWaveFunction.omega = omega,qutip,qutip,v5.0.4,,,,,,,,,HarmonicOscillatorWaveFunction,__init__,"(self, psi=None, omega=1.0, extent=[-5, 5], steps=250)",self.omega = omega,self.omega = omega,,,,,,
distributions.py,python,class_field,,,"Class field: [instance] HarmonicOscillatorProbabilityFunction.xvecs = [np.linspace(extent[0], extent[1], steps)]",qutip,qutip,v5.0.4,,,,,,,,,HarmonicOscillatorProbabilityFunction,__init__,"(self, rho=None, omega=1.0, extent=[-5, 5], steps=250)","self.xvecs = [np.linspace(extent[0], extent[1], steps)]","self.xvecs = [np.linspace(extent[0], extent[1], steps)]",,,,,,
distributions.py,python,class_field,,,Class field: [instance] HarmonicOscillatorProbabilityFunction.xlabels = [r'$x$'],qutip,qutip,v5.0.4,,,,,,,,,HarmonicOscillatorProbabilityFunction,__init__,"(self, rho=None, omega=1.0, extent=[-5, 5], steps=250)",self.xlabels = [r'$x$'],self.xlabels = [r'$x$'],,,,,,
distributions.py,python,class_field,,,Class field: [instance] HarmonicOscillatorProbabilityFunction.omega = omega,qutip,qutip,v5.0.4,,,,,,,,,HarmonicOscillatorProbabilityFunction,__init__,"(self, rho=None, omega=1.0, extent=[-5, 5], steps=250)",self.omega = omega,self.omega = omega,,,,,,
distributions.py,python,class_method,,,"Class method: Distribution.__init__(self, data=None, xvecs=[], xlabels=[])",qutip,qutip,v5.0.4,,,,,,,,,Distribution,__init__,"(self, data=None, xvecs=[], xlabels=[])",,,,,,,,
distributions.py,python,class_method,,,"Class method: Distribution.visualize(self, fig=None, ax=None, figsize=(8, 6),
                  colorbar=True, cmap=None, style=""colormap"",
                  show_xlabel=True, show_ylabel=True)",qutip,qutip,v5.0.4,,,,,,,,,Distribution,visualize,"(self, fig=None, ax=None, figsize=(8, 6),
                  colorbar=True, cmap=None, style=""colormap"",
                  show_xlabel=True, show_ylabel=True)",,,,,,,,
distributions.py,python,class_method,,,"Class method: Distribution.visualize_2d_colormap(self, fig=None, ax=None, figsize=(8, 6),
                              colorbar=True, cmap=None,
                              show_xlabel=True, show_ylabel=True)",qutip,qutip,v5.0.4,,,,,,,,,Distribution,visualize_2d_colormap,"(self, fig=None, ax=None, figsize=(8, 6),
                              colorbar=True, cmap=None,
                              show_xlabel=True, show_ylabel=True)",,,,,,,,
distributions.py,python,class_method,,,"Class method: Distribution.visualize_2d_surface(self, fig=None, ax=None, figsize=(8, 6),
                             colorbar=True, cmap=None,
                             show_xlabel=True, show_ylabel=True)",qutip,qutip,v5.0.4,,,,,,,,,Distribution,visualize_2d_surface,"(self, fig=None, ax=None, figsize=(8, 6),
                             colorbar=True, cmap=None,
                             show_xlabel=True, show_ylabel=True)",,,,,,,,
distributions.py,python,class_method,,,"Class method: Distribution.visualize_1d(self, fig=None, ax=None, figsize=(8, 6),
                     show_xlabel=True, show_ylabel=True)",qutip,qutip,v5.0.4,,,,,,,,,Distribution,visualize_1d,"(self, fig=None, ax=None, figsize=(8, 6),
                     show_xlabel=True, show_ylabel=True)",,,,,,,,
distributions.py,python,class_method,,,"Class method: Distribution.marginal(self, dim=0)",qutip,qutip,v5.0.4,,,,,,,,,Distribution,marginal,"(self, dim=0)",,,,,,,,
distributions.py,python,class_method,,,"Class method: Distribution.project(self, dim=0)",qutip,qutip,v5.0.4,,,,,,,,,Distribution,project,"(self, dim=0)",,,,,,,,
distributions.py,python,class_method,,,"Class method: WignerDistribution.__init__(self, rho=None, extent=[[-5, 5], [-5, 5]], steps=250)",qutip,qutip,v5.0.4,,,,,,,,,WignerDistribution,__init__,"(self, rho=None, extent=[[-5, 5], [-5, 5]], steps=250)",,,,,,,,
distributions.py,python,class_method,,,"Class method: WignerDistribution.update(self, rho)",qutip,qutip,v5.0.4,,,,,,,,,WignerDistribution,update,"(self, rho)",,,,,,,,
distributions.py,python,class_method,,,"Class method: QDistribution.__init__(self, rho=None, extent=[[-5, 5], [-5, 5]], steps=250)",qutip,qutip,v5.0.4,,,,,,,,,QDistribution,__init__,"(self, rho=None, extent=[[-5, 5], [-5, 5]], steps=250)",,,,,,,,
distributions.py,python,class_method,,,"Class method: QDistribution.update(self, rho)",qutip,qutip,v5.0.4,,,,,,,,,QDistribution,update,"(self, rho)",,,,,,,,
distributions.py,python,class_method,,,"Class method: TwoModeQuadratureCorrelation.__init__(self, state=None, theta1=0.0, theta2=0.0,
                 extent=[[-5, 5], [-5, 5]], steps=250)",qutip,qutip,v5.0.4,,,,,,,,,TwoModeQuadratureCorrelation,__init__,"(self, state=None, theta1=0.0, theta2=0.0,
                 extent=[[-5, 5], [-5, 5]], steps=250)",,,,,,,,
distributions.py,python,class_method,,,"Class method: TwoModeQuadratureCorrelation.update(self, state)",qutip,qutip,v5.0.4,,,,,,,,,TwoModeQuadratureCorrelation,update,"(self, state)",,,,,,,,
distributions.py,python,class_method,,,"Class method: TwoModeQuadratureCorrelation.update_psi(self, psi)",qutip,qutip,v5.0.4,,,,,,,,,TwoModeQuadratureCorrelation,update_psi,"(self, psi)",,,,,,,,
distributions.py,python,class_method,,,"Class method: TwoModeQuadratureCorrelation.update_rho(self, rho)",qutip,qutip,v5.0.4,,,,,,,,,TwoModeQuadratureCorrelation,update_rho,"(self, rho)",,,,,,,,
distributions.py,python,class_method,,,"Class method: HarmonicOscillatorWaveFunction.__init__(self, psi=None, omega=1.0, extent=[-5, 5], steps=250)",qutip,qutip,v5.0.4,,,,,,,,,HarmonicOscillatorWaveFunction,__init__,"(self, psi=None, omega=1.0, extent=[-5, 5], steps=250)",,,,,,,,
distributions.py,python,class_method,,,"Class method: HarmonicOscillatorWaveFunction.update(self, psi)",qutip,qutip,v5.0.4,,,,,,,,,HarmonicOscillatorWaveFunction,update,"(self, psi)",,,,,,,,
distributions.py,python,class_method,,,"Class method: HarmonicOscillatorProbabilityFunction.__init__(self, rho=None, omega=1.0, extent=[-5, 5], steps=250)",qutip,qutip,v5.0.4,,,,,,,,,HarmonicOscillatorProbabilityFunction,__init__,"(self, rho=None, omega=1.0, extent=[-5, 5], steps=250)",,,,,,,,
distributions.py,python,class_method,,,"Class method: HarmonicOscillatorProbabilityFunction.update(self, rho)",qutip,qutip,v5.0.4,,,,,,,,,HarmonicOscillatorProbabilityFunction,update,"(self, rho)",,,,,,,,
distributions.py,python,class,,,Class: Distribution,qutip,qutip,v5.0.4,,,,,,,,,Distribution,,,,,,,,,,
distributions.py,python,class,,,Class: WignerDistribution(Distribution),qutip,qutip,v5.0.4,,,,,,,,,WignerDistribution,,,,,(Distribution),,,,,
distributions.py,python,class,,,Class: QDistribution(Distribution),qutip,qutip,v5.0.4,,,,,,,,,QDistribution,,,,,(Distribution),,,,,
distributions.py,python,class,,,Class: TwoModeQuadratureCorrelation(Distribution),qutip,qutip,v5.0.4,,,,,,,,,TwoModeQuadratureCorrelation,,,,,(Distribution),,,,,
distributions.py,python,class,,,Class: HarmonicOscillatorWaveFunction(Distribution),qutip,qutip,v5.0.4,,,,,,,,,HarmonicOscillatorWaveFunction,,,,,(Distribution),,,,,
distributions.py,python,class,,,Class: HarmonicOscillatorProbabilityFunction(Distribution),qutip,qutip,v5.0.4,,,,,,,,,HarmonicOscillatorProbabilityFunction,,,,,(Distribution),,,,,
distributions.py,python,constant,,,"Constant: __all__ = ['Distribution', 'WignerDistribution', 'QDistribution',
           'TwoModeQuadratureCorrelation',
           'HarmonicOscillatorWaveFunction',
           'HarmonicOscillatorProbabilityFunction']",qutip,qutip,v5.0.4,,,,,"__all__ = ['Distribution', 'WignerDistribution', 'QDistribution',
           'TwoModeQuadratureCorrelation',
           'HarmonicOscillatorWaveFunction',
           'HarmonicOscillatorProbabilityFunction']",__all__,"['Distribution', 'WignerDistribution', 'QDistribution',
           'TwoModeQuadratureCorrelation',
           'HarmonicOscillatorWaveFunction',
           'HarmonicOscillatorProbabilityFunction']",,,,,,,,,,,,
distributions.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
distributions.py,python,import,,,Import: pi from numpy,qutip,qutip,v5.0.4,"from numpy import pi, exp, sqrt",pi,numpy,,,,,,,,,,,,,,,,
distributions.py,python,import,,,Import: exp from numpy,qutip,qutip,v5.0.4,"from numpy import pi, exp, sqrt",exp,numpy,,,,,,,,,,,,,,,,
distributions.py,python,import,,,Import: sqrt from numpy,qutip,qutip,v5.0.4,"from numpy import pi, exp, sqrt",sqrt,numpy,,,,,,,,,,,,,,,,
distributions.py,python,local_import,,,Import: hermite from scipy.special,qutip,qutip,v5.0.4,"from scipy.special import hermite, factorial",hermite,scipy.special,scipy.special,,,,,,,,,,,,,,,
distributions.py,python,local_import,,,Import: factorial from scipy.special,qutip,qutip,v5.0.4,"from scipy.special import hermite, factorial",factorial,scipy.special,scipy.special,,,,,,,,,,,,,,,
distributions.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
distributions.py,python,,,,Directory: qutip\distributions.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
entropy.py,python,function,entropy_vn,"(rho, base=e, sparse=False)","Function: entropy_vn(rho, base=e, sparse=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
entropy.py,python,function,entropy_linear,(rho),Function: entropy_linear(rho),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
entropy.py,python,function,concurrence,(rho),Function: concurrence(rho),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
entropy.py,python,function,negativity,"(rho, subsys, method='tracenorm', logarithmic=False)","Function: negativity(rho, subsys, method='tracenorm', logarithmic=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
entropy.py,python,function,entropy_mutual,"(rho, selA, selB, base=e, sparse=False)","Function: entropy_mutual(rho, selA, selB, base=e, sparse=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
entropy.py,python,function,entropy_relative,"(rho, sigma, base=e, sparse=False, tol=1e-12)","Function: entropy_relative(rho, sigma, base=e, sparse=False, tol=1e-12)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
entropy.py,python,function,entropy_conditional,"(rho, selB, base=e, sparse=False)","Function: entropy_conditional(rho, selB, base=e, sparse=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
entropy.py,python,function,participation_ratio,(rho),Function: participation_ratio(rho),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
entropy.py,python,function,entangling_power,(U),Function: entangling_power(U),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
entropy.py,python,constant,,,"Constant: __all__ = ['entropy_vn', 'entropy_linear', 'entropy_mutual', 'negativity',
           'concurrence', 'entropy_conditional', 'entangling_power',
           'entropy_relative']",qutip,qutip,v5.0.4,,,,,"__all__ = ['entropy_vn', 'entropy_linear', 'entropy_mutual', 'negativity',
           'concurrence', 'entropy_conditional', 'entangling_power',
           'entropy_relative']",__all__,"['entropy_vn', 'entropy_linear', 'entropy_mutual', 'negativity',
           'concurrence', 'entropy_conditional', 'entangling_power',
           'entropy_relative']",,,,,,,,,,,,
entropy.py,python,import,,,Import: conj from numpy,qutip,qutip,v5.0.4,"from numpy import conj, e, inf, imag, inner, real, sort, sqrt",conj,numpy,,,,,,,,,,,,,,,,
entropy.py,python,import,,,Import: e from numpy,qutip,qutip,v5.0.4,"from numpy import conj, e, inf, imag, inner, real, sort, sqrt",e,numpy,,,,,,,,,,,,,,,,
entropy.py,python,import,,,Import: inf from numpy,qutip,qutip,v5.0.4,"from numpy import conj, e, inf, imag, inner, real, sort, sqrt",inf,numpy,,,,,,,,,,,,,,,,
entropy.py,python,import,,,Import: imag from numpy,qutip,qutip,v5.0.4,"from numpy import conj, e, inf, imag, inner, real, sort, sqrt",imag,numpy,,,,,,,,,,,,,,,,
entropy.py,python,import,,,Import: inner from numpy,qutip,qutip,v5.0.4,"from numpy import conj, e, inf, imag, inner, real, sort, sqrt",inner,numpy,,,,,,,,,,,,,,,,
entropy.py,python,import,,,Import: real from numpy,qutip,qutip,v5.0.4,"from numpy import conj, e, inf, imag, inner, real, sort, sqrt",real,numpy,,,,,,,,,,,,,,,,
entropy.py,python,import,,,Import: sort from numpy,qutip,qutip,v5.0.4,"from numpy import conj, e, inf, imag, inner, real, sort, sqrt",sort,numpy,,,,,,,,,,,,,,,,
entropy.py,python,import,,,Import: sqrt from numpy,qutip,qutip,v5.0.4,"from numpy import conj, e, inf, imag, inner, real, sort, sqrt",sqrt,numpy,,,,,,,,,,,,,,,,
entropy.py,python,local_import,,,Import: log from numpy.lib.scimath,qutip,qutip,v5.0.4,"from numpy.lib.scimath import log, log2",log,numpy.lib.scimath,numpy.lib.scimath,,,,,,,,,,,,,,,
entropy.py,python,local_import,,,Import: log2 from numpy.lib.scimath,qutip,qutip,v5.0.4,"from numpy.lib.scimath import log, log2",log2,numpy.lib.scimath,numpy.lib.scimath,,,,,,,,,,,,,,,
entropy.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
entropy.py,python,,,,Directory: qutip\entropy.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
fileio.py,python,function,file_data_store,"(filename, data, numtype=""complex"", numformat=""decimal"",
                    sep="","")","Function: file_data_store(filename, data, numtype=""complex"", numformat=""decimal"",
                    sep="","")",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
fileio.py,python,function,file_data_read,"(filename, sep=None)","Function: file_data_read(filename, sep=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
fileio.py,python,function,qsave,"(data, name='qutip_data')","Function: qsave(data, name='qutip_data')",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
fileio.py,python,function,qload,(filename),Function: qload(filename),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
fileio.py,python,constant,,,"Constant: __all__ = ['file_data_store', 'file_data_read', 'qsave', 'qload']",qutip,qutip,v5.0.4,,,,,"__all__ = ['file_data_store', 'file_data_read', 'qsave', 'qload']",__all__,"['file_data_store', 'file_data_read', 'qsave', 'qload']",,,,,,,,,,,,
fileio.py,python,import,,,Import: pickle,qutip,qutip,v5.0.4,import pickle,pickle,,,,,,,,,,,,,,,,,
fileio.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
fileio.py,python,import,,,Import: sys,qutip,qutip,v5.0.4,import sys,sys,,,,,,,,,,,,,,,,,
fileio.py,python,import,,,Import: Path from pathlib,qutip,qutip,v5.0.4,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,,
fileio.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
fileio.py,python,,,,Directory: qutip\fileio.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
ipynbtools.py,python,function,version_table,(verbose=False),Function: version_table(verbose=False),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
ipynbtools.py,python,function,_visualize_parfor_data,(metadata),Function: _visualize_parfor_data(metadata),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
ipynbtools.py,python,function,parfor,"(task, task_vec, args=None, client=None, view=None,
           show_scheduling=False, show_progressbar=False)","Function: parfor(task, task_vec, args=None, client=None, view=None,
           show_scheduling=False, show_progressbar=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
ipynbtools.py,python,function,parallel_map,"(task, values, task_args=None, task_kwargs=None,
                 client=None, view=None, progress_bar=None,
                 show_scheduling=False, **kwargs)","Function: parallel_map(task, values, task_args=None, task_kwargs=None,
                 client=None, view=None, progress_bar=None,
                 show_scheduling=False, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
ipynbtools.py,python,function,plot_animation,"(plot_setup_func, plot_func, result, name=""movie"",
                   writer=""avconv"", codec=""libx264"", verbose=False)","Function: plot_animation(plot_setup_func, plot_func, result, name=""movie"",
                   writer=""avconv"", codec=""libx264"", verbose=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
ipynbtools.py,python,import,,,Import: IPython,qutip,qutip,v5.0.4,import IPython,IPython,,,,,,,,,,,,,,,,,
ipynbtools.py,python,import,,,Import: matplotlib.pyplot,qutip,qutip,v5.0.4,import matplotlib.pyplot as plt,matplotlib.pyplot,,,,,,,,,,,,,,,,,
ipynbtools.py,python,import,,,Import: animation from matplotlib,qutip,qutip,v5.0.4,from matplotlib import animation,animation,matplotlib,,,,,,,,,,,,,,,,
ipynbtools.py,python,import,,,Import: b64encode from base64,qutip,qutip,v5.0.4,from base64 import b64encode,b64encode,base64,,,,,,,,,,,,,,,,
ipynbtools.py,python,import,,,Import: datetime,qutip,qutip,v5.0.4,import datetime,datetime,,,,,,,,,,,,,,,,,
ipynbtools.py,python,import,,,Import: uuid,qutip,qutip,v5.0.4,import uuid,uuid,,,,,,,,,,,,,,,,,
ipynbtools.py,python,import,,,Import: sys,qutip,qutip,v5.0.4,import sys,sys,,,,,,,,,,,,,,,,,
ipynbtools.py,python,import,,,Import: os,qutip,qutip,v5.0.4,import os,os,,,,,,,,,,,,,,,,,
ipynbtools.py,python,import,,,Import: time,qutip,qutip,v5.0.4,import time,time,,,,,,,,,,,,,,,,,
ipynbtools.py,python,import,,,Import: inspect,qutip,qutip,v5.0.4,import inspect,inspect,,,,,,,,,,,,,,,,,
ipynbtools.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
ipynbtools.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy,numpy,,,,,,,,,,,,,,,,,
ipynbtools.py,python,import,,,Import: scipy,qutip,qutip,v5.0.4,import scipy,scipy,,,,,,,,,,,,,,,,,
ipynbtools.py,python,import,,,Import: matplotlib,qutip,qutip,v5.0.4,import matplotlib,matplotlib,,,,,,,,,,,,,,,,,
ipynbtools.py,python,import,,,Import: IPython,qutip,qutip,v5.0.4,import IPython,IPython,,,,,,,,,,,,,,,,,
ipynbtools.py,python,local_import,,,Import: BaseProgressBar from qutip.ui.progressbar,qutip,qutip,v5.0.4,"from qutip.ui.progressbar import BaseProgressBar, HTMLProgressBar",BaseProgressBar,qutip.ui.progressbar,qutip.ui.progressbar,,,,,,,,,,,,,,,
ipynbtools.py,python,local_import,,,Import: HTMLProgressBar from qutip.ui.progressbar,qutip,qutip,v5.0.4,"from qutip.ui.progressbar import BaseProgressBar, HTMLProgressBar",HTMLProgressBar,qutip.ui.progressbar,qutip.ui.progressbar,,,,,,,,,,,,,,,
ipynbtools.py,python,local_import,,,Import: HTML from IPython.display,qutip,qutip,v5.0.4,"from IPython.display import HTML, Javascript, display",HTML,IPython.display,IPython.display,,,,,,,,,,,,,,,
ipynbtools.py,python,local_import,,,Import: Javascript from IPython.display,qutip,qutip,v5.0.4,"from IPython.display import HTML, Javascript, display",Javascript,IPython.display,IPython.display,,,,,,,,,,,,,,,
ipynbtools.py,python,local_import,,,Import: display from IPython.display,qutip,qutip,v5.0.4,"from IPython.display import HTML, Javascript, display",display,IPython.display,IPython.display,,,,,,,,,,,,,,,
ipynbtools.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
ipynbtools.py,python,,,,Directory: qutip\ipynbtools.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
matplotlib_utilities.py,python,class_field,,,Class field: [instance] MidpointNorm.midpoint = midpoint,qutip,qutip,v5.0.4,,,,,,,,,MidpointNorm,__init__,"(self, midpoint=0, vmin=None, vmax=None, clip=False)",self.midpoint = midpoint,self.midpoint = midpoint,,,,,,
matplotlib_utilities.py,python,class_method,,,"Class method: Normalize.__init__(self, vmin=None, vmax=None, clip=False)",qutip,qutip,v5.0.4,,,,,,,,,Normalize,__init__,"(self, vmin=None, vmax=None, clip=False)",,,,,,,,
matplotlib_utilities.py,python,class_method,,,"Class method: MidpointNorm.__init__(self, midpoint=0, vmin=None, vmax=None, clip=False)",qutip,qutip,v5.0.4,,,,,,,,,MidpointNorm,__init__,"(self, midpoint=0, vmin=None, vmax=None, clip=False)",,,,,,,,
matplotlib_utilities.py,python,class_method,,,"Class method: MidpointNorm.__call__(self, value, clip=None)",qutip,qutip,v5.0.4,,,,,,,,,MidpointNorm,__call__,"(self, value, clip=None)",,,,,,,,
matplotlib_utilities.py,python,class,,,Class: Normalize(object),qutip,qutip,v5.0.4,,,,,,,,,Normalize,,,,,(object),,,,,
matplotlib_utilities.py,python,class,,,Class: MidpointNorm(Normalize),qutip,qutip,v5.0.4,,,,,,,,,MidpointNorm,,,,,(Normalize),,,,,
matplotlib_utilities.py,python,function,wigner_cmap,"(W, levels=1024, shift=0, max_color='#09224F',
                mid_color='#FFFFFF', min_color='#530017',
                neg_color='#FF97D4', invert=False)","Function: wigner_cmap(W, levels=1024, shift=0, max_color='#09224F',
                mid_color='#FFFFFF', min_color='#530017',
                neg_color='#FF97D4', invert=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
matplotlib_utilities.py,python,function,complex_phase_cmap,(),Function: complex_phase_cmap(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
matplotlib_utilities.py,python,constant,,,"Constant: __all__ = ['wigner_cmap', 'MidpointNorm', 'complex_phase_cmap']",qutip,qutip,v5.0.4,,,,,"__all__ = ['wigner_cmap', 'MidpointNorm', 'complex_phase_cmap']",__all__,"['wigner_cmap', 'MidpointNorm', 'complex_phase_cmap']",,,,,,,,,,,,
matplotlib_utilities.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
matplotlib_utilities.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
matplotlib_utilities.py,python,,,,Directory: qutip\matplotlib_utilities.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
measurement.py,python,function,_verify_input,"(op, state)","Function: _verify_input(op, state)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
measurement.py,python,function,_measurement_statistics_povm_ket,"(state, ops, tol=None)","Function: _measurement_statistics_povm_ket(state, ops, tol=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
measurement.py,python,function,_measurement_statistics_povm_dm,"(density_mat, ops, tol=None)","Function: _measurement_statistics_povm_dm(density_mat, ops, tol=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
measurement.py,python,function,measurement_statistics_povm,"(state, ops, tol=None)","Function: measurement_statistics_povm(state, ops, tol=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
measurement.py,python,function,measurement_statistics_observable,"(state, op, tol=None)","Function: measurement_statistics_observable(state, op, tol=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
measurement.py,python,function,measure_observable,"(state, op, tol=None)","Function: measure_observable(state, op, tol=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
measurement.py,python,function,measure_povm,"(state, ops, tol=None)","Function: measure_povm(state, ops, tol=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
measurement.py,python,function,measurement_statistics,"(state, ops, tol=None)","Function: measurement_statistics(state, ops, tol=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
measurement.py,python,function,measure,"(state, ops, tol=None)","Function: measure(state, ops, tol=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
measurement.py,python,constant,,,"Constant: __all__ = [
    'measurement_statistics_povm',
    'measurement_statistics_observable',
    'measure_observable',
    'measure_povm',
    'measurement_statistics',
    'measure'
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    'measurement_statistics_povm',
    'measurement_statistics_observable',
    'measure_observable',
    'measure_povm',
    'measurement_statistics',
    'measure'
]",__all__,"[
    'measurement_statistics_povm',
    'measurement_statistics_observable',
    'measure_observable',
    'measure_povm',
    'measurement_statistics',
    'measure'
]",,,,,,,,,,,,
measurement.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
measurement.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
measurement.py,python,,,,Directory: qutip\measurement.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
partial_transpose.py,python,function,partial_transpose,"(rho, mask, method='dense')","Function: partial_transpose(rho, mask, method='dense')",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
partial_transpose.py,python,function,_partial_transpose_dense,"(rho, mask)","Function: _partial_transpose_dense(rho, mask)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
partial_transpose.py,python,function,_partial_transpose_sparse,"(rho, mask)","Function: _partial_transpose_sparse(rho, mask)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
partial_transpose.py,python,function,_partial_transpose_reference,"(rho, mask)","Function: _partial_transpose_reference(rho, mask)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
partial_transpose.py,python,constant,,,Constant: __all__ = ['partial_transpose'],qutip,qutip,v5.0.4,,,,,__all__ = ['partial_transpose'],__all__,['partial_transpose'],,,,,,,,,,,,
partial_transpose.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
partial_transpose.py,python,import,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,scipy.sparse,,,,,,,,,,,,,,,,,
partial_transpose.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
partial_transpose.py,python,,,,Directory: qutip\partial_transpose.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qip.py,python,import,,,Import: sys,qutip,qutip,v5.0.4,import sys,sys,,,,,,,,,,,,,,,,,
qip.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qip.py,python,,,,Directory: qutip\qip.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
random_objects.py,python,function,_implicit_tensor_dimensions,"(dimensions, superoper=False)","Function: _implicit_tensor_dimensions(dimensions, superoper=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
random_objects.py,python,function,_get_generator,(seed),Function: _get_generator(seed),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
random_objects.py,python,function,_randnz,"(shape, generator, norm=np.sqrt(0.5))","Function: _randnz(shape, generator, norm=np.sqrt(0.5))",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
random_objects.py,python,function,_rand_jacobi_rotation,"(A, generator)","Function: _rand_jacobi_rotation(A, generator)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
random_objects.py,python,function,_get_block_sizes,"(N, density, generator)","Function: _get_block_sizes(N, density, generator)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
random_objects.py,python,function,_merge_shuffle_blocks,"(blocks, generator)","Function: _merge_shuffle_blocks(blocks, generator)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
random_objects.py,python,function,rand_herm,"(dimensions, density=0.30, distribution=""fill"", *,
              eigenvalues=(), seed=None, dtype=None)","Function: rand_herm(dimensions, density=0.30, distribution=""fill"", *,
              eigenvalues=(), seed=None, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
random_objects.py,python,function,_rand_herm_sparse,"(N, density, pos_def, generator)","Function: _rand_herm_sparse(N, density, pos_def, generator)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
random_objects.py,python,function,_rand_herm_dense,"(N, density, pos_def, generator)","Function: _rand_herm_dense(N, density, pos_def, generator)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
random_objects.py,python,function,rand_unitary,"(dimensions, density=1, distribution=""haar"", *,
                 seed=None, dtype=None)","Function: rand_unitary(dimensions, density=1, distribution=""haar"", *,
                 seed=None, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
random_objects.py,python,function,_rand_unitary_haar,"(N, generator)","Function: _rand_unitary_haar(N, generator)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
random_objects.py,python,function,rand_ket,"(dimensions, density=1, distribution=""haar"", *,
             seed=None, dtype=None)","Function: rand_ket(dimensions, density=1, distribution=""haar"", *,
             seed=None, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
random_objects.py,python,function,rand_dm,"(dimensions, density=0.75, distribution=""ginibre"", *,
            eigenvalues=(), rank=None, seed=None,
            dtype=None)","Function: rand_dm(dimensions, density=0.75, distribution=""ginibre"", *,
            eigenvalues=(), rank=None, seed=None,
            dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
random_objects.py,python,function,_rand_dm_ginibre,"(N, rank, generator)","Function: _rand_dm_ginibre(N, rank, generator)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
random_objects.py,python,function,rand_kraus_map,"(dimensions, *, seed=None, dtype=None)","Function: rand_kraus_map(dimensions, *, seed=None, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
random_objects.py,python,function,rand_super,"(dimensions, *, superrep=""super"", seed=None, dtype=None)","Function: rand_super(dimensions, *, superrep=""super"", seed=None, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
random_objects.py,python,function,rand_super_bcsz,"(dimensions, enforce_tp=True, rank=None, *,
                    superrep=""super"", seed=None,
                    dtype=None)","Function: rand_super_bcsz(dimensions, enforce_tp=True, rank=None, *,
                    superrep=""super"", seed=None,
                    dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
random_objects.py,python,function,rand_stochastic,"(dimensions, density=0.75, kind='left',
                    *, seed=None, dtype=None)","Function: rand_stochastic(dimensions, density=0.75, kind='left',
                    *, seed=None, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
random_objects.py,python,constant,,,"Constant: __all__ = [
    'rand_herm',
    'rand_unitary',
    'rand_dm',
    'rand_stochastic',
    'rand_ket',
    'rand_kraus_map',
    'rand_super',
    ""rand_super_bcsz"",
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    'rand_herm',
    'rand_unitary',
    'rand_dm',
    'rand_stochastic',
    'rand_ket',
    'rand_kraus_map',
    'rand_super',
    ""rand_super_bcsz"",
]",__all__,"[
    'rand_herm',
    'rand_unitary',
    'rand_dm',
    'rand_stochastic',
    'rand_ket',
    'rand_kraus_map',
    'rand_super',
    ""rand_super_bcsz"",
]",,,,,,,,,,,,
random_objects.py,python,constant,,,Constant: _RAND = default_rng(),qutip,qutip,v5.0.4,,,,,_RAND = default_rng(),_RAND,default_rng(),,,,,,,,,,,,
random_objects.py,python,constant,,,"Constant: _UNITS = np.array([1, 1j])",qutip,qutip,v5.0.4,,,,,"_UNITS = np.array([1, 1j])",_UNITS,"np.array([1, 1j])",,,,,,,,,,,,
random_objects.py,python,import,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,numbers,,,,,,,,,,,,,,,,,
random_objects.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
random_objects.py,python,import,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg,scipy.linalg,,,,,,,,,,,,,,,,,
random_objects.py,python,import,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,scipy.sparse,,,,,,,,,,,,,,,,,
random_objects.py,python,local_import,,,Import: Generator from numpy.random,qutip,qutip,v5.0.4,"from numpy.random import Generator, SeedSequence, default_rng",Generator,numpy.random,numpy.random,,,,,,,,,,,,,,,
random_objects.py,python,local_import,,,Import: SeedSequence from numpy.random,qutip,qutip,v5.0.4,"from numpy.random import Generator, SeedSequence, default_rng",SeedSequence,numpy.random,numpy.random,,,,,,,,,,,,,,,
random_objects.py,python,local_import,,,Import: default_rng from numpy.random,qutip,qutip,v5.0.4,"from numpy.random import Generator, SeedSequence, default_rng",default_rng,numpy.random,numpy.random,,,,,,,,,,,,,,,
random_objects.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
random_objects.py,python,,,,Directory: qutip\random_objects.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
settings.py,python,class_field,,,"Class field: [instance] Settings._mkl_lib = """"",qutip,qutip,v5.0.4,,,,,,,,,Settings,__init__,(self),"self._mkl_lib = """"","self._mkl_lib = """"",,,,,,
settings.py,python,class_field,,,Class field: [instance] Settings.core = None,qutip,qutip,v5.0.4,,,,,,,,,Settings,__init__,(self),self.core = None,self.core = None,,,,,,
settings.py,python,class_field,,,Class field: [instance] Settings.compile = None,qutip,qutip,v5.0.4,,,,,,,,,Settings,__init__,(self),self.compile = None,self.compile = None,,,,,,
settings.py,python,class_field,,,Class field: [instance] Settings._debug = False,qutip,qutip,v5.0.4,,,,,,,,,Settings,__init__,(self),self._debug = False,self._debug = False,,,,,,
settings.py,python,class_field,,,"Class field: [instance] Settings._log_handler = ""default""",qutip,qutip,v5.0.4,,,,,,,,,Settings,__init__,(self),"self._log_handler = ""default""","self._log_handler = ""default""",,,,,,
settings.py,python,class_field,,,Class field: [instance] Settings._colorblind_safe = False,qutip,qutip,v5.0.4,,,,,,,,,Settings,__init__,(self),self._colorblind_safe = False,self._colorblind_safe = False,,,,,,
settings.py,python,class_method,,,Class method: Settings.__init__(self),qutip,qutip,v5.0.4,,,,,,,,,Settings,__init__,(self),,,,,,,,
settings.py,python,class_method,,,Class method: [property] Settings.has_mkl(self),qutip,qutip,v5.0.4,,,,,,,,,Settings,has_mkl,(self),,,,property,,,,
settings.py,python,class_method,,,Class method: [property] Settings.mkl_lib(self),qutip,qutip,v5.0.4,,,,,,,,,Settings,mkl_lib,(self),,,,property,,,,
settings.py,python,class_method,,,Class method: [property] Settings.ipython(self),qutip,qutip,v5.0.4,,,,,,,,,Settings,ipython,(self),,,,property,,,,
settings.py,python,class_method,,,Class method: [property] Settings.eigh_unsafe(self),qutip,qutip,v5.0.4,,,,,,,,,Settings,eigh_unsafe,(self),,,,property,,,,
settings.py,python,class_method,,,Class method: [property] Settings.tmproot(self),qutip,qutip,v5.0.4,,,,,,,,,Settings,tmproot,(self),,,,property,,,,
settings.py,python,class_method,,,"Class method: [tmproot.setter] Settings.tmproot(self, root)",qutip,qutip,v5.0.4,,,,,,,,,Settings,tmproot,"(self, root)",,,,tmproot.setter,,,,
settings.py,python,class_method,,,Class method: [property] Settings.coeffroot(self),qutip,qutip,v5.0.4,,,,,,,,,Settings,coeffroot,(self),,,,property,,,,
settings.py,python,class_method,,,"Class method: [coeffroot.setter] Settings.coeffroot(self, root)",qutip,qutip,v5.0.4,,,,,,,,,Settings,coeffroot,"(self, root)",,,,coeffroot.setter,,,,
settings.py,python,class_method,,,Class method: [property] Settings.coeff_write_ok(self),qutip,qutip,v5.0.4,,,,,,,,,Settings,coeff_write_ok,(self),,,,property,,,,
settings.py,python,class_method,,,Class method: [property] Settings.has_openmp(self),qutip,qutip,v5.0.4,,,,,,,,,Settings,has_openmp,(self),,,,property,,,,
settings.py,python,class_method,,,Class method: [property] Settings.idxint_size(self),qutip,qutip,v5.0.4,,,,,,,,,Settings,idxint_size,(self),,,,property,,,,
settings.py,python,class_method,,,Class method: [property] Settings.num_cpus(self),qutip,qutip,v5.0.4,,,,,,,,,Settings,num_cpus,(self),,,,property,,,,
settings.py,python,class_method,,,Class method: [property] Settings.debug(self),qutip,qutip,v5.0.4,,,,,,,,,Settings,debug,(self),,,,property,,,,
settings.py,python,class_method,,,"Class method: [debug.setter] Settings.debug(self, value)",qutip,qutip,v5.0.4,,,,,,,,,Settings,debug,"(self, value)",,,,debug.setter,,,,
settings.py,python,class_method,,,Class method: [property] Settings.log_handler(self),qutip,qutip,v5.0.4,,,,,,,,,Settings,log_handler,(self),,,,property,,,,
settings.py,python,class_method,,,"Class method: [log_handler.setter] Settings.log_handler(self, value)",qutip,qutip,v5.0.4,,,,,,,,,Settings,log_handler,"(self, value)",,,,log_handler.setter,,,,
settings.py,python,class_method,,,Class method: [property] Settings.colorblind_safe(self),qutip,qutip,v5.0.4,,,,,,,,,Settings,colorblind_safe,(self),,,,property,,,,
settings.py,python,class_method,,,"Class method: [colorblind_safe.setter] Settings.colorblind_safe(self, value)",qutip,qutip,v5.0.4,,,,,,,,,Settings,colorblind_safe,"(self, value)",,,,colorblind_safe.setter,,,,
settings.py,python,class_method,,,Class method: Settings.__str__(self),qutip,qutip,v5.0.4,,,,,,,,,Settings,__str__,(self),,,,,,,,
settings.py,python,class_method,,,Class method: Settings.__repr__(self),qutip,qutip,v5.0.4,,,,,,,,,Settings,__repr__,(self),,,,,,,,
settings.py,python,class,,,Class: Settings,qutip,qutip,v5.0.4,,,,,,,,,Settings,,,,,,,,,,
settings.py,python,function,_blas_info,(),Function: _blas_info(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
settings.py,python,function,available_cpu_count,(),Function: available_cpu_count(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
settings.py,python,function,_find_mkl,(),Function: _find_mkl(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
settings.py,python,constant,,,Constant: __all__ = ['settings'],qutip,qutip,v5.0.4,,,,,__all__ = ['settings'],__all__,['settings'],,,,,,,,,,,,
settings.py,python,constant,,,Constant: settings = Settings(),qutip,qutip,v5.0.4,,,,,settings = Settings(),settings,Settings(),,,,,,,,,,,,
settings.py,python,import,,,Import: os,qutip,qutip,v5.0.4,import os,os,,,,,,,,,,,,,,,,,
settings.py,python,import,,,Import: sys,qutip,qutip,v5.0.4,import sys,sys,,,,,,,,,,,,,,,,,
settings.py,python,import,,,Import: cdll from ctypes,qutip,qutip,v5.0.4,from ctypes import cdll,cdll,ctypes,,,,,,,,,,,,,,,,
settings.py,python,import,,,Import: platform,qutip,qutip,v5.0.4,import platform,platform,,,,,,,,,,,,,,,,,
settings.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
settings.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
settings.py,python,,,,Directory: qutip\settings.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
simdiag.py,python,function,_degen,"(tol, vecs, ops, i=0)","Function: _degen(tol, vecs, ops, i=0)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
simdiag.py,python,function,simdiag,"(ops, evals: bool = True, *,
            tol: float = 1e-14, safe_mode: bool = True)","Function: simdiag(ops, evals: bool = True, *,
            tol: float = 1e-14, safe_mode: bool = True)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
simdiag.py,python,constant,,,Constant: __all__ = ['simdiag'],qutip,qutip,v5.0.4,,,,,__all__ = ['simdiag'],__all__,['simdiag'],,,,,,,,,,,,
simdiag.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
simdiag.py,python,import,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg as la,scipy.linalg,,,,,,,,,,,,,,,,,
simdiag.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
simdiag.py,python,,,,Directory: qutip\simdiag.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
testing.py,python,function,run,(full=False),Function: run(full=False),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
testing.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
testing.py,python,,,,Directory: qutip\testing.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
tomography.py,python,function,_index_permutations,(size_list),Function: _index_permutations(size_list),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
tomography.py,python,function,qpt_plot,"(chi, lbls_list, title=None, fig=None, axes=None)","Function: qpt_plot(chi, lbls_list, title=None, fig=None, axes=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
tomography.py,python,function,qpt_plot_combined,"(chi, lbls_list, title=None,
                      fig=None, ax=None, figsize=(8, 6),
                      threshold=None)","Function: qpt_plot_combined(chi, lbls_list, title=None,
                      fig=None, ax=None, figsize=(8, 6),
                      threshold=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
tomography.py,python,function,qpt,"(U, op_basis_list)","Function: qpt(U, op_basis_list)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
tomography.py,python,constant,,,"Constant: __all__ = ['qpt_plot', 'qpt_plot_combined', 'qpt']",qutip,qutip,v5.0.4,,,,,"__all__ = ['qpt_plot', 'qpt_plot_combined', 'qpt']",__all__,"['qpt_plot', 'qpt_plot_combined', 'qpt']",,,,,,,,,,,,
tomography.py,python,import,,,Import: hstack from numpy,qutip,qutip,v5.0.4,"from numpy import hstack, real, imag",hstack,numpy,,,,,,,,,,,,,,,,
tomography.py,python,import,,,Import: real from numpy,qutip,qutip,v5.0.4,"from numpy import hstack, real, imag",real,numpy,,,,,,,,,,,,,,,,
tomography.py,python,import,,,Import: imag from numpy,qutip,qutip,v5.0.4,"from numpy import hstack, real, imag",imag,numpy,,,,,,,,,,,,,,,,
tomography.py,python,import,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg as la,scipy.linalg,,,,,,,,,,,,,,,,,
tomography.py,python,import,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,itertools,,,,,,,,,,,,,,,,,
tomography.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
tomography.py,python,,,,Directory: qutip\tomography.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,function,n_thermal,"(w, w_th)","Function: n_thermal(w, w_th)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,function,_factorial_prod,"(N, arr)","Function: _factorial_prod(N, arr)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,function,_factorial_div,"(N, arr)","Function: _factorial_div(N, arr)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,function,_to_long,(arr),Function: _to_long(arr),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,function,clebsch,"(j1, j2, j3, m1, m2, m3)","Function: clebsch(j1, j2, j3, m1, m2, m3)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,function,convert_unit,"(value, orig=""meV"", to=""GHz"")","Function: convert_unit(value, orig=""meV"", to=""GHz"")",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,function,convert_GHz_to_meV,(w),Function: convert_GHz_to_meV(w),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,function,convert_meV_to_GHz,(w),Function: convert_meV_to_GHz(w),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,function,convert_J_to_meV,(w),Function: convert_J_to_meV(w),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,function,convert_meV_to_J,(w),Function: convert_meV_to_J(w),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,function,convert_meV_to_mK,(w),Function: convert_meV_to_mK(w),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,function,convert_mK_to_meV,(w),Function: convert_mK_to_meV(w),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,function,convert_GHz_to_mK,(w),Function: convert_GHz_to_mK(w),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,function,convert_mK_to_GHz,(w),Function: convert_mK_to_GHz(w),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,function,_version2int,(version_string),Function: _version2int(version_string),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,constant,,,"Constant: __all__ = ['n_thermal', 'clebsch', 'convert_unit']",qutip,qutip,v5.0.4,,,,,"__all__ = ['n_thermal', 'clebsch', 'convert_unit']",__all__,"['n_thermal', 'clebsch', 'convert_unit']",,,,,,,,,,,,
utilities.py,python,constant,,,Constant: _e = 1.602176565e-19,qutip,qutip,v5.0.4,,,,,_e = 1.602176565e-19,_e,1.602176565e-19,,,,,,,,,,,,
utilities.py,python,constant,,,Constant: _kB = 1.3806488e-23,qutip,qutip,v5.0.4,,,,,_kB = 1.3806488e-23,_kB,1.3806488e-23,,,,,,,,,,,,
utilities.py,python,constant,,,Constant: _h = 6.62606957e-34,qutip,qutip,v5.0.4,,,,,_h = 6.62606957e-34,_h,6.62606957e-34,,,,,,,,,,,,
utilities.py,python,constant,,,"Constant: _unit_factor_tbl = {
    #   ""unit"": ""factor that convert argument from unit 'unit' to Joule""
    ""J"": 1.0,
    ""eV"": _e,
    ""meV"": 1.0e-3 * _e,
    ""GHz"": 1.0e9 * _h,
    ""mK"": 1.0e-3 * _kB,
}",qutip,qutip,v5.0.4,,,,,"_unit_factor_tbl = {
    #   ""unit"": ""factor that convert argument from unit 'unit' to Joule""
    ""J"": 1.0,
    ""eV"": _e,
    ""meV"": 1.0e-3 * _e,
    ""GHz"": 1.0e9 * _h,
    ""mK"": 1.0e-3 * _kB,
}",_unit_factor_tbl,"{
    #   ""unit"": ""factor that convert argument from unit 'unit' to Joule""
    ""J"": 1.0,
    ""eV"": _e,
    ""meV"": 1.0e-3 * _e,
    ""GHz"": 1.0e9 * _h,
    ""mK"": 1.0e-3 * _kB,
}",,,,,,,,,,,,
utilities.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
utilities.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,,,,Directory: qutip\utilities.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,_cyclic_cmap,(),Function: _cyclic_cmap(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,_diverging_cmap,(),Function: _diverging_cmap(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,_sequential_cmap,(),Function: _sequential_cmap(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,_is_fig_and_ax,"(fig, ax, projection='2d')","Function: _is_fig_and_ax(fig, ax, projection='2d')",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,_set_ticklabels,"(ax, ticklabels, ticks, axis, fontsize=14)","Function: _set_ticklabels(ax, ticklabels, ticks, axis, fontsize=14)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,_equal_shape,(matrices),Function: _equal_shape(matrices),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,plot_wigner_sphere,"(wigner, reflections=False, *, cmap=None,
                       colorbar=True, fig=None, ax=None)","Function: plot_wigner_sphere(wigner, reflections=False, *, cmap=None,
                       colorbar=True, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,_blob,"(x, y, w, w_max, area, color_fn, ax=None)","Function: _blob(x, y, w, w_max, area, color_fn, ax=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,_cb_labels,(left_dims),Function: _cb_labels(left_dims),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,hinton,"(rho, x_basis=None, y_basis=None, color_style=""scaled"",
           label_top=True, *, cmap=None, colorbar=True, fig=None, ax=None)","Function: hinton(rho, x_basis=None, y_basis=None, color_style=""scaled"",
           label_top=True, *, cmap=None, colorbar=True, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,sphereplot,"(values, theta, phi, *,
               cmap=None, colorbar=True, fig=None, ax=None)","Function: sphereplot(values, theta, phi, *,
               cmap=None, colorbar=True, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,_remove_margins,(axis),Function: _remove_margins(axis),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,_stick_to_planes,"(stick, azim, ax, M, spacing)","Function: _stick_to_planes(stick, azim, ax, M, spacing)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,_update_yaxis,"(spacing, M, ax, ylabels)","Function: _update_yaxis(spacing, M, ax, ylabels)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,_update_xaxis,"(spacing, M, ax, xlabels)","Function: _update_xaxis(spacing, M, ax, xlabels)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,_update_zaxis,"(ax, z_min, z_max, zticks)","Function: _update_zaxis(ax, z_min, z_max, zticks)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,_get_matrix_components,"(option, M, argument)","Function: _get_matrix_components(option, M, argument)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,sph2cart,"(r, theta, phi)","Function: sph2cart(r, theta, phi)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,sphview,(ax),Function: sphview(ax),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,get_camera_position,(ax),Function: get_camera_position(ax),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,matrix_histogram,"(
    M,
    x_basis=None,
    y_basis=None,
    limits=None,
    bar_style=""real"",
    color_limits=None,
    color_style=""real"",
    options=None,
    *,
    cmap=None,
    colorbar=True,
    fig=None,
    ax=None,
)","Function: matrix_histogram(
    M,
    x_basis=None,
    y_basis=None,
    limits=None,
    bar_style=""real"",
    color_limits=None,
    color_style=""real"",
    options=None,
    *,
    cmap=None,
    colorbar=True,
    fig=None,
    ax=None,
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,plot_energy_levels,"(H_list, h_labels=None, energy_levels=None, N=0, *,
                       fig=None, ax=None)","Function: plot_energy_levels(H_list, h_labels=None, energy_levels=None, N=0, *,
                       fig=None, ax=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,plot_fock_distribution,"(rho, fock_numbers=None, color=""green"",
                           unit_y_range=True, *, fig=None, ax=None)","Function: plot_fock_distribution(rho, fock_numbers=None, color=""green"",
                           unit_y_range=True, *, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,plot_wigner,"(rho, xvec=None, yvec=None, method='clenshaw', projection='2d',
                g=sqrt(2), sparse=False, parfor=False, *,
                cmap=None, colorbar=False, fig=None, ax=None)","Function: plot_wigner(rho, xvec=None, yvec=None, method='clenshaw', projection='2d',
                g=sqrt(2), sparse=False, parfor=False, *,
                cmap=None, colorbar=False, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,plot_expectation_values,"(results, ylabels=None, *,
                            fig=None, axes=None)","Function: plot_expectation_values(results, ylabels=None, *,
                            fig=None, axes=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,plot_spin_distribution,"(P, THETA, PHI, projection='2d', *,
                           cmap=None, colorbar=False, fig=None, ax=None)","Function: plot_spin_distribution(P, THETA, PHI, projection='2d', *,
                           cmap=None, colorbar=False, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,complex_array_to_rgb,"(X, theme='light', rmax=None)","Function: complex_array_to_rgb(X, theme='light', rmax=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,_index_to_sequence,"(i, dim_list)","Function: _index_to_sequence(i, dim_list)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,_sequence_to_index,"(seq, dim_list)","Function: _sequence_to_index(seq, dim_list)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,_to_qubism_index_pair,"(i, dim_list, how='pairs')","Function: _to_qubism_index_pair(i, dim_list, how='pairs')",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,_sequence_to_latex,"(seq, style='ket')","Function: _sequence_to_latex(seq, style='ket')",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,plot_qubism,"(ket, theme='light', how='pairs', grid_iteration=1,
                legend_iteration=0, *, fig=None, ax=None)","Function: plot_qubism(ket, theme='light', how='pairs', grid_iteration=1,
                legend_iteration=0, *, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,function,plot_schmidt,"(ket, theme='light', splitting=None,
                 labels_iteration=(3, 2), *, fig=None, ax=None)","Function: plot_schmidt(ket, theme='light', splitting=None,
                 labels_iteration=(3, 2), *, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,constant,,,"Constant: __all__ = ['plot_wigner_sphere', 'hinton', 'sphereplot',
           'matrix_histogram', 'plot_energy_levels', 'plot_fock_distribution',
           'plot_wigner', 'plot_expectation_values',
           'plot_spin_distribution', 'complex_array_to_rgb',
           'plot_qubism', 'plot_schmidt']",qutip,qutip,v5.0.4,,,,,"__all__ = ['plot_wigner_sphere', 'hinton', 'sphereplot',
           'matrix_histogram', 'plot_energy_levels', 'plot_fock_distribution',
           'plot_wigner', 'plot_expectation_values',
           'plot_spin_distribution', 'complex_array_to_rgb',
           'plot_qubism', 'plot_schmidt']",__all__,"['plot_wigner_sphere', 'hinton', 'sphereplot',
           'matrix_histogram', 'plot_energy_levels', 'plot_fock_distribution',
           'plot_wigner', 'plot_expectation_values',
           'plot_spin_distribution', 'complex_array_to_rgb',
           'plot_qubism', 'plot_schmidt']",,,,,,,,,,,,
visualization.py,python,import,,,Import: itertools,qutip,qutip,v5.0.4,import itertools as it,itertools,,,,,,,,,,,,,,,,,
visualization.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
visualization.py,python,import,,,Import: pi from numpy,qutip,qutip,v5.0.4,"from numpy import pi, array, sin, cos, angle, log2, sqrt",pi,numpy,,,,,,,,,,,,,,,,
visualization.py,python,import,,,Import: array from numpy,qutip,qutip,v5.0.4,"from numpy import pi, array, sin, cos, angle, log2, sqrt",array,numpy,,,,,,,,,,,,,,,,
visualization.py,python,import,,,Import: sin from numpy,qutip,qutip,v5.0.4,"from numpy import pi, array, sin, cos, angle, log2, sqrt",sin,numpy,,,,,,,,,,,,,,,,
visualization.py,python,import,,,Import: cos from numpy,qutip,qutip,v5.0.4,"from numpy import pi, array, sin, cos, angle, log2, sqrt",cos,numpy,,,,,,,,,,,,,,,,
visualization.py,python,import,,,Import: angle from numpy,qutip,qutip,v5.0.4,"from numpy import pi, array, sin, cos, angle, log2, sqrt",angle,numpy,,,,,,,,,,,,,,,,
visualization.py,python,import,,,Import: log2 from numpy,qutip,qutip,v5.0.4,"from numpy import pi, array, sin, cos, angle, log2, sqrt",log2,numpy,,,,,,,,,,,,,,,,
visualization.py,python,import,,,Import: sqrt from numpy,qutip,qutip,v5.0.4,"from numpy import pi, array, sin, cos, angle, log2, sqrt",sqrt,numpy,,,,,,,,,,,,,,,,
visualization.py,python,local_import,,,Import: parse from packaging.version,qutip,qutip,v5.0.4,from packaging.version import parse as parse_version,parse,packaging.version,packaging.version,,,,,,,,,,,,,,,
visualization.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
visualization.py,python,,,,Directory: qutip\visualization.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,class_field,,,"Class field: [instance] _QFuncCoherentGrid.xvec, yvec = _qfunc_check_coordinates(xvec, yvec)",qutip,qutip,v5.0.4,,,,,,,,,_QFuncCoherentGrid,__init__,"(self, xvec, yvec, g: float)","self.xvec, self.yvec = _qfunc_check_coordinates(xvec, yvec)","self.xvec, self.yvec = _qfunc_check_coordinates(xvec, yvec)",,,,,,
wigner.py,python,class_field,,,"Class field: [instance] _QFuncCoherentGrid.grid = np.empty(x.shape, dtype=np.complex128)",qutip,qutip,v5.0.4,,,,,,,,,_QFuncCoherentGrid,__init__,"(self, xvec, yvec, g: float)","self.grid = np.empty(x.shape, dtype=np.complex128)","self.grid = np.empty(x.shape, dtype=np.complex128)",,,,,,
wigner.py,python,class_field,,,Class field: [instance] _QFuncCoherentGrid.grid.real = x,qutip,qutip,v5.0.4,,,,,,,,,_QFuncCoherentGrid,__init__,"(self, xvec, yvec, g: float)",self.grid.real = x,self.grid.real = x,,,,,,
wigner.py,python,class_field,,,Class field: [instance] _QFuncCoherentGrid.grid.imag = -y,qutip,qutip,v5.0.4,,,,,,,,,_QFuncCoherentGrid,__init__,"(self, xvec, yvec, g: float)",self.grid.imag = -y,self.grid.imag = -y,,,,,,
wigner.py,python,class_field,,,Class field: [instance] _QFuncCoherentGrid.prefactor = np.exp(-0.5 * (x * x + y * y)).astype(np.complex128),qutip,qutip,v5.0.4,,,,,,,,,_QFuncCoherentGrid,__init__,"(self, xvec, yvec, g: float)",self.prefactor = np.exp(-0.5 * (x * x + y * y)).astype(np.complex128),self.prefactor = np.exp(-0.5 * (x * x + y * y)).astype(np.complex128),,,,,,
wigner.py,python,class_field,,,Class field: [instance] QFunc._g = g,qutip,qutip,v5.0.4,,,,,,,,,QFunc,__init__,"(
        self, xvec, yvec, g: float = np.sqrt(2), memory: float = 1024
    )",self._g = g,self._g = g,,,,,,
wigner.py,python,class_field,,,"Class field: [instance] QFunc._coherent_grid = _QFuncCoherentGrid(xvec, yvec, g)",qutip,qutip,v5.0.4,,,,,,,,,QFunc,__init__,"(
        self, xvec, yvec, g: float = np.sqrt(2), memory: float = 1024
    )","self._coherent_grid = _QFuncCoherentGrid(xvec, yvec, g)","self._coherent_grid = _QFuncCoherentGrid(xvec, yvec, g)",,,,,,
wigner.py,python,class_field,,,Class field: [instance] QFunc._size_mb = _coherent_grid.grid.size * 16 / (1024 ** 2),qutip,qutip,v5.0.4,,,,,,,,,QFunc,__init__,"(
        self, xvec, yvec, g: float = np.sqrt(2), memory: float = 1024
    )",self._size_mb = self._coherent_grid.grid.size * 16 / (1024 ** 2),self._size_mb = self._coherent_grid.grid.size * 16 / (1024 ** 2),,,,,,
wigner.py,python,class_field,,,Class field: [instance] QFunc._memory_mb = memory,qutip,qutip,v5.0.4,,,,,,,,,QFunc,__init__,"(
        self, xvec, yvec, g: float = np.sqrt(2), memory: float = 1024
    )",self._memory_mb = memory,self._memory_mb = memory,,,,,,
wigner.py,python,class_field,,,Class field: [instance] QFunc._max_size = int(_memory_mb // _size_mb),qutip,qutip,v5.0.4,,,,,,,,,QFunc,__init__,"(
        self, xvec, yvec, g: float = np.sqrt(2), memory: float = 1024
    )",self._max_size = int(self._memory_mb // self._size_mb),self._max_size = int(self._memory_mb // self._size_mb),,,,,,
wigner.py,python,class_field,,,Class field: [instance] QFunc._current_size = 0,qutip,qutip,v5.0.4,,,,,,,,,QFunc,__init__,"(
        self, xvec, yvec, g: float = np.sqrt(2), memory: float = 1024
    )",self._current_size = 0,self._current_size = 0,,,,,,
wigner.py,python,class_field,,,Class field: [instance] QFunc._cache = None,qutip,qutip,v5.0.4,,,,,,,,,QFunc,__init__,"(
        self, xvec, yvec, g: float = np.sqrt(2), memory: float = 1024
    )",self._cache = None,self._cache = None,,,,,,
wigner.py,python,class_method,,,"Class method: _QFuncCoherentGrid.__init__(self, xvec, yvec, g: float)",qutip,qutip,v5.0.4,,,,,,,,,_QFuncCoherentGrid,__init__,"(self, xvec, yvec, g: float)",,,,,,,,
wigner.py,python,class_method,,,"Class method: _QFuncCoherentGrid._start(self, first: int)",qutip,qutip,v5.0.4,,,,,,,,,_QFuncCoherentGrid,_start,"(self, first: int)",,,,,,,,
wigner.py,python,class_method,,,"Class method: _QFuncCoherentGrid.__call__(self, first: int, last: int = None)",qutip,qutip,v5.0.4,,,,,,,,,_QFuncCoherentGrid,__call__,"(self, first: int, last: int = None)",,,,,,,,
wigner.py,python,class_method,,,"Class method: QFunc.__init__(
        self, xvec, yvec, g: float = np.sqrt(2), memory: float = 1024
    )",qutip,qutip,v5.0.4,,,,,,,,,QFunc,__init__,"(
        self, xvec, yvec, g: float = np.sqrt(2), memory: float = 1024
    )",,,,,,,,
wigner.py,python,class_method,,,"Class method: QFunc._alphas(self, size: int)",qutip,qutip,v5.0.4,,,,,,,,,QFunc,_alphas,"(self, size: int)",,,,,,,,
wigner.py,python,class_method,,,"Class method: QFunc._single(self, vector: np.ndarray, alphas: np.ndarray)",qutip,qutip,v5.0.4,,,,,,,,,QFunc,_single,"(self, vector: np.ndarray, alphas: np.ndarray)",,,,,,,,
wigner.py,python,class_method,,,"Class method: QFunc.__call__(self, state: Qobj)",qutip,qutip,v5.0.4,,,,,,,,,QFunc,__call__,"(self, state: Qobj)",,,,,,,,
wigner.py,python,class,,,Class: _QFuncCoherentGrid,qutip,qutip,v5.0.4,,,,,,,,,_QFuncCoherentGrid,,,,,,,,,,
wigner.py,python,class,,,Class: QFunc,qutip,qutip,v5.0.4,,,,,,,,,QFunc,,,,,,,,,,
wigner.py,python,function,wigner_transform,"(psi, j, fullparity, steps, slicearray)","Function: wigner_transform(psi, j, fullparity, steps, slicearray)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,_parity,"(N, j)","Function: _parity(N, j)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,_lambda_f,(N),Function: _lambda_f(N),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,_kernelsu2,"(theta, phi, N, j, parity, fullparity)","Function: _kernelsu2(theta, phi, N, j, parity, fullparity)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,_rotation_matrix,"(theta, phi, j)","Function: _rotation_matrix(theta, phi, j)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,_angle_slice,"(slicearray, theta, phi)","Function: _angle_slice(slicearray, theta, phi)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,wigner,"(psi, xvec, yvec=None, method='clenshaw', g=sqrt(2),
           sparse=False, parfor=False)","Function: wigner(psi, xvec, yvec=None, method='clenshaw', g=sqrt(2),
           sparse=False, parfor=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,_wigner_iterative,"(rho, xvec, yvec, g=sqrt(2))","Function: _wigner_iterative(rho, xvec, yvec, g=sqrt(2))",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,_wigner_laguerre,"(rho, xvec, yvec, g, parallel)","Function: _wigner_laguerre(rho, xvec, yvec, g, parallel)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,_par_wig_eval,(args),Function: _par_wig_eval(args),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,_wigner_fourier,"(psi, xvec, g=np.sqrt(2))","Function: _wigner_fourier(psi, xvec, g=np.sqrt(2))",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,_psi_wigner_fft,"(psi, xvec, g=sqrt(2))","Function: _psi_wigner_fft(psi, xvec, g=sqrt(2))",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,_wigner_fft,"(psi, xvec)","Function: _wigner_fft(psi, xvec)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,_osc_eigen,"(N, pnts)","Function: _osc_eigen(N, pnts)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,_wigner_clenshaw,"(rho, xvec, yvec, g=sqrt(2), sparse=False)","Function: _wigner_clenshaw(rho, xvec, yvec, g=sqrt(2), sparse=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,_wig_laguerre_val,"(L, x, c)","Function: _wig_laguerre_val(L, x, c)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,_qfunc_check_state,(state: Qobj),Function: _qfunc_check_state(state: Qobj),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,_qfunc_check_coordinates,"(xvec, yvec)","Function: _qfunc_check_coordinates(xvec, yvec)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,_qfunc_iterative_single,"(
    vector: np.ndarray, alpha_grid: _QFuncCoherentGrid, g: float,
)","Function: _qfunc_iterative_single(
    vector: np.ndarray, alpha_grid: _QFuncCoherentGrid, g: float,
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,qfunc,"(
    state: Qobj,
    xvec,
    yvec,
    g: float = sqrt(2),
    precompute_memory: float = 1024,
)","Function: qfunc(
    state: Qobj,
    xvec,
    yvec,
    g: float = sqrt(2),
    precompute_memory: float = 1024,
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,spin_q_function,"(rho, theta, phi)","Function: spin_q_function(rho, theta, phi)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,_rho_kq,"(rho, j, k, q)","Function: _rho_kq(rho, j, k, q)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,function,spin_wigner,"(rho, theta, phi)","Function: spin_wigner(rho, theta, phi)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,constant,,,"Constant: __all__ = [
    'wigner', 'qfunc', 'QFunc', 'spin_q_function', 'spin_wigner',
    'wigner_transform',
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    'wigner', 'qfunc', 'QFunc', 'spin_q_function', 'spin_wigner',
    'wigner_transform',
]",__all__,"[
    'wigner', 'qfunc', 'QFunc', 'spin_q_function', 'spin_wigner',
    'wigner_transform',
]",,,,,,,,,,,,
wigner.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
wigner.py,python,import,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,warnings,,,,,,,,,,,,,,,,,
wigner.py,python,import,,,Import: zeros from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",zeros,numpy,,,,,,,,,,,,,,,,
wigner.py,python,import,,,Import: array from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",array,numpy,,,,,,,,,,,,,,,,
wigner.py,python,import,,,Import: arange from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",arange,numpy,,,,,,,,,,,,,,,,
wigner.py,python,import,,,Import: exp from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",exp,numpy,,,,,,,,,,,,,,,,
wigner.py,python,import,,,Import: real from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",real,numpy,,,,,,,,,,,,,,,,
wigner.py,python,import,,,Import: conj from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",conj,numpy,,,,,,,,,,,,,,,,
wigner.py,python,import,,,Import: pi from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",pi,numpy,,,,,,,,,,,,,,,,
wigner.py,python,import,,,Import: copy from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",copy,numpy,,,,,,,,,,,,,,,,
wigner.py,python,import,,,Import: sqrt from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",sqrt,numpy,,,,,,,,,,,,,,,,
wigner.py,python,import,,,Import: meshgrid from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",meshgrid,numpy,,,,,,,,,,,,,,,,
wigner.py,python,import,,,Import: cos from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",cos,numpy,,,,,,,,,,,,,,,,
wigner.py,python,import,,,Import: sin from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",sin,numpy,,,,,,,,,,,,,,,,
wigner.py,python,import,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,scipy.sparse,,,,,,,,,,,,,,,,,
wigner.py,python,import,,,Import: scipy.fftpack,qutip,qutip,v5.0.4,import scipy.fftpack as ft,scipy.fftpack,,,,,,,,,,,,,,,,,
wigner.py,python,import,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg as la,scipy.linalg,,,,,,,,,,,,,,,,,
wigner.py,python,import,,,Import: scipy.special,qutip,qutip,v5.0.4,import scipy.special,scipy.special,,,,,,,,,,,,,,,,,
wigner.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
wigner.py,python,import,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import Qobj, ket2dm, jmat",Qobj,qutip,,,,,,,,,,,,,,,,
wigner.py,python,import,,,Import: ket2dm from qutip,qutip,qutip,v5.0.4,"from qutip import Qobj, ket2dm, jmat",ket2dm,qutip,,,,,,,,,,,,,,,,
wigner.py,python,import,,,Import: jmat from qutip,qutip,qutip,v5.0.4,"from qutip import Qobj, ket2dm, jmat",jmat,qutip,,,,,,,,,,,,,,,,
wigner.py,python,local_import,,,Import: genlaguerre from scipy.special,qutip,qutip,v5.0.4,"from scipy.special import genlaguerre, binom, sph_harm, factorial",genlaguerre,scipy.special,scipy.special,,,,,,,,,,,,,,,
wigner.py,python,local_import,,,Import: binom from scipy.special,qutip,qutip,v5.0.4,"from scipy.special import genlaguerre, binom, sph_harm, factorial",binom,scipy.special,scipy.special,,,,,,,,,,,,,,,
wigner.py,python,local_import,,,Import: sph_harm from scipy.special,qutip,qutip,v5.0.4,"from scipy.special import genlaguerre, binom, sph_harm, factorial",sph_harm,scipy.special,scipy.special,,,,,,,,,,,,,,,
wigner.py,python,local_import,,,Import: factorial from scipy.special,qutip,qutip,v5.0.4,"from scipy.special import genlaguerre, binom, sph_harm, factorial",factorial,scipy.special,scipy.special,,,,,,,,,,,,,,,
wigner.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
wigner.py,python,,,,Directory: qutip\wigner.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,import,,,Import: os,qutip,qutip,v5.0.4,import os,os,,,,,,,,,,,,,,,,,
__init__.py,python,import,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,warnings,,,,,,,,,,,,,,,,,
__init__.py,python,import,,,Import: qutip.settings,qutip,qutip,v5.0.4,import qutip.settings,qutip.settings,,,,,,,,,,,,,,,,,
__init__.py,python,import,,,Import: qutip.version,qutip,qutip,v5.0.4,import qutip.version,qutip.version,,,,,,,,,,,,,,,,,
__init__.py,python,import,,,Import: qutip.piqs.piqs,qutip,qutip,v5.0.4,import qutip.piqs.piqs as piqs,qutip.piqs.piqs,,,,,,,,,,,,,,,,,
__init__.py,python,local_import,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings,settings,qutip.settings,qutip.settings,,,,,,,,,,,,,,,
__init__.py,python,local_import,,,Import: version from qutip.version,qutip,qutip,v5.0.4,from qutip.version import version as __version__,version,qutip.version,qutip.version,,,,,,,,,,,,,,,
__init__.py,python,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,Directory: qutip\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
blochredfield.py,python,function,bloch_redfield_tensor,"(H, a_ops, c_ops=[], sec_cutoff=0.1,
                          fock_basis=False, sparse_eigensolver=False,
                          br_dtype='sparse')","Function: bloch_redfield_tensor(H, a_ops, c_ops=[], sec_cutoff=0.1,
                          fock_basis=False, sparse_eigensolver=False,
                          br_dtype='sparse')",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
blochredfield.py,python,function,brterm,"(H, a_op, spectra, sec_cutoff=0.1,
           fock_basis=False, sparse_eigensolver=False, br_dtype='sparse')","Function: brterm(H, a_op, spectra, sec_cutoff=0.1,
           fock_basis=False, sparse_eigensolver=False, br_dtype='sparse')",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
blochredfield.py,python,constant,,,"Constant: __all__ = ['bloch_redfield_tensor', 'brterm']",qutip,qutip,v5.0.4,,,,,"__all__ = ['bloch_redfield_tensor', 'brterm']",__all__,"['bloch_redfield_tensor', 'brterm']",,,,,,,,,,,,
blochredfield.py,python,import,,,Import: os,qutip,qutip,v5.0.4,import os,os,,,,,,,,,,,,,,,,,
blochredfield.py,python,import,,,Import: inspect,qutip,qutip,v5.0.4,import inspect,inspect,,,,,,,,,,,,,,,,,
blochredfield.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
blochredfield.py,python,local_import,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings as qset,settings,qutip.settings,qutip.settings,,,,,,,,,,,,,,,
blochredfield.py,python,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
blochredfield.py,python,,,,Directory: qutip\core\blochredfield.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,class_field,,,"Class field: CompilationOptions._link_flags = """"",qutip,qutip,v5.0.4,,,,,,,,,CompilationOptions,,,"_link_flags = """"",,,,_link_flags,"""""",,
coefficient.py,python,class_field,,,"Class field: CompilationOptions._compiler_flags = """"",qutip,qutip,v5.0.4,,,,,,,,,CompilationOptions,,,"_compiler_flags = """"",,,,_compiler_flags,"""""",,
coefficient.py,python,class_field,,,"Class field: CompilationOptions._options = {
        ""use_cython"": _use_cython,
        ""try_parse"": True,
        ""static_types"": True,
        ""accept_int"": None,
        ""accept_float"": True,
        ""recompile"": False,
        ""compiler_flags"": _compiler_flags,
        ""link_flags"": _link_flags,
        ""extra_import"": """",
        ""clean_on_error"": True,
        ""build_dir"": None,
    }",qutip,qutip,v5.0.4,,,,,,,,,CompilationOptions,,,"_options = {
        ""use_cython"": _use_cython,
        ""try_parse"": True,
        ""static_types"": True,
        ""accept_int"": None,
        ""accept_float"": True,
        ""recompile"": False,
        ""compiler_flags"": _compiler_flags,
        ""link_flags"": _link_flags,
        ""extra_import"": """",
        ""clean_on_error"": True,
        ""build_dir"": None,
    }",,,,_options,"{
        ""use_cython"": _use_cython,
        ""try_parse"": True,
        ""static_types"": True,
        ""accept_int"": None,
        ""accept_float"": True,
        ""recompile"": False,
        ""compiler_flags"": _compiler_flags,
        ""link_flags"": _link_flags,
        ""extra_import"": """",
        ""clean_on_error"": True,
        ""build_dir"": None,
    }",,
coefficient.py,python,class_field,,,"Class field: CompilationOptions._settings_name = ""compile""",qutip,qutip,v5.0.4,,,,,,,,,CompilationOptions,,,"_settings_name = ""compile""",,,,_settings_name,"""compile""",,
coefficient.py,python,class,,,Class: StringParsingWarning(Warning),qutip,qutip,v5.0.4,,,,,,,,,StringParsingWarning,,,,,(Warning),,,,,
coefficient.py,python,class,,,Class: CompilationOptions(QutipOptions),qutip,qutip,v5.0.4,,,,,,,,,CompilationOptions,,,,,(QutipOptions),,,,,
coefficient.py,python,class,,,Class: DummySelf,qutip,qutip,v5.0.4,,,,,,,,,DummySelf,,,,,,,,,,
coefficient.py,python,function,_return,"(base, **kwargs)","Function: _return(base, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,function,coefficient,"(base, *, tlist=None, args={}, args_ctypes={},
                order=3, compile_opt=None, function_style=None,
                boundary_conditions=None, **kwargs)","Function: coefficient(base, *, tlist=None, args={}, args_ctypes={},
                order=3, compile_opt=None, function_style=None,
                boundary_conditions=None, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,function,norm,(coeff),Function: norm(coeff),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,function,conj,(coeff),Function: conj(coeff),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,function,const,(value),Function: const(value),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,function,clean_compiled_coefficient,(all=False),Function: clean_compiled_coefficient(all=False),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,function,proj,(x),Function: proj(x),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,function,coeff_from_str,"(base, args, args_ctypes, compile_opt=None, **_)","Function: coeff_from_str(base, args, args_ctypes, compile_opt=None, **_)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,function,try_import,"(file_name, parsed_in)","Function: try_import(file_name, parsed_in)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,function,make_cy_code,"(code, variables, constants, raw, compile_opt)","Function: make_cy_code(code, variables, constants, raw, compile_opt)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,function,compile_code,"(code, file_name, parsed, c_opt)","Function: compile_code(code, file_name, parsed, c_opt)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,function,fromstr,(base),Function: fromstr(base),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,function,compileType,(value),Function: compileType(value),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,function,find_type_from_str,(chars),Function: find_type_from_str(chars),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,function,fix_type,"(ctype, accept_int, accept_float)","Function: fix_type(ctype, accept_int, accept_float)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,function,extract_constant,(code),Function: extract_constant(code),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,function,extract_cte_pattern,"(code, constants, pattern)","Function: extract_cte_pattern(code, constants, pattern)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,function,space_parts,"(code, names)","Function: space_parts(code, names)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,function,parse,"(code, args, compile_opt)","Function: parse(code, args, compile_opt)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,function,use_hinted_type,"(variables, code, args_ctypes)","Function: use_hinted_type(variables, code, args_ctypes)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,function,try_parse,"(code, args, args_ctypes, compile_opt)","Function: try_parse(code, args, args_ctypes, compile_opt)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,function,test_parsed,"(code, variables, constants, args)","Function: test_parsed(code, variables, constants, args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,constant,,,"Constant: __all__ = [""coefficient"", ""CompilationOptions"", ""Coefficient"",
           ""clean_compiled_coefficient""]",qutip,qutip,v5.0.4,,,,,"__all__ = [""coefficient"", ""CompilationOptions"", ""Coefficient"",
           ""clean_compiled_coefficient""]",__all__,"[""coefficient"", ""CompilationOptions"", ""Coefficient"",
           ""clean_compiled_coefficient""]",,,,,,,,,,,,
coefficient.py,python,constant,,,"Constant: coefficient_builders = {
    Coefficient: _return,
    np.ndarray: InterCoefficient,
    scipy.interpolate.PPoly: InterCoefficient.from_PPoly,
    scipy.interpolate.BSpline: InterCoefficient.from_Bspline,
}",qutip,qutip,v5.0.4,,,,,"coefficient_builders = {
    Coefficient: _return,
    np.ndarray: InterCoefficient,
    scipy.interpolate.PPoly: InterCoefficient.from_PPoly,
    scipy.interpolate.BSpline: InterCoefficient.from_Bspline,
}",coefficient_builders,"{
    Coefficient: _return,
    np.ndarray: InterCoefficient,
    scipy.interpolate.PPoly: InterCoefficient.from_PPoly,
    scipy.interpolate.BSpline: InterCoefficient.from_Bspline,
}",,,,,,,,,,,,
coefficient.py,python,constant,,,Constant: WARN_MISSING_MODULE = [0],qutip,qutip,v5.0.4,,,,,WARN_MISSING_MODULE = [0],WARN_MISSING_MODULE,[0],,,,,,,,,,,,
coefficient.py,python,constant,,,"Constant: COEFF_VERSION = ""1.1""",qutip,qutip,v5.0.4,,,,,"COEFF_VERSION = ""1.1""",COEFF_VERSION,"""1.1""",,,,,,,,,,,,
coefficient.py,python,constant,,,"Constant: str_env = {
    ""sin"": np.sin,
    ""cos"": np.cos,
    ""tan"": np.tan,
    ""asin"": np.arcsin,
    ""acos"": np.arccos,
    ""atan"": np.arctan,
    ""pi"": np.pi,
    ""sinh"": np.sinh,
    ""cosh"": np.cosh,
    ""tanh"": np.tanh,
    ""asinh"": np.arcsinh,
    ""acosh"": np.arccosh,
    ""atanh"": np.arctanh,
    ""exp"": np.exp,
    ""log"": np.log,
    ""log10"": np.log10,
    ""erf"": scipy.special.erf,
    ""zerf"": scipy.special.erf,
    ""sqrt"": np.sqrt,
    ""real"": np.real,
    ""imag"": np.imag,
    ""conj"": np.conj,
    ""abs"": np.abs,
    ""norm"": lambda x: np.abs(x)**2,
    ""arg"": np.angle,
    ""proj"": proj,
    ""np"": np,
    ""spe"": scipy.special}",qutip,qutip,v5.0.4,,,,,"str_env = {
    ""sin"": np.sin,
    ""cos"": np.cos,
    ""tan"": np.tan,
    ""asin"": np.arcsin,
    ""acos"": np.arccos,
    ""atan"": np.arctan,
    ""pi"": np.pi,
    ""sinh"": np.sinh,
    ""cosh"": np.cosh,
    ""tanh"": np.tanh,
    ""asinh"": np.arcsinh,
    ""acosh"": np.arccosh,
    ""atanh"": np.arctanh,
    ""exp"": np.exp,
    ""log"": np.log,
    ""log10"": np.log10,
    ""erf"": scipy.special.erf,
    ""zerf"": scipy.special.erf,
    ""sqrt"": np.sqrt,
    ""real"": np.real,
    ""imag"": np.imag,
    ""conj"": np.conj,
    ""abs"": np.abs,
    ""norm"": lambda x: np.abs(x)**2,
    ""arg"": np.angle,
    ""proj"": proj,
    ""np"": np,
    ""spe"": scipy.special}",str_env,"{
    ""sin"": np.sin,
    ""cos"": np.cos,
    ""tan"": np.tan,
    ""asin"": np.arcsin,
    ""acos"": np.arccos,
    ""atan"": np.arctan,
    ""pi"": np.pi,
    ""sinh"": np.sinh,
    ""cosh"": np.cosh,
    ""tanh"": np.tanh,
    ""asinh"": np.arcsinh,
    ""acosh"": np.arccosh,
    ""atanh"": np.arctanh,
    ""exp"": np.exp,
    ""log"": np.log,
    ""log10"": np.log10,
    ""erf"": scipy.special.erf,
    ""zerf"": scipy.special.erf,
    ""sqrt"": np.sqrt,
    ""real"": np.real,
    ""imag"": np.imag,
    ""conj"": np.conj,
    ""abs"": np.abs,
    ""norm"": lambda x: np.abs(x)**2,
    ""arg"": np.angle,
    ""proj"": proj,
    ""np"": np,
    ""spe"": scipy.special}",,,,,,,,,,,,
coefficient.py,python,constant,,,"Constant: typeCodes = {
    ""Data"": ""_datalayer"",
    ""complex"": ""_cpl"",
    ""double"": ""_dbl"",
    ""int"": ""_int"",
    ""str"": ""_str"",
    ""object"": ""_obj""
}",qutip,qutip,v5.0.4,,,,,"typeCodes = {
    ""Data"": ""_datalayer"",
    ""complex"": ""_cpl"",
    ""double"": ""_dbl"",
    ""int"": ""_int"",
    ""str"": ""_str"",
    ""object"": ""_obj""
}",typeCodes,"{
    ""Data"": ""_datalayer"",
    ""complex"": ""_cpl"",
    ""double"": ""_dbl"",
    ""int"": ""_int"",
    ""str"": ""_str"",
    ""object"": ""_obj""
}",,,,,,,,,,,,
coefficient.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
coefficient.py,python,import,,,Import: scipy,qutip,qutip,v5.0.4,import scipy,scipy,,,,,,,,,,,,,,,,,
coefficient.py,python,import,,,Import: scipy.interpolate,qutip,qutip,v5.0.4,import scipy.interpolate,scipy.interpolate,,,,,,,,,,,,,,,,,
coefficient.py,python,import,,,Import: os,qutip,qutip,v5.0.4,import os,os,,,,,,,,,,,,,,,,,
coefficient.py,python,import,,,Import: sys,qutip,qutip,v5.0.4,import sys,sys,,,,,,,,,,,,,,,,,
coefficient.py,python,import,,,Import: re,qutip,qutip,v5.0.4,import re,re,,,,,,,,,,,,,,,,,
coefficient.py,python,import,,,Import: dis,qutip,qutip,v5.0.4,import dis,dis,,,,,,,,,,,,,,,,,
coefficient.py,python,import,,,Import: hashlib,qutip,qutip,v5.0.4,import hashlib,hashlib,,,,,,,,,,,,,,,,,
coefficient.py,python,import,,,Import: glob,qutip,qutip,v5.0.4,import glob,glob,,,,,,,,,,,,,,,,,
coefficient.py,python,import,,,Import: importlib,qutip,qutip,v5.0.4,import importlib,importlib,,,,,,,,,,,,,,,,,
coefficient.py,python,import,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,warnings,,,,,,,,,,,,,,,,,
coefficient.py,python,import,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,numbers,,,,,,,,,,,,,,,,,
coefficient.py,python,import,,,Import: defaultdict from collections,qutip,qutip,v5.0.4,from collections import defaultdict,defaultdict,collections,,,,,,,,,,,,,,,,
coefficient.py,python,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
coefficient.py,python,,,,Directory: qutip\core\coefficient.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
dimensions.py,python,class_field,,,Class field: Space._stored_dims = {},qutip,qutip,v5.0.4,,,,,,,,,Space,,,_stored_dims = {},,,,_stored_dims,{},,
dimensions.py,python,class_field,,,Class field: [instance] Space.size = dims,qutip,qutip,v5.0.4,,,,,,,,,Space,__init__,"(self, dims)",self.size = dims,self.size = dims,,,,,,
dimensions.py,python,class_field,,,Class field: [instance] Space.issuper = False,qutip,qutip,v5.0.4,,,,,,,,,Space,__init__,"(self, dims)",self.issuper = False,self.issuper = False,,,,,,
dimensions.py,python,class_field,,,Class field: [instance] Space.superrep = None,qutip,qutip,v5.0.4,,,,,,,,,Space,__init__,"(self, dims)",self.superrep = None,self.superrep = None,,,,,,
dimensions.py,python,class_field,,,Class field: [instance] Space._pure_dims = True,qutip,qutip,v5.0.4,,,,,,,,,Space,__init__,"(self, dims)",self._pure_dims = True,self._pure_dims = True,,,,,,
dimensions.py,python,class_field,,,Class field: [instance] Space.__setitem__ = _frozen,qutip,qutip,v5.0.4,,,,,,,,,Space,__init__,"(self, dims)",self.__setitem__ = _frozen,self.__setitem__ = _frozen,,,,,,
dimensions.py,python,class_field,,,Class field: Field.field_instance = None,qutip,qutip,v5.0.4,,,,,,,,,Field,,,field_instance = None,,,,field_instance,None,,
dimensions.py,python,class_field,,,Class field: [instance] Field.size = 1,qutip,qutip,v5.0.4,,,,,,,,,Field,__init__,(self),self.size = 1,self.size = 1,,,,,,
dimensions.py,python,class_field,,,Class field: [instance] Field.issuper = False,qutip,qutip,v5.0.4,,,,,,,,,Field,__init__,(self),self.issuper = False,self.issuper = False,,,,,,
dimensions.py,python,class_field,,,Class field: [instance] Field.superrep = None,qutip,qutip,v5.0.4,,,,,,,,,Field,__init__,(self),self.superrep = None,self.superrep = None,,,,,,
dimensions.py,python,class_field,,,Class field: [instance] Field._pure_dims = True,qutip,qutip,v5.0.4,,,,,,,,,Field,__init__,(self),self._pure_dims = True,self._pure_dims = True,,,,,,
dimensions.py,python,class_field,,,Class field: [instance] Field.__setitem__ = _frozen,qutip,qutip,v5.0.4,,,,,,,,,Field,__init__,(self),self.__setitem__ = _frozen,self.__setitem__ = _frozen,,,,,,
dimensions.py,python,class_field,,,Class field: Compound._stored_dims = {},qutip,qutip,v5.0.4,,,,,,,,,Compound,,,_stored_dims = {},,,,_stored_dims,{},,
dimensions.py,python,class_field,,,Class field: [instance] Compound.spaces = [],qutip,qutip,v5.0.4,,,,,,,,,Compound,__init__,"(self, *spaces)",self.spaces = [],self.spaces = [],,,,,,
dimensions.py,python,class_field,,,Class field: [instance] Compound.spaces = tuple(spaces),qutip,qutip,v5.0.4,,,,,,,,,Compound,__init__,"(self, *spaces)",self.spaces = tuple(self.spaces),self.spaces = tuple(self.spaces),,,,,,
dimensions.py,python,class_field,,,Class field: [instance] Compound.size = np.prod([space.size for space in spaces]),qutip,qutip,v5.0.4,,,,,,,,,Compound,__init__,"(self, *spaces)",self.size = np.prod([space.size for space in self.spaces]),self.size = np.prod([space.size for space in self.spaces]),,,,,,
dimensions.py,python,class_field,,,Class field: [instance] Compound.issuper = all(space.issuper for space in spaces),qutip,qutip,v5.0.4,,,,,,,,,Compound,__init__,"(self, *spaces)",self.issuper = all(space.issuper for space in self.spaces),self.issuper = all(space.issuper for space in self.spaces),,,,,,
dimensions.py,python,class_field,,,Class field: [instance] Compound._pure_dims = all(space._pure_dims for space in spaces),qutip,qutip,v5.0.4,,,,,,,,,Compound,__init__,"(self, *spaces)",self._pure_dims = all(space._pure_dims for space in self.spaces),self._pure_dims = all(space._pure_dims for space in self.spaces),,,,,,
dimensions.py,python,class_field,,,Class field: [instance] Compound.__setitem__ = _frozen,qutip,qutip,v5.0.4,,,,,,,,,Compound,__init__,"(self, *spaces)",self.__setitem__ = _frozen,self.__setitem__ = _frozen,,,,,,
dimensions.py,python,class_field,,,Class field: SuperSpace._stored_dims = {},qutip,qutip,v5.0.4,,,,,,,,,SuperSpace,,,_stored_dims = {},,,,_stored_dims,{},,
dimensions.py,python,class_field,,,Class field: [instance] SuperSpace.oper = oper,qutip,qutip,v5.0.4,,,,,,,,,SuperSpace,__init__,"(self, oper, rep='super')",self.oper = oper,self.oper = oper,,,,,,
dimensions.py,python,class_field,,,Class field: [instance] SuperSpace.superrep = rep,qutip,qutip,v5.0.4,,,,,,,,,SuperSpace,__init__,"(self, oper, rep='super')",self.superrep = rep,self.superrep = rep,,,,,,
dimensions.py,python,class_field,,,Class field: [instance] SuperSpace.size = oper.shape[0] * oper.shape[1],qutip,qutip,v5.0.4,,,,,,,,,SuperSpace,__init__,"(self, oper, rep='super')",self.size = oper.shape[0] * oper.shape[1],self.size = oper.shape[0] * oper.shape[1],,,,,,
dimensions.py,python,class_field,,,Class field: [instance] SuperSpace.issuper = True,qutip,qutip,v5.0.4,,,,,,,,,SuperSpace,__init__,"(self, oper, rep='super')",self.issuper = True,self.issuper = True,,,,,,
dimensions.py,python,class_field,,,Class field: [instance] SuperSpace._pure_dims = oper._pure_dims,qutip,qutip,v5.0.4,,,,,,,,,SuperSpace,__init__,"(self, oper, rep='super')",self._pure_dims = oper._pure_dims,self._pure_dims = oper._pure_dims,,,,,,
dimensions.py,python,class_field,,,Class field: [instance] SuperSpace.__setitem__ = _frozen,qutip,qutip,v5.0.4,,,,,,,,,SuperSpace,__init__,"(self, oper, rep='super')",self.__setitem__ = _frozen,self.__setitem__ = _frozen,,,,,,
dimensions.py,python,class_field,,,Class field: Dimensions._stored_dims = {},qutip,qutip,v5.0.4,,,,,,,,,Dimensions,,,_stored_dims = {},,,,_stored_dims,{},,
dimensions.py,python,class_field,,,Class field: Dimensions._type = None,qutip,qutip,v5.0.4,,,,,,,,,Dimensions,,,_type = None,,,,_type,None,,
dimensions.py,python,class_field,,,Class field: [instance] Dimensions.from_ = from_,qutip,qutip,v5.0.4,,,,,,,,,Dimensions,__init__,"(self, from_, to_)",self.from_ = from_,self.from_ = from_,,,,,,
dimensions.py,python,class_field,,,Class field: [instance] Dimensions.to_ = to_,qutip,qutip,v5.0.4,,,,,,,,,Dimensions,__init__,"(self, from_, to_)",self.to_ = to_,self.to_ = to_,,,,,,
dimensions.py,python,class_field,,,"Class field: [instance] Dimensions.shape = to_.size, from_.size",qutip,qutip,v5.0.4,,,,,,,,,Dimensions,__init__,"(self, from_, to_)","self.shape = to_.size, from_.size","self.shape = to_.size, from_.size",,,,,,
dimensions.py,python,class_field,,,Class field: [instance] Dimensions.issuper = from_.issuper,qutip,qutip,v5.0.4,,,,,,,,,Dimensions,__init__,"(self, from_, to_)",self.issuper = from_.issuper,self.issuper = from_.issuper,,,,,,
dimensions.py,python,class_field,,,Class field: [instance] Dimensions._pure_dims = from_._pure_dims and to_._pure_dims,qutip,qutip,v5.0.4,,,,,,,,,Dimensions,__init__,"(self, from_, to_)",self._pure_dims = from_._pure_dims and to_._pure_dims,self._pure_dims = from_._pure_dims and to_._pure_dims,,,,,,
dimensions.py,python,class_field,,,Class field: [instance] Dimensions.issquare = False,qutip,qutip,v5.0.4,,,,,,,,,Dimensions,__init__,"(self, from_, to_)",self.issquare = False,self.issquare = False,,,,,,
dimensions.py,python,class_field,,,Class field: [instance] Dimensions.__setitem__ = _frozen,qutip,qutip,v5.0.4,,,,,,,,,Dimensions,__init__,"(self, from_, to_)",self.__setitem__ = _frozen,self.__setitem__ = _frozen,,,,,,
dimensions.py,python,class_method,,,"Class method: MetaSpace.__call__(cls, *args, rep=None)",qutip,qutip,v5.0.4,,,,,,,,,MetaSpace,__call__,"(cls, *args, rep=None)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: MetaSpace.from_list(cls, list_dims, rep=None)",qutip,qutip,v5.0.4,,,,,,,,,MetaSpace,from_list,"(cls, list_dims, rep=None)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: Space.__init__(self, dims)",qutip,qutip,v5.0.4,,,,,,,,,Space,__init__,"(self, dims)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: Space.__eq__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,Space,__eq__,"(self, other)",,,,,,,,
dimensions.py,python,class_method,,,Class method: Space.__hash__(self),qutip,qutip,v5.0.4,,,,,,,,,Space,__hash__,(self),,,,,,,,
dimensions.py,python,class_method,,,Class method: Space.__repr__(self),qutip,qutip,v5.0.4,,,,,,,,,Space,__repr__,(self),,,,,,,,
dimensions.py,python,class_method,,,Class method: Space.as_list(self),qutip,qutip,v5.0.4,,,,,,,,,Space,as_list,(self),,,,,,,,
dimensions.py,python,class_method,,,Class method: Space.__str__(self),qutip,qutip,v5.0.4,,,,,,,,,Space,__str__,(self),,,,,,,,
dimensions.py,python,class_method,,,"Class method: Space.dims2idx(self, dims)",qutip,qutip,v5.0.4,,,,,,,,,Space,dims2idx,"(self, dims)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: Space.idx2dims(self, idx)",qutip,qutip,v5.0.4,,,,,,,,,Space,idx2dims,"(self, idx)",,,,,,,,
dimensions.py,python,class_method,,,Class method: Space.step(self),qutip,qutip,v5.0.4,,,,,,,,,Space,step,(self),,,,,,,,
dimensions.py,python,class_method,,,Class method: Space.flat(self),qutip,qutip,v5.0.4,,,,,,,,,Space,flat,(self),,,,,,,,
dimensions.py,python,class_method,,,"Class method: Space.remove(self, idx)",qutip,qutip,v5.0.4,,,,,,,,,Space,remove,"(self, idx)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: Space.replace(self, idx, new)",qutip,qutip,v5.0.4,,,,,,,,,Space,replace,"(self, idx, new)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: Space.replace_superrep(self, super_rep)",qutip,qutip,v5.0.4,,,,,,,,,Space,replace_superrep,"(self, super_rep)",,,,,,,,
dimensions.py,python,class_method,,,Class method: Space.scalar_like(self),qutip,qutip,v5.0.4,,,,,,,,,Space,scalar_like,(self),,,,,,,,
dimensions.py,python,class_method,,,Class method: Field.__init__(self),qutip,qutip,v5.0.4,,,,,,,,,Field,__init__,(self),,,,,,,,
dimensions.py,python,class_method,,,"Class method: Field.__eq__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,Field,__eq__,"(self, other)",,,,,,,,
dimensions.py,python,class_method,,,Class method: Field.__hash__(self),qutip,qutip,v5.0.4,,,,,,,,,Field,__hash__,(self),,,,,,,,
dimensions.py,python,class_method,,,Class method: Field.__repr__(self),qutip,qutip,v5.0.4,,,,,,,,,Field,__repr__,(self),,,,,,,,
dimensions.py,python,class_method,,,Class method: Field.as_list(self),qutip,qutip,v5.0.4,,,,,,,,,Field,as_list,(self),,,,,,,,
dimensions.py,python,class_method,,,Class method: Field.step(self),qutip,qutip,v5.0.4,,,,,,,,,Field,step,(self),,,,,,,,
dimensions.py,python,class_method,,,Class method: Field.flat(self),qutip,qutip,v5.0.4,,,,,,,,,Field,flat,(self),,,,,,,,
dimensions.py,python,class_method,,,"Class method: Field.remove(self, idx)",qutip,qutip,v5.0.4,,,,,,,,,Field,remove,"(self, idx)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: Field.replace(self, idx, new)",qutip,qutip,v5.0.4,,,,,,,,,Field,replace,"(self, idx, new)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: Compound.__init__(self, *spaces)",qutip,qutip,v5.0.4,,,,,,,,,Compound,__init__,"(self, *spaces)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: Compound.__eq__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,Compound,__eq__,"(self, other)",,,,,,,,
dimensions.py,python,class_method,,,Class method: Compound.__hash__(self),qutip,qutip,v5.0.4,,,,,,,,,Compound,__hash__,(self),,,,,,,,
dimensions.py,python,class_method,,,Class method: Compound.__repr__(self),qutip,qutip,v5.0.4,,,,,,,,,Compound,__repr__,(self),,,,,,,,
dimensions.py,python,class_method,,,Class method: Compound.as_list(self),qutip,qutip,v5.0.4,,,,,,,,,Compound,as_list,(self),,,,,,,,
dimensions.py,python,class_method,,,"Class method: Compound.dims2idx(self, dims)",qutip,qutip,v5.0.4,,,,,,,,,Compound,dims2idx,"(self, dims)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: Compound.idx2dims(self, idx)",qutip,qutip,v5.0.4,,,,,,,,,Compound,idx2dims,"(self, idx)",,,,,,,,
dimensions.py,python,class_method,,,Class method: Compound.step(self),qutip,qutip,v5.0.4,,,,,,,,,Compound,step,(self),,,,,,,,
dimensions.py,python,class_method,,,Class method: Compound.flat(self),qutip,qutip,v5.0.4,,,,,,,,,Compound,flat,(self),,,,,,,,
dimensions.py,python,class_method,,,"Class method: Compound.remove(self, idx)",qutip,qutip,v5.0.4,,,,,,,,,Compound,remove,"(self, idx)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: Compound.replace(self, idx, new)",qutip,qutip,v5.0.4,,,,,,,,,Compound,replace,"(self, idx, new)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: Compound.replace_superrep(self, super_rep)",qutip,qutip,v5.0.4,,,,,,,,,Compound,replace_superrep,"(self, super_rep)",,,,,,,,
dimensions.py,python,class_method,,,Class method: Compound.scalar_like(self),qutip,qutip,v5.0.4,,,,,,,,,Compound,scalar_like,(self),,,,,,,,
dimensions.py,python,class_method,,,"Class method: SuperSpace.__init__(self, oper, rep='super')",qutip,qutip,v5.0.4,,,,,,,,,SuperSpace,__init__,"(self, oper, rep='super')",,,,,,,,
dimensions.py,python,class_method,,,"Class method: SuperSpace.__eq__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,SuperSpace,__eq__,"(self, other)",,,,,,,,
dimensions.py,python,class_method,,,Class method: SuperSpace.__hash__(self),qutip,qutip,v5.0.4,,,,,,,,,SuperSpace,__hash__,(self),,,,,,,,
dimensions.py,python,class_method,,,Class method: SuperSpace.__repr__(self),qutip,qutip,v5.0.4,,,,,,,,,SuperSpace,__repr__,(self),,,,,,,,
dimensions.py,python,class_method,,,Class method: SuperSpace.as_list(self),qutip,qutip,v5.0.4,,,,,,,,,SuperSpace,as_list,(self),,,,,,,,
dimensions.py,python,class_method,,,"Class method: SuperSpace.dims2idx(self, dims)",qutip,qutip,v5.0.4,,,,,,,,,SuperSpace,dims2idx,"(self, dims)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: SuperSpace.idx2dims(self, idx)",qutip,qutip,v5.0.4,,,,,,,,,SuperSpace,idx2dims,"(self, idx)",,,,,,,,
dimensions.py,python,class_method,,,Class method: SuperSpace.step(self),qutip,qutip,v5.0.4,,,,,,,,,SuperSpace,step,(self),,,,,,,,
dimensions.py,python,class_method,,,Class method: SuperSpace.flat(self),qutip,qutip,v5.0.4,,,,,,,,,SuperSpace,flat,(self),,,,,,,,
dimensions.py,python,class_method,,,"Class method: SuperSpace.remove(self, idx)",qutip,qutip,v5.0.4,,,,,,,,,SuperSpace,remove,"(self, idx)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: SuperSpace.replace(self, idx, new)",qutip,qutip,v5.0.4,,,,,,,,,SuperSpace,replace,"(self, idx, new)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: SuperSpace.replace_superrep(self, super_rep)",qutip,qutip,v5.0.4,,,,,,,,,SuperSpace,replace_superrep,"(self, super_rep)",,,,,,,,
dimensions.py,python,class_method,,,Class method: SuperSpace.scalar_like(self),qutip,qutip,v5.0.4,,,,,,,,,SuperSpace,scalar_like,(self),,,,,,,,
dimensions.py,python,class_method,,,"Class method: MetaDims.__call__(cls, *args, rep=None)",qutip,qutip,v5.0.4,,,,,,,,,MetaDims,__call__,"(cls, *args, rep=None)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: Dimensions.__init__(self, from_, to_)",qutip,qutip,v5.0.4,,,,,,,,,Dimensions,__init__,"(self, from_, to_)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: Dimensions.__eq__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,Dimensions,__eq__,"(self, other)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: Dimensions.__ne__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,Dimensions,__ne__,"(self, other)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: Dimensions.__matmul__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,Dimensions,__matmul__,"(self, other)",,,,,,,,
dimensions.py,python,class_method,,,Class method: Dimensions.__hash__(self),qutip,qutip,v5.0.4,,,,,,,,,Dimensions,__hash__,(self),,,,,,,,
dimensions.py,python,class_method,,,Class method: Dimensions.__repr__(self),qutip,qutip,v5.0.4,,,,,,,,,Dimensions,__repr__,(self),,,,,,,,
dimensions.py,python,class_method,,,Class method: Dimensions.__str__(self),qutip,qutip,v5.0.4,,,,,,,,,Dimensions,__str__,(self),,,,,,,,
dimensions.py,python,class_method,,,Class method: Dimensions.as_list(self),qutip,qutip,v5.0.4,,,,,,,,,Dimensions,as_list,(self),,,,,,,,
dimensions.py,python,class_method,,,"Class method: Dimensions.__getitem__(self, key)",qutip,qutip,v5.0.4,,,,,,,,,Dimensions,__getitem__,"(self, key)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: Dimensions.dims2idx(self, dims)",qutip,qutip,v5.0.4,,,,,,,,,Dimensions,dims2idx,"(self, dims)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: Dimensions.idx2dims(self, idxl, idxr)",qutip,qutip,v5.0.4,,,,,,,,,Dimensions,idx2dims,"(self, idxl, idxr)",,,,,,,,
dimensions.py,python,class_method,,,Class method: Dimensions.step(self),qutip,qutip,v5.0.4,,,,,,,,,Dimensions,step,(self),,,,,,,,
dimensions.py,python,class_method,,,Class method: Dimensions.flat(self),qutip,qutip,v5.0.4,,,,,,,,,Dimensions,flat,(self),,,,,,,,
dimensions.py,python,class_method,,,Class method: Dimensions._get_tensor_shape(self),qutip,qutip,v5.0.4,,,,,,,,,Dimensions,_get_tensor_shape,(self),,,,,,,,
dimensions.py,python,class_method,,,Class method: Dimensions._get_tensor_perm(self),qutip,qutip,v5.0.4,,,,,,,,,Dimensions,_get_tensor_perm,(self),,,,,,,,
dimensions.py,python,class_method,,,"Class method: Dimensions.remove(self, idx)",qutip,qutip,v5.0.4,,,,,,,,,Dimensions,remove,"(self, idx)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: Dimensions.replace(self, idx, new)",qutip,qutip,v5.0.4,,,,,,,,,Dimensions,replace,"(self, idx, new)",,,,,,,,
dimensions.py,python,class_method,,,"Class method: Dimensions.replace_superrep(self, super_rep)",qutip,qutip,v5.0.4,,,,,,,,,Dimensions,replace_superrep,"(self, super_rep)",,,,,,,,
dimensions.py,python,class_method,,,Class method: Dimensions.scalar_like(self),qutip,qutip,v5.0.4,,,,,,,,,Dimensions,scalar_like,(self),,,,,,,,
dimensions.py,python,class,,,Class: MetaSpace(type),qutip,qutip,v5.0.4,,,,,,,,,MetaSpace,,,,,(type),,,,,
dimensions.py,python,class,,,Class: Space(metaclass=MetaSpace),qutip,qutip,v5.0.4,,,,,,,,,Space,,,,,(metaclass=MetaSpace),,,,,
dimensions.py,python,class,,,Class: Field(Space),qutip,qutip,v5.0.4,,,,,,,,,Field,,,,,(Space),,,,,
dimensions.py,python,class,,,Class: Compound(Space),qutip,qutip,v5.0.4,,,,,,,,,Compound,,,,,(Space),,,,,
dimensions.py,python,class,,,Class: SuperSpace(Space),qutip,qutip,v5.0.4,,,,,,,,,SuperSpace,,,,,(Space),,,,,
dimensions.py,python,class,,,Class: MetaDims(type),qutip,qutip,v5.0.4,,,,,,,,,MetaDims,,,,,(type),,,,,
dimensions.py,python,class,,,Class: Dimensions(metaclass=MetaDims),qutip,qutip,v5.0.4,,,,,,,,,Dimensions,,,,,(metaclass=MetaDims),,,,,
dimensions.py,python,function,flatten,(l),Function: flatten(l),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
dimensions.py,python,function,deep_remove,"(l, *what)","Function: deep_remove(l, *what)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
dimensions.py,python,function,unflatten,"(l, idxs)","Function: unflatten(l, idxs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
dimensions.py,python,function,_enumerate_flat,"(l, idx=0)","Function: _enumerate_flat(l, idx=0)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
dimensions.py,python,function,_collapse_composite_index,(dims),Function: _collapse_composite_index(dims),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
dimensions.py,python,function,_collapse_dims_to_level,"(dims, level=1)","Function: _collapse_dims_to_level(dims, level=1)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
dimensions.py,python,function,collapse_dims_oper,(dims),Function: collapse_dims_oper(dims),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
dimensions.py,python,function,collapse_dims_super,(dims),Function: collapse_dims_super(dims),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
dimensions.py,python,function,enumerate_flat,(l),Function: enumerate_flat(l),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
dimensions.py,python,function,deep_map,"(fn, collection, over=(tuple, list))","Function: deep_map(fn, collection, over=(tuple, list))",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
dimensions.py,python,function,dims_to_tensor_perm,(dims),Function: dims_to_tensor_perm(dims),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
dimensions.py,python,function,dims_to_tensor_shape,(dims),Function: dims_to_tensor_shape(dims),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
dimensions.py,python,function,dims_idxs_to_tensor_idxs,"(dims, indices)","Function: dims_idxs_to_tensor_idxs(dims, indices)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
dimensions.py,python,function,to_tensor_rep,(q_oper),Function: to_tensor_rep(q_oper),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
dimensions.py,python,function,from_tensor_rep,"(tensorrep, dims)","Function: from_tensor_rep(tensorrep, dims)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
dimensions.py,python,function,_frozen,"(*args, **kwargs)","Function: _frozen(*args, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
dimensions.py,python,constant,,,"Constant: __all__ = [""to_tensor_rep"", ""from_tensor_rep"", ""Space"", ""Dimensions""]",qutip,qutip,v5.0.4,,,,,"__all__ = [""to_tensor_rep"", ""from_tensor_rep"", ""Space"", ""Dimensions""]",__all__,"[""to_tensor_rep"", ""from_tensor_rep"", ""Space"", ""Dimensions""]",,,,,,,,,,,,
dimensions.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
dimensions.py,python,import,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,numbers,,,,,,,,,,,,,,,,,
dimensions.py,python,import,,,Import: getitem from operator,qutip,qutip,v5.0.4,from operator import getitem,getitem,operator,,,,,,,,,,,,,,,,
dimensions.py,python,import,,,Import: partial from functools,qutip,qutip,v5.0.4,from functools import partial,partial,functools,,,,,,,,,,,,,,,,
dimensions.py,python,local_import,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings,settings,qutip.settings,qutip.settings,,,,,,,,,,,,,,,
dimensions.py,python,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
dimensions.py,python,,,,Directory: qutip\core\dimensions.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
energy_restricted.py,python,class_field,,,Class field: EnrSpace._stored_dims = {},qutip,qutip,v5.0.4,,,,,,,,,EnrSpace,,,_stored_dims = {},,,,_stored_dims,{},,
energy_restricted.py,python,class_field,,,Class field: [instance] EnrSpace.dims = tuple(dims),qutip,qutip,v5.0.4,,,,,,,,,EnrSpace,__init__,"(self, dims, excitations)",self.dims = tuple(dims),self.dims = tuple(dims),,,,,,
energy_restricted.py,python,class_field,,,Class field: [instance] EnrSpace.n_excitations = excitations,qutip,qutip,v5.0.4,,,,,,,,,EnrSpace,__init__,"(self, dims, excitations)",self.n_excitations = excitations,self.n_excitations = excitations,,,,,,
energy_restricted.py,python,class_field,,,"Class field: [instance] EnrSpace.size, state2idx, idx2state = enr_dicts",qutip,qutip,v5.0.4,,,,,,,,,EnrSpace,__init__,"(self, dims, excitations)","self.size, self.state2idx, self.idx2state = enr_dicts","self.size, self.state2idx, self.idx2state = enr_dicts",,,,,,
energy_restricted.py,python,class_field,,,Class field: [instance] EnrSpace.issuper = False,qutip,qutip,v5.0.4,,,,,,,,,EnrSpace,__init__,"(self, dims, excitations)",self.issuper = False,self.issuper = False,,,,,,
energy_restricted.py,python,class_field,,,Class field: [instance] EnrSpace.superrep = None,qutip,qutip,v5.0.4,,,,,,,,,EnrSpace,__init__,"(self, dims, excitations)",self.superrep = None,self.superrep = None,,,,,,
energy_restricted.py,python,class_field,,,Class field: [instance] EnrSpace._pure_dims = False,qutip,qutip,v5.0.4,,,,,,,,,EnrSpace,__init__,"(self, dims, excitations)",self._pure_dims = False,self._pure_dims = False,,,,,,
energy_restricted.py,python,class_method,,,"Class method: EnrSpace.__init__(self, dims, excitations)",qutip,qutip,v5.0.4,,,,,,,,,EnrSpace,__init__,"(self, dims, excitations)",,,,,,,,
energy_restricted.py,python,class_method,,,"Class method: EnrSpace.__eq__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,EnrSpace,__eq__,"(self, other)",,,,,,,,
energy_restricted.py,python,class_method,,,Class method: EnrSpace.__hash__(self),qutip,qutip,v5.0.4,,,,,,,,,EnrSpace,__hash__,(self),,,,,,,,
energy_restricted.py,python,class_method,,,Class method: EnrSpace.__repr__(self),qutip,qutip,v5.0.4,,,,,,,,,EnrSpace,__repr__,(self),,,,,,,,
energy_restricted.py,python,class_method,,,Class method: EnrSpace.as_list(self),qutip,qutip,v5.0.4,,,,,,,,,EnrSpace,as_list,(self),,,,,,,,
energy_restricted.py,python,class_method,,,"Class method: EnrSpace.dims2idx(self, dims)",qutip,qutip,v5.0.4,,,,,,,,,EnrSpace,dims2idx,"(self, dims)",,,,,,,,
energy_restricted.py,python,class_method,,,"Class method: EnrSpace.idx2dims(self, idx)",qutip,qutip,v5.0.4,,,,,,,,,EnrSpace,idx2dims,"(self, idx)",,,,,,,,
energy_restricted.py,python,class,,,Class: EnrSpace(Space),qutip,qutip,v5.0.4,,,,,,,,,EnrSpace,,,,,(Space),,,,,
energy_restricted.py,python,function,enr_state_dictionaries,"(dims, excitations)","Function: enr_state_dictionaries(dims, excitations)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
energy_restricted.py,python,function,enr_fock,"(dims, excitations, state, *, dtype=None)","Function: enr_fock(dims, excitations, state, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
energy_restricted.py,python,function,enr_thermal_dm,"(dims, excitations, n, *, dtype=None)","Function: enr_thermal_dm(dims, excitations, n, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
energy_restricted.py,python,function,enr_destroy,"(dims, excitations, *, dtype=None)","Function: enr_destroy(dims, excitations, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
energy_restricted.py,python,function,enr_identity,"(dims, excitations, *, dtype=None)","Function: enr_identity(dims, excitations, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
energy_restricted.py,python,constant,,,"Constant: __all__ = ['enr_state_dictionaries', 'enr_fock',
           'enr_thermal_dm', 'enr_destroy', 'enr_identity']",qutip,qutip,v5.0.4,,,,,"__all__ = ['enr_state_dictionaries', 'enr_fock',
           'enr_thermal_dm', 'enr_destroy', 'enr_identity']",__all__,"['enr_state_dictionaries', 'enr_fock',
           'enr_thermal_dm', 'enr_destroy', 'enr_identity']",,,,,,,,,,,,
energy_restricted.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
energy_restricted.py,python,import,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse,scipy.sparse,,,,,,,,,,,,,,,,,
energy_restricted.py,python,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
energy_restricted.py,python,,,,Directory: qutip\core\energy_restricted.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
expect.py,python,function,expect,"(oper, state)","Function: expect(oper, state)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
expect.py,python,function,_single_qobj_expect,"(oper, state)","Function: _single_qobj_expect(oper, state)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
expect.py,python,function,variance,"(oper, state)","Function: variance(oper, state)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
expect.py,python,constant,,,"Constant: __all__ = ['expect', 'variance']",qutip,qutip,v5.0.4,,,,,"__all__ = ['expect', 'variance']",__all__,"['expect', 'variance']",,,,,,,,,,,,
expect.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
expect.py,python,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
expect.py,python,,,,Directory: qutip\core\expect.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,cy_gate,"(*, dtype=None)","Function: cy_gate(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,cz_gate,"(*, dtype=None)","Function: cz_gate(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,s_gate,"(*, dtype=None)","Function: s_gate(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,cs_gate,"(*, dtype=None)","Function: cs_gate(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,t_gate,"(*, dtype=None)","Function: t_gate(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,ct_gate,"(*, dtype=None)","Function: ct_gate(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,rx,"(phi, *, dtype=None)","Function: rx(phi, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,ry,"(phi, *, dtype=None)","Function: ry(phi, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,rz,"(phi, *, dtype=None)","Function: rz(phi, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,sqrtnot,"(*, dtype=None)","Function: sqrtnot(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,snot,"(*, dtype=None)","Function: snot(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,phasegate,"(theta, *, dtype=None)","Function: phasegate(theta, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,qrot,"(theta, phi, *, dtype=None)","Function: qrot(theta, phi, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,cphase,"(theta, *, dtype=None)","Function: cphase(theta, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,cnot,"(*, dtype=None)","Function: cnot(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,csign,"(*, dtype=None)","Function: csign(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,berkeley,"(*, dtype=None)","Function: berkeley(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,swapalpha,"(alpha, *, dtype=None)","Function: swapalpha(alpha, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,swap,"(*, dtype=None)","Function: swap(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,iswap,"(*, dtype=None)","Function: iswap(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,sqrtswap,"(*, dtype=None)","Function: sqrtswap(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,sqrtiswap,"(*, dtype=None)","Function: sqrtiswap(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,molmer_sorensen,"(theta, *, dtype=None)","Function: molmer_sorensen(theta, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,fredkin,"(*, dtype=None)","Function: fredkin(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,toffoli,"(*, dtype=None)","Function: toffoli(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,globalphase,"(theta, N=1, *, dtype=None)","Function: globalphase(theta, N=1, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,_hamming_distance,(x),Function: _hamming_distance(x),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,hadamard_transform,"(N=1, *, dtype=None)","Function: hadamard_transform(N=1, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,_powers,"(op, N)","Function: _powers(op, N)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,function,qubit_clifford_group,"(*, dtype=None)","Function: qubit_clifford_group(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,constant,,,"Constant: __all__ = [
    ""rx"",
    ""ry"",
    ""rz"",
    ""sqrtnot"",
    ""snot"",
    ""phasegate"",
    ""qrot"",
    ""cy_gate"",
    ""cz_gate"",
    ""s_gate"",
    ""t_gate"",
    ""cs_gate"",
    ""ct_gate"",
    ""cphase"",
    ""cnot"",
    ""csign"",
    ""berkeley"",
    ""swapalpha"",
    ""swap"",
    ""iswap"",
    ""sqrtswap"",
    ""sqrtiswap"",
    ""fredkin"",
    ""molmer_sorensen"",
    ""toffoli"",
    ""hadamard_transform"",
    ""qubit_clifford_group"",
    ""globalphase"",
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    ""rx"",
    ""ry"",
    ""rz"",
    ""sqrtnot"",
    ""snot"",
    ""phasegate"",
    ""qrot"",
    ""cy_gate"",
    ""cz_gate"",
    ""s_gate"",
    ""t_gate"",
    ""cs_gate"",
    ""ct_gate"",
    ""cphase"",
    ""cnot"",
    ""csign"",
    ""berkeley"",
    ""swapalpha"",
    ""swap"",
    ""iswap"",
    ""sqrtswap"",
    ""sqrtiswap"",
    ""fredkin"",
    ""molmer_sorensen"",
    ""toffoli"",
    ""hadamard_transform"",
    ""qubit_clifford_group"",
    ""globalphase"",
]",__all__,"[
    ""rx"",
    ""ry"",
    ""rz"",
    ""sqrtnot"",
    ""snot"",
    ""phasegate"",
    ""qrot"",
    ""cy_gate"",
    ""cz_gate"",
    ""s_gate"",
    ""t_gate"",
    ""cs_gate"",
    ""ct_gate"",
    ""cphase"",
    ""cnot"",
    ""csign"",
    ""berkeley"",
    ""swapalpha"",
    ""swap"",
    ""iswap"",
    ""sqrtswap"",
    ""sqrtiswap"",
    ""fredkin"",
    ""molmer_sorensen"",
    ""toffoli"",
    ""hadamard_transform"",
    ""qubit_clifford_group"",
    ""globalphase"",
]",,,,,,,,,,,,
gates.py,python,constant,,,"Constant: _DIMS_2_QB = Dimensions([[2, 2], [2, 2]])",qutip,qutip,v5.0.4,,,,,"_DIMS_2_QB = Dimensions([[2, 2], [2, 2]])",_DIMS_2_QB,"Dimensions([[2, 2], [2, 2]])",,,,,,,,,,,,
gates.py,python,constant,,,"Constant: _DIMS_3_QB = Dimensions([[2, 2, 2], [2, 2, 2]])",qutip,qutip,v5.0.4,,,,,"_DIMS_3_QB = Dimensions([[2, 2, 2], [2, 2, 2]])",_DIMS_3_QB,"Dimensions([[2, 2, 2], [2, 2, 2]])",,,,,,,,,,,,
gates.py,python,import,,,Import: product from itertools,qutip,qutip,v5.0.4,from itertools import product,product,itertools,,,,,,,,,,,,,,,,
gates.py,python,import,,,Import: partial from functools,qutip,qutip,v5.0.4,"from functools import partial, reduce",partial,functools,,,,,,,,,,,,,,,,
gates.py,python,import,,,Import: reduce from functools,qutip,qutip,v5.0.4,"from functools import partial, reduce",reduce,functools,,,,,,,,,,,,,,,,
gates.py,python,import,,,Import: mul from operator,qutip,qutip,v5.0.4,from operator import mul,mul,operator,,,,,,,,,,,,,,,,
gates.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
gates.py,python,import,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,scipy.sparse,,,,,,,,,,,,,,,,,
gates.py,python,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
gates.py,python,,,,Directory: qutip\core\gates.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
metrics.py,python,function,fidelity,"(A, B)","Function: fidelity(A, B)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
metrics.py,python,function,_hilbert_space_dims,(oper),Function: _hilbert_space_dims(oper),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
metrics.py,python,function,_process_fidelity_to_id,(oper),Function: _process_fidelity_to_id(oper),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
metrics.py,python,function,_kraus_or_qobj_to_choi,(oper),Function: _kraus_or_qobj_to_choi(oper),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
metrics.py,python,function,process_fidelity,"(oper, target=None)","Function: process_fidelity(oper, target=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
metrics.py,python,function,average_gate_fidelity,"(oper, target=None)","Function: average_gate_fidelity(oper, target=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
metrics.py,python,function,tracedist,"(A, B, sparse=False, tol=0)","Function: tracedist(A, B, sparse=False, tol=0)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
metrics.py,python,function,hilbert_dist,"(A, B)","Function: hilbert_dist(A, B)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
metrics.py,python,function,bures_dist,"(A, B)","Function: bures_dist(A, B)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
metrics.py,python,function,bures_angle,"(A, B)","Function: bures_angle(A, B)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
metrics.py,python,function,hellinger_dist,"(A, B, sparse=False, tol=0)","Function: hellinger_dist(A, B, sparse=False, tol=0)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
metrics.py,python,function,dnorm,"(A, B=None, solver=""CVXOPT"", verbose=False, force_solve=False,
          sparse=True)","Function: dnorm(A, B=None, solver=""CVXOPT"", verbose=False, force_solve=False,
          sparse=True)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
metrics.py,python,function,unitarity,(oper),Function: unitarity(oper),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
metrics.py,python,constant,,,"Constant: __all__ = ['fidelity', 'tracedist', 'bures_dist', 'bures_angle',
           'hellinger_dist', 'hilbert_dist', 'average_gate_fidelity',
           'process_fidelity', 'unitarity', 'dnorm']",qutip,qutip,v5.0.4,,,,,"__all__ = ['fidelity', 'tracedist', 'bures_dist', 'bures_angle',
           'hellinger_dist', 'hilbert_dist', 'average_gate_fidelity',
           'process_fidelity', 'unitarity', 'dnorm']",__all__,"['fidelity', 'tracedist', 'bures_dist', 'bures_angle',
           'hellinger_dist', 'hilbert_dist', 'average_gate_fidelity',
           'process_fidelity', 'unitarity', 'dnorm']",,,,,,,,,,,,
metrics.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
metrics.py,python,import,,,Import: linalg from scipy,qutip,qutip,v5.0.4,from scipy import linalg as la,linalg,scipy,,,,,,,,,,,,,,,,
metrics.py,python,import,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,scipy.sparse,,,,,,,,,,,,,,,,,
metrics.py,python,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
metrics.py,python,,,,Directory: qutip\core\metrics.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,qdiags,"(diagonals, offsets=None, dims=None, shape=None, *,
           dtype=None)","Function: qdiags(diagonals, offsets=None, dims=None, shape=None, *,
           dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,jmat,"(j, which=None, *, dtype=None)","Function: jmat(j, which=None, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,_jplus,"(j, *, dtype=None)","Function: _jplus(j, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,_jz,"(j, *, dtype=None)","Function: _jz(j, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,spin_Jx,"(j, *, dtype=None)","Function: spin_Jx(j, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,spin_Jy,"(j, *, dtype=None)","Function: spin_Jy(j, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,spin_Jz,"(j, *, dtype=None)","Function: spin_Jz(j, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,spin_Jm,"(j, *, dtype=None)","Function: spin_Jm(j, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,spin_Jp,"(j, *, dtype=None)","Function: spin_Jp(j, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,spin_J_set,"(j, *, dtype=None)","Function: spin_J_set(j, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,sigmap,"(*, dtype=None)","Function: sigmap(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,sigmam,"(*, dtype=None)","Function: sigmam(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,sigmax,"(*, dtype=None)","Function: sigmax(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,sigmay,"(*, dtype=None)","Function: sigmay(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,sigmaz,"(*, dtype=None)","Function: sigmaz(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,destroy,"(N, offset=0, *, dtype=None)","Function: destroy(N, offset=0, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,create,"(N, offset=0, *, dtype=None)","Function: create(N, offset=0, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,fdestroy,"(n_sites, site, dtype=None)","Function: fdestroy(n_sites, site, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,fcreate,"(n_sites, site, dtype=None)","Function: fcreate(n_sites, site, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,_f_op,"(n_sites, site, action, dtype=None)","Function: _f_op(n_sites, site, action, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,qzero,"(dimensions, dims_right=None, *, dtype=None)","Function: qzero(dimensions, dims_right=None, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,qzero_like,(qobj),Function: qzero_like(qobj),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,qeye,"(dimensions, *, dtype=None)","Function: qeye(dimensions, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,qeye_like,(qobj),Function: qeye_like(qobj),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,position,"(N, offset=0, *, dtype=None)","Function: position(N, offset=0, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,momentum,"(N, offset=0, *, dtype=None)","Function: momentum(N, offset=0, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,num,"(N, offset=0, *, dtype=None)","Function: num(N, offset=0, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,squeeze,"(N, z, offset=0, *, dtype=None)","Function: squeeze(N, z, offset=0, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,squeezing,"(a1, a2, z)","Function: squeezing(a1, a2, z)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,displace,"(N, alpha, offset=0, *, dtype=None)","Function: displace(N, alpha, offset=0, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,commutator,"(A, B, kind=""normal"")","Function: commutator(A, B, kind=""normal"")",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,qutrit_ops,"(*, dtype=None)","Function: qutrit_ops(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,phase,"(N, phi0=0, *, dtype=None)","Function: phase(N, phi0=0, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,charge,"(Nmax, Nmin=None, frac=1, *, dtype=None)","Function: charge(Nmax, Nmin=None, frac=1, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,tunneling,"(N, m=1, *, dtype=None)","Function: tunneling(N, m=1, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,qft,"(dimensions, *, dtype=None)","Function: qft(dimensions, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,function,swap,"(N, M, *, dtype=None)","Function: swap(N, M, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,constant,,,"Constant: __all__ = [
    'jmat', 'spin_Jx', 'spin_Jy', 'spin_Jz', 'spin_Jm', 'spin_Jp',
    'spin_J_set', 'sigmap', 'sigmam', 'sigmax', 'sigmay', 'sigmaz',
    'destroy', 'create', 'fdestroy', 'fcreate', 'qeye', 'identity',
    'position', 'momentum', 'num', 'squeeze', 'squeezing', 'displace',
    'commutator', 'qutrit_ops', 'qdiags', 'phase', 'qzero', 'charge',
    'tunneling', 'qft', 'qzero_like', 'qeye_like', 'swap',
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    'jmat', 'spin_Jx', 'spin_Jy', 'spin_Jz', 'spin_Jm', 'spin_Jp',
    'spin_J_set', 'sigmap', 'sigmam', 'sigmax', 'sigmay', 'sigmaz',
    'destroy', 'create', 'fdestroy', 'fcreate', 'qeye', 'identity',
    'position', 'momentum', 'num', 'squeeze', 'squeezing', 'displace',
    'commutator', 'qutrit_ops', 'qdiags', 'phase', 'qzero', 'charge',
    'tunneling', 'qft', 'qzero_like', 'qeye_like', 'swap',
]",__all__,"[
    'jmat', 'spin_Jx', 'spin_Jy', 'spin_Jz', 'spin_Jm', 'spin_Jp',
    'spin_J_set', 'sigmap', 'sigmam', 'sigmax', 'sigmay', 'sigmaz',
    'destroy', 'create', 'fdestroy', 'fcreate', 'qeye', 'identity',
    'position', 'momentum', 'num', 'squeeze', 'squeezing', 'displace',
    'commutator', 'qutrit_ops', 'qdiags', 'phase', 'qzero', 'charge',
    'tunneling', 'qft', 'qzero_like', 'qeye_like', 'swap',
]",,,,,,,,,,,,
operators.py,python,constant,,,"Constant: _SIGMAP = jmat(0.5, '+')",qutip,qutip,v5.0.4,,,,,"_SIGMAP = jmat(0.5, '+')",_SIGMAP,"jmat(0.5, '+')",,,,,,,,,,,,
operators.py,python,constant,,,"Constant: _SIGMAM = jmat(0.5, '-')",qutip,qutip,v5.0.4,,,,,"_SIGMAM = jmat(0.5, '-')",_SIGMAM,"jmat(0.5, '-')",,,,,,,,,,,,
operators.py,python,constant,,,"Constant: _SIGMAX = 2 * jmat(0.5, 'x')",qutip,qutip,v5.0.4,,,,,"_SIGMAX = 2 * jmat(0.5, 'x')",_SIGMAX,"2 * jmat(0.5, 'x')",,,,,,,,,,,,
operators.py,python,constant,,,"Constant: _SIGMAY = 2 * jmat(0.5, 'y')",qutip,qutip,v5.0.4,,,,,"_SIGMAY = 2 * jmat(0.5, 'y')",_SIGMAY,"2 * jmat(0.5, 'y')",,,,,,,,,,,,
operators.py,python,constant,,,"Constant: _SIGMAZ = 2 * jmat(0.5, 'z')",qutip,qutip,v5.0.4,,,,,"_SIGMAZ = 2 * jmat(0.5, 'z')",_SIGMAZ,"2 * jmat(0.5, 'z')",,,,,,,,,,,,
operators.py,python,constant,,,Constant: identity = qeye,qutip,qutip,v5.0.4,,,,,identity = qeye,identity,qeye,,,,,,,,,,,,
operators.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
operators.py,python,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
operators.py,python,,,,Directory: qutip\core\operators.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
options.py,python,class_field,,,Class field: QutipOptions._options = {},qutip,qutip,v5.0.4,,,,,,,,,QutipOptions,,,_options = {},,,,_options,{},,
options.py,python,class_field,,,Class field: QutipOptions._settings_name = None,qutip,qutip,v5.0.4,,,,,,,,,QutipOptions,,,_settings_name = None,,,,_settings_name,None,,
options.py,python,class_field,,,Class field: [instance] QutipOptions.options = _options.copy(),qutip,qutip,v5.0.4,,,,,,,,,QutipOptions,__init__,"(self, **options)",self.options = self._options.copy(),self.options = self._options.copy(),,,,,,
options.py,python,class_field,,,"Class field: CoreOptions._options = {
        # use auto tidyup
        ""auto_tidyup"": True,
        # use auto tidyup dims on multiplication
        ""auto_tidyup_dims"": False,
        # detect hermiticity
        ""auto_herm"": True,
        # general absolute tolerance
        ""atol"": 1e-12,
        # general relative tolerance
        ""rtol"": 1e-12,
        # use auto tidyup absolute tolerance
        ""auto_tidyup_atol"": 1e-14,
        # signature style expected by function coefficients
        ""function_coefficient_style"": ""auto"",
        # Default Qobj dtype for Qobj create function
        ""default_dtype"": None,
    }",qutip,qutip,v5.0.4,,,,,,,,,CoreOptions,,,"_options = {
        # use auto tidyup
        ""auto_tidyup"": True,
        # use auto tidyup dims on multiplication
        ""auto_tidyup_dims"": False,
        # detect hermiticity
        ""auto_herm"": True,
        # general absolute tolerance
        ""atol"": 1e-12,
        # general relative tolerance
        ""rtol"": 1e-12,
        # use auto tidyup absolute tolerance
        ""auto_tidyup_atol"": 1e-14,
        # signature style expected by function coefficients
        ""function_coefficient_style"": ""auto"",
        # Default Qobj dtype for Qobj create function
        ""default_dtype"": None,
    }",,,,_options,"{
        # use auto tidyup
        ""auto_tidyup"": True,
        # use auto tidyup dims on multiplication
        ""auto_tidyup_dims"": False,
        # detect hermiticity
        ""auto_herm"": True,
        # general absolute tolerance
        ""atol"": 1e-12,
        # general relative tolerance
        ""rtol"": 1e-12,
        # use auto tidyup absolute tolerance
        ""auto_tidyup_atol"": 1e-14,
        # signature style expected by function coefficients
        ""function_coefficient_style"": ""auto"",
        # Default Qobj dtype for Qobj create function
        ""default_dtype"": None,
    }",,
options.py,python,class_field,,,"Class field: CoreOptions._settings_name = ""core""",qutip,qutip,v5.0.4,,,,,,,,,CoreOptions,,,"_settings_name = ""core""",,,,_settings_name,"""core""",,
options.py,python,class_method,,,"Class method: QutipOptions.__init__(self, **options)",qutip,qutip,v5.0.4,,,,,,,,,QutipOptions,__init__,"(self, **options)",,,,,,,,
options.py,python,class_method,,,"Class method: QutipOptions.__contains__(self, key)",qutip,qutip,v5.0.4,,,,,,,,,QutipOptions,__contains__,"(self, key)",,,,,,,,
options.py,python,class_method,,,"Class method: QutipOptions.__getitem__(self, key)",qutip,qutip,v5.0.4,,,,,,,,,QutipOptions,__getitem__,"(self, key)",,,,,,,,
options.py,python,class_method,,,"Class method: QutipOptions.__setitem__(self, key, value)",qutip,qutip,v5.0.4,,,,,,,,,QutipOptions,__setitem__,"(self, key, value)",,,,,,,,
options.py,python,class_method,,,"Class method: QutipOptions.__repr__(self, full=True)",qutip,qutip,v5.0.4,,,,,,,,,QutipOptions,__repr__,"(self, full=True)",,,,,,,,
options.py,python,class_method,,,Class method: QutipOptions.__enter__(self),qutip,qutip,v5.0.4,,,,,,,,,QutipOptions,__enter__,(self),,,,,,,,
options.py,python,class_method,,,"Class method: QutipOptions.__exit__(self, exc_type, exc_value, exc_traceback)",qutip,qutip,v5.0.4,,,,,,,,,QutipOptions,__exit__,"(self, exc_type, exc_value, exc_traceback)",,,,,,,,
options.py,python,class,,,Class: QutipOptions,qutip,qutip,v5.0.4,,,,,,,,,QutipOptions,,,,,,,,,,
options.py,python,class,,,Class: CoreOptions(QutipOptions),qutip,qutip,v5.0.4,,,,,,,,,CoreOptions,,,,,(QutipOptions),,,,,
options.py,python,constant,,,"Constant: __all__ = [""CoreOptions""]",qutip,qutip,v5.0.4,,,,,"__all__ = [""CoreOptions""]",__all__,"[""CoreOptions""]",,,,,,,,,,,,
options.py,python,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
options.py,python,,,,Directory: qutip\core\options.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qobj.py,python,class_field,,,Class field: Qobj.__array_ufunc__ = None,qutip,qutip,v5.0.4,,,,,,,,,Qobj,,,__array_ufunc__ = None,,,,__array_ufunc__,None,,
qobj.py,python,class_field,,,Class field: [instance] Qobj._isherm = isherm,qutip,qutip,v5.0.4,,,,,,,,,Qobj,__init__,"(self, arg=None, dims=None,
                 copy=True, superrep=None, isherm=None, isunitary=None)",self._isherm = isherm,self._isherm = isherm,,,,,,
qobj.py,python,class_field,,,Class field: [instance] Qobj._isunitary = isunitary,qutip,qutip,v5.0.4,,,,,,,,,Qobj,__init__,"(self, arg=None, dims=None,
                 copy=True, superrep=None, isherm=None, isunitary=None)",self._isunitary = isunitary,self._isunitary = isunitary,,,,,,
qobj.py,python,class_field,,,"Class field: [instance] Qobj._initialize_data(arg, dims, copy)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,__init__,"(self, arg=None, dims=None,
                 copy=True, superrep=None, isherm=None, isunitary=None)","self._initialize_data(arg, dims, copy)","self._initialize_data(arg, dims, copy)",,,,,,
qobj.py,python,class_method,,,"Class method: Qobj._initialize_data(self, arg, dims, copy)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,_initialize_data,"(self, arg, dims, copy)",,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.__init__(self, arg=None, dims=None,
                 copy=True, superrep=None, isherm=None, isunitary=None)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,__init__,"(self, arg=None, dims=None,
                 copy=True, superrep=None, isherm=None, isunitary=None)",,,,,,,,
qobj.py,python,class_method,,,Class method: Qobj.copy(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,copy,(self),,,,,,,,
qobj.py,python,class_method,,,Class method: [property] Qobj.dims(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,dims,(self),,,,property,,,,
qobj.py,python,class_method,,,"Class method: [dims.setter] Qobj.dims(self, dims)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,dims,"(self, dims)",,,,dims.setter,,,,
qobj.py,python,class_method,,,Class method: [property] Qobj.type(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,type,(self),,,,property,,,,
qobj.py,python,class_method,,,Class method: [property] Qobj.superrep(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,superrep,(self),,,,property,,,,
qobj.py,python,class_method,,,"Class method: [superrep.setter] Qobj.superrep(self, super_rep)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,superrep,"(self, super_rep)",,,,superrep.setter,,,,
qobj.py,python,class_method,,,Class method: [property] Qobj.data(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,data,(self),,,,property,,,,
qobj.py,python,class_method,,,Class method: [property] Qobj.dtype(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,dtype,(self),,,,property,,,,
qobj.py,python,class_method,,,"Class method: [data.setter] Qobj.data(self, data)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,data,"(self, data)",,,,data.setter,,,,
qobj.py,python,class_method,,,"Class method: Qobj.to(self, data_type, copy=False)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,to,"(self, data_type, copy=False)",,,,,,,,
qobj.py,python,class_method,,,"Class method: [_require_equal_type] Qobj.__add__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,__add__,"(self, other)",,,,_require_equal_type,,,,
qobj.py,python,class_method,,,"Class method: Qobj.__radd__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,__radd__,"(self, other)",,,,,,,,
qobj.py,python,class_method,,,"Class method: [_require_equal_type] Qobj.__sub__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,__sub__,"(self, other)",,,,_require_equal_type,,,,
qobj.py,python,class_method,,,"Class method: Qobj.__rsub__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,__rsub__,"(self, other)",,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.__mul__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,__mul__,"(self, other)",,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.__rmul__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,__rmul__,"(self, other)",,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.__matmul__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,__matmul__,"(self, other)",,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.__truediv__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,__truediv__,"(self, other)",,,,,,,,
qobj.py,python,class_method,,,Class method: Qobj.__neg__(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,__neg__,(self),,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.__getitem__(self, ind)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,__getitem__,"(self, ind)",,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.__eq__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,__eq__,"(self, other)",,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.__pow__(self, n, m=None)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,__pow__,"(self, n, m=None)",,,,,,,,
qobj.py,python,class_method,,,Class method: Qobj._str_header(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,_str_header,(self),,,,,,,,
qobj.py,python,class_method,,,Class method: Qobj.__str__(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,__str__,(self),,,,,,,,
qobj.py,python,class_method,,,Class method: Qobj.__repr__(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,__repr__,(self),,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.__call__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,__call__,"(self, other)",,,,,,,,
qobj.py,python,class_method,,,Class method: Qobj.__getstate__(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,__getstate__,(self),,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.__setstate__(self, state)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,__setstate__,"(self, state)",,,,,,,,
qobj.py,python,class_method,,,Class method: Qobj._repr_latex_(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,_repr_latex_,(self),,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.__and__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,__and__,"(self, other)",,,,,,,,
qobj.py,python,class_method,,,Class method: Qobj.dag(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,dag,(self),,,,,,,,
qobj.py,python,class_method,,,Class method: Qobj.conj(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,conj,(self),,,,,,,,
qobj.py,python,class_method,,,Class method: Qobj.trans(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,trans,(self),,,,,,,,
qobj.py,python,class_method,,,Class method: Qobj.dual_chan(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,dual_chan,(self),,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.norm(self, norm=None, kwargs=None)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,norm,"(self, norm=None, kwargs=None)",,,,,,,,
qobj.py,python,class_method,,,Class method: Qobj.proj(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,proj,(self),,,,,,,,
qobj.py,python,class_method,,,Class method: Qobj.tr(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,tr,(self),,,,,,,,
qobj.py,python,class_method,,,Class method: Qobj.purity(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,purity,(self),,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.full(self, order='C', squeeze=False)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,full,"(self, order='C', squeeze=False)",,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.data_as(self, format=None, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,data_as,"(self, format=None, copy=True)",,,,,,,,
qobj.py,python,class_method,,,Class method: Qobj.diag(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,diag,(self),,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.expm(self, dtype=_data.Dense)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,expm,"(self, dtype=_data.Dense)",,,,,,,,
qobj.py,python,class_method,,,Class method: Qobj.logm(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,logm,(self),,,,,,,,
qobj.py,python,class_method,,,Class method: Qobj.check_herm(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,check_herm,(self),,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.sqrtm(self, sparse=False, tol=0, maxiter=100000)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,sqrtm,"(self, sparse=False, tol=0, maxiter=100000)",,,,,,,,
qobj.py,python,class_method,,,Class method: Qobj.cosm(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,cosm,(self),,,,,,,,
qobj.py,python,class_method,,,Class method: Qobj.sinm(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,sinm,(self),,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.inv(self, sparse=False)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,inv,"(self, sparse=False)",,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.unit(self, inplace=False, norm=None, kwargs=None)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,unit,"(self, inplace=False, norm=None, kwargs=None)",,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.ptrace(self, sel, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,ptrace,"(self, sel, dtype=None)",,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.contract(self, inplace=False)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,contract,"(self, inplace=False)",,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.permute(self, order)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,permute,"(self, order)",,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.tidyup(self, atol=None)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,tidyup,"(self, atol=None)",,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.transform(self, inpt, inverse=False)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,transform,"(self, inpt, inverse=False)",,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.trunc_neg(self, method=""clip"")",qutip,qutip,v5.0.4,,,,,,,,,Qobj,trunc_neg,"(self, method=""clip"")",,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.matrix_element(self, bra, ket)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,matrix_element,"(self, bra, ket)",,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.overlap(self, other)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,overlap,"(self, other)",,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.eigenstates(self, sparse=False, sort='low', eigvals=0,
                    tol=0, maxiter=100000, phase_fix=None)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,eigenstates,"(self, sparse=False, sort='low', eigvals=0,
                    tol=0, maxiter=100000, phase_fix=None)",,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.eigenenergies(self, sparse=False, sort='low',
                      eigvals=0, tol=0, maxiter=100000)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,eigenenergies,"(self, sparse=False, sort='low',
                      eigvals=0, tol=0, maxiter=100000)",,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.groundstate(self, sparse=False, tol=0, maxiter=100000, safe=True)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,groundstate,"(self, sparse=False, tol=0, maxiter=100000, safe=True)",,,,,,,,
qobj.py,python,class_method,,,"Class method: Qobj.dnorm(self, B=None)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,dnorm,"(self, B=None)",,,,,,,,
qobj.py,python,class_method,,,Class method: [property] Qobj.ishp(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,ishp,(self),,,,property,,,,
qobj.py,python,class_method,,,Class method: [property] Qobj.iscp(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,iscp,(self),,,,property,,,,
qobj.py,python,class_method,,,Class method: [property] Qobj.istp(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,istp,(self),,,,property,,,,
qobj.py,python,class_method,,,Class method: [property] Qobj.iscptp(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,iscptp,(self),,,,property,,,,
qobj.py,python,class_method,,,Class method: [property] Qobj.isherm(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,isherm,(self),,,,property,,,,
qobj.py,python,class_method,,,"Class method: [isherm.setter] Qobj.isherm(self, isherm)",qutip,qutip,v5.0.4,,,,,,,,,Qobj,isherm,"(self, isherm)",,,,isherm.setter,,,,
qobj.py,python,class_method,,,Class method: Qobj._calculate_isunitary(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,_calculate_isunitary,(self),,,,,,,,
qobj.py,python,class_method,,,Class method: [property] Qobj.isunitary(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,isunitary,(self),,,,property,,,,
qobj.py,python,class_method,,,Class method: [property] Qobj.shape(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,shape,(self),,,,property,,,,
qobj.py,python,class_method,,,Class method: [property] Qobj.isoper(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,isoper,(self),,,,property,,,,
qobj.py,python,class_method,,,Class method: [property] Qobj.isbra(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,isbra,(self),,,,property,,,,
qobj.py,python,class_method,,,Class method: [property] Qobj.isket(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,isket,(self),,,,property,,,,
qobj.py,python,class_method,,,Class method: [property] Qobj.issuper(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,issuper,(self),,,,property,,,,
qobj.py,python,class_method,,,Class method: [property] Qobj.isoperket(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,isoperket,(self),,,,property,,,,
qobj.py,python,class_method,,,Class method: [property] Qobj.isoperbra(self),qutip,qutip,v5.0.4,,,,,,,,,Qobj,isoperbra,(self),,,,property,,,,
qobj.py,python,class,,,Class: Qobj,qutip,qutip,v5.0.4,,,,,,,,,Qobj,,,,,,,,,,
qobj.py,python,function,isbra,(x),Function: isbra(x),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qobj.py,python,function,isket,(x),Function: isket(x),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qobj.py,python,function,isoper,(x),Function: isoper(x),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qobj.py,python,function,isoperbra,(x),Function: isoperbra(x),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qobj.py,python,function,isoperket,(x),Function: isoperket(x),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qobj.py,python,function,issuper,(x),Function: issuper(x),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qobj.py,python,function,isherm,(x),Function: isherm(x),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qobj.py,python,function,_require_equal_type,(method),Function: _require_equal_type(method),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qobj.py,python,function,_latex_real,(x),Function: _latex_real(x),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qobj.py,python,function,_latex_complex,(x),Function: _latex_complex(x),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qobj.py,python,function,_latex_row,"(row, cols, data)","Function: _latex_row(row, cols, data)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qobj.py,python,function,ptrace,"(Q, sel)","Function: ptrace(Q, sel)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qobj.py,python,constant,,,"Constant: __all__ = [
    'Qobj', 'isbra', 'isket', 'isoper', 'issuper', 'isoperbra', 'isoperket',
    'isherm', 'ptrace',
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    'Qobj', 'isbra', 'isket', 'isoper', 'issuper', 'isoperbra', 'isoperket',
    'isherm', 'ptrace',
]",__all__,"[
    'Qobj', 'isbra', 'isket', 'isoper', 'issuper', 'isoperbra', 'isoperket',
    'isherm', 'ptrace',
]",,,,,,,,,,,,
qobj.py,python,constant,,,"Constant: _NORM_FUNCTION_LOOKUP = {
    'tr': _data.norm.trace,
    'one': _data.norm.one,
    'max': _data.norm.max,
    'fro': _data.norm.frobenius,
    'l2': _data.norm.l2,
}",qutip,qutip,v5.0.4,,,,,"_NORM_FUNCTION_LOOKUP = {
    'tr': _data.norm.trace,
    'one': _data.norm.one,
    'max': _data.norm.max,
    'fro': _data.norm.frobenius,
    'l2': _data.norm.l2,
}",_NORM_FUNCTION_LOOKUP,"{
    'tr': _data.norm.trace,
    'one': _data.norm.one,
    'max': _data.norm.max,
    'fro': _data.norm.frobenius,
    'l2': _data.norm.l2,
}",,,,,,,,,,,,
qobj.py,python,constant,,,"Constant: _NORM_ALLOWED_MATRIX = {'tr', 'fro', 'one', 'max'}",qutip,qutip,v5.0.4,,,,,"_NORM_ALLOWED_MATRIX = {'tr', 'fro', 'one', 'max'}",_NORM_ALLOWED_MATRIX,"{'tr', 'fro', 'one', 'max'}",,,,,,,,,,,,
qobj.py,python,constant,,,"Constant: _NORM_ALLOWED_VECTOR = {'l2', 'max'}",qutip,qutip,v5.0.4,,,,,"_NORM_ALLOWED_VECTOR = {'l2', 'max'}",_NORM_ALLOWED_VECTOR,"{'l2', 'max'}",,,,,,,,,,,,
qobj.py,python,constant,,,"Constant: _CALL_ALLOWED = {
    ('super', 'oper'),
    ('super', 'ket'),
    ('oper', 'ket'),
}",qutip,qutip,v5.0.4,,,,,"_CALL_ALLOWED = {
    ('super', 'oper'),
    ('super', 'ket'),
    ('oper', 'ket'),
}",_CALL_ALLOWED,"{
    ('super', 'oper'),
    ('super', 'ket'),
    ('oper', 'ket'),
}",,,,,,,,,,,,
qobj.py,python,import,,,Import: functools,qutip,qutip,v5.0.4,import functools,functools,,,,,,,,,,,,,,,,,
qobj.py,python,import,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,numbers,,,,,,,,,,,,,,,,,
qobj.py,python,import,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,warnings,,,,,,,,,,,,,,,,,
qobj.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
qobj.py,python,import,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse,scipy.sparse,,,,,,,,,,,,,,,,,
qobj.py,python,local_import,,,Import: to_choi from qutip.core.superop_reps,qutip,qutip,v5.0.4,from qutip.core.superop_reps import to_choi,to_choi,qutip.core.superop_reps,qutip.core.superop_reps,,,,,,,,,,,,,,,
qobj.py,python,local_import,,,Import: vector_to_operator from qutip.core.superoperator,qutip,qutip,v5.0.4,"from qutip.core.superoperator import vector_to_operator, operator_to_vector",vector_to_operator,qutip.core.superoperator,qutip.core.superoperator,,,,,,,,,,,,,,,
qobj.py,python,local_import,,,Import: operator_to_vector from qutip.core.superoperator,qutip,qutip,v5.0.4,"from qutip.core.superoperator import vector_to_operator, operator_to_vector",operator_to_vector,qutip.core.superoperator,qutip.core.superoperator,,,,,,,,,,,,,,,
qobj.py,python,local_import,,,Import: tensor_swap from qutip.core.tensor,qutip,qutip,v5.0.4,"from qutip.core.tensor import tensor_swap, tensor",tensor_swap,qutip.core.tensor,qutip.core.tensor,,,,,,,,,,,,,,,
qobj.py,python,local_import,,,Import: tensor from qutip.core.tensor,qutip,qutip,v5.0.4,"from qutip.core.tensor import tensor_swap, tensor",tensor,qutip.core.tensor,qutip.core.tensor,,,,,,,,,,,,,,,
qobj.py,python,local_import,,,Import: metrics from qutip.core,qutip,qutip,v5.0.4,from qutip.core import metrics as mts,metrics,qutip.core,qutip.core,,,,,,,,,,,,,,,
qobj.py,python,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qobj.py,python,,,,Directory: qutip\core\qobj.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
semidefinite.py,python,function,_complex_var,"(rows=1, cols=1, name=None)","Function: _complex_var(rows=1, cols=1, name=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
semidefinite.py,python,function,_make_constraints,(*rhos),Function: _make_constraints(*rhos),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
semidefinite.py,python,function,_arr_to_complex,(A),Function: _arr_to_complex(A),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
semidefinite.py,python,function,_kron,"(A, B)","Function: _kron(A, B)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
semidefinite.py,python,function,_conj,"(W, A)","Function: _conj(W, A)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
semidefinite.py,python,function,dnorm_problem,(dim),Function: dnorm_problem(dim),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
semidefinite.py,python,function,dnorm_sparse_problem,"(dim, J_dat)","Function: dnorm_sparse_problem(dim, J_dat)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
semidefinite.py,python,constant,,,"Constant: Complex = collections.namedtuple(""Complex"", [""re"", ""im""])",qutip,qutip,v5.0.4,,,,,"Complex = collections.namedtuple(""Complex"", [""re"", ""im""])",Complex,"collections.namedtuple(""Complex"", [""re"", ""im""])",,,,,,,,,,,,
semidefinite.py,python,import,,,Import: collections,qutip,qutip,v5.0.4,import collections,collections,,,,,,,,,,,,,,,,,
semidefinite.py,python,import,,,Import: functools,qutip,qutip,v5.0.4,import functools,functools,,,,,,,,,,,,,,,,,
semidefinite.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
semidefinite.py,python,import,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,scipy.sparse,,,,,,,,,,,,,,,,,
semidefinite.py,python,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
semidefinite.py,python,,,,Directory: qutip\core\semidefinite.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,_promote_to_zero_list,"(arg, length)","Function: _promote_to_zero_list(arg, length)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,_to_space,(dimensions),Function: _to_space(dimensions),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,basis,"(dimensions, n=None, offset=None, *, dtype=None)","Function: basis(dimensions, n=None, offset=None, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,qutrit_basis,"(*, dtype=None)","Function: qutrit_basis(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,coherent,"(N, alpha, offset=0, method=None, *, dtype=None)","Function: coherent(N, alpha, offset=0, method=None, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,coherent_dm,"(N, alpha, offset=0, method='operator', *, dtype=None)","Function: coherent_dm(N, alpha, offset=0, method='operator', *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,fock_dm,"(dimensions, n=None, offset=None, *, dtype=None)","Function: fock_dm(dimensions, n=None, offset=None, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,fock,"(dimensions, n=None, offset=None, *, dtype=None)","Function: fock(dimensions, n=None, offset=None, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,thermal_dm,"(N, n, method='operator', *, dtype=None)","Function: thermal_dm(N, n, method='operator', *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,maximally_mixed_dm,"(dimensions, *, dtype=None)","Function: maximally_mixed_dm(dimensions, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,ket2dm,(Q),Function: ket2dm(Q),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,projection,"(dimensions, n, m, offset=None, *, dtype=None)","Function: projection(dimensions, n, m, offset=None, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,qstate,"(string, *, dtype=None)","Function: qstate(string, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,_character_to_qudit,(x),Function: _character_to_qudit(x),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,ket,"(seq, dim=2, *, dtype=None)","Function: ket(seq, dim=2, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,bra,"(seq, dim=2, *, dtype=None)","Function: bra(seq, dim=2, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,state_number_enumerate,"(dims, excitations=None)","Function: state_number_enumerate(dims, excitations=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,state_number_index,"(dims, state)","Function: state_number_index(dims, state)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,state_index_number,"(dims, index)","Function: state_index_number(dims, index)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,state_number_qobj,"(dims, state, *, dtype=None)","Function: state_number_qobj(dims, state, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,phase_basis,"(N, m, phi0=0, *, dtype=None)","Function: phase_basis(N, m, phi0=0, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,zero_ket,"(dimensions, *, dtype=None)","Function: zero_ket(dimensions, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,spin_state,"(j, m, type='ket', *, dtype=None)","Function: spin_state(j, m, type='ket', *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,spin_coherent,"(j, theta, phi, type='ket', *, dtype=None)","Function: spin_coherent(j, theta, phi, type='ket', *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,bell_state,"(state='00', *, dtype=None)","Function: bell_state(state='00', *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,singlet_state,"(*, dtype=None)","Function: singlet_state(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,triplet_states,"(*, dtype=None)","Function: triplet_states(*, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,w_state,"(N_qubit, *, dtype=None)","Function: w_state(N_qubit, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,function,ghz_state,"(N_qubit, *, dtype=None)","Function: ghz_state(N_qubit, *, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,constant,,,"Constant: __all__ = ['basis', 'qutrit_basis', 'coherent', 'coherent_dm', 'fock_dm',
           'fock', 'thermal_dm', 'maximally_mixed_dm', 'ket2dm', 'projection',
           'qstate', 'ket', 'bra', 'state_number_enumerate',
           'state_number_index', 'state_index_number', 'state_number_qobj',
           'phase_basis', 'zero_ket', 'spin_state', 'spin_coherent',
           'bell_state', 'singlet_state', 'triplet_states', 'w_state',
           'ghz_state']",qutip,qutip,v5.0.4,,,,,"__all__ = ['basis', 'qutrit_basis', 'coherent', 'coherent_dm', 'fock_dm',
           'fock', 'thermal_dm', 'maximally_mixed_dm', 'ket2dm', 'projection',
           'qstate', 'ket', 'bra', 'state_number_enumerate',
           'state_number_index', 'state_index_number', 'state_number_qobj',
           'phase_basis', 'zero_ket', 'spin_state', 'spin_coherent',
           'bell_state', 'singlet_state', 'triplet_states', 'w_state',
           'ghz_state']",__all__,"['basis', 'qutrit_basis', 'coherent', 'coherent_dm', 'fock_dm',
           'fock', 'thermal_dm', 'maximally_mixed_dm', 'ket2dm', 'projection',
           'qstate', 'ket', 'bra', 'state_number_enumerate',
           'state_number_index', 'state_index_number', 'state_number_qobj',
           'phase_basis', 'zero_ket', 'spin_state', 'spin_coherent',
           'bell_state', 'singlet_state', 'triplet_states', 'w_state',
           'ghz_state']",,,,,,,,,,,,
states.py,python,constant,,,"Constant: _COHERENT_METHODS = ('operator', 'analytic')",qutip,qutip,v5.0.4,,,,,"_COHERENT_METHODS = ('operator', 'analytic')",_COHERENT_METHODS,"('operator', 'analytic')",,,,,,,,,,,,
states.py,python,constant,,,"Constant: _qubit_dict = {
    'g': 0,  # ground state
    'e': 1,  # excited state
    'u': 0,  # spin up
    'd': 1,  # spin down
    'H': 0,  # horizontal polarization
    'V': 1,  # vertical polarization
}",qutip,qutip,v5.0.4,,,,,"_qubit_dict = {
    'g': 0,  # ground state
    'e': 1,  # excited state
    'u': 0,  # spin up
    'd': 1,  # spin down
    'H': 0,  # horizontal polarization
    'V': 1,  # vertical polarization
}",_qubit_dict,"{
    'g': 0,  # ground state
    'e': 1,  # excited state
    'u': 0,  # spin up
    'd': 1,  # spin down
    'H': 0,  # horizontal polarization
    'V': 1,  # vertical polarization
}",,,,,,,,,,,,
states.py,python,constant,,,"Constant: _BELL_STATES = {
    '00': np.sqrt(0.5) * (basis([2, 2], [0, 0]) + basis([2, 2], [1, 1])),
    '01': np.sqrt(0.5) * (basis([2, 2], [0, 0]) - basis([2, 2], [1, 1])),
    '10': np.sqrt(0.5) * (basis([2, 2], [0, 1]) + basis([2, 2], [1, 0])),
    '11': np.sqrt(0.5) * (basis([2, 2], [0, 1]) - basis([2, 2], [1, 0])),
}",qutip,qutip,v5.0.4,,,,,"_BELL_STATES = {
    '00': np.sqrt(0.5) * (basis([2, 2], [0, 0]) + basis([2, 2], [1, 1])),
    '01': np.sqrt(0.5) * (basis([2, 2], [0, 0]) - basis([2, 2], [1, 1])),
    '10': np.sqrt(0.5) * (basis([2, 2], [0, 1]) + basis([2, 2], [1, 0])),
    '11': np.sqrt(0.5) * (basis([2, 2], [0, 1]) - basis([2, 2], [1, 0])),
}",_BELL_STATES,"{
    '00': np.sqrt(0.5) * (basis([2, 2], [0, 0]) + basis([2, 2], [1, 1])),
    '01': np.sqrt(0.5) * (basis([2, 2], [0, 0]) - basis([2, 2], [1, 1])),
    '10': np.sqrt(0.5) * (basis([2, 2], [0, 1]) + basis([2, 2], [1, 0])),
    '11': np.sqrt(0.5) * (basis([2, 2], [0, 1]) - basis([2, 2], [1, 0])),
}",,,,,,,,,,,,
states.py,python,import,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,itertools,,,,,,,,,,,,,,,,,
states.py,python,import,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,numbers,,,,,,,,,,,,,,,,,
states.py,python,import,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,warnings,,,,,,,,,,,,,,,,,
states.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
states.py,python,import,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,scipy.sparse,,,,,,,,,,,,,,,,,
states.py,python,import,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,itertools,,,,,,,,,,,,,,,,,
states.py,python,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
states.py,python,,,,Directory: qutip\core\states.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
subsystem_apply.py,python,function,subsystem_apply,"(state, channel, mask, reference=False)","Function: subsystem_apply(state, channel, mask, reference=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
subsystem_apply.py,python,function,_subsystem_apply_ket,"(state, channel, mask)","Function: _subsystem_apply_ket(state, channel, mask)",qutip,qutip,v5.0.4,,,,,,,,"# TODO Write more efficient code for single-matrix map on pure states",,,,,,,,,,,
subsystem_apply.py,python,function,_subsystem_apply_ket,"(state, channel, mask)","Function: _subsystem_apply_ket(state, channel, mask)",qutip,qutip,v5.0.4,,,,,,,,"# TODO Write more efficient code for single-subsystem map . . .",,,,,,,,,,,
subsystem_apply.py,python,function,_subsystem_apply_dm,"(state, channel, mask)","Function: _subsystem_apply_dm(state, channel, mask)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
subsystem_apply.py,python,function,_one_subsystem_apply,"(state, channel, idx)","Function: _one_subsystem_apply(state, channel, idx)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
subsystem_apply.py,python,function,_block_apply,"(block, channel)","Function: _block_apply(block, channel)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
subsystem_apply.py,python,function,_top_apply_U,"(block, channel)","Function: _top_apply_U(block, channel)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
subsystem_apply.py,python,function,_top_apply_S,"(block, channel)","Function: _top_apply_S(block, channel)",qutip,qutip,v5.0.4,,,,,,,,"# If the channel is a super-operator, perform second block decomposition;",,,,,,,,,,,
subsystem_apply.py,python,function,_top_apply_S,"(block, channel)","Function: _top_apply_S(block, channel)",qutip,qutip,v5.0.4,,,,,,,,"# block-size matches Hilbert space of affected subsystem:",,,,,,,,,,,
subsystem_apply.py,python,function,_top_apply_S,"(block, channel)","Function: _top_apply_S(block, channel)",qutip,qutip,v5.0.4,,,,,,,,"# FIXME use state shape?",,,,,,,,,,,
subsystem_apply.py,python,function,_block_split,"(mat_in, n_v, n_h)","Function: _block_split(mat_in, n_v, n_h)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
subsystem_apply.py,python,function,_block_join,(mat_in),Function: _block_join(mat_in),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
subsystem_apply.py,python,function,_block_col,"(mat_in, n_v, n_h)","Function: _block_col(mat_in, n_v, n_h)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
subsystem_apply.py,python,function,_block_stack,"(arr_in, n_v, n_h)","Function: _block_stack(arr_in, n_v, n_h)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
subsystem_apply.py,python,function,_subsystem_apply_reference,"(state, channel, mask)","Function: _subsystem_apply_reference(state, channel, mask)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
subsystem_apply.py,python,constant,,,Constant: __all__ = ['subsystem_apply'],qutip,qutip,v5.0.4,,,,,__all__ = ['subsystem_apply'],__all__,['subsystem_apply'],,,,,,,,,,,,
subsystem_apply.py,python,import,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,itertools,,,,,,,,,,,,,,,,,
subsystem_apply.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
subsystem_apply.py,python,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
subsystem_apply.py,python,,,,Directory: qutip\core\subsystem_apply.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superoperator.py,python,function,_map_over_compound_operators,(f),Function: _map_over_compound_operators(f),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superoperator.py,python,function,liouvillian,"(H=None, c_ops=None, data_only=False, chi=None)","Function: liouvillian(H=None, c_ops=None, data_only=False, chi=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superoperator.py,python,function,lindblad_dissipator,"(a, b=None, data_only=False, chi=None)","Function: lindblad_dissipator(a, b=None, data_only=False, chi=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superoperator.py,python,function,stack_columns,(matrix),Function: stack_columns(matrix),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superoperator.py,python,function,unstack_columns,"(vector, shape=None)","Function: unstack_columns(vector, shape=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superoperator.py,python,function,unstacked_index,"(size, index)","Function: unstacked_index(size, index)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superoperator.py,python,function,stacked_index,"(size, row, col)","Function: stacked_index(size, row, col)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superoperator.py,python,function,_drop_projected_dims,(dims),Function: _drop_projected_dims(dims),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superoperator.py,python,function,sprepost,"(A, B)","Function: sprepost(A, B)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superoperator.py,python,function,_to_super_of_tensor,(q_oper),Function: _to_super_of_tensor(q_oper),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superoperator.py,python,function,_to_tensor_of_super,(q_oper),Function: _to_tensor_of_super(q_oper),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superoperator.py,python,function,reshuffle,(q_oper),Function: reshuffle(q_oper),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superoperator.py,python,constant,,,"Constant: __all__ = [
    'liouvillian', 'lindblad_dissipator', 'operator_to_vector',
    'vector_to_operator', 'stack_columns', 'unstack_columns', 'stacked_index',
    'unstacked_index', 'spost', 'spre', 'sprepost', 'reshuffle',
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    'liouvillian', 'lindblad_dissipator', 'operator_to_vector',
    'vector_to_operator', 'stack_columns', 'unstack_columns', 'stacked_index',
    'unstacked_index', 'spost', 'spre', 'sprepost', 'reshuffle',
]",__all__,"[
    'liouvillian', 'lindblad_dissipator', 'operator_to_vector',
    'vector_to_operator', 'stack_columns', 'unstack_columns', 'stacked_index',
    'unstacked_index', 'spost', 'spre', 'sprepost', 'reshuffle',
]",,,,,,,,,,,,
superoperator.py,python,import,,,Import: functools,qutip,qutip,v5.0.4,import functools,functools,,,,,,,,,,,,,,,,,
superoperator.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
superoperator.py,python,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superoperator.py,python,,,,Directory: qutip\core\superoperator.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superop_reps.py,python,function,_superpauli_basis,(nq=1),Function: _superpauli_basis(nq=1),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superop_reps.py,python,function,_int_log_two,(x),Function: _int_log_two(x),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superop_reps.py,python,function,_is_power_of_two,(x),Function: _is_power_of_two(x),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superop_reps.py,python,function,_nq,(dims),Function: _nq(dims),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superop_reps.py,python,function,isqubitdims,(dims),Function: isqubitdims(dims),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superop_reps.py,python,function,_to_superpauli,(q_oper),Function: _to_superpauli(q_oper),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superop_reps.py,python,function,_choi_to_kraus,"(q_oper, tol=1e-9)","Function: _choi_to_kraus(q_oper, tol=1e-9)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superop_reps.py,python,function,kraus_to_choi,(kraus_ops),Function: kraus_to_choi(kraus_ops),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superop_reps.py,python,function,kraus_to_super,(kraus_list),Function: kraus_to_super(kraus_list),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superop_reps.py,python,function,_super_tofrom_choi,(q_oper),Function: _super_tofrom_choi(q_oper),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superop_reps.py,python,function,_choi_to_chi,(q_oper),Function: _choi_to_chi(q_oper),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superop_reps.py,python,function,_chi_to_choi,(q_oper),Function: _chi_to_choi(q_oper),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superop_reps.py,python,function,_svd_u_to_kraus,"(U, S, d, dK, indims, outdims)","Function: _svd_u_to_kraus(U, S, d, dK, indims, outdims)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superop_reps.py,python,function,_generalized_kraus,"(q_oper, threshold=1e-10)","Function: _generalized_kraus(q_oper, threshold=1e-10)",qutip,qutip,v5.0.4,,,,,,,,"# TODO: document!",,,,,,,,,,,
superop_reps.py,python,function,_generalized_kraus,"(q_oper, threshold=1e-10)","Function: _generalized_kraus(q_oper, threshold=1e-10)",qutip,qutip,v5.0.4,,,,,,,,"# TODO: use this to generalize to_kraus to the case where U != V.",,,,,,,,,,,
superop_reps.py,python,function,_generalized_kraus,"(q_oper, threshold=1e-10)","Function: _generalized_kraus(q_oper, threshold=1e-10)",qutip,qutip,v5.0.4,,,,,,,,"#       This is critical for non-CP maps, as appear in (for example)",,,,,,,,,,,
superop_reps.py,python,function,_generalized_kraus,"(q_oper, threshold=1e-10)","Function: _generalized_kraus(q_oper, threshold=1e-10)",qutip,qutip,v5.0.4,,,,,,,,"#       diamond norm differences between two CP maps.",,,,,,,,,,,
superop_reps.py,python,function,_choi_to_stinespring,"(q_oper, threshold=1e-10)","Function: _choi_to_stinespring(q_oper, threshold=1e-10)",qutip,qutip,v5.0.4,,,,,,,,"# TODO: document!",,,,,,,,,,,
superop_reps.py,python,function,to_choi,(q_oper),Function: to_choi(q_oper),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superop_reps.py,python,function,to_chi,(q_oper),Function: to_chi(q_oper),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superop_reps.py,python,function,to_super,(q_oper),Function: to_super(q_oper),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superop_reps.py,python,function,to_kraus,"(q_oper, tol=1e-9)","Function: to_kraus(q_oper, tol=1e-9)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superop_reps.py,python,function,to_stinespring,"(q_oper, threshold=1e-10)","Function: to_stinespring(q_oper, threshold=1e-10)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superop_reps.py,python,constant,,,"Constant: __all__ = [
    'kraus_to_choi', 'kraus_to_super',
    'to_choi', 'to_chi', 'to_super', 'to_kraus', 'to_stinespring',
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    'kraus_to_choi', 'kraus_to_super',
    'to_choi', 'to_chi', 'to_super', 'to_kraus', 'to_stinespring',
]",__all__,"[
    'kraus_to_choi', 'kraus_to_super',
    'to_choi', 'to_chi', 'to_super', 'to_kraus', 'to_stinespring',
]",,,,,,,,,,,,
superop_reps.py,python,constant,,,"Constant: _SINGLE_QUBIT_PAULI_BASIS = (
    identity(2).to(_data.CSR),
    sigmax().to(_data.CSR),
    sigmay().to(_data.CSR),
    sigmaz().to(_data.CSR),
)",qutip,qutip,v5.0.4,,,,,"_SINGLE_QUBIT_PAULI_BASIS = (
    identity(2).to(_data.CSR),
    sigmax().to(_data.CSR),
    sigmay().to(_data.CSR),
    sigmaz().to(_data.CSR),
)",_SINGLE_QUBIT_PAULI_BASIS,"(
    identity(2).to(_data.CSR),
    sigmax().to(_data.CSR),
    sigmay().to(_data.CSR),
    sigmaz().to(_data.CSR),
)",,,,,,,,,,,,
superop_reps.py,python,import,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,itertools,,,,,,,,,,,,,,,,,
superop_reps.py,python,import,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,numbers,,,,,,,,,,,,,,,,,
superop_reps.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
superop_reps.py,python,import,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg,scipy.linalg,,,,,,,,,,,,,,,,,
superop_reps.py,python,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
superop_reps.py,python,,,,Directory: qutip\core\superop_reps.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
tensor.py,python,class_field,,,Class field: [instance] _reverse_partial_tensor.right = right,qutip,qutip,v5.0.4,,,,,,,,,_reverse_partial_tensor,__init__,"(self, right)",self.right = right,self.right = right,,,,,,
tensor.py,python,class_method,,,"Class method: _reverse_partial_tensor.__init__(self, right)",qutip,qutip,v5.0.4,,,,,,,,,_reverse_partial_tensor,__init__,"(self, right)",,,,,,,,
tensor.py,python,class_method,,,"Class method: _reverse_partial_tensor.__call__(self, op)",qutip,qutip,v5.0.4,,,,,,,,,_reverse_partial_tensor,__call__,"(self, op)",,,,,,,,
tensor.py,python,class,,,Class: _reverse_partial_tensor,qutip,qutip,v5.0.4,,,,,,,,,_reverse_partial_tensor,,,,,,,,,,
tensor.py,python,function,tensor,(*args),Function: tensor(*args),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
tensor.py,python,function,super_tensor,(*args),Function: super_tensor(*args),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
tensor.py,python,function,_isoperlike,(q),Function: _isoperlike(q),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
tensor.py,python,function,_isketlike,(q),Function: _isketlike(q),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
tensor.py,python,function,_isbralike,(q),Function: _isbralike(q),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
tensor.py,python,function,composite,(*args),Function: composite(*args),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
tensor.py,python,function,_tensor_contract_single,"(arr, i, j)","Function: _tensor_contract_single(arr, i, j)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
tensor.py,python,function,_tensor_contract_dense,"(arr, *pairs)","Function: _tensor_contract_dense(arr, *pairs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
tensor.py,python,function,tensor_swap,"(q_oper, *pairs)","Function: tensor_swap(q_oper, *pairs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
tensor.py,python,function,tensor_contract,"(qobj, *pairs)","Function: tensor_contract(qobj, *pairs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
tensor.py,python,function,_check_oper_dims,"(oper, dims=None, targets=None)","Function: _check_oper_dims(oper, dims=None, targets=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
tensor.py,python,function,_targets_to_list,"(targets, oper=None, N=None)","Function: _targets_to_list(targets, oper=None, N=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
tensor.py,python,function,expand_operator,"(oper, dims, targets, dtype=None)","Function: expand_operator(oper, dims, targets, dtype=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
tensor.py,python,constant,,,"Constant: __all__ = [
    'tensor', 'super_tensor', 'composite', 'tensor_swap', 'tensor_contract',
    'expand_operator'
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    'tensor', 'super_tensor', 'composite', 'tensor_swap', 'tensor_contract',
    'expand_operator'
]",__all__,"[
    'tensor', 'super_tensor', 'composite', 'tensor_swap', 'tensor_contract',
    'expand_operator'
]",,,,,,,,,,,,
tensor.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
tensor.py,python,import,,,Import: partial from functools,qutip,qutip,v5.0.4,from functools import partial,partial,functools,,,,,,,,,,,,,,,,
tensor.py,python,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
tensor.py,python,,,,Directory: qutip\core\tensor.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,Directory: qutip\core\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,File: qutip\core\cy,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,Directory: qutip\core\cy\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
bench_openmp.py,python,function,_min_timer,"(function, *args, **kwargs)","Function: _min_timer(function, *args, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
bench_openmp.py,python,function,system_bench,"(func, dims)","Function: system_bench(func, dims)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
bench_openmp.py,python,function,calculate_openmp_thresh,(),Function: calculate_openmp_thresh(),qutip,qutip,v5.0.4,,,,,,,,"# if qset.num_cpus == 1:",,,,,,,,,,,
bench_openmp.py,python,function,calculate_openmp_thresh,(),Function: calculate_openmp_thresh(),qutip,qutip,v5.0.4,,,,,,,,"#    return qset.openmp_thresh",,,,,,,,,,,
bench_openmp.py,python,function,_jc_liouvillian,(N),Function: _jc_liouvillian(N),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
bench_openmp.py,python,function,_opto_liouvillian,(N),Function: _opto_liouvillian(N),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
bench_openmp.py,python,function,_spin_hamiltonian,(N),Function: _spin_hamiltonian(N),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
bench_openmp.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
bench_openmp.py,python,import,,,Import: default_timer from timeit,qutip,qutip,v5.0.4,from timeit import default_timer as timer,default_timer,timeit,,,,,,,,,,,,,,,,
bench_openmp.py,python,local_import,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings as qset,settings,qutip.settings,qutip.settings,,,,,,,,,,,,,,,
bench_openmp.py,python,,,,File: qutip\core\cy\openmp,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
bench_openmp.py,python,,,,Directory: qutip\core\cy\openmp\bench_openmp.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,function,check_use_openmp,(options),Function: check_use_openmp(options),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,function,use_openmp,(),Function: use_openmp(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,function,openmp_components,(ptr_list),Function: openmp_components(ptr_list),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,import,,,Import: os,qutip,qutip,v5.0.4,import os,os,,,,,,,,,,,,,,,,,
utilities.py,python,local_import,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings as qset,settings,qutip.settings,qutip.settings,,,,,,,,,,,,,,,
utilities.py,python,,,,File: qutip\core\cy\openmp,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
utilities.py,python,,,,Directory: qutip\core\cy\openmp\utilities.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,File: qutip\core\cy\openmp,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,Directory: qutip\core\cy\openmp\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
constant.py,python,function,zeros_like_data,"(data, /)","Function: zeros_like_data(data, /)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
constant.py,python,function,zeros_like_dense,"(data, /)","Function: zeros_like_dense(data, /)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
constant.py,python,function,identity_like_data,"(data, /)","Function: identity_like_data(data, /)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
constant.py,python,function,identity_like_dense,"(data, /)","Function: identity_like_dense(data, /)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
constant.py,python,constant,,,"Constant: __all__ = ['zeros', 'identity', 'zeros_like', 'identity_like',
           'zeros_like_dense', 'identity_like_dense',
           'zeros_like_data', 'identity_like_data']",qutip,qutip,v5.0.4,,,,,"__all__ = ['zeros', 'identity', 'zeros_like', 'identity_like',
           'zeros_like_dense', 'identity_like_dense',
           'zeros_like_data', 'identity_like_data']",__all__,"['zeros', 'identity', 'zeros_like', 'identity_like',
           'zeros_like_dense', 'identity_like_dense',
           'zeros_like_data', 'identity_like_data']",,,,,,,,,,,,
constant.py,python,constant,,,"Constant: zeros = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('rows', _inspect.Parameter.POSITIONAL_OR_KEYWORD),
        _inspect.Parameter('cols', _inspect.Parameter.POSITIONAL_OR_KEYWORD),
    ]),
    name='zeros',
    module=__name__,
    inputs=(),
    out=True,
)",qutip,qutip,v5.0.4,,,,,"zeros = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('rows', _inspect.Parameter.POSITIONAL_OR_KEYWORD),
        _inspect.Parameter('cols', _inspect.Parameter.POSITIONAL_OR_KEYWORD),
    ]),
    name='zeros',
    module=__name__,
    inputs=(),
    out=True,
)",zeros,"_Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('rows', _inspect.Parameter.POSITIONAL_OR_KEYWORD),
        _inspect.Parameter('cols', _inspect.Parameter.POSITIONAL_OR_KEYWORD),
    ]),
    name='zeros',
    module=__name__,
    inputs=(),
    out=True,
)",,,,,,,,,,,,
constant.py,python,constant,,,"Constant: identity = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('dimension',
                           _inspect.Parameter.POSITIONAL_OR_KEYWORD),
        _inspect.Parameter('scale', _inspect.Parameter.POSITIONAL_OR_KEYWORD,
                           default=1),
    ]),
    name='identity',
    module=__name__,
    inputs=(),
    out=True,
)",qutip,qutip,v5.0.4,,,,,"identity = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('dimension',
                           _inspect.Parameter.POSITIONAL_OR_KEYWORD),
        _inspect.Parameter('scale', _inspect.Parameter.POSITIONAL_OR_KEYWORD,
                           default=1),
    ]),
    name='identity',
    module=__name__,
    inputs=(),
    out=True,
)",identity,"_Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('dimension',
                           _inspect.Parameter.POSITIONAL_OR_KEYWORD),
        _inspect.Parameter('scale', _inspect.Parameter.POSITIONAL_OR_KEYWORD,
                           default=1),
    ]),
    name='identity',
    module=__name__,
    inputs=(),
    out=True,
)",,,,,,,,,,,,
constant.py,python,constant,,,"Constant: identity_like = _Dispatcher(
    identity_like_data, name='identity_like',
    module=__name__, inputs=(""data"",), out=False,
)",qutip,qutip,v5.0.4,,,,,"identity_like = _Dispatcher(
    identity_like_data, name='identity_like',
    module=__name__, inputs=(""data"",), out=False,
)",identity_like,"_Dispatcher(
    identity_like_data, name='identity_like',
    module=__name__, inputs=(""data"",), out=False,
)",,,,,,,,,,,,
constant.py,python,constant,,,"Constant: zeros_like = _Dispatcher(
    zeros_like_data, name='zeros_like',
    module=__name__, inputs=(""data"",), out=False,
)",qutip,qutip,v5.0.4,,,,,"zeros_like = _Dispatcher(
    zeros_like_data, name='zeros_like',
    module=__name__, inputs=(""data"",), out=False,
)",zeros_like,"_Dispatcher(
    zeros_like_data, name='zeros_like',
    module=__name__, inputs=(""data"",), out=False,
)",,,,,,,,,,,,
constant.py,python,import,,,Import: inspect,qutip,qutip,v5.0.4,import inspect as _inspect,inspect,,,,,,,,,,,,,,,,,
constant.py,python,,,,File: qutip\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
constant.py,python,,,,Directory: qutip\core\data\constant.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
eigen.py,python,function,_orthogonalize,"(vec, other)","Function: _orthogonalize(vec, other)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
eigen.py,python,function,_eigs_dense,"(data, isherm, vecs, eigvals, num_large, num_small)","Function: _eigs_dense(data, isherm, vecs, eigvals, num_large, num_small)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
eigen.py,python,function,_eigs_csr,"(data, isherm, vecs, eigvals, num_large, num_small, tol, maxiter)","Function: _eigs_csr(data, isherm, vecs, eigvals, num_large, num_small, tol, maxiter)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
eigen.py,python,function,_eigs_check_shape,(data),Function: _eigs_check_shape(data),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
eigen.py,python,function,_eigs_fix_eigvals,"(data, eigvals, sort)","Function: _eigs_fix_eigvals(data, eigvals, sort)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
eigen.py,python,function,eigs_csr,"(data, /, isherm=None, vecs=True, sort='low', eigvals=0,
             tol=0, maxiter=100000)","Function: eigs_csr(data, /, isherm=None, vecs=True, sort='low', eigvals=0,
             tol=0, maxiter=100000)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
eigen.py,python,function,eigs_dense,"(data, /, isherm=None, vecs=True, sort='low', eigvals=0)","Function: eigs_dense(data, /, isherm=None, vecs=True, sort='low', eigvals=0)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
eigen.py,python,function,svd_csr,"(data, vecs=True, k=6, **kw)","Function: svd_csr(data, vecs=True, k=6, **kw)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
eigen.py,python,function,svd_dense,"(data, vecs=True, **kw)","Function: svd_dense(data, vecs=True, **kw)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
eigen.py,python,constant,,,"Constant: __all__ = [
    'eigs', 'eigs_csr', 'eigs_dense',
    'svd', 'svd_csr', 'svd_dense',
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    'eigs', 'eigs_csr', 'eigs_dense',
    'svd', 'svd_csr', 'svd_dense',
]",__all__,"[
    'eigs', 'eigs_csr', 'eigs_dense',
    'svd', 'svd_csr', 'svd_dense',
]",,,,,,,,,,,,
eigen.py,python,constant,,,"Constant: eigs = _Dispatcher(eigs_dense, name='eigs', inputs=('data',), out=False)",qutip,qutip,v5.0.4,,,,,"eigs = _Dispatcher(eigs_dense, name='eigs', inputs=('data',), out=False)",eigs,"_Dispatcher(eigs_dense, name='eigs', inputs=('data',), out=False)",,,,,,,,,,,,
eigen.py,python,constant,,,"Constant: svd = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('data', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter('vecs', _inspect.Parameter.POSITIONAL_OR_KEYWORD),
    ]),
    name='svd',
    module=__name__,
    inputs=('data',),
    out=False)",qutip,qutip,v5.0.4,,,,,"svd = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('data', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter('vecs', _inspect.Parameter.POSITIONAL_OR_KEYWORD),
    ]),
    name='svd',
    module=__name__,
    inputs=('data',),
    out=False)",svd,"_Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('data', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter('vecs', _inspect.Parameter.POSITIONAL_OR_KEYWORD),
    ]),
    name='svd',
    module=__name__,
    inputs=('data',),
    out=False)",,,,,,,,,,,,
eigen.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
eigen.py,python,import,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg,scipy.linalg,,,,,,,,,,,,,,,,,
eigen.py,python,import,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,scipy.sparse,,,,,,,,,,,,,,,,,
eigen.py,python,import,,,Import: scipy.sparse.linalg,qutip,qutip,v5.0.4,import scipy.sparse.linalg,scipy.sparse.linalg,,,,,,,,,,,,,,,,,
eigen.py,python,import,,,Import: combinations from itertools,qutip,qutip,v5.0.4,from itertools import combinations,combinations,itertools,,,,,,,,,,,,,,,,
eigen.py,python,import,,,Import: inspect,qutip,qutip,v5.0.4,import inspect as _inspect,inspect,,,,,,,,,,,,,,,,,
eigen.py,python,local_import,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings,settings,qutip.settings,qutip.settings,,,,,,,,,,,,,,,
eigen.py,python,,,,File: qutip\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
eigen.py,python,,,,Directory: qutip\core\data\eigen.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
expm.py,python,function,expm_csr,(matrix: CSR),Function: expm_csr(matrix: CSR) -> CSR,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,CSR,
expm.py,python,function,expm_dia,(matrix: Dia),Function: expm_dia(matrix: Dia) -> Dia,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,Dia,
expm.py,python,function,expm_csr_dense,(matrix: CSR),Function: expm_csr_dense(matrix: CSR) -> Dense,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,Dense,
expm.py,python,function,expm_dense,(matrix: Dense),Function: expm_dense(matrix: Dense) -> Dense,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,Dense,
expm.py,python,function,logm_dense,(matrix: Dense),Function: logm_dense(matrix: Dense) -> Dense,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,Dense,
expm.py,python,constant,,,"Constant: __all__ = [
    'expm', 'expm_csr', 'expm_csr_dense', 'expm_dense', 'expm_dia',
    'logm', 'logm_dense',
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    'expm', 'expm_csr', 'expm_csr_dense', 'expm_dense', 'expm_dia',
    'logm', 'logm_dense',
]",__all__,"[
    'expm', 'expm_csr', 'expm_csr_dense', 'expm_dense', 'expm_dia',
    'logm', 'logm_dense',
]",,,,,,,,,,,,
expm.py,python,constant,,,"Constant: expm = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
    ]),
    name='expm',
    module=__name__,
    inputs=('matrix',),
    out=True,
)",qutip,qutip,v5.0.4,,,,,"expm = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
    ]),
    name='expm',
    module=__name__,
    inputs=('matrix',),
    out=True,
)",expm,"_Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
    ]),
    name='expm',
    module=__name__,
    inputs=('matrix',),
    out=True,
)",,,,,,,,,,,,
expm.py,python,constant,,,"Constant: logm = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
    ]),
    name='logm',
    module=__name__,
    inputs=('matrix',),
    out=True,
)",qutip,qutip,v5.0.4,,,,,"logm = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
    ]),
    name='logm',
    module=__name__,
    inputs=('matrix',),
    out=True,
)",logm,"_Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
    ]),
    name='logm',
    module=__name__,
    inputs=('matrix',),
    out=True,
)",,,,,,,,,,,,
expm.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
expm.py,python,import,,,Import: scipy.sparse.linalg,qutip,qutip,v5.0.4,import scipy.sparse.linalg,scipy.sparse.linalg,,,,,,,,,,,,,,,,,
expm.py,python,import,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg,scipy.linalg,,,,,,,,,,,,,,,,,
expm.py,python,import,,,Import: inspect,qutip,qutip,v5.0.4,import inspect as _inspect,inspect,,,,,,,,,,,,,,,,,
expm.py,python,local_import,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings,settings,qutip.settings,qutip.settings,,,,,,,,,,,,,,,
expm.py,python,,,,File: qutip\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
expm.py,python,,,,Directory: qutip\core\data\expm.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
extract.py,python,function,extract_dense,"(matrix, format=None, copy=True)","Function: extract_dense(matrix, format=None, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
extract.py,python,function,extract_csr,"(matrix, format=None, copy=True)","Function: extract_csr(matrix, format=None, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
extract.py,python,function,extract_dia,"(matrix, format=None, copy=True)","Function: extract_dia(matrix, format=None, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
extract.py,python,constant,,,"Constant: __all__ = [""extract""]",qutip,qutip,v5.0.4,,,,,"__all__ = [""extract""]",__all__,"[""extract""]",,,,,,,,,,,,
extract.py,python,constant,,,"Constant: extract = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter(
            'format', _inspect.Parameter.POSITIONAL_OR_KEYWORD, default=None
        ),
        _inspect.Parameter(
            'copy', _inspect.Parameter.POSITIONAL_OR_KEYWORD, default=True
        )
    ]),
    name='extract',
    module=__name__,
    inputs=('matrix',),
    out=False,
)",qutip,qutip,v5.0.4,,,,,"extract = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter(
            'format', _inspect.Parameter.POSITIONAL_OR_KEYWORD, default=None
        ),
        _inspect.Parameter(
            'copy', _inspect.Parameter.POSITIONAL_OR_KEYWORD, default=True
        )
    ]),
    name='extract',
    module=__name__,
    inputs=('matrix',),
    out=False,
)",extract,"_Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter(
            'format', _inspect.Parameter.POSITIONAL_OR_KEYWORD, default=None
        ),
        _inspect.Parameter(
            'copy', _inspect.Parameter.POSITIONAL_OR_KEYWORD, default=True
        )
    ]),
    name='extract',
    module=__name__,
    inputs=('matrix',),
    out=False,
)",,,,,,,,,,,,
extract.py,python,import,,,Import: inspect,qutip,qutip,v5.0.4,import inspect as _inspect,inspect,,,,,,,,,,,,,,,,,
extract.py,python,local_import,,,Import: csr_matrix from scipy.sparse,qutip,qutip,v5.0.4,from scipy.sparse import csr_matrix,csr_matrix,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,,
extract.py,python,,,,File: qutip\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
extract.py,python,,,,Directory: qutip\core\data\extract.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
linalg.py,python,function,inv_dense,"(data, /)","Function: inv_dense(data, /)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
linalg.py,python,function,inv_csr,"(data, /)","Function: inv_csr(data, /)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
linalg.py,python,constant,,,"Constant: __all__ = ['inv', 'inv_csr', 'inv_dense']",qutip,qutip,v5.0.4,,,,,"__all__ = ['inv', 'inv_csr', 'inv_dense']",__all__,"['inv', 'inv_csr', 'inv_dense']",,,,,,,,,,,,
linalg.py,python,constant,,,"Constant: inv = _Dispatcher(inv_dense, name='inv', inputs=('data',), out=True)",qutip,qutip,v5.0.4,,,,,"inv = _Dispatcher(inv_dense, name='inv', inputs=('data',), out=True)",inv,"_Dispatcher(inv_dense, name='inv', inputs=('data',), out=True)",,,,,,,,,,,,
linalg.py,python,import,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg,scipy.linalg,,,,,,,,,,,,,,,,,
linalg.py,python,import,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse,scipy.sparse,,,,,,,,,,,,,,,,,
linalg.py,python,,,,File: qutip\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
linalg.py,python,,,,Directory: qutip\core\data\linalg.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
make.py,python,function,_diag_signature,"(diagonals, offsets=0, shape=None)","Function: _diag_signature(diagonals, offsets=0, shape=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
make.py,python,function,one_element_csr,"(shape, position, value=1.0)","Function: one_element_csr(shape, position, value=1.0)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
make.py,python,function,one_element_dense,"(shape, position, value=1.0)","Function: one_element_dense(shape, position, value=1.0)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
make.py,python,function,one_element_dia,"(shape, position, value=1.0)","Function: one_element_dia(shape, position, value=1.0)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
make.py,python,constant,,,"Constant: __all__ = [
    'diag',
    'one_element_csr', 'one_element_dense', 'one_element_dia', 'one_element'
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    'diag',
    'one_element_csr', 'one_element_dense', 'one_element_dia', 'one_element'
]",__all__,"[
    'diag',
    'one_element_csr', 'one_element_dense', 'one_element_dia', 'one_element'
]",,,,,,,,,,,,
make.py,python,constant,,,"Constant: diag = _Dispatcher(_diag_signature, name='diag', inputs=(), out=True)",qutip,qutip,v5.0.4,,,,,"diag = _Dispatcher(_diag_signature, name='diag', inputs=(), out=True)",diag,"_Dispatcher(_diag_signature, name='diag', inputs=(), out=True)",,,,,,,,,,,,
make.py,python,constant,,,"Constant: one_element = _Dispatcher(one_element_dense, name='one_element',
                          inputs=(), out=True)",qutip,qutip,v5.0.4,,,,,"one_element = _Dispatcher(one_element_dense, name='one_element',
                          inputs=(), out=True)",one_element,"_Dispatcher(one_element_dense, name='one_element',
                          inputs=(), out=True)",,,,,,,,,,,,
make.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
make.py,python,,,,File: qutip\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
make.py,python,,,,Directory: qutip\core\data\make.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
solve.py,python,function,_splu,"(A, B, **kwargs)","Function: _splu(A, B, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
solve.py,python,function,solve_csr_dense,"(matrix: Union[CSR, Dia], target: Dense, method=None,
                    options: dict={})","Function: solve_csr_dense(matrix: Union[CSR, Dia], target: Dense, method=None,
                    options: dict={}) -> Dense",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,Dense,
solve.py,python,function,solve_dense,"(matrix: Dense, target: Data, method=None,
                options: dict={})","Function: solve_dense(matrix: Dense, target: Data, method=None,
                options: dict={}) -> Dense",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,Dense,
solve.py,python,constant,,,"Constant: __all__ = [""solve_csr_dense"", ""solve_dia_dense"", ""solve_dense"", ""solve""]",qutip,qutip,v5.0.4,,,,,"__all__ = [""solve_csr_dense"", ""solve_dia_dense"", ""solve_dense"", ""solve""]",__all__,"[""solve_csr_dense"", ""solve_dia_dense"", ""solve_dense"", ""solve""]",,,,,,,,,,,,
solve.py,python,constant,,,Constant: solve_dia_dense = solve_csr_dense,qutip,qutip,v5.0.4,,,,,solve_dia_dense = solve_csr_dense,solve_dia_dense,solve_csr_dense,,,,,,,,,,,,
solve.py,python,constant,,,"Constant: solve = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter('target', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter('method', _inspect.Parameter.POSITIONAL_OR_KEYWORD,
                           default=None),
        _inspect.Parameter('options', _inspect.Parameter.POSITIONAL_OR_KEYWORD,
                           default={}),
    ]),
    name='solve',
    module=__name__,
    inputs=('matrix', 'target'),
    out=True,
)",qutip,qutip,v5.0.4,,,,,"solve = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter('target', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter('method', _inspect.Parameter.POSITIONAL_OR_KEYWORD,
                           default=None),
        _inspect.Parameter('options', _inspect.Parameter.POSITIONAL_OR_KEYWORD,
                           default={}),
    ]),
    name='solve',
    module=__name__,
    inputs=('matrix', 'target'),
    out=True,
)",solve,"_Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter('target', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter('method', _inspect.Parameter.POSITIONAL_OR_KEYWORD,
                           default=None),
        _inspect.Parameter('options', _inspect.Parameter.POSITIONAL_OR_KEYWORD,
                           default={}),
    ]),
    name='solve',
    module=__name__,
    inputs=('matrix', 'target'),
    out=True,
)",,,,,,,,,,,,
solve.py,python,import,,,Import: qutip.core.data,qutip,qutip,v5.0.4,import qutip.core.data as _data,qutip.core.data,,,,,,,,,,,,,,,,,
solve.py,python,import,,,Import: scipy.sparse.linalg,qutip,qutip,v5.0.4,import scipy.sparse.linalg as splinalg,scipy.sparse.linalg,,,,,,,,,,,,,,,,,
solve.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
solve.py,python,import,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,warnings,,,,,,,,,,,,,,,,,
solve.py,python,import,,,Import: Union from typing,qutip,qutip,v5.0.4,from typing import Union,Union,typing,,,,,,,,,,,,,,,,
solve.py,python,import,,,Import: inspect,qutip,qutip,v5.0.4,import inspect as _inspect,inspect,,,,,,,,,,,,,,,,,
solve.py,python,local_import,,,Import: CSR from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Data, csr, Dense, Dia",CSR,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
solve.py,python,local_import,,,Import: Data from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Data, csr, Dense, Dia",Data,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
solve.py,python,local_import,,,Import: csr from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Data, csr, Dense, Dia",csr,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
solve.py,python,local_import,,,Import: Dense from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Data, csr, Dense, Dia",Dense,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
solve.py,python,local_import,,,Import: Dia from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Data, csr, Dense, Dia",Dia,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
solve.py,python,local_import,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings,settings,qutip.settings,qutip.settings,,,,,,,,,,,,,,,
solve.py,python,,,,File: qutip\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
solve.py,python,,,,Directory: qutip\core\data\solve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
_creator_utils.py,python,function,is_data,(arg),Function: is_data(arg),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
_creator_utils.py,python,function,is_nparray,(arg),Function: is_nparray(arg),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
_creator_utils.py,python,function,true,(arg),Function: true(arg),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
_creator_utils.py,python,function,data_copy,"(arg, shape, copy=True)","Function: data_copy(arg, shape, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
_creator_utils.py,python,constant,,,"Constant: __all__ = [
    'data_copy',
    'is_data',
    'is_nparray',
    'isspmatrix_csr',
    'isspmatrix_dia',
    'issparse'
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    'data_copy',
    'is_data',
    'is_nparray',
    'isspmatrix_csr',
    'isspmatrix_dia',
    'issparse'
]",__all__,"[
    'data_copy',
    'is_data',
    'is_nparray',
    'isspmatrix_csr',
    'isspmatrix_dia',
    'issparse'
]",,,,,,,,,,,,
_creator_utils.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
_creator_utils.py,python,local_import,,,Import: isspmatrix_csr from scipy.sparse,qutip,qutip,v5.0.4,"from scipy.sparse import isspmatrix_csr, issparse, isspmatrix_dia",isspmatrix_csr,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,,
_creator_utils.py,python,local_import,,,Import: issparse from scipy.sparse,qutip,qutip,v5.0.4,"from scipy.sparse import isspmatrix_csr, issparse, isspmatrix_dia",issparse,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,,
_creator_utils.py,python,local_import,,,Import: isspmatrix_dia from scipy.sparse,qutip,qutip,v5.0.4,"from scipy.sparse import isspmatrix_csr, issparse, isspmatrix_dia",isspmatrix_dia,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,,
_creator_utils.py,python,,,,File: qutip\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
_creator_utils.py,python,,,,Directory: qutip\core\data\_creator_utils.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
__init__.py,python,,,,File: qutip\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,Directory: qutip\core\data\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
rcsolve.py,python,function,rcsolve,"(Hsys, psi0, tlist, e_ops, Q, wc, alpha, N, w_th, sparse=False,
            options=None)","Function: rcsolve(Hsys, psi0, tlist, e_ops, Q, wc, alpha, N, w_th, sparse=False,
            options=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
rcsolve.py,python,constant,,,Constant: __all__ = ['rcsolve'],qutip,qutip,v5.0.4,,,,,__all__ = ['rcsolve'],__all__,['rcsolve'],,,,,,,,,,,,
rcsolve.py,python,import,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,warnings,,,,,,,,,,,,,,,,,
rcsolve.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
rcsolve.py,python,import,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,scipy.sparse,,,,,,,,,,,,,,,,,
rcsolve.py,python,import,,,Import: matrix from numpy,qutip,qutip,v5.0.4,from numpy import matrix,matrix,numpy,,,,,,,,,,,,,,,,
rcsolve.py,python,import,,,Import: linalg from numpy,qutip,qutip,v5.0.4,from numpy import linalg,linalg,numpy,,,,,,,,,,,,,,,,
rcsolve.py,python,,,,File: qutip\legacy,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
rcsolve.py,python,,,,Directory: qutip\legacy\rcsolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,import,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,warnings,,,,,,,,,,,,,,,,,
__init__.py,python,,,,File: qutip\legacy,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,Directory: qutip\legacy\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
memorycascade.py,python,class_field,,,Class field: [instance] MemoryCascade.H_S = H_S,qutip,qutip,v5.0.4,,,,,,,,,MemoryCascade,__init__,"(
        self,
        H_S,
        L1,
        L2,
        S_matrix=None,
        c_ops_markov=None,
        integrator=""propagator"",
        options=None,
    )",self.H_S = H_S,self.H_S = H_S,,,,,,
memorycascade.py,python,class_field,,,Class field: [instance] MemoryCascade.sysdims = H_S.dims,qutip,qutip,v5.0.4,,,,,,,,,MemoryCascade,__init__,"(
        self,
        H_S,
        L1,
        L2,
        S_matrix=None,
        c_ops_markov=None,
        integrator=""propagator"",
        options=None,
    )",self.sysdims = H_S.dims,self.sysdims = H_S.dims,,,,,,
memorycascade.py,python,class_field,,,Class field: [instance] MemoryCascade.Id = qeye(H_S.shape[0]),qutip,qutip,v5.0.4,,,,,,,,,MemoryCascade,__init__,"(
        self,
        H_S,
        L1,
        L2,
        S_matrix=None,
        c_ops_markov=None,
        integrator=""propagator"",
        options=None,
    )",self.Id = qeye(H_S.shape[0]),self.Id = qeye(H_S.shape[0]),,,,,,
memorycascade.py,python,class_field,,,Class field: [instance] MemoryCascade.Id.dims = sysdims,qutip,qutip,v5.0.4,,,,,,,,,MemoryCascade,__init__,"(
        self,
        H_S,
        L1,
        L2,
        S_matrix=None,
        c_ops_markov=None,
        integrator=""propagator"",
        options=None,
    )",self.Id.dims = self.sysdims,self.Id.dims = self.sysdims,,,,,,
memorycascade.py,python,class_field,,,"Class field: [instance] MemoryCascade.Id = sprepost(Id, Id)",qutip,qutip,v5.0.4,,,,,,,,,MemoryCascade,__init__,"(
        self,
        H_S,
        L1,
        L2,
        S_matrix=None,
        c_ops_markov=None,
        integrator=""propagator"",
        options=None,
    )","self.Id = sprepost(self.Id, self.Id)","self.Id = sprepost(self.Id, self.Id)",,,,,,
memorycascade.py,python,class_field,,,"Class field: [instance] MemoryCascade.store_states = options.get(""store_states"", False)",qutip,qutip,v5.0.4,,,,,,,,,MemoryCascade,__init__,"(
        self,
        H_S,
        L1,
        L2,
        S_matrix=None,
        c_ops_markov=None,
        integrator=""propagator"",
        options=None,
    )","self.store_states = self.options.get(""store_states"", False)","self.store_states = self.options.get(""store_states"", False)",,,,,,
memorycascade.py,python,class_field,,,Class field: [instance] MemoryCascade.integrator = integrator,qutip,qutip,v5.0.4,,,,,,,,,MemoryCascade,__init__,"(
        self,
        H_S,
        L1,
        L2,
        S_matrix=None,
        c_ops_markov=None,
        integrator=""propagator"",
        options=None,
    )",self.integrator = integrator,self.integrator = integrator,,,,,,
memorycascade.py,python,class_field,,,Class field: [instance] MemoryCascade._generators = {},qutip,qutip,v5.0.4,,,,,,,,,MemoryCascade,__init__,"(
        self,
        H_S,
        L1,
        L2,
        S_matrix=None,
        c_ops_markov=None,
        integrator=""propagator"",
        options=None,
    )",self._generators = {},self._generators = {},,,,,,
memorycascade.py,python,class_method,,,"Class method: MemoryCascade.__init__(
        self,
        H_S,
        L1,
        L2,
        S_matrix=None,
        c_ops_markov=None,
        integrator=""propagator"",
        options=None,
    )",qutip,qutip,v5.0.4,,,,,,,,,MemoryCascade,__init__,"(
        self,
        H_S,
        L1,
        L2,
        S_matrix=None,
        c_ops_markov=None,
        integrator=""propagator"",
        options=None,
    )",,,,,,,,
memorycascade.py,python,class_method,,,"Class method: MemoryCascade.generator(self, k)",qutip,qutip,v5.0.4,,,,,,,,,MemoryCascade,generator,"(self, k)",,,,,,,,
memorycascade.py,python,class_method,,,"Class method: MemoryCascade.propagator(self, t, tau, notrace=False)",qutip,qutip,v5.0.4,,,,,,,,,MemoryCascade,propagator,"(self, t, tau, notrace=False)",,,,,,,,
memorycascade.py,python,class_method,,,"Class method: MemoryCascade.outfieldpropagator(
        self, blist, tlist, tau, c1=None, c2=None, notrace=False
    )",qutip,qutip,v5.0.4,,,,,,,,,MemoryCascade,outfieldpropagator,"(
        self, blist, tlist, tau, c1=None, c2=None, notrace=False
    )",,,,,,,,
memorycascade.py,python,class_method,,,"Class method: MemoryCascade.rhot(self, rho0, t, tau)",qutip,qutip,v5.0.4,,,,,,,,,MemoryCascade,rhot,"(self, rho0, t, tau)",,,,,,,,
memorycascade.py,python,class_method,,,"Class method: MemoryCascade.outfieldcorr(self, rho0, blist, tlist, tau, c1=None, c2=None)",qutip,qutip,v5.0.4,,,,,,,,,MemoryCascade,outfieldcorr,"(self, rho0, blist, tlist, tau, c1=None, c2=None)",,,,,,,,
memorycascade.py,python,class,,,Class: MemoryCascade,qutip,qutip,v5.0.4,,,,,,,,,MemoryCascade,,,,,,,,,,
memorycascade.py,python,function,_localop,"(op, l, k)","Function: _localop(op, l, k)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
memorycascade.py,python,function,_genptrace,"(E, k)","Function: _genptrace(E, k)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
memorycascade.py,python,function,_generator,"(k, H, L1, L2, S=None, c_ops_markov=None)","Function: _generator(k, H, L1, L2, S=None, c_ops_markov=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
memorycascade.py,python,function,_integrate,"(L, E0, ti, tf, integrator=""propagator"", opt=None)","Function: _integrate(L, E0, ti, tf, integrator=""propagator"", opt=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
memorycascade.py,python,constant,,,"Constant: __all__ = [""MemoryCascade""]",qutip,qutip,v5.0.4,,,,,"__all__ = [""MemoryCascade""]",__all__,"[""MemoryCascade""]",,,,,,,,,,,,
memorycascade.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
memorycascade.py,python,import,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,warnings,,,,,,,,,,,,,,,,,
memorycascade.py,python,import,,,Import: sprepost from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",sprepost,qutip,,,,,,,,,,,,,,,,
memorycascade.py,python,import,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",Qobj,qutip,,,,,,,,,,,,,,,,
memorycascade.py,python,import,,,Import: spre from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",spre,qutip,,,,,,,,,,,,,,,,
memorycascade.py,python,import,,,Import: spost from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",spost,qutip,,,,,,,,,,,,,,,,
memorycascade.py,python,import,,,Import: liouvillian from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",liouvillian,qutip,,,,,,,,,,,,,,,,
memorycascade.py,python,import,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",qeye,qutip,,,,,,,,,,,,,,,,
memorycascade.py,python,import,,,Import: mesolve from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",mesolve,qutip,,,,,,,,,,,,,,,,
memorycascade.py,python,import,,,Import: propagator from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",propagator,qutip,,,,,,,,,,,,,,,,
memorycascade.py,python,import,,,Import: composite from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",composite,qutip,,,,,,,,,,,,,,,,
memorycascade.py,python,import,,,Import: isket from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",isket,qutip,,,,,,,,,,,,,,,,
memorycascade.py,python,import,,,Import: ket2dm from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",ket2dm,qutip,,,,,,,,,,,,,,,,
memorycascade.py,python,import,,,Import: tensor_contract from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",tensor_contract,qutip,,,,,,,,,,,,,,,,
memorycascade.py,python,,,,File: qutip\legacy\nonmarkov,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
memorycascade.py,python,,,,Directory: qutip\legacy\nonmarkov\memorycascade.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,File: qutip\legacy\nonmarkov,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,Directory: qutip\legacy\nonmarkov\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,class_field,,,Class field: [instance] Dicke.N = N,qutip,qutip,v5.0.4,,,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",self.N = N,self.N = N,,,,,,
piqs.py,python,class_field,,,Class field: [instance] Dicke.hamiltonian = hamiltonian,qutip,qutip,v5.0.4,,,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",self.hamiltonian = hamiltonian,self.hamiltonian = hamiltonian,,,,,,
piqs.py,python,class_field,,,Class field: [instance] Dicke.emission = emission,qutip,qutip,v5.0.4,,,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",self.emission = emission,self.emission = emission,,,,,,
piqs.py,python,class_field,,,Class field: [instance] Dicke.dephasing = dephasing,qutip,qutip,v5.0.4,,,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",self.dephasing = dephasing,self.dephasing = dephasing,,,,,,
piqs.py,python,class_field,,,Class field: [instance] Dicke.pumping = pumping,qutip,qutip,v5.0.4,,,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",self.pumping = pumping,self.pumping = pumping,,,,,,
piqs.py,python,class_field,,,Class field: [instance] Dicke.collective_emission = collective_emission,qutip,qutip,v5.0.4,,,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",self.collective_emission = collective_emission,self.collective_emission = collective_emission,,,,,,
piqs.py,python,class_field,,,Class field: [instance] Dicke.collective_dephasing = collective_dephasing,qutip,qutip,v5.0.4,,,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",self.collective_dephasing = collective_dephasing,self.collective_dephasing = collective_dephasing,,,,,,
piqs.py,python,class_field,,,Class field: [instance] Dicke.collective_pumping = collective_pumping,qutip,qutip,v5.0.4,,,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",self.collective_pumping = collective_pumping,self.collective_pumping = collective_pumping,,,,,,
piqs.py,python,class_field,,,Class field: [instance] Dicke.nds = num_dicke_states(N),qutip,qutip,v5.0.4,,,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",self.nds = num_dicke_states(self.N),self.nds = num_dicke_states(self.N),,,,,,
piqs.py,python,class_field,,,"Class field: [instance] Dicke.dshape = (num_dicke_states(N), num_dicke_states(N))",qutip,qutip,v5.0.4,,,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )","self.dshape = (num_dicke_states(self.N), num_dicke_states(self.N))","self.dshape = (num_dicke_states(self.N), num_dicke_states(self.N))",,,,,,
piqs.py,python,class_field,,,Class field: [instance] Pim.N = N,qutip,qutip,v5.0.4,,,,,,,,,Pim,__init__,"(
        self,
        N,
        emission=0.0,
        dephasing=0,
        pumping=0,
        collective_emission=0,
        collective_pumping=0,
        collective_dephasing=0,
    )",self.N = N,self.N = N,,,,,,
piqs.py,python,class_field,,,Class field: [instance] Pim.emission = emission,qutip,qutip,v5.0.4,,,,,,,,,Pim,__init__,"(
        self,
        N,
        emission=0.0,
        dephasing=0,
        pumping=0,
        collective_emission=0,
        collective_pumping=0,
        collective_dephasing=0,
    )",self.emission = emission,self.emission = emission,,,,,,
piqs.py,python,class_field,,,Class field: [instance] Pim.dephasing = dephasing,qutip,qutip,v5.0.4,,,,,,,,,Pim,__init__,"(
        self,
        N,
        emission=0.0,
        dephasing=0,
        pumping=0,
        collective_emission=0,
        collective_pumping=0,
        collective_dephasing=0,
    )",self.dephasing = dephasing,self.dephasing = dephasing,,,,,,
piqs.py,python,class_field,,,Class field: [instance] Pim.pumping = pumping,qutip,qutip,v5.0.4,,,,,,,,,Pim,__init__,"(
        self,
        N,
        emission=0.0,
        dephasing=0,
        pumping=0,
        collective_emission=0,
        collective_pumping=0,
        collective_dephasing=0,
    )",self.pumping = pumping,self.pumping = pumping,,,,,,
piqs.py,python,class_field,,,Class field: [instance] Pim.collective_pumping = collective_pumping,qutip,qutip,v5.0.4,,,,,,,,,Pim,__init__,"(
        self,
        N,
        emission=0.0,
        dephasing=0,
        pumping=0,
        collective_emission=0,
        collective_pumping=0,
        collective_dephasing=0,
    )",self.collective_pumping = collective_pumping,self.collective_pumping = collective_pumping,,,,,,
piqs.py,python,class_field,,,Class field: [instance] Pim.collective_dephasing = collective_dephasing,qutip,qutip,v5.0.4,,,,,,,,,Pim,__init__,"(
        self,
        N,
        emission=0.0,
        dephasing=0,
        pumping=0,
        collective_emission=0,
        collective_pumping=0,
        collective_dephasing=0,
    )",self.collective_dephasing = collective_dephasing,self.collective_dephasing = collective_dephasing,,,,,,
piqs.py,python,class_field,,,Class field: [instance] Pim.collective_emission = collective_emission,qutip,qutip,v5.0.4,,,,,,,,,Pim,__init__,"(
        self,
        N,
        emission=0.0,
        dephasing=0,
        pumping=0,
        collective_emission=0,
        collective_pumping=0,
        collective_dephasing=0,
    )",self.collective_emission = collective_emission,self.collective_emission = collective_emission,,,,,,
piqs.py,python,class_field,,,Class field: [instance] Pim.M = {},qutip,qutip,v5.0.4,,,,,,,,,Pim,__init__,"(
        self,
        N,
        emission=0.0,
        dephasing=0,
        pumping=0,
        collective_emission=0,
        collective_pumping=0,
        collective_dephasing=0,
    )",self.M = {},self.M = {},,,,,,
piqs.py,python,class_method,,,"Class method: Dicke.__init__(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",qutip,qutip,v5.0.4,,,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",,,,,,,,
piqs.py,python,class_method,,,Class method: Dicke.__repr__(self),qutip,qutip,v5.0.4,,,,,,,,,Dicke,__repr__,(self),,,,,,,,
piqs.py,python,class_method,,,Class method: Dicke.lindbladian(self),qutip,qutip,v5.0.4,,,,,,,,,Dicke,lindbladian,(self),,,,,,,,
piqs.py,python,class_method,,,Class method: Dicke.liouvillian(self),qutip,qutip,v5.0.4,,,,,,,,,Dicke,liouvillian,(self),,,,,,,,
piqs.py,python,class_method,,,"Class method: Dicke.pisolve(self, initial_state, tlist)",qutip,qutip,v5.0.4,,,,,,,,,Dicke,pisolve,"(self, initial_state, tlist)",,,,,,,,
piqs.py,python,class_method,,,Class method: Dicke.c_ops(self),qutip,qutip,v5.0.4,,,,,,,,,Dicke,c_ops,(self),,,,,,,,
piqs.py,python,class_method,,,Class method: Dicke.coefficient_matrix(self),qutip,qutip,v5.0.4,,,,,,,,,Dicke,coefficient_matrix,(self),,,,,,,,
piqs.py,python,class_method,,,"Class method: Pim.__init__(
        self,
        N,
        emission=0.0,
        dephasing=0,
        pumping=0,
        collective_emission=0,
        collective_pumping=0,
        collective_dephasing=0,
    )",qutip,qutip,v5.0.4,,,,,,,,,Pim,__init__,"(
        self,
        N,
        emission=0.0,
        dephasing=0,
        pumping=0,
        collective_emission=0,
        collective_pumping=0,
        collective_dephasing=0,
    )",,,,,,,,
piqs.py,python,class_method,,,"Class method: Pim.isdicke(self, dicke_row, dicke_col)",qutip,qutip,v5.0.4,,,,,,,,,Pim,isdicke,"(self, dicke_row, dicke_col)",,,,,,,,
piqs.py,python,class_method,,,"Class method: Pim.tau_valid(self, dicke_row, dicke_col)",qutip,qutip,v5.0.4,,,,,,,,,Pim,tau_valid,"(self, dicke_row, dicke_col)",,,,,,,,
piqs.py,python,class_method,,,"Class method: Pim.calculate_j_m(self, dicke_row, dicke_col)",qutip,qutip,v5.0.4,,,,,,,,,Pim,calculate_j_m,"(self, dicke_row, dicke_col)",,,,,,,,
piqs.py,python,class_method,,,"Class method: Pim.calculate_k(self, dicke_row, dicke_col)",qutip,qutip,v5.0.4,,,,,,,,,Pim,calculate_k,"(self, dicke_row, dicke_col)",,,,,,,,
piqs.py,python,class_method,,,Class method: Pim.coefficient_matrix(self),qutip,qutip,v5.0.4,,,,,,,,,Pim,coefficient_matrix,(self),,,,,,,,
piqs.py,python,class_method,,,"Class method: Pim.solve(self, rho0, tlist)",qutip,qutip,v5.0.4,,,,,,,,,Pim,solve,"(self, rho0, tlist)",,,,,,,,
piqs.py,python,class_method,,,"Class method: Pim.tau1(self, j, m)",qutip,qutip,v5.0.4,,,,,,,,,Pim,tau1,"(self, j, m)",,,,,,,,
piqs.py,python,class_method,,,"Class method: Pim.tau2(self, j, m)",qutip,qutip,v5.0.4,,,,,,,,,Pim,tau2,"(self, j, m)",,,,,,,,
piqs.py,python,class_method,,,"Class method: Pim.tau3(self, j, m)",qutip,qutip,v5.0.4,,,,,,,,,Pim,tau3,"(self, j, m)",,,,,,,,
piqs.py,python,class_method,,,"Class method: Pim.tau4(self, j, m)",qutip,qutip,v5.0.4,,,,,,,,,Pim,tau4,"(self, j, m)",,,,,,,,
piqs.py,python,class_method,,,"Class method: Pim.tau5(self, j, m)",qutip,qutip,v5.0.4,,,,,,,,,Pim,tau5,"(self, j, m)",,,,,,,,
piqs.py,python,class_method,,,"Class method: Pim.tau6(self, j, m)",qutip,qutip,v5.0.4,,,,,,,,,Pim,tau6,"(self, j, m)",,,,,,,,
piqs.py,python,class_method,,,"Class method: Pim.tau7(self, j, m)",qutip,qutip,v5.0.4,,,,,,,,,Pim,tau7,"(self, j, m)",,,,,,,,
piqs.py,python,class_method,,,"Class method: Pim.tau8(self, j, m)",qutip,qutip,v5.0.4,,,,,,,,,Pim,tau8,"(self, j, m)",,,,,,,,
piqs.py,python,class_method,,,"Class method: Pim.tau9(self, j, m)",qutip,qutip,v5.0.4,,,,,,,,,Pim,tau9,"(self, j, m)",,,,,,,,
piqs.py,python,class,,,Class: Result,qutip,qutip,v5.0.4,,,,,,,,,Result,,,,,,,,,,
piqs.py,python,class,,,Class: Dicke(object),qutip,qutip,v5.0.4,,,,,,,,,Dicke,,,,,(object),,,,,
piqs.py,python,class,,,Class: Pim(object),qutip,qutip,v5.0.4,,,,,,,,,Pim,,,,,(object),,,,,
piqs.py,python,function,_ensure_int,(x),Function: _ensure_int(x),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,num_dicke_states,(N),Function: num_dicke_states(N),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,num_dicke_ladders,(N),Function: num_dicke_ladders(N),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,num_tls,(nds),Function: num_tls(nds),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,isdiagonal,(mat),Function: isdiagonal(mat),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,dicke_blocks,(rho),Function: dicke_blocks(rho),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,dicke_blocks_full,(rho),Function: dicke_blocks_full(rho),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,dicke_function_trace,"(f, rho)","Function: dicke_function_trace(f, rho)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,entropy_vn_dicke,(rho),Function: entropy_vn_dicke(rho),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,purity_dicke,(rho),Function: purity_dicke(rho),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,energy_degeneracy,"(N, m)","Function: energy_degeneracy(N, m)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,state_degeneracy,"(N, j)","Function: state_degeneracy(N, j)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,m_degeneracy,"(N, m)","Function: m_degeneracy(N, m)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,ap,"(j, m)","Function: ap(j, m)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,am,"(j, m)","Function: am(j, m)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,spin_algebra,"(N, op=None)","Function: spin_algebra(N, op=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,_jspin_uncoupled,"(N, op=None)","Function: _jspin_uncoupled(N, op=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,jspin,"(N, op=None, basis=""dicke"")","Function: jspin(N, op=None, basis=""dicke"")",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,collapse_uncoupled,"(
    N,
    emission=0.0,
    dephasing=0.0,
    pumping=0.0,
    collective_emission=0.0,
    collective_dephasing=0.0,
    collective_pumping=0.0,
)","Function: collapse_uncoupled(
    N,
    emission=0.0,
    dephasing=0.0,
    pumping=0.0,
    collective_emission=0.0,
    collective_dephasing=0.0,
    collective_pumping=0.0,
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,dicke_basis,"(N, jmm1)","Function: dicke_basis(N, jmm1)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,dicke,"(N, j, m)","Function: dicke(N, j, m)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,_uncoupled_excited,(N),Function: _uncoupled_excited(N),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,_uncoupled_superradiant,(N),Function: _uncoupled_superradiant(N),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,_uncoupled_ground,(N),Function: _uncoupled_ground(N),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,_uncoupled_ghz,(N),Function: _uncoupled_ghz(N),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,_uncoupled_css,"(N, a, b)","Function: _uncoupled_css(N, a, b)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,excited,"(N, basis=""dicke"")","Function: excited(N, basis=""dicke"")",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,superradiant,"(N, basis=""dicke"")","Function: superradiant(N, basis=""dicke"")",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,css,"(
    N,
    x=1 / np.sqrt(2),
    y=1 / np.sqrt(2),
    basis=""dicke"",
    coordinates=""cartesian"",
)","Function: css(
    N,
    x=1 / np.sqrt(2),
    y=1 / np.sqrt(2),
    basis=""dicke"",
    coordinates=""cartesian"",
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,ghz,"(N, basis=""dicke"")","Function: ghz(N, basis=""dicke"")",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,ground,"(N, basis=""dicke"")","Function: ground(N, basis=""dicke"")",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,identity_uncoupled,(N),Function: identity_uncoupled(N),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,block_matrix,"(N, elements=""ones"")","Function: block_matrix(N, elements=""ones"")",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,function,tau_column,"(tau, k, j)","Function: tau_column(tau, k, j)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,constant,,,"Constant: __all__ = [
    ""num_dicke_states"",
    ""num_dicke_ladders"",
    ""num_tls"",
    ""isdiagonal"",
    ""dicke_blocks"",
    ""dicke_blocks_full"",
    ""dicke_function_trace"",
    ""purity_dicke"",
    ""entropy_vn_dicke"",
    ""Dicke"",
    ""state_degeneracy"",
    ""m_degeneracy"",
    ""energy_degeneracy"",
    ""ap"",
    ""am"",
    ""spin_algebra"",
    ""jspin"",
    ""collapse_uncoupled"",
    ""dicke_basis"",
    ""dicke"",
    ""excited"",
    ""superradiant"",
    ""css"",
    ""ghz"",
    ""ground"",
    ""identity_uncoupled"",
    ""block_matrix"",
    ""tau_column"",
    ""Pim"",
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    ""num_dicke_states"",
    ""num_dicke_ladders"",
    ""num_tls"",
    ""isdiagonal"",
    ""dicke_blocks"",
    ""dicke_blocks_full"",
    ""dicke_function_trace"",
    ""purity_dicke"",
    ""entropy_vn_dicke"",
    ""Dicke"",
    ""state_degeneracy"",
    ""m_degeneracy"",
    ""energy_degeneracy"",
    ""ap"",
    ""am"",
    ""spin_algebra"",
    ""jspin"",
    ""collapse_uncoupled"",
    ""dicke_basis"",
    ""dicke"",
    ""excited"",
    ""superradiant"",
    ""css"",
    ""ghz"",
    ""ground"",
    ""identity_uncoupled"",
    ""block_matrix"",
    ""tau_column"",
    ""Pim"",
]",__all__,"[
    ""num_dicke_states"",
    ""num_dicke_ladders"",
    ""num_tls"",
    ""isdiagonal"",
    ""dicke_blocks"",
    ""dicke_blocks_full"",
    ""dicke_function_trace"",
    ""purity_dicke"",
    ""entropy_vn_dicke"",
    ""Dicke"",
    ""state_degeneracy"",
    ""m_degeneracy"",
    ""energy_degeneracy"",
    ""ap"",
    ""am"",
    ""spin_algebra"",
    ""jspin"",
    ""collapse_uncoupled"",
    ""dicke_basis"",
    ""dicke"",
    ""excited"",
    ""superradiant"",
    ""css"",
    ""ghz"",
    ""ground"",
    ""identity_uncoupled"",
    ""block_matrix"",
    ""tau_column"",
    ""Pim"",
]",,,,,,,,,,,,
piqs.py,python,import,,,Import: factorial from math,qutip,qutip,v5.0.4,from math import factorial,factorial,math,,,,,,,,,,,,,,,,
piqs.py,python,import,,,Import: Decimal from decimal,qutip,qutip,v5.0.4,from decimal import Decimal,Decimal,decimal,,,,,,,,,,,,,,,,
piqs.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
piqs.py,python,local_import,,,Import: odeint from scipy.integrate,qutip,qutip,v5.0.4,from scipy.integrate import odeint,odeint,scipy.integrate,scipy.integrate,,,,,,,,,,,,,,,
piqs.py,python,local_import,,,Import: eigvalsh from scipy.linalg,qutip,qutip,v5.0.4,from scipy.linalg import eigvalsh,eigvalsh,scipy.linalg,scipy.linalg,,,,,,,,,,,,,,,
piqs.py,python,local_import,,,Import: entr from scipy.special,qutip,qutip,v5.0.4,from scipy.special import entr,entr,scipy.special,scipy.special,,,,,,,,,,,,,,,
piqs.py,python,local_import,,,Import: dok_matrix from scipy.sparse,qutip,qutip,v5.0.4,"from scipy.sparse import dok_matrix, block_diag, lil_matrix",dok_matrix,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,,
piqs.py,python,local_import,,,Import: block_diag from scipy.sparse,qutip,qutip,v5.0.4,"from scipy.sparse import dok_matrix, block_diag, lil_matrix",block_diag,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,,
piqs.py,python,local_import,,,Import: lil_matrix from scipy.sparse,qutip,qutip,v5.0.4,"from scipy.sparse import dok_matrix, block_diag, lil_matrix",lil_matrix,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,,
piqs.py,python,,,,File: qutip\piqs,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
piqs.py,python,,,,Directory: qutip\piqs\piqs.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,File: qutip\piqs,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,Directory: qutip\piqs\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
brmesolve.py,python,class_field,,,"Class field: BRSolver.name = ""brmesolve""",qutip,qutip,v5.0.4,,,,,,,,,BRSolver,,,"name = ""brmesolve""",,,,name,"""brmesolve""",,
brmesolve.py,python,class_field,,,"Class field: BRSolver.solver_options = {
        ""progress_bar"": """",
        ""progress_kwargs"": {""chunk_size"":10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": False,
        'method': 'adams',
        'tensor_type': 'sparse',
        'sparse_eigensolver': False,
    }",qutip,qutip,v5.0.4,,,,,,,,,BRSolver,,,"solver_options = {
        ""progress_bar"": """",
        ""progress_kwargs"": {""chunk_size"":10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": False,
        'method': 'adams',
        'tensor_type': 'sparse',
        'sparse_eigensolver': False,
    }",,,,solver_options,"{
        ""progress_bar"": """",
        ""progress_kwargs"": {""chunk_size"":10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": False,
        'method': 'adams',
        'tensor_type': 'sparse',
        'sparse_eigensolver': False,
    }",,
brmesolve.py,python,class_field,,,Class field: BRSolver._avail_integrators = {},qutip,qutip,v5.0.4,,,,,,,,,BRSolver,,,_avail_integrators = {},,,,_avail_integrators,{},,
brmesolve.py,python,class_field,,,Class field: [instance] BRSolver.rhs = None,qutip,qutip,v5.0.4,,,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",self.rhs = None,self.rhs = None,,,,,,
brmesolve.py,python,class_field,,,Class field: [instance] BRSolver.sec_cutoff = sec_cutoff,qutip,qutip,v5.0.4,,,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",self.sec_cutoff = sec_cutoff,self.sec_cutoff = sec_cutoff,,,,,,
brmesolve.py,python,class_field,,,Class field: [instance] BRSolver.options = options,qutip,qutip,v5.0.4,,,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",self.options = options,self.options = options,,,,,,
brmesolve.py,python,class_field,,,"Class field: [instance] BRSolver._system = H, a_ops, c_ops",qutip,qutip,v5.0.4,,,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)","self._system = H, a_ops, c_ops","self._system = H, a_ops, c_ops",,,,,,
brmesolve.py,python,class_field,,,Class field: [instance] BRSolver._num_collapse = len(c_ops),qutip,qutip,v5.0.4,,,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",self._num_collapse = len(c_ops),self._num_collapse = len(c_ops),,,,,,
brmesolve.py,python,class_field,,,Class field: [instance] BRSolver._num_a_ops = len(a_ops),qutip,qutip,v5.0.4,,,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",self._num_a_ops = len(a_ops),self._num_a_ops = len(a_ops),,,,,,
brmesolve.py,python,class_field,,,Class field: [instance] BRSolver.rhs = _prepare_rhs(),qutip,qutip,v5.0.4,,,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",self.rhs = self._prepare_rhs(),self.rhs = self._prepare_rhs(),,,,,,
brmesolve.py,python,class_field,,,Class field: [instance] BRSolver._integrator = _get_integrator(),qutip,qutip,v5.0.4,,,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",self._integrator = self._get_integrator(),self._integrator = self._get_integrator(),,,,,,
brmesolve.py,python,class_field,,,Class field: [instance] BRSolver._state_metadata = {},qutip,qutip,v5.0.4,,,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",self._state_metadata = {},self._state_metadata = {},,,,,,
brmesolve.py,python,class_field,,,Class field: [instance] BRSolver.stats = _initialize_stats(),qutip,qutip,v5.0.4,,,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",self.stats = self._initialize_stats(),self.stats = self._initialize_stats(),,,,,,
brmesolve.py,python,class_field,,,"Class field: [instance] BRSolver.rhs._register_feedback({}, solver=name)",qutip,qutip,v5.0.4,,,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)","self.rhs._register_feedback({}, solver=self.name)","self.rhs._register_feedback({}, solver=self.name)",,,,,,
brmesolve.py,python,class_method,,,"Class method: BRSolver.__init__(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",qutip,qutip,v5.0.4,,,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",,,,,,,,
brmesolve.py,python,class_method,,,Class method: BRSolver._initialize_stats(self),qutip,qutip,v5.0.4,,,,,,,,,BRSolver,_initialize_stats,(self),,,,,,,,
brmesolve.py,python,class_method,,,Class method: BRSolver._prepare_rhs(self),qutip,qutip,v5.0.4,,,,,,,,,BRSolver,_prepare_rhs,(self),,,,,,,,
brmesolve.py,python,class_method,,,Class method: [property] BRSolver.options(self),qutip,qutip,v5.0.4,,,,,,,,,BRSolver,options,(self),,,,property,,,,
brmesolve.py,python,class_method,,,"Class method: [options.setter] BRSolver.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,,,BRSolver,options,"(self, new_options)",,,,options.setter,,,,
brmesolve.py,python,class_method,,,"Class method: BRSolver._apply_options(self, keys)",qutip,qutip,v5.0.4,,,,,,,,,BRSolver,_apply_options,"(self, keys)",,,,,,,,
brmesolve.py,python,class_method,,,"Class method: [classmethod] BRSolver.StateFeedback(cls, default=None, raw_data=False)",qutip,qutip,v5.0.4,,,,,,,,,BRSolver,StateFeedback,"(cls, default=None, raw_data=False)",,,,classmethod,,,,
brmesolve.py,python,class,,,Class: BRSolver(Solver),qutip,qutip,v5.0.4,,,,,,,,,BRSolver,,,,,(Solver),,,,,
brmesolve.py,python,function,brmesolve,"(H, psi0, tlist, a_ops=(), e_ops=(), c_ops=(),
              args=None, sec_cutoff=0.1, options=None, **kwargs)","Function: brmesolve(H, psi0, tlist, a_ops=(), e_ops=(), c_ops=(),
              args=None, sec_cutoff=0.1, options=None, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
brmesolve.py,python,constant,,,"Constant: __all__ = ['brmesolve', 'BRSolver']",qutip,qutip,v5.0.4,,,,,"__all__ = ['brmesolve', 'BRSolver']",__all__,"['brmesolve', 'BRSolver']",,,,,,,,,,,,
brmesolve.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
brmesolve.py,python,import,,,Import: inspect,qutip,qutip,v5.0.4,import inspect,inspect,,,,,,,,,,,,,,,,,
brmesolve.py,python,import,,,Import: time from time,qutip,qutip,v5.0.4,from time import time,time,time,,,,,,,,,,,,,,,,
brmesolve.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
brmesolve.py,python,,,,Directory: qutip\solver\brmesolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
correlation.py,python,function,correlation_2op_1t,"(H, state0, taulist, c_ops, a_op, b_op,
                       solver=""me"", reverse=False, args=None,
                       options=None)","Function: correlation_2op_1t(H, state0, taulist, c_ops, a_op, b_op,
                       solver=""me"", reverse=False, args=None,
                       options=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
correlation.py,python,function,correlation_2op_2t,"(H, state0, tlist, taulist, c_ops, a_op, b_op,
                       solver=""me"", reverse=False, args=None,
                       options=None)","Function: correlation_2op_2t(H, state0, tlist, taulist, c_ops, a_op, b_op,
                       solver=""me"", reverse=False, args=None,
                       options=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
correlation.py,python,function,correlation_3op_1t,"(H, state0, taulist, c_ops, a_op, b_op, c_op,
                       solver=""me"", args=None, options=None)","Function: correlation_3op_1t(H, state0, taulist, c_ops, a_op, b_op, c_op,
                       solver=""me"", args=None, options=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
correlation.py,python,function,correlation_3op_2t,"(H, state0, tlist, taulist, c_ops, a_op, b_op, c_op,
                       solver=""me"", args=None, options=None)","Function: correlation_3op_2t(H, state0, tlist, taulist, c_ops, a_op, b_op, c_op,
                       solver=""me"", args=None, options=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
correlation.py,python,function,coherence_function_g1,"(
    H, state0, taulist, c_ops, a_op, solver=""me"", args=None, options=None
)","Function: coherence_function_g1(
    H, state0, taulist, c_ops, a_op, solver=""me"", args=None, options=None
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
correlation.py,python,function,coherence_function_g2,"(H, state0, taulist, c_ops, a_op, solver=""me"",
                          args=None, options=None)","Function: coherence_function_g2(H, state0, taulist, c_ops, a_op, solver=""me"",
                          args=None, options=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
correlation.py,python,function,_make_solver,"(H, c_ops, args, options, solver)","Function: _make_solver(H, c_ops, args, options, solver)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
correlation.py,python,function,correlation_3op,"(solver, state0, tlist, taulist, A=None, B=None, C=None)","Function: correlation_3op(solver, state0, tlist, taulist, A=None, B=None, C=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
correlation.py,python,function,_correlation_3op_dm,"(solver, state0, tlist, taulist, A, B, C)","Function: _correlation_3op_dm(solver, state0, tlist, taulist, A, B, C)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
correlation.py,python,constant,,,"Constant: __all__ = [
    'correlation_3op',
    'correlation_2op_1t', 'correlation_2op_2t', 'correlation_3op_1t',
    'correlation_3op_2t', 'coherence_function_g1', 'coherence_function_g2'
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    'correlation_3op',
    'correlation_2op_1t', 'correlation_2op_2t', 'correlation_3op_1t',
    'correlation_3op_2t', 'coherence_function_g1', 'coherence_function_g2'
]",__all__,"[
    'correlation_3op',
    'correlation_2op_1t', 'correlation_2op_2t', 'correlation_3op_1t',
    'correlation_3op_2t', 'coherence_function_g1', 'coherence_function_g2'
]",,,,,,,,,,,,
correlation.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
correlation.py,python,import,,,Import: scipy.fftpack,qutip,qutip,v5.0.4,import scipy.fftpack,scipy.fftpack,,,,,,,,,,,,,,,,,
correlation.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
correlation.py,python,,,,Directory: qutip\solver\correlation.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
countstat.py,python,function,countstat_current,"(L, c_ops=None, rhoss=None, J_ops=None)","Function: countstat_current(L, c_ops=None, rhoss=None, J_ops=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
countstat.py,python,function,_solve,"(A, V)","Function: _solve(A, V)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
countstat.py,python,function,_noise_direct,"(L, wlist, rhoss, J_ops)","Function: _noise_direct(L, wlist, rhoss, J_ops)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
countstat.py,python,function,_noise_pseudoinv,"(L, wlist, rhoss, J_ops, sparse, method)","Function: _noise_pseudoinv(L, wlist, rhoss, J_ops, sparse, method)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
countstat.py,python,function,countstat_current_noise,"(L, c_ops, wlist=None, rhoss=None, J_ops=None,
                            sparse=True, method='direct')","Function: countstat_current_noise(L, c_ops, wlist=None, rhoss=None, J_ops=None,
                            sparse=True, method='direct')",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
countstat.py,python,constant,,,"Constant: __all__ = ['countstat_current', 'countstat_current_noise']",qutip,qutip,v5.0.4,,,,,"__all__ = ['countstat_current', 'countstat_current_noise']",__all__,"['countstat_current', 'countstat_current_noise']",,,,,,,,,,,,
countstat.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
countstat.py,python,import,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,scipy.sparse,,,,,,,,,,,,,,,,,
countstat.py,python,import,,,Import: product from itertools,qutip,qutip,v5.0.4,from itertools import product,product,itertools,,,,,,,,,,,,,,,,
countstat.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
countstat.py,python,,,,Directory: qutip\solver\countstat.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet.py,python,class_field,,,Class field: [instance] FloquetBasis.T = T,qutip,qutip,v5.0.4,,,,,,,,,FloquetBasis,__init__,"(
        self,
        H,
        T,
        args=None,
        options=None,
        sparse=False,
        sort=True,
        precompute=None,
    )",self.T = T,self.T = T,,,,,,
floquet.py,python,class_field,,,"Class field: [instance] FloquetBasis.U = Propagator(H, args=args, options=options, memoize=memoize)",qutip,qutip,v5.0.4,,,,,,,,,FloquetBasis,__init__,"(
        self,
        H,
        T,
        args=None,
        options=None,
        sparse=False,
        sort=True,
        precompute=None,
    )","self.U = Propagator(H, args=args, options=options, memoize=memoize)","self.U = Propagator(H, args=args, options=options, memoize=memoize)",,,,,,
floquet.py,python,class_field,,,"Class field: FMESolver.name = ""fmmesolve""",qutip,qutip,v5.0.4,,,,,,,,,FMESolver,,,"name = ""fmmesolve""",,,,name,"""fmmesolve""",,
floquet.py,python,class_field,,,Class field: FMESolver._avail_integrators = {},qutip,qutip,v5.0.4,,,,,,,,,FMESolver,,,_avail_integrators = {},,,,_avail_integrators,{},,
floquet.py,python,class_field,,,Class field: FMESolver._resultclass = FloquetResult,qutip,qutip,v5.0.4,,,,,,,,,FMESolver,,,_resultclass = FloquetResult,,,,_resultclass,FloquetResult,,
floquet.py,python,class_field,,,"Class field: FMESolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        ""method"": ""adams"",
        ""store_floquet_states"": False,
    }",qutip,qutip,v5.0.4,,,,,,,,,FMESolver,,,"solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        ""method"": ""adams"",
        ""store_floquet_states"": False,
    }",,,,solver_options,"{
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        ""method"": ""adams"",
        ""store_floquet_states"": False,
    }",,
floquet.py,python,class_field,,,Class field: [instance] FMESolver.options = options,qutip,qutip,v5.0.4,,,,,,,,,FMESolver,__init__,"(
        self, floquet_basis, a_ops, w_th=0.0, *, kmax=5, nT=None, options=None
    )",self.options = options,self.options = options,,,,,,
floquet.py,python,class_field,,,Class field: [instance] FMESolver._num_collapse = len(a_ops),qutip,qutip,v5.0.4,,,,,,,,,FMESolver,__init__,"(
        self, floquet_basis, a_ops, w_th=0.0, *, kmax=5, nT=None, options=None
    )",self._num_collapse = len(a_ops),self._num_collapse = len(a_ops),,,,,,
floquet.py,python,class_field,,,"Class field: [instance] FMESolver.rhs = QobjEvo(
            floquet_tensor(
                floquet_basis,
                c_ops,
                spectra_cb,
                w_th=w_th,
                kmax=kmax,
                nT=nT,
            )
        )",qutip,qutip,v5.0.4,,,,,,,,,FMESolver,__init__,"(
        self, floquet_basis, a_ops, w_th=0.0, *, kmax=5, nT=None, options=None
    )","self.rhs = QobjEvo(
            floquet_tensor(
                self.floquet_basis,
                c_ops,
                spectra_cb,
                w_th=w_th,
                kmax=kmax,
                nT=nT,
            )
        )","self.rhs = QobjEvo(
            floquet_tensor(
                self.floquet_basis,
                c_ops,
                spectra_cb,
                w_th=w_th,
                kmax=kmax,
                nT=nT,
            )
        )",,,,,,
floquet.py,python,class_field,,,Class field: [instance] FMESolver._integrator = _get_integrator(),qutip,qutip,v5.0.4,,,,,,,,,FMESolver,__init__,"(
        self, floquet_basis, a_ops, w_th=0.0, *, kmax=5, nT=None, options=None
    )",self._integrator = self._get_integrator(),self._integrator = self._get_integrator(),,,,,,
floquet.py,python,class_field,,,Class field: [instance] FMESolver._state_metadata = {},qutip,qutip,v5.0.4,,,,,,,,,FMESolver,__init__,"(
        self, floquet_basis, a_ops, w_th=0.0, *, kmax=5, nT=None, options=None
    )",self._state_metadata = {},self._state_metadata = {},,,,,,
floquet.py,python,class_field,,,Class field: [instance] FMESolver.stats = _initialize_stats(),qutip,qutip,v5.0.4,,,,,,,,,FMESolver,__init__,"(
        self, floquet_basis, a_ops, w_th=0.0, *, kmax=5, nT=None, options=None
    )",self.stats = self._initialize_stats(),self.stats = self._initialize_stats(),,,,,,
floquet.py,python,class_method,,,"Class method: FloquetBasis.__init__(
        self,
        H,
        T,
        args=None,
        options=None,
        sparse=False,
        sort=True,
        precompute=None,
    )",qutip,qutip,v5.0.4,,,,,,,,,FloquetBasis,__init__,"(
        self,
        H,
        T,
        args=None,
        options=None,
        sparse=False,
        sort=True,
        precompute=None,
    )",,,,,,,,
floquet.py,python,class_method,,,"Class method: FloquetBasis._as_ketlist(self, kets_mat)",qutip,qutip,v5.0.4,,,,,,,,,FloquetBasis,_as_ketlist,"(self, kets_mat)",,,,,,,,
floquet.py,python,class_method,,,"Class method: FloquetBasis.mode(self, t, data=False)",qutip,qutip,v5.0.4,,,,,,,,,FloquetBasis,mode,"(self, t, data=False)",,,,,,,,
floquet.py,python,class_method,,,"Class method: FloquetBasis.state(self, t, data=False)",qutip,qutip,v5.0.4,,,,,,,,,FloquetBasis,state,"(self, t, data=False)",,,,,,,,
floquet.py,python,class_method,,,"Class method: FloquetBasis.from_floquet_basis(self, floquet_basis, t=0)",qutip,qutip,v5.0.4,,,,,,,,,FloquetBasis,from_floquet_basis,"(self, floquet_basis, t=0)",,,,,,,,
floquet.py,python,class_method,,,"Class method: FloquetBasis.to_floquet_basis(self, lab_basis, t=0)",qutip,qutip,v5.0.4,,,,,,,,,FloquetBasis,to_floquet_basis,"(self, lab_basis, t=0)",,,,,,,,
floquet.py,python,class_method,,,"Class method: FloquetResult._post_init(self, floquet_basis)",qutip,qutip,v5.0.4,,,,,,,,,FloquetResult,_post_init,"(self, floquet_basis)",,,,,,,,
floquet.py,python,class_method,,,"Class method: FloquetResult.add(self, t, state)",qutip,qutip,v5.0.4,,,,,,,,,FloquetResult,add,"(self, t, state)",,,,,,,,
floquet.py,python,class_method,,,"Class method: FMESolver.__init__(
        self, floquet_basis, a_ops, w_th=0.0, *, kmax=5, nT=None, options=None
    )",qutip,qutip,v5.0.4,,,,,,,,,FMESolver,__init__,"(
        self, floquet_basis, a_ops, w_th=0.0, *, kmax=5, nT=None, options=None
    )",,,,,,,,
floquet.py,python,class_method,,,Class method: FMESolver._initialize_stats(self),qutip,qutip,v5.0.4,,,,,,,,,FMESolver,_initialize_stats,(self),,,,,,,,
floquet.py,python,class_method,,,"Class method: FMESolver._argument(self, args)",qutip,qutip,v5.0.4,,,,,,,,,FMESolver,_argument,"(self, args)",,,,,,,,
floquet.py,python,class_method,,,"Class method: FMESolver.start(self, state0, t0, *, floquet=False)",qutip,qutip,v5.0.4,,,,,,,,,FMESolver,start,"(self, state0, t0, *, floquet=False)",,,,,,,,
floquet.py,python,class_method,,,"Class method: FMESolver.step(self, t, *, args=None, copy=True, floquet=False)",qutip,qutip,v5.0.4,,,,,,,,,FMESolver,step,"(self, t, *, args=None, copy=True, floquet=False)",,,,,,,,
floquet.py,python,class_method,,,"Class method: FMESolver.run(self, state0, tlist, *, floquet=False, args=None, e_ops=None)",qutip,qutip,v5.0.4,,,,,,,,,FMESolver,run,"(self, state0, tlist, *, floquet=False, args=None, e_ops=None)",,,,,,,,
floquet.py,python,class_method,,,Class method: [classmethod] FMESolver.ExpectFeedback(cls),qutip,qutip,v5.0.4,,,,,,,,,FMESolver,ExpectFeedback,(cls),,,,classmethod,,,,
floquet.py,python,class_method,,,Class method: [classmethod] FMESolver.StateFeedback(cls),qutip,qutip,v5.0.4,,,,,,,,,FMESolver,StateFeedback,(cls),,,,classmethod,,,,
floquet.py,python,class,,,Class: FloquetBasis,qutip,qutip,v5.0.4,,,,,,,,,FloquetBasis,,,,,,,,,,
floquet.py,python,class,,,Class: FloquetResult(Result),qutip,qutip,v5.0.4,,,,,,,,,FloquetResult,,,,,(Result),,,,,
floquet.py,python,class,,,Class: FMESolver(MESolver),qutip,qutip,v5.0.4,,,,,,,,,FMESolver,,,,,(MESolver),,,,,
floquet.py,python,function,_floquet_delta_tensor,"(f_energies, kmax, T)","Function: _floquet_delta_tensor(f_energies, kmax, T)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet.py,python,function,_floquet_X_matrices,"(floquet_basis, c_ops, kmax, ntimes=100)","Function: _floquet_X_matrices(floquet_basis, c_ops, kmax, ntimes=100)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet.py,python,function,_floquet_gamma_matrices,"(X, delta, J_cb)","Function: _floquet_gamma_matrices(X, delta, J_cb)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet.py,python,function,_floquet_A_matrix,"(delta, gamma, w_th)","Function: _floquet_A_matrix(delta, gamma, w_th)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet.py,python,function,_floquet_master_equation_tensor,(A),Function: _floquet_master_equation_tensor(A),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet.py,python,function,floquet_tensor,"(H, c_ops, spectra_cb, T=0, w_th=0.0, kmax=5, nT=100)","Function: floquet_tensor(H, c_ops, spectra_cb, T=0, w_th=0.0, kmax=5, nT=100)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet.py,python,function,fsesolve,"(H, psi0, tlist, e_ops=None, T=0.0, args=None, options=None)","Function: fsesolve(H, psi0, tlist, e_ops=None, T=0.0, args=None, options=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet.py,python,function,fmmesolve,"(
    H,
    rho0,
    tlist,
    c_ops=None,
    e_ops=None,
    spectra_cb=None,
    T=0,
    w_th=0.0,
    args=None,
    options=None,
)","Function: fmmesolve(
    H,
    rho0,
    tlist,
    c_ops=None,
    e_ops=None,
    spectra_cb=None,
    T=0,
    w_th=0.0,
    args=None,
    options=None,
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet.py,python,constant,,,"Constant: __all__ = [
    ""FloquetBasis"",
    ""floquet_tensor"",
    ""fsesolve"",
    ""fmmesolve"",
    ""FMESolver"",
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    ""FloquetBasis"",
    ""floquet_tensor"",
    ""fsesolve"",
    ""fmmesolve"",
    ""FMESolver"",
]",__all__,"[
    ""FloquetBasis"",
    ""floquet_tensor"",
    ""fsesolve"",
    ""fmmesolve"",
    ""FMESolver"",
]",,,,,,,,,,,,
floquet.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
floquet.py,python,import,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import Qobj, QobjEvo",Qobj,qutip,,,,,,,,,,,,,,,,
floquet.py,python,import,,,Import: QobjEvo from qutip,qutip,qutip,v5.0.4,"from qutip import Qobj, QobjEvo",QobjEvo,qutip,,,,,,,,,,,,,,,,
floquet.py,python,import,,,Import: time from time,qutip,qutip,v5.0.4,from time import time,time,time,,,,,,,,,,,,,,,,
floquet.py,python,local_import,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,data,qutip.core,qutip.core,,,,,,,,,,,,,,,
floquet.py,python,local_import,,,Import: Data from qutip.core.data,qutip,qutip,v5.0.4,from qutip.core.data import Data,Data,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
floquet.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet.py,python,,,,Directory: qutip\solver\floquet.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet_bwcomp.py,python,function,floquet_modes,"(H, T, args=None, sort=False, U=None, options=None)","Function: floquet_modes(H, T, args=None, sort=False, U=None, options=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet_bwcomp.py,python,function,floquet_modes_t,"(f_modes_0, f_energies, t, H, T, args=None, options=None)","Function: floquet_modes_t(f_modes_0, f_energies, t, H, T, args=None, options=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet_bwcomp.py,python,function,floquet_modes_table,"(
    f_modes_0, f_energies, tlist, H, T, args=None, options=None
)","Function: floquet_modes_table(
    f_modes_0, f_energies, tlist, H, T, args=None, options=None
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet_bwcomp.py,python,function,floquet_modes_t_lookup,"(f_modes_table_t, t, T)","Function: floquet_modes_t_lookup(f_modes_table_t, t, T)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet_bwcomp.py,python,function,floquet_states,"(f_modes_t, f_energies, t)","Function: floquet_states(f_modes_t, f_energies, t)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet_bwcomp.py,python,function,floquet_states_t,"(f_modes_0, f_energies, t, H, T, args=None, options=None)","Function: floquet_states_t(f_modes_0, f_energies, t, H, T, args=None, options=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet_bwcomp.py,python,function,floquet_wavefunction,"(f_modes_t, f_energies, f_coeff, t)","Function: floquet_wavefunction(f_modes_t, f_energies, f_coeff, t)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet_bwcomp.py,python,function,floquet_wavefunction_t,"(
    f_modes_0, f_energies, f_coeff, t, H, T, args=None, options=None
)","Function: floquet_wavefunction_t(
    f_modes_0, f_energies, f_coeff, t, H, T, args=None, options=None
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet_bwcomp.py,python,function,floquet_state_decomposition,"(f_states, f_energies, psi)","Function: floquet_state_decomposition(f_states, f_energies, psi)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet_bwcomp.py,python,function,floquet_master_equation_rates,"(
    f_modes_0,
    f_energies,
    c_op,
    H,
    T,
    args,
    J_cb,
    w_th,
    kmax=5,
    f_modes_table_t=None,
)","Function: floquet_master_equation_rates(
    f_modes_0,
    f_energies,
    c_op,
    H,
    T,
    args,
    J_cb,
    w_th,
    kmax=5,
    f_modes_table_t=None,
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet_bwcomp.py,python,constant,,,"Constant: __all__ = [
    ""floquet_modes"",
    ""floquet_modes_t"",
    ""floquet_modes_table"",
    ""floquet_modes_t_lookup"",
    ""floquet_states"",
    ""floquet_states_t"",
    ""floquet_wavefunction"",
    ""floquet_wavefunction_t"",
    ""floquet_state_decomposition"",
    ""floquet_master_equation_rates"",
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    ""floquet_modes"",
    ""floquet_modes_t"",
    ""floquet_modes_table"",
    ""floquet_modes_t_lookup"",
    ""floquet_states"",
    ""floquet_states_t"",
    ""floquet_wavefunction"",
    ""floquet_wavefunction_t"",
    ""floquet_state_decomposition"",
    ""floquet_master_equation_rates"",
]",__all__,"[
    ""floquet_modes"",
    ""floquet_modes_t"",
    ""floquet_modes_table"",
    ""floquet_modes_t_lookup"",
    ""floquet_states"",
    ""floquet_states_t"",
    ""floquet_wavefunction"",
    ""floquet_wavefunction_t"",
    ""floquet_state_decomposition"",
    ""floquet_master_equation_rates"",
]",,,,,,,,,,,,
floquet_bwcomp.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
floquet_bwcomp.py,python,import,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,warnings,,,,,,,,,,,,,,,,,
floquet_bwcomp.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
floquet_bwcomp.py,python,,,,Directory: qutip\solver\floquet_bwcomp.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
krylovsolve.py,python,function,krylovsolve,"(
    H, psi0, tlist, krylov_dim, e_ops=None, args=None, options=None
)","Function: krylovsolve(
    H, psi0, tlist, krylov_dim, e_ops=None, args=None, options=None
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
krylovsolve.py,python,constant,,,Constant: __all__ = ['krylovsolve'],qutip,qutip,v5.0.4,,,,,__all__ = ['krylovsolve'],__all__,['krylovsolve'],,,,,,,,,,,,
krylovsolve.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
krylovsolve.py,python,,,,Directory: qutip\solver\krylovsolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
mcsolve.py,python,class_field,,,Class field: [instance] _MCRHS.rhs = H,qutip,qutip,v5.0.4,,,,,,,,,_MCRHS,__init__,"(self, H, c_ops, n_ops)",self.rhs = H,self.rhs = H,,,,,,
mcsolve.py,python,class_field,,,Class field: [instance] _MCRHS.c_ops = c_ops,qutip,qutip,v5.0.4,,,,,,,,,_MCRHS,__init__,"(self, H, c_ops, n_ops)",self.c_ops = c_ops,self.c_ops = c_ops,,,,,,
mcsolve.py,python,class_field,,,Class field: [instance] _MCRHS.n_ops = n_ops,qutip,qutip,v5.0.4,,,,,,,,,_MCRHS,__init__,"(self, H, c_ops, n_ops)",self.n_ops = n_ops,self.n_ops = n_ops,,,,,,
mcsolve.py,python,class_field,,,"Class field: MCIntegrator.name = ""mcsolve""",qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,,,"name = ""mcsolve""",,,,name,"""mcsolve""",,
mcsolve.py,python,class_field,,,Class field: [instance] MCIntegrator._integrator = integrator,qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,__init__,"(self, integrator, system, options=None)",self._integrator = integrator,self._integrator = integrator,,,,,,
mcsolve.py,python,class_field,,,Class field: [instance] MCIntegrator.system = system,qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,__init__,"(self, integrator, system, options=None)",self.system = system,self.system = system,,,,,,
mcsolve.py,python,class_field,,,Class field: [instance] MCIntegrator._c_ops = system.c_ops,qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,__init__,"(self, integrator, system, options=None)",self._c_ops = system.c_ops,self._c_ops = system.c_ops,,,,,,
mcsolve.py,python,class_field,,,Class field: [instance] MCIntegrator._n_ops = system.n_ops,qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,__init__,"(self, integrator, system, options=None)",self._n_ops = system.n_ops,self._n_ops = system.n_ops,,,,,,
mcsolve.py,python,class_field,,,Class field: [instance] MCIntegrator.options = options,qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,__init__,"(self, integrator, system, options=None)",self.options = options,self.options = options,,,,,,
mcsolve.py,python,class_field,,,Class field: [instance] MCIntegrator._generator = None,qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,__init__,"(self, integrator, system, options=None)",self._generator = None,self._generator = None,,,,,,
mcsolve.py,python,class_field,,,"Class field: [instance] MCIntegrator.method = f""{name} {_integrator.method}""",qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,__init__,"(self, integrator, system, options=None)","self.method = f""{self.name} {self._integrator.method}""","self.method = f""{self.name} {self._integrator.method}""",,,,,,
mcsolve.py,python,class_field,,,Class field: [instance] MCIntegrator._is_set = False,qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,__init__,"(self, integrator, system, options=None)",self._is_set = False,self._is_set = False,,,,,,
mcsolve.py,python,class_field,,,Class field: [instance] MCIntegrator.issuper = _c_ops[0].issuper,qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,__init__,"(self, integrator, system, options=None)",self.issuper = self._c_ops[0].issuper,self.issuper = self._c_ops[0].issuper,,,,,,
mcsolve.py,python,class_field,,,"Class field: MCSolver.name = ""mcsolve""",qutip,qutip,v5.0.4,,,,,,,,,MCSolver,,,"name = ""mcsolve""",,,,name,"""mcsolve""",,
mcsolve.py,python,class_field,,,Class field: MCSolver._trajectory_resultclass = McTrajectoryResult,qutip,qutip,v5.0.4,,,,,,,,,MCSolver,,,_trajectory_resultclass = McTrajectoryResult,,,,_trajectory_resultclass,McTrajectoryResult,,
mcsolve.py,python,class_field,,,Class field: MCSolver._mc_integrator_class = MCIntegrator,qutip,qutip,v5.0.4,,,,,,,,,MCSolver,,,_mc_integrator_class = MCIntegrator,,,,_mc_integrator_class,MCIntegrator,,
mcsolve.py,python,class_field,,,"Class field: MCSolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""adams"",
        ""mc_corr_eps"": 1e-10,
        ""norm_steps"": 5,
        ""norm_t_tol"": 1e-6,
        ""norm_tol"": 1e-4,
        ""improved_sampling"": False,
    }",qutip,qutip,v5.0.4,,,,,,,,,MCSolver,,,"solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""adams"",
        ""mc_corr_eps"": 1e-10,
        ""norm_steps"": 5,
        ""norm_t_tol"": 1e-6,
        ""norm_tol"": 1e-4,
        ""improved_sampling"": False,
    }",,,,solver_options,"{
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""adams"",
        ""mc_corr_eps"": 1e-10,
        ""norm_steps"": 5,
        ""norm_t_tol"": 1e-6,
        ""norm_tol"": 1e-4,
        ""improved_sampling"": False,
    }",,
mcsolve.py,python,class_field,,,Class field: [instance] MCSolver._num_collapse = len(_c_ops),qutip,qutip,v5.0.4,,,,,,,,,MCSolver,__init__,"(self, H, c_ops, *, options=None)",self._num_collapse = len(self._c_ops),self._num_collapse = len(self._c_ops),,,,,,
mcsolve.py,python,class_field,,,Class field: [instance] MCSolver.options = options,qutip,qutip,v5.0.4,,,,,,,,,MCSolver,__init__,"(self, H, c_ops, *, options=None)",self.options = options,self.options = options,,,,,,
mcsolve.py,python,class_method,,,"Class method: _MCRHS.__init__(self, H, c_ops, n_ops)",qutip,qutip,v5.0.4,,,,,,,,,_MCRHS,__init__,"(self, H, c_ops, n_ops)",,,,,,,,
mcsolve.py,python,class_method,,,Class method: _MCRHS.__call__(self),qutip,qutip,v5.0.4,,,,,,,,,_MCRHS,__call__,(self),,,,,,,,
mcsolve.py,python,class_method,,,"Class method: _MCRHS.arguments(self, args)",qutip,qutip,v5.0.4,,,,,,,,,_MCRHS,arguments,"(self, args)",,,,,,,,
mcsolve.py,python,class_method,,,"Class method: _MCRHS._register_feedback(self, key, val)",qutip,qutip,v5.0.4,,,,,,,,,_MCRHS,_register_feedback,"(self, key, val)",,,,,,,,
mcsolve.py,python,class_method,,,"Class method: MCIntegrator.__init__(self, integrator, system, options=None)",qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,__init__,"(self, integrator, system, options=None)",,,,,,,,
mcsolve.py,python,class_method,,,"Class method: MCIntegrator.set_state(self, t, state0, generator,
                  no_jump=False, jump_prob_floor=0.0)",qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,set_state,"(self, t, state0, generator,
                  no_jump=False, jump_prob_floor=0.0)",,,,,,,,
mcsolve.py,python,class_method,,,"Class method: MCIntegrator.get_state(self, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,get_state,"(self, copy=True)",,,,,,,,
mcsolve.py,python,class_method,,,"Class method: MCIntegrator.integrate(self, t, copy=False)",qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,integrate,"(self, t, copy=False)",,,,,,,,
mcsolve.py,python,class_method,,,"Class method: MCIntegrator.run(self, tlist)",qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,run,"(self, tlist)",,,,,,,,
mcsolve.py,python,class_method,,,"Class method: MCIntegrator.reset(self, hard=False)",qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,reset,"(self, hard=False)",,,,,,,,
mcsolve.py,python,class_method,,,"Class method: MCIntegrator._prob_func(self, state)",qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,_prob_func,"(self, state)",,,,,,,,
mcsolve.py,python,class_method,,,"Class method: MCIntegrator._norm_func(self, state)",qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,_norm_func,"(self, state)",,,,,,,,
mcsolve.py,python,class_method,,,"Class method: MCIntegrator._find_collapse_time(self, norm_old, norm, t_prev, t_final)",qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,_find_collapse_time,"(self, norm_old, norm, t_prev, t_final)",,,,,,,,
mcsolve.py,python,class_method,,,"Class method: MCIntegrator._do_collapse(self, collapse_time, state)",qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,_do_collapse,"(self, collapse_time, state)",,,,,,,,
mcsolve.py,python,class_method,,,"Class method: MCIntegrator.arguments(self, args)",qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,arguments,"(self, args)",,,,,,,,
mcsolve.py,python,class_method,,,Class method: [property] MCIntegrator.integrator_options(self),qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,integrator_options,(self),,,,property,,,,
mcsolve.py,python,class_method,,,"Class method: MCSolver.__init__(self, H, c_ops, *, options=None)",qutip,qutip,v5.0.4,,,,,,,,,MCSolver,__init__,"(self, H, c_ops, *, options=None)",,,,,,,,
mcsolve.py,python,class_method,,,"Class method: MCSolver._restore_state(self, data, *, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,MCSolver,_restore_state,"(self, data, *, copy=True)",,,,,,,,
mcsolve.py,python,class_method,,,Class method: MCSolver._initialize_stats(self),qutip,qutip,v5.0.4,,,,,,,,,MCSolver,_initialize_stats,(self),,,,,,,,
mcsolve.py,python,class_method,,,"Class method: MCSolver._run_one_traj(self, seed, state, tlist, e_ops, **integrator_kwargs)",qutip,qutip,v5.0.4,,,,,,,,,MCSolver,_run_one_traj,"(self, seed, state, tlist, e_ops, **integrator_kwargs)",,,,,,,,
mcsolve.py,python,class_method,,,"Class method: MCSolver.run(self, state, tlist, ntraj=1, *,
            args=None, e_ops=(), timeout=None, target_tol=None, seeds=None)",qutip,qutip,v5.0.4,,,,,,,,,MCSolver,run,"(self, state, tlist, ntraj=1, *,
            args=None, e_ops=(), timeout=None, target_tol=None, seeds=None)",,,,,,,,
mcsolve.py,python,class_method,,,Class method: MCSolver._get_integrator(self),qutip,qutip,v5.0.4,,,,,,,,,MCSolver,_get_integrator,(self),,,,,,,,
mcsolve.py,python,class_method,,,Class method: [property] MCSolver._resultclass(self),qutip,qutip,v5.0.4,,,,,,,,,MCSolver,_resultclass,(self),,,,property,,,,
mcsolve.py,python,class_method,,,Class method: [property] MCSolver.options(self),qutip,qutip,v5.0.4,,,,,,,,,MCSolver,options,(self),,,,property,,,,
mcsolve.py,python,class_method,,,"Class method: [options.setter] MCSolver.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,,,MCSolver,options,"(self, new_options)",,,,options.setter,,,,
mcsolve.py,python,class_method,,,Class method: [classmethod] MCSolver.avail_integrators(cls),qutip,qutip,v5.0.4,,,,,,,,,MCSolver,avail_integrators,(cls),,,,classmethod,,,,
mcsolve.py,python,class_method,,,"Class method: [classmethod] MCSolver.CollapseFeedback(cls, default=None)",qutip,qutip,v5.0.4,,,,,,,,,MCSolver,CollapseFeedback,"(cls, default=None)",,,,classmethod,,,,
mcsolve.py,python,class_method,,,"Class method: [classmethod] MCSolver.StateFeedback(cls, default=None, raw_data=False, open=False)",qutip,qutip,v5.0.4,,,,,,,,,MCSolver,StateFeedback,"(cls, default=None, raw_data=False, open=False)",,,,classmethod,,,,
mcsolve.py,python,class,,,Class: _MCRHS(_MultiTrajRHS),qutip,qutip,v5.0.4,,,,,,,,,_MCRHS,,,,,(_MultiTrajRHS),,,,,
mcsolve.py,python,class,,,Class: MCIntegrator,qutip,qutip,v5.0.4,,,,,,,,,MCIntegrator,,,,,,,,,,
mcsolve.py,python,class,,,Class: MCSolver(MultiTrajSolver),qutip,qutip,v5.0.4,,,,,,,,,MCSolver,,,,,(MultiTrajSolver),,,,,
mcsolve.py,python,function,mcsolve,"(H, state, tlist, c_ops=(), e_ops=None, ntraj=500, *,
            args=None, options=None, seeds=None, target_tol=None, timeout=None,
            **kwargs)","Function: mcsolve(H, state, tlist, c_ops=(), e_ops=None, ntraj=500, *,
            args=None, options=None, seeds=None, target_tol=None, timeout=None,
            **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
mcsolve.py,python,constant,,,"Constant: __all__ = ['mcsolve', ""MCSolver""]",qutip,qutip,v5.0.4,,,,,"__all__ = ['mcsolve', ""MCSolver""]",__all__,"['mcsolve', ""MCSolver""]",,,,,,,,,,,,
mcsolve.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
mcsolve.py,python,import,,,Import: qutip.core.data,qutip,qutip,v5.0.4,import qutip.core.data as _data,qutip.core.data,,,,,,,,,,,,,,,,,
mcsolve.py,python,import,,,Import: time from time,qutip,qutip,v5.0.4,from time import time,time,time,,,,,,,,,,,,,,,,
mcsolve.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
mcsolve.py,python,,,,Directory: qutip\solver\mcsolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
mesolve.py,python,class_field,,,"Class field: MESolver.name = ""mesolve""",qutip,qutip,v5.0.4,,,,,,,,,MESolver,,,"name = ""mesolve""",,,,name,"""mesolve""",,
mesolve.py,python,class_field,,,Class field: MESolver._avail_integrators = {},qutip,qutip,v5.0.4,,,,,,,,,MESolver,,,_avail_integrators = {},,,,_avail_integrators,{},,
mesolve.py,python,class_field,,,"Class field: MESolver.solver_options = {
        ""progress_bar"": """",
        ""progress_kwargs"": {""chunk_size"":10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        'method': 'adams',
    }",qutip,qutip,v5.0.4,,,,,,,,,MESolver,,,"solver_options = {
        ""progress_bar"": """",
        ""progress_kwargs"": {""chunk_size"":10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        'method': 'adams',
    }",,,,solver_options,"{
        ""progress_bar"": """",
        ""progress_kwargs"": {""chunk_size"":10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        'method': 'adams',
    }",,
mesolve.py,python,class_field,,,Class field: [instance] MESolver._num_collapse = len(c_ops),qutip,qutip,v5.0.4,,,,,,,,,MESolver,__init__,"(self, H, c_ops=None, *, options=None)",self._num_collapse = len(c_ops),self._num_collapse = len(c_ops),,,,,,
mesolve.py,python,class_method,,,"Class method: MESolver.__init__(self, H, c_ops=None, *, options=None)",qutip,qutip,v5.0.4,,,,,,,,,MESolver,__init__,"(self, H, c_ops=None, *, options=None)",,,,,,,,
mesolve.py,python,class_method,,,Class method: MESolver._initialize_stats(self),qutip,qutip,v5.0.4,,,,,,,,,MESolver,_initialize_stats,(self),,,,,,,,
mesolve.py,python,class_method,,,"Class method: [classmethod] MESolver.StateFeedback(cls, default=None, raw_data=False, prop=False)",qutip,qutip,v5.0.4,,,,,,,,,MESolver,StateFeedback,"(cls, default=None, raw_data=False, prop=False)",,,,classmethod,,,,
mesolve.py,python,class,,,Class: MESolver(SESolver),qutip,qutip,v5.0.4,,,,,,,,,MESolver,,,,,(SESolver),,,,,
mesolve.py,python,function,mesolve,"(H, rho0, tlist, c_ops=None, e_ops=None, args=None, options=None,
            **kwargs)","Function: mesolve(H, rho0, tlist, c_ops=None, e_ops=None, args=None, options=None,
            **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
mesolve.py,python,constant,,,"Constant: __all__ = ['mesolve', 'MESolver']",qutip,qutip,v5.0.4,,,,,"__all__ = ['mesolve', 'MESolver']",__all__,"['mesolve', 'MESolver']",,,,,,,,,,,,
mesolve.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
mesolve.py,python,import,,,Import: time from time,qutip,qutip,v5.0.4,from time import time,time,time,,,,,,,,,,,,,,,,
mesolve.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
mesolve.py,python,,,,Directory: qutip\solver\mesolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
multitraj.py,python,class_field,,,Class field: [instance] _MultiTrajRHS.rhs = rhs,qutip,qutip,v5.0.4,,,,,,,,,_MultiTrajRHS,__init__,"(self, rhs)",self.rhs = rhs,self.rhs = rhs,,,,,,
multitraj.py,python,class_field,,,"Class field: MultiTrajSolver.name = ""generic multi trajectory""",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,,,"name = ""generic multi trajectory""",,,,name,"""generic multi trajectory""",,
multitraj.py,python,class_field,,,Class field: MultiTrajSolver._resultclass = MultiTrajResult,qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,,,_resultclass = MultiTrajResult,,,,_resultclass,MultiTrajResult,,
multitraj.py,python,class_field,,,Class field: MultiTrajSolver._trajectory_resultclass = Result,qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,,,_trajectory_resultclass = Result,,,,_trajectory_resultclass,Result,,
multitraj.py,python,class_field,,,Class field: MultiTrajSolver._avail_integrators = {},qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,,,_avail_integrators = {},,,,_avail_integrators,{},,
multitraj.py,python,class_field,,,"Class field: MultiTrajSolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""method"": """",
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
    }",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,,,"solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""method"": """",
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
    }",,,,solver_options,"{
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""method"": """",
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
    }",,
multitraj.py,python,class_field,,,Class field: [instance] MultiTrajSolver.options = options,qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,__init__,"(self, rhs, *, options=None)",self.options = options,self.options = options,,,,,,
multitraj.py,python,class_field,,,Class field: [instance] MultiTrajSolver.seed_sequence = np.random.SeedSequence(),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,__init__,"(self, rhs, *, options=None)",self.seed_sequence = np.random.SeedSequence(),self.seed_sequence = np.random.SeedSequence(),,,,,,
multitraj.py,python,class_field,,,Class field: [instance] MultiTrajSolver._integrator = _get_integrator(),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,__init__,"(self, rhs, *, options=None)",self._integrator = self._get_integrator(),self._integrator = self._get_integrator(),,,,,,
multitraj.py,python,class_field,,,Class field: [instance] MultiTrajSolver._state_metadata = {},qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,__init__,"(self, rhs, *, options=None)",self._state_metadata = {},self._state_metadata = {},,,,,,
multitraj.py,python,class_field,,,Class field: [instance] MultiTrajSolver.stats = _initialize_stats(),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,__init__,"(self, rhs, *, options=None)",self.stats = self._initialize_stats(),self.stats = self._initialize_stats(),,,,,,
multitraj.py,python,class_method,,,"Class method: _MultiTrajRHS.__init__(self, rhs)",qutip,qutip,v5.0.4,,,,,,,,,_MultiTrajRHS,__init__,"(self, rhs)",,,,,,,,
multitraj.py,python,class_method,,,"Class method: _MultiTrajRHS.arguments(self, args)",qutip,qutip,v5.0.4,,,,,,,,,_MultiTrajRHS,arguments,"(self, args)",,,,,,,,
multitraj.py,python,class_method,,,"Class method: _MultiTrajRHS._register_feedback(self, type, val)",qutip,qutip,v5.0.4,,,,,,,,,_MultiTrajRHS,_register_feedback,"(self, type, val)",,,,,,,,
multitraj.py,python,class_method,,,"Class method: _MultiTrajRHS.__getattr__(self, attr)",qutip,qutip,v5.0.4,,,,,,,,,_MultiTrajRHS,__getattr__,"(self, attr)",,,,,,,,
multitraj.py,python,class_method,,,"Class method: MultiTrajSolver.__init__(self, rhs, *, options=None)",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,__init__,"(self, rhs, *, options=None)",,,,,,,,
multitraj.py,python,class_method,,,"Class method: MultiTrajSolver.start(self, state, t0, seed=None)",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,start,"(self, state, t0, seed=None)",,,,,,,,
multitraj.py,python,class_method,,,"Class method: MultiTrajSolver.step(self, t, *, args=None, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,step,"(self, t, *, args=None, copy=True)",,,,,,,,
multitraj.py,python,class_method,,,"Class method: MultiTrajSolver._initialize_run(self, state, ntraj=1, args=None, e_ops=(),
                        timeout=None, target_tol=None, seeds=None)",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,_initialize_run,"(self, state, ntraj=1, args=None, e_ops=(),
                        timeout=None, target_tol=None, seeds=None)",,,,,,,,
multitraj.py,python,class_method,,,"Class method: MultiTrajSolver.run(self, state, tlist, ntraj=1, *,
            args=None, e_ops=(), timeout=None, target_tol=None, seeds=None)",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,run,"(self, state, tlist, ntraj=1, *,
            args=None, e_ops=(), timeout=None, target_tol=None, seeds=None)",,,,,,,,
multitraj.py,python,class_method,,,"Class method: MultiTrajSolver._initialize_run_one_traj(self, seed, state, tlist, e_ops,
                                 **integrator_kwargs)",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,_initialize_run_one_traj,"(self, seed, state, tlist, e_ops,
                                 **integrator_kwargs)",,,,,,,,
multitraj.py,python,class_method,,,"Class method: MultiTrajSolver._run_one_traj(self, seed, state, tlist, e_ops, **integrator_kwargs)",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,_run_one_traj,"(self, seed, state, tlist, e_ops, **integrator_kwargs)",,,,,,,,
multitraj.py,python,class_method,,,"Class method: MultiTrajSolver._integrate_one_traj(self, seed, tlist, result)",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,_integrate_one_traj,"(self, seed, tlist, result)",,,,,,,,
multitraj.py,python,class_method,,,"Class method: MultiTrajSolver._read_seed(self, seed, ntraj)",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,_read_seed,"(self, seed, ntraj)",,,,,,,,
multitraj.py,python,class_method,,,"Class method: MultiTrajSolver._argument(self, args)",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,_argument,"(self, args)",,,,,,,,
multitraj.py,python,class_method,,,"Class method: MultiTrajSolver._get_generator(self, seed)",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,_get_generator,"(self, seed)",,,,,,,,
multitraj.py,python,class,,,Class: _MultiTrajRHS,qutip,qutip,v5.0.4,,,,,,,,,_MultiTrajRHS,,,,,,,,,,
multitraj.py,python,class,,,Class: MultiTrajSolver(Solver),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajSolver,,,,,(Solver),,,,,
multitraj.py,python,constant,,,"Constant: __all__ = [""MultiTrajSolver""]",qutip,qutip,v5.0.4,,,,,"__all__ = [""MultiTrajSolver""]",__all__,"[""MultiTrajSolver""]",,,,,,,,,,,,
multitraj.py,python,import,,,Import: time from time,qutip,qutip,v5.0.4,from time import time,time,time,,,,,,,,,,,,,,,,
multitraj.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
multitraj.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
multitraj.py,python,,,,Directory: qutip\solver\multitraj.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
nm_mcsolve.py,python,class_field,,,Class field: [instance] InfluenceMartingale._nm_solver = nm_solver,qutip,qutip,v5.0.4,,,,,,,,,InfluenceMartingale,__init__,"(self, nm_solver, a_parameter, quad_limit)",self._nm_solver = nm_solver,self._nm_solver = nm_solver,,,,,,
nm_mcsolve.py,python,class_field,,,Class field: [instance] InfluenceMartingale._quad_limit = quad_limit,qutip,qutip,v5.0.4,,,,,,,,,InfluenceMartingale,__init__,"(self, nm_solver, a_parameter, quad_limit)",self._quad_limit = quad_limit,self._quad_limit = quad_limit,,,,,,
nm_mcsolve.py,python,class_field,,,Class field: [instance] InfluenceMartingale._a_parameter = a_parameter,qutip,qutip,v5.0.4,,,,,,,,,InfluenceMartingale,__init__,"(self, nm_solver, a_parameter, quad_limit)",self._a_parameter = a_parameter,self._a_parameter = a_parameter,,,,,,
nm_mcsolve.py,python,class_field,,,Class field: [instance] InfluenceMartingale.reset(),qutip,qutip,v5.0.4,,,,,,,,,InfluenceMartingale,__init__,"(self, nm_solver, a_parameter, quad_limit)",self.reset(),self.reset(),,,,,,
nm_mcsolve.py,python,class_field,,,"Class field: [instance] NmMCIntegrator._martingale = kwargs.pop(""__martingale"")",qutip,qutip,v5.0.4,,,,,,,,,NmMCIntegrator,__init__,"(self, *args, **kwargs)","self._martingale = kwargs.pop(""__martingale"")","self._martingale = kwargs.pop(""__martingale"")",,,,,,
nm_mcsolve.py,python,class_field,,,"Class field: NonMarkovianMCSolver.name = ""nm_mcsolve""",qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,,,"name = ""nm_mcsolve""",,,,name,"""nm_mcsolve""",,
nm_mcsolve.py,python,class_field,,,Class field: NonMarkovianMCSolver._resultclass = NmmcResult,qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,,,_resultclass = NmmcResult,,,,_resultclass,NmmcResult,,
nm_mcsolve.py,python,class_field,,,"Class field: NonMarkovianMCSolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""adams"",
        ""mc_corr_eps"": 1e-10,
        ""norm_steps"": 5,
        ""norm_t_tol"": 1e-6,
        ""norm_tol"": 1e-4,
        ""completeness_rtol"": 1e-5,
        ""completeness_atol"": 1e-8,
        ""martingale_quad_limit"": 100,
    }",qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,,,"solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""adams"",
        ""mc_corr_eps"": 1e-10,
        ""norm_steps"": 5,
        ""norm_t_tol"": 1e-6,
        ""norm_tol"": 1e-4,
        ""completeness_rtol"": 1e-5,
        ""completeness_atol"": 1e-8,
        ""martingale_quad_limit"": 100,
    }",,,,solver_options,"{
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""adams"",
        ""mc_corr_eps"": 1e-10,
        ""norm_steps"": 5,
        ""norm_t_tol"": 1e-6,
        ""norm_tol"": 1e-4,
        ""completeness_rtol"": 1e-5,
        ""completeness_atol"": 1e-8,
        ""martingale_quad_limit"": 100,
    }",,
nm_mcsolve.py,python,class_field,,,Class field: NonMarkovianMCSolver._trajectory_resultclass = NmmcTrajectoryResult,qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,,,_trajectory_resultclass = NmmcTrajectoryResult,,,,_trajectory_resultclass,NmmcTrajectoryResult,,
nm_mcsolve.py,python,class_field,,,Class field: NonMarkovianMCSolver._mc_integrator_class = NmMCIntegrator,qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,,,_mc_integrator_class = NmMCIntegrator,,,,_mc_integrator_class,NmMCIntegrator,,
nm_mcsolve.py,python,class_field,,,Class field: [instance] NonMarkovianMCSolver.options = options,qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,__init__,"(
        self, H, ops_and_rates, args=None, options=None,
    )",self.options = options,self.options = options,,,,,,
nm_mcsolve.py,python,class_field,,,"Class field: [instance] NonMarkovianMCSolver.ops = [op for op, _ in ops_and_rates]",qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,__init__,"(
        self, H, ops_and_rates, args=None, options=None,
    )","self.ops = [op for op, _ in ops_and_rates]","self.ops = [op for op, _ in ops_and_rates]",,,,,,
nm_mcsolve.py,python,class_field,,,"Class field: [instance] NonMarkovianMCSolver._martingale = InfluenceMartingale(
            self, a_parameter, options[""martingale_quad_limit""]
        )",qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,__init__,"(
        self, H, ops_and_rates, args=None, options=None,
    )","self._martingale = InfluenceMartingale(
            self, a_parameter, self.options[""martingale_quad_limit""]
        )","self._martingale = InfluenceMartingale(
            self, a_parameter, self.options[""martingale_quad_limit""]
        )",,,,,,
nm_mcsolve.py,python,class_field,,,"Class field: [instance] NonMarkovianMCSolver._rates = [rate for _, rate in ops_and_rates]",qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,__init__,"(
        self, H, ops_and_rates, args=None, options=None,
    )","self._rates = [rate for _, rate in ops_and_rates]","self._rates = [rate for _, rate in ops_and_rates]",,,,,,
nm_mcsolve.py,python,class_field,,,Class field: [instance] NonMarkovianMCSolver._rate_shift = RateShiftCoefficient(_rates),qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,__init__,"(
        self, H, ops_and_rates, args=None, options=None,
    )",self._rate_shift = RateShiftCoefficient(self._rates),self._rate_shift = RateShiftCoefficient(self._rates),,,,,,
nm_mcsolve.py,python,class_field,,,"Class field: [instance] NonMarkovianMCSolver._sqrt_shifted_rates = [
            SqrtRealCoefficient(rate + _rate_shift)
            for rate in _rates
        ]",qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,__init__,"(
        self, H, ops_and_rates, args=None, options=None,
    )","self._sqrt_shifted_rates = [
            SqrtRealCoefficient(rate + self._rate_shift)
            for rate in self._rates
        ]","self._sqrt_shifted_rates = [
            SqrtRealCoefficient(rate + self._rate_shift)
            for rate in self._rates
        ]",,,,,,
nm_mcsolve.py,python,class_field,,,"Class field: [instance] NonMarkovianMCSolver._trajectory_resultclass = functools.partial(
            NmmcTrajectoryResult, __nm_solver=self,
        )",qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,__init__,"(
        self, H, ops_and_rates, args=None, options=None,
    )","self._trajectory_resultclass = functools.partial(
            NmmcTrajectoryResult, __nm_solver=self,
        )","self._trajectory_resultclass = functools.partial(
            NmmcTrajectoryResult, __nm_solver=self,
        )",,,,,,
nm_mcsolve.py,python,class_field,,,"Class field: [instance] NonMarkovianMCSolver._mc_integrator_class = functools.partial(
            NmMCIntegrator, __martingale=_martingale,
        )",qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,__init__,"(
        self, H, ops_and_rates, args=None, options=None,
    )","self._mc_integrator_class = functools.partial(
            NmMCIntegrator, __martingale=self._martingale,
        )","self._mc_integrator_class = functools.partial(
            NmMCIntegrator, __martingale=self._martingale,
        )",,,,,,
nm_mcsolve.py,python,class_method,,,"Class method: InfluenceMartingale.__init__(self, nm_solver, a_parameter, quad_limit)",qutip,qutip,v5.0.4,,,,,,,,,InfluenceMartingale,__init__,"(self, nm_solver, a_parameter, quad_limit)",,,,,,,,
nm_mcsolve.py,python,class_method,,,Class method: InfluenceMartingale.reset(self),qutip,qutip,v5.0.4,,,,,,,,,InfluenceMartingale,reset,(self),,,,,,,,
nm_mcsolve.py,python,class_method,,,"Class method: InfluenceMartingale.initialize(self, t0, cache='clear')",qutip,qutip,v5.0.4,,,,,,,,,InfluenceMartingale,initialize,"(self, t0, cache='clear')",,,,,,,,
nm_mcsolve.py,python,class_method,,,"Class method: InfluenceMartingale.add_collapse(self, collapse_time, collapse_channel)",qutip,qutip,v5.0.4,,,,,,,,,InfluenceMartingale,add_collapse,"(self, collapse_time, collapse_channel)",,,,,,,,
nm_mcsolve.py,python,class_method,,,"Class method: InfluenceMartingale.value(self, t)",qutip,qutip,v5.0.4,,,,,,,,,InfluenceMartingale,value,"(self, t)",,,,,,,,
nm_mcsolve.py,python,class_method,,,"Class method: InfluenceMartingale._compute_continuous_martingale(self, t1, t2)",qutip,qutip,v5.0.4,,,,,,,,,InfluenceMartingale,_compute_continuous_martingale,"(self, t1, t2)",,,,,,,,
nm_mcsolve.py,python,class_method,,,"Class method: NmMCIntegrator.__init__(self, *args, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,NmMCIntegrator,__init__,"(self, *args, **kwargs)",,,,,,,,
nm_mcsolve.py,python,class_method,,,"Class method: NmMCIntegrator._do_collapse(self, *args, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,NmMCIntegrator,_do_collapse,"(self, *args, **kwargs)",,,,,,,,
nm_mcsolve.py,python,class_method,,,"Class method: NmMCIntegrator.set_state(self, t, *args, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,NmMCIntegrator,set_state,"(self, t, *args, **kwargs)",,,,,,,,
nm_mcsolve.py,python,class_method,,,"Class method: NonMarkovianMCSolver.__init__(
        self, H, ops_and_rates, args=None, options=None,
    )",qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,__init__,"(
        self, H, ops_and_rates, args=None, options=None,
    )",,,,,,,,
nm_mcsolve.py,python,class_method,,,"Class method: NonMarkovianMCSolver._check_completeness(self, ops_and_rates)",qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,_check_completeness,"(self, ops_and_rates)",,,,,,,,
nm_mcsolve.py,python,class_method,,,Class method: NonMarkovianMCSolver.current_martingale(self),qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,current_martingale,(self),,,,,,,,
nm_mcsolve.py,python,class_method,,,"Class method: NonMarkovianMCSolver._argument(self, args)",qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,_argument,"(self, args)",,,,,,,,
nm_mcsolve.py,python,class_method,,,"Class method: NonMarkovianMCSolver.add_feedback(self, key, type)",qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,add_feedback,"(self, key, type)",,,,,,,,
nm_mcsolve.py,python,class_method,,,"Class method: NonMarkovianMCSolver.rate_shift(self, t)",qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,rate_shift,"(self, t)",,,,,,,,
nm_mcsolve.py,python,class_method,,,"Class method: NonMarkovianMCSolver.rate(self, t, i)",qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,rate,"(self, t, i)",,,,,,,,
nm_mcsolve.py,python,class_method,,,"Class method: NonMarkovianMCSolver.sqrt_shifted_rate(self, t, i)",qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,sqrt_shifted_rate,"(self, t, i)",,,,,,,,
nm_mcsolve.py,python,class_method,,,"Class method: NonMarkovianMCSolver.start(self, state, t0, seed=None)",qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,start,"(self, state, t0, seed=None)",,,,,,,,
nm_mcsolve.py,python,class_method,,,"Class method: NonMarkovianMCSolver.step(self, t, *, args=None, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,step,"(self, t, *, args=None, copy=True)",,,,,,,,
nm_mcsolve.py,python,class_method,,,"Class method: NonMarkovianMCSolver.run(self, state, tlist, ntraj=1, *, args=None, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,run,"(self, state, tlist, ntraj=1, *, args=None, **kwargs)",,,,,,,,
nm_mcsolve.py,python,class_method,,,Class method: [property] NonMarkovianMCSolver.options(self),qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,options,(self),,,,property,,,,
nm_mcsolve.py,python,class_method,,,"Class method: [options.setter] NonMarkovianMCSolver.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,options,"(self, new_options)",,,,options.setter,,,,
nm_mcsolve.py,python,class,,,Class: InfluenceMartingale,qutip,qutip,v5.0.4,,,,,,,,,InfluenceMartingale,,,,,,,,,,
nm_mcsolve.py,python,class,,,Class: NmMCIntegrator(MCIntegrator),qutip,qutip,v5.0.4,,,,,,,,,NmMCIntegrator,,,,,(MCIntegrator),,,,,
nm_mcsolve.py,python,class,,,Class: NonMarkovianMCSolver(MCSolver),qutip,qutip,v5.0.4,,,,,,,,,NonMarkovianMCSolver,,,,,(MCSolver),,,,,
nm_mcsolve.py,python,function,nm_mcsolve,"(H, state, tlist, ops_and_rates=(), e_ops=None, ntraj=500, *,
               args=None, options=None, seeds=None, target_tol=None,
               timeout=None)","Function: nm_mcsolve(H, state, tlist, ops_and_rates=(), e_ops=None, ntraj=500, *,
               args=None, options=None, seeds=None, target_tol=None,
               timeout=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
nm_mcsolve.py,python,function,_parse_op_and_rate,"(op, rate, **kw)","Function: _parse_op_and_rate(op, rate, **kw)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
nm_mcsolve.py,python,constant,,,"Constant: __all__ = ['nm_mcsolve', 'NonMarkovianMCSolver']",qutip,qutip,v5.0.4,,,,,"__all__ = ['nm_mcsolve', 'NonMarkovianMCSolver']",__all__,"['nm_mcsolve', 'NonMarkovianMCSolver']",,,,,,,,,,,,
nm_mcsolve.py,python,import,,,Import: functools,qutip,qutip,v5.0.4,import functools,functools,,,,,,,,,,,,,,,,,
nm_mcsolve.py,python,import,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,numbers,,,,,,,,,,,,,,,,,
nm_mcsolve.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
nm_mcsolve.py,python,import,,,Import: scipy,qutip,qutip,v5.0.4,import scipy,scipy,,,,,,,,,,,,,,,,,
nm_mcsolve.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
nm_mcsolve.py,python,,,,Directory: qutip\solver\nm_mcsolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
options.py,python,class_field,,,Class field: [instance] _SolverOptions._default = default,qutip,qutip,v5.0.4,,,,,,,,,_SolverOptions,__init__,"(
        self, default, feedback=None, name="""", doc="""", /, **kwargs
    )",self._default = default,self._default = default,,,,,,
options.py,python,class_field,,,Class field: [instance] _SolverOptions.__doc__ = doc,qutip,qutip,v5.0.4,,,,,,,,,_SolverOptions,__init__,"(
        self, default, feedback=None, name="""", doc="""", /, **kwargs
    )",self.__doc__ = doc,self.__doc__ = doc,,,,,,
options.py,python,class_field,,,Class field: [instance] _SolverOptions._feedback = feedback,qutip,qutip,v5.0.4,,,,,,,,,_SolverOptions,__init__,"(
        self, default, feedback=None, name="""", doc="""", /, **kwargs
    )",self._feedback = feedback,self._feedback = feedback,,,,,,
options.py,python,class_field,,,Class field: [instance] _SolverOptions._name = name,qutip,qutip,v5.0.4,,,,,,,,,_SolverOptions,__init__,"(
        self, default, feedback=None, name="""", doc="""", /, **kwargs
    )",self._name = name,self._name = name,,,,,,
options.py,python,class_method,,,"Class method: _SolverOptions.__init__(
        self, default, feedback=None, name="""", doc="""", /, **kwargs
    )",qutip,qutip,v5.0.4,,,,,,,,,_SolverOptions,__init__,"(
        self, default, feedback=None, name="""", doc="""", /, **kwargs
    )",,,,,,,,
options.py,python,class_method,,,"Class method: _SolverOptions.__setitem__(self, key, val)",qutip,qutip,v5.0.4,,,,,,,,,_SolverOptions,__setitem__,"(self, key, val)",,,,,,,,
options.py,python,class_method,,,"Class method: _SolverOptions.__delitem__(self, key)",qutip,qutip,v5.0.4,,,,,,,,,_SolverOptions,__delitem__,"(self, key)",,,,,,,,
options.py,python,class_method,,,Class method: _SolverOptions.copy(self),qutip,qutip,v5.0.4,,,,,,,,,_SolverOptions,copy,(self),,,,,,,,
options.py,python,class_method,,,Class method: _SolverOptions.__str__(self),qutip,qutip,v5.0.4,,,,,,,,,_SolverOptions,__str__,(self),,,,,,,,
options.py,python,class_method,,,"Class method: [classmethod] _SolverOptions._from_reduced(cls, default, feedback, name, doc, keys, args)",qutip,qutip,v5.0.4,,,,,,,,,_SolverOptions,_from_reduced,"(cls, default, feedback, name, doc, keys, args)",,,,classmethod,,,,
options.py,python,class_method,,,Class method: _SolverOptions.__reduce__(self),qutip,qutip,v5.0.4,,,,,,,,,_SolverOptions,__reduce__,(self),,,,,,,,
options.py,python,class,,,Class: _SolverOptions(dict),qutip,qutip,v5.0.4,,,,,,,,,_SolverOptions,,,,,(dict),,,,,
options.py,python,function,SolverOptions,"(*args, **kwargs)","Function: SolverOptions(*args, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
options.py,python,function,Options,(**kwargs),Function: Options(**kwargs),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
options.py,python,constant,,,"Constant: __all__ = [""Options"", ""SolverOptions""]",qutip,qutip,v5.0.4,,,,,"__all__ = [""Options"", ""SolverOptions""]",__all__,"[""Options"", ""SolverOptions""]",,,,,,,,,,,,
options.py,python,import,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,warnings,,,,,,,,,,,,,,,,,
options.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
options.py,python,,,,Directory: qutip\solver\options.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
parallel.py,python,class_field,,,Class field: [instance] MapExceptions.errors = errors,qutip,qutip,v5.0.4,,,,,,,,,MapExceptions,__init__,"(self, msg, errors, results)",self.errors = errors,self.errors = errors,,,,,,
parallel.py,python,class_field,,,Class field: [instance] MapExceptions.results = results,qutip,qutip,v5.0.4,,,,,,,,,MapExceptions,__init__,"(self, msg, errors, results)",self.results = results,self.results = results,,,,,,
parallel.py,python,class_method,,,"Class method: MapExceptions.__init__(self, msg, errors, results)",qutip,qutip,v5.0.4,,,,,,,,,MapExceptions,__init__,"(self, msg, errors, results)",,,,,,,,
parallel.py,python,class,,,Class: MapExceptions(Exception),qutip,qutip,v5.0.4,,,,,,,,,MapExceptions,,,,,(Exception),,,,,
parallel.py,python,function,_read_map_kw,(options),Function: _read_map_kw(options),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
parallel.py,python,function,serial_map,"(task, values, task_args=None, task_kwargs=None,
               reduce_func=None, map_kw=None,
               progress_bar=None, progress_bar_kwargs={})","Function: serial_map(task, values, task_args=None, task_kwargs=None,
               reduce_func=None, map_kw=None,
               progress_bar=None, progress_bar_kwargs={})",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
parallel.py,python,function,_generic_pmap,"(task, values, task_args, task_kwargs, reduce_func,
                  timeout, fail_fast, num_workers,
                  progress_bar, progress_bar_kwargs,
                  setup_executor, extract_result, shutdown_executor)","Function: _generic_pmap(task, values, task_args, task_kwargs, reduce_func,
                  timeout, fail_fast, num_workers,
                  progress_bar, progress_bar_kwargs,
                  setup_executor, extract_result, shutdown_executor)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
parallel.py,python,function,parallel_map,"(task, values, task_args=None, task_kwargs=None,
                 reduce_func=None, map_kw=None,
                 progress_bar=None, progress_bar_kwargs={})","Function: parallel_map(task, values, task_args=None, task_kwargs=None,
                 reduce_func=None, map_kw=None,
                 progress_bar=None, progress_bar_kwargs={})",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
parallel.py,python,function,loky_pmap,"(task, values, task_args=None, task_kwargs=None,
              reduce_func=None, map_kw=None,
              progress_bar=None, progress_bar_kwargs={})","Function: loky_pmap(task, values, task_args=None, task_kwargs=None,
              reduce_func=None, map_kw=None,
              progress_bar=None, progress_bar_kwargs={})",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
parallel.py,python,function,mpi_pmap,"(task, values, task_args=None, task_kwargs=None,
             reduce_func=None, map_kw=None,
             progress_bar=None, progress_bar_kwargs={})","Function: mpi_pmap(task, values, task_args=None, task_kwargs=None,
             reduce_func=None, map_kw=None,
             progress_bar=None, progress_bar_kwargs={})",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
parallel.py,python,function,_get_map,(options),Function: _get_map(options),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
parallel.py,python,constant,,,"Constant: __all__ = ['parallel_map', 'serial_map', 'loky_pmap', 'mpi_pmap']",qutip,qutip,v5.0.4,,,,,"__all__ = ['parallel_map', 'serial_map', 'loky_pmap', 'mpi_pmap']",__all__,"['parallel_map', 'serial_map', 'loky_pmap', 'mpi_pmap']",,,,,,,,,,,,
parallel.py,python,constant,,,"Constant: default_map_kw = {
    'timeout': threading.TIMEOUT_MAX,
    'num_cpus': available_cpu_count(),
    'fail_fast': True,
}",qutip,qutip,v5.0.4,,,,,"default_map_kw = {
    'timeout': threading.TIMEOUT_MAX,
    'num_cpus': available_cpu_count(),
    'fail_fast': True,
}",default_map_kw,"{
    'timeout': threading.TIMEOUT_MAX,
    'num_cpus': available_cpu_count(),
    'fail_fast': True,
}",,,,,,,,,,,,
parallel.py,python,constant,,,"Constant: _maps = {
    ""parallel_map"": parallel_map,
    ""parallel"": parallel_map,
    ""serial_map"": serial_map,
    ""serial"": serial_map,
    ""loky"": loky_pmap,
    ""mpi"": mpi_pmap
}",qutip,qutip,v5.0.4,,,,,"_maps = {
    ""parallel_map"": parallel_map,
    ""parallel"": parallel_map,
    ""serial_map"": serial_map,
    ""serial"": serial_map,
    ""loky"": loky_pmap,
    ""mpi"": mpi_pmap
}",_maps,"{
    ""parallel_map"": parallel_map,
    ""parallel"": parallel_map,
    ""serial_map"": serial_map,
    ""serial"": serial_map,
    ""loky"": loky_pmap,
    ""mpi"": mpi_pmap
}",,,,,,,,,,,,
parallel.py,python,import,,,Import: multiprocessing,qutip,qutip,v5.0.4,import multiprocessing,multiprocessing,,,,,,,,,,,,,,,,,
parallel.py,python,import,,,Import: os,qutip,qutip,v5.0.4,import os,os,,,,,,,,,,,,,,,,,
parallel.py,python,import,,,Import: sys,qutip,qutip,v5.0.4,import sys,sys,,,,,,,,,,,,,,,,,
parallel.py,python,import,,,Import: time,qutip,qutip,v5.0.4,import time,time,,,,,,,,,,,,,,,,,
parallel.py,python,import,,,Import: threading,qutip,qutip,v5.0.4,import threading,threading,,,,,,,,,,,,,,,,,
parallel.py,python,import,,,Import: concurrent.futures,qutip,qutip,v5.0.4,import concurrent.futures,concurrent.futures,,,,,,,,,,,,,,,,,
parallel.py,python,import,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,warnings,,,,,,,,,,,,,,,,,
parallel.py,python,local_import,,,Import: progress_bars from qutip.ui.progressbar,qutip,qutip,v5.0.4,from qutip.ui.progressbar import progress_bars,progress_bars,qutip.ui.progressbar,qutip.ui.progressbar,,,,,,,,,,,,,,,
parallel.py,python,local_import,,,Import: available_cpu_count from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import available_cpu_count,available_cpu_count,qutip.settings,qutip.settings,,,,,,,,,,,,,,,
parallel.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
parallel.py,python,,,,Directory: qutip\solver\parallel.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
propagator.py,python,class_field,,,Class field: [instance] Propagator.times = [0],qutip,qutip,v5.0.4,,,,,,,,,Propagator,__init__,"(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)",self.times = [0],self.times = [0],,,,,,
propagator.py,python,class_field,,,Class field: [instance] Propagator.invs = [None],qutip,qutip,v5.0.4,,,,,,,,,Propagator,__init__,"(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)",self.invs = [None],self.invs = [None],,,,,,
propagator.py,python,class_field,,,Class field: [instance] Propagator.props = [qeye(solver.sys_dims)],qutip,qutip,v5.0.4,,,,,,,,,Propagator,__init__,"(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)",self.props = [qeye(self.solver.sys_dims)],self.props = [qeye(self.solver.sys_dims)],,,,,,
propagator.py,python,class_field,,,"Class field: [instance] Propagator.solver.start(props[0], times[0])",qutip,qutip,v5.0.4,,,,,,,,,Propagator,__init__,"(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)","self.solver.start(self.props[0], self.times[0])","self.solver.start(self.props[0], self.times[0])",,,,,,
propagator.py,python,class_field,,,Class field: [instance] Propagator.cte = solver.rhs.isconstant,qutip,qutip,v5.0.4,,,,,,,,,Propagator,__init__,"(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)",self.cte = self.solver.rhs.isconstant,self.cte = self.solver.rhs.isconstant,,,,,,
propagator.py,python,class_field,,,Class field: [instance] Propagator.unitary = not H_0.issuper and H_0.isherm,qutip,qutip,v5.0.4,,,,,,,,,Propagator,__init__,"(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)",self.unitary = not H_0.issuper and H_0.isherm,self.unitary = not H_0.issuper and H_0.isherm,,,,,,
propagator.py,python,class_field,,,Class field: [instance] Propagator.args = args,qutip,qutip,v5.0.4,,,,,,,,,Propagator,__init__,"(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)",self.args = args,self.args = args,,,,,,
propagator.py,python,class_field,,,"Class field: [instance] Propagator.memoize = max(3, int(memoize))",qutip,qutip,v5.0.4,,,,,,,,,Propagator,__init__,"(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)","self.memoize = max(3, int(memoize))","self.memoize = max(3, int(memoize))",,,,,,
propagator.py,python,class_field,,,Class field: [instance] Propagator.tol = tol,qutip,qutip,v5.0.4,,,,,,,,,Propagator,__init__,"(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)",self.tol = tol,self.tol = tol,,,,,,
propagator.py,python,class_method,,,"Class method: Propagator.__init__(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)",qutip,qutip,v5.0.4,,,,,,,,,Propagator,__init__,"(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)",,,,,,,,
propagator.py,python,class_method,,,"Class method: Propagator._lookup_or_compute(self, t)",qutip,qutip,v5.0.4,,,,,,,,,Propagator,_lookup_or_compute,"(self, t)",,,,,,,,
propagator.py,python,class_method,,,"Class method: Propagator.__call__(self, t, t_start=0, **args)",qutip,qutip,v5.0.4,,,,,,,,,Propagator,__call__,"(self, t, t_start=0, **args)",,,,,,,,
propagator.py,python,class_method,,,"Class method: Propagator.inv(self, t, **args)",qutip,qutip,v5.0.4,,,,,,,,,Propagator,inv,"(self, t, **args)",,,,,,,,
propagator.py,python,class_method,,,"Class method: Propagator._compute(self, t, idx)",qutip,qutip,v5.0.4,,,,,,,,,Propagator,_compute,"(self, t, idx)",,,,,,,,
propagator.py,python,class_method,,,"Class method: Propagator._inv(self, U)",qutip,qutip,v5.0.4,,,,,,,,,Propagator,_inv,"(self, U)",,,,,,,,
propagator.py,python,class_method,,,"Class method: Propagator._insert(self, t, U, idx)",qutip,qutip,v5.0.4,,,,,,,,,Propagator,_insert,"(self, t, U, idx)",,,,,,,,
propagator.py,python,class,,,Class: Propagator,qutip,qutip,v5.0.4,,,,,,,,,Propagator,,,,,,,,,,
propagator.py,python,function,propagator,"(H, t, c_ops=(), args=None, options=None, **kwargs)","Function: propagator(H, t, c_ops=(), args=None, options=None, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
propagator.py,python,function,propagator_steadystate,(U),Function: propagator_steadystate(U),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
propagator.py,python,constant,,,"Constant: __all__ = ['Propagator', 'propagator', 'propagator_steadystate']",qutip,qutip,v5.0.4,,,,,"__all__ = ['Propagator', 'propagator', 'propagator_steadystate']",__all__,"['Propagator', 'propagator', 'propagator_steadystate']",,,,,,,,,,,,
propagator.py,python,import,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,numbers,,,,,,,,,,,,,,,,,
propagator.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
propagator.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
propagator.py,python,,,,Directory: qutip\solver\propagator.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
result.py,python,class_field,,,Class field: [instance] _QobjExpectEop.op = op,qutip,qutip,v5.0.4,,,,,,,,,_QobjExpectEop,__init__,"(self, op)",self.op = op,self.op = op,,,,,,
result.py,python,class_field,,,Class field: [instance] ExpectOp.op = op,qutip,qutip,v5.0.4,,,,,,,,,ExpectOp,__init__,"(self, op, f, append)",self.op = op,self.op = op,,,,,,
result.py,python,class_field,,,Class field: [instance] ExpectOp._f = f,qutip,qutip,v5.0.4,,,,,,,,,ExpectOp,__init__,"(self, op, f, append)",self._f = f,self._f = f,,,,,,
result.py,python,class_field,,,Class field: [instance] ExpectOp._append = append,qutip,qutip,v5.0.4,,,,,,,,,ExpectOp,__init__,"(self, op, f, append)",self._append = append,self._append = append,,,,,,
result.py,python,class_field,,,Class field: [instance] _BaseResult.solver = solver,qutip,qutip,v5.0.4,,,,,,,,,_BaseResult,__init__,"(self, options, *, solver=None, stats=None)",self.solver = solver,self.solver = solver,,,,,,
result.py,python,class_field,,,Class field: [instance] _BaseResult.stats = stats,qutip,qutip,v5.0.4,,,,,,,,,_BaseResult,__init__,"(self, options, *, solver=None, stats=None)",self.stats = stats,self.stats = stats,,,,,,
result.py,python,class_field,,,Class field: [instance] _BaseResult._state_processors = [],qutip,qutip,v5.0.4,,,,,,,,,_BaseResult,__init__,"(self, options, *, solver=None, stats=None)",self._state_processors = [],self._state_processors = [],,,,,,
result.py,python,class_field,,,Class field: [instance] _BaseResult._state_processors_require_copy = False,qutip,qutip,v5.0.4,,,,,,,,,_BaseResult,__init__,"(self, options, *, solver=None, stats=None)",self._state_processors_require_copy = False,self._state_processors_require_copy = False,,,,,,
result.py,python,class_field,,,Class field: [instance] _BaseResult.options = options_copy,qutip,qutip,v5.0.4,,,,,,,,,_BaseResult,__init__,"(self, options, *, solver=None, stats=None)",self.options = options_copy,self.options = options_copy,,,,,,
result.py,python,class_field,,,Class field: ResultOptions.store_states: bool,qutip,qutip,v5.0.4,,,,,,,,,ResultOptions,,,store_states: bool,,,,store_states,,,
result.py,python,class_field,,,Class field: ResultOptions.store_final_state: bool,qutip,qutip,v5.0.4,,,,,,,,,ResultOptions,,,store_final_state: bool,,,,store_final_state,,,
result.py,python,class_field,,,Class field: Result.options: ResultOptions,qutip,qutip,v5.0.4,,,,,,,,,Result,,,options: ResultOptions,,,,options,,,
result.py,python,class_field,,,Class field: [instance] Result.e_data = {k: [] for k in raw_ops},qutip,qutip,v5.0.4,,,,,,,,,Result,__init__,"(
        self,
        e_ops,
        options: ResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.e_data = {k: [] for k in raw_ops},self.e_data = {k: [] for k in raw_ops},,,,,,
result.py,python,class_field,,,Class field: [instance] Result.e_ops = {},qutip,qutip,v5.0.4,,,,,,,,,Result,__init__,"(
        self,
        e_ops,
        options: ResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.e_ops = {},self.e_ops = {},,,,,,
result.py,python,class_field,,,Class field: [instance] Result.times = [],qutip,qutip,v5.0.4,,,,,,,,,Result,__init__,"(
        self,
        e_ops,
        options: ResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.times = [],self.times = [],,,,,,
result.py,python,class_field,,,Class field: [instance] Result.states = [],qutip,qutip,v5.0.4,,,,,,,,,Result,__init__,"(
        self,
        e_ops,
        options: ResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.states = [],self.states = [],,,,,,
result.py,python,class_field,,,Class field: [instance] Result._final_state = None,qutip,qutip,v5.0.4,,,,,,,,,Result,__init__,"(
        self,
        e_ops,
        options: ResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self._final_state = None,self._final_state = None,,,,,,
result.py,python,class_field,,,Class field: [instance] Result._post_init(**kw),qutip,qutip,v5.0.4,,,,,,,,,Result,__init__,"(
        self,
        e_ops,
        options: ResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self._post_init(**kw),self._post_init(**kw),,,,,,
result.py,python,class_field,,,Class field: MultiTrajResultOptions.store_states: bool,qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResultOptions,,,store_states: bool,,,,store_states,,,
result.py,python,class_field,,,Class field: MultiTrajResultOptions.store_final_state: bool,qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResultOptions,,,store_final_state: bool,,,,store_final_state,,,
result.py,python,class_field,,,Class field: MultiTrajResultOptions.keep_runs_results: bool,qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResultOptions,,,keep_runs_results: bool,,,,keep_runs_results,,,
result.py,python,class_field,,,Class field: MultiTrajResult.options: MultiTrajResultOptions,qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,,,options: MultiTrajResultOptions,,,,options,,,
result.py,python,class_field,,,Class field: [instance] MultiTrajResult._raw_ops = _e_ops_to_dict(e_ops),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self._raw_ops = self._e_ops_to_dict(e_ops),self._raw_ops = self._e_ops_to_dict(e_ops),,,,,,
result.py,python,class_field,,,Class field: [instance] MultiTrajResult.times = [],qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.times = [],self.times = [],,,,,,
result.py,python,class_field,,,Class field: [instance] MultiTrajResult.trajectories = [],qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.trajectories = [],self.trajectories = [],,,,,,
result.py,python,class_field,,,Class field: [instance] MultiTrajResult.num_trajectories = 0,qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.num_trajectories = 0,self.num_trajectories = 0,,,,,,
result.py,python,class_field,,,Class field: [instance] MultiTrajResult.seeds = [],qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.seeds = [],self.seeds = [],,,,,,
result.py,python,class_field,,,Class field: [instance] MultiTrajResult._sum_states = None,qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self._sum_states = None,self._sum_states = None,,,,,,
result.py,python,class_field,,,Class field: [instance] MultiTrajResult._sum_final_states = None,qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self._sum_final_states = None,self._sum_final_states = None,,,,,,
result.py,python,class_field,,,Class field: [instance] MultiTrajResult._sum_expect = None,qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self._sum_expect = None,self._sum_expect = None,,,,,,
result.py,python,class_field,,,Class field: [instance] MultiTrajResult._sum2_expect = None,qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self._sum2_expect = None,self._sum2_expect = None,,,,,,
result.py,python,class_field,,,Class field: [instance] MultiTrajResult._target_tols = None,qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self._target_tols = None,self._target_tols = None,,,,,,
result.py,python,class_field,,,Class field: [instance] MultiTrajResult.average_e_data = {},qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.average_e_data = {},self.average_e_data = {},,,,,,
result.py,python,class_field,,,Class field: [instance] MultiTrajResult.std_e_data = {},qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.std_e_data = {},self.std_e_data = {},,,,,,
result.py,python,class_field,,,Class field: [instance] MultiTrajResult.runs_e_data = {},qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.runs_e_data = {},self.runs_e_data = {},,,,,,
result.py,python,class_field,,,Class field: [instance] MultiTrajResult._post_init(**kw),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self._post_init(**kw),self._post_init(**kw),,,,,,
result.py,python,class_field,,,Class field: [instance] McResultImprovedSampling._sum_expect_no_jump = None,qutip,qutip,v5.0.4,,,,,,,,,McResultImprovedSampling,__init__,"(self, e_ops, options, **kw)",self._sum_expect_no_jump = None,self._sum_expect_no_jump = None,,,,,,
result.py,python,class_field,,,Class field: [instance] McResultImprovedSampling._sum_expect_jump = None,qutip,qutip,v5.0.4,,,,,,,,,McResultImprovedSampling,__init__,"(self, e_ops, options, **kw)",self._sum_expect_jump = None,self._sum_expect_jump = None,,,,,,
result.py,python,class_field,,,Class field: [instance] McResultImprovedSampling._sum2_expect_no_jump = None,qutip,qutip,v5.0.4,,,,,,,,,McResultImprovedSampling,__init__,"(self, e_ops, options, **kw)",self._sum2_expect_no_jump = None,self._sum2_expect_no_jump = None,,,,,,
result.py,python,class_field,,,Class field: [instance] McResultImprovedSampling._sum2_expect_jump = None,qutip,qutip,v5.0.4,,,,,,,,,McResultImprovedSampling,__init__,"(self, e_ops, options, **kw)",self._sum2_expect_jump = None,self._sum2_expect_jump = None,,,,,,
result.py,python,class_field,,,Class field: [instance] McResultImprovedSampling._sum_states_no_jump = None,qutip,qutip,v5.0.4,,,,,,,,,McResultImprovedSampling,__init__,"(self, e_ops, options, **kw)",self._sum_states_no_jump = None,self._sum_states_no_jump = None,,,,,,
result.py,python,class_field,,,Class field: [instance] McResultImprovedSampling._sum_states_jump = None,qutip,qutip,v5.0.4,,,,,,,,,McResultImprovedSampling,__init__,"(self, e_ops, options, **kw)",self._sum_states_jump = None,self._sum_states_jump = None,,,,,,
result.py,python,class_field,,,Class field: [instance] McResultImprovedSampling._sum_final_states_no_jump = None,qutip,qutip,v5.0.4,,,,,,,,,McResultImprovedSampling,__init__,"(self, e_ops, options, **kw)",self._sum_final_states_no_jump = None,self._sum_final_states_no_jump = None,,,,,,
result.py,python,class_field,,,Class field: [instance] McResultImprovedSampling._sum_final_states_jump = None,qutip,qutip,v5.0.4,,,,,,,,,McResultImprovedSampling,__init__,"(self, e_ops, options, **kw)",self._sum_final_states_jump = None,self._sum_final_states_jump = None,,,,,,
result.py,python,class_field,,,Class field: [instance] McResultImprovedSampling.no_jump_prob = None,qutip,qutip,v5.0.4,,,,,,,,,McResultImprovedSampling,__init__,"(self, e_ops, options, **kw)",self.no_jump_prob = None,self.no_jump_prob = None,,,,,,
result.py,python,class_field,,,"Class field: [instance] NmmcTrajectoryResult._nm_solver = kwargs.pop(""__nm_solver"")",qutip,qutip,v5.0.4,,,,,,,,,NmmcTrajectoryResult,__init__,"(self, e_ops, options, *args, **kwargs)","self._nm_solver = kwargs.pop(""__nm_solver"")","self._nm_solver = kwargs.pop(""__nm_solver"")",,,,,,
result.py,python,class_field,,,Class field: [instance] NmmcTrajectoryResult.trace = [],qutip,qutip,v5.0.4,,,,,,,,,NmmcTrajectoryResult,__init__,"(self, e_ops, options, *args, **kwargs)",self.trace = [],self.trace = [],,,,,,
result.py,python,class_method,,,"Class method: _QobjExpectEop.__init__(self, op)",qutip,qutip,v5.0.4,,,,,,,,,_QobjExpectEop,__init__,"(self, op)",,,,,,,,
result.py,python,class_method,,,"Class method: _QobjExpectEop.__call__(self, t, state)",qutip,qutip,v5.0.4,,,,,,,,,_QobjExpectEop,__call__,"(self, t, state)",,,,,,,,
result.py,python,class_method,,,"Class method: ExpectOp.__init__(self, op, f, append)",qutip,qutip,v5.0.4,,,,,,,,,ExpectOp,__init__,"(self, op, f, append)",,,,,,,,
result.py,python,class_method,,,"Class method: ExpectOp.__call__(self, t, state)",qutip,qutip,v5.0.4,,,,,,,,,ExpectOp,__call__,"(self, t, state)",,,,,,,,
result.py,python,class_method,,,"Class method: ExpectOp._store(self, t, state)",qutip,qutip,v5.0.4,,,,,,,,,ExpectOp,_store,"(self, t, state)",,,,,,,,
result.py,python,class_method,,,"Class method: _BaseResult.__init__(self, options, *, solver=None, stats=None)",qutip,qutip,v5.0.4,,,,,,,,,_BaseResult,__init__,"(self, options, *, solver=None, stats=None)",,,,,,,,
result.py,python,class_method,,,"Class method: _BaseResult._e_ops_to_dict(self, e_ops)",qutip,qutip,v5.0.4,,,,,,,,,_BaseResult,_e_ops_to_dict,"(self, e_ops)",,,,,,,,
result.py,python,class_method,,,"Class method: _BaseResult.add_processor(self, f, requires_copy=False)",qutip,qutip,v5.0.4,,,,,,,,,_BaseResult,add_processor,"(self, f, requires_copy=False)",,,,,,,,
result.py,python,class_method,,,"Class method: Result.__init__(
        self,
        e_ops,
        options: ResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",qutip,qutip,v5.0.4,,,,,,,,,Result,__init__,"(
        self,
        e_ops,
        options: ResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",,,,,,,,
result.py,python,class_method,,,"Class method: Result._e_op_func(self, e_op)",qutip,qutip,v5.0.4,,,,,,,,,Result,_e_op_func,"(self, e_op)",,,,,,,,
result.py,python,class_method,,,Class method: Result._post_init(self),qutip,qutip,v5.0.4,,,,,,,,,Result,_post_init,(self),,,,,,,,
result.py,python,class_method,,,"Class method: Result._store_state(self, t, state)",qutip,qutip,v5.0.4,,,,,,,,,Result,_store_state,"(self, t, state)",,,,,,,,
result.py,python,class_method,,,"Class method: Result._store_final_state(self, t, state)",qutip,qutip,v5.0.4,,,,,,,,,Result,_store_final_state,"(self, t, state)",,,,,,,,
result.py,python,class_method,,,"Class method: Result._pre_copy(self, state)",qutip,qutip,v5.0.4,,,,,,,,,Result,_pre_copy,"(self, state)",,,,,,,,
result.py,python,class_method,,,"Class method: Result.add(self, t, state)",qutip,qutip,v5.0.4,,,,,,,,,Result,add,"(self, t, state)",,,,,,,,
result.py,python,class_method,,,Class method: Result.__repr__(self),qutip,qutip,v5.0.4,,,,,,,,,Result,__repr__,(self),,,,,,,,
result.py,python,class_method,,,Class method: [property] Result.expect(self),qutip,qutip,v5.0.4,,,,,,,,,Result,expect,(self),,,,property,,,,
result.py,python,class_method,,,Class method: [property] Result.final_state(self),qutip,qutip,v5.0.4,,,,,,,,,Result,final_state,(self),,,,property,,,,
result.py,python,class_method,,,"Class method: MultiTrajResult.__init__(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",,,,,,,,
result.py,python,class_method,,,Class method: [property] MultiTrajResult._store_average_density_matrices(self) -> bool,qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,_store_average_density_matrices,(self),,,,property,,,,bool
result.py,python,class_method,,,Class method: [property] MultiTrajResult._store_final_density_matrix(self) -> bool,qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,_store_final_density_matrix,(self),,,,property,,,,bool
result.py,python,class_method,,,Class method: [staticmethod] MultiTrajResult._to_dm(state),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,_to_dm,(state),,,,staticmethod,,,,
result.py,python,class_method,,,"Class method: MultiTrajResult._add_first_traj(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,_add_first_traj,"(self, trajectory)",,,,,,,,
result.py,python,class_method,,,"Class method: MultiTrajResult._store_trajectory(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,_store_trajectory,"(self, trajectory)",,,,,,,,
result.py,python,class_method,,,"Class method: MultiTrajResult._reduce_states(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,_reduce_states,"(self, trajectory)",,,,,,,,
result.py,python,class_method,,,"Class method: MultiTrajResult._reduce_final_state(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,_reduce_final_state,"(self, trajectory)",,,,,,,,
result.py,python,class_method,,,"Class method: MultiTrajResult._reduce_expect(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,_reduce_expect,"(self, trajectory)",,,,,,,,
result.py,python,class_method,,,"Class method: MultiTrajResult._increment_traj(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,_increment_traj,"(self, trajectory)",,,,,,,,
result.py,python,class_method,,,Class method: MultiTrajResult._no_end(self),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,_no_end,(self),,,,,,,,
result.py,python,class_method,,,Class method: MultiTrajResult._fixed_end(self),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,_fixed_end,(self),,,,,,,,
result.py,python,class_method,,,Class method: MultiTrajResult._average_computer(self),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,_average_computer,(self),,,,,,,,
result.py,python,class_method,,,Class method: MultiTrajResult._target_tolerance_end(self),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,_target_tolerance_end,(self),,,,,,,,
result.py,python,class_method,,,Class method: MultiTrajResult._post_init(self),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,_post_init,(self),,,,,,,,
result.py,python,class_method,,,"Class method: MultiTrajResult.add(self, trajectory_info)",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,add,"(self, trajectory_info)",,,,,,,,
result.py,python,class_method,,,"Class method: MultiTrajResult.add_end_condition(self, ntraj, target_tol=None)",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,add_end_condition,"(self, ntraj, target_tol=None)",,,,,,,,
result.py,python,class_method,,,Class method: [property] MultiTrajResult.runs_states(self),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,runs_states,(self),,,,property,,,,
result.py,python,class_method,,,Class method: [property] MultiTrajResult.average_states(self),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,average_states,(self),,,,property,,,,
result.py,python,class_method,,,Class method: [property] MultiTrajResult.states(self),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,states,(self),,,,property,,,,
result.py,python,class_method,,,Class method: [property] MultiTrajResult.runs_final_states(self),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,runs_final_states,(self),,,,property,,,,
result.py,python,class_method,,,Class method: [property] MultiTrajResult.average_final_state(self),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,average_final_state,(self),,,,property,,,,
result.py,python,class_method,,,Class method: [property] MultiTrajResult.final_state(self),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,final_state,(self),,,,property,,,,
result.py,python,class_method,,,Class method: [property] MultiTrajResult.average_expect(self),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,average_expect,(self),,,,property,,,,
result.py,python,class_method,,,Class method: [property] MultiTrajResult.std_expect(self),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,std_expect,(self),,,,property,,,,
result.py,python,class_method,,,Class method: [property] MultiTrajResult.runs_expect(self),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,runs_expect,(self),,,,property,,,,
result.py,python,class_method,,,Class method: [property] MultiTrajResult.expect(self),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,expect,(self),,,,property,,,,
result.py,python,class_method,,,Class method: [property] MultiTrajResult.e_data(self),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,e_data,(self),,,,property,,,,
result.py,python,class_method,,,"Class method: MultiTrajResult.steady_state(self, N=0)",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,steady_state,"(self, N=0)",,,,,,,,
result.py,python,class_method,,,Class method: MultiTrajResult.__repr__(self),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,__repr__,(self),,,,,,,,
result.py,python,class_method,,,"Class method: MultiTrajResult.__add__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,__add__,"(self, other)",,,,,,,,
result.py,python,class_method,,,"Class method: McTrajectoryResult.__init__(self, e_ops, options, *args, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,McTrajectoryResult,__init__,"(self, e_ops, options, *args, **kwargs)",,,,,,,,
result.py,python,class_method,,,"Class method: McResult._add_collapse(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,,,McResult,_add_collapse,"(self, trajectory)",,,,,,,,
result.py,python,class_method,,,Class method: McResult._post_init(self),qutip,qutip,v5.0.4,,,,,,,,,McResult,_post_init,(self),,,,,,,,
result.py,python,class_method,,,Class method: [property] McResult.col_times(self),qutip,qutip,v5.0.4,,,,,,,,,McResult,col_times,(self),,,,property,,,,
result.py,python,class_method,,,Class method: [property] McResult.col_which(self),qutip,qutip,v5.0.4,,,,,,,,,McResult,col_which,(self),,,,property,,,,
result.py,python,class_method,,,Class method: [property] McResult.photocurrent(self),qutip,qutip,v5.0.4,,,,,,,,,McResult,photocurrent,(self),,,,property,,,,
result.py,python,class_method,,,Class method: [property] McResult.runs_photocurrent(self),qutip,qutip,v5.0.4,,,,,,,,,McResult,runs_photocurrent,(self),,,,property,,,,
result.py,python,class_method,,,"Class method: McResultImprovedSampling.__init__(self, e_ops, options, **kw)",qutip,qutip,v5.0.4,,,,,,,,,McResultImprovedSampling,__init__,"(self, e_ops, options, **kw)",,,,,,,,
result.py,python,class_method,,,"Class method: McResultImprovedSampling._reduce_states(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,,,McResultImprovedSampling,_reduce_states,"(self, trajectory)",,,,,,,,
result.py,python,class_method,,,"Class method: McResultImprovedSampling._reduce_final_state(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,,,McResultImprovedSampling,_reduce_final_state,"(self, trajectory)",,,,,,,,
result.py,python,class_method,,,Class method: McResultImprovedSampling._average_computer(self),qutip,qutip,v5.0.4,,,,,,,,,McResultImprovedSampling,_average_computer,(self),,,,,,,,
result.py,python,class_method,,,"Class method: McResultImprovedSampling._add_first_traj(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,,,McResultImprovedSampling,_add_first_traj,"(self, trajectory)",,,,,,,,
result.py,python,class_method,,,"Class method: McResultImprovedSampling._reduce_expect(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,,,McResultImprovedSampling,_reduce_expect,"(self, trajectory)",,,,,,,,
result.py,python,class_method,,,Class method: [property] McResultImprovedSampling.average_states(self),qutip,qutip,v5.0.4,,,,,,,,,McResultImprovedSampling,average_states,(self),,,,property,,,,
result.py,python,class_method,,,Class method: [property] McResultImprovedSampling.average_final_state(self),qutip,qutip,v5.0.4,,,,,,,,,McResultImprovedSampling,average_final_state,(self),,,,property,,,,
result.py,python,class_method,,,"Class method: McResultImprovedSampling.__add__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,McResultImprovedSampling,__add__,"(self, other)",,,,,,,,
result.py,python,class_method,,,Class method: [property] McResultImprovedSampling.photocurrent(self),qutip,qutip,v5.0.4,,,,,,,,,McResultImprovedSampling,photocurrent,(self),,,,property,,,,
result.py,python,class_method,,,"Class method: NmmcTrajectoryResult.__init__(self, e_ops, options, *args, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,NmmcTrajectoryResult,__init__,"(self, e_ops, options, *args, **kwargs)",,,,,,,,
result.py,python,class_method,,,"Class method: NmmcTrajectoryResult.add(self, t, state)",qutip,qutip,v5.0.4,,,,,,,,,NmmcTrajectoryResult,add,"(self, t, state)",,,,,,,,
result.py,python,class_method,,,Class method: NmmcResult._post_init(self),qutip,qutip,v5.0.4,,,,,,,,,NmmcResult,_post_init,(self),,,,,,,,
result.py,python,class_method,,,"Class method: NmmcResult._add_first_traj(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,,,NmmcResult,_add_first_traj,"(self, trajectory)",,,,,,,,
result.py,python,class_method,,,"Class method: NmmcResult._add_trace(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,,,NmmcResult,_add_trace,"(self, trajectory)",,,,,,,,
result.py,python,class_method,,,Class method: [property] NmmcResult.trace(self),qutip,qutip,v5.0.4,,,,,,,,,NmmcResult,trace,(self),,,,property,,,,
result.py,python,class,,,Class: _QobjExpectEop,qutip,qutip,v5.0.4,,,,,,,,,_QobjExpectEop,,,,,,,,,,
result.py,python,class,,,Class: ExpectOp,qutip,qutip,v5.0.4,,,,,,,,,ExpectOp,,,,,,,,,,
result.py,python,class,,,Class: _BaseResult,qutip,qutip,v5.0.4,,,,,,,,,_BaseResult,,,,,,,,,,
result.py,python,class,,,Class: ResultOptions(TypedDict),qutip,qutip,v5.0.4,,,,,,,,,ResultOptions,,,,,(TypedDict),,,,,
result.py,python,class,,,Class: Result(_BaseResult),qutip,qutip,v5.0.4,,,,,,,,,Result,,,,,(_BaseResult),,,,,
result.py,python,class,,,Class: MultiTrajResultOptions(TypedDict),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResultOptions,,,,,(TypedDict),,,,,
result.py,python,class,,,Class: MultiTrajResult(_BaseResult),qutip,qutip,v5.0.4,,,,,,,,,MultiTrajResult,,,,,(_BaseResult),,,,,
result.py,python,class,,,Class: McTrajectoryResult(Result),qutip,qutip,v5.0.4,,,,,,,,,McTrajectoryResult,,,,,(Result),,,,,
result.py,python,class,,,Class: McResult(MultiTrajResult),qutip,qutip,v5.0.4,,,,,,,,,McResult,,,,,(MultiTrajResult),,,,,
result.py,python,class,,,"Class: McResultImprovedSampling(McResult, MultiTrajResult)",qutip,qutip,v5.0.4,,,,,,,,,McResultImprovedSampling,,,,,"(McResult, MultiTrajResult)",,,,,
result.py,python,class,,,Class: NmmcTrajectoryResult(McTrajectoryResult),qutip,qutip,v5.0.4,,,,,,,,,NmmcTrajectoryResult,,,,,(McTrajectoryResult),,,,,
result.py,python,class,,,Class: NmmcResult(McResult),qutip,qutip,v5.0.4,,,,,,,,,NmmcResult,,,,,(McResult),,,,,
result.py,python,constant,,,"Constant: __all__ = [
    ""Result"",
    ""MultiTrajResult"",
    ""McResult"",
    ""NmmcResult"",
    ""McTrajectoryResult"",
    ""McResultImprovedSampling"",
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    ""Result"",
    ""MultiTrajResult"",
    ""McResult"",
    ""NmmcResult"",
    ""McTrajectoryResult"",
    ""McResultImprovedSampling"",
]",__all__,"[
    ""Result"",
    ""MultiTrajResult"",
    ""McResult"",
    ""NmmcResult"",
    ""McTrajectoryResult"",
    ""McResultImprovedSampling"",
]",,,,,,,,,,,,
result.py,python,import,,,Import: TypedDict from typing,qutip,qutip,v5.0.4,from typing import TypedDict,TypedDict,typing,,,,,,,,,,,,,,,,
result.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
result.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
result.py,python,,,,Directory: qutip\solver\result.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
scattering.py,python,function,set_partition,"(collection, num_sets)","Function: set_partition(collection, num_sets)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
scattering.py,python,function,photon_scattering_amplitude,"(propagator, c_ops, tlist, taus, psi, psit)","Function: photon_scattering_amplitude(propagator, c_ops, tlist, taus, psi, psit)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
scattering.py,python,function,_temporal_basis_idx,"(waveguide_emission_indices, n_time_bins)","Function: _temporal_basis_idx(waveguide_emission_indices, n_time_bins)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
scattering.py,python,function,_temporal_basis_dims,"(waveguide_emission_indices, n_time_bins,
                         n_emissions=None)","Function: _temporal_basis_dims(waveguide_emission_indices, n_time_bins,
                         n_emissions=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
scattering.py,python,function,temporal_basis_vector,"(waveguide_emission_indices, n_time_bins)","Function: temporal_basis_vector(waveguide_emission_indices, n_time_bins)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
scattering.py,python,function,_temporal_scattered_matrix,"(H, psi0, n_emissions, c_ops, tlist,
                               system_zero_state=None,
                               construct_effective_hamiltonian=True)","Function: _temporal_scattered_matrix(H, psi0, n_emissions, c_ops, tlist,
                               system_zero_state=None,
                               construct_effective_hamiltonian=True)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
scattering.py,python,function,temporal_scattered_state,"(H, psi0, n_emissions, c_ops, tlist,
                             system_zero_state=None,
                             construct_effective_hamiltonian=True)","Function: temporal_scattered_state(H, psi0, n_emissions, c_ops, tlist,
                             system_zero_state=None,
                             construct_effective_hamiltonian=True)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
scattering.py,python,function,scattering_probability,"(H, psi0, n_emissions, c_ops, tlist,
                           system_zero_state=None,
                           construct_effective_hamiltonian=True)","Function: scattering_probability(H, psi0, n_emissions, c_ops, tlist,
                           system_zero_state=None,
                           construct_effective_hamiltonian=True)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
scattering.py,python,constant,,,"Constant: __all__ = ['temporal_basis_vector',
           'temporal_scattered_state',
           'scattering_probability']",qutip,qutip,v5.0.4,,,,,"__all__ = ['temporal_basis_vector',
           'temporal_scattered_state',
           'scattering_probability']",__all__,"['temporal_basis_vector',
           'temporal_scattered_state',
           'scattering_probability']",,,,,,,,,,,,
scattering.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
scattering.py,python,import,,,Import: product from itertools,qutip,qutip,v5.0.4,"from itertools import product, combinations_with_replacement",product,itertools,,,,,,,,,,,,,,,,
scattering.py,python,import,,,Import: combinations_with_replacement from itertools,qutip,qutip,v5.0.4,"from itertools import product, combinations_with_replacement",combinations_with_replacement,itertools,,,,,,,,,,,,,,,,
scattering.py,python,local_import,,,Import: trapezoid from scipy.integrate,qutip,qutip,v5.0.4,from scipy.integrate import trapezoid,trapezoid,scipy.integrate,scipy.integrate,,,,,,,,,,,,,,,
scattering.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
scattering.py,python,,,,Directory: qutip\solver\scattering.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
sesolve.py,python,class_field,,,"Class field: SESolver.name = ""sesolve""",qutip,qutip,v5.0.4,,,,,,,,,SESolver,,,"name = ""sesolve""",,,,name,"""sesolve""",,
sesolve.py,python,class_field,,,Class field: SESolver._avail_integrators = {},qutip,qutip,v5.0.4,,,,,,,,,SESolver,,,_avail_integrators = {},,,,_avail_integrators,{},,
sesolve.py,python,class_field,,,"Class field: SESolver.solver_options = {
        ""progress_bar"": """",
        ""progress_kwargs"": {""chunk_size"":10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        'method': 'adams',
    }",qutip,qutip,v5.0.4,,,,,,,,,SESolver,,,"solver_options = {
        ""progress_bar"": """",
        ""progress_kwargs"": {""chunk_size"":10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        'method': 'adams',
    }",,,,solver_options,"{
        ""progress_bar"": """",
        ""progress_kwargs"": {""chunk_size"":10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        'method': 'adams',
    }",,
sesolve.py,python,class_method,,,"Class method: SESolver.__init__(self, H, *, options=None)",qutip,qutip,v5.0.4,,,,,,,,,SESolver,__init__,"(self, H, *, options=None)",,,,,,,,
sesolve.py,python,class_method,,,Class method: SESolver._initialize_stats(self),qutip,qutip,v5.0.4,,,,,,,,,SESolver,_initialize_stats,(self),,,,,,,,
sesolve.py,python,class_method,,,Class method: [property] SESolver.options(self),qutip,qutip,v5.0.4,,,,,,,,,SESolver,options,(self),,,,property,,,,
sesolve.py,python,class_method,,,"Class method: [options.setter] SESolver.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,,,SESolver,options,"(self, new_options)",,,,options.setter,,,,
sesolve.py,python,class_method,,,"Class method: [classmethod] SESolver.StateFeedback(cls, default=None, raw_data=False, prop=False)",qutip,qutip,v5.0.4,,,,,,,,,SESolver,StateFeedback,"(cls, default=None, raw_data=False, prop=False)",,,,classmethod,,,,
sesolve.py,python,class,,,Class: SESolver(Solver),qutip,qutip,v5.0.4,,,,,,,,,SESolver,,,,,(Solver),,,,,
sesolve.py,python,function,sesolve,"(H, psi0, tlist, e_ops=None, args=None, options=None, **kwargs)","Function: sesolve(H, psi0, tlist, e_ops=None, args=None, options=None, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
sesolve.py,python,constant,,,"Constant: __all__ = ['sesolve', 'SESolver']",qutip,qutip,v5.0.4,,,,,"__all__ = ['sesolve', 'SESolver']",__all__,"['sesolve', 'SESolver']",,,,,,,,,,,,
sesolve.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
sesolve.py,python,import,,,Import: time from time,qutip,qutip,v5.0.4,from time import time,time,time,,,,,,,,,,,,,,,,
sesolve.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
sesolve.py,python,,,,Directory: qutip\solver\sesolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
solver_base.py,python,class_field,,,"Class field: Solver.name = """"",qutip,qutip,v5.0.4,,,,,,,,,Solver,,,"name = """"",,,,name,"""""",,
solver_base.py,python,class_field,,,Class field: Solver._integrator = None,qutip,qutip,v5.0.4,,,,,,,,,Solver,,,_integrator = None,,,,_integrator,None,,
solver_base.py,python,class_field,,,Class field: Solver._avail_integrators = {},qutip,qutip,v5.0.4,,,,,,,,,Solver,,,_avail_integrators = {},,,,_avail_integrators,{},,
solver_base.py,python,class_field,,,"Class field: Solver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        ""method"": ""adams"",
    }",qutip,qutip,v5.0.4,,,,,,,,,Solver,,,"solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        ""method"": ""adams"",
    }",,,,solver_options,"{
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        ""method"": ""adams"",
    }",,
solver_base.py,python,class_field,,,Class field: Solver._resultclass = Result,qutip,qutip,v5.0.4,,,,,,,,,Solver,,,_resultclass = Result,,,,_resultclass,Result,,
solver_base.py,python,class_field,,,Class field: [instance] Solver.options = options,qutip,qutip,v5.0.4,,,,,,,,,Solver,__init__,"(self, rhs, *, options=None)",self.options = options,self.options = options,,,,,,
solver_base.py,python,class_field,,,Class field: [instance] Solver._integrator = _get_integrator(),qutip,qutip,v5.0.4,,,,,,,,,Solver,__init__,"(self, rhs, *, options=None)",self._integrator = self._get_integrator(),self._integrator = self._get_integrator(),,,,,,
solver_base.py,python,class_field,,,Class field: [instance] Solver._state_metadata = {},qutip,qutip,v5.0.4,,,,,,,,,Solver,__init__,"(self, rhs, *, options=None)",self._state_metadata = {},self._state_metadata = {},,,,,,
solver_base.py,python,class_field,,,Class field: [instance] Solver.stats = _initialize_stats(),qutip,qutip,v5.0.4,,,,,,,,,Solver,__init__,"(self, rhs, *, options=None)",self.stats = self._initialize_stats(),self.stats = self._initialize_stats(),,,,,,
solver_base.py,python,class_field,,,"Class field: [instance] Solver.rhs._register_feedback({}, solver=name)",qutip,qutip,v5.0.4,,,,,,,,,Solver,__init__,"(self, rhs, *, options=None)","self.rhs._register_feedback({}, solver=self.name)","self.rhs._register_feedback({}, solver=self.name)",,,,,,
solver_base.py,python,class_method,,,"Class method: Solver.__init__(self, rhs, *, options=None)",qutip,qutip,v5.0.4,,,,,,,,,Solver,__init__,"(self, rhs, *, options=None)",,,,,,,,
solver_base.py,python,class_method,,,Class method: Solver._initialize_stats(self),qutip,qutip,v5.0.4,,,,,,,,,Solver,_initialize_stats,(self),,,,,,,,
solver_base.py,python,class_method,,,"Class method: Solver._prepare_state(self, state)",qutip,qutip,v5.0.4,,,,,,,,,Solver,_prepare_state,"(self, state)",,,,,,,,
solver_base.py,python,class_method,,,"Class method: Solver._restore_state(self, data, *, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,Solver,_restore_state,"(self, data, *, copy=True)",,,,,,,,
solver_base.py,python,class_method,,,"Class method: Solver.run(self, state0, tlist, *, args=None, e_ops=None)",qutip,qutip,v5.0.4,,,,,,,,,Solver,run,"(self, state0, tlist, *, args=None, e_ops=None)",,,,,,,,
solver_base.py,python,class_method,,,"Class method: Solver.start(self, state0, t0)",qutip,qutip,v5.0.4,,,,,,,,,Solver,start,"(self, state0, t0)",,,,,,,,
solver_base.py,python,class_method,,,"Class method: Solver.step(self, t, *, args=None, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,Solver,step,"(self, t, *, args=None, copy=True)",,,,,,,,
solver_base.py,python,class_method,,,Class method: Solver._get_integrator(self),qutip,qutip,v5.0.4,,,,,,,,,Solver,_get_integrator,(self),,,,,,,,
solver_base.py,python,class_method,,,Class method: [property] Solver.sys_dims(self),qutip,qutip,v5.0.4,,,,,,,,,Solver,sys_dims,(self),,,,property,,,,
solver_base.py,python,class_method,,,Class method: [property] Solver.options(self),qutip,qutip,v5.0.4,,,,,,,,,Solver,options,(self),,,,property,,,,
solver_base.py,python,class_method,,,"Class method: Solver._parse_options(self, new_options, default, old_options)",qutip,qutip,v5.0.4,,,,,,,,,Solver,_parse_options,"(self, new_options, default, old_options)",,,,,,,,
solver_base.py,python,class_method,,,"Class method: [options.setter] Solver.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,,,Solver,options,"(self, new_options)",,,,options.setter,,,,
solver_base.py,python,class_method,,,"Class method: Solver._apply_options(self, keys)",qutip,qutip,v5.0.4,,,,,,,,,Solver,_apply_options,"(self, keys)",,,,,,,,
solver_base.py,python,class_method,,,"Class method: Solver._argument(self, args)",qutip,qutip,v5.0.4,,,,,,,,,Solver,_argument,"(self, args)",,,,,,,,
solver_base.py,python,class_method,,,Class method: [classmethod] Solver.avail_integrators(cls),qutip,qutip,v5.0.4,,,,,,,,,Solver,avail_integrators,(cls),,,,classmethod,,,,
solver_base.py,python,class_method,,,"Class method: [classmethod] Solver.integrator(cls, key)",qutip,qutip,v5.0.4,,,,,,,,,Solver,integrator,"(cls, key)",,,,classmethod,,,,
solver_base.py,python,class_method,,,"Class method: [classmethod] Solver.add_integrator(cls, integrator, key)",qutip,qutip,v5.0.4,,,,,,,,,Solver,add_integrator,"(cls, integrator, key)",,,,classmethod,,,,
solver_base.py,python,class_method,,,"Class method: [classmethod] Solver.ExpectFeedback(cls, operator, default=0.)",qutip,qutip,v5.0.4,,,,,,,,,Solver,ExpectFeedback,"(cls, operator, default=0.)",,,,classmethod,,,,
solver_base.py,python,class,,,Class: Solver,qutip,qutip,v5.0.4,,,,,,,,,Solver,,,,,,,,,,
solver_base.py,python,function,_solver_deprecation,"(kwargs, options, solver=""me"")","Function: _solver_deprecation(kwargs, options, solver=""me"")",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
solver_base.py,python,constant,,,Constant: __all__ = ['Solver'],qutip,qutip,v5.0.4,,,,,__all__ = ['Solver'],__all__,['Solver'],,,,,,,,,,,,
solver_base.py,python,import,,,Import: time from time,qutip,qutip,v5.0.4,from time import time,time,time,,,,,,,,,,,,,,,,
solver_base.py,python,import,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,warnings,,,,,,,,,,,,,,,,,
solver_base.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
solver_base.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
solver_base.py,python,,,,Directory: qutip\solver\solver_base.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
spectrum.py,python,function,spectrum,"(H, wlist, c_ops, a_op, b_op, solver=""es"")","Function: spectrum(H, wlist, c_ops, a_op, b_op, solver=""es"")",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
spectrum.py,python,function,spectrum_correlation_fft,"(tlist, y, inverse=False)","Function: spectrum_correlation_fft(tlist, y, inverse=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
spectrum.py,python,function,_spectrum_es,"(L, wlist, a_op, b_op)","Function: _spectrum_es(L, wlist, a_op, b_op)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
spectrum.py,python,function,_spectrum_pi,"(L, wlist, a_op, b_op, use_pinv=False)","Function: _spectrum_pi(L, wlist, a_op, b_op, use_pinv=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
spectrum.py,python,function,_diagonal_evolution,"(L, rho0, sparse=False)","Function: _diagonal_evolution(L, rho0, sparse=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
spectrum.py,python,constant,,,"Constant: __all__ = ['spectrum', 'spectrum_correlation_fft']",qutip,qutip,v5.0.4,,,,,"__all__ = ['spectrum', 'spectrum_correlation_fft']",__all__,"['spectrum', 'spectrum_correlation_fft']",,,,,,,,,,,,
spectrum.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
spectrum.py,python,import,,,Import: scipy.fftpack,qutip,qutip,v5.0.4,import scipy.fftpack,scipy.fftpack,,,,,,,,,,,,,,,,,
spectrum.py,python,local_import,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings,settings,qutip.settings,qutip.settings,,,,,,,,,,,,,,,
spectrum.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
spectrum.py,python,,,,Directory: qutip\solver\spectrum.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
steadystate.py,python,function,_permute_wbm,"(L, b)","Function: _permute_wbm(L, b)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
steadystate.py,python,function,_permute_rcm,"(L, b)","Function: _permute_rcm(L, b)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
steadystate.py,python,function,_reverse_rcm,"(rho, perm)","Function: _reverse_rcm(rho, perm)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
steadystate.py,python,function,steadystate,"(A, c_ops=[], *, method='direct', solver=None, **kwargs)","Function: steadystate(A, c_ops=[], *, method='direct', solver=None, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
steadystate.py,python,function,_steadystate_direct,"(A, weight, **kw)","Function: _steadystate_direct(A, weight, **kw)",qutip,qutip,v5.0.4,,,,,,,,"# Find the weight, no good dispatched function available...",,,,,,,,,,,
steadystate.py,python,function,_steadystate_eigen,"(L, **kw)","Function: _steadystate_eigen(L, **kw)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
steadystate.py,python,function,_steadystate_svd,"(L, **kw)","Function: _steadystate_svd(L, **kw)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
steadystate.py,python,function,_steadystate_power,"(A, **kw)","Function: _steadystate_power(A, **kw)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
steadystate.py,python,function,steadystate_floquet,"(H_0, c_ops, Op_t, w_d=1.0, n_it=3, sparse=False,
                        solver=None, **kwargs)","Function: steadystate_floquet(H_0, c_ops, Op_t, w_d=1.0, n_it=3, sparse=False,
                        solver=None, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
steadystate.py,python,function,pseudo_inverse,"(L, rhoss=None, w=None, method='splu', *, use_rcm=False,
                   **kwargs)","Function: pseudo_inverse(L, rhoss=None, w=None, method='splu', *, use_rcm=False,
                   **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
steadystate.py,python,function,_compute_precond,"(L, args)","Function: _compute_precond(L, args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
steadystate.py,python,constant,,,"Constant: __all__ = [""steadystate"", ""steadystate_floquet"", ""pseudo_inverse""]",qutip,qutip,v5.0.4,,,,,"__all__ = [""steadystate"", ""steadystate_floquet"", ""pseudo_inverse""]",__all__,"[""steadystate"", ""steadystate_floquet"", ""pseudo_inverse""]",,,,,,,,,,,,
steadystate.py,python,import,,,Import: liouvillian from qutip,qutip,qutip,v5.0.4,"from qutip import liouvillian, lindblad_dissipator, Qobj, qzero_like, qeye_like",liouvillian,qutip,,,,,,,,,,,,,,,,
steadystate.py,python,import,,,Import: lindblad_dissipator from qutip,qutip,qutip,v5.0.4,"from qutip import liouvillian, lindblad_dissipator, Qobj, qzero_like, qeye_like",lindblad_dissipator,qutip,,,,,,,,,,,,,,,,
steadystate.py,python,import,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import liouvillian, lindblad_dissipator, Qobj, qzero_like, qeye_like",Qobj,qutip,,,,,,,,,,,,,,,,
steadystate.py,python,import,,,Import: qzero_like from qutip,qutip,qutip,v5.0.4,"from qutip import liouvillian, lindblad_dissipator, Qobj, qzero_like, qeye_like",qzero_like,qutip,,,,,,,,,,,,,,,,
steadystate.py,python,import,,,Import: qeye_like from qutip,qutip,qutip,v5.0.4,"from qutip import liouvillian, lindblad_dissipator, Qobj, qzero_like, qeye_like",qeye_like,qutip,,,,,,,,,,,,,,,,
steadystate.py,python,import,,,Import: vector_to_operator from qutip,qutip,qutip,v5.0.4,"from qutip import vector_to_operator, operator_to_vector",vector_to_operator,qutip,,,,,,,,,,,,,,,,
steadystate.py,python,import,,,Import: operator_to_vector from qutip,qutip,qutip,v5.0.4,"from qutip import vector_to_operator, operator_to_vector",operator_to_vector,qutip,,,,,,,,,,,,,,,,
steadystate.py,python,import,,,Import: settings from qutip,qutip,qutip,v5.0.4,from qutip import settings,settings,qutip,,,,,,,,,,,,,,,,
steadystate.py,python,import,,,Import: qutip.core.data,qutip,qutip,v5.0.4,import qutip.core.data as _data,qutip.core.data,,,,,,,,,,,,,,,,,
steadystate.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
steadystate.py,python,import,,,Import: scipy.sparse.csgraph,qutip,qutip,v5.0.4,import scipy.sparse.csgraph,scipy.sparse.csgraph,,,,,,,,,,,,,,,,,
steadystate.py,python,import,,,Import: scipy.sparse.linalg,qutip,qutip,v5.0.4,import scipy.sparse.linalg,scipy.sparse.linalg,,,,,,,,,,,,,,,,,
steadystate.py,python,import,,,Import: warn from warnings,qutip,qutip,v5.0.4,from warnings import warn,warn,warnings,,,,,,,,,,,,,,,,
steadystate.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
steadystate.py,python,,,,Directory: qutip\solver\steadystate.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
stochastic.py,python,class_field,,,Class field: [instance] _StochasticRHS.H = QobjEvo(H),qutip,qutip,v5.0.4,,,,,,,,,_StochasticRHS,__init__,"(self, issuper, H, sc_ops, c_ops, heterodyne)",self.H = QobjEvo(H),self.H = QobjEvo(H),,,,,,
stochastic.py,python,class_field,,,Class field: [instance] _StochasticRHS.sc_ops = [QobjEvo(c_op) for c_op in sc_ops],qutip,qutip,v5.0.4,,,,,,,,,_StochasticRHS,__init__,"(self, issuper, H, sc_ops, c_ops, heterodyne)",self.sc_ops = [QobjEvo(c_op) for c_op in sc_ops],self.sc_ops = [QobjEvo(c_op) for c_op in sc_ops],,,,,,
stochastic.py,python,class_field,,,Class field: [instance] _StochasticRHS.c_ops = [QobjEvo(c_op) for c_op in c_ops],qutip,qutip,v5.0.4,,,,,,,,,_StochasticRHS,__init__,"(self, issuper, H, sc_ops, c_ops, heterodyne)",self.c_ops = [QobjEvo(c_op) for c_op in c_ops],self.c_ops = [QobjEvo(c_op) for c_op in c_ops],,,,,,
stochastic.py,python,class_field,,,Class field: [instance] _StochasticRHS.issuper = issuper,qutip,qutip,v5.0.4,,,,,,,,,_StochasticRHS,__init__,"(self, issuper, H, sc_ops, c_ops, heterodyne)",self.issuper = issuper,self.issuper = issuper,,,,,,
stochastic.py,python,class_field,,,Class field: [instance] _StochasticRHS.heterodyne = heterodyne,qutip,qutip,v5.0.4,,,,,,,,,_StochasticRHS,__init__,"(self, issuper, H, sc_ops, c_ops, heterodyne)",self.heterodyne = heterodyne,self.heterodyne = heterodyne,,,,,,
stochastic.py,python,class_field,,,Class field: [instance] _StochasticRHS._noise_key = None,qutip,qutip,v5.0.4,,,,,,,,,_StochasticRHS,__init__,"(self, issuper, H, sc_ops, c_ops, heterodyne)",self._noise_key = None,self._noise_key = None,,,,,,
stochastic.py,python,class_field,,,"Class field: StochasticSolver.name = ""StochasticSolver""",qutip,qutip,v5.0.4,,,,,,,,,StochasticSolver,,,"name = ""StochasticSolver""",,,,name,"""StochasticSolver""",,
stochastic.py,python,class_field,,,Class field: StochasticSolver._resultclass = StochasticResult,qutip,qutip,v5.0.4,,,,,,,,,StochasticSolver,,,_resultclass = StochasticResult,,,,_resultclass,StochasticResult,,
stochastic.py,python,class_field,,,Class field: StochasticSolver._avail_integrators = {},qutip,qutip,v5.0.4,,,,,,,,,StochasticSolver,,,_avail_integrators = {},,,,_avail_integrators,{},,
stochastic.py,python,class_field,,,Class field: StochasticSolver._open = None,qutip,qutip,v5.0.4,,,,,,,,,StochasticSolver,,,_open = None,,,,_open,None,,
stochastic.py,python,class_field,,,"Class field: StochasticSolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""platen"",
        ""store_measurement"": False,
    }",qutip,qutip,v5.0.4,,,,,,,,,StochasticSolver,,,"solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""platen"",
        ""store_measurement"": False,
    }",,,,solver_options,"{
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""platen"",
        ""store_measurement"": False,
    }",,
stochastic.py,python,class_field,,,Class field: [instance] StochasticSolver._heterodyne = heterodyne,qutip,qutip,v5.0.4,,,,,,,,,StochasticSolver,__init__,"(self, H, sc_ops, heterodyne, *, c_ops=(), options=None)",self._heterodyne = heterodyne,self._heterodyne = heterodyne,,,,,,
stochastic.py,python,class_field,,,"Class field: SMESolver.name = ""smesolve""",qutip,qutip,v5.0.4,,,,,,,,,SMESolver,,,"name = ""smesolve""",,,,name,"""smesolve""",,
stochastic.py,python,class_field,,,Class field: SMESolver._avail_integrators = {},qutip,qutip,v5.0.4,,,,,,,,,SMESolver,,,_avail_integrators = {},,,,_avail_integrators,{},,
stochastic.py,python,class_field,,,Class field: SMESolver._open = True,qutip,qutip,v5.0.4,,,,,,,,,SMESolver,,,_open = True,,,,_open,True,,
stochastic.py,python,class_field,,,"Class field: SMESolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""platen"",
        ""store_measurement"": False,
    }",qutip,qutip,v5.0.4,,,,,,,,,SMESolver,,,"solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""platen"",
        ""store_measurement"": False,
    }",,,,solver_options,"{
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""platen"",
        ""store_measurement"": False,
    }",,
stochastic.py,python,class_field,,,"Class field: SSESolver.name = ""ssesolve""",qutip,qutip,v5.0.4,,,,,,,,,SSESolver,,,"name = ""ssesolve""",,,,name,"""ssesolve""",,
stochastic.py,python,class_field,,,Class field: SSESolver._avail_integrators = {},qutip,qutip,v5.0.4,,,,,,,,,SSESolver,,,_avail_integrators = {},,,,_avail_integrators,{},,
stochastic.py,python,class_field,,,Class field: SSESolver._open = False,qutip,qutip,v5.0.4,,,,,,,,,SSESolver,,,_open = False,,,,_open,False,,
stochastic.py,python,class_field,,,"Class field: SSESolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""platen"",
        ""store_measurement"": False,
    }",qutip,qutip,v5.0.4,,,,,,,,,SSESolver,,,"solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""platen"",
        ""store_measurement"": False,
    }",,,,solver_options,"{
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""platen"",
        ""store_measurement"": False,
    }",,
stochastic.py,python,class_method,,,"Class method: StochasticTrajResult._post_init(self, m_ops=(), dw_factor=(), heterodyne=False)",qutip,qutip,v5.0.4,,,,,,,,,StochasticTrajResult,_post_init,"(self, m_ops=(), dw_factor=(), heterodyne=False)",,,,,,,,
stochastic.py,python,class_method,,,"Class method: StochasticTrajResult.add(self, t, state, noise=None)",qutip,qutip,v5.0.4,,,,,,,,,StochasticTrajResult,add,"(self, t, state, noise=None)",,,,,,,,
stochastic.py,python,class_method,,,Class method: [property] StochasticTrajResult.wiener_process(self),qutip,qutip,v5.0.4,,,,,,,,,StochasticTrajResult,wiener_process,(self),,,,property,,,,
stochastic.py,python,class_method,,,Class method: [property] StochasticTrajResult.dW(self),qutip,qutip,v5.0.4,,,,,,,,,StochasticTrajResult,dW,(self),,,,property,,,,
stochastic.py,python,class_method,,,Class method: [property] StochasticTrajResult.measurement(self),qutip,qutip,v5.0.4,,,,,,,,,StochasticTrajResult,measurement,(self),,,,property,,,,
stochastic.py,python,class_method,,,Class method: StochasticResult._post_init(self),qutip,qutip,v5.0.4,,,,,,,,,StochasticResult,_post_init,(self),,,,,,,,
stochastic.py,python,class_method,,,"Class method: StochasticResult._reduce_attr(self, trajectory, attr)",qutip,qutip,v5.0.4,,,,,,,,,StochasticResult,_reduce_attr,"(self, trajectory, attr)",,,,,,,,
stochastic.py,python,class_method,,,"Class method: StochasticResult._trajectories_attr(self, attr)",qutip,qutip,v5.0.4,,,,,,,,,StochasticResult,_trajectories_attr,"(self, attr)",,,,,,,,
stochastic.py,python,class_method,,,Class method: [property] StochasticResult.measurement(self),qutip,qutip,v5.0.4,,,,,,,,,StochasticResult,measurement,(self),,,,property,,,,
stochastic.py,python,class_method,,,Class method: [property] StochasticResult.dW(self),qutip,qutip,v5.0.4,,,,,,,,,StochasticResult,dW,(self),,,,property,,,,
stochastic.py,python,class_method,,,Class method: [property] StochasticResult.wiener_process(self),qutip,qutip,v5.0.4,,,,,,,,,StochasticResult,wiener_process,(self),,,,property,,,,
stochastic.py,python,class_method,,,"Class method: _StochasticRHS.__init__(self, issuper, H, sc_ops, c_ops, heterodyne)",qutip,qutip,v5.0.4,,,,,,,,,_StochasticRHS,__init__,"(self, issuper, H, sc_ops, c_ops, heterodyne)",,,,,,,,
stochastic.py,python,class_method,,,"Class method: _StochasticRHS.__call__(self, options)",qutip,qutip,v5.0.4,,,,,,,,,_StochasticRHS,__call__,"(self, options)",,,,,,,,
stochastic.py,python,class_method,,,"Class method: _StochasticRHS.arguments(self, args)",qutip,qutip,v5.0.4,,,,,,,,,_StochasticRHS,arguments,"(self, args)",,,,,,,,
stochastic.py,python,class_method,,,"Class method: _StochasticRHS._register_feedback(self, val)",qutip,qutip,v5.0.4,,,,,,,,,_StochasticRHS,_register_feedback,"(self, val)",,,,,,,,
stochastic.py,python,class_method,,,"Class method: StochasticSolver._trajectory_resultclass(self, e_ops, options)",qutip,qutip,v5.0.4,,,,,,,,,StochasticSolver,_trajectory_resultclass,"(self, e_ops, options)",,,,,,,,
stochastic.py,python,class_method,,,"Class method: StochasticSolver.__init__(self, H, sc_ops, heterodyne, *, c_ops=(), options=None)",qutip,qutip,v5.0.4,,,,,,,,,StochasticSolver,__init__,"(self, H, sc_ops, heterodyne, *, c_ops=(), options=None)",,,,,,,,
stochastic.py,python,class_method,,,Class method: [property] StochasticSolver.heterodyne(self),qutip,qutip,v5.0.4,,,,,,,,,StochasticSolver,heterodyne,(self),,,,property,,,,
stochastic.py,python,class_method,,,Class method: [property] StochasticSolver.m_ops(self),qutip,qutip,v5.0.4,,,,,,,,,StochasticSolver,m_ops,(self),,,,property,,,,
stochastic.py,python,class_method,,,"Class method: [m_ops.setter] StochasticSolver.m_ops(self, new_m_ops)",qutip,qutip,v5.0.4,,,,,,,,,StochasticSolver,m_ops,"(self, new_m_ops)",,,,m_ops.setter,,,,
stochastic.py,python,class_method,,,Class method: [property] StochasticSolver.dW_factors(self),qutip,qutip,v5.0.4,,,,,,,,,StochasticSolver,dW_factors,(self),,,,property,,,,
stochastic.py,python,class_method,,,"Class method: [dW_factors.setter] StochasticSolver.dW_factors(self, new_dW_factors)",qutip,qutip,v5.0.4,,,,,,,,,StochasticSolver,dW_factors,"(self, new_dW_factors)",,,,dW_factors.setter,,,,
stochastic.py,python,class_method,,,"Class method: StochasticSolver._integrate_one_traj(self, seed, tlist, result)",qutip,qutip,v5.0.4,,,,,,,,,StochasticSolver,_integrate_one_traj,"(self, seed, tlist, result)",,,,,,,,
stochastic.py,python,class_method,,,Class method: [classmethod] StochasticSolver.avail_integrators(cls),qutip,qutip,v5.0.4,,,,,,,,,StochasticSolver,avail_integrators,(cls),,,,classmethod,,,,
stochastic.py,python,class_method,,,Class method: [property] StochasticSolver.options(self),qutip,qutip,v5.0.4,,,,,,,,,StochasticSolver,options,(self),,,,property,,,,
stochastic.py,python,class_method,,,"Class method: [options.setter] StochasticSolver.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,,,StochasticSolver,options,"(self, new_options)",,,,options.setter,,,,
stochastic.py,python,class_method,,,"Class method: [classmethod] StochasticSolver.WienerFeedback(cls, default=None)",qutip,qutip,v5.0.4,,,,,,,,,StochasticSolver,WienerFeedback,"(cls, default=None)",,,,classmethod,,,,
stochastic.py,python,class_method,,,"Class method: [classmethod] StochasticSolver.StateFeedback(cls, default=None, raw_data=False)",qutip,qutip,v5.0.4,,,,,,,,,StochasticSolver,StateFeedback,"(cls, default=None, raw_data=False)",,,,classmethod,,,,
stochastic.py,python,class,,,Class: StochasticTrajResult(Result),qutip,qutip,v5.0.4,,,,,,,,,StochasticTrajResult,,,,,(Result),,,,,
stochastic.py,python,class,,,Class: StochasticResult(MultiTrajResult),qutip,qutip,v5.0.4,,,,,,,,,StochasticResult,,,,,(MultiTrajResult),,,,,
stochastic.py,python,class,,,Class: _StochasticRHS(_MultiTrajRHS),qutip,qutip,v5.0.4,,,,,,,,,_StochasticRHS,,,,,(_MultiTrajRHS),,,,,
stochastic.py,python,class,,,Class: StochasticSolver(MultiTrajSolver),qutip,qutip,v5.0.4,,,,,,,,,StochasticSolver,,,,,(MultiTrajSolver),,,,,
stochastic.py,python,class,,,Class: SMESolver(StochasticSolver),qutip,qutip,v5.0.4,,,,,,,,,SMESolver,,,,,(StochasticSolver),,,,,
stochastic.py,python,class,,,Class: SSESolver(StochasticSolver),qutip,qutip,v5.0.4,,,,,,,,,SSESolver,,,,,(StochasticSolver),,,,,
stochastic.py,python,function,smesolve,"(
    H, rho0, tlist, c_ops=(), sc_ops=(), heterodyne=False, *,
    e_ops=(), args={}, ntraj=500, options=None,
    seeds=None, target_tol=None, timeout=None, **kwargs
)","Function: smesolve(
    H, rho0, tlist, c_ops=(), sc_ops=(), heterodyne=False, *,
    e_ops=(), args={}, ntraj=500, options=None,
    seeds=None, target_tol=None, timeout=None, **kwargs
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
stochastic.py,python,function,ssesolve,"(
    H, psi0, tlist, sc_ops=(), heterodyne=False, *,
    e_ops=(), args={}, ntraj=500, options=None,
    seeds=None, target_tol=None, timeout=None, **kwargs
)","Function: ssesolve(
    H, psi0, tlist, sc_ops=(), heterodyne=False, *,
    e_ops=(), args={}, ntraj=500, options=None,
    seeds=None, target_tol=None, timeout=None, **kwargs
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
stochastic.py,python,constant,,,"Constant: __all__ = [""smesolve"", ""SMESolver"", ""ssesolve"", ""SSESolver""]",qutip,qutip,v5.0.4,,,,,"__all__ = [""smesolve"", ""SMESolver"", ""ssesolve"", ""SSESolver""]",__all__,"[""smesolve"", ""SMESolver"", ""ssesolve"", ""SSESolver""]",,,,,,,,,,,,
stochastic.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
stochastic.py,python,import,,,Import: partial from functools,qutip,qutip,v5.0.4,from functools import partial,partial,functools,,,,,,,,,,,,,,,,
stochastic.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
stochastic.py,python,,,,Directory: qutip\solver\stochastic.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
_feedback.py,python,class_field,,,Class field: [instance] _ExpectFeedback.oper = QobjEvo(oper),qutip,qutip,v5.0.4,,,,,,,,,_ExpectFeedback,__init__,"(self, oper, default=0.)",self.oper = QobjEvo(oper),self.oper = QobjEvo(oper),,,,,,
_feedback.py,python,class_field,,,Class field: [instance] _ExpectFeedback.N = oper.shape[1],qutip,qutip,v5.0.4,,,,,,,,,_ExpectFeedback,__init__,"(self, oper, default=0.)",self.N = oper.shape[1],self.N = oper.shape[1],,,,,,
_feedback.py,python,class_field,,,Class field: [instance] _ExpectFeedback.N2 = oper.shape[1]**2,qutip,qutip,v5.0.4,,,,,,,,,_ExpectFeedback,__init__,"(self, oper, default=0.)",self.N2 = oper.shape[1]**2,self.N2 = oper.shape[1]**2,,,,,,
_feedback.py,python,class_field,,,Class field: [instance] _ExpectFeedback.default = default,qutip,qutip,v5.0.4,,,,,,,,,_ExpectFeedback,__init__,"(self, oper, default=0.)",self.default = default,self.default = default,,,,,,
_feedback.py,python,class_field,,,Class field: [instance] _QobjFeedback.open = open,qutip,qutip,v5.0.4,,,,,,,,,_QobjFeedback,__init__,"(self, default=None, prop=False, open=True)",self.open = open,self.open = open,,,,,,
_feedback.py,python,class_field,,,Class field: [instance] _QobjFeedback.prop = prop,qutip,qutip,v5.0.4,,,,,,,,,_QobjFeedback,__init__,"(self, default=None, prop=False, open=True)",self.prop = prop,self.prop = prop,,,,,,
_feedback.py,python,class_field,,,Class field: [instance] _QobjFeedback.default = default,qutip,qutip,v5.0.4,,,,,,,,,_QobjFeedback,__init__,"(self, default=None, prop=False, open=True)",self.default = default,self.default = default,,,,,,
_feedback.py,python,class_field,,,Class field: [instance] _DataFeedback.open = open,qutip,qutip,v5.0.4,,,,,,,,,_DataFeedback,__init__,"(self, default=None, open=True, prop=False)",self.open = open,self.open = open,,,,,,
_feedback.py,python,class_field,,,Class field: [instance] _DataFeedback.default = default,qutip,qutip,v5.0.4,,,,,,,,,_DataFeedback,__init__,"(self, default=None, open=True, prop=False)",self.default = default,self.default = default,,,,,,
_feedback.py,python,class_field,,,Class field: [instance] _DataFeedback.prop = prop,qutip,qutip,v5.0.4,,,,,,,,,_DataFeedback,__init__,"(self, default=None, open=True, prop=False)",self.prop = prop,self.prop = prop,,,,,,
_feedback.py,python,class_field,,,"Class field: _CollapseFeedback.code = ""CollapseFeedback""",qutip,qutip,v5.0.4,,,,,,,,,_CollapseFeedback,,,"code = ""CollapseFeedback""",,,,code,"""CollapseFeedback""",,
_feedback.py,python,class_field,,,Class field: [instance] _CollapseFeedback.default = default or [],qutip,qutip,v5.0.4,,,,,,,,,_CollapseFeedback,__init__,"(self, default=None)",self.default = default or [],self.default = default or [],,,,,,
_feedback.py,python,class_field,,,"Class field: _WienerFeedback.code = ""WienerFeedback""",qutip,qutip,v5.0.4,,,,,,,,,_WienerFeedback,,,"code = ""WienerFeedback""",,,,code,"""WienerFeedback""",,
_feedback.py,python,class_field,,,Class field: [instance] _WienerFeedback.default = default or _default_wiener,qutip,qutip,v5.0.4,,,,,,,,,_WienerFeedback,__init__,"(self, default=None)",self.default = default or _default_wiener,self.default = default or _default_wiener,,,,,,
_feedback.py,python,class_method,,,"Class method: _ExpectFeedback.__init__(self, oper, default=0.)",qutip,qutip,v5.0.4,,,,,,,,,_ExpectFeedback,__init__,"(self, oper, default=0.)",,,,,,,,
_feedback.py,python,class_method,,,"Class method: _ExpectFeedback.check_consistency(self, dims)",qutip,qutip,v5.0.4,,,,,,,,,_ExpectFeedback,check_consistency,"(self, dims)",,,,,,,,
_feedback.py,python,class_method,,,"Class method: _ExpectFeedback.__call__(self, t, state)",qutip,qutip,v5.0.4,,,,,,,,,_ExpectFeedback,__call__,"(self, t, state)",,,,,,,,
_feedback.py,python,class_method,,,Class method: _ExpectFeedback.__repr__(self),qutip,qutip,v5.0.4,,,,,,,,,_ExpectFeedback,__repr__,(self),,,,,,,,
_feedback.py,python,class_method,,,"Class method: _QobjFeedback.__init__(self, default=None, prop=False, open=True)",qutip,qutip,v5.0.4,,,,,,,,,_QobjFeedback,__init__,"(self, default=None, prop=False, open=True)",,,,,,,,
_feedback.py,python,class_method,,,"Class method: _QobjFeedback.check_consistency(self, dims)",qutip,qutip,v5.0.4,,,,,,,,,_QobjFeedback,check_consistency,"(self, dims)",,,,,,,,
_feedback.py,python,class_method,,,"Class method: _QobjFeedback.__call__(self, t, state)",qutip,qutip,v5.0.4,,,,,,,,,_QobjFeedback,__call__,"(self, t, state)",,,,,,,,
_feedback.py,python,class_method,,,Class method: _QobjFeedback.__repr__(self),qutip,qutip,v5.0.4,,,,,,,,,_QobjFeedback,__repr__,(self),,,,,,,,
_feedback.py,python,class_method,,,"Class method: _DataFeedback.__init__(self, default=None, open=True, prop=False)",qutip,qutip,v5.0.4,,,,,,,,,_DataFeedback,__init__,"(self, default=None, open=True, prop=False)",,,,,,,,
_feedback.py,python,class_method,,,"Class method: _DataFeedback.check_consistency(self, dims)",qutip,qutip,v5.0.4,,,,,,,,,_DataFeedback,check_consistency,"(self, dims)",,,,,,,,
_feedback.py,python,class_method,,,"Class method: _DataFeedback.__call__(self, t, state)",qutip,qutip,v5.0.4,,,,,,,,,_DataFeedback,__call__,"(self, t, state)",,,,,,,,
_feedback.py,python,class_method,,,Class method: _DataFeedback.__repr__(self),qutip,qutip,v5.0.4,,,,,,,,,_DataFeedback,__repr__,(self),,,,,,,,
_feedback.py,python,class_method,,,"Class method: _CollapseFeedback.__init__(self, default=None)",qutip,qutip,v5.0.4,,,,,,,,,_CollapseFeedback,__init__,"(self, default=None)",,,,,,,,
_feedback.py,python,class_method,,,"Class method: _CollapseFeedback.check_consistency(self, dims)",qutip,qutip,v5.0.4,,,,,,,,,_CollapseFeedback,check_consistency,"(self, dims)",,,,,,,,
_feedback.py,python,class_method,,,Class method: _CollapseFeedback.__repr__(self),qutip,qutip,v5.0.4,,,,,,,,,_CollapseFeedback,__repr__,(self),,,,,,,,
_feedback.py,python,class_method,,,"Class method: _WienerFeedback.__init__(self, default=None)",qutip,qutip,v5.0.4,,,,,,,,,_WienerFeedback,__init__,"(self, default=None)",,,,,,,,
_feedback.py,python,class_method,,,"Class method: _WienerFeedback.check_consistency(self, dims)",qutip,qutip,v5.0.4,,,,,,,,,_WienerFeedback,check_consistency,"(self, dims)",,,,,,,,
_feedback.py,python,class_method,,,Class method: _WienerFeedback.__repr__(self),qutip,qutip,v5.0.4,,,,,,,,,_WienerFeedback,__repr__,(self),,,,,,,,
_feedback.py,python,class,,,Class: _ExpectFeedback(_Feedback),qutip,qutip,v5.0.4,,,,,,,,,_ExpectFeedback,,,,,(_Feedback),,,,,
_feedback.py,python,class,,,Class: _QobjFeedback(_Feedback),qutip,qutip,v5.0.4,,,,,,,,,_QobjFeedback,,,,,(_Feedback),,,,,
_feedback.py,python,class,,,Class: _DataFeedback(_Feedback),qutip,qutip,v5.0.4,,,,,,,,,_DataFeedback,,,,,(_Feedback),,,,,
_feedback.py,python,class,,,Class: _CollapseFeedback(_Feedback),qutip,qutip,v5.0.4,,,,,,,,,_CollapseFeedback,,,,,(_Feedback),,,,,
_feedback.py,python,class,,,Class: _WienerFeedback(_Feedback),qutip,qutip,v5.0.4,,,,,,,,,_WienerFeedback,,,,,(_Feedback),,,,,
_feedback.py,python,function,_default_wiener,(t),Function: _default_wiener(t),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
_feedback.py,python,import,,,Import: qutip.core.data,qutip,qutip,v5.0.4,import qutip.core.data as _data,qutip.core.data,,,,,,,,,,,,,,,,,
_feedback.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
_feedback.py,python,local_import,,,Import: QobjEvo from qutip.core.cy.qobjevo,qutip,qutip,v5.0.4,"from qutip.core.cy.qobjevo import QobjEvo, _Feedback",QobjEvo,qutip.core.cy.qobjevo,qutip.core.cy.qobjevo,,,,,,,,,,,,,,,
_feedback.py,python,local_import,,,Import: _Feedback from qutip.core.cy.qobjevo,qutip,qutip,v5.0.4,"from qutip.core.cy.qobjevo import QobjEvo, _Feedback",_Feedback,qutip.core.cy.qobjevo,qutip.core.cy.qobjevo,,,,,,,,,,,,,,,
_feedback.py,python,local_import,,,Import: Dimensions from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import Dimensions, Field, SuperSpace",Dimensions,qutip.core.dimensions,qutip.core.dimensions,,,,,,,,,,,,,,,
_feedback.py,python,local_import,,,Import: Field from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import Dimensions, Field, SuperSpace",Field,qutip.core.dimensions,qutip.core.dimensions,,,,,,,,,,,,,,,
_feedback.py,python,local_import,,,Import: SuperSpace from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import Dimensions, Field, SuperSpace",SuperSpace,qutip.core.dimensions,qutip.core.dimensions,,,,,,,,,,,,,,,
_feedback.py,python,local_import,,,Import: Qobj from qutip.core.qobj,qutip,qutip,v5.0.4,from qutip.core.qobj import Qobj,Qobj,qutip.core.qobj,qutip.core.qobj,,,,,,,,,,,,,,,
_feedback.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
_feedback.py,python,,,,Directory: qutip\solver\_feedback.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,import,,,Import: qutip.solver.integrator,qutip,qutip,v5.0.4,import qutip.solver.integrator as integrator,qutip.solver.integrator,,,,,,,,,,,,,,,,,
__init__.py,python,import,,,Import: qutip.solver.sode,qutip,qutip,v5.0.4,import qutip.solver.sode as sode,qutip.solver.sode,,,,,,,,,,,,,,,,,
__init__.py,python,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,Directory: qutip\solver\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,File: qutip\solver\cy,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,Directory: qutip\solver\cy\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
bofin_baths.py,python,class_field,,,"Class field: BathExponent.types = enum.Enum(""ExponentType"", [""R"", ""I"", ""RI"", ""+"", ""-""])",qutip,qutip,v5.0.4,,,,,,,,,BathExponent,,,"types = enum.Enum(""ExponentType"", [""R"", ""I"", ""RI"", ""+"", ""-""])",,,,types,"enum.Enum(""ExponentType"", [""R"", ""I"", ""RI"", ""+"", ""-""])",,
bofin_baths.py,python,class_field,,,"Class field: [instance] BathExponent._check_ck2(type, ck2)",qutip,qutip,v5.0.4,,,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )","self._check_ck2(type, ck2)","self._check_ck2(type, ck2)",,,,,,
bofin_baths.py,python,class_field,,,"Class field: [instance] BathExponent._check_sigma_bar_k_offset(type, sigma_bar_k_offset)",qutip,qutip,v5.0.4,,,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )","self._check_sigma_bar_k_offset(type, sigma_bar_k_offset)","self._check_sigma_bar_k_offset(type, sigma_bar_k_offset)",,,,,,
bofin_baths.py,python,class_field,,,Class field: [instance] BathExponent.type = type,qutip,qutip,v5.0.4,,,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",self.type = type,self.type = type,,,,,,
bofin_baths.py,python,class_field,,,Class field: [instance] BathExponent.fermionic = _type_is_fermionic(type),qutip,qutip,v5.0.4,,,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",self.fermionic = self._type_is_fermionic(type),self.fermionic = self._type_is_fermionic(type),,,,,,
bofin_baths.py,python,class_field,,,Class field: [instance] BathExponent.dim = dim,qutip,qutip,v5.0.4,,,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",self.dim = dim,self.dim = dim,,,,,,
bofin_baths.py,python,class_field,,,Class field: [instance] BathExponent.Q = Q,qutip,qutip,v5.0.4,,,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",self.Q = Q,self.Q = Q,,,,,,
bofin_baths.py,python,class_field,,,Class field: [instance] BathExponent.ck = ck,qutip,qutip,v5.0.4,,,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",self.ck = ck,self.ck = ck,,,,,,
bofin_baths.py,python,class_field,,,Class field: [instance] BathExponent.vk = vk,qutip,qutip,v5.0.4,,,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",self.vk = vk,self.vk = vk,,,,,,
bofin_baths.py,python,class_field,,,Class field: [instance] BathExponent.ck2 = ck2,qutip,qutip,v5.0.4,,,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",self.ck2 = ck2,self.ck2 = ck2,,,,,,
bofin_baths.py,python,class_field,,,Class field: [instance] BathExponent.sigma_bar_k_offset = sigma_bar_k_offset,qutip,qutip,v5.0.4,,,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",self.sigma_bar_k_offset = sigma_bar_k_offset,self.sigma_bar_k_offset = sigma_bar_k_offset,,,,,,
bofin_baths.py,python,class_field,,,Class field: [instance] BathExponent.tag = tag,qutip,qutip,v5.0.4,,,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",self.tag = tag,self.tag = tag,,,,,,
bofin_baths.py,python,class_field,,,Class field: [instance] Bath.exponents = exponents,qutip,qutip,v5.0.4,,,,,,,,,Bath,__init__,"(self, exponents)",self.exponents = exponents,self.exponents = exponents,,,,,,
bofin_baths.py,python,class_field,,,"Class field: [instance] BosonicBath._check_cks_and_vks(ck_real, vk_real, ck_imag, vk_imag)",qutip,qutip,v5.0.4,,,,,,,,,BosonicBath,__init__,"(
            self, Q, ck_real, vk_real, ck_imag, vk_imag, combine=True,
            tag=None,
    )","self._check_cks_and_vks(ck_real, vk_real, ck_imag, vk_imag)","self._check_cks_and_vks(ck_real, vk_real, ck_imag, vk_imag)",,,,,,
bofin_baths.py,python,class_field,,,Class field: [instance] BosonicBath._check_coup_op(Q),qutip,qutip,v5.0.4,,,,,,,,,BosonicBath,__init__,"(
            self, Q, ck_real, vk_real, ck_imag, vk_imag, combine=True,
            tag=None,
    )",self._check_coup_op(Q),self._check_coup_op(Q),,,,,,
bofin_baths.py,python,class_field,,,"Class field: [instance] DrudeLorentzBath._dl_terminator = _DrudeLorentzTerminator(
            Q=Q, lam=lam, gamma=gamma, T=T,
        )",qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzBath,__init__,"(
        self, Q, lam, gamma, T, Nk, combine=True, tag=None,
    )","self._dl_terminator = _DrudeLorentzTerminator(
            Q=Q, lam=lam, gamma=gamma, T=T,
        )","self._dl_terminator = _DrudeLorentzTerminator(
            Q=Q, lam=lam, gamma=gamma, T=T,
        )",,,,,,
bofin_baths.py,python,class_field,,,"Class field: [instance] DrudeLorentzPadeBath._dl_terminator = _DrudeLorentzTerminator(
            Q=Q, lam=lam, gamma=gamma, T=T,
        )",qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPadeBath,__init__,"(
        self, Q, lam, gamma, T, Nk, combine=True, tag=None
    )","self._dl_terminator = _DrudeLorentzTerminator(
            Q=Q, lam=lam, gamma=gamma, T=T,
        )","self._dl_terminator = _DrudeLorentzTerminator(
            Q=Q, lam=lam, gamma=gamma, T=T,
        )",,,,,,
bofin_baths.py,python,class_field,,,Class field: [instance] _DrudeLorentzTerminator.Q = Q,qutip,qutip,v5.0.4,,,,,,,,,_DrudeLorentzTerminator,__init__,"(self, Q, lam, gamma, T)",self.Q = Q,self.Q = Q,,,,,,
bofin_baths.py,python,class_field,,,Class field: [instance] _DrudeLorentzTerminator.lam = lam,qutip,qutip,v5.0.4,,,,,,,,,_DrudeLorentzTerminator,__init__,"(self, Q, lam, gamma, T)",self.lam = lam,self.lam = lam,,,,,,
bofin_baths.py,python,class_field,,,Class field: [instance] _DrudeLorentzTerminator.gamma = gamma,qutip,qutip,v5.0.4,,,,,,,,,_DrudeLorentzTerminator,__init__,"(self, Q, lam, gamma, T)",self.gamma = gamma,self.gamma = gamma,,,,,,
bofin_baths.py,python,class_field,,,Class field: [instance] _DrudeLorentzTerminator.T = T,qutip,qutip,v5.0.4,,,,,,,,,_DrudeLorentzTerminator,__init__,"(self, Q, lam, gamma, T)",self.T = T,self.T = T,,,,,,
bofin_baths.py,python,class_field,,,"Class field: [instance] FermionicBath._check_cks_and_vks(ck_plus, vk_plus, ck_minus, vk_minus)",qutip,qutip,v5.0.4,,,,,,,,,FermionicBath,__init__,"(self, Q, ck_plus, vk_plus, ck_minus, vk_minus, tag=None)","self._check_cks_and_vks(ck_plus, vk_plus, ck_minus, vk_minus)","self._check_cks_and_vks(ck_plus, vk_plus, ck_minus, vk_minus)",,,,,,
bofin_baths.py,python,class_field,,,Class field: [instance] FermionicBath._check_coup_op(Q),qutip,qutip,v5.0.4,,,,,,,,,FermionicBath,__init__,"(self, Q, ck_plus, vk_plus, ck_minus, vk_minus, tag=None)",self._check_coup_op(Q),self._check_coup_op(Q),,,,,,
bofin_baths.py,python,class_method,,,"Class method: BathExponent._check_ck2(self, type, ck2)",qutip,qutip,v5.0.4,,,,,,,,,BathExponent,_check_ck2,"(self, type, ck2)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: BathExponent._check_sigma_bar_k_offset(self, type, offset)",qutip,qutip,v5.0.4,,,,,,,,,BathExponent,_check_sigma_bar_k_offset,"(self, type, offset)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: BathExponent._type_is_fermionic(self, type)",qutip,qutip,v5.0.4,,,,,,,,,BathExponent,_type_is_fermionic,"(self, type)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: BathExponent.__init__(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",qutip,qutip,v5.0.4,,,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",,,,,,,,
bofin_baths.py,python,class_method,,,Class method: BathExponent.__repr__(self),qutip,qutip,v5.0.4,,,,,,,,,BathExponent,__repr__,(self),,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: Bath.__init__(self, exponents)",qutip,qutip,v5.0.4,,,,,,,,,Bath,__init__,"(self, exponents)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: BosonicBath._check_cks_and_vks(self, ck_real, vk_real, ck_imag, vk_imag)",qutip,qutip,v5.0.4,,,,,,,,,BosonicBath,_check_cks_and_vks,"(self, ck_real, vk_real, ck_imag, vk_imag)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: BosonicBath._check_coup_op(self, Q)",qutip,qutip,v5.0.4,,,,,,,,,BosonicBath,_check_coup_op,"(self, Q)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: BosonicBath.__init__(
            self, Q, ck_real, vk_real, ck_imag, vk_imag, combine=True,
            tag=None,
    )",qutip,qutip,v5.0.4,,,,,,,,,BosonicBath,__init__,"(
            self, Q, ck_real, vk_real, ck_imag, vk_imag, combine=True,
            tag=None,
    )",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: [classmethod] BosonicBath.combine(cls, exponents, rtol=1e-5, atol=1e-7)",qutip,qutip,v5.0.4,,,,,,,,,BosonicBath,combine,"(cls, exponents, rtol=1e-5, atol=1e-7)",,,,classmethod,,,,
bofin_baths.py,python,class_method,,,"Class method: DrudeLorentzBath.__init__(
        self, Q, lam, gamma, T, Nk, combine=True, tag=None,
    )",qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzBath,__init__,"(
        self, Q, lam, gamma, T, Nk, combine=True, tag=None,
    )",,,,,,,,
bofin_baths.py,python,class_method,,,Class method: DrudeLorentzBath.terminator(self),qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzBath,terminator,(self),,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: DrudeLorentzBath._matsubara_params(self, lam, gamma, T, Nk)",qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzBath,_matsubara_params,"(self, lam, gamma, T, Nk)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: DrudeLorentzPadeBath.__init__(
        self, Q, lam, gamma, T, Nk, combine=True, tag=None
    )",qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPadeBath,__init__,"(
        self, Q, lam, gamma, T, Nk, combine=True, tag=None
    )",,,,,,,,
bofin_baths.py,python,class_method,,,Class method: DrudeLorentzPadeBath.terminator(self),qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPadeBath,terminator,(self),,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: DrudeLorentzPadeBath._corr(self, lam, gamma, T, Nk)",qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPadeBath,_corr,"(self, lam, gamma, T, Nk)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: DrudeLorentzPadeBath._cot(self, x)",qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPadeBath,_cot,"(self, x)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: DrudeLorentzPadeBath._kappa_epsilon(self, Nk)",qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPadeBath,_kappa_epsilon,"(self, Nk)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: DrudeLorentzPadeBath._delta(self, i, j)",qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPadeBath,_delta,"(self, i, j)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: DrudeLorentzPadeBath._calc_eps(self, Nk)",qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPadeBath,_calc_eps,"(self, Nk)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: DrudeLorentzPadeBath._calc_chi(self, Nk)",qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPadeBath,_calc_chi,"(self, Nk)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: _DrudeLorentzTerminator.__init__(self, Q, lam, gamma, T)",qutip,qutip,v5.0.4,,,,,,,,,_DrudeLorentzTerminator,__init__,"(self, Q, lam, gamma, T)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: _DrudeLorentzTerminator.terminator(self, exponents)",qutip,qutip,v5.0.4,,,,,,,,,_DrudeLorentzTerminator,terminator,"(self, exponents)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: UnderDampedBath.__init__(
        self, Q, lam, gamma, w0, T, Nk, combine=True, tag=None,
    )",qutip,qutip,v5.0.4,,,,,,,,,UnderDampedBath,__init__,"(
        self, Q, lam, gamma, w0, T, Nk, combine=True, tag=None,
    )",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: UnderDampedBath._matsubara_params(self, lam, gamma, w0, T, Nk)",qutip,qutip,v5.0.4,,,,,,,,,UnderDampedBath,_matsubara_params,"(self, lam, gamma, w0, T, Nk)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: FermionicBath._check_cks_and_vks(self, ck_plus, vk_plus, ck_minus, vk_minus)",qutip,qutip,v5.0.4,,,,,,,,,FermionicBath,_check_cks_and_vks,"(self, ck_plus, vk_plus, ck_minus, vk_minus)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: FermionicBath._check_coup_op(self, Q)",qutip,qutip,v5.0.4,,,,,,,,,FermionicBath,_check_coup_op,"(self, Q)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: FermionicBath.__init__(self, Q, ck_plus, vk_plus, ck_minus, vk_minus, tag=None)",qutip,qutip,v5.0.4,,,,,,,,,FermionicBath,__init__,"(self, Q, ck_plus, vk_plus, ck_minus, vk_minus, tag=None)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: LorentzianBath.__init__(self, Q, gamma, w, mu, T, Nk, tag=None)",qutip,qutip,v5.0.4,,,,,,,,,LorentzianBath,__init__,"(self, Q, gamma, w, mu, T, Nk, tag=None)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: LorentzianBath._corr(self, gamma, w, mu, T, Nk, sigma)",qutip,qutip,v5.0.4,,,,,,,,,LorentzianBath,_corr,"(self, gamma, w, mu, T, Nk, sigma)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: LorentzianPadeBath.__init__(self, Q, gamma, w, mu, T, Nk, tag=None)",qutip,qutip,v5.0.4,,,,,,,,,LorentzianPadeBath,__init__,"(self, Q, gamma, w, mu, T, Nk, tag=None)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: LorentzianPadeBath._corr(self, gamma, w, mu, T, Nk, sigma)",qutip,qutip,v5.0.4,,,,,,,,,LorentzianPadeBath,_corr,"(self, gamma, w, mu, T, Nk, sigma)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: LorentzianPadeBath._kappa_epsilon(self, Nk)",qutip,qutip,v5.0.4,,,,,,,,,LorentzianPadeBath,_kappa_epsilon,"(self, Nk)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: LorentzianPadeBath._delta(self, i, j)",qutip,qutip,v5.0.4,,,,,,,,,LorentzianPadeBath,_delta,"(self, i, j)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: LorentzianPadeBath._calc_eps(self, Nk)",qutip,qutip,v5.0.4,,,,,,,,,LorentzianPadeBath,_calc_eps,"(self, Nk)",,,,,,,,
bofin_baths.py,python,class_method,,,"Class method: LorentzianPadeBath._calc_chi(self, Nk)",qutip,qutip,v5.0.4,,,,,,,,,LorentzianPadeBath,_calc_chi,"(self, Nk)",,,,,,,,
bofin_baths.py,python,class,,,Class: BathExponent,qutip,qutip,v5.0.4,,,,,,,,,BathExponent,,,,,,,,,,
bofin_baths.py,python,class,,,Class: Bath,qutip,qutip,v5.0.4,,,,,,,,,Bath,,,,,,,,,,
bofin_baths.py,python,class,,,Class: BosonicBath(Bath),qutip,qutip,v5.0.4,,,,,,,,,BosonicBath,,,,,(Bath),,,,,
bofin_baths.py,python,class,,,Class: DrudeLorentzBath(BosonicBath),qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzBath,,,,,(BosonicBath),,,,,
bofin_baths.py,python,class,,,Class: DrudeLorentzPadeBath(BosonicBath),qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPadeBath,,,,,(BosonicBath),,,,,
bofin_baths.py,python,class,,,Class: _DrudeLorentzTerminator,qutip,qutip,v5.0.4,,,,,,,,,_DrudeLorentzTerminator,,,,,,,,,,
bofin_baths.py,python,class,,,Class: UnderDampedBath(BosonicBath),qutip,qutip,v5.0.4,,,,,,,,,UnderDampedBath,,,,,(BosonicBath),,,,,
bofin_baths.py,python,class,,,Class: FermionicBath(Bath),qutip,qutip,v5.0.4,,,,,,,,,FermionicBath,,,,,(Bath),,,,,
bofin_baths.py,python,class,,,Class: LorentzianBath(FermionicBath),qutip,qutip,v5.0.4,,,,,,,,,LorentzianBath,,,,,(FermionicBath),,,,,
bofin_baths.py,python,class,,,Class: LorentzianPadeBath(FermionicBath),qutip,qutip,v5.0.4,,,,,,,,,LorentzianPadeBath,,,,,(FermionicBath),,,,,
bofin_baths.py,python,function,_isequal,"(Q1, Q2, tol)","Function: _isequal(Q1, Q2, tol)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
bofin_baths.py,python,constant,,,"Constant: __all__ = [
    ""BathExponent"",
    ""Bath"",
    ""BosonicBath"",
    ""DrudeLorentzBath"",
    ""DrudeLorentzPadeBath"",
    ""UnderDampedBath"",
    ""FermionicBath"",
    ""LorentzianBath"",
    ""LorentzianPadeBath"",
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    ""BathExponent"",
    ""Bath"",
    ""BosonicBath"",
    ""DrudeLorentzBath"",
    ""DrudeLorentzPadeBath"",
    ""UnderDampedBath"",
    ""FermionicBath"",
    ""LorentzianBath"",
    ""LorentzianPadeBath"",
]",__all__,"[
    ""BathExponent"",
    ""Bath"",
    ""BosonicBath"",
    ""DrudeLorentzBath"",
    ""DrudeLorentzPadeBath"",
    ""UnderDampedBath"",
    ""FermionicBath"",
    ""LorentzianBath"",
    ""LorentzianPadeBath"",
]",,,,,,,,,,,,
bofin_baths.py,python,import,,,Import: enum,qutip,qutip,v5.0.4,import enum,enum,,,,,,,,,,,,,,,,,
bofin_baths.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
bofin_baths.py,python,local_import,,,Import: eigvalsh from scipy.linalg,qutip,qutip,v5.0.4,from scipy.linalg import eigvalsh,eigvalsh,scipy.linalg,scipy.linalg,,,,,,,,,,,,,,,
bofin_baths.py,python,local_import,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,data,qutip.core,qutip.core,,,,,,,,,,,,,,,
bofin_baths.py,python,local_import,,,Import: Qobj from qutip.core.qobj,qutip,qutip,v5.0.4,from qutip.core.qobj import Qobj,Qobj,qutip.core.qobj,qutip.core.qobj,,,,,,,,,,,,,,,
bofin_baths.py,python,local_import,,,Import: spre from qutip.core.superoperator,qutip,qutip,v5.0.4,"from qutip.core.superoperator import spre, spost",spre,qutip.core.superoperator,qutip.core.superoperator,,,,,,,,,,,,,,,
bofin_baths.py,python,local_import,,,Import: spost from qutip.core.superoperator,qutip,qutip,v5.0.4,"from qutip.core.superoperator import spre, spost",spost,qutip.core.superoperator,qutip.core.superoperator,,,,,,,,,,,,,,,
bofin_baths.py,python,,,,File: qutip\solver\heom,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
bofin_baths.py,python,,,,Directory: qutip\solver\heom\bofin_baths.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HierarchyADOs.exponents = exponents,qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)",self.exponents = exponents,self.exponents = exponents,,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HierarchyADOs.max_depth = max_depth,qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)",self.max_depth = max_depth,self.max_depth = max_depth,,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HierarchyADOs.dims = [exp.dim or (max_depth + 1) for exp in exponents],qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)",self.dims = [exp.dim or (max_depth + 1) for exp in self.exponents],self.dims = [exp.dim or (max_depth + 1) for exp in self.exponents],,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HierarchyADOs.vk = [exp.vk for exp in exponents],qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)",self.vk = [exp.vk for exp in self.exponents],self.vk = [exp.vk for exp in self.exponents],,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HierarchyADOs.ck = [exp.ck for exp in exponents],qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)",self.ck = [exp.ck for exp in self.exponents],self.ck = [exp.ck for exp in self.exponents],,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HierarchyADOs.ck2 = [exp.ck2 for exp in exponents],qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)",self.ck2 = [exp.ck2 for exp in self.exponents],self.ck2 = [exp.ck2 for exp in self.exponents],,,,,,
bofin_solvers.py,python,class_field,,,"Class field: [instance] HierarchyADOs.sigma_bar_k_offset = [
            exp.sigma_bar_k_offset for exp in exponents
        ]",qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)","self.sigma_bar_k_offset = [
            exp.sigma_bar_k_offset for exp in self.exponents
        ]","self.sigma_bar_k_offset = [
            exp.sigma_bar_k_offset for exp in self.exponents
        ]",,,,,,
bofin_solvers.py,python,class_field,,,"Class field: [instance] HierarchyADOs.labels = list(state_number_enumerate(dims, max_depth))",qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)","self.labels = list(state_number_enumerate(self.dims, max_depth))","self.labels = list(state_number_enumerate(self.dims, max_depth))",,,,,,
bofin_solvers.py,python,class_field,,,"Class field: [instance] HierarchyADOs._label_idx = {s: i for i, s in enumerate(labels)}",qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)","self._label_idx = {s: i for i, s in enumerate(self.labels)}","self._label_idx = {s: i for i, s in enumerate(self.labels)}",,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HierarchyADOs.idx = _label_idx.__getitem__,qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)",self.idx = self._label_idx.__getitem__,self.idx = self._label_idx.__getitem__,,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HierarchyADOsState.rho = rho,qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOsState,__init__,"(self, rho, ados, ado_state)",self.rho = rho,self.rho = rho,,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HierarchyADOsState._ado_state = ado_state,qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOsState,__init__,"(self, rho, ados, ado_state)",self._ado_state = ado_state,self._ado_state = ado_state,,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HierarchyADOsState._ados = ados,qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOsState,__init__,"(self, rho, ados, ado_state)",self._ados = ados,self._ados = ados,,,,,,
bofin_solvers.py,python,class_field,,,"Class field: HEOMSolver.name = ""heomsolver""",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,,,"name = ""heomsolver""",,,,name,"""heomsolver""",,
bofin_solvers.py,python,class_field,,,Class field: HEOMSolver._resultclass = HEOMResult,qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,,,_resultclass = HEOMResult,,,,_resultclass,HEOMResult,,
bofin_solvers.py,python,class_field,,,Class field: HEOMSolver._avail_integrators = {},qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,,,_avail_integrators = {},,,,_avail_integrators,{},,
bofin_solvers.py,python,class_field,,,"Class field: HEOMSolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": False,
        ""method"": ""adams"",
        ""store_ados"": False,
        ""state_data_type"": ""dense"",
    }",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,,,"solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": False,
        ""method"": ""adams"",
        ""store_ados"": False,
        ""state_data_type"": ""dense"",
    }",,,,solver_options,"{
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": False,
        ""method"": ""adams"",
        ""store_ados"": False,
        ""state_data_type"": ""dense"",
    }",,
bofin_solvers.py,python,class_field,,,"Class field: [instance] HEOMSolver.L_sys = (
            liouvillian(H) if H.type == ""oper""  # hamiltonian
            else H  # already a liouvillian
        )",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)","self.L_sys = (
            liouvillian(H) if H.type == ""oper""  # hamiltonian
            else H  # already a liouvillian
        )","self.L_sys = (
            liouvillian(H) if H.type == ""oper""  # hamiltonian
            else H  # already a liouvillian
        )",,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HEOMSolver._sys_shape = int(np.sqrt(L_sys.shape[0])),qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._sys_shape = int(np.sqrt(self.L_sys.shape[0])),self._sys_shape = int(np.sqrt(self.L_sys.shape[0])),,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HEOMSolver._sup_shape = L_sys.shape[0],qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._sup_shape = self.L_sys.shape[0],self._sup_shape = self.L_sys.shape[0],,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HEOMSolver._sys_dims = L_sys.dims[0],qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._sys_dims = self.L_sys.dims[0],self._sys_dims = self.L_sys.dims[0],,,,,,
bofin_solvers.py,python,class_field,,,"Class field: [instance] HEOMSolver.ados = HierarchyADOs(
            _combine_bath_exponents(bath), max_depth,
        )",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)","self.ados = HierarchyADOs(
            self._combine_bath_exponents(bath), max_depth,
        )","self.ados = HierarchyADOs(
            self._combine_bath_exponents(bath), max_depth,
        )",,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HEOMSolver._n_ados = len(ados.labels),qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._n_ados = len(self.ados.labels),self._n_ados = len(self.ados.labels),,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HEOMSolver._n_exponents = len(ados.exponents),qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._n_exponents = len(self.ados.exponents),self._n_exponents = len(self.ados.exponents),,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HEOMSolver._init_ados_time = time() - _time_start,qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._init_ados_time = time() - _time_start,self._init_ados_time = time() - _time_start,,,,,,
bofin_solvers.py,python,class_field,,,"Class field: [instance] HEOMSolver._sId = _data.identity(_sup_shape, dtype=""csr"")",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)","self._sId = _data.identity(self._sup_shape, dtype=""csr"")","self._sId = _data.identity(self._sup_shape, dtype=""csr"")",,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HEOMSolver._spreQ = [spre(op).data for op in Qs],qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._spreQ = [spre(op).data for op in Qs],self._spreQ = [spre(op).data for op in Qs],,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HEOMSolver._spostQ = [spost(op).data for op in Qs],qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._spostQ = [spost(op).data for op in Qs],self._spostQ = [spost(op).data for op in Qs],,,,,,
bofin_solvers.py,python,class_field,,,"Class field: [instance] HEOMSolver._s_pre_minus_post_Q = [
            _data.sub(_spreQ[k], _spostQ[k])
            for k in range(_n_exponents)
        ]",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)","self._s_pre_minus_post_Q = [
            _data.sub(self._spreQ[k], self._spostQ[k])
            for k in range(self._n_exponents)
        ]","self._s_pre_minus_post_Q = [
            _data.sub(self._spreQ[k], self._spostQ[k])
            for k in range(self._n_exponents)
        ]",,,,,,
bofin_solvers.py,python,class_field,,,"Class field: [instance] HEOMSolver._s_pre_plus_post_Q = [
            _data.add(_spreQ[k], _spostQ[k])
            for k in range(_n_exponents)
        ]",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)","self._s_pre_plus_post_Q = [
            _data.add(self._spreQ[k], self._spostQ[k])
            for k in range(self._n_exponents)
        ]","self._s_pre_plus_post_Q = [
            _data.add(self._spreQ[k], self._spostQ[k])
            for k in range(self._n_exponents)
        ]",,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HEOMSolver._spreQdag = [spre(op.dag()).data for op in Qs],qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._spreQdag = [spre(op.dag()).data for op in Qs],self._spreQdag = [spre(op.dag()).data for op in Qs],,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HEOMSolver._spostQdag = [spost(op.dag()).data for op in Qs],qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._spostQdag = [spost(op.dag()).data for op in Qs],self._spostQdag = [spost(op.dag()).data for op in Qs],,,,,,
bofin_solvers.py,python,class_field,,,"Class field: [instance] HEOMSolver._s_pre_minus_post_Qdag = [
            _data.sub(_spreQdag[k], _spostQdag[k])
            for k in range(_n_exponents)
        ]",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)","self._s_pre_minus_post_Qdag = [
            _data.sub(self._spreQdag[k], self._spostQdag[k])
            for k in range(self._n_exponents)
        ]","self._s_pre_minus_post_Qdag = [
            _data.sub(self._spreQdag[k], self._spostQdag[k])
            for k in range(self._n_exponents)
        ]",,,,,,
bofin_solvers.py,python,class_field,,,"Class field: [instance] HEOMSolver._s_pre_plus_post_Qdag = [
            _data.add(_spreQdag[k], _spostQdag[k])
            for k in range(_n_exponents)
        ]",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)","self._s_pre_plus_post_Qdag = [
            _data.add(self._spreQdag[k], self._spostQdag[k])
            for k in range(self._n_exponents)
        ]","self._s_pre_plus_post_Qdag = [
            _data.add(self._spreQdag[k], self._spostQdag[k])
            for k in range(self._n_exponents)
        ]",,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HEOMSolver._init_superop_cache_time = time() - _time_start,qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._init_superop_cache_time = time() - _time_start,self._init_superop_cache_time = time() - _time_start,,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HEOMSolver._init_rhs_time = time() - _time_start,qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._init_rhs_time = time() - _time_start,self._init_rhs_time = time() - _time_start,,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HSolverDL.coup_strength = coup_strength,qutip,qutip,v5.0.4,,,,,,,,,HSolverDL,__init__,"(
        self, H_sys, coup_op, coup_strength, temperature,
        N_cut, N_exp, cut_freq, *, bnd_cut_approx=False, options=None,
        combine=True,
    )",self.coup_strength = coup_strength,self.coup_strength = coup_strength,,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HSolverDL.cut_freq = cut_freq,qutip,qutip,v5.0.4,,,,,,,,,HSolverDL,__init__,"(
        self, H_sys, coup_op, coup_strength, temperature,
        N_cut, N_exp, cut_freq, *, bnd_cut_approx=False, options=None,
        combine=True,
    )",self.cut_freq = cut_freq,self.cut_freq = cut_freq,,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HSolverDL.temperature = temperature,qutip,qutip,v5.0.4,,,,,,,,,HSolverDL,__init__,"(
        self, H_sys, coup_op, coup_strength, temperature,
        N_cut, N_exp, cut_freq, *, bnd_cut_approx=False, options=None,
        combine=True,
    )",self.temperature = temperature,self.temperature = temperature,,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HSolverDL.N_exp = N_exp,qutip,qutip,v5.0.4,,,,,,,,,HSolverDL,__init__,"(
        self, H_sys, coup_op, coup_strength, temperature,
        N_cut, N_exp, cut_freq, *, bnd_cut_approx=False, options=None,
        combine=True,
    )",self.N_exp = N_exp,self.N_exp = N_exp,,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] HSolverDL.bnd_cut_approx = bnd_cut_approx,qutip,qutip,v5.0.4,,,,,,,,,HSolverDL,__init__,"(
        self, H_sys, coup_op, coup_strength, temperature,
        N_cut, N_exp, cut_freq, *, bnd_cut_approx=False, options=None,
        combine=True,
    )",self.bnd_cut_approx = bnd_cut_approx,self.bnd_cut_approx = bnd_cut_approx,,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] _GatherHEOMRHS._block_size = block,qutip,qutip,v5.0.4,,,,,,,,,_GatherHEOMRHS,__init__,"(self, f_idx, block, nhe)",self._block_size = block,self._block_size = block,,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] _GatherHEOMRHS._n_blocks = nhe,qutip,qutip,v5.0.4,,,,,,,,,_GatherHEOMRHS,__init__,"(self, f_idx, block, nhe)",self._n_blocks = nhe,self._n_blocks = nhe,,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] _GatherHEOMRHS._f_idx = f_idx,qutip,qutip,v5.0.4,,,,,,,,,_GatherHEOMRHS,__init__,"(self, f_idx, block, nhe)",self._f_idx = f_idx,self._f_idx = f_idx,,,,,,
bofin_solvers.py,python,class_field,,,Class field: [instance] _GatherHEOMRHS._ops = [],qutip,qutip,v5.0.4,,,,,,,,,_GatherHEOMRHS,__init__,"(self, f_idx, block, nhe)",self._ops = [],self._ops = [],,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HierarchyADOs.__init__(self, exponents, max_depth)",qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HierarchyADOs.idx(self, label)",qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOs,idx,"(self, label)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HierarchyADOs.next(self, label, k)",qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOs,next,"(self, label, k)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HierarchyADOs.prev(self, label, k)",qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOs,prev,"(self, label, k)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HierarchyADOs.exps(self, label)",qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOs,exps,"(self, label)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HierarchyADOs.filter(self, level=None, tags=None, dims=None, types=None)",qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOs,filter,"(self, level=None, tags=None, dims=None, types=None)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HierarchyADOsState.__init__(self, rho, ados, ado_state)",qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOsState,__init__,"(self, rho, ados, ado_state)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HierarchyADOsState.__getattr__(self, name)",qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOsState,__getattr__,"(self, name)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HierarchyADOsState.extract(self, idx_or_label)",qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOsState,extract,"(self, idx_or_label)",,,,,,,,
bofin_solvers.py,python,class_method,,,Class method: HEOMResult._post_init(self),qutip,qutip,v5.0.4,,,,,,,,,HEOMResult,_post_init,(self),,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HEOMResult._e_op_func(self, e_op)",qutip,qutip,v5.0.4,,,,,,,,,HEOMResult,_e_op_func,"(self, e_op)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HEOMResult._pre_copy(self, state)",qutip,qutip,v5.0.4,,,,,,,,,HEOMResult,_pre_copy,"(self, state)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HEOMResult._store_state(self, t, ado_state)",qutip,qutip,v5.0.4,,,,,,,,,HEOMResult,_store_state,"(self, t, ado_state)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HEOMResult._store_final_state(self, t, ado_state)",qutip,qutip,v5.0.4,,,,,,,,,HEOMResult,_store_final_state,"(self, t, ado_state)",,,,,,,,
bofin_solvers.py,python,class_method,,,Class method: [property] HEOMResult.final_ado_state(self),qutip,qutip,v5.0.4,,,,,,,,,HEOMResult,final_ado_state,(self),,,,property,,,,
bofin_solvers.py,python,class_method,,,"Class method: HEOMSolver.__init__(self, H, bath, max_depth, *, options=None)",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",,,,,,,,
bofin_solvers.py,python,class_method,,,Class method: [property] HEOMSolver.sys_dims(self),qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,sys_dims,(self),,,,property,,,,
bofin_solvers.py,python,class_method,,,Class method: HEOMSolver._initialize_stats(self),qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,_initialize_stats,(self),,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HEOMSolver._combine_bath_exponents(self, bath)",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,_combine_bath_exponents,"(self, bath)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HEOMSolver._grad_n(self, he_n)",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,_grad_n,"(self, he_n)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HEOMSolver._grad_prev(self, he_n, k)",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,_grad_prev,"(self, he_n, k)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HEOMSolver._grad_prev_bosonic(self, he_n, k)",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,_grad_prev_bosonic,"(self, he_n, k)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HEOMSolver._grad_prev_fermionic(self, he_n, k)",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,_grad_prev_fermionic,"(self, he_n, k)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HEOMSolver._grad_next(self, he_n, k)",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,_grad_next,"(self, he_n, k)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HEOMSolver._grad_next_bosonic(self, he_n, k)",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,_grad_next_bosonic,"(self, he_n, k)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HEOMSolver._grad_next_fermionic(self, he_n, k)",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,_grad_next_fermionic,"(self, he_n, k)",,,,,,,,
bofin_solvers.py,python,class_method,,,Class method: HEOMSolver._rhs(self),qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,_rhs,(self),,,,,,,,
bofin_solvers.py,python,class_method,,,Class method: HEOMSolver._calculate_rhs(self),qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,_calculate_rhs,(self),,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HEOMSolver.steady_state(
        self,
        use_mkl=True, mkl_max_iter_refine=100, mkl_weighted_matching=False
    )",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,steady_state,"(
        self,
        use_mkl=True, mkl_max_iter_refine=100, mkl_weighted_matching=False
    )",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HEOMSolver.run(self, state0, tlist, *, args=None, e_ops=None)",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,run,"(self, state0, tlist, *, args=None, e_ops=None)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HEOMSolver._prepare_state(self, state)",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,_prepare_state,"(self, state)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HEOMSolver._restore_state(self, state, *, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,_restore_state,"(self, state, *, copy=True)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: HEOMSolver.start(self, state0, t0)",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,start,"(self, state0, t0)",,,,,,,,
bofin_solvers.py,python,class_method,,,Class method: [property] HEOMSolver.options(self),qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,options,(self),,,,property,,,,
bofin_solvers.py,python,class_method,,,"Class method: [options.setter] HEOMSolver.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,options,"(self, new_options)",,,,options.setter,,,,
bofin_solvers.py,python,class_method,,,"Class method: HSolverDL.__init__(
        self, H_sys, coup_op, coup_strength, temperature,
        N_cut, N_exp, cut_freq, *, bnd_cut_approx=False, options=None,
        combine=True,
    )",qutip,qutip,v5.0.4,,,,,,,,,HSolverDL,__init__,"(
        self, H_sys, coup_op, coup_strength, temperature,
        N_cut, N_exp, cut_freq, *, bnd_cut_approx=False, options=None,
        combine=True,
    )",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: _GatherHEOMRHS.__init__(self, f_idx, block, nhe)",qutip,qutip,v5.0.4,,,,,,,,,_GatherHEOMRHS,__init__,"(self, f_idx, block, nhe)",,,,,,,,
bofin_solvers.py,python,class_method,,,"Class method: _GatherHEOMRHS.add_op(self, row_he, col_he, op)",qutip,qutip,v5.0.4,,,,,,,,,_GatherHEOMRHS,add_op,"(self, row_he, col_he, op)",,,,,,,,
bofin_solvers.py,python,class_method,,,Class method: _GatherHEOMRHS.gather(self),qutip,qutip,v5.0.4,,,,,,,,,_GatherHEOMRHS,gather,(self),,,,,,,,
bofin_solvers.py,python,class,,,Class: HierarchyADOs,qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOs,,,,,,,,,,
bofin_solvers.py,python,class,,,Class: HierarchyADOsState,qutip,qutip,v5.0.4,,,,,,,,,HierarchyADOsState,,,,,,,,,,
bofin_solvers.py,python,class,,,Class: HEOMResult(Result),qutip,qutip,v5.0.4,,,,,,,,,HEOMResult,,,,,(Result),,,,,
bofin_solvers.py,python,class,,,Class: HEOMSolver(Solver),qutip,qutip,v5.0.4,,,,,,,,,HEOMSolver,,,,,(Solver),,,,,
bofin_solvers.py,python,class,,,Class: HSolverDL(HEOMSolver),qutip,qutip,v5.0.4,,,,,,,,,HSolverDL,,,,,(HEOMSolver),,,,,
bofin_solvers.py,python,class,,,Class: _GatherHEOMRHS,qutip,qutip,v5.0.4,,,,,,,,,_GatherHEOMRHS,,,,,,,,,,
bofin_solvers.py,python,function,heomsolve,"(
    H, bath, max_depth, state0, tlist, *, e_ops=None, args=None, options=None,
)","Function: heomsolve(
    H, bath, max_depth, state0, tlist, *, e_ops=None, args=None, options=None,
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
bofin_solvers.py,python,constant,,,"Constant: __all__ = [
    ""heomsolve"",
    ""HierarchyADOs"",
    ""HierarchyADOsState"",
    ""HEOMResult"",
    ""HEOMSolver"",
    ""HSolverDL"",
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    ""heomsolve"",
    ""HierarchyADOs"",
    ""HierarchyADOsState"",
    ""HEOMResult"",
    ""HEOMSolver"",
    ""HSolverDL"",
]",__all__,"[
    ""heomsolve"",
    ""HierarchyADOs"",
    ""HierarchyADOsState"",
    ""HEOMResult"",
    ""HEOMSolver"",
    ""HSolverDL"",
]",,,,,,,,,,,,
bofin_solvers.py,python,import,,,Import: time from time,qutip,qutip,v5.0.4,from time import time,time,time,,,,,,,,,,,,,,,,
bofin_solvers.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
bofin_solvers.py,python,import,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,scipy.sparse,,,,,,,,,,,,,,,,,
bofin_solvers.py,python,import,,,Import: state_number_enumerate from qutip,qutip,qutip,v5.0.4,from qutip import state_number_enumerate,state_number_enumerate,qutip,,,,,,,,,,,,,,,,
bofin_solvers.py,python,local_import,,,Import: spsolve from scipy.sparse.linalg,qutip,qutip,v5.0.4,from scipy.sparse.linalg import spsolve,spsolve,scipy.sparse.linalg,scipy.sparse.linalg,,,,,,,,,,,,,,,
bofin_solvers.py,python,local_import,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings,settings,qutip.settings,qutip.settings,,,,,,,,,,,,,,,
bofin_solvers.py,python,local_import,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,data,qutip.core,qutip.core,,,,,,,,,,,,,,,
bofin_solvers.py,python,local_import,,,Import: csr from qutip.core.data,qutip,qutip,v5.0.4,from qutip.core.data import csr as _csr,csr,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
bofin_solvers.py,python,local_import,,,Import: Qobj from qutip.core,qutip,qutip,v5.0.4,"from qutip.core import Qobj, QobjEvo",Qobj,qutip.core,qutip.core,,,,,,,,,,,,,,,
bofin_solvers.py,python,local_import,,,Import: QobjEvo from qutip.core,qutip,qutip,v5.0.4,"from qutip.core import Qobj, QobjEvo",QobjEvo,qutip.core,qutip.core,,,,,,,,,,,,,,,
bofin_solvers.py,python,local_import,,,Import: liouvillian from qutip.core.superoperator,qutip,qutip,v5.0.4,"from qutip.core.superoperator import liouvillian, spre, spost",liouvillian,qutip.core.superoperator,qutip.core.superoperator,,,,,,,,,,,,,,,
bofin_solvers.py,python,local_import,,,Import: spre from qutip.core.superoperator,qutip,qutip,v5.0.4,"from qutip.core.superoperator import liouvillian, spre, spost",spre,qutip.core.superoperator,qutip.core.superoperator,,,,,,,,,,,,,,,
bofin_solvers.py,python,local_import,,,Import: spost from qutip.core.superoperator,qutip,qutip,v5.0.4,"from qutip.core.superoperator import liouvillian, spre, spost",spost,qutip.core.superoperator,qutip.core.superoperator,,,,,,,,,,,,,,,
bofin_solvers.py,python,,,,File: qutip\solver\heom,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
bofin_solvers.py,python,,,,Directory: qutip\solver\heom\bofin_solvers.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,constant,,,"Constant: __all__ = [
    ""BathExponent"",
    ""Bath"",
    ""BosonicBath"",
    ""DrudeLorentzBath"",
    ""DrudeLorentzPadeBath"",
    ""UnderDampedBath"",
    ""FermionicBath"",
    ""LorentzianBath"",
    ""LorentzianPadeBath"",
    ""heomsolve"",
    ""HEOMSolver"",
    ""HEOMResult"",
    ""HSolverDL"",
    ""HierarchyADOs"",
    ""HierarchyADOsState"",
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    ""BathExponent"",
    ""Bath"",
    ""BosonicBath"",
    ""DrudeLorentzBath"",
    ""DrudeLorentzPadeBath"",
    ""UnderDampedBath"",
    ""FermionicBath"",
    ""LorentzianBath"",
    ""LorentzianPadeBath"",
    ""heomsolve"",
    ""HEOMSolver"",
    ""HEOMResult"",
    ""HSolverDL"",
    ""HierarchyADOs"",
    ""HierarchyADOsState"",
]",__all__,"[
    ""BathExponent"",
    ""Bath"",
    ""BosonicBath"",
    ""DrudeLorentzBath"",
    ""DrudeLorentzPadeBath"",
    ""UnderDampedBath"",
    ""FermionicBath"",
    ""LorentzianBath"",
    ""LorentzianPadeBath"",
    ""heomsolve"",
    ""HEOMSolver"",
    ""HEOMResult"",
    ""HSolverDL"",
    ""HierarchyADOs"",
    ""HierarchyADOsState"",
]",,,,,,,,,,,,
__init__.py,python,,,,File: qutip\solver\heom,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,Directory: qutip\solver\heom\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
integrator.py,python,class_field,,,Class field: Integrator.integrator_options = {},qutip,qutip,v5.0.4,,,,,,,,,Integrator,,,integrator_options = {},,,,integrator_options,{},,
integrator.py,python,class_field,,,Class field: Integrator._options = None,qutip,qutip,v5.0.4,,,,,,,,,Integrator,,,_options = None,,,,_options,None,,
integrator.py,python,class_field,,,Class field: Integrator.support_time_dependant = None,qutip,qutip,v5.0.4,,,,,,,,,Integrator,,,support_time_dependant = None,,,,support_time_dependant,None,,
integrator.py,python,class_field,,,Class field: Integrator.supports_blackbox = None,qutip,qutip,v5.0.4,,,,,,,,,Integrator,,,supports_blackbox = None,,,,supports_blackbox,None,,
integrator.py,python,class_field,,,Class field: Integrator.name = None,qutip,qutip,v5.0.4,,,,,,,,,Integrator,,,name = None,,,,name,None,,
integrator.py,python,class_field,,,"Class field: Integrator.method = """"",qutip,qutip,v5.0.4,,,,,,,,,Integrator,,,"method = """"",,,,method,"""""",,
integrator.py,python,class_field,,,Class field: [instance] Integrator.system = system,qutip,qutip,v5.0.4,,,,,,,,,Integrator,__init__,"(self, system, options)",self.system = system,self.system = system,,,,,,
integrator.py,python,class_field,,,Class field: [instance] Integrator._is_set = False,qutip,qutip,v5.0.4,,,,,,,,,Integrator,__init__,"(self, system, options)",self._is_set = False,self._is_set = False,,,,,,
integrator.py,python,class_field,,,"Class field: [instance] Integrator._back = (np.inf, None)",qutip,qutip,v5.0.4,,,,,,,,,Integrator,__init__,"(self, system, options)","self._back = (np.inf, None)","self._back = (np.inf, None)",,,,,,
integrator.py,python,class_field,,,Class field: [instance] Integrator._options = integrator_options.copy(),qutip,qutip,v5.0.4,,,,,,,,,Integrator,__init__,"(self, system, options)",self._options = self.integrator_options.copy(),self._options = self.integrator_options.copy(),,,,,,
integrator.py,python,class_field,,,Class field: [instance] Integrator.options = options,qutip,qutip,v5.0.4,,,,,,,,,Integrator,__init__,"(self, system, options)",self.options = options,self.options = options,,,,,,
integrator.py,python,class_field,,,Class field: [instance] Integrator._prepare(),qutip,qutip,v5.0.4,,,,,,,,,Integrator,__init__,"(self, system, options)",self._prepare(),self._prepare(),,,,,,
integrator.py,python,class_method,,,"Class method: Integrator.__init__(self, system, options)",qutip,qutip,v5.0.4,,,,,,,,,Integrator,__init__,"(self, system, options)",,,,,,,,
integrator.py,python,class_method,,,Class method: Integrator._prepare(self),qutip,qutip,v5.0.4,,,,,,,,,Integrator,_prepare,(self),,,,,,,,
integrator.py,python,class_method,,,"Class method: Integrator.set_state(self, t, state0)",qutip,qutip,v5.0.4,,,,,,,,,Integrator,set_state,"(self, t, state0)",,,,,,,,
integrator.py,python,class_method,,,"Class method: Integrator.integrate(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,Integrator,integrate,"(self, t, copy=True)",,,,,,,,
integrator.py,python,class_method,,,"Class method: Integrator.mcstep(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,Integrator,mcstep,"(self, t, copy=True)",,,,,,,,
integrator.py,python,class_method,,,"Class method: Integrator.get_state(self, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,Integrator,get_state,"(self, copy=True)",,,,,,,,
integrator.py,python,class_method,,,"Class method: Integrator.run(self, tlist)",qutip,qutip,v5.0.4,,,,,,,,,Integrator,run,"(self, tlist)",,,,,,,,
integrator.py,python,class_method,,,"Class method: Integrator.reset(self, hard=False)",qutip,qutip,v5.0.4,,,,,,,,,Integrator,reset,"(self, hard=False)",,,,,,,,
integrator.py,python,class_method,,,"Class method: Integrator.arguments(self, args)",qutip,qutip,v5.0.4,,,,,,,,,Integrator,arguments,"(self, args)",,,,,,,,
integrator.py,python,class_method,,,Class method: [property] Integrator.options(self),qutip,qutip,v5.0.4,,,,,,,,,Integrator,options,(self),,,,property,,,,
integrator.py,python,class_method,,,"Class method: [options.setter] Integrator.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,,,Integrator,options,"(self, new_options)",,,,options.setter,,,,
integrator.py,python,class,,,Class: IntegratorException(Exception),qutip,qutip,v5.0.4,,,,,,,,,IntegratorException,,,,,(Exception),,,,,
integrator.py,python,class,,,Class: Integrator,qutip,qutip,v5.0.4,,,,,,,,,Integrator,,,,,,,,,,
integrator.py,python,constant,,,"Constant: __all__ = ['Integrator', 'IntegratorException']",qutip,qutip,v5.0.4,,,,,"__all__ = ['Integrator', 'IntegratorException']",__all__,"['Integrator', 'IntegratorException']",,,,,,,,,,,,
integrator.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
integrator.py,python,,,,File: qutip\solver\integrator,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
integrator.py,python,,,,Directory: qutip\solver\integrator\integrator.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
krylov.py,python,class_field,,,"Class field: IntegratorKrylov.integrator_options = {
        'atol': 1e-7,
        'nsteps': 100,
        'min_step': 1e-5,
        'max_step': 1e5,
        'krylov_dim': 0,
        'sub_system_tol': 1e-7,
        'always_compute_step': False,
    }",qutip,qutip,v5.0.4,,,,,,,,,IntegratorKrylov,,,"integrator_options = {
        'atol': 1e-7,
        'nsteps': 100,
        'min_step': 1e-5,
        'max_step': 1e5,
        'krylov_dim': 0,
        'sub_system_tol': 1e-7,
        'always_compute_step': False,
    }",,,,integrator_options,"{
        'atol': 1e-7,
        'nsteps': 100,
        'min_step': 1e-5,
        'max_step': 1e5,
        'krylov_dim': 0,
        'sub_system_tol': 1e-7,
        'always_compute_step': False,
    }",,
krylov.py,python,class_field,,,Class field: IntegratorKrylov.support_time_dependant = False,qutip,qutip,v5.0.4,,,,,,,,,IntegratorKrylov,,,support_time_dependant = False,,,,support_time_dependant,False,,
krylov.py,python,class_field,,,Class field: IntegratorKrylov.supports_blackbox = False,qutip,qutip,v5.0.4,,,,,,,,,IntegratorKrylov,,,supports_blackbox = False,,,,supports_blackbox,False,,
krylov.py,python,class_field,,,Class field: IntegratorKrylov.method = 'krylov',qutip,qutip,v5.0.4,,,,,,,,,IntegratorKrylov,,,method = 'krylov',,,,method,'krylov',,
krylov.py,python,class_method,,,Class method: IntegratorKrylov._prepare(self),qutip,qutip,v5.0.4,,,,,,,,,IntegratorKrylov,_prepare,(self),,,,,,,,
krylov.py,python,class_method,,,"Class method: IntegratorKrylov._lanczos_algorithm(self, psi)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorKrylov,_lanczos_algorithm,"(self, psi)",,,,,,,,
krylov.py,python,class_method,,,"Class method: IntegratorKrylov._compute_krylov_set(self, krylov_tridiag, krylov_basis)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorKrylov,_compute_krylov_set,"(self, krylov_tridiag, krylov_basis)",,,,,,,,
krylov.py,python,class_method,,,"Class method: IntegratorKrylov._compute_psi(self, dt, eigenvalues, U, e0)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorKrylov,_compute_psi,"(self, dt, eigenvalues, U, e0)",,,,,,,,
krylov.py,python,class_method,,,"Class method: IntegratorKrylov._compute_max_step(self, krylov_tridiag, krylov_basis, krylov_state=None)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorKrylov,_compute_max_step,"(self, krylov_tridiag, krylov_basis, krylov_state=None)",,,,,,,,
krylov.py,python,class_method,,,"Class method: IntegratorKrylov.set_state(self, t, state0)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorKrylov,set_state,"(self, t, state0)",,,,,,,,
krylov.py,python,class_method,,,"Class method: IntegratorKrylov.get_state(self, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorKrylov,get_state,"(self, copy=True)",,,,,,,,
krylov.py,python,class_method,,,"Class method: IntegratorKrylov.integrate(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorKrylov,integrate,"(self, t, copy=True)",,,,,,,,
krylov.py,python,class_method,,,Class method: [property] IntegratorKrylov.options(self),qutip,qutip,v5.0.4,,,,,,,,,IntegratorKrylov,options,(self),,,,property,,,,
krylov.py,python,class_method,,,"Class method: [options.setter] IntegratorKrylov.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorKrylov,options,"(self, new_options)",,,,options.setter,,,,
krylov.py,python,class,,,Class: IntegratorKrylov(Integrator),qutip,qutip,v5.0.4,,,,,,,,,IntegratorKrylov,,,,,(Integrator),,,,,
krylov.py,python,constant,,,"Constant: __all__ = [""IntegratorKrylov""]",qutip,qutip,v5.0.4,,,,,"__all__ = [""IntegratorKrylov""]",__all__,"[""IntegratorKrylov""]",,,,,,,,,,,,
krylov.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
krylov.py,python,local_import,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,data,qutip.core,qutip.core,,,,,,,,,,,,,,,
krylov.py,python,local_import,,,Import: root_scalar from scipy.optimize,qutip,qutip,v5.0.4,from scipy.optimize import root_scalar,root_scalar,scipy.optimize,scipy.optimize,,,,,,,,,,,,,,,
krylov.py,python,,,,File: qutip\solver\integrator,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
krylov.py,python,,,,Directory: qutip\solver\integrator\krylov.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qutip_integrator.py,python,class_field,,,"Class field: IntegratorVern7.integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 1000,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
        'interpolate': True,
    }",qutip,qutip,v5.0.4,,,,,,,,,IntegratorVern7,,,"integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 1000,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
        'interpolate': True,
    }",,,,integrator_options,"{
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 1000,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
        'interpolate': True,
    }",,
qutip_integrator.py,python,class_field,,,Class field: IntegratorVern7.support_time_dependant = True,qutip,qutip,v5.0.4,,,,,,,,,IntegratorVern7,,,support_time_dependant = True,,,,support_time_dependant,True,,
qutip_integrator.py,python,class_field,,,Class field: IntegratorVern7.supports_blackbox = True,qutip,qutip,v5.0.4,,,,,,,,,IntegratorVern7,,,supports_blackbox = True,,,,supports_blackbox,True,,
qutip_integrator.py,python,class_field,,,Class field: IntegratorVern7.method = 'vern7',qutip,qutip,v5.0.4,,,,,,,,,IntegratorVern7,,,method = 'vern7',,,,method,'vern7',,
qutip_integrator.py,python,class_field,,,"Class field: IntegratorVern9.integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 1000,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
        'interpolate': True,
    }",qutip,qutip,v5.0.4,,,,,,,,,IntegratorVern9,,,"integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 1000,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
        'interpolate': True,
    }",,,,integrator_options,"{
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 1000,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
        'interpolate': True,
    }",,
qutip_integrator.py,python,class_field,,,Class field: IntegratorVern9.method = 'vern9',qutip,qutip,v5.0.4,,,,,,,,,IntegratorVern9,,,method = 'vern9',,,,method,'vern9',,
qutip_integrator.py,python,class_field,,,"Class field: IntegratorDiag.integrator_options = {""eigensolver_dtype"": ""dense""}",qutip,qutip,v5.0.4,,,,,,,,,IntegratorDiag,,,"integrator_options = {""eigensolver_dtype"": ""dense""}",,,,integrator_options,"{""eigensolver_dtype"": ""dense""}",,
qutip_integrator.py,python,class_field,,,Class field: IntegratorDiag.support_time_dependant = False,qutip,qutip,v5.0.4,,,,,,,,,IntegratorDiag,,,support_time_dependant = False,,,,support_time_dependant,False,,
qutip_integrator.py,python,class_field,,,Class field: IntegratorDiag.supports_blackbox = False,qutip,qutip,v5.0.4,,,,,,,,,IntegratorDiag,,,supports_blackbox = False,,,,supports_blackbox,False,,
qutip_integrator.py,python,class_field,,,Class field: IntegratorDiag.method = 'diag',qutip,qutip,v5.0.4,,,,,,,,,IntegratorDiag,,,method = 'diag',,,,method,'diag',,
qutip_integrator.py,python,class_method,,,Class method: IntegratorVern7._prepare(self),qutip,qutip,v5.0.4,,,,,,,,,IntegratorVern7,_prepare,(self),,,,,,,,
qutip_integrator.py,python,class_method,,,"Class method: IntegratorVern7.get_state(self, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorVern7,get_state,"(self, copy=True)",,,,,,,,
qutip_integrator.py,python,class_method,,,"Class method: IntegratorVern7.set_state(self, t, state)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorVern7,set_state,"(self, t, state)",,,,,,,,
qutip_integrator.py,python,class_method,,,"Class method: IntegratorVern7.integrate(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorVern7,integrate,"(self, t, copy=True)",,,,,,,,
qutip_integrator.py,python,class_method,,,"Class method: IntegratorVern7.mcstep(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorVern7,mcstep,"(self, t, copy=True)",,,,,,,,
qutip_integrator.py,python,class_method,,,Class method: IntegratorVern7._check_failed_integration(self),qutip,qutip,v5.0.4,,,,,,,,,IntegratorVern7,_check_failed_integration,(self),,,,,,,,
qutip_integrator.py,python,class_method,,,Class method: [property] IntegratorVern7.options(self),qutip,qutip,v5.0.4,,,,,,,,,IntegratorVern7,options,(self),,,,property,,,,
qutip_integrator.py,python,class_method,,,"Class method: [options.setter] IntegratorVern7.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorVern7,options,"(self, new_options)",,,,options.setter,,,,
qutip_integrator.py,python,class_method,,,"Class method: IntegratorDiag.__init__(self, system, options)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorDiag,__init__,"(self, system, options)",,,,,,,,
qutip_integrator.py,python,class_method,,,Class method: IntegratorDiag._prepare(self),qutip,qutip,v5.0.4,,,,,,,,,IntegratorDiag,_prepare,(self),,,,,,,,
qutip_integrator.py,python,class_method,,,"Class method: IntegratorDiag.integrate(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorDiag,integrate,"(self, t, copy=True)",,,,,,,,
qutip_integrator.py,python,class_method,,,"Class method: IntegratorDiag.mcstep(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorDiag,mcstep,"(self, t, copy=True)",,,,,,,,
qutip_integrator.py,python,class_method,,,"Class method: IntegratorDiag.get_state(self, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorDiag,get_state,"(self, copy=True)",,,,,,,,
qutip_integrator.py,python,class_method,,,"Class method: IntegratorDiag.set_state(self, t, state0)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorDiag,set_state,"(self, t, state0)",,,,,,,,
qutip_integrator.py,python,class_method,,,Class method: [property] IntegratorDiag.options(self),qutip,qutip,v5.0.4,,,,,,,,,IntegratorDiag,options,(self),,,,property,,,,
qutip_integrator.py,python,class_method,,,"Class method: [options.setter] IntegratorDiag.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorDiag,options,"(self, new_options)",,,,options.setter,,,,
qutip_integrator.py,python,class,,,Class: IntegratorVern7(Integrator),qutip,qutip,v5.0.4,,,,,,,,,IntegratorVern7,,,,,(Integrator),,,,,
qutip_integrator.py,python,class,,,Class: IntegratorVern9(IntegratorVern7),qutip,qutip,v5.0.4,,,,,,,,,IntegratorVern9,,,,,(IntegratorVern7),,,,,
qutip_integrator.py,python,class,,,Class: IntegratorDiag(Integrator),qutip,qutip,v5.0.4,,,,,,,,,IntegratorDiag,,,,,(Integrator),,,,,
qutip_integrator.py,python,constant,,,"Constant: __all__ = ['IntegratorVern7', 'IntegratorVern9', 'IntegratorDiag']",qutip,qutip,v5.0.4,,,,,"__all__ = ['IntegratorVern7', 'IntegratorVern9', 'IntegratorDiag']",__all__,"['IntegratorVern7', 'IntegratorVern9', 'IntegratorDiag']",,,,,,,,,,,,
qutip_integrator.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
qutip_integrator.py,python,import,,,Import: data from qutip,qutip,qutip,v5.0.4,from qutip import data as _data,data,qutip,,,,,,,,,,,,,,,,
qutip_integrator.py,python,,,,File: qutip\solver\integrator,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
qutip_integrator.py,python,,,,Directory: qutip\solver\integrator\qutip_integrator.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
scipy_integrator.py,python,class_field,,,"Class field: IntegratorScipyAdams.integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'order': 12,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
    }",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyAdams,,,"integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'order': 12,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
    }",,,,integrator_options,"{
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'order': 12,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
    }",,
scipy_integrator.py,python,class_field,,,Class field: IntegratorScipyAdams.support_time_dependant = True,qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyAdams,,,support_time_dependant = True,,,,support_time_dependant,True,,
scipy_integrator.py,python,class_field,,,Class field: IntegratorScipyAdams.supports_blackbox = True,qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyAdams,,,supports_blackbox = True,,,,supports_blackbox,True,,
scipy_integrator.py,python,class_field,,,Class field: IntegratorScipyAdams.method = 'adams',qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyAdams,,,method = 'adams',,,,method,'adams',,
scipy_integrator.py,python,class_field,,,Class field: IntegratorScipyBDF.method = 'bdf',qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyBDF,,,method = 'bdf',,,,method,'bdf',,
scipy_integrator.py,python,class_field,,,"Class field: IntegratorScipyBDF.integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'order': 5,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
    }",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyBDF,,,"integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'order': 5,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
    }",,,,integrator_options,"{
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'order': 5,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
    }",,
scipy_integrator.py,python,class_field,,,"Class field: IntegratorScipyDop853.integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'first_step': 0,
        'max_step': 0,
        'ifactor': 6.0,
        'dfactor': 0.3,
        'beta': 0.0,
    }",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyDop853,,,"integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'first_step': 0,
        'max_step': 0,
        'ifactor': 6.0,
        'dfactor': 0.3,
        'beta': 0.0,
    }",,,,integrator_options,"{
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'first_step': 0,
        'max_step': 0,
        'ifactor': 6.0,
        'dfactor': 0.3,
        'beta': 0.0,
    }",,
scipy_integrator.py,python,class_field,,,Class field: IntegratorScipyDop853.support_time_dependant = True,qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyDop853,,,support_time_dependant = True,,,,support_time_dependant,True,,
scipy_integrator.py,python,class_field,,,Class field: IntegratorScipyDop853.supports_blackbox = True,qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyDop853,,,supports_blackbox = True,,,,supports_blackbox,True,,
scipy_integrator.py,python,class_field,,,Class field: IntegratorScipyDop853.method = 'dop853',qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyDop853,,,method = 'dop853',,,,method,'dop853',,
scipy_integrator.py,python,class_field,,,"Class field: IntegratorScipylsoda.integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'max_order_ns': 12,
        'max_order_s': 5,
        'first_step': 0.0,
        'max_step': 0.0,
        'min_step': 0.0,
    }",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipylsoda,,,"integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'max_order_ns': 12,
        'max_order_s': 5,
        'first_step': 0.0,
        'max_step': 0.0,
        'min_step': 0.0,
    }",,,,integrator_options,"{
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'max_order_ns': 12,
        'max_order_s': 5,
        'first_step': 0.0,
        'max_step': 0.0,
        'min_step': 0.0,
    }",,
scipy_integrator.py,python,class_field,,,Class field: IntegratorScipylsoda.support_time_dependant = True,qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipylsoda,,,support_time_dependant = True,,,,support_time_dependant,True,,
scipy_integrator.py,python,class_field,,,Class field: IntegratorScipylsoda.supports_blackbox = True,qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipylsoda,,,supports_blackbox = True,,,,supports_blackbox,True,,
scipy_integrator.py,python,class_field,,,Class field: IntegratorScipylsoda.method = 'lsoda',qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipylsoda,,,method = 'lsoda',,,,method,'lsoda',,
scipy_integrator.py,python,class_method,,,"Class method: _zvode.step(self, *args)",qutip,qutip,v5.0.4,,,,,,,,,_zvode,step,"(self, *args)",,,,,,,,
scipy_integrator.py,python,class_method,,,Class method: IntegratorScipyAdams._prepare(self),qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyAdams,_prepare,(self),,,,,,,,
scipy_integrator.py,python,class_method,,,"Class method: IntegratorScipyAdams._mul_np_vec(self, t, vec)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyAdams,_mul_np_vec,"(self, t, vec)",,,,,,,,
scipy_integrator.py,python,class_method,,,"Class method: IntegratorScipyAdams.set_state(self, t, state0)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyAdams,set_state,"(self, t, state0)",,,,,,,,
scipy_integrator.py,python,class_method,,,"Class method: IntegratorScipyAdams.get_state(self, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyAdams,get_state,"(self, copy=True)",,,,,,,,
scipy_integrator.py,python,class_method,,,Class method: IntegratorScipyAdams._check_handle(self),qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyAdams,_check_handle,(self),,,,,,,,
scipy_integrator.py,python,class_method,,,"Class method: IntegratorScipyAdams.integrate(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyAdams,integrate,"(self, t, copy=True)",,,,,,,,
scipy_integrator.py,python,class_method,,,"Class method: IntegratorScipyAdams.mcstep(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyAdams,mcstep,"(self, t, copy=True)",,,,,,,,
scipy_integrator.py,python,class_method,,,Class method: IntegratorScipyAdams._check_failed_integration(self),qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyAdams,_check_failed_integration,(self),,,,,,,,
scipy_integrator.py,python,class_method,,,Class method: [property] IntegratorScipyAdams.options(self),qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyAdams,options,(self),,,,property,,,,
scipy_integrator.py,python,class_method,,,"Class method: [options.setter] IntegratorScipyAdams.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyAdams,options,"(self, new_options)",,,,options.setter,,,,
scipy_integrator.py,python,class_method,,,Class method: IntegratorScipyDop853._prepare(self),qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyDop853,_prepare,(self),,,,,,,,
scipy_integrator.py,python,class_method,,,"Class method: IntegratorScipyDop853._mul_np_vec(self, t, vec)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyDop853,_mul_np_vec,"(self, t, vec)",,,,,,,,
scipy_integrator.py,python,class_method,,,"Class method: IntegratorScipyDop853.integrate(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyDop853,integrate,"(self, t, copy=True)",,,,,,,,
scipy_integrator.py,python,class_method,,,"Class method: IntegratorScipyDop853.mcstep(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyDop853,mcstep,"(self, t, copy=True)",,,,,,,,
scipy_integrator.py,python,class_method,,,"Class method: IntegratorScipyDop853.get_state(self, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyDop853,get_state,"(self, copy=True)",,,,,,,,
scipy_integrator.py,python,class_method,,,"Class method: IntegratorScipyDop853.set_state(self, t, state0)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyDop853,set_state,"(self, t, state0)",,,,,,,,
scipy_integrator.py,python,class_method,,,Class method: IntegratorScipyDop853._check_failed_integration(self),qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyDop853,_check_failed_integration,(self),,,,,,,,
scipy_integrator.py,python,class_method,,,Class method: [property] IntegratorScipyDop853.options(self),qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyDop853,options,(self),,,,property,,,,
scipy_integrator.py,python,class_method,,,"Class method: [options.setter] IntegratorScipyDop853.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyDop853,options,"(self, new_options)",,,,options.setter,,,,
scipy_integrator.py,python,class_method,,,Class method: IntegratorScipylsoda._prepare(self),qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipylsoda,_prepare,(self),,,,,,,,
scipy_integrator.py,python,class_method,,,Class method: IntegratorScipylsoda._check_handle(self),qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipylsoda,_check_handle,(self),,,,,,,,
scipy_integrator.py,python,class_method,,,"Class method: IntegratorScipylsoda.integrate(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipylsoda,integrate,"(self, t, copy=True)",,,,,,,,
scipy_integrator.py,python,class_method,,,"Class method: IntegratorScipylsoda.set_state(self, t, state0)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipylsoda,set_state,"(self, t, state0)",,,,,,,,
scipy_integrator.py,python,class_method,,,"Class method: IntegratorScipylsoda.mcstep(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipylsoda,mcstep,"(self, t, copy=True)",,,,,,,,
scipy_integrator.py,python,class_method,,,"Class method: IntegratorScipylsoda._one_step(self, t)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipylsoda,_one_step,"(self, t)",,,,,,,,
scipy_integrator.py,python,class_method,,,"Class method: IntegratorScipylsoda._backstep(self, t)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipylsoda,_backstep,"(self, t)",,,,,,,,
scipy_integrator.py,python,class_method,,,Class method: IntegratorScipylsoda._check_failed_integration(self),qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipylsoda,_check_failed_integration,(self),,,,,,,,
scipy_integrator.py,python,class_method,,,Class method: [property] IntegratorScipylsoda.options(self),qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipylsoda,options,(self),,,,property,,,,
scipy_integrator.py,python,class_method,,,"Class method: [options.setter] IntegratorScipylsoda.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipylsoda,options,"(self, new_options)",,,,options.setter,,,,
scipy_integrator.py,python,class,,,Class: IntegratorScipyAdams(Integrator),qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyAdams,,,,,(Integrator),,,,,
scipy_integrator.py,python,class,,,Class: _zvode(zvode),qutip,qutip,v5.0.4,,,,,,,,,_zvode,,,,,(zvode),,,,,
scipy_integrator.py,python,class,,,Class: IntegratorScipyBDF(IntegratorScipyAdams),qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyBDF,,,,,(IntegratorScipyAdams),,,,,
scipy_integrator.py,python,class,,,Class: IntegratorScipyDop853(Integrator),qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipyDop853,,,,,(Integrator),,,,,
scipy_integrator.py,python,class,,,Class: IntegratorScipylsoda(IntegratorScipyDop853),qutip,qutip,v5.0.4,,,,,,,,,IntegratorScipylsoda,,,,,(IntegratorScipyDop853),,,,,
scipy_integrator.py,python,constant,,,"Constant: __all__ = [
    'IntegratorScipyAdams',
    'IntegratorScipyBDF',
    'IntegratorScipyDop853',
    'IntegratorScipylsoda',
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    'IntegratorScipyAdams',
    'IntegratorScipyBDF',
    'IntegratorScipyDop853',
    'IntegratorScipylsoda',
]",__all__,"[
    'IntegratorScipyAdams',
    'IntegratorScipyBDF',
    'IntegratorScipyDop853',
    'IntegratorScipylsoda',
]",,,,,,,,,,,,
scipy_integrator.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
scipy_integrator.py,python,import,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,warnings,,,,,,,,,,,,,,,,,
scipy_integrator.py,python,local_import,,,Import: ode from scipy.integrate,qutip,qutip,v5.0.4,from scipy.integrate import ode,ode,scipy.integrate,scipy.integrate,,,,,,,,,,,,,,,
scipy_integrator.py,python,local_import,,,Import: zvode from scipy.integrate._ode,qutip,qutip,v5.0.4,from scipy.integrate._ode import zvode,zvode,scipy.integrate._ode,scipy.integrate._ode,,,,,,,,,,,,,,,
scipy_integrator.py,python,local_import,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,data,qutip.core,qutip.core,,,,,,,,,,,,,,,
scipy_integrator.py,python,local_import,,,Import: column_unstack_dense from qutip.core.data.reshape,qutip,qutip,v5.0.4,"from qutip.core.data.reshape import column_unstack_dense, column_stack_dense",column_unstack_dense,qutip.core.data.reshape,qutip.core.data.reshape,,,,,,,,,,,,,,,
scipy_integrator.py,python,local_import,,,Import: column_stack_dense from qutip.core.data.reshape,qutip,qutip,v5.0.4,"from qutip.core.data.reshape import column_unstack_dense, column_stack_dense",column_stack_dense,qutip.core.data.reshape,qutip.core.data.reshape,,,,,,,,,,,,,,,
scipy_integrator.py,python,,,,File: qutip\solver\integrator,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
scipy_integrator.py,python,,,,Directory: qutip\solver\integrator\scipy_integrator.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
verner7efficient.py,python,constant,,,"Constant: __all__ = [""vern7_coeff""]",qutip,qutip,v5.0.4,,,,,"__all__ = [""vern7_coeff""]",__all__,"[""vern7_coeff""]",,,,,,,,,,,,
verner7efficient.py,python,constant,,,Constant: order = 7,qutip,qutip,v5.0.4,,,,,order = 7,order,7,,,,,,,,,,,,
verner7efficient.py,python,constant,,,Constant: rk_step = 10,qutip,qutip,v5.0.4,,,,,rk_step = 10,rk_step,10,,,,,,,,,,,,
verner7efficient.py,python,constant,,,Constant: rk_extra_step = 16,qutip,qutip,v5.0.4,,,,,rk_extra_step = 16,rk_extra_step,16,,,,,,,,,,,,
verner7efficient.py,python,constant,,,Constant: denseout_order = 7,qutip,qutip,v5.0.4,,,,,denseout_order = 7,denseout_order,7,,,,,,,,,,,,
verner7efficient.py,python,constant,,,"Constant: bh = np.zeros(rk_step, dtype=np.float64)",qutip,qutip,v5.0.4,,,,,"bh = np.zeros(rk_step, dtype=np.float64)",bh,"np.zeros(rk_step, dtype=np.float64)",,,,,,,,,,,,
verner7efficient.py,python,constant,,,"Constant: a = np.zeros((rk_extra_step, rk_extra_step), dtype=np.float64)",qutip,qutip,v5.0.4,,,,,"a = np.zeros((rk_extra_step, rk_extra_step), dtype=np.float64)",a,"np.zeros((rk_extra_step, rk_extra_step), dtype=np.float64)",,,,,,,,,,,,
verner7efficient.py,python,constant,,,"Constant: b = np.zeros(rk_step, dtype=np.float64)",qutip,qutip,v5.0.4,,,,,"b = np.zeros(rk_step, dtype=np.float64)",b,"np.zeros(rk_step, dtype=np.float64)",,,,,,,,,,,,
verner7efficient.py,python,constant,,,"Constant: c = np.zeros(rk_extra_step, dtype=np.float64)",qutip,qutip,v5.0.4,,,,,"c = np.zeros(rk_extra_step, dtype=np.float64)",c,"np.zeros(rk_extra_step, dtype=np.float64)",,,,,,,,,,,,
verner7efficient.py,python,constant,,,"Constant: e = np.zeros(rk_step, dtype=np.float64)",qutip,qutip,v5.0.4,,,,,"e = np.zeros(rk_step, dtype=np.float64)",e,"np.zeros(rk_step, dtype=np.float64)",,,,,,,,,,,,
verner7efficient.py,python,constant,,,"Constant: bi = np.zeros((rk_extra_step, denseout_order), dtype=np.float64)",qutip,qutip,v5.0.4,,,,,"bi = np.zeros((rk_extra_step, denseout_order), dtype=np.float64)",bi,"np.zeros((rk_extra_step, denseout_order), dtype=np.float64)",,,,,,,,,,,,
verner7efficient.py,python,constant,,,"Constant: vern7_coeff = {'order': order, 'a': a, 'b': b, 'c': c, 'e': e, 'bi': bi}",qutip,qutip,v5.0.4,,,,,"vern7_coeff = {'order': order, 'a': a, 'b': b, 'c': c, 'e': e, 'bi': bi}",vern7_coeff,"{'order': order, 'a': a, 'b': b, 'c': c, 'e': e, 'bi': bi}",,,,,,,,,,,,
verner7efficient.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
verner7efficient.py,python,,,,File: qutip\solver\integrator,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
verner7efficient.py,python,,,,Directory: qutip\solver\integrator\verner7efficient.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
verner9efficient.py,python,constant,,,"Constant: __all__ = [""vern9_coeff""]",qutip,qutip,v5.0.4,,,,,"__all__ = [""vern9_coeff""]",__all__,"[""vern9_coeff""]",,,,,,,,,,,,
verner9efficient.py,python,constant,,,Constant: order = 9,qutip,qutip,v5.0.4,,,,,order = 9,order,9,,,,,,,,,,,,
verner9efficient.py,python,constant,,,Constant: rk_step = 16,qutip,qutip,v5.0.4,,,,,rk_step = 16,rk_step,16,,,,,,,,,,,,
verner9efficient.py,python,constant,,,Constant: rk_extra_step = 26,qutip,qutip,v5.0.4,,,,,rk_extra_step = 26,rk_extra_step,26,,,,,,,,,,,,
verner9efficient.py,python,constant,,,Constant: denseout_order = 9,qutip,qutip,v5.0.4,,,,,denseout_order = 9,denseout_order,9,,,,,,,,,,,,
verner9efficient.py,python,constant,,,"Constant: bh = np.zeros(rk_step, dtype=np.float64)",qutip,qutip,v5.0.4,,,,,"bh = np.zeros(rk_step, dtype=np.float64)",bh,"np.zeros(rk_step, dtype=np.float64)",,,,,,,,,,,,
verner9efficient.py,python,constant,,,"Constant: a = np.zeros((rk_extra_step, rk_extra_step), dtype=np.float64)",qutip,qutip,v5.0.4,,,,,"a = np.zeros((rk_extra_step, rk_extra_step), dtype=np.float64)",a,"np.zeros((rk_extra_step, rk_extra_step), dtype=np.float64)",,,,,,,,,,,,
verner9efficient.py,python,constant,,,"Constant: b = np.zeros(rk_step, dtype=np.float64)",qutip,qutip,v5.0.4,,,,,"b = np.zeros(rk_step, dtype=np.float64)",b,"np.zeros(rk_step, dtype=np.float64)",,,,,,,,,,,,
verner9efficient.py,python,constant,,,"Constant: c = np.zeros(rk_extra_step, dtype=np.float64)",qutip,qutip,v5.0.4,,,,,"c = np.zeros(rk_extra_step, dtype=np.float64)",c,"np.zeros(rk_extra_step, dtype=np.float64)",,,,,,,,,,,,
verner9efficient.py,python,constant,,,"Constant: e = np.zeros(rk_step, dtype=np.float64)",qutip,qutip,v5.0.4,,,,,"e = np.zeros(rk_step, dtype=np.float64)",e,"np.zeros(rk_step, dtype=np.float64)",,,,,,,,,,,,
verner9efficient.py,python,constant,,,"Constant: bi = np.zeros((rk_extra_step, denseout_order), dtype=np.float64)",qutip,qutip,v5.0.4,,,,,"bi = np.zeros((rk_extra_step, denseout_order), dtype=np.float64)",bi,"np.zeros((rk_extra_step, denseout_order), dtype=np.float64)",,,,,,,,,,,,
verner9efficient.py,python,constant,,,"Constant: vern9_coeff = {'order': order, 'a': a, 'b': b, 'c': c, 'e': e, 'bi': bi}",qutip,qutip,v5.0.4,,,,,"vern9_coeff = {'order': order, 'a': a, 'b': b, 'c': c, 'e': e, 'bi': bi}",vern9_coeff,"{'order': order, 'a': a, 'b': b, 'c': c, 'e': e, 'bi': bi}",,,,,,,,,,,,
verner9efficient.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
verner9efficient.py,python,,,,File: qutip\solver\integrator,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
verner9efficient.py,python,,,,Directory: qutip\solver\integrator\verner9efficient.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,File: qutip\solver\integrator,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,Directory: qutip\solver\integrator\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
transfertensor.py,python,function,ttmsolve,"(dynmaps, state0, times, e_ops=(), num_learning=0, options=None)","Function: ttmsolve(dynmaps, state0, times, e_ops=(), num_learning=0, options=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
transfertensor.py,python,function,_generatetensors,"(dynmaps, threshold)","Function: _generatetensors(dynmaps, threshold)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
transfertensor.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
transfertensor.py,python,import,,,Import: time,qutip,qutip,v5.0.4,import time,time,,,,,,,,,,,,,,,,,
transfertensor.py,python,import,,,Import: spre from qutip,qutip,qutip,v5.0.4,"from qutip import spre, vector_to_operator, operator_to_vector, Result",spre,qutip,,,,,,,,,,,,,,,,
transfertensor.py,python,import,,,Import: vector_to_operator from qutip,qutip,qutip,v5.0.4,"from qutip import spre, vector_to_operator, operator_to_vector, Result",vector_to_operator,qutip,,,,,,,,,,,,,,,,
transfertensor.py,python,import,,,Import: operator_to_vector from qutip,qutip,qutip,v5.0.4,"from qutip import spre, vector_to_operator, operator_to_vector, Result",operator_to_vector,qutip,,,,,,,,,,,,,,,,
transfertensor.py,python,import,,,Import: Result from qutip,qutip,qutip,v5.0.4,"from qutip import spre, vector_to_operator, operator_to_vector, Result",Result,qutip,,,,,,,,,,,,,,,,
transfertensor.py,python,,,,File: qutip\solver\nonmarkov,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
transfertensor.py,python,,,,Directory: qutip\solver\nonmarkov\transfertensor.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,File: qutip\solver\nonmarkov,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,Directory: qutip\solver\nonmarkov\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
itotaylor.py,python,class_field,,,Class field: EulerSODE.stepper = _sode.Euler,qutip,qutip,v5.0.4,,,,,,,,,EulerSODE,,,stepper = _sode.Euler,,,,stepper,_sode.Euler,,
itotaylor.py,python,class_field,,,Class field: EulerSODE.N_dw = 1,qutip,qutip,v5.0.4,,,,,,,,,EulerSODE,,,N_dw = 1,,,,N_dw,1,,
itotaylor.py,python,class_field,,,Class field: Milstein_SODE.stepper = _sode.Milstein,qutip,qutip,v5.0.4,,,,,,,,,Milstein_SODE,,,stepper = _sode.Milstein,,,,stepper,_sode.Milstein,,
itotaylor.py,python,class_field,,,Class field: Milstein_SODE.N_dw = 1,qutip,qutip,v5.0.4,,,,,,,,,Milstein_SODE,,,N_dw = 1,,,,N_dw,1,,
itotaylor.py,python,class_field,,,"Class field: Taylor1_5_SODE.integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""derr_dt"": 1e-6,
    }",qutip,qutip,v5.0.4,,,,,,,,,Taylor1_5_SODE,,,"integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""derr_dt"": 1e-6,
    }",,,,integrator_options,"{
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""derr_dt"": 1e-6,
    }",,
itotaylor.py,python,class_field,,,Class field: Taylor1_5_SODE.stepper = _sode.Taylor15,qutip,qutip,v5.0.4,,,,,,,,,Taylor1_5_SODE,,,stepper = _sode.Taylor15,,,,stepper,_sode.Taylor15,,
itotaylor.py,python,class_field,,,Class field: Taylor1_5_SODE.N_dw = 2,qutip,qutip,v5.0.4,,,,,,,,,Taylor1_5_SODE,,,N_dw = 2,,,,N_dw,2,,
itotaylor.py,python,class_field,,,Class field: Explicit1_5_SODE.stepper = _sode.Explicit15,qutip,qutip,v5.0.4,,,,,,,,,Explicit1_5_SODE,,,stepper = _sode.Explicit15,,,,stepper,_sode.Explicit15,,
itotaylor.py,python,class_field,,,Class field: Explicit1_5_SODE.N_dw = 2,qutip,qutip,v5.0.4,,,,,,,,,Explicit1_5_SODE,,,N_dw = 2,,,,N_dw,2,,
itotaylor.py,python,class_field,,,Class field: Implicit_Milstein_SODE.stepper = _sode.Milstein_imp,qutip,qutip,v5.0.4,,,,,,,,,Implicit_Milstein_SODE,,,stepper = _sode.Milstein_imp,,,,stepper,_sode.Milstein_imp,,
itotaylor.py,python,class_field,,,Class field: Implicit_Milstein_SODE.N_dw = 1,qutip,qutip,v5.0.4,,,,,,,,,Implicit_Milstein_SODE,,,N_dw = 1,,,,N_dw,1,,
itotaylor.py,python,class_field,,,"Class field: Implicit_Taylor1_5_SODE.integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""solve_method"": None,
        ""solve_options"": {},
        ""deff_dt"": 1e-6
    }",qutip,qutip,v5.0.4,,,,,,,,,Implicit_Taylor1_5_SODE,,,"integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""solve_method"": None,
        ""solve_options"": {},
        ""deff_dt"": 1e-6
    }",,,,integrator_options,"{
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""solve_method"": None,
        ""solve_options"": {},
        ""deff_dt"": 1e-6
    }",,
itotaylor.py,python,class_field,,,Class field: Implicit_Taylor1_5_SODE.stepper = _sode.Taylor15_imp,qutip,qutip,v5.0.4,,,,,,,,,Implicit_Taylor1_5_SODE,,,stepper = _sode.Taylor15_imp,,,,stepper,_sode.Taylor15_imp,,
itotaylor.py,python,class_field,,,Class field: Implicit_Taylor1_5_SODE.N_dw = 2,qutip,qutip,v5.0.4,,,,,,,,,Implicit_Taylor1_5_SODE,,,N_dw = 2,,,,N_dw,2,,
itotaylor.py,python,class_method,,,Class method: [property] Taylor1_5_SODE.options(self),qutip,qutip,v5.0.4,,,,,,,,,Taylor1_5_SODE,options,(self),,,,property,,,,
itotaylor.py,python,class_method,,,"Class method: [options.setter] Taylor1_5_SODE.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,,,Taylor1_5_SODE,options,"(self, new_options)",,,,options.setter,,,,
itotaylor.py,python,class_method,,,Class method: [property] Implicit_Taylor1_5_SODE.options(self),qutip,qutip,v5.0.4,,,,,,,,,Implicit_Taylor1_5_SODE,options,(self),,,,property,,,,
itotaylor.py,python,class_method,,,"Class method: [options.setter] Implicit_Taylor1_5_SODE.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,,,Implicit_Taylor1_5_SODE,options,"(self, new_options)",,,,options.setter,,,,
itotaylor.py,python,class,,,Class: EulerSODE(_Explicit_Simple_Integrator),qutip,qutip,v5.0.4,,,,,,,,,EulerSODE,,,,,(_Explicit_Simple_Integrator),,,,,
itotaylor.py,python,class,,,Class: Milstein_SODE(_Explicit_Simple_Integrator),qutip,qutip,v5.0.4,,,,,,,,,Milstein_SODE,,,,,(_Explicit_Simple_Integrator),,,,,
itotaylor.py,python,class,,,Class: Taylor1_5_SODE(_Explicit_Simple_Integrator),qutip,qutip,v5.0.4,,,,,,,,,Taylor1_5_SODE,,,,,(_Explicit_Simple_Integrator),,,,,
itotaylor.py,python,class,,,Class: Explicit1_5_SODE(_Explicit_Simple_Integrator),qutip,qutip,v5.0.4,,,,,,,,,Explicit1_5_SODE,,,,,(_Explicit_Simple_Integrator),,,,,
itotaylor.py,python,class,,,Class: Implicit_Milstein_SODE(_Implicit_Simple_Integrator),qutip,qutip,v5.0.4,,,,,,,,,Implicit_Milstein_SODE,,,,,(_Implicit_Simple_Integrator),,,,,
itotaylor.py,python,class,,,Class: Implicit_Taylor1_5_SODE(_Implicit_Simple_Integrator),qutip,qutip,v5.0.4,,,,,,,,,Implicit_Taylor1_5_SODE,,,,,(_Implicit_Simple_Integrator),,,,,
itotaylor.py,python,constant,,,"Constant: __all__ = [
    ""EulerSODE"", ""Milstein_SODE"", ""Taylor1_5_SODE"", ""Explicit1_5_SODE"",
    ""Implicit_Milstein_SODE"", ""Implicit_Taylor1_5_SODE""
]",qutip,qutip,v5.0.4,,,,,"__all__ = [
    ""EulerSODE"", ""Milstein_SODE"", ""Taylor1_5_SODE"", ""Explicit1_5_SODE"",
    ""Implicit_Milstein_SODE"", ""Implicit_Taylor1_5_SODE""
]",__all__,"[
    ""EulerSODE"", ""Milstein_SODE"", ""Taylor1_5_SODE"", ""Explicit1_5_SODE"",
    ""Implicit_Milstein_SODE"", ""Implicit_Taylor1_5_SODE""
]",,,,,,,,,,,,
itotaylor.py,python,,,,File: qutip\solver\sode,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
itotaylor.py,python,,,,Directory: qutip\solver\sode\itotaylor.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
rouchon.py,python,class_field,,,"Class field: RouchonSODE.integrator_options = {
        ""dt"": 0.0001,
        ""tol"": 1e-7,
    }",qutip,qutip,v5.0.4,,,,,,,,,RouchonSODE,,,"integrator_options = {
        ""dt"": 0.0001,
        ""tol"": 1e-7,
    }",,,,integrator_options,"{
        ""dt"": 0.0001,
        ""tol"": 1e-7,
    }",,
rouchon.py,python,class_field,,,Class field: [instance] RouchonSODE._options = integrator_options.copy(),qutip,qutip,v5.0.4,,,,,,,,,RouchonSODE,__init__,"(self, rhs, options)",self._options = self.integrator_options.copy(),self._options = self.integrator_options.copy(),,,,,,
rouchon.py,python,class_field,,,Class field: [instance] RouchonSODE.options = options,qutip,qutip,v5.0.4,,,,,,,,,RouchonSODE,__init__,"(self, rhs, options)",self.options = options,self.options = options,,,,,,
rouchon.py,python,class_field,,,Class field: [instance] RouchonSODE.rhs = rhs,qutip,qutip,v5.0.4,,,,,,,,,RouchonSODE,__init__,"(self, rhs, options)",self.rhs = rhs,self.rhs = rhs,,,,,,
rouchon.py,python,class_field,,,Class field: [instance] RouchonSODE._make_operators(),qutip,qutip,v5.0.4,,,,,,,,,RouchonSODE,__init__,"(self, rhs, options)",self._make_operators(),self._make_operators(),,,,,,
rouchon.py,python,class_method,,,"Class method: RouchonSODE.__init__(self, rhs, options)",qutip,qutip,v5.0.4,,,,,,,,,RouchonSODE,__init__,"(self, rhs, options)",,,,,,,,
rouchon.py,python,class_method,,,Class method: RouchonSODE._make_operators(self),qutip,qutip,v5.0.4,,,,,,,,,RouchonSODE,_make_operators,(self),,,,,,,,
rouchon.py,python,class_method,,,"Class method: RouchonSODE.set_state(self, t, state0, generator)",qutip,qutip,v5.0.4,,,,,,,,,RouchonSODE,set_state,"(self, t, state0, generator)",,,,,,,,
rouchon.py,python,class_method,,,"Class method: RouchonSODE.integrate(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,RouchonSODE,integrate,"(self, t, copy=True)",,,,,,,,
rouchon.py,python,class_method,,,"Class method: RouchonSODE._step(self, t, state, dt, dW)",qutip,qutip,v5.0.4,,,,,,,,,RouchonSODE,_step,"(self, t, state, dt, dW)",,,,,,,,
rouchon.py,python,class_method,,,Class method: [property] RouchonSODE.options(self),qutip,qutip,v5.0.4,,,,,,,,,RouchonSODE,options,(self),,,,property,,,,
rouchon.py,python,class_method,,,"Class method: [options.setter] RouchonSODE.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,,,RouchonSODE,options,"(self, new_options)",,,,options.setter,,,,
rouchon.py,python,class_method,,,"Class method: RouchonSODE.reset(self, hard=False)",qutip,qutip,v5.0.4,,,,,,,,,RouchonSODE,reset,"(self, hard=False)",,,,,,,,
rouchon.py,python,class,,,Class: RouchonSODE(SIntegrator),qutip,qutip,v5.0.4,,,,,,,,,RouchonSODE,,,,,(SIntegrator),,,,,
rouchon.py,python,constant,,,"Constant: __all__ = [""RouchonSODE""]",qutip,qutip,v5.0.4,,,,,"__all__ = [""RouchonSODE""]",__all__,"[""RouchonSODE""]",,,,,,,,,,,,
rouchon.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
rouchon.py,python,import,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,warnings,,,,,,,,,,,,,,,,,
rouchon.py,python,import,,,Import: unstack_columns from qutip,qutip,qutip,v5.0.4,"from qutip import unstack_columns, stack_columns",unstack_columns,qutip,,,,,,,,,,,,,,,,
rouchon.py,python,import,,,Import: stack_columns from qutip,qutip,qutip,v5.0.4,"from qutip import unstack_columns, stack_columns",stack_columns,qutip,,,,,,,,,,,,,,,,
rouchon.py,python,local_import,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,data,qutip.core,qutip.core,,,,,,,,,,,,,,,
rouchon.py,python,,,,File: qutip\solver\sode,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
rouchon.py,python,,,,Directory: qutip\solver\sode\rouchon.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
sode.py,python,class_field,,,Class field: SIntegrator._is_set = False,qutip,qutip,v5.0.4,,,,,,,,,SIntegrator,,,_is_set = False,,,,_is_set,False,,
sode.py,python,class_field,,,Class field: SIntegrator._stepper_options = [],qutip,qutip,v5.0.4,,,,,,,,,SIntegrator,,,_stepper_options = [],,,,_stepper_options,[],,
sode.py,python,class_field,,,"Class field: _Explicit_Simple_Integrator.integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
    }",qutip,qutip,v5.0.4,,,,,,,,,_Explicit_Simple_Integrator,,,"integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
    }",,,,integrator_options,"{
        ""dt"": 0.001,
        ""tol"": 1e-10,
    }",,
sode.py,python,class_field,,,Class field: _Explicit_Simple_Integrator.stepper = None,qutip,qutip,v5.0.4,,,,,,,,,_Explicit_Simple_Integrator,,,stepper = None,,,,stepper,None,,
sode.py,python,class_field,,,Class field: _Explicit_Simple_Integrator.N_dw = 0,qutip,qutip,v5.0.4,,,,,,,,,_Explicit_Simple_Integrator,,,N_dw = 0,,,,N_dw,0,,
sode.py,python,class_field,,,Class field: [instance] _Explicit_Simple_Integrator._options = integrator_options.copy(),qutip,qutip,v5.0.4,,,,,,,,,_Explicit_Simple_Integrator,__init__,"(self, rhs, options)",self._options = self.integrator_options.copy(),self._options = self.integrator_options.copy(),,,,,,
sode.py,python,class_field,,,Class field: [instance] _Explicit_Simple_Integrator.options = options,qutip,qutip,v5.0.4,,,,,,,,,_Explicit_Simple_Integrator,__init__,"(self, rhs, options)",self.options = options,self.options = options,,,,,,
sode.py,python,class_field,,,Class field: [instance] _Explicit_Simple_Integrator.rhs = rhs,qutip,qutip,v5.0.4,,,,,,,,,_Explicit_Simple_Integrator,__init__,"(self, rhs, options)",self.rhs = rhs,self.rhs = rhs,,,,,,
sode.py,python,class_field,,,"Class field: _Implicit_Simple_Integrator.integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""solve_method"": None,
        ""solve_options"": {},
    }",qutip,qutip,v5.0.4,,,,,,,,,_Implicit_Simple_Integrator,,,"integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""solve_method"": None,
        ""solve_options"": {},
    }",,,,integrator_options,"{
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""solve_method"": None,
        ""solve_options"": {},
    }",,
sode.py,python,class_field,,,"Class field: _Implicit_Simple_Integrator._stepper_options = [""solve_method"", ""solve_options""]",qutip,qutip,v5.0.4,,,,,,,,,_Implicit_Simple_Integrator,,,"_stepper_options = [""solve_method"", ""solve_options""]",,,,_stepper_options,"[""solve_method"", ""solve_options""]",,
sode.py,python,class_field,,,Class field: _Implicit_Simple_Integrator.stepper = None,qutip,qutip,v5.0.4,,,,,,,,,_Implicit_Simple_Integrator,,,stepper = None,,,,stepper,None,,
sode.py,python,class_field,,,Class field: _Implicit_Simple_Integrator.N_dw = 0,qutip,qutip,v5.0.4,,,,,,,,,_Implicit_Simple_Integrator,,,N_dw = 0,,,,N_dw,0,,
sode.py,python,class_field,,,Class field: PlatenSODE.stepper = _sode.Platen,qutip,qutip,v5.0.4,,,,,,,,,PlatenSODE,,,stepper = _sode.Platen,,,,stepper,_sode.Platen,,
sode.py,python,class_field,,,Class field: PlatenSODE.N_dw = 1,qutip,qutip,v5.0.4,,,,,,,,,PlatenSODE,,,N_dw = 1,,,,N_dw,1,,
sode.py,python,class_field,,,"Class field: PredCorr_SODE.integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""alpha"": 0.0,
        ""eta"": 0.5,
    }",qutip,qutip,v5.0.4,,,,,,,,,PredCorr_SODE,,,"integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""alpha"": 0.0,
        ""eta"": 0.5,
    }",,,,integrator_options,"{
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""alpha"": 0.0,
        ""eta"": 0.5,
    }",,
sode.py,python,class_field,,,Class field: PredCorr_SODE.stepper = _sode.PredCorr,qutip,qutip,v5.0.4,,,,,,,,,PredCorr_SODE,,,stepper = _sode.PredCorr,,,,stepper,_sode.PredCorr,,
sode.py,python,class_field,,,Class field: PredCorr_SODE.N_dw = 1,qutip,qutip,v5.0.4,,,,,,,,,PredCorr_SODE,,,N_dw = 1,,,,N_dw,1,,
sode.py,python,class_field,,,"Class field: PredCorr_SODE._stepper_options = [""alpha"", ""eta""]",qutip,qutip,v5.0.4,,,,,,,,,PredCorr_SODE,,,"_stepper_options = [""alpha"", ""eta""]",,,,_stepper_options,"[""alpha"", ""eta""]",,
sode.py,python,class_method,,,"Class method: SIntegrator.set_state(self, t, state0, generator)",qutip,qutip,v5.0.4,,,,,,,,,SIntegrator,set_state,"(self, t, state0, generator)",,,,,,,,
sode.py,python,class_method,,,"Class method: SIntegrator.get_state(self, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,SIntegrator,get_state,"(self, copy=True)",,,,,,,,
sode.py,python,class_method,,,"Class method: SIntegrator.integrate(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,SIntegrator,integrate,"(self, t, copy=True)",,,,,,,,
sode.py,python,class_method,,,"Class method: SIntegrator.mcstep(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,SIntegrator,mcstep,"(self, t, copy=True)",,,,,,,,
sode.py,python,class_method,,,"Class method: SIntegrator.reset(self, hard=False)",qutip,qutip,v5.0.4,,,,,,,,,SIntegrator,reset,"(self, hard=False)",,,,,,,,
sode.py,python,class_method,,,"Class method: _Explicit_Simple_Integrator.__init__(self, rhs, options)",qutip,qutip,v5.0.4,,,,,,,,,_Explicit_Simple_Integrator,__init__,"(self, rhs, options)",,,,,,,,
sode.py,python,class_method,,,"Class method: _Explicit_Simple_Integrator.integrate(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,,,_Explicit_Simple_Integrator,integrate,"(self, t, copy=True)",,,,,,,,
sode.py,python,class_method,,,Class method: [property] _Explicit_Simple_Integrator.options(self),qutip,qutip,v5.0.4,,,,,,,,,_Explicit_Simple_Integrator,options,(self),,,,property,,,,
sode.py,python,class_method,,,"Class method: [options.setter] _Explicit_Simple_Integrator.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,,,_Explicit_Simple_Integrator,options,"(self, new_options)",,,,options.setter,,,,
sode.py,python,class_method,,,Class method: [property] _Implicit_Simple_Integrator.options(self),qutip,qutip,v5.0.4,,,,,,,,,_Implicit_Simple_Integrator,options,(self),,,,property,,,,
sode.py,python,class_method,,,"Class method: [options.setter] _Implicit_Simple_Integrator.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,,,_Implicit_Simple_Integrator,options,"(self, new_options)",,,,options.setter,,,,
sode.py,python,class_method,,,Class method: [property] PredCorr_SODE.options(self),qutip,qutip,v5.0.4,,,,,,,,,PredCorr_SODE,options,(self),,,,property,,,,
sode.py,python,class_method,,,"Class method: [options.setter] PredCorr_SODE.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,,,PredCorr_SODE,options,"(self, new_options)",,,,options.setter,,,,
sode.py,python,class,,,Class: SIntegrator(Integrator),qutip,qutip,v5.0.4,,,,,,,,,SIntegrator,,,,,(Integrator),,,,,
sode.py,python,class,,,Class: _Explicit_Simple_Integrator(SIntegrator),qutip,qutip,v5.0.4,,,,,,,,,_Explicit_Simple_Integrator,,,,,(SIntegrator),,,,,
sode.py,python,class,,,Class: _Implicit_Simple_Integrator(_Explicit_Simple_Integrator),qutip,qutip,v5.0.4,,,,,,,,,_Implicit_Simple_Integrator,,,,,(_Explicit_Simple_Integrator),,,,,
sode.py,python,class,,,Class: PlatenSODE(_Explicit_Simple_Integrator),qutip,qutip,v5.0.4,,,,,,,,,PlatenSODE,,,,,(_Explicit_Simple_Integrator),,,,,
sode.py,python,class,,,Class: PredCorr_SODE(_Explicit_Simple_Integrator),qutip,qutip,v5.0.4,,,,,,,,,PredCorr_SODE,,,,,(_Explicit_Simple_Integrator),,,,,
sode.py,python,constant,,,"Constant: __all__ = [""SIntegrator"", ""PlatenSODE"", ""PredCorr_SODE""]",qutip,qutip,v5.0.4,,,,,"__all__ = [""SIntegrator"", ""PlatenSODE"", ""PredCorr_SODE""]",__all__,"[""SIntegrator"", ""PlatenSODE"", ""PredCorr_SODE""]",,,,,,,,,,,,
sode.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
sode.py,python,import,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,warnings,,,,,,,,,,,,,,,,,
sode.py,python,,,,File: qutip\solver\sode,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
sode.py,python,,,,Directory: qutip\solver\sode\sode.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
_noise.py,python,class_field,,,Class field: [instance] Wiener.t0 = t0,qutip,qutip,v5.0.4,,,,,,,,,Wiener,__init__,"(self, t0, dt, generator, shape)",self.t0 = t0,self.t0 = t0,,,,,,
_noise.py,python,class_field,,,Class field: [instance] Wiener.dt = dt,qutip,qutip,v5.0.4,,,,,,,,,Wiener,__init__,"(self, t0, dt, generator, shape)",self.dt = dt,self.dt = dt,,,,,,
_noise.py,python,class_field,,,Class field: [instance] Wiener.generator = generator,qutip,qutip,v5.0.4,,,,,,,,,Wiener,__init__,"(self, t0, dt, generator, shape)",self.generator = generator,self.generator = generator,,,,,,
_noise.py,python,class_field,,,Class field: [instance] Wiener.t_end = t0,qutip,qutip,v5.0.4,,,,,,,,,Wiener,__init__,"(self, t0, dt, generator, shape)",self.t_end = t0,self.t_end = t0,,,,,,
_noise.py,python,class_field,,,Class field: [instance] Wiener.shape = shape,qutip,qutip,v5.0.4,,,,,,,,,Wiener,__init__,"(self, t0, dt, generator, shape)",self.shape = shape,self.shape = shape,,,,,,
_noise.py,python,class_field,,,"Class field: [instance] Wiener.process = np.zeros((1,) + shape, dtype=float)",qutip,qutip,v5.0.4,,,,,,,,,Wiener,__init__,"(self, t0, dt, generator, shape)","self.process = np.zeros((1,) + shape, dtype=float)","self.process = np.zeros((1,) + shape, dtype=float)",,,,,,
_noise.py,python,class_field,,,Class field: [instance] _Noise.T = T,qutip,qutip,v5.0.4,,,,,,,,,_Noise,__init__,"(self, T, dt, num=1)",self.T = T,self.T = T,,,,,,
_noise.py,python,class_field,,,Class field: [instance] _Noise.dt = dt,qutip,qutip,v5.0.4,,,,,,,,,_Noise,__init__,"(self, T, dt, num=1)",self.dt = dt,self.dt = dt,,,,,,
_noise.py,python,class_field,,,Class field: [instance] _Noise.num = num,qutip,qutip,v5.0.4,,,,,,,,,_Noise,__init__,"(self, T, dt, num=1)",self.num = num,self.num = num,,,,,,
_noise.py,python,class_field,,,"Class field: [instance] _Noise.noise = np.random.randn(N, num) * dt**0.5",qutip,qutip,v5.0.4,,,,,,,,,_Noise,__init__,"(self, T, dt, num=1)","self.noise = np.random.randn(N, num) * dt**0.5","self.noise = np.random.randn(N, num) * dt**0.5",,,,,,
_noise.py,python,class_method,,,"Class method: Wiener.__init__(self, t0, dt, generator, shape)",qutip,qutip,v5.0.4,,,,,,,,,Wiener,__init__,"(self, t0, dt, generator, shape)",,,,,,,,
_noise.py,python,class_method,,,"Class method: Wiener._extend(self, t)",qutip,qutip,v5.0.4,,,,,,,,,Wiener,_extend,"(self, t)",,,,,,,,
_noise.py,python,class_method,,,"Class method: Wiener.dW(self, t, N)",qutip,qutip,v5.0.4,,,,,,,,,Wiener,dW,"(self, t, N)",,,,,,,,
_noise.py,python,class_method,,,"Class method: Wiener.__call__(self, t)",qutip,qutip,v5.0.4,,,,,,,,,Wiener,__call__,"(self, t)",,,,,,,,
_noise.py,python,class_method,,,"Class method: _Noise.__init__(self, T, dt, num=1)",qutip,qutip,v5.0.4,,,,,,,,,_Noise,__init__,"(self, T, dt, num=1)",,,,,,,,
_noise.py,python,class_method,,,"Class method: _Noise.dw(self, dt)",qutip,qutip,v5.0.4,,,,,,,,,_Noise,dw,"(self, dt)",,,,,,,,
_noise.py,python,class_method,,,"Class method: _Noise.dz(self, dt)",qutip,qutip,v5.0.4,,,,,,,,,_Noise,dz,"(self, dt)",,,,,,,,
_noise.py,python,class_method,,,"Class method: _Noise.dW(self, dt)",qutip,qutip,v5.0.4,,,,,,,,,_Noise,dW,"(self, dt)",,,,,,,,
_noise.py,python,class,,,Class: Wiener,qutip,qutip,v5.0.4,,,,,,,,,Wiener,,,,,,,,,,
_noise.py,python,class,,,Class: _Noise,qutip,qutip,v5.0.4,,,,,,,,,_Noise,,,,,,,,,,
_noise.py,python,constant,,,"Constant: __all__ = [""Wiener""]",qutip,qutip,v5.0.4,,,,,"__all__ = [""Wiener""]",__all__,"[""Wiener""]",,,,,,,,,,,,
_noise.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
_noise.py,python,,,,File: qutip\solver\sode,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
_noise.py,python,,,,Directory: qutip\solver\sode\_noise.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,File: qutip\solver\sode,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,Directory: qutip\solver\sode\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
conftest.py,python,function,_add_repeats_if_marked,(metafunc),Function: _add_repeats_if_marked(metafunc),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
conftest.py,python,function,_skip_cython_tests_if_unavailable,(item),Function: _skip_cython_tests_if_unavailable(item),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
conftest.py,python,function,pytest_runtest_setup,(item),Function: pytest_runtest_setup(item),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
conftest.py,python,function,_patched_build_err_msg,"(arrays, err_msg, header='Items are not equal:',
                           verbose=True, names=('ACTUAL', 'DESIRED'),
                           precision=8)","Function: _patched_build_err_msg(arrays, err_msg, header='Items are not equal:',
                           verbose=True, names=('ACTUAL', 'DESIRED'),
                           precision=8)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
conftest.py,python,constant,,,"Constant: _numpy_private_utils_paths = [
    ['_private', 'utils'],    # 1.15.0 <= x
    ['nose_tools', 'utils'],  # 1.14.0 <= x < 1.15.0
    ['utils'],                # 1.14.0 > x
]",qutip,qutip,v5.0.4,,,,,"_numpy_private_utils_paths = [
    ['_private', 'utils'],    # 1.15.0 <= x
    ['nose_tools', 'utils'],  # 1.14.0 <= x < 1.15.0
    ['utils'],                # 1.14.0 > x
]",_numpy_private_utils_paths,"[
    ['_private', 'utils'],    # 1.15.0 <= x
    ['nose_tools', 'utils'],  # 1.14.0 <= x < 1.15.0
    ['utils'],                # 1.14.0 > x
]",,,,,,,,,,,,
conftest.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
conftest.py,python,import,,,Import: functools,qutip,qutip,v5.0.4,import functools,functools,,,,,,,,,,,,,,,,,
conftest.py,python,import,,,Import: os,qutip,qutip,v5.0.4,import os,os,,,,,,,,,,,,,,,,,
conftest.py,python,import,,,Import: tempfile,qutip,qutip,v5.0.4,import tempfile,tempfile,,,,,,,,,,,,,,,,,
conftest.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
conftest.py,python,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
conftest.py,python,,,,Directory: qutip\tests\conftest.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_animation.py,python,function,test_result_state,(),Function: test_result_state(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_animation.py,python,function,test_result_state_ValueError,(),Function: test_result_state_ValueError(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_animation.py,python,function,test_anim_wigner_sphere,(),Function: test_anim_wigner_sphere(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_animation.py,python,function,test_anim_hinton,(),Function: test_anim_hinton(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_animation.py,python,function,test_anim_sphereplot,(),Function: test_anim_sphereplot(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_animation.py,python,function,test_anim_matrix_histogram,(),Function: test_anim_matrix_histogram(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_animation.py,python,function,test_anim_fock_distribution,(),Function: test_anim_fock_distribution(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_animation.py,python,function,test_anim_wigner,(),Function: test_anim_wigner(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_animation.py,python,function,test_anim_qubism,(),Function: test_anim_qubism(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_animation.py,python,function,test_anim_schmidt,(),Function: test_anim_schmidt(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_animation.py,python,constant,,,"Constant: mpl = pytest.importorskip(""matplotlib"")",qutip,qutip,v5.0.4,,,,,"mpl = pytest.importorskip(""matplotlib"")",mpl,"pytest.importorskip(""matplotlib"")",,,,,,,,,,,,
test_animation.py,python,constant,,,"Constant: plt = pytest.importorskip(""matplotlib.pyplot"")",qutip,qutip,v5.0.4,,,,,"plt = pytest.importorskip(""matplotlib.pyplot"")",plt,"pytest.importorskip(""matplotlib.pyplot"")",,,,,,,,,,,,
test_animation.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_animation.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_animation.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_animation.py,python,local_import,,,Import: sph_harm from scipy.special,qutip,qutip,v5.0.4,from scipy.special import sph_harm,sph_harm,scipy.special,scipy.special,,,,,,,,,,,,,,,
test_animation.py,python,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_animation.py,python,,,,Directory: qutip\tests\test_animation.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_basis_transformation.py,python,function,real_hermitian,(n_levels),Function: real_hermitian(n_levels),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_basis_transformation.py,python,function,imaginary_hermitian,(n_levels),Function: imaginary_hermitian(n_levels),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_basis_transformation.py,python,function,complex_hermitian,(n_levels),Function: complex_hermitian(n_levels),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_basis_transformation.py,python,function,rand_bra,(n_levels),Function: rand_bra(n_levels),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_basis_transformation.py,python,function,test_eigenbasis_transformation_makes_diagonal_operator,(),Function: test_eigenbasis_transformation_makes_diagonal_operator(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_basis_transformation.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_basis_transformation.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_basis_transformation.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_basis_transformation.py,python,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_basis_transformation.py,python,,,,Directory: qutip\tests\test_basis_transformation.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_bloch.py,python,class_method,,,Class method: RefBloch.render(self),qutip,qutip,v5.0.4,,,,,,,,,RefBloch,render,(self),,,,,,,,
test_bloch.py,python,class_method,,,Class method: RefBloch.render_back(self),qutip,qutip,v5.0.4,,,,,,,,,RefBloch,render_back,(self),,,,,,,,
test_bloch.py,python,class_method,,,Class method: RefBloch.render_front(self),qutip,qutip,v5.0.4,,,,,,,,,RefBloch,render_front,(self),,,,,,,,
test_bloch.py,python,class_method,,,"Class method: TestBloch.plot_arc_test(self, fig, *args, **kw)",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,plot_arc_test,"(self, fig, *args, **kw)",,,,,,,,
test_bloch.py,python,class_method,,,"Class method: TestBloch.plot_arc_ref(self, fig, start, end, **kw)",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,plot_arc_ref,"(self, fig, start, end, **kw)",,,,,,,,
test_bloch.py,python,class_method,,,"Class method: [pytest.mark.parametrize([
        ""start_test"", ""start_ref"", ""end_test"", ""end_ref"", ""kwargs"",
    ], [
        pytest.param(
            (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), {}, id=""arrays""),
        pytest.param(
            (0.1, 0, 0), (0.1, 0, 0), (0, 0.1, 0), (0, 0.1, 0), {},
            id=""small-radius""),
        pytest.param(
            (1e-5, 0, 0), (1e-5, 0, 0), (0, 1e-5, 0), (0, 1e-5, 0), {},
            id=""tiny-radius""),
        pytest.param(
            (1.2, 0, 0), (1.2, 0, 0), (0, 1.2, 0), (0, 1.2, 0), {},
            id=""large-radius""),
        pytest.param(
            (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0),
            {""fmt"": ""r"", ""linestyle"": ""-""}, id=""fmt-and-kwargs"",
        ),
        pytest.param(
            ket(""0""), (0, 0, 1),
            (ket(""0"") + ket(""1"")).unit(), (1, 0, 0),
            {}, id=""kets"",
        ),
        pytest.param(
            ket2dm(ket(""0"")), (0, 0, 1),
            ket2dm(ket(""0"") + ket(""1"")).unit(), (1, 0, 0),
            {}, id=""dms"",
        ),
        pytest.param(
            ket2dm(ket(""0"")) * 0.5, (0, 0, 0.5),
            ket2dm(ket(""0"") + ket(""1"")).unit() * 0.5, (0.5, 0, 0),
            {}, id=""non-unit-dms"",
        ),
    ])] TestBloch.test_arc(
        self, start_test, start_ref, end_test, end_ref, kwargs,
        fig_test, fig_ref,
    )",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,test_arc,"(
        self, start_test, start_ref, end_test, end_ref, kwargs,
        fig_test, fig_ref,
    )",,,,"pytest.mark.parametrize([
        ""start_test"", ""start_ref"", ""end_test"", ""end_ref"", ""kwargs"",
    ], [
        pytest.param(
            (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), {}, id=""arrays""),
        pytest.param(
            (0.1, 0, 0), (0.1, 0, 0), (0, 0.1, 0), (0, 0.1, 0), {},
            id=""small-radius""),
        pytest.param(
            (1e-5, 0, 0), (1e-5, 0, 0), (0, 1e-5, 0), (0, 1e-5, 0), {},
            id=""tiny-radius""),
        pytest.param(
            (1.2, 0, 0), (1.2, 0, 0), (0, 1.2, 0), (0, 1.2, 0), {},
            id=""large-radius""),
        pytest.param(
            (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0),
            {""fmt"": ""r"", ""linestyle"": ""-""}, id=""fmt-and-kwargs"",
        ),
        pytest.param(
            ket(""0""), (0, 0, 1),
            (ket(""0"") + ket(""1"")).unit(), (1, 0, 0),
            {}, id=""kets"",
        ),
        pytest.param(
            ket2dm(ket(""0"")), (0, 0, 1),
            ket2dm(ket(""0"") + ket(""1"")).unit(), (1, 0, 0),
            {}, id=""dms"",
        ),
        pytest.param(
            ket2dm(ket(""0"")) * 0.5, (0, 0, 0.5),
            ket2dm(ket(""0"") + ket(""1"")).unit() * 0.5, (0.5, 0, 0),
            {}, id=""non-unit-dms"",
        ),
    ])",,,,
test_bloch.py,python,class_method,,,"Class method: [check_pngs_equal] TestBloch.test_arc(
        self, start_test, start_ref, end_test, end_ref, kwargs,
        fig_test, fig_ref,
    )",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,test_arc,"(
        self, start_test, start_ref, end_test, end_ref, kwargs,
        fig_test, fig_ref,
    )",,,,check_pngs_equal,,,,
test_bloch.py,python,class_method,,,"Class method: [pytest.mark.parametrize([
        ""start"", ""end"", ""err_msg"",
    ], [
        pytest.param(
            (0, 0, 0), (0, 1, 0),
            ""Polar and azimuthal angles undefined at origin."",
            id=""start-origin"",
        ),
        pytest.param(
            (1, 0, 0), (0, 0, 0),
            ""Polar and azimuthal angles undefined at origin."",
            id=""end-origin"",
        ),
        pytest.param(
            (0.9, 0, 0), (0, 1, 0), ""Points not on the same sphere."",
            id=""different-spheres"",
        ),
        pytest.param(
            (1, 0, 0), (1, 0, 0),
            ""Start and end represent the same point. No arc can be formed."",
            id=""same-points"",
        ),
        pytest.param(
            (1, 0, 0), (-1, 0, 0),
            ""Start and end are diagonally opposite, no unique arc is""
            "" possible."",
            id=""opposite-points"",
        ),
    ])] TestBloch.test_arc_errors(self, start, end, err_msg)",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,test_arc_errors,"(self, start, end, err_msg)",,,,"pytest.mark.parametrize([
        ""start"", ""end"", ""err_msg"",
    ], [
        pytest.param(
            (0, 0, 0), (0, 1, 0),
            ""Polar and azimuthal angles undefined at origin."",
            id=""start-origin"",
        ),
        pytest.param(
            (1, 0, 0), (0, 0, 0),
            ""Polar and azimuthal angles undefined at origin."",
            id=""end-origin"",
        ),
        pytest.param(
            (0.9, 0, 0), (0, 1, 0), ""Points not on the same sphere."",
            id=""different-spheres"",
        ),
        pytest.param(
            (1, 0, 0), (1, 0, 0),
            ""Start and end represent the same point. No arc can be formed."",
            id=""same-points"",
        ),
        pytest.param(
            (1, 0, 0), (-1, 0, 0),
            ""Start and end are diagonally opposite, no unique arc is""
            "" possible."",
            id=""opposite-points"",
        ),
    ])",,,,
test_bloch.py,python,class_method,,,"Class method: TestBloch.plot_line_test(self, fig, *args, **kw)",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,plot_line_test,"(self, fig, *args, **kw)",,,,,,,,
test_bloch.py,python,class_method,,,"Class method: TestBloch.plot_line_ref(self, fig, start, end, **kw)",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,plot_line_ref,"(self, fig, start, end, **kw)",,,,,,,,
test_bloch.py,python,class_method,,,"Class method: [pytest.mark.parametrize([
        ""start_test"", ""start_ref"", ""end_test"", ""end_ref"", ""kwargs"",
    ], [
        pytest.param(
            (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), {}, id=""arrays""),
        pytest.param(
            (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0),
            {""fmt"": ""r"", ""linestyle"": ""-""}, id=""fmt-and-kwargs"",
        ),
        pytest.param(
            ket(""0""), (0, 0, 1),
            (ket(""0"") + ket(""1"")).unit(), (1, 0, 0),
            {}, id=""kets"",
        ),
        pytest.param(
            ket2dm(ket(""0"")), (0, 0, 1),
            ket2dm(ket(""0"") + ket(""1"")).unit(), (1, 0, 0),
            {}, id=""dms"",
        ),
        pytest.param(
            ket2dm(ket(""0"")) * 0.5, (0, 0, 0.5),
            ket2dm(ket(""0"") + ket(""1"")).unit() * 0.5, (0.5, 0, 0),
            {}, id=""non-unit-dms"",
        ),
    ])] TestBloch.test_line(
        self, start_test, start_ref, end_test, end_ref, kwargs,
        fig_test, fig_ref,
    )",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,test_line,"(
        self, start_test, start_ref, end_test, end_ref, kwargs,
        fig_test, fig_ref,
    )",,,,"pytest.mark.parametrize([
        ""start_test"", ""start_ref"", ""end_test"", ""end_ref"", ""kwargs"",
    ], [
        pytest.param(
            (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), {}, id=""arrays""),
        pytest.param(
            (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0),
            {""fmt"": ""r"", ""linestyle"": ""-""}, id=""fmt-and-kwargs"",
        ),
        pytest.param(
            ket(""0""), (0, 0, 1),
            (ket(""0"") + ket(""1"")).unit(), (1, 0, 0),
            {}, id=""kets"",
        ),
        pytest.param(
            ket2dm(ket(""0"")), (0, 0, 1),
            ket2dm(ket(""0"") + ket(""1"")).unit(), (1, 0, 0),
            {}, id=""dms"",
        ),
        pytest.param(
            ket2dm(ket(""0"")) * 0.5, (0, 0, 0.5),
            ket2dm(ket(""0"") + ket(""1"")).unit() * 0.5, (0.5, 0, 0),
            {}, id=""non-unit-dms"",
        ),
    ])",,,,
test_bloch.py,python,class_method,,,"Class method: [check_pngs_equal] TestBloch.test_line(
        self, start_test, start_ref, end_test, end_ref, kwargs,
        fig_test, fig_ref,
    )",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,test_line,"(
        self, start_test, start_ref, end_test, end_ref, kwargs,
        fig_test, fig_ref,
    )",,,,check_pngs_equal,,,,
test_bloch.py,python,class_method,,,"Class method: TestBloch.plot_point_test(self, fig, point_kws)",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,plot_point_test,"(self, fig, point_kws)",,,,,,,,
test_bloch.py,python,class_method,,,"Class method: TestBloch.plot_point_ref(self, fig, point_kws)",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,plot_point_ref,"(self, fig, point_kws)",,,,,,,,
test_bloch.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""meth"", ["""", ""s"", ""l"", ""m""], ids=[""default"",
                                                               ""scatter"",
                                                               ""line"",
                                                               ""multicolored""])] TestBloch.test_point(self, point_kws, meth, fig_test, fig_ref)",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,test_point,"(self, point_kws, meth, fig_test, fig_ref)",,,,"pytest.mark.parametrize(""meth"", ["""", ""s"", ""l"", ""m""], ids=[""default"",
                                                               ""scatter"",
                                                               ""line"",
                                                               ""multicolored""])",,,,
test_bloch.py,python,class_method,,,"Class method: [pytest.mark.parametrize([
        ""point_kws""
    ], [
        pytest.param(
            dict(points=np.array([
                [
                    np.cos(np.pi / 4) * np.cos(t),
                    np.sin(np.pi / 4) * np.cos(t),
                    np.sin(t),
                ]
                for t in np.linspace(0, 2 * np.pi, 20)
            ]).T, alpha=0.5), id=""circle-of-points""),
        pytest.param(
            dict(points=(0, 0, 1), alpha=1), id=""alpha-opaque""),
        pytest.param(
            dict(points=(0, 0, 1), alpha=0.3), id=""alpha-transparent""),
        pytest.param(
            dict(points=(0, 0, 1), alpha=0), id=""alpha-invisible""),
        pytest.param(
            dict(points=(0, 0, 1)), id=""alpha-default""),
        pytest.param(
            dict(points=[(0, 0), (0, 1), (1, 0)], colors='g'),
            id=""color-green""),
        pytest.param([
            dict(points=[(0, 0), (0, 1), (1, 0)], alpha=1.0),
            dict(points=[(1, 1), (0, 1), (1, 0)], alpha=0.5),
        ], id=""alpha-multiple-point-sets""),
        pytest.param([
            dict(points=[(0), (0), (1)], alpha=1.0),
            dict(points=[(0), (1), (0)], alpha=1.0),
            dict(points=[(1), (0), (0)], alpha=1.0),
            dict(points=[(1), (1), (1)], alpha=1.0),
        ], id=""alpha-multiple-point-sets-all_sizes_markers""),
    ])] TestBloch.test_point(self, point_kws, meth, fig_test, fig_ref)",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,test_point,"(self, point_kws, meth, fig_test, fig_ref)",,,,"pytest.mark.parametrize([
        ""point_kws""
    ], [
        pytest.param(
            dict(points=np.array([
                [
                    np.cos(np.pi / 4) * np.cos(t),
                    np.sin(np.pi / 4) * np.cos(t),
                    np.sin(t),
                ]
                for t in np.linspace(0, 2 * np.pi, 20)
            ]).T, alpha=0.5), id=""circle-of-points""),
        pytest.param(
            dict(points=(0, 0, 1), alpha=1), id=""alpha-opaque""),
        pytest.param(
            dict(points=(0, 0, 1), alpha=0.3), id=""alpha-transparent""),
        pytest.param(
            dict(points=(0, 0, 1), alpha=0), id=""alpha-invisible""),
        pytest.param(
            dict(points=(0, 0, 1)), id=""alpha-default""),
        pytest.param(
            dict(points=[(0, 0), (0, 1), (1, 0)], colors='g'),
            id=""color-green""),
        pytest.param([
            dict(points=[(0, 0), (0, 1), (1, 0)], alpha=1.0),
            dict(points=[(1, 1), (0, 1), (1, 0)], alpha=0.5),
        ], id=""alpha-multiple-point-sets""),
        pytest.param([
            dict(points=[(0), (0), (1)], alpha=1.0),
            dict(points=[(0), (1), (0)], alpha=1.0),
            dict(points=[(1), (0), (0)], alpha=1.0),
            dict(points=[(1), (1), (1)], alpha=1.0),
        ], id=""alpha-multiple-point-sets-all_sizes_markers""),
    ])",,,,
test_bloch.py,python,class_method,,,"Class method: [check_pngs_equal] TestBloch.test_point(self, point_kws, meth, fig_test, fig_ref)",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,test_point,"(self, point_kws, meth, fig_test, fig_ref)",,,,check_pngs_equal,,,,
test_bloch.py,python,class_method,,,Class method: TestBloch.test_point_errors_meth(self),qutip,qutip,v5.0.4,,,,,,,,,TestBloch,test_point_errors_meth,(self),,,,,,,,
test_bloch.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""points"",
                             [(0, 1, 0, 1), (0, 1), [0, 1], np.array((0, 1)),
                              np.arange(12).reshape((3, 2, 2))],
                             ids=[""long_tuple"", ""short_tuple"", ""short_list"",
                                  ""short_numpy"", ""wrong_shape_numpy""]
                             )] TestBloch.test_point_errors_wrong_points(self, points)",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,test_point_errors_wrong_points,"(self, points)",,,,"pytest.mark.parametrize(""points"",
                             [(0, 1, 0, 1), (0, 1), [0, 1], np.array((0, 1)),
                              np.arange(12).reshape((3, 2, 2))],
                             ids=[""long_tuple"", ""short_tuple"", ""short_list"",
                                  ""short_numpy"", ""wrong_shape_numpy""]
                             )",,,,
test_bloch.py,python,class_method,,,"Class method: TestBloch.plot_vector_test(self, fig, vector_kws)",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,plot_vector_test,"(self, fig, vector_kws)",,,,,,,,
test_bloch.py,python,class_method,,,"Class method: TestBloch.plot_vector_ref(self, fig, vector_kws)",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,plot_vector_ref,"(self, fig, vector_kws)",,,,,,,,
test_bloch.py,python,class_method,,,"Class method: [pytest.mark.parametrize([
        ""vector_kws""
    ], [
        pytest.param(
            dict(vectors=(0, 0, 1)), id=""single-vector-tuple""),
        pytest.param(
            dict(vectors=[0, 0, 1]), id=""single-vector-list""),
        pytest.param(
            dict(vectors=np.array([0, 0, 1])), id=""single-vector-numpy""),
        pytest.param(
            dict(vectors=[(0, 0, 1), (0, 1, 0)]), id=""list-vectors-tuple""),
        pytest.param(
            dict(vectors=[[0, 0, 1]]), id=""list-vectors-list""),
        pytest.param(
            dict(vectors=[np.array([0, 0, 1])]), id=""list-vectors-numpy""),
        pytest.param(
            dict(vectors=[
                [
                    np.cos(np.pi / 4) * np.cos(t),
                    np.sin(np.pi / 4) * np.cos(t),
                    np.sin(t),
                ]
                for t in np.linspace(0, 2 * np.pi, 20)
            ], alpha=0.5), id=""circle-of-vectors""),
        pytest.param(
            dict(vectors=(0, 0, 1), alpha=1), id=""alpha-opaque""),
        pytest.param(
            dict(vectors=(0, 0, 1), alpha=0.3), id=""alpha-transparent""),
        pytest.param(
            dict(vectors=(0, 0, 1), alpha=0), id=""alpha-invisible""),
        pytest.param(
            dict(vectors=(0, 0, 1)), id=""alpha-default""),
        pytest.param([
            dict(vectors=[(0, 0, 1), (0, 1, 0)], alpha=1.0),
            dict(vectors=[(1, 0, 1), (1, 1, 0)], alpha=0.5),
        ], id=""alpha-multiple-vector-sets""),
        pytest.param(
            dict(vectors=(0, 0, 1), colors=['y']), id=""color-y""),
        pytest.param(
            dict(vectors=[(0, 0, 1), (0, 1, 0)], colors=['y', 'y']),
            id=""color-two-y""),
        pytest.param([
            dict(vectors=[(0, 0, 1)], colors=['y']),
            dict(vectors=[(1, 0, 1)], colors=['g']),
        ], id=""color-yg""),
    ])] TestBloch.test_vector(self, vector_kws, fig_test, fig_ref)",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,test_vector,"(self, vector_kws, fig_test, fig_ref)",,,,"pytest.mark.parametrize([
        ""vector_kws""
    ], [
        pytest.param(
            dict(vectors=(0, 0, 1)), id=""single-vector-tuple""),
        pytest.param(
            dict(vectors=[0, 0, 1]), id=""single-vector-list""),
        pytest.param(
            dict(vectors=np.array([0, 0, 1])), id=""single-vector-numpy""),
        pytest.param(
            dict(vectors=[(0, 0, 1), (0, 1, 0)]), id=""list-vectors-tuple""),
        pytest.param(
            dict(vectors=[[0, 0, 1]]), id=""list-vectors-list""),
        pytest.param(
            dict(vectors=[np.array([0, 0, 1])]), id=""list-vectors-numpy""),
        pytest.param(
            dict(vectors=[
                [
                    np.cos(np.pi / 4) * np.cos(t),
                    np.sin(np.pi / 4) * np.cos(t),
                    np.sin(t),
                ]
                for t in np.linspace(0, 2 * np.pi, 20)
            ], alpha=0.5), id=""circle-of-vectors""),
        pytest.param(
            dict(vectors=(0, 0, 1), alpha=1), id=""alpha-opaque""),
        pytest.param(
            dict(vectors=(0, 0, 1), alpha=0.3), id=""alpha-transparent""),
        pytest.param(
            dict(vectors=(0, 0, 1), alpha=0), id=""alpha-invisible""),
        pytest.param(
            dict(vectors=(0, 0, 1)), id=""alpha-default""),
        pytest.param([
            dict(vectors=[(0, 0, 1), (0, 1, 0)], alpha=1.0),
            dict(vectors=[(1, 0, 1), (1, 1, 0)], alpha=0.5),
        ], id=""alpha-multiple-vector-sets""),
        pytest.param(
            dict(vectors=(0, 0, 1), colors=['y']), id=""color-y""),
        pytest.param(
            dict(vectors=[(0, 0, 1), (0, 1, 0)], colors=['y', 'y']),
            id=""color-two-y""),
        pytest.param([
            dict(vectors=[(0, 0, 1)], colors=['y']),
            dict(vectors=[(1, 0, 1)], colors=['g']),
        ], id=""color-yg""),
    ])",,,,
test_bloch.py,python,class_method,,,"Class method: [check_pngs_equal] TestBloch.test_vector(self, vector_kws, fig_test, fig_ref)",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,test_vector,"(self, vector_kws, fig_test, fig_ref)",,,,check_pngs_equal,,,,
test_bloch.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""vectors"",
                             [(0, 1, 0, 1), (0, 1), [0, 1], np.array((0, 1)),
                              np.arange(12).reshape((3, 2, 2))],
                             ids=[""long_tuple"", ""short_tuple"", ""short_list"",
                                  ""short_numpy"", ""wrong_shape_numpy""]
                             )] TestBloch.test_vector_errors_wrong_vectors(self, vectors)",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,test_vector_errors_wrong_vectors,"(self, vectors)",,,,"pytest.mark.parametrize(""vectors"",
                             [(0, 1, 0, 1), (0, 1), [0, 1], np.array((0, 1)),
                              np.arange(12).reshape((3, 2, 2))],
                             ids=[""long_tuple"", ""short_tuple"", ""short_list"",
                                  ""short_numpy"", ""wrong_shape_numpy""]
                             )",,,,
test_bloch.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""vectors, colors"",
                             [([0, 0, 1], ['g', 'y']),
                              ([[0, 0, 1], [0, 1, 0]], ['y']),
                              ([0, 0, 1], [['g', 'y']])],
                             ids=[""one-vec-two-colors"", ""two-vec-one-color"",
                                  ""wrong-dimension-list""]
                             )] TestBloch.test_vector_errors_color_length(self, vectors, colors)",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,test_vector_errors_color_length,"(self, vectors, colors)",,,,"pytest.mark.parametrize(""vectors, colors"",
                             [([0, 0, 1], ['g', 'y']),
                              ([[0, 0, 1], [0, 1, 0]], ['y']),
                              ([0, 0, 1], [['g', 'y']])],
                             ids=[""one-vec-two-colors"", ""two-vec-one-color"",
                                  ""wrong-dimension-list""]
                             )",,,,
test_bloch.py,python,class_method,,,"Class method: [check_pngs_equal] TestBloch.test_clear(self, fig_test=None, fig_ref=None)",qutip,qutip,v5.0.4,,,,,,,,,TestBloch,test_clear,"(self, fig_test=None, fig_ref=None)",,,,check_pngs_equal,,,,
test_bloch.py,python,class,,,Class: RefBloch(Bloch),qutip,qutip,v5.0.4,,,,,,,,,RefBloch,,,,,(Bloch),,,,,
test_bloch.py,python,class,,,Class: TestBloch,qutip,qutip,v5.0.4,,,,,,,,,TestBloch,,,,,,,,,,
test_bloch.py,python,function,test_repr_svg,(),Function: test_repr_svg(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_bloch.py,python,import,,,Import: copy,qutip,qutip,v5.0.4,import copy,copy,,,,,,,,,,,,,,,,,
test_bloch.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_bloch.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_bloch.py,python,import,,,Import: ket from qutip,qutip,qutip,v5.0.4,"from qutip import ket, ket2dm",ket,qutip,,,,,,,,,,,,,,,,
test_bloch.py,python,import,,,Import: ket2dm from qutip,qutip,qutip,v5.0.4,"from qutip import ket, ket2dm",ket2dm,qutip,,,,,,,,,,,,,,,,
test_bloch.py,python,local_import,,,Import: Bloch from qutip.bloch,qutip,qutip,v5.0.4,from qutip.bloch import Bloch,Bloch,qutip.bloch,qutip.bloch,,,,,,,,,,,,,,,
test_bloch.py,python,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_bloch.py,python,,,,Directory: qutip\tests\test_bloch.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_enr_state_operator.py,python,class_method,,,"Class method: TestOperator.test_no_restrictions(self, dimensions)",qutip,qutip,v5.0.4,,,,,,,,,TestOperator,test_no_restrictions,"(self, dimensions)",,,,,,,,
test_enr_state_operator.py,python,class_method,,,"Class method: TestOperator.test_space_size_reduction(self, dimensions, n_excitations)",qutip,qutip,v5.0.4,,,,,,,,,TestOperator,test_space_size_reduction,"(self, dimensions, n_excitations)",,,,,,,,
test_enr_state_operator.py,python,class_method,,,"Class method: TestOperator.test_identity(self, dimensions, n_excitations)",qutip,qutip,v5.0.4,,,,,,,,,TestOperator,test_identity,"(self, dimensions, n_excitations)",,,,,,,,
test_enr_state_operator.py,python,class,,,Class: TestOperator,qutip,qutip,v5.0.4,,,,,,,,,TestOperator,,,,,,,,,,
test_enr_state_operator.py,python,function,_n_enr_states,"(dimensions, n_excitations)","Function: _n_enr_states(dimensions, n_excitations)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_enr_state_operator.py,python,function,test_fock_state,"(dimensions, n_excitations)","Function: test_fock_state(dimensions, n_excitations)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_enr_state_operator.py,python,function,test_fock_state_error,(),Function: test_fock_state_error(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_enr_state_operator.py,python,function,_reference_dm,"(dimensions, n_excitations, nbars)","Function: _reference_dm(dimensions, n_excitations, nbars)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_enr_state_operator.py,python,function,test_mesolve_ENR,(),Function: test_mesolve_ENR(),qutip,qutip,v5.0.4,,,,,,,,"# Ensure ENR states work with mesolve",,,,,,,,,,,
test_enr_state_operator.py,python,function,test_mesolve_ENR,(),Function: test_mesolve_ENR(),qutip,qutip,v5.0.4,,,,,,,,"# We compare the output to an exact truncation of the",,,,,,,,,,,
test_enr_state_operator.py,python,function,test_mesolve_ENR,(),Function: test_mesolve_ENR(),qutip,qutip,v5.0.4,,,,,,,,"# single-excitation Jaynes-Cummings model",,,,,,,,,,,
test_enr_state_operator.py,python,function,test_steadystate_ENR,(),Function: test_steadystate_ENR(),qutip,qutip,v5.0.4,,,,,,,,"# Ensure ENR states work with steadystate functions",,,,,,,,,,,
test_enr_state_operator.py,python,function,test_steadystate_ENR,(),Function: test_steadystate_ENR(),qutip,qutip,v5.0.4,,,,,,,,"# We compare the output to an exact truncation of the",,,,,,,,,,,
test_enr_state_operator.py,python,function,test_steadystate_ENR,(),Function: test_steadystate_ENR(),qutip,qutip,v5.0.4,,,,,,,,"# single-excitation Jaynes-Cummings model",,,,,,,,,,,
test_enr_state_operator.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_enr_state_operator.py,python,import,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,itertools,,,,,,,,,,,,,,,,,
test_enr_state_operator.py,python,import,,,Import: random,qutip,qutip,v5.0.4,import random,random,,,,,,,,,,,,,,,,,
test_enr_state_operator.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_enr_state_operator.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_enr_state_operator.py,python,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_enr_state_operator.py,python,,,,Directory: qutip\tests\test_enr_state_operator.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_entropy.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""p"", np.linspace(0, 1, 17))] TestVonNeumannEntropy.test_binary(self, p)",qutip,qutip,v5.0.4,,,,,,,,,TestVonNeumannEntropy,test_binary,"(self, p)",,,,"pytest.mark.parametrize(""p"", np.linspace(0, 1, 17))",,,,
test_entropy.py,python,class_method,,,Class method: [pytest.mark.repeat(10)] TestVonNeumannEntropy.test_pure_state(self),qutip,qutip,v5.0.4,,,,,,,,,TestVonNeumannEntropy,test_pure_state,(self),,,,pytest.mark.repeat(10),,,,
test_entropy.py,python,class_method,,,Class method: [pytest.mark.repeat(10)] TestLinearEntropy.test_less_than_von_neumann(self),qutip,qutip,v5.0.4,,,,,,,,,TestLinearEntropy,test_less_than_von_neumann,(self),,,,pytest.mark.repeat(10),,,,
test_entropy.py,python,class_method,,,Class method: [pytest.mark.repeat(10)] TestLinearEntropy.test_pure_state(self),qutip,qutip,v5.0.4,,,,,,,,,TestLinearEntropy,test_pure_state,(self),,,,pytest.mark.repeat(10),,,,
test_entropy.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""dm"", [
        pytest.param(qutip.bell_state(x).proj(), id='bell'+x)
        for x in ['00', '01', '10', '11']
    ])] TestConcurrence.test_maximally_entangled(self, dm)",qutip,qutip,v5.0.4,,,,,,,,,TestConcurrence,test_maximally_entangled,"(self, dm)",,,,"pytest.mark.parametrize(""dm"", [
        pytest.param(qutip.bell_state(x).proj(), id='bell'+x)
        for x in ['00', '01', '10', '11']
    ])",,,,
test_entropy.py,python,class_method,,,Class method: [pytest.mark.repeat(10)] TestConcurrence.test_nonzero(self),qutip,qutip,v5.0.4,,,,,,,,,TestConcurrence,test_nonzero,(self),,,,pytest.mark.repeat(10),,,,
test_entropy.py,python,class_method,,,Class method: TestMutualInformation.test_pure_state_additive(self),qutip,qutip,v5.0.4,,,,,,,,,TestMutualInformation,test_pure_state_additive,(self),,,,,,,,
test_entropy.py,python,class_method,,,Class method: TestMutualInformation.test_component_selection(self),qutip,qutip,v5.0.4,,,,,,,,,TestMutualInformation,test_component_selection,(self),,,,,,,,
test_entropy.py,python,class_method,,,"Class method: TestRelativeEntropy._simple_relative_entropy_implementation(
            self, rho, sigma, log_base=np.log, tol=1e-12)",qutip,qutip,v5.0.4,,,,,,,,,TestRelativeEntropy,_simple_relative_entropy_implementation,"(
            self, rho, sigma, log_base=np.log, tol=1e-12)",,,,,,,,
test_entropy.py,python,class_method,,,Class method: TestRelativeEntropy.test_rho_or_sigma_not_oper(self),qutip,qutip,v5.0.4,,,,,,,,,TestRelativeEntropy,test_rho_or_sigma_not_oper,(self),,,,,,,,
test_entropy.py,python,class_method,,,Class method: TestRelativeEntropy.test_rho_and_sigma_have_different_shape_and_dims(self),qutip,qutip,v5.0.4,,,,,,,,,TestRelativeEntropy,test_rho_and_sigma_have_different_shape_and_dims,(self),,,,,,,,
test_entropy.py,python,class_method,,,Class method: TestRelativeEntropy.test_base_not_2_or_e(self),qutip,qutip,v5.0.4,,,,,,,,,TestRelativeEntropy,test_base_not_2_or_e,(self),,,,,,,,
test_entropy.py,python,class_method,,,Class method: TestRelativeEntropy.test_infinite_relative_entropy(self),qutip,qutip,v5.0.4,,,,,,,,,TestRelativeEntropy,test_infinite_relative_entropy,(self),,,,,,,,
test_entropy.py,python,class_method,,,Class method: TestRelativeEntropy.test_base_2_or_e(self),qutip,qutip,v5.0.4,,,,,,,,,TestRelativeEntropy,test_base_2_or_e,(self),,,,,,,,
test_entropy.py,python,class_method,,,Class method: TestRelativeEntropy.test_pure_vs_maximally_mixed_state(self),qutip,qutip,v5.0.4,,,,,,,,,TestRelativeEntropy,test_pure_vs_maximally_mixed_state,(self),,,,,,,,
test_entropy.py,python,class_method,,,Class method: TestRelativeEntropy.test_density_matrices_with_non_real_eigenvalues(self),qutip,qutip,v5.0.4,,,,,,,,,TestRelativeEntropy,test_density_matrices_with_non_real_eigenvalues,(self),,,,,,,,
test_entropy.py,python,class_method,,,Class method: [pytest.mark.repeat(20)] TestRelativeEntropy.test_random_dm_with_self(self),qutip,qutip,v5.0.4,,,,,,,,,TestRelativeEntropy,test_random_dm_with_self,(self),,,,pytest.mark.repeat(20),,,,
test_entropy.py,python,class_method,,,Class method: [pytest.mark.repeat(20)] TestRelativeEntropy.test_random_rho_sigma(self),qutip,qutip,v5.0.4,,,,,,,,,TestRelativeEntropy,test_random_rho_sigma,(self),,,,pytest.mark.repeat(20),,,,
test_entropy.py,python,class_method,,,Class method: TestConditionalEntropy.test_inequality_3_qubits(self),qutip,qutip,v5.0.4,,,,,,,,,TestConditionalEntropy,test_inequality_3_qubits,(self),,,,,,,,
test_entropy.py,python,class_method,,,Class method: TestConditionalEntropy.test_triangle_inequality_4_qubits(self),qutip,qutip,v5.0.4,,,,,,,,,TestConditionalEntropy,test_triangle_inequality_4_qubits,(self),,,,,,,,
test_entropy.py,python,class,,,Class: TestVonNeumannEntropy,qutip,qutip,v5.0.4,,,,,,,,,TestVonNeumannEntropy,,,,,,,,,,
test_entropy.py,python,class,,,Class: TestLinearEntropy,qutip,qutip,v5.0.4,,,,,,,,,TestLinearEntropy,,,,,,,,,,
test_entropy.py,python,class,,,Class: TestConcurrence,qutip,qutip,v5.0.4,,,,,,,,,TestConcurrence,,,,,,,,,,
test_entropy.py,python,class,,,Class: TestMutualInformation,qutip,qutip,v5.0.4,,,,,,,,,TestMutualInformation,,,,,,,,,,
test_entropy.py,python,class,,,Class: TestRelativeEntropy,qutip,qutip,v5.0.4,,,,,,,,,TestRelativeEntropy,,,,,,,,,,
test_entropy.py,python,class,,,Class: TestConditionalEntropy,qutip,qutip,v5.0.4,,,,,,,,,TestConditionalEntropy,,,,,,,,,,
test_entropy.py,python,constant,,,Constant: _alpha = 2*np.pi * np.random.rand(),qutip,qutip,v5.0.4,,,,,_alpha = 2*np.pi * np.random.rand(),_alpha,2*np.pi * np.random.rand(),,,,,,,,,,,,
test_entropy.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_entropy.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_entropy.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_entropy.py,python,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_entropy.py,python,,,,Directory: qutip\tests\test_entropy.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_fileio.py,python,class_method,,,"Class method: Test_file_data_store_file_data_read.case(self, filename, kwargs)",qutip,qutip,v5.0.4,,,,,,,,,Test_file_data_store_file_data_read,case,"(self, filename, kwargs)",,,,,,,,
test_fileio.py,python,class_method,,,Class method: Test_file_data_store_file_data_read.test_defaults(self),qutip,qutip,v5.0.4,,,,,,,,,Test_file_data_store_file_data_read,test_defaults,(self),,,,,,,,
test_fileio.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""type_"", [""real"", ""complex""])] Test_file_data_store_file_data_read.test_type_format(self, type_, format_)",qutip,qutip,v5.0.4,,,,,,,,,Test_file_data_store_file_data_read,test_type_format,"(self, type_, format_)",,,,"pytest.mark.parametrize(""type_"", [""real"", ""complex""])",,,,
test_fileio.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""format_"", [""decimal"", ""exp""])] Test_file_data_store_file_data_read.test_type_format(self, type_, format_)",qutip,qutip,v5.0.4,,,,,,,,,Test_file_data_store_file_data_read,test_type_format,"(self, type_, format_)",,,,"pytest.mark.parametrize(""format_"", [""decimal"", ""exp""])",,,,
test_fileio.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""separator"", ["","", "";"", ""\t"", "" "", "" \t ""],
                             ids=lambda x: ""'"" + x + ""'"")] Test_file_data_store_file_data_read.test_separator_detection(self, separator)",qutip,qutip,v5.0.4,,,,,,,,,Test_file_data_store_file_data_read,test_separator_detection,"(self, separator)",,,,"pytest.mark.parametrize(""separator"", ["","", "";"", ""\t"", "" "", "" \t ""],
                             ids=lambda x: ""'"" + x + ""'"")",,,,
test_fileio.py,python,class,,,Class: Test_file_data_store_file_data_read,qutip,qutip,v5.0.4,,,,,,,,,Test_file_data_store_file_data_read,,,,,,,,,,
test_fileio.py,python,function,_random_file_name,(),Function: _random_file_name(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_fileio.py,python,constant,,,"Constant: pytestmark = [pytest.mark.usefixtures(""in_temporary_directory"")]",qutip,qutip,v5.0.4,,,,,"pytestmark = [pytest.mark.usefixtures(""in_temporary_directory"")]",pytestmark,"[pytest.mark.usefixtures(""in_temporary_directory"")]",,,,,,,,,,,,
test_fileio.py,python,constant,,,Constant: _dimension = 10,qutip,qutip,v5.0.4,,,,,_dimension = 10,_dimension,10,,,,,,,,,,,,
test_fileio.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_fileio.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_fileio.py,python,import,,,Import: uuid,qutip,qutip,v5.0.4,import uuid,uuid,,,,,,,,,,,,,,,,,
test_fileio.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_fileio.py,python,import,,,Import: Path from pathlib,qutip,qutip,v5.0.4,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,,
test_fileio.py,python,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_fileio.py,python,,,,Directory: qutip\tests\test_fileio.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_ipynbtools.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_ipynbtools.py,python,local_import,,,Import: version_table from qutip.ipynbtools,qutip,qutip,v5.0.4,from qutip.ipynbtools import version_table,version_table,qutip.ipynbtools,qutip.ipynbtools,,,,,,,,,,,,,,,
test_ipynbtools.py,python,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_ipynbtools.py,python,,,,Directory: qutip\tests\test_ipynbtools.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_measurement.py,python,class_field,,,Class field: [instance] EigenPairs.pairs = pairs,qutip,qutip,v5.0.4,,,,,,,,,EigenPairs,__init__,"(self, pairs)",self.pairs = pairs,self.pairs = pairs,,,,,,
test_measurement.py,python,class_field,,,Class field: [instance] EigenPairs.eigenvalues = [p[0] for p in pairs],qutip,qutip,v5.0.4,,,,,,,,,EigenPairs,__init__,"(self, pairs)",self.eigenvalues = [p[0] for p in pairs],self.eigenvalues = [p[0] for p in pairs],,,,,,
test_measurement.py,python,class_field,,,Class field: [instance] EigenPairs.eigenstates = [p[1] for p in pairs],qutip,qutip,v5.0.4,,,,,,,,,EigenPairs,__init__,"(self, pairs)",self.eigenstates = [p[1] for p in pairs],self.eigenstates = [p[1] for p in pairs],,,,,,
test_measurement.py,python,class_field,,,Class field: [instance] EigenPairs.projectors = [v * v.dag() for v in eigenstates],qutip,qutip,v5.0.4,,,,,,,,,EigenPairs,__init__,"(self, pairs)",self.projectors = [v * v.dag() for v in self.eigenstates],self.projectors = [v * v.dag() for v in self.eigenstates],,,,,,
test_measurement.py,python,class_method,,,"Class method: EigenPairs.__init__(self, pairs)",qutip,qutip,v5.0.4,,,,,,,,,EigenPairs,__init__,"(self, pairs)",,,,,,,,
test_measurement.py,python,class_method,,,"Class method: EigenPairs.__getitem__(self, i)",qutip,qutip,v5.0.4,,,,,,,,,EigenPairs,__getitem__,"(self, i)",,,,,,,,
test_measurement.py,python,class_method,,,"Class method: EigenPairs.__contains__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,EigenPairs,__contains__,"(self, other)",,,,,,,,
test_measurement.py,python,class,,,Class: EigenPairs,qutip,qutip,v5.0.4,,,,,,,,,EigenPairs,,,,,,,,,,
test_measurement.py,python,function,pairs2dm,(pairs),Function: pairs2dm(pairs),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_measurement.py,python,function,_equivalent,"(left, right, tol=1e-8)","Function: _equivalent(left, right, tol=1e-8)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_measurement.py,python,function,test_measurement_statistics_observable_degenerate,(),Function: test_measurement_statistics_observable_degenerate(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_measurement.py,python,function,test_measurement_statistics_povm_input_errors,(),Function: test_measurement_statistics_povm_input_errors(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_measurement.py,python,function,test_measurement_statistics_observable_input_errors,(),Function: test_measurement_statistics_observable_input_errors(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_measurement.py,python,function,test_measure_input_errors,(),Function: test_measure_input_errors(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_measurement.py,python,function,test_measure_observable_input_errors,(),Function: test_measure_observable_input_errors(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_measurement.py,python,function,test_povm,(),Function: test_povm(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_measurement.py,python,constant,,,"Constant: SIGMAZ = EigenPairs([
    (-1.0, -basis(2, 1)),
    (1.0, -basis(2, 0)),
])",qutip,qutip,v5.0.4,,,,,"SIGMAZ = EigenPairs([
    (-1.0, -basis(2, 1)),
    (1.0, -basis(2, 0)),
])",SIGMAZ,"EigenPairs([
    (-1.0, -basis(2, 1)),
    (1.0, -basis(2, 0)),
])",,,,,,,,,,,,
test_measurement.py,python,constant,,,"Constant: SIGMAX = EigenPairs([
    (-1.0, (-basis(2, 0) + basis(2, 1)).unit()),
    (1.0, (basis(2, 0) + basis(2, 1)).unit()),
])",qutip,qutip,v5.0.4,,,,,"SIGMAX = EigenPairs([
    (-1.0, (-basis(2, 0) + basis(2, 1)).unit()),
    (1.0, (basis(2, 0) + basis(2, 1)).unit()),
])",SIGMAX,"EigenPairs([
    (-1.0, (-basis(2, 0) + basis(2, 1)).unit()),
    (1.0, (basis(2, 0) + basis(2, 1)).unit()),
])",,,,,,,,,,,,
test_measurement.py,python,constant,,,"Constant: SIGMAY = EigenPairs([
    (-1.0, (-basis(2, 0) + 1j * basis(2, 1)).unit()),
    (1.0, (-basis(2, 0) - 1j * basis(2, 1)).unit()),
])",qutip,qutip,v5.0.4,,,,,"SIGMAY = EigenPairs([
    (-1.0, (-basis(2, 0) + 1j * basis(2, 1)).unit()),
    (1.0, (-basis(2, 0) - 1j * basis(2, 1)).unit()),
])",SIGMAY,"EigenPairs([
    (-1.0, (-basis(2, 0) + 1j * basis(2, 1)).unit()),
    (1.0, (-basis(2, 0) - 1j * basis(2, 1)).unit()),
])",,,,,,,,,,,,
test_measurement.py,python,constant,,,"Constant: state0 = basis(2, 0)",qutip,qutip,v5.0.4,,,,,"state0 = basis(2, 0)",state0,"basis(2, 0)",,,,,,,,,,,,
test_measurement.py,python,constant,,,"Constant: state1 = basis(2, 1)",qutip,qutip,v5.0.4,,,,,"state1 = basis(2, 1)",state1,"basis(2, 1)",,,,,,,,,,,,
test_measurement.py,python,constant,,,"Constant: stateplus = (basis(2, 0) + basis(2, 1)).unit()",qutip,qutip,v5.0.4,,,,,"stateplus = (basis(2, 0) + basis(2, 1)).unit()",stateplus,"(basis(2, 0) + basis(2, 1)).unit()",,,,,,,,,,,,
test_measurement.py,python,constant,,,"Constant: stateminus = (basis(2, 0) - basis(2, 1)).unit()",qutip,qutip,v5.0.4,,,,,"stateminus = (basis(2, 0) - basis(2, 1)).unit()",stateminus,"(basis(2, 0) - basis(2, 1)).unit()",,,,,,,,,,,,
test_measurement.py,python,constant,,,"Constant: stateR = (basis(2, 0) + 1j * basis(2, 1)).unit()",qutip,qutip,v5.0.4,,,,,"stateR = (basis(2, 0) + 1j * basis(2, 1)).unit()",stateR,"(basis(2, 0) + 1j * basis(2, 1)).unit()",,,,,,,,,,,,
test_measurement.py,python,constant,,,"Constant: stateL = (basis(2, 0) - 1j * basis(2, 1)).unit()",qutip,qutip,v5.0.4,,,,,"stateL = (basis(2, 0) - 1j * basis(2, 1)).unit()",stateL,"(basis(2, 0) - 1j * basis(2, 1)).unit()",,,,,,,,,,,,
test_measurement.py,python,constant,,,"Constant: PZ = [ket2dm(state0), ket2dm(state1)]",qutip,qutip,v5.0.4,,,,,"PZ = [ket2dm(state0), ket2dm(state1)]",PZ,"[ket2dm(state0), ket2dm(state1)]",,,,,,,,,,,,
test_measurement.py,python,constant,,,"Constant: PX = [ket2dm(stateplus), ket2dm(stateminus)]",qutip,qutip,v5.0.4,,,,,"PX = [ket2dm(stateplus), ket2dm(stateminus)]",PX,"[ket2dm(stateplus), ket2dm(stateminus)]",,,,,,,,,,,,
test_measurement.py,python,constant,,,"Constant: PY = [ket2dm(stateR), ket2dm(stateL)]",qutip,qutip,v5.0.4,,,,,"PY = [ket2dm(stateR), ket2dm(stateL)]",PY,"[ket2dm(stateR), ket2dm(stateL)]",,,,,,,,,,,,
test_measurement.py,python,constant,,,"Constant: PZ_ket = [state0, state1]",qutip,qutip,v5.0.4,,,,,"PZ_ket = [state0, state1]",PZ_ket,"[state0, state1]",,,,,,,,,,,,
test_measurement.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_measurement.py,python,import,,,Import: scipy,qutip,qutip,v5.0.4,import scipy,scipy,,,,,,,,,,,,,,,,,
test_measurement.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_measurement.py,python,import,,,Import: sqrt from math,qutip,qutip,v5.0.4,from math import sqrt,sqrt,math,,,,,,,,,,,,,,,,
test_measurement.py,python,import,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, ket2dm, sigmax, sigmay, sigmaz, identity, num, tensor,
    rand_ket
)",Qobj,qutip,,,,,,,,,,,,,,,,
test_measurement.py,python,import,,,Import: basis from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, ket2dm, sigmax, sigmay, sigmaz, identity, num, tensor,
    rand_ket
)",basis,qutip,,,,,,,,,,,,,,,,
test_measurement.py,python,import,,,Import: ket2dm from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, ket2dm, sigmax, sigmay, sigmaz, identity, num, tensor,
    rand_ket
)",ket2dm,qutip,,,,,,,,,,,,,,,,
test_measurement.py,python,import,,,Import: sigmax from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, ket2dm, sigmax, sigmay, sigmaz, identity, num, tensor,
    rand_ket
)",sigmax,qutip,,,,,,,,,,,,,,,,
test_measurement.py,python,import,,,Import: sigmay from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, ket2dm, sigmax, sigmay, sigmaz, identity, num, tensor,
    rand_ket
)",sigmay,qutip,,,,,,,,,,,,,,,,
test_measurement.py,python,import,,,Import: sigmaz from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, ket2dm, sigmax, sigmay, sigmaz, identity, num, tensor,
    rand_ket
)",sigmaz,qutip,,,,,,,,,,,,,,,,
test_measurement.py,python,import,,,Import: identity from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, ket2dm, sigmax, sigmay, sigmaz, identity, num, tensor,
    rand_ket
)",identity,qutip,,,,,,,,,,,,,,,,
test_measurement.py,python,import,,,Import: num from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, ket2dm, sigmax, sigmay, sigmaz, identity, num, tensor,
    rand_ket
)",num,qutip,,,,,,,,,,,,,,,,
test_measurement.py,python,import,,,Import: tensor from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, ket2dm, sigmax, sigmay, sigmaz, identity, num, tensor,
    rand_ket
)",tensor,qutip,,,,,,,,,,,,,,,,
test_measurement.py,python,import,,,Import: rand_ket from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, ket2dm, sigmax, sigmay, sigmaz, identity, num, tensor,
    rand_ket
)",rand_ket,qutip,,,,,,,,,,,,,,,,
test_measurement.py,python,local_import,,,Import: measure_povm from qutip.measurement,qutip,qutip,v5.0.4,"from qutip.measurement import (
    measure_povm, measurement_statistics_povm, measure_observable,
    measurement_statistics_observable,
)",measure_povm,qutip.measurement,qutip.measurement,,,,,,,,,,,,,,,
test_measurement.py,python,local_import,,,Import: measurement_statistics_povm from qutip.measurement,qutip,qutip,v5.0.4,"from qutip.measurement import (
    measure_povm, measurement_statistics_povm, measure_observable,
    measurement_statistics_observable,
)",measurement_statistics_povm,qutip.measurement,qutip.measurement,,,,,,,,,,,,,,,
test_measurement.py,python,local_import,,,Import: measure_observable from qutip.measurement,qutip,qutip,v5.0.4,"from qutip.measurement import (
    measure_povm, measurement_statistics_povm, measure_observable,
    measurement_statistics_observable,
)",measure_observable,qutip.measurement,qutip.measurement,,,,,,,,,,,,,,,
test_measurement.py,python,local_import,,,Import: measurement_statistics_observable from qutip.measurement,qutip,qutip,v5.0.4,"from qutip.measurement import (
    measure_povm, measurement_statistics_povm, measure_observable,
    measurement_statistics_observable,
)",measurement_statistics_observable,qutip.measurement,qutip.measurement,,,,,,,,,,,,,,,
test_measurement.py,python,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_measurement.py,python,,,,Directory: qutip\tests\test_measurement.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mkl.py,python,class_method,,,Class method: Test_spsolve.test_single_rhs_vector_real(self),qutip,qutip,v5.0.4,,,,,,,,,Test_spsolve,test_single_rhs_vector_real,(self),,,,,,,,
test_mkl.py,python,class_method,,,Class method: Test_spsolve.test_single_rhs_vector_complex(self),qutip,qutip,v5.0.4,,,,,,,,,Test_spsolve,test_single_rhs_vector_complex,(self),,,,,,,,
test_mkl.py,python,class_method,,,"Class method: [pytest.mark.parametrize('dtype', [np.float64, np.complex128])] Test_spsolve.test_multi_rhs_vector(self, dtype)",qutip,qutip,v5.0.4,,,,,,,,,Test_spsolve,test_multi_rhs_vector,"(self, dtype)",,,,"pytest.mark.parametrize('dtype', [np.float64, np.complex128])",,,,
test_mkl.py,python,class_method,,,Class method: Test_spsolve.test_rhs_shape_is_maintained(self),qutip,qutip,v5.0.4,,,,,,,,,Test_spsolve,test_rhs_shape_is_maintained,(self),,,,,,,,
test_mkl.py,python,class_method,,,Class method: Test_spsolve.test_sparse_rhs(self),qutip,qutip,v5.0.4,,,,,,,,,Test_spsolve,test_sparse_rhs,(self),,,,,,,,
test_mkl.py,python,class_method,,,"Class method: [pytest.mark.parametrize('dtype', [np.float64, np.complex128])] Test_spsolve.test_symmetric_solver(self, dtype)",qutip,qutip,v5.0.4,,,,,,,,,Test_spsolve,test_symmetric_solver,"(self, dtype)",,,,"pytest.mark.parametrize('dtype', [np.float64, np.complex128])",,,,
test_mkl.py,python,class_method,,,"Class method: [pytest.mark.parametrize('dtype', [np.float64, np.complex128])] Test_splu.test_repeated_rhs_solve(self, dtype)",qutip,qutip,v5.0.4,,,,,,,,,Test_splu,test_repeated_rhs_solve,"(self, dtype)",,,,"pytest.mark.parametrize('dtype', [np.float64, np.complex128])",,,,
test_mkl.py,python,class,,,Class: Test_spsolve,qutip,qutip,v5.0.4,,,,,,,,,Test_spsolve,,,,,,,,,,
test_mkl.py,python,class,,,Class: Test_splu,qutip,qutip,v5.0.4,,,,,,,,,Test_splu,,,,,,,,,,
test_mkl.py,python,constant,,,"Constant: pytestmark = [
    pytest.mark.skipif(not qutip.settings.has_mkl,
                       reason='MKL extensions not found.'),
]",qutip,qutip,v5.0.4,,,,,"pytestmark = [
    pytest.mark.skipif(not qutip.settings.has_mkl,
                       reason='MKL extensions not found.'),
]",pytestmark,"[
    pytest.mark.skipif(not qutip.settings.has_mkl,
                       reason='MKL extensions not found.'),
]",,,,,,,,,,,,
test_mkl.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_mkl.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_mkl.py,python,import,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg,scipy.linalg,,,,,,,,,,,,,,,,,
test_mkl.py,python,import,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse,scipy.sparse,,,,,,,,,,,,,,,,,
test_mkl.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_mkl.py,python,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mkl.py,python,,,,Directory: qutip\tests\test_mkl.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_partial_transpose.py,python,function,test_partial_transpose_bipartite,(),Function: test_partial_transpose_bipartite(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_partial_transpose.py,python,function,test_partial_transpose_comparison,(),Function: test_partial_transpose_comparison(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_partial_transpose.py,python,function,test_partial_transpose_randomized,(),Function: test_partial_transpose_randomized(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_partial_transpose.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_partial_transpose.py,python,import,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import Qobj, partial_transpose, tensor, rand_dm",Qobj,qutip,,,,,,,,,,,,,,,,
test_partial_transpose.py,python,import,,,Import: partial_transpose from qutip,qutip,qutip,v5.0.4,"from qutip import Qobj, partial_transpose, tensor, rand_dm",partial_transpose,qutip,,,,,,,,,,,,,,,,
test_partial_transpose.py,python,import,,,Import: tensor from qutip,qutip,qutip,v5.0.4,"from qutip import Qobj, partial_transpose, tensor, rand_dm",tensor,qutip,,,,,,,,,,,,,,,,
test_partial_transpose.py,python,import,,,Import: rand_dm from qutip,qutip,qutip,v5.0.4,"from qutip import Qobj, partial_transpose, tensor, rand_dm",rand_dm,qutip,,,,,,,,,,,,,,,,
test_partial_transpose.py,python,local_import,,,Import: _partial_transpose_reference from qutip.partial_transpose,qutip,qutip,v5.0.4,from qutip.partial_transpose import _partial_transpose_reference,_partial_transpose_reference,qutip.partial_transpose,qutip.partial_transpose,,,,,,,,,,,,,,,
test_partial_transpose.py,python,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_partial_transpose.py,python,,,,Directory: qutip\tests\test_partial_transpose.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_progressbar.py,python,constant,,,"Constant: bars = [""base"", ""text"", ""Enhanced""]",qutip,qutip,v5.0.4,,,,,"bars = [""base"", ""text"", ""Enhanced""]",bars,"[""base"", ""text"", ""Enhanced""]",,,,,,,,,,,,
test_progressbar.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_progressbar.py,python,import,,,Import: time,qutip,qutip,v5.0.4,import time,time,,,,,,,,,,,,,,,,,
test_progressbar.py,python,local_import,,,Import: progress_bars from qutip.ui.progressbar,qutip,qutip,v5.0.4,from qutip.ui.progressbar import progress_bars,progress_bars,qutip.ui.progressbar,qutip.ui.progressbar,,,,,,,,,,,,,,,
test_progressbar.py,python,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_progressbar.py,python,,,,Directory: qutip\tests\test_progressbar.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qip.py,python,function,test_failed_import,(without_qutip_qip),Function: test_failed_import(without_qutip_qip),qutip,qutip,v5.0.4,,,,,,,,"# Ensure 'qutip.qip' is not imported yet",,,,,,,,,,,
test_qip.py,python,function,test_with_qip,(with_qutip_qip_stub),Function: test_with_qip(with_qutip_qip_stub),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qip.py,python,import,,,Import: sys,qutip,qutip,v5.0.4,import sys,sys,,,,,,,,,,,,,,,,,
test_qip.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_qip.py,python,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qip.py,python,,,,Directory: qutip\tests\test_qip.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qpt.py,python,function,test_qpt_snot,(),Function: test_qpt_snot(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qpt.py,python,function,test_qpt_cnot,(),Function: test_qpt_cnot(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qpt.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_qpt.py,python,import,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg as la,scipy.linalg,,,,,,,,,,,,,,,,,
test_qpt.py,python,import,,,Import: spre from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, qeye, sigmax, sigmay, sigmaz, qpt",spre,qutip,,,,,,,,,,,,,,,,
test_qpt.py,python,import,,,Import: spost from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, qeye, sigmax, sigmay, sigmaz, qpt",spost,qutip,,,,,,,,,,,,,,,,
test_qpt.py,python,import,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, qeye, sigmax, sigmay, sigmaz, qpt",qeye,qutip,,,,,,,,,,,,,,,,
test_qpt.py,python,import,,,Import: sigmax from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, qeye, sigmax, sigmay, sigmaz, qpt",sigmax,qutip,,,,,,,,,,,,,,,,
test_qpt.py,python,import,,,Import: sigmay from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, qeye, sigmax, sigmay, sigmaz, qpt",sigmay,qutip,,,,,,,,,,,,,,,,
test_qpt.py,python,import,,,Import: sigmaz from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, qeye, sigmax, sigmay, sigmaz, qpt",sigmaz,qutip,,,,,,,,,,,,,,,,
test_qpt.py,python,import,,,Import: qpt from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, qeye, sigmax, sigmay, sigmaz, qpt",qpt,qutip,,,,,,,,,,,,,,,,
test_qpt.py,python,local_import,,,Import: snot from qutip.core.gates,qutip,qutip,v5.0.4,"from qutip.core.gates import snot, cnot",snot,qutip.core.gates,qutip.core.gates,,,,,,,,,,,,,,,
test_qpt.py,python,local_import,,,Import: cnot from qutip.core.gates,qutip,qutip,v5.0.4,"from qutip.core.gates import snot, cnot",cnot,qutip.core.gates,qutip.core.gates,,,,,,,,,,,,,,,
test_qpt.py,python,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qpt.py,python,,,,Directory: qutip\tests\test_qpt.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_random.py,python,function,_assert_density,"(qobj, density)","Function: _assert_density(qobj, density)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_random.py,python,function,_assert_metadata,"(random_qobj, dims, dtype=None, super=False, ket=False)","Function: _assert_metadata(random_qobj, dims, dtype=None, super=False, ket=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_random.py,python,function,test_kraus_map,"(dimensions, dtype)","Function: test_kraus_map(dimensions, dtype)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_random.py,python,constant,,,Constant: dtype_names = list(_data.to._str2type.keys()) + list(_data.to.dtypes),qutip,qutip,v5.0.4,,,,,dtype_names = list(_data.to._str2type.keys()) + list(_data.to.dtypes),dtype_names,list(_data.to._str2type.keys()) + list(_data.to.dtypes),,,,,,,,,,,,
test_random.py,python,constant,,,Constant: dtype_types = list(_data.to._str2type.values()) + list(_data.to.dtypes),qutip,qutip,v5.0.4,,,,,dtype_types = list(_data.to._str2type.values()) + list(_data.to.dtypes),dtype_types,list(_data.to._str2type.values()) + list(_data.to.dtypes),,,,,,,,,,,,
test_random.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_random.py,python,import,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,scipy.sparse,,,,,,,,,,,,,,,,,
test_random.py,python,import,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg as la,scipy.linalg,,,,,,,,,,,,,,,,,
test_random.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_random.py,python,import,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import qeye, num, to_kraus, kraus_to_choi, CoreOptions, Qobj",qeye,qutip,,,,,,,,,,,,,,,,
test_random.py,python,import,,,Import: num from qutip,qutip,qutip,v5.0.4,"from qutip import qeye, num, to_kraus, kraus_to_choi, CoreOptions, Qobj",num,qutip,,,,,,,,,,,,,,,,
test_random.py,python,import,,,Import: to_kraus from qutip,qutip,qutip,v5.0.4,"from qutip import qeye, num, to_kraus, kraus_to_choi, CoreOptions, Qobj",to_kraus,qutip,,,,,,,,,,,,,,,,
test_random.py,python,import,,,Import: kraus_to_choi from qutip,qutip,qutip,v5.0.4,"from qutip import qeye, num, to_kraus, kraus_to_choi, CoreOptions, Qobj",kraus_to_choi,qutip,,,,,,,,,,,,,,,,
test_random.py,python,import,,,Import: CoreOptions from qutip,qutip,qutip,v5.0.4,"from qutip import qeye, num, to_kraus, kraus_to_choi, CoreOptions, Qobj",CoreOptions,qutip,,,,,,,,,,,,,,,,
test_random.py,python,import,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import qeye, num, to_kraus, kraus_to_choi, CoreOptions, Qobj",Qobj,qutip,,,,,,,,,,,,,,,,
test_random.py,python,import,,,Import: data from qutip,qutip,qutip,v5.0.4,from qutip import data as _data,data,qutip,,,,,,,,,,,,,,,,
test_random.py,python,local_import,,,Import: SeedSequence from numpy.random,qutip,qutip,v5.0.4,"from numpy.random import SeedSequence, default_rng",SeedSequence,numpy.random,numpy.random,,,,,,,,,,,,,,,
test_random.py,python,local_import,,,Import: default_rng from numpy.random,qutip,qutip,v5.0.4,"from numpy.random import SeedSequence, default_rng",default_rng,numpy.random,numpy.random,,,,,,,,,,,,,,,
test_random.py,python,local_import,,,Import: rand_herm from qutip.random_objects,qutip,qutip,v5.0.4,"from qutip.random_objects import (
    rand_herm,
    rand_unitary,
    rand_dm,
    rand_ket,
    rand_stochastic,
    rand_super,
    rand_super_bcsz,
    rand_kraus_map,
)",rand_herm,qutip.random_objects,qutip.random_objects,,,,,,,,,,,,,,,
test_random.py,python,local_import,,,Import: rand_unitary from qutip.random_objects,qutip,qutip,v5.0.4,"from qutip.random_objects import (
    rand_herm,
    rand_unitary,
    rand_dm,
    rand_ket,
    rand_stochastic,
    rand_super,
    rand_super_bcsz,
    rand_kraus_map,
)",rand_unitary,qutip.random_objects,qutip.random_objects,,,,,,,,,,,,,,,
test_random.py,python,local_import,,,Import: rand_dm from qutip.random_objects,qutip,qutip,v5.0.4,"from qutip.random_objects import (
    rand_herm,
    rand_unitary,
    rand_dm,
    rand_ket,
    rand_stochastic,
    rand_super,
    rand_super_bcsz,
    rand_kraus_map,
)",rand_dm,qutip.random_objects,qutip.random_objects,,,,,,,,,,,,,,,
test_random.py,python,local_import,,,Import: rand_ket from qutip.random_objects,qutip,qutip,v5.0.4,"from qutip.random_objects import (
    rand_herm,
    rand_unitary,
    rand_dm,
    rand_ket,
    rand_stochastic,
    rand_super,
    rand_super_bcsz,
    rand_kraus_map,
)",rand_ket,qutip.random_objects,qutip.random_objects,,,,,,,,,,,,,,,
test_random.py,python,local_import,,,Import: rand_stochastic from qutip.random_objects,qutip,qutip,v5.0.4,"from qutip.random_objects import (
    rand_herm,
    rand_unitary,
    rand_dm,
    rand_ket,
    rand_stochastic,
    rand_super,
    rand_super_bcsz,
    rand_kraus_map,
)",rand_stochastic,qutip.random_objects,qutip.random_objects,,,,,,,,,,,,,,,
test_random.py,python,local_import,,,Import: rand_super from qutip.random_objects,qutip,qutip,v5.0.4,"from qutip.random_objects import (
    rand_herm,
    rand_unitary,
    rand_dm,
    rand_ket,
    rand_stochastic,
    rand_super,
    rand_super_bcsz,
    rand_kraus_map,
)",rand_super,qutip.random_objects,qutip.random_objects,,,,,,,,,,,,,,,
test_random.py,python,local_import,,,Import: rand_super_bcsz from qutip.random_objects,qutip,qutip,v5.0.4,"from qutip.random_objects import (
    rand_herm,
    rand_unitary,
    rand_dm,
    rand_ket,
    rand_stochastic,
    rand_super,
    rand_super_bcsz,
    rand_kraus_map,
)",rand_super_bcsz,qutip.random_objects,qutip.random_objects,,,,,,,,,,,,,,,
test_random.py,python,local_import,,,Import: rand_kraus_map from qutip.random_objects,qutip,qutip,v5.0.4,"from qutip.random_objects import (
    rand_herm,
    rand_unitary,
    rand_dm,
    rand_ket,
    rand_stochastic,
    rand_super,
    rand_super_bcsz,
    rand_kraus_map,
)",rand_kraus_map,qutip.random_objects,qutip.random_objects,,,,,,,,,,,,,,,
test_random.py,python,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_random.py,python,,,,Directory: qutip\tests\test_random.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_simdiag.py,python,function,test_simdiag_orthonormal_eigenvectors,(),Function: test_simdiag_orthonormal_eigenvectors(),qutip,qutip,v5.0.4,,,,,,,,"# Special matrix that used to be problematic (see Issue #2268)",,,,,,,,,,,
test_simdiag.py,python,function,test_simdiag_no_input,(),Function: test_simdiag_no_input(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_simdiag.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_simdiag.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_simdiag.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_simdiag.py,python,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_simdiag.py,python,,,,Directory: qutip\tests\test_simdiag.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_subsys_apply.py,python,class_method,,,Class method: TestSubsysApply.test_SimpleSingleApply(self),qutip,qutip,v5.0.4,,,,,,,,,TestSubsysApply,test_SimpleSingleApply,(self),,,,,,,,
test_subsys_apply.py,python,class_method,,,Class method: TestSubsysApply.test_SimpleSuperApply(self),qutip,qutip,v5.0.4,,,,,,,,,TestSubsysApply,test_SimpleSuperApply,(self),,,,,,,,
test_subsys_apply.py,python,class_method,,,Class method: TestSubsysApply.test_ComplexSingleApply(self),qutip,qutip,v5.0.4,,,,,,,,,TestSubsysApply,test_ComplexSingleApply,(self),,,,,,,,
test_subsys_apply.py,python,class_method,,,Class method: TestSubsysApply.test_ComplexSuperApply(self),qutip,qutip,v5.0.4,,,,,,,,,TestSubsysApply,test_ComplexSuperApply,(self),,,,,,,,
test_subsys_apply.py,python,class,,,Class: TestSubsysApply(object),qutip,qutip,v5.0.4,,,,,,,,,TestSubsysApply,,,,,(object),,,,,
test_subsys_apply.py,python,import,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, vector_to_operator, operator_to_vector, kraus_to_super,
    subsystem_apply, rand_dm, rand_unitary,
)",Qobj,qutip,,,,,,,,,,,,,,,,
test_subsys_apply.py,python,import,,,Import: tensor from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, vector_to_operator, operator_to_vector, kraus_to_super,
    subsystem_apply, rand_dm, rand_unitary,
)",tensor,qutip,,,,,,,,,,,,,,,,
test_subsys_apply.py,python,import,,,Import: vector_to_operator from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, vector_to_operator, operator_to_vector, kraus_to_super,
    subsystem_apply, rand_dm, rand_unitary,
)",vector_to_operator,qutip,,,,,,,,,,,,,,,,
test_subsys_apply.py,python,import,,,Import: operator_to_vector from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, vector_to_operator, operator_to_vector, kraus_to_super,
    subsystem_apply, rand_dm, rand_unitary,
)",operator_to_vector,qutip,,,,,,,,,,,,,,,,
test_subsys_apply.py,python,import,,,Import: kraus_to_super from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, vector_to_operator, operator_to_vector, kraus_to_super,
    subsystem_apply, rand_dm, rand_unitary,
)",kraus_to_super,qutip,,,,,,,,,,,,,,,,
test_subsys_apply.py,python,import,,,Import: subsystem_apply from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, vector_to_operator, operator_to_vector, kraus_to_super,
    subsystem_apply, rand_dm, rand_unitary,
)",subsystem_apply,qutip,,,,,,,,,,,,,,,,
test_subsys_apply.py,python,import,,,Import: rand_dm from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, vector_to_operator, operator_to_vector, kraus_to_super,
    subsystem_apply, rand_dm, rand_unitary,
)",rand_dm,qutip,,,,,,,,,,,,,,,,
test_subsys_apply.py,python,import,,,Import: rand_unitary from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, vector_to_operator, operator_to_vector, kraus_to_super,
    subsystem_apply, rand_dm, rand_unitary,
)",rand_unitary,qutip,,,,,,,,,,,,,,,,
test_subsys_apply.py,python,local_import,,,Import: norm from numpy.linalg,qutip,qutip,v5.0.4,from numpy.linalg import norm,norm,numpy.linalg,numpy.linalg,,,,,,,,,,,,,,,
test_subsys_apply.py,python,local_import,,,Import: rand_kraus_map from qutip.random_objects,qutip,qutip,v5.0.4,from qutip.random_objects import rand_kraus_map,rand_kraus_map,qutip.random_objects,qutip.random_objects,,,,,,,,,,,,,,,
test_subsys_apply.py,python,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_subsys_apply.py,python,,,,Directory: qutip\tests\test_subsys_apply.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_utilities.py,python,function,_get_converter,"(orig, target)","Function: _get_converter(orig, target)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_utilities.py,python,function,test_unit_conversions_bad_unit,(),Function: test_unit_conversions_bad_unit(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_utilities.py,python,function,test_cpu_count,(monkeypatch),Function: test_cpu_count(monkeypatch),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_utilities.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_utilities.py,python,import,,,Import: convert_unit from qutip,qutip,qutip,v5.0.4,"from qutip import convert_unit, clebsch, n_thermal",convert_unit,qutip,,,,,,,,,,,,,,,,
test_utilities.py,python,import,,,Import: clebsch from qutip,qutip,qutip,v5.0.4,"from qutip import convert_unit, clebsch, n_thermal",clebsch,qutip,,,,,,,,,,,,,,,,
test_utilities.py,python,import,,,Import: n_thermal from qutip,qutip,qutip,v5.0.4,"from qutip import convert_unit, clebsch, n_thermal",n_thermal,qutip,,,,,,,,,,,,,,,,
test_utilities.py,python,import,,,Import: qutip.utilities,qutip,qutip,v5.0.4,import qutip.utilities as utils,qutip.utilities,,,,,,,,,,,,,,,,,
test_utilities.py,python,import,,,Import: partial from functools,qutip,qutip,v5.0.4,from functools import partial,partial,functools,,,,,,,,,,,,,,,,
test_utilities.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_utilities.py,python,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_utilities.py,python,,,,Directory: qutip\tests\test_utilities.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_cyclic,(),Function: test_cyclic(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_diverging,(),Function: test_diverging(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_sequential,(),Function: test_sequential(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_set_ticklabels,(),Function: test_set_ticklabels(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_equal_shape,(),Function: test_equal_shape(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_plot_wigner_sphere_anim,(),Function: test_plot_wigner_sphere_anim(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,to_oper_bra,(oper),Function: to_oper_bra(oper),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,to_oper,(oper),Function: to_oper(oper),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_hinton1,(),Function: test_hinton1(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_hinton_anim,(),Function: test_hinton_anim(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_hinton_ValueError0,(),Function: test_hinton_ValueError0(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_sphereplot_anim,(),Function: test_sphereplot_anim(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_get_matrix_components,(),Function: test_get_matrix_components(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_matrix_histogram_zeros,(),Function: test_matrix_histogram_zeros(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_matrix_histogram_anim,(),Function: test_matrix_histogram_anim(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_plot_energy_levels_ValueError,(),Function: test_plot_energy_levels_ValueError(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_plot_fock_distribution_anim,(),Function: test_plot_fock_distribution_anim(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_plot_wigner_anim,(),Function: test_plot_wigner_anim(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_plot_wigner_ValueError,(),Function: test_plot_wigner_ValueError(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_plot_spin_distribution_ValueError,(),Function: test_plot_spin_distribution_ValueError(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_plot_qubism_anim,(),Function: test_plot_qubism_anim(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_plot_qubism_dimension,(),Function: test_plot_qubism_dimension(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_plot_schmidt_anim,(),Function: test_plot_schmidt_anim(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,function,test_plot_schmidt_Error,(),Function: test_plot_schmidt_Error(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,constant,,,"Constant: mpl = pytest.importorskip(""matplotlib"")",qutip,qutip,v5.0.4,,,,,"mpl = pytest.importorskip(""matplotlib"")",mpl,"pytest.importorskip(""matplotlib"")",,,,,,,,,,,,
test_visualization.py,python,constant,,,"Constant: plt = pytest.importorskip(""matplotlib.pyplot"")",qutip,qutip,v5.0.4,,,,,"plt = pytest.importorskip(""matplotlib.pyplot"")",plt,"pytest.importorskip(""matplotlib.pyplot"")",,,,,,,,,,,,
test_visualization.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_visualization.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_visualization.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_visualization.py,python,local_import,,,Import: sph_harm from scipy.special,qutip,qutip,v5.0.4,from scipy.special import sph_harm,sph_harm,scipy.special,scipy.special,,,,,,,,,,,,,,,
test_visualization.py,python,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_visualization.py,python,,,,Directory: qutip\tests\test_visualization.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('xs', ["""", 1, None], ids=['str', 'int', 'none'])] TestHusimiQ.test_failure_if_non_arraylike_coordinates(self, xs)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_failure_if_non_arraylike_coordinates,"(self, xs)",,,,"pytest.mark.parametrize('xs', ["""", 1, None], ids=['str', 'int', 'none'])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('ndim', [2, 3])] TestHusimiQ.test_failure_if_coordinates_not_1d(self, ndim)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_failure_if_coordinates_not_1d,"(self, ndim)",,,,"pytest.mark.parametrize('ndim', [2, 3])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('dm', [True, False], ids=['dm', 'ket'])] TestHusimiQ.test_failure_if_tensor_hilbert_space(self, dm)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_failure_if_tensor_hilbert_space,"(self, dm)",,,,"pytest.mark.parametrize('dm', [True, False], ids=['dm', 'ket'])",,,,
test_wigner.py,python,class_method,,,Class method: TestHusimiQ.test_QFunc_raises_if_insufficient_memory(self),qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_QFunc_raises_if_insufficient_memory,(self),,,,,,,,
test_wigner.py,python,class_method,,,Class method: TestHusimiQ.test_qfunc_warns_if_insufficient_memory(self),qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_qfunc_warns_if_insufficient_memory,(self),,,,,,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('obj', [
        pytest.param(np.eye(2, dtype=np.complex128), id='ndarray'),
        pytest.param([[1, 0], [0, 1]], id='list'),
        pytest.param(1, id='int'),
    ])] TestHusimiQ.test_failure_if_not_a_Qobj(self, obj)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_failure_if_not_a_Qobj,"(self, obj)",,,,"pytest.mark.parametrize('obj', [
        pytest.param(np.eye(2, dtype=np.complex128), id='ndarray'),
        pytest.param([[1, 0], [0, 1]], id='list'),
        pytest.param(1, id='int'),
    ])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('state', [
        pytest.param(lambda: qutip.rand_super(2), id='super'),
        pytest.param(lambda: qutip.rand_ket(2).dag(), id='bra'),
        pytest.param(lambda: 1j*qutip.rand_dm(2), id='non-dm operator'),
        pytest.param(lambda: qutip.Qobj([[1, 0], [0, 0]], dims=[[2], [2, 1]]),
                     id='nonsquare dm'),
        pytest.param(lambda: qutip.operator_to_vector(qutip.qeye(2)),
                     id='operator-ket'),
        pytest.param(lambda: qutip.operator_to_vector(qutip.qeye(2)).dag(),
                     id='operator-bra'),
    ])] TestHusimiQ.test_failure_if_not_a_state(self, state)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_failure_if_not_a_state,"(self, state)",,,,"pytest.mark.parametrize('state', [
        pytest.param(lambda: qutip.rand_super(2), id='super'),
        pytest.param(lambda: qutip.rand_ket(2).dag(), id='bra'),
        pytest.param(lambda: 1j*qutip.rand_dm(2), id='non-dm operator'),
        pytest.param(lambda: qutip.Qobj([[1, 0], [0, 0]], dims=[[2], [2, 1]]),
                     id='nonsquare dm'),
        pytest.param(lambda: qutip.operator_to_vector(qutip.qeye(2)),
                     id='operator-ket'),
        pytest.param(lambda: qutip.operator_to_vector(qutip.qeye(2)).dag(),
                     id='operator-bra'),
    ])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('g', [
        pytest.param(np.sqrt(2), id='natural units'),
        pytest.param(1, id='arb units'),
    ])] TestHusimiQ.test_function_and_class_are_equivalent(self, size, dm, n_xs, n_ys, g)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_function_and_class_are_equivalent,"(self, size, dm, n_xs, n_ys, g)",,,,"pytest.mark.parametrize('g', [
        pytest.param(np.sqrt(2), id='natural units'),
        pytest.param(1, id='arb units'),
    ])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('n_ys', [5, 101])] TestHusimiQ.test_function_and_class_are_equivalent(self, size, dm, n_xs, n_ys, g)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_function_and_class_are_equivalent,"(self, size, dm, n_xs, n_ys, g)",,,,"pytest.mark.parametrize('n_ys', [5, 101])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('n_xs', [5, 101])] TestHusimiQ.test_function_and_class_are_equivalent(self, size, dm, n_xs, n_ys, g)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_function_and_class_are_equivalent,"(self, size, dm, n_xs, n_ys, g)",,,,"pytest.mark.parametrize('n_xs', [5, 101])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('dm', [True, False], ids=['dm', 'ket'])] TestHusimiQ.test_function_and_class_are_equivalent(self, size, dm, n_xs, n_ys, g)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_function_and_class_are_equivalent,"(self, size, dm, n_xs, n_ys, g)",,,,"pytest.mark.parametrize('dm', [True, False], ids=['dm', 'ket'])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('size', [5, 32])] TestHusimiQ.test_function_and_class_are_equivalent(self, size, dm, n_xs, n_ys, g)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_function_and_class_are_equivalent,"(self, size, dm, n_xs, n_ys, g)",,,,"pytest.mark.parametrize('size', [5, 32])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('g', [
        pytest.param(np.sqrt(2), id='natural units'),
        pytest.param(1, id='arb units'),
    ])] TestHusimiQ.test_iterate_and_precompute_are_equivalent(self, size, n_xs, n_ys, g)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_iterate_and_precompute_are_equivalent,"(self, size, n_xs, n_ys, g)",,,,"pytest.mark.parametrize('g', [
        pytest.param(np.sqrt(2), id='natural units'),
        pytest.param(1, id='arb units'),
    ])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('n_ys', [5, 101])] TestHusimiQ.test_iterate_and_precompute_are_equivalent(self, size, n_xs, n_ys, g)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_iterate_and_precompute_are_equivalent,"(self, size, n_xs, n_ys, g)",,,,"pytest.mark.parametrize('n_ys', [5, 101])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('n_xs', [5, 101])] TestHusimiQ.test_iterate_and_precompute_are_equivalent(self, size, n_xs, n_ys, g)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_iterate_and_precompute_are_equivalent,"(self, size, n_xs, n_ys, g)",,,,"pytest.mark.parametrize('n_xs', [5, 101])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('size', [5, 32])] TestHusimiQ.test_iterate_and_precompute_are_equivalent(self, size, n_xs, n_ys, g)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_iterate_and_precompute_are_equivalent,"(self, size, n_xs, n_ys, g)",,,,"pytest.mark.parametrize('size', [5, 32])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('initial_size', [5, 8])] TestHusimiQ.test_same_class_can_take_many_sizes(self, dm, initial_size)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_same_class_can_take_many_sizes,"(self, dm, initial_size)",,,,"pytest.mark.parametrize('initial_size', [5, 8])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('dm', [True, False], ids=['dm', 'ket'])] TestHusimiQ.test_same_class_can_take_many_sizes(self, dm, initial_size)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_same_class_can_take_many_sizes,"(self, dm, initial_size)",,,,"pytest.mark.parametrize('dm', [True, False], ids=['dm', 'ket'])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('dm_first', [True, False])] TestHusimiQ.test_same_class_can_mix_ket_and_dm(self, dm_first)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_same_class_can_mix_ket_and_dm,"(self, dm_first)",,,,"pytest.mark.parametrize('dm_first', [True, False])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('n_ys', [5, 101])] TestHusimiQ.test_qfunc_is_linear(self, n_xs, n_ys, mix)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_qfunc_is_linear,"(self, n_xs, n_ys, mix)",,,,"pytest.mark.parametrize('n_ys', [5, 101])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('n_xs', [5, 101])] TestHusimiQ.test_qfunc_is_linear(self, n_xs, n_ys, mix)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_qfunc_is_linear,"(self, n_xs, n_ys, mix)",,,,"pytest.mark.parametrize('n_xs', [5, 101])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('mix', [0.1, 0.5])] TestHusimiQ.test_qfunc_is_linear(self, n_xs, n_ys, mix)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_qfunc_is_linear,"(self, n_xs, n_ys, mix)",,,,"pytest.mark.parametrize('mix', [0.1, 0.5])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('n_ys', [5, 101])] TestHusimiQ.test_ket_and_dm_give_same_result(self, n_xs, n_ys, size)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_ket_and_dm_give_same_result,"(self, n_xs, n_ys, size)",,,,"pytest.mark.parametrize('n_ys', [5, 101])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('n_xs', [5, 101])] TestHusimiQ.test_ket_and_dm_give_same_result(self, n_xs, n_ys, size)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_ket_and_dm_give_same_result,"(self, n_xs, n_ys, size)",,,,"pytest.mark.parametrize('n_xs', [5, 101])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('size', [5, 32])] TestHusimiQ.test_ket_and_dm_give_same_result(self, n_xs, n_ys, size)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_ket_and_dm_give_same_result,"(self, n_xs, n_ys, size)",,,,"pytest.mark.parametrize('size', [5, 32])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('g', [
        pytest.param(np.sqrt(2), id='natural units'),
        pytest.param(1, id='arb units'),
    ])] TestHusimiQ.test_against_naive_implementation(self, xs, ys, g, size)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_against_naive_implementation,"(self, xs, ys, g, size)",,,,"pytest.mark.parametrize('g', [
        pytest.param(np.sqrt(2), id='natural units'),
        pytest.param(1, id='arb units'),
    ])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('ys', [
        pytest.param(np.linspace(-1, 1, 5), id='(-1,1,5)'),
        pytest.param(np.linspace(0, 2, 3), id='(0,2,3)'),
    ])] TestHusimiQ.test_against_naive_implementation(self, xs, ys, g, size)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_against_naive_implementation,"(self, xs, ys, g, size)",,,,"pytest.mark.parametrize('ys', [
        pytest.param(np.linspace(-1, 1, 5), id='(-1,1,5)'),
        pytest.param(np.linspace(0, 2, 3), id='(0,2,3)'),
    ])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('xs', [
        pytest.param(np.linspace(-1, 1, 5), id='(-1,1,5)'),
        pytest.param(np.linspace(0, 2, 3), id='(0,2,3)'),
    ])] TestHusimiQ.test_against_naive_implementation(self, xs, ys, g, size)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_against_naive_implementation,"(self, xs, ys, g, size)",,,,"pytest.mark.parametrize('xs', [
        pytest.param(np.linspace(-1, 1, 5), id='(-1,1,5)'),
        pytest.param(np.linspace(0, 2, 3), id='(0,2,3)'),
    ])",,,,
test_wigner.py,python,class_method,,,"Class method: [pytest.mark.parametrize('size', [3, 5])] TestHusimiQ.test_against_naive_implementation(self, xs, ys, g, size)",qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,test_against_naive_implementation,"(self, xs, ys, g, size)",,,,"pytest.mark.parametrize('size', [3, 5])",,,,
test_wigner.py,python,class,,,Class: TestHusimiQ,qutip,qutip,v5.0.4,,,,,,,,,TestHusimiQ,,,,,,,,,,
test_wigner.py,python,function,test_wigner_bell1_su2parity,(),Function: test_wigner_bell1_su2parity(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_wigner.py,python,function,test_parity,(),Function: test_parity(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_wigner.py,python,function,test_wigner_coherent,(),Function: test_wigner_coherent(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_wigner.py,python,function,test_wigner_fock,(),Function: test_wigner_fock(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_wigner.py,python,function,test_wigner_compare_methods_dm,(),Function: test_wigner_compare_methods_dm(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_wigner.py,python,function,test_wigner_compare_methods_ket,(),Function: test_wigner_compare_methods_ket(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_wigner.py,python,function,test_wigner_fft_comparse_ket,(),Function: test_wigner_fft_comparse_ket(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_wigner.py,python,function,test_wigner_fft_comparse_dm,(),Function: test_wigner_fft_comparse_dm(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_wigner.py,python,function,test_wigner_clenshaw_iter_dm,(),Function: test_wigner_clenshaw_iter_dm(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_wigner.py,python,function,test_wigner_clenshaw_sp_iter_dm,(),Function: test_wigner_clenshaw_sp_iter_dm(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_wigner.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_wigner.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_wigner.py,python,import,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,itertools,,,,,,,,,,,,,,,,,
test_wigner.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_wigner.py,python,local_import,,,Import: trapezoid from scipy.integrate,qutip,qutip,v5.0.4,from scipy.integrate import trapezoid,trapezoid,scipy.integrate,scipy.integrate,,,,,,,,,,,,,,,
test_wigner.py,python,local_import,,,Import: laguerre from scipy.special,qutip,qutip,v5.0.4,from scipy.special import laguerre,laguerre,scipy.special,scipy.special,,,,,,,,,,,,,,,
test_wigner.py,python,local_import,,,Import: rand from numpy.random,qutip,qutip,v5.0.4,from numpy.random import rand,rand,numpy.random,numpy.random,,,,,,,,,,,,,,,
test_wigner.py,python,local_import,,,Import: assert_equal from numpy.testing,qutip,qutip,v5.0.4,"from numpy.testing import assert_equal, assert_almost_equal, assert_allclose",assert_equal,numpy.testing,numpy.testing,,,,,,,,,,,,,,,
test_wigner.py,python,local_import,,,Import: assert_almost_equal from numpy.testing,qutip,qutip,v5.0.4,"from numpy.testing import assert_equal, assert_almost_equal, assert_allclose",assert_almost_equal,numpy.testing,numpy.testing,,,,,,,,,,,,,,,
test_wigner.py,python,local_import,,,Import: assert_allclose from numpy.testing,qutip,qutip,v5.0.4,"from numpy.testing import assert_equal, assert_almost_equal, assert_allclose",assert_allclose,numpy.testing,numpy.testing,,,,,,,,,,,,,,,
test_wigner.py,python,local_import,,,Import: coherent from qutip.core.states,qutip,qutip,v5.0.4,"from qutip.core.states import coherent, fock, ket, bell_state",coherent,qutip.core.states,qutip.core.states,,,,,,,,,,,,,,,
test_wigner.py,python,local_import,,,Import: fock from qutip.core.states,qutip,qutip,v5.0.4,"from qutip.core.states import coherent, fock, ket, bell_state",fock,qutip.core.states,qutip.core.states,,,,,,,,,,,,,,,
test_wigner.py,python,local_import,,,Import: ket from qutip.core.states,qutip,qutip,v5.0.4,"from qutip.core.states import coherent, fock, ket, bell_state",ket,qutip.core.states,qutip.core.states,,,,,,,,,,,,,,,
test_wigner.py,python,local_import,,,Import: bell_state from qutip.core.states,qutip,qutip,v5.0.4,"from qutip.core.states import coherent, fock, ket, bell_state",bell_state,qutip.core.states,qutip.core.states,,,,,,,,,,,,,,,
test_wigner.py,python,local_import,,,Import: wigner from qutip.wigner,qutip,qutip,v5.0.4,"from qutip.wigner import wigner, wigner_transform, _parity",wigner,qutip.wigner,qutip.wigner,,,,,,,,,,,,,,,
test_wigner.py,python,local_import,,,Import: wigner_transform from qutip.wigner,qutip,qutip,v5.0.4,"from qutip.wigner import wigner, wigner_transform, _parity",wigner_transform,qutip.wigner,qutip.wigner,,,,,,,,,,,,,,,
test_wigner.py,python,local_import,,,Import: _parity from qutip.wigner,qutip,qutip,v5.0.4,"from qutip.wigner import wigner, wigner_transform, _parity",_parity,qutip.wigner,qutip.wigner,,,,,,,,,,,,,,,
test_wigner.py,python,local_import,,,Import: rand_dm from qutip.random_objects,qutip,qutip,v5.0.4,"from qutip.random_objects import rand_dm, rand_ket",rand_dm,qutip.random_objects,qutip.random_objects,,,,,,,,,,,,,,,
test_wigner.py,python,local_import,,,Import: rand_ket from qutip.random_objects,qutip,qutip,v5.0.4,"from qutip.random_objects import rand_dm, rand_ket",rand_ket,qutip.random_objects,qutip.random_objects,,,,,,,,,,,,,,,
test_wigner.py,python,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_wigner.py,python,,,,Directory: qutip\tests\test_wigner.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,Directory: qutip\tests\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brtools.py,python,function,_make_rand_data,(shape),Function: _make_rand_data(shape),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brtools.py,python,function,test_eigen_transform_ket,(),Function: test_eigen_transform_ket(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brtools.py,python,function,test_eigen_transform_dm,(),Function: test_eigen_transform_dm(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brtools.py,python,function,test_eigen_transform_oper_ket,(),Function: test_eigen_transform_oper_ket(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brtools.py,python,function,test_eigen_transform_super_ops,(),Function: test_eigen_transform_super_ops(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brtools.py,python,function,test_bloch_redfield_tensor_spectral_string,(),Function: test_bloch_redfield_tensor_spectral_string(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brtools.py,python,function,test_bloch_redfield_tensor_spectral_callable,(),Function: test_bloch_redfield_tensor_spectral_callable(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brtools.py,python,constant,,,"Constant: transform = {
    0: lambda x: x,
    1: qutip.data.transpose,
    2: qutip.data.conj,
    3: qutip.data.adjoint
}",qutip,qutip,v5.0.4,,,,,"transform = {
    0: lambda x: x,
    1: qutip.data.transpose,
    2: qutip.data.conj,
    3: qutip.data.adjoint
}",transform,"{
    0: lambda x: x,
    1: qutip.data.transpose,
    2: qutip.data.conj,
    3: qutip.data.adjoint
}",,,,,,,,,,,,
test_brtools.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_brtools.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_brtools.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_brtools.py,python,local_import,,,Import: matmul_var_data from qutip.core._brtools,qutip,qutip,v5.0.4,"from qutip.core._brtools import matmul_var_data, _EigenBasisTransform",matmul_var_data,qutip.core._brtools,qutip.core._brtools,,,,,,,,,,,,,,,
test_brtools.py,python,local_import,,,Import: _EigenBasisTransform from qutip.core._brtools,qutip,qutip,v5.0.4,"from qutip.core._brtools import matmul_var_data, _EigenBasisTransform",_EigenBasisTransform,qutip.core._brtools,qutip.core._brtools,,,,,,,,,,,,,,,
test_brtools.py,python,local_import,,,Import: brterm from qutip.core.blochredfield,qutip,qutip,v5.0.4,"from qutip.core.blochredfield import brterm, bloch_redfield_tensor",brterm,qutip.core.blochredfield,qutip.core.blochredfield,,,,,,,,,,,,,,,
test_brtools.py,python,local_import,,,Import: bloch_redfield_tensor from qutip.core.blochredfield,qutip,qutip,v5.0.4,"from qutip.core.blochredfield import brterm, bloch_redfield_tensor",bloch_redfield_tensor,qutip.core.blochredfield,qutip.core.blochredfield,,,,,,,,,,,,,,,
test_brtools.py,python,local_import,,,Import: _br_term_dense from qutip.core._brtensor,qutip,qutip,v5.0.4,"from qutip.core._brtensor import (_br_term_dense, _br_term_sparse,
                                  _br_term_data, _BlochRedfieldElement)",_br_term_dense,qutip.core._brtensor,qutip.core._brtensor,,,,,,,,,,,,,,,
test_brtools.py,python,local_import,,,Import: _br_term_sparse from qutip.core._brtensor,qutip,qutip,v5.0.4,"from qutip.core._brtensor import (_br_term_dense, _br_term_sparse,
                                  _br_term_data, _BlochRedfieldElement)",_br_term_sparse,qutip.core._brtensor,qutip.core._brtensor,,,,,,,,,,,,,,,
test_brtools.py,python,local_import,,,Import: _br_term_data from qutip.core._brtensor,qutip,qutip,v5.0.4,"from qutip.core._brtensor import (_br_term_dense, _br_term_sparse,
                                  _br_term_data, _BlochRedfieldElement)",_br_term_data,qutip.core._brtensor,qutip.core._brtensor,,,,,,,,,,,,,,,
test_brtools.py,python,local_import,,,Import: _BlochRedfieldElement from qutip.core._brtensor,qutip,qutip,v5.0.4,"from qutip.core._brtensor import (_br_term_dense, _br_term_sparse,
                                  _br_term_data, _BlochRedfieldElement)",_BlochRedfieldElement,qutip.core._brtensor,qutip.core._brtensor,,,,,,,,,,,,,,,
test_brtools.py,python,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brtools.py,python,,,,Directory: qutip\tests\core\test_brtools.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_coefficient.py,python,function,f,"(t, w)","Function: f(t, w)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_coefficient.py,python,function,g,"(t, w)","Function: g(t, w)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_coefficient.py,python,function,h,"(t, a, b)","Function: h(t, a, b)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_coefficient.py,python,function,f_kw,"(t, w, **args)","Function: f_kw(t, w, **args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_coefficient.py,python,function,g_kw,"(t, w, **args)","Function: g_kw(t, w, **args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_coefficient.py,python,function,h_kw,"(t, a, b, **args)","Function: h_kw(t, a, b, **args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_coefficient.py,python,function,f_qtv4,"(t, args)","Function: f_qtv4(t, args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_coefficient.py,python,function,g_qtv4,"(t, args)","Function: g_qtv4(t, args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_coefficient.py,python,function,h_qtv4,"(t, args)","Function: h_qtv4(t, args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_coefficient.py,python,function,_assert_eq_over_interval,"(coeff1, coeff2, rtol=1e-12, inside=False)","Function: _assert_eq_over_interval(coeff1, coeff2, rtol=1e-12, inside=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_coefficient.py,python,function,coeff_generator,"(style, func)","Function: coeff_generator(style, func)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_coefficient.py,python,function,test_ConstantCoefficient,(),Function: test_ConstantCoefficient(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_coefficient.py,python,function,test_warn_no_cython,(),Function: test_warn_no_cython(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_coefficient.py,python,function,_add,(coeff),Function: _add(coeff),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_coefficient.py,python,function,_pass,(coeff),Function: _pass(coeff),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_coefficient.py,python,function,_mul,(coeff),Function: _mul(coeff),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_coefficient.py,python,constant,,,"Constant: args = {""w"": 1j}",qutip,qutip,v5.0.4,,,,,"args = {""w"": 1j}",args,"{""w"": 1j}",,,,,,,,,,,,
test_coefficient.py,python,constant,,,"Constant: tlist = np.linspace(0, 1, 101)",qutip,qutip,v5.0.4,,,,,"tlist = np.linspace(0, 1, 101)",tlist,"np.linspace(0, 1, 101)",,,,,,,,,,,,
test_coefficient.py,python,constant,,,"Constant: f_asarray = f(tlist, **args)",qutip,qutip,v5.0.4,,,,,"f_asarray = f(tlist, **args)",f_asarray,"f(tlist, **args)",,,,,,,,,,,,
test_coefficient.py,python,constant,,,"Constant: g_asarray = g(tlist, **args)",qutip,qutip,v5.0.4,,,,,"g_asarray = g(tlist, **args)",g_asarray,"g(tlist, **args)",,,,,,,,,,,,
test_coefficient.py,python,constant,,,"Constant: tlistlog = np.logspace(-2, 0, 501)",qutip,qutip,v5.0.4,,,,,"tlistlog = np.logspace(-2, 0, 501)",tlistlog,"np.logspace(-2, 0, 501)",,,,,,,,,,,,
test_coefficient.py,python,constant,,,"Constant: f_asarraylog = f(tlistlog, **args)",qutip,qutip,v5.0.4,,,,,"f_asarraylog = f(tlistlog, **args)",f_asarraylog,"f(tlistlog, **args)",,,,,,,,,,,,
test_coefficient.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_coefficient.py,python,import,,,Import: pickle,qutip,qutip,v5.0.4,import pickle,pickle,,,,,,,,,,,,,,,,,
test_coefficient.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_coefficient.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_coefficient.py,python,import,,,Import: scipy.interpolate,qutip,qutip,v5.0.4,import scipy.interpolate as interp,scipy.interpolate,,,,,,,,,,,,,,,,,
test_coefficient.py,python,import,,,Import: partial from functools,qutip,qutip,v5.0.4,from functools import partial,partial,functools,,,,,,,,,,,,,,,,
test_coefficient.py,python,local_import,,,Import: coefficient from qutip.core.coefficient,qutip,qutip,v5.0.4,"from qutip.core.coefficient import (coefficient, norm, conj, const,
                                    CompilationOptions, Coefficient,
                                    clean_compiled_coefficient,
                                    WARN_MISSING_MODULE,
                                    )",coefficient,qutip.core.coefficient,qutip.core.coefficient,,,,,,,,,,,,,,,
test_coefficient.py,python,local_import,,,Import: norm from qutip.core.coefficient,qutip,qutip,v5.0.4,"from qutip.core.coefficient import (coefficient, norm, conj, const,
                                    CompilationOptions, Coefficient,
                                    clean_compiled_coefficient,
                                    WARN_MISSING_MODULE,
                                    )",norm,qutip.core.coefficient,qutip.core.coefficient,,,,,,,,,,,,,,,
test_coefficient.py,python,local_import,,,Import: conj from qutip.core.coefficient,qutip,qutip,v5.0.4,"from qutip.core.coefficient import (coefficient, norm, conj, const,
                                    CompilationOptions, Coefficient,
                                    clean_compiled_coefficient,
                                    WARN_MISSING_MODULE,
                                    )",conj,qutip.core.coefficient,qutip.core.coefficient,,,,,,,,,,,,,,,
test_coefficient.py,python,local_import,,,Import: const from qutip.core.coefficient,qutip,qutip,v5.0.4,"from qutip.core.coefficient import (coefficient, norm, conj, const,
                                    CompilationOptions, Coefficient,
                                    clean_compiled_coefficient,
                                    WARN_MISSING_MODULE,
                                    )",const,qutip.core.coefficient,qutip.core.coefficient,,,,,,,,,,,,,,,
test_coefficient.py,python,local_import,,,Import: CompilationOptions from qutip.core.coefficient,qutip,qutip,v5.0.4,"from qutip.core.coefficient import (coefficient, norm, conj, const,
                                    CompilationOptions, Coefficient,
                                    clean_compiled_coefficient,
                                    WARN_MISSING_MODULE,
                                    )",CompilationOptions,qutip.core.coefficient,qutip.core.coefficient,,,,,,,,,,,,,,,
test_coefficient.py,python,local_import,,,Import: Coefficient from qutip.core.coefficient,qutip,qutip,v5.0.4,"from qutip.core.coefficient import (coefficient, norm, conj, const,
                                    CompilationOptions, Coefficient,
                                    clean_compiled_coefficient,
                                    WARN_MISSING_MODULE,
                                    )",Coefficient,qutip.core.coefficient,qutip.core.coefficient,,,,,,,,,,,,,,,
test_coefficient.py,python,local_import,,,Import: clean_compiled_coefficient from qutip.core.coefficient,qutip,qutip,v5.0.4,"from qutip.core.coefficient import (coefficient, norm, conj, const,
                                    CompilationOptions, Coefficient,
                                    clean_compiled_coefficient,
                                    WARN_MISSING_MODULE,
                                    )",clean_compiled_coefficient,qutip.core.coefficient,qutip.core.coefficient,,,,,,,,,,,,,,,
test_coefficient.py,python,local_import,,,Import: WARN_MISSING_MODULE from qutip.core.coefficient,qutip,qutip,v5.0.4,"from qutip.core.coefficient import (coefficient, norm, conj, const,
                                    CompilationOptions, Coefficient,
                                    clean_compiled_coefficient,
                                    WARN_MISSING_MODULE,
                                    )",WARN_MISSING_MODULE,qutip.core.coefficient,qutip.core.coefficient,,,,,,,,,,,,,,,
test_coefficient.py,python,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_coefficient.py,python,,,,Directory: qutip\tests\core\test_coefficient.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_dimensions.py,python,class_method,,,"Class method: TestFlattenUnflatten.test_flatten(self, base, flat)",qutip,qutip,v5.0.4,,,,,,,,,TestFlattenUnflatten,test_flatten,"(self, base, flat)",,,,,,,,
test_dimensions.py,python,class_method,,,"Class method: TestFlattenUnflatten.test_unflatten(self, base, flat)",qutip,qutip,v5.0.4,,,,,,,,,TestFlattenUnflatten,test_unflatten,"(self, base, flat)",,,,,,,,
test_dimensions.py,python,class_method,,,"Class method: TestSuperOperatorDimsModification.test_dims_to_tensor_perm(self, indices)",qutip,qutip,v5.0.4,,,,,,,,,TestSuperOperatorDimsModification,test_dims_to_tensor_perm,"(self, indices)",,,,,,,,
test_dimensions.py,python,class_method,,,"Class method: TestSuperOperatorDimsModification.test_dims_idxs_to_tensor_idxs(self, indices)",qutip,qutip,v5.0.4,,,,,,,,,TestSuperOperatorDimsModification,test_dims_idxs_to_tensor_idxs,"(self, indices)",,,,,,,,
test_dimensions.py,python,class_method,,,"Class method: TestSuperOperatorDimsModification.test_dims_to_tensor_shape(self, indices)",qutip,qutip,v5.0.4,,,,,,,,,TestSuperOperatorDimsModification,test_dims_to_tensor_shape,"(self, indices)",,,,,,,,
test_dimensions.py,python,class_method,,,"Class method: [pytest.mark.parametrize([""base"", ""expected""], [
        pytest.param([[2], [2]], 'oper'),
        pytest.param([[2, 3], [2, 3]], 'oper'),
        pytest.param([[2], [3]], 'oper'),
        pytest.param([[2], [1]], 'ket'),
        pytest.param([[1], [2]], 'bra'),
        pytest.param([[[2, 3], [2, 3]], [1]], 'operator-ket'),
        pytest.param([[1], [[2, 3], [2, 3]]], 'operator-bra'),
        pytest.param([[[3], [3]], [[2, 3], [2, 3]]], 'super'),
    ])] TestTypeFromDims.test_Dimensions_type(self, base, expected)",qutip,qutip,v5.0.4,,,,,,,,,TestTypeFromDims,test_Dimensions_type,"(self, base, expected)",,,,"pytest.mark.parametrize([""base"", ""expected""], [
        pytest.param([[2], [2]], 'oper'),
        pytest.param([[2, 3], [2, 3]], 'oper'),
        pytest.param([[2], [3]], 'oper'),
        pytest.param([[2], [1]], 'ket'),
        pytest.param([[1], [2]], 'bra'),
        pytest.param([[[2, 3], [2, 3]], [1]], 'operator-ket'),
        pytest.param([[1], [[2, 3], [2, 3]]], 'operator-bra'),
        pytest.param([[[3], [3]], [[2, 3], [2, 3]]], 'super'),
    ])",,,,
test_dimensions.py,python,class_method,,,"Class method: [pytest.mark.parametrize([""base"", ""expected""], [
        pytest.param([[1], [3]], [[1], [3]], id=""ket trivial""),
        pytest.param([[1, 1], [2, 3]], [[1], [6]], id=""ket tensor""),
        pytest.param([[2], [1]], [[2], [1]], id=""bra trivial""),
        pytest.param([[2, 3], [1, 1]], [[6], [1]], id=""bra tensor""),
        pytest.param([[5], [5]], [[5], [5]], id=""oper trivial""),
        pytest.param([[2, 3], [2, 3]], [[6], [6]], id=""oper tensor""),
    ])] TestCollapseDims.test_oper(self, base, expected)",qutip,qutip,v5.0.4,,,,,,,,,TestCollapseDims,test_oper,"(self, base, expected)",,,,"pytest.mark.parametrize([""base"", ""expected""], [
        pytest.param([[1], [3]], [[1], [3]], id=""ket trivial""),
        pytest.param([[1, 1], [2, 3]], [[1], [6]], id=""ket tensor""),
        pytest.param([[2], [1]], [[2], [1]], id=""bra trivial""),
        pytest.param([[2, 3], [1, 1]], [[6], [1]], id=""bra tensor""),
        pytest.param([[5], [5]], [[5], [5]], id=""oper trivial""),
        pytest.param([[2, 3], [2, 3]], [[6], [6]], id=""oper tensor""),
    ])",,,,
test_dimensions.py,python,class_method,,,"Class method: [pytest.mark.parametrize([""base"", ""expected""], [
        pytest.param([[[1]], [[2, 3], [2, 3]]],
                     [[[1]], [[6], [6]]], id=""operator-ket""),
        pytest.param([[[2, 3], [2, 3]], [[1]]],
                     [[[6], [6]], [[1]]], id=""operator-bra""),
        pytest.param([[[2, 3], [2, 3]], [[2, 3], [2, 3]]],
                     [[[6], [6]], [[6], [6]]], id=""super""),
    ])] TestCollapseDims.test_super(self, base, expected)",qutip,qutip,v5.0.4,,,,,,,,,TestCollapseDims,test_super,"(self, base, expected)",,,,"pytest.mark.parametrize([""base"", ""expected""], [
        pytest.param([[[1]], [[2, 3], [2, 3]]],
                     [[[1]], [[6], [6]]], id=""operator-ket""),
        pytest.param([[[2, 3], [2, 3]], [[1]]],
                     [[[6], [6]], [[1]]], id=""operator-bra""),
        pytest.param([[[2, 3], [2, 3]], [[2, 3], [2, 3]]],
                     [[[6], [6]], [[6], [6]]], id=""super""),
    ])",,,,
test_dimensions.py,python,class,,,Class: TestFlattenUnflatten,qutip,qutip,v5.0.4,,,,,,,,,TestFlattenUnflatten,,,,,,,,,,
test_dimensions.py,python,class,,,Class: TestSuperOperatorDimsModification,qutip,qutip,v5.0.4,,,,,,,,,TestSuperOperatorDimsModification,,,,,,,,,,
test_dimensions.py,python,class,,,Class: TestTypeFromDims,qutip,qutip,v5.0.4,,,,,,,,,TestTypeFromDims,,,,,,,,,,
test_dimensions.py,python,class,,,Class: TestCollapseDims,qutip,qutip,v5.0.4,,,,,,,,,TestCollapseDims,,,,,,,,,,
test_dimensions.py,python,function,test_dims_matmul_bad,(),Function: test_dims_matmul_bad(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_dimensions.py,python,function,test_dims_comparison,(),Function: test_dims_comparison(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_dimensions.py,python,constant,,,"Constant: _Indices = collections.namedtuple('_Indices', ['base', 'permutation', 'shape'])",qutip,qutip,v5.0.4,,,,,"_Indices = collections.namedtuple('_Indices', ['base', 'permutation', 'shape'])",_Indices,"collections.namedtuple('_Indices', ['base', 'permutation', 'shape'])",,,,,,,,,,,,
test_dimensions.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_dimensions.py,python,import,,,Import: collections,qutip,qutip,v5.0.4,import collections,collections,,,,,,,,,,,,,,,,,
test_dimensions.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_dimensions.py,python,local_import,,,Import: flatten from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",flatten,qutip.core.dimensions,qutip.core.dimensions,,,,,,,,,,,,,,,
test_dimensions.py,python,local_import,,,Import: unflatten from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",unflatten,qutip.core.dimensions,qutip.core.dimensions,,,,,,,,,,,,,,,
test_dimensions.py,python,local_import,,,Import: enumerate_flat from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",enumerate_flat,qutip.core.dimensions,qutip.core.dimensions,,,,,,,,,,,,,,,
test_dimensions.py,python,local_import,,,Import: deep_remove from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",deep_remove,qutip.core.dimensions,qutip.core.dimensions,,,,,,,,,,,,,,,
test_dimensions.py,python,local_import,,,Import: deep_map from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",deep_map,qutip.core.dimensions,qutip.core.dimensions,,,,,,,,,,,,,,,
test_dimensions.py,python,local_import,,,Import: dims_idxs_to_tensor_idxs from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",dims_idxs_to_tensor_idxs,qutip.core.dimensions,qutip.core.dimensions,,,,,,,,,,,,,,,
test_dimensions.py,python,local_import,,,Import: dims_to_tensor_shape from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",dims_to_tensor_shape,qutip.core.dimensions,qutip.core.dimensions,,,,,,,,,,,,,,,
test_dimensions.py,python,local_import,,,Import: dims_to_tensor_perm from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",dims_to_tensor_perm,qutip.core.dimensions,qutip.core.dimensions,,,,,,,,,,,,,,,
test_dimensions.py,python,local_import,,,Import: collapse_dims_super from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",collapse_dims_super,qutip.core.dimensions,qutip.core.dimensions,,,,,,,,,,,,,,,
test_dimensions.py,python,local_import,,,Import: collapse_dims_oper from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",collapse_dims_oper,qutip.core.dimensions,qutip.core.dimensions,,,,,,,,,,,,,,,
test_dimensions.py,python,local_import,,,Import: Dimensions from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",Dimensions,qutip.core.dimensions,qutip.core.dimensions,,,,,,,,,,,,,,,
test_dimensions.py,python,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_dimensions.py,python,,,,Directory: qutip\tests\core\test_dimensions.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_eigen.py,python,function,is_eigen_set,"(oper, vals, vecs)","Function: is_eigen_set(oper, vals, vecs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_eigen.py,python,function,test_BigDenseValsOnly,(),Function: test_BigDenseValsOnly(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_eigen.py,python,import,,,Import: scipy,qutip,qutip,v5.0.4,import scipy,scipy,,,,,,,,,,,,,,,,,
test_eigen.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_eigen.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_eigen.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_eigen.py,python,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_eigen.py,python,,,,Directory: qutip\tests\core\test_eigen.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_eigenstates.py,python,function,_canonicalise_eigenvector,(vec),Function: _canonicalise_eigenvector(vec),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_eigenstates.py,python,constant,,,Constant: _diagonal_dimension = 10,qutip,qutip,v5.0.4,,,,,_diagonal_dimension = 10,_diagonal_dimension,10,,,,,,,,,,,,
test_eigenstates.py,python,constant,,,Constant: _diagonal_eigenvalues = np.sort(np.random.rand(_diagonal_dimension)),qutip,qutip,v5.0.4,,,,,_diagonal_eigenvalues = np.sort(np.random.rand(_diagonal_dimension)),_diagonal_eigenvalues,np.sort(np.random.rand(_diagonal_dimension)),,,,,,,,,,,,
test_eigenstates.py,python,constant,,,"Constant: _diagonal_eigenstates = np.array([[0]*n + [1] + [0]*(_diagonal_dimension-n-1)
                                  for n in range(_diagonal_dimension)])",qutip,qutip,v5.0.4,,,,,"_diagonal_eigenstates = np.array([[0]*n + [1] + [0]*(_diagonal_dimension-n-1)
                                  for n in range(_diagonal_dimension)])",_diagonal_eigenstates,"np.array([[0]*n + [1] + [0]*(_diagonal_dimension-n-1)
                                  for n in range(_diagonal_dimension)])",,,,,,,,,,,,
test_eigenstates.py,python,constant,,,"Constant: _diagonal_hamiltonian = qutip.qdiags(_diagonal_eigenvalues, 0)",qutip,qutip,v5.0.4,,,,,"_diagonal_hamiltonian = qutip.qdiags(_diagonal_eigenvalues, 0)",_diagonal_hamiltonian,"qutip.qdiags(_diagonal_eigenvalues, 0)",,,,,,,,,,,,
test_eigenstates.py,python,constant,,,"Constant: _nondiagonal_hamiltonian = qutip.Qobj(np.array([
    [0.16252356,             0.27696416+0.0405202j,  0.19577420+0.07815636j],
    [0.27696416-0.0405202j,  0.45859633,             0.36222915+0.17372725j],
    [0.19577420-0.07815636j, 0.36222915-0.17372725j, 0.44149665]]))",qutip,qutip,v5.0.4,,,,,"_nondiagonal_hamiltonian = qutip.Qobj(np.array([
    [0.16252356,             0.27696416+0.0405202j,  0.19577420+0.07815636j],
    [0.27696416-0.0405202j,  0.45859633,             0.36222915+0.17372725j],
    [0.19577420-0.07815636j, 0.36222915-0.17372725j, 0.44149665]]))",_nondiagonal_hamiltonian,"qutip.Qobj(np.array([
    [0.16252356,             0.27696416+0.0405202j,  0.19577420+0.07815636j],
    [0.27696416-0.0405202j,  0.45859633,             0.36222915+0.17372725j],
    [0.19577420-0.07815636j, 0.36222915-0.17372725j, 0.44149665]]))",,,,,,,,,,,,
test_eigenstates.py,python,constant,,,"Constant: _nondiagonal_eigenvalues = np.array([
    -0.022062710138316392, 0.08888141616526818, 0.995797833973048])",qutip,qutip,v5.0.4,,,,,"_nondiagonal_eigenvalues = np.array([
    -0.022062710138316392, 0.08888141616526818, 0.995797833973048])",_nondiagonal_eigenvalues,"np.array([
    -0.022062710138316392, 0.08888141616526818, 0.995797833973048])",,,,,,,,,,,,
test_eigenstates.py,python,constant,,,"Constant: _nondiagonal_eigenstates = np.array([
    [-0.737511505546763, 0.5270680510449308-0.29398599661318j,
     0.009793118179759598+0.3029065489313791j],
    [0.5552814080417957, 0.23570050756381764 - 0.3577691669342573j,
     -0.3741560255426259+0.6067259021655438j],
    [-0.3843687514214284, -0.670810624386174+0.04723455831286158j,
     -0.5593181579625106+0.2953063897306936j]])",qutip,qutip,v5.0.4,,,,,"_nondiagonal_eigenstates = np.array([
    [-0.737511505546763, 0.5270680510449308-0.29398599661318j,
     0.009793118179759598+0.3029065489313791j],
    [0.5552814080417957, 0.23570050756381764 - 0.3577691669342573j,
     -0.3741560255426259+0.6067259021655438j],
    [-0.3843687514214284, -0.670810624386174+0.04723455831286158j,
     -0.5593181579625106+0.2953063897306936j]])",_nondiagonal_eigenstates,"np.array([
    [-0.737511505546763, 0.5270680510449308-0.29398599661318j,
     0.009793118179759598+0.3029065489313791j],
    [0.5552814080417957, 0.23570050756381764 - 0.3577691669342573j,
     -0.3741560255426259+0.6067259021655438j],
    [-0.3843687514214284, -0.670810624386174+0.04723455831286158j,
     -0.5593181579625106+0.2953063897306936j]])",,,,,,,,,,,,
test_eigenstates.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_eigenstates.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_eigenstates.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_eigenstates.py,python,import,,,Import: combinations from itertools,qutip,qutip,v5.0.4,from itertools import combinations,combinations,itertools,,,,,,,,,,,,,,,,
test_eigenstates.py,python,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_eigenstates.py,python,,,,Directory: qutip\tests\core\test_eigenstates.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_expect.py,python,class_method,,,"Class method: TestKnownExpectation.pytest_generate_tests(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,,,TestKnownExpectation,pytest_generate_tests,"(self, metafunc)",,,,,,,,
test_expect.py,python,class_method,,,"Class method: TestKnownExpectation.test_operator_by_basis(self, operator, state, expected)",qutip,qutip,v5.0.4,,,,,,,,,TestKnownExpectation,test_operator_by_basis,"(self, operator, state, expected)",,,,,,,,
test_expect.py,python,class_method,,,"Class method: TestKnownExpectation.test_broadcast_operator_list(self, operators, state, expected)",qutip,qutip,v5.0.4,,,,,,,,,TestKnownExpectation,test_broadcast_operator_list,"(self, operators, state, expected)",,,,,,,,
test_expect.py,python,class_method,,,"Class method: TestKnownExpectation.test_broadcast_state_list(self, operator, states, expected)",qutip,qutip,v5.0.4,,,,,,,,,TestKnownExpectation,test_broadcast_state_list,"(self, operator, states, expected)",,,,,,,,
test_expect.py,python,class_method,,,"Class method: TestKnownExpectation.test_broadcast_both_lists(self, operators, states, expected)",qutip,qutip,v5.0.4,,,,,,,,,TestKnownExpectation,test_broadcast_both_lists,"(self, operators, states, expected)",,,,,,,,
test_expect.py,python,class,,,Class: TestKnownExpectation,qutip,qutip,v5.0.4,,,,,,,,,TestKnownExpectation,,,,,,,,,,
test_expect.py,python,function,_case_to_dm,(case),Function: _case_to_dm(case),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_expect.py,python,function,_unwrap,(list_),Function: _unwrap(list_),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_expect.py,python,function,_case_id,(case),Function: _case_id(case),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_expect.py,python,function,test_no_real_attribute,(monkeypatch),Function: test_no_real_attribute(monkeypatch),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_expect.py,python,constant,,,"Constant: _Case = collections.namedtuple('_Case', ['operator', 'state', 'expected'])",qutip,qutip,v5.0.4,,,,,"_Case = collections.namedtuple('_Case', ['operator', 'state', 'expected'])",_Case,"collections.namedtuple('_Case', ['operator', 'state', 'expected'])",,,,,,,,,,,,
test_expect.py,python,constant,,,Constant: _dim = 5,qutip,qutip,v5.0.4,,,,,_dim = 5,_dim,5,,,,,,,,,,,,
test_expect.py,python,constant,,,"Constant: _known_fock = _Case([_num, _a],
                    [qutip.fock(_dim, n) for n in range(_dim)],
                    np.array([np.arange(_dim), np.zeros(_dim)]))",qutip,qutip,v5.0.4,,,,,"_known_fock = _Case([_num, _a],
                    [qutip.fock(_dim, n) for n in range(_dim)],
                    np.array([np.arange(_dim), np.zeros(_dim)]))",_known_fock,"_Case([_num, _a],
                    [qutip.fock(_dim, n) for n in range(_dim)],
                    np.array([np.arange(_dim), np.zeros(_dim)]))",,,,,,,,,,,,
test_expect.py,python,constant,,,"Constant: _known_qubit = _Case([_sx, _sz, _sp],
                     [qutip.basis(2, 0), qutip.basis(2, 1)],
                     np.array([[0, 0], [1, -1], [0, 0]]))",qutip,qutip,v5.0.4,,,,,"_known_qubit = _Case([_sx, _sz, _sp],
                     [qutip.basis(2, 0), qutip.basis(2, 1)],
                     np.array([[0, 0], [1, -1], [0, 0]]))",_known_qubit,"_Case([_sx, _sz, _sp],
                     [qutip.basis(2, 0), qutip.basis(2, 1)],
                     np.array([[0, 0], [1, -1], [0, 0]]))",,,,,,,,,,,,
test_expect.py,python,constant,,,"Constant: _known_cases = [_known_fock, _case_to_dm(_known_fock),
                _known_qubit, _case_to_dm(_known_qubit)]",qutip,qutip,v5.0.4,,,,,"_known_cases = [_known_fock, _case_to_dm(_known_fock),
                _known_qubit, _case_to_dm(_known_qubit)]",_known_cases,"[_known_fock, _case_to_dm(_known_fock),
                _known_qubit, _case_to_dm(_known_qubit)]",,,,,,,,,,,,
test_expect.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_expect.py,python,import,,,Import: collections,qutip,qutip,v5.0.4,import collections,collections,,,,,,,,,,,,,,,,,
test_expect.py,python,import,,,Import: functools,qutip,qutip,v5.0.4,import functools,functools,,,,,,,,,,,,,,,,,
test_expect.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_expect.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_expect.py,python,import,,,Import: qutip.core.data,qutip,qutip,v5.0.4,import qutip.core.data as _data,qutip.core.data,,,,,,,,,,,,,,,,,
test_expect.py,python,local_import,,,Import: CSR from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense",CSR,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_expect.py,python,local_import,,,Import: Dense from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense",Dense,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_expect.py,python,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_expect.py,python,,,,Directory: qutip\tests\core\test_expect.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_gates.py,python,class_field,,,"Class field: TestCliffordGroup.pauli = [qutip.qeye(2), qutip.sigmax(), qutip.sigmay(), qutip.sigmaz()]",qutip,qutip,v5.0.4,,,,,,,,,TestCliffordGroup,,,"pauli = [qutip.qeye(2), qutip.sigmax(), qutip.sigmay(), qutip.sigmaz()]",,,,pauli,"[qutip.qeye(2), qutip.sigmax(), qutip.sigmay(), qutip.sigmaz()]",,
test_gates.py,python,class_method,,,Class method: TestExplicitForm.test_swap(self),qutip,qutip,v5.0.4,,,,,,,,,TestExplicitForm,test_swap,(self),,,,,,,,
test_gates.py,python,class_method,,,"Class method: [pytest.mark.parametrize([""gate"", ""cgate"", ""args""], [
        pytest.param(qutip.sigmax, gates.cnot, (), id=""cnot""),
        pytest.param(qutip.sigmay, gates.cy_gate, (), id=""cy_gate""),
        pytest.param(qutip.sigmaz, gates.cz_gate, (), id=""cz_gate""),
        pytest.param(gates.s_gate, gates.cs_gate, (), id=""cs_gate""),
        pytest.param(gates.t_gate, gates.ct_gate, (), id=""ct_gate""),
        pytest.param(gates.phasegate, gates.cphase, (0.1,), id=""cphase""),
        pytest.param(qutip.sigmaz, gates.csign, (), id=""csign""),
        pytest.param(gates.swap, gates.fredkin, (), id=""fredkin""),
        pytest.param(gates.cnot, gates.toffoli, (), id=""toffoli""),
    ])] TestExplicitForm.test_controled(self, gate, cgate, args)",qutip,qutip,v5.0.4,,,,,,,,,TestExplicitForm,test_controled,"(self, gate, cgate, args)",,,,"pytest.mark.parametrize([""gate"", ""cgate"", ""args""], [
        pytest.param(qutip.sigmax, gates.cnot, (), id=""cnot""),
        pytest.param(qutip.sigmay, gates.cy_gate, (), id=""cy_gate""),
        pytest.param(qutip.sigmaz, gates.cz_gate, (), id=""cz_gate""),
        pytest.param(gates.s_gate, gates.cs_gate, (), id=""cs_gate""),
        pytest.param(gates.t_gate, gates.ct_gate, (), id=""ct_gate""),
        pytest.param(gates.phasegate, gates.cphase, (0.1,), id=""cphase""),
        pytest.param(qutip.sigmaz, gates.csign, (), id=""csign""),
        pytest.param(gates.swap, gates.fredkin, (), id=""fredkin""),
        pytest.param(gates.cnot, gates.toffoli, (), id=""toffoli""),
    ])",,,,
test_gates.py,python,class_method,,,"Class method: [pytest.mark.parametrize([""gate"", ""power"", ""expected""], [
        pytest.param(gates.snot, 2, lambda : qutip.qeye(2), id=""snot""),
        pytest.param(gates.s_gate, 4, lambda : qutip.qeye(2), id=""s_gate""),
        pytest.param(gates.t_gate, 8, lambda : qutip.qeye(2), id=""t_gate""),
        pytest.param(gates.berkeley, 8, lambda : -qutip.qeye([2, 2]),
                     id=""berkeley""),
        pytest.param(gates.sqrtnot, 2, qutip.sigmax, id=""sqrtnot""),
        pytest.param(gates.sqrtswap, 2, gates.swap, id=""cs_gate""),
        pytest.param(gates.sqrtiswap, 2, gates.iswap, id=""ct_gate""),
    ])] TestExplicitForm.gate_power_relation(self, gate, expected, power)",qutip,qutip,v5.0.4,,,,,,,,,TestExplicitForm,gate_power_relation,"(self, gate, expected, power)",,,,"pytest.mark.parametrize([""gate"", ""power"", ""expected""], [
        pytest.param(gates.snot, 2, lambda : qutip.qeye(2), id=""snot""),
        pytest.param(gates.s_gate, 4, lambda : qutip.qeye(2), id=""s_gate""),
        pytest.param(gates.t_gate, 8, lambda : qutip.qeye(2), id=""t_gate""),
        pytest.param(gates.berkeley, 8, lambda : -qutip.qeye([2, 2]),
                     id=""berkeley""),
        pytest.param(gates.sqrtnot, 2, qutip.sigmax, id=""sqrtnot""),
        pytest.param(gates.sqrtswap, 2, gates.swap, id=""cs_gate""),
        pytest.param(gates.sqrtiswap, 2, gates.iswap, id=""ct_gate""),
    ])",,,,
test_gates.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['angle', 'expected'], [
        pytest.param(np.pi, -1j*qutip.tensor(qutip.sigmax(), qutip.sigmax()),
                     id=""pi""),
        pytest.param(2*np.pi, -qutip.qeye([2, 2]), id=""2pi""),
    ])] TestExplicitForm.test_molmer_sorensen(self, angle, expected)",qutip,qutip,v5.0.4,,,,,,,,,TestExplicitForm,test_molmer_sorensen,"(self, angle, expected)",,,,"pytest.mark.parametrize(['angle', 'expected'], [
        pytest.param(np.pi, -1j*qutip.tensor(qutip.sigmax(), qutip.sigmax()),
                     id=""pi""),
        pytest.param(2*np.pi, -qutip.qeye([2, 2]), id=""2pi""),
    ])",,,,
test_gates.py,python,class_method,,,"Class method: [pytest.mark.parametrize([""gate"", ""n_angles""], [
        pytest.param(gates.rx, 1, id=""Rx""),
        pytest.param(gates.ry, 1, id=""Ry""),
        pytest.param(gates.rz, 1, id=""Rz""),
        pytest.param(gates.phasegate, 1, id=""phase""),
        pytest.param(gates.qrot, 2, id=""Rabi rotation""),
    ])] TestExplicitForm.test_zero_rotations_are_identity(self, gate, n_angles)",qutip,qutip,v5.0.4,,,,,,,,,TestExplicitForm,test_zero_rotations_are_identity,"(self, gate, n_angles)",,,,"pytest.mark.parametrize([""gate"", ""n_angles""], [
        pytest.param(gates.rx, 1, id=""Rx""),
        pytest.param(gates.ry, 1, id=""Ry""),
        pytest.param(gates.rz, 1, id=""Rz""),
        pytest.param(gates.phasegate, 1, id=""phase""),
        pytest.param(gates.qrot, 2, id=""Rabi rotation""),
    ])",,,,
test_gates.py,python,class_method,,,Class method: TestExplicitForm.test_hadamard(self),qutip,qutip,v5.0.4,,,,,,,,,TestExplicitForm,test_hadamard,(self),,,,,,,,
test_gates.py,python,class_method,,,Class method: TestExplicitForm.test_globalphase(self),qutip,qutip,v5.0.4,,,,,,,,,TestExplicitForm,test_globalphase,(self),,,,,,,,
test_gates.py,python,class_method,,,Class method: TestCliffordGroup.test_single_qubit_group_dimension_is_24(self),qutip,qutip,v5.0.4,,,,,,,,,TestCliffordGroup,test_single_qubit_group_dimension_is_24,(self),,,,,,,,
test_gates.py,python,class_method,,,Class method: TestCliffordGroup.test_dtype(self),qutip,qutip,v5.0.4,,,,,,,,,TestCliffordGroup,test_dtype,(self),,,,,,,,
test_gates.py,python,class_method,,,Class method: TestCliffordGroup.test_all_elements_different(self),qutip,qutip,v5.0.4,,,,,,,,,TestCliffordGroup,test_all_elements_different,(self),,,,,,,,
test_gates.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""gate"", gates.qubit_clifford_group(dtype=""dense""))] TestCliffordGroup.test_gate_normalises_pauli_group(self, gate)",qutip,qutip,v5.0.4,,,,,,,,,TestCliffordGroup,test_gate_normalises_pauli_group,"(self, gate)",,,,"pytest.mark.parametrize(""gate"", gates.qubit_clifford_group(dtype=""dense""))",,,,
test_gates.py,python,class,,,Class: TestExplicitForm,qutip,qutip,v5.0.4,,,,,,,,,TestExplicitForm,,,,,,,,,,
test_gates.py,python,class,,,Class: TestCliffordGroup,qutip,qutip,v5.0.4,,,,,,,,,TestCliffordGroup,,,,,,,,,,
test_gates.py,python,function,_infidelity,"(a, b)","Function: _infidelity(a, b)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_gates.py,python,function,_remove_global_phase,(qobj),Function: _remove_global_phase(qobj),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_gates.py,python,function,_make_random_three_qubit_gate,(),Function: _make_random_three_qubit_gate(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_gates.py,python,function,_make_controled,(op),Function: _make_controled(op),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_gates.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_gates.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_gates.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_gates.py,python,local_import,,,Import: gates from qutip.core,qutip,qutip,v5.0.4,from qutip.core import gates,gates,qutip.core,qutip.core,,,,,,,,,,,,,,,
test_gates.py,python,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_gates.py,python,,,,Directory: qutip\tests\core\test_gates.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_metrics.py,python,class_field,,,"Class field: Test_fidelity.ket_0 = basis(2, 0)",qutip,qutip,v5.0.4,,,,,,,,,Test_fidelity,,,"ket_0 = basis(2, 0)",,,,ket_0,"basis(2, 0)",,
test_metrics.py,python,class_field,,,"Class field: Test_fidelity.ket_1 = basis(2, 1)",qutip,qutip,v5.0.4,,,,,,,,,Test_fidelity,,,"ket_1 = basis(2, 1)",,,,ket_1,"basis(2, 1)",,
test_metrics.py,python,class_field,,,Class field: Test_fidelity.ket_p = (ket_0 + ket_1).unit(),qutip,qutip,v5.0.4,,,,,,,,,Test_fidelity,,,ket_p = (ket_0 + ket_1).unit(),,,,ket_p,(ket_0 + ket_1).unit(),,
test_metrics.py,python,class_field,,,Class field: Test_fidelity.ket_py = (ket_0 + np.exp(0.25j*np.pi)*ket_1).unit(),qutip,qutip,v5.0.4,,,,,,,,,Test_fidelity,,,ket_py = (ket_0 + np.exp(0.25j*np.pi)*ket_1).unit(),,,,ket_py,(ket_0 + np.exp(0.25j*np.pi)*ket_1).unit(),,
test_metrics.py,python,class_field,,,Class field: Test_fidelity.max_mixed = qeye(2).unit(),qutip,qutip,v5.0.4,,,,,,,,,Test_fidelity,,,max_mixed = qeye(2).unit(),,,,max_mixed,qeye(2).unit(),,
test_metrics.py,python,class_method,,,"Class method: Test_fidelity.test_mixed_state_inequality(self, dimension)",qutip,qutip,v5.0.4,,,,,,,,,Test_fidelity,test_mixed_state_inequality,"(self, dimension)",,,,,,,,
test_metrics.py,python,class_method,,,"Class method: [pytest.mark.parametrize('right_dm', [True, False], ids=['mixed', 'pure'])] Test_fidelity.test_orthogonal(self, left_dm, right_dm, dimension)",qutip,qutip,v5.0.4,,,,,,,,,Test_fidelity,test_orthogonal,"(self, left_dm, right_dm, dimension)",,,,"pytest.mark.parametrize('right_dm', [True, False], ids=['mixed', 'pure'])",,,,
test_metrics.py,python,class_method,,,"Class method: [pytest.mark.parametrize('left_dm', [True, False], ids=['mixed', 'pure'])] Test_fidelity.test_orthogonal(self, left_dm, right_dm, dimension)",qutip,qutip,v5.0.4,,,,,,,,,Test_fidelity,test_orthogonal,"(self, left_dm, right_dm, dimension)",,,,"pytest.mark.parametrize('left_dm', [True, False], ids=['mixed', 'pure'])",,,,
test_metrics.py,python,class_method,,,"Class method: Test_fidelity.test_invariant_under_unitary_transformation(self, dimension)",qutip,qutip,v5.0.4,,,,,,,,,Test_fidelity,test_invariant_under_unitary_transformation,"(self, dimension)",,,,,,,,
test_metrics.py,python,class_method,,,"Class method: Test_fidelity.test_state_with_itself(self, state)",qutip,qutip,v5.0.4,,,,,,,,,Test_fidelity,test_state_with_itself,"(self, state)",,,,,,,,
test_metrics.py,python,class_method,,,"Class method: Test_fidelity.test_bounded(self, left, right, dimension)",qutip,qutip,v5.0.4,,,,,,,,,Test_fidelity,test_bounded,"(self, left, right, dimension)",,,,,,,,
test_metrics.py,python,class_method,,,"Class method: Test_fidelity.test_pure_state_equivalent_to_overlap(self, dimension)",qutip,qutip,v5.0.4,,,,,,,,,Test_fidelity,test_pure_state_equivalent_to_overlap,"(self, dimension)",,,,,,,,
test_metrics.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['left', 'right', 'expected'], [
        pytest.param(ket_0, ket_p, np.sqrt(0.5), id=""|0>,|+>""),
        pytest.param(ket_0, ket_1, 0, id=""|0>,|1>""),
        pytest.param(ket_0, max_mixed, np.sqrt(0.5), id=""|0>,id/2""),
        pytest.param(ket_p, ket_py, np.sqrt(0.125 + (0.5+np.sqrt(0.125))**2),
                     id=""|+>,|+'>""),
    ])] Test_fidelity.test_known_cases(self, left, right, expected)",qutip,qutip,v5.0.4,,,,,,,,,Test_fidelity,test_known_cases,"(self, left, right, expected)",,,,"pytest.mark.parametrize(['left', 'right', 'expected'], [
        pytest.param(ket_0, ket_p, np.sqrt(0.5), id=""|0>,|+>""),
        pytest.param(ket_0, ket_1, 0, id=""|0>,|1>""),
        pytest.param(ket_0, max_mixed, np.sqrt(0.5), id=""|0>,id/2""),
        pytest.param(ket_p, ket_py, np.sqrt(0.125 + (0.5+np.sqrt(0.125))**2),
                     id=""|+>,|+'>""),
    ])",,,,
test_metrics.py,python,class_method,,,"Class method: Test_tracedist.test_state_with_itself(self, state)",qutip,qutip,v5.0.4,,,,,,,,,Test_tracedist,test_state_with_itself,"(self, state)",,,,,,,,
test_metrics.py,python,class_method,,,"Class method: [pytest.mark.parametrize('right_dm', [True, False], ids=['mixed', 'pure'])] Test_tracedist.test_orthogonal(self, left_dm, right_dm, dimension)",qutip,qutip,v5.0.4,,,,,,,,,Test_tracedist,test_orthogonal,"(self, left_dm, right_dm, dimension)",,,,"pytest.mark.parametrize('right_dm', [True, False], ids=['mixed', 'pure'])",,,,
test_metrics.py,python,class_method,,,"Class method: [pytest.mark.parametrize('left_dm', [True, False], ids=['mixed', 'pure'])] Test_tracedist.test_orthogonal(self, left_dm, right_dm, dimension)",qutip,qutip,v5.0.4,,,,,,,,,Test_tracedist,test_orthogonal,"(self, left_dm, right_dm, dimension)",,,,"pytest.mark.parametrize('left_dm', [True, False], ids=['mixed', 'pure'])",,,,
test_metrics.py,python,class_method,,,"Class method: Test_tracedist.test_invariant_under_unitary_transformation(self, dimension)",qutip,qutip,v5.0.4,,,,,,,,,Test_tracedist,test_invariant_under_unitary_transformation,"(self, dimension)",,,,,,,,
test_metrics.py,python,class_method,,,"Class method: [pytest.mark.parametrize('right_dm', [True, False], ids=['mixed', 'pure'])] Test_hellinger_dist.test_orthogonal(self, left_dm, right_dm, dimension)",qutip,qutip,v5.0.4,,,,,,,,,Test_hellinger_dist,test_orthogonal,"(self, left_dm, right_dm, dimension)",,,,"pytest.mark.parametrize('right_dm', [True, False], ids=['mixed', 'pure'])",,,,
test_metrics.py,python,class_method,,,"Class method: [pytest.mark.parametrize('left_dm', [True, False], ids=['mixed', 'pure'])] Test_hellinger_dist.test_orthogonal(self, left_dm, right_dm, dimension)",qutip,qutip,v5.0.4,,,,,,,,,Test_hellinger_dist,test_orthogonal,"(self, left_dm, right_dm, dimension)",,,,"pytest.mark.parametrize('left_dm', [True, False], ids=['mixed', 'pure'])",,,,
test_metrics.py,python,class_method,,,"Class method: Test_hellinger_dist.test_state_with_itself(self, state)",qutip,qutip,v5.0.4,,,,,,,,,Test_hellinger_dist,test_state_with_itself,"(self, state)",,,,,,,,
test_metrics.py,python,class_method,,,"Class method: Test_hellinger_dist.test_known_cases_pure_states(self, dimension)",qutip,qutip,v5.0.4,,,,,,,,,Test_hellinger_dist,test_known_cases_pure_states,"(self, dimension)",,,,,,,,
test_metrics.py,python,class_method,,,"Class method: [pytest.mark.parametrize('dimension', [2, 5, 10, 25])] Test_hellinger_dist.test_monotonicity(self, dimension)",qutip,qutip,v5.0.4,,,,,,,,,Test_hellinger_dist,test_monotonicity,"(self, dimension)",,,,"pytest.mark.parametrize('dimension', [2, 5, 10, 25])",,,,
test_metrics.py,python,class_method,,,"Class method: Test_average_gate_fidelity.test_identity(self, dimension)",qutip,qutip,v5.0.4,,,,,,,,,Test_average_gate_fidelity,test_identity,"(self, dimension)",,,,,,,,
test_metrics.py,python,class_method,,,"Class method: [pytest.mark.parametrize('dimension', [2, 5, 10, 20])] Test_average_gate_fidelity.test_bounded(self, dimension)",qutip,qutip,v5.0.4,,,,,,,,,Test_average_gate_fidelity,test_bounded,"(self, dimension)",,,,"pytest.mark.parametrize('dimension', [2, 5, 10, 20])",,,,
test_metrics.py,python,class_method,,,"Class method: [pytest.mark.parametrize('dimension', [2, 5, 10, 20])] Test_average_gate_fidelity.test_unitaries_equal_1(self, dimension)",qutip,qutip,v5.0.4,,,,,,,,,Test_average_gate_fidelity,test_unitaries_equal_1,"(self, dimension)",,,,"pytest.mark.parametrize('dimension', [2, 5, 10, 20])",,,,
test_metrics.py,python,class_method,,,Class method: Test_average_gate_fidelity.test_average_gate_fidelity_against_legacy_implementation(self),qutip,qutip,v5.0.4,,,,,,,,,Test_average_gate_fidelity,test_average_gate_fidelity_against_legacy_implementation,(self),,,,,,,,
test_metrics.py,python,class_method,,,Class method: Test_hilbert_dist.test_known_cases(self),qutip,qutip,v5.0.4,,,,,,,,,Test_hilbert_dist,test_known_cases,(self),,,,,,,,
test_metrics.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['operator', 'expected'], [
        pytest.param(to_super(sigmax()), 1, id=""sigmax""),
        pytest.param(0.25 * sum(to_super(x) for x in paulis), 0, id=""paulis""),
        pytest.param(0.5 * (to_super(qeye(2)) + to_super(sigmax())), 1/3,
                     id=""id+sigmax""),
    ])] Test_unitarity.test_known_cases(self, operator, expected)",qutip,qutip,v5.0.4,,,,,,,,,Test_unitarity,test_known_cases,"(self, operator, expected)",,,,"pytest.mark.parametrize(['operator', 'expected'], [
        pytest.param(to_super(sigmax()), 1, id=""sigmax""),
        pytest.param(0.25 * sum(to_super(x) for x in paulis), 0, id=""paulis""),
        pytest.param(0.5 * (to_super(qeye(2)) + to_super(sigmax())), 1/3,
                     id=""id+sigmax""),
    ])",,,,
test_metrics.py,python,class_method,,,"Class method: [pytest.mark.parametrize('n_qubits', [1, 2, 3, 4, 5])] Test_unitarity.test_bounded(self, n_qubits)",qutip,qutip,v5.0.4,,,,,,,,,Test_unitarity,test_bounded,"(self, n_qubits)",,,,"pytest.mark.parametrize('n_qubits', [1, 2, 3, 4, 5])",,,,
test_metrics.py,python,class_method,,,"Class method: TestComparisons.test_inequality_tracedist_to_fidelity(self, left, right)",qutip,qutip,v5.0.4,,,,,,,,,TestComparisons,test_inequality_tracedist_to_fidelity,"(self, left, right)",,,,,,,,
test_metrics.py,python,class_method,,,"Class method: TestComparisons.test_inequality_hellinger_dist_to_bures_dist(self, left, right)",qutip,qutip,v5.0.4,,,,,,,,,TestComparisons,test_inequality_hellinger_dist_to_bures_dist,"(self, left, right)",,,,,,,,
test_metrics.py,python,class_method,,,"Class method: [pytest.fixture(params=[2, 3])] Test_dnorm.dimension(self, request)",qutip,qutip,v5.0.4,,,,,,,,,Test_dnorm,dimension,"(self, request)",,,,"pytest.fixture(params=[2, 3])",,,,
test_metrics.py,python,class_method,,,"Class method: [pytest.fixture(params=[True, False], ids=['sparse', 'dense'])] Test_dnorm.sparse(self, request)",qutip,qutip,v5.0.4,,,,,,,,,Test_dnorm,sparse,"(self, request)",,,,"pytest.fixture(params=[True, False], ids=['sparse', 'dense'])",,,,
test_metrics.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""variable"", [0.1, 0.5, 0.9])] Test_dnorm.test_sparse_against_dense_adc(self, variable)",qutip,qutip,v5.0.4,,,,,,,,,Test_dnorm,test_sparse_against_dense_adc,"(self, variable)",,,,"pytest.mark.parametrize(""variable"", [0.1, 0.5, 0.9])",,,,
test_metrics.py,python,class_method,,,"Class method: [pytest.mark.repeat(3)] Test_dnorm.test_sparse_against_dense_random(self, dimension)",qutip,qutip,v5.0.4,,,,,,,,,Test_dnorm,test_sparse_against_dense_random,"(self, dimension)",,,,pytest.mark.repeat(3),,,,
test_metrics.py,python,class_method,,,"Class method: Test_dnorm.test_bounded(self, dimension, sparse)",qutip,qutip,v5.0.4,,,,,,,,,Test_dnorm,test_bounded,"(self, dimension, sparse)",,,,,,,,
test_metrics.py,python,class_method,,,"Class method: Test_dnorm.test_qubit_simple_known_cases(self, sparse)",qutip,qutip,v5.0.4,,,,,,,,,Test_dnorm,test_qubit_simple_known_cases,"(self, sparse)",,,,,,,,
test_metrics.py,python,class_method,,,"Class method: [pytest.mark.parametrize([""variable"", ""expected"", ""generator""], [
        [1.0e-3, 3.141591e-03, overrotation],
        [3.1e-3, 9.738899e-03, overrotation],
        [1.0e-2, 3.141463e-02, overrotation],
        [3.1e-2, 9.735089e-02, overrotation],
        [1.0e-1, 3.128689e-01, overrotation],
        [3.1e-1, 9.358596e-01, overrotation],
        [1.0e-3, 2.000000e-03, had_mixture],
        [3.1e-3, 6.200000e-03, had_mixture],
        [1.0e-2, 2.000000e-02, had_mixture],
        [3.1e-2, 6.200000e-02, had_mixture],
        [1.0e-1, 2.000000e-01, had_mixture],
        [3.1e-1, 6.200000e-01, had_mixture],
        [1.0e-3, 2.000000e-03, swap_map],
        [3.1e-3, 6.199997e-03, swap_map],
        [1.0e-2, 1.999992e-02, swap_map],
        [3.1e-2, 6.199752e-02, swap_map],
        [1.0e-1, 1.999162e-01, swap_map],
        [3.1e-1, 6.173918e-01, swap_map],
    ])] Test_dnorm.test_qubit_known_cases(self, variable, expected, generator, sparse)",qutip,qutip,v5.0.4,,,,,,,,,Test_dnorm,test_qubit_known_cases,"(self, variable, expected, generator, sparse)",,,,"pytest.mark.parametrize([""variable"", ""expected"", ""generator""], [
        [1.0e-3, 3.141591e-03, overrotation],
        [3.1e-3, 9.738899e-03, overrotation],
        [1.0e-2, 3.141463e-02, overrotation],
        [3.1e-2, 9.735089e-02, overrotation],
        [1.0e-1, 3.128689e-01, overrotation],
        [3.1e-1, 9.358596e-01, overrotation],
        [1.0e-3, 2.000000e-03, had_mixture],
        [3.1e-3, 6.200000e-03, had_mixture],
        [1.0e-2, 2.000000e-02, had_mixture],
        [3.1e-2, 6.200000e-02, had_mixture],
        [1.0e-1, 2.000000e-01, had_mixture],
        [3.1e-1, 6.200000e-01, had_mixture],
        [1.0e-3, 2.000000e-03, swap_map],
        [3.1e-3, 6.199997e-03, swap_map],
        [1.0e-2, 1.999992e-02, swap_map],
        [3.1e-2, 6.199752e-02, swap_map],
        [1.0e-1, 1.999162e-01, swap_map],
        [3.1e-1, 6.173918e-01, swap_map],
    ])",,,,
test_metrics.py,python,class_method,,,"Class method: Test_dnorm.test_qubit_scalar(self, dimension)",qutip,qutip,v5.0.4,,,,,,,,,Test_dnorm,test_qubit_scalar,"(self, dimension)",,,,,,,,
test_metrics.py,python,class_method,,,"Class method: Test_dnorm.test_qubit_triangle(self, dimension)",qutip,qutip,v5.0.4,,,,,,,,,Test_dnorm,test_qubit_triangle,"(self, dimension)",,,,,,,,
test_metrics.py,python,class_method,,,"Class method: [pytest.mark.repeat(3)] Test_dnorm.test_force_solve(self, dimension, generator)",qutip,qutip,v5.0.4,,,,,,,,,Test_dnorm,test_force_solve,"(self, dimension, generator)",,,,pytest.mark.repeat(3),,,,
test_metrics.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""generator"", [
        pytest.param(rand_super_bcsz, id=""super""),
        pytest.param(rand_unitary, id=""unitary""),
    ])] Test_dnorm.test_force_solve(self, dimension, generator)",qutip,qutip,v5.0.4,,,,,,,,,Test_dnorm,test_force_solve,"(self, dimension, generator)",,,,"pytest.mark.parametrize(""generator"", [
        pytest.param(rand_super_bcsz, id=""super""),
        pytest.param(rand_unitary, id=""unitary""),
    ])",,,,
test_metrics.py,python,class_method,,,"Class method: [pytest.mark.repeat(3)] Test_dnorm.test_cptp(self, dimension, sparse)",qutip,qutip,v5.0.4,,,,,,,,,Test_dnorm,test_cptp,"(self, dimension, sparse)",,,,pytest.mark.repeat(3),,,,
test_metrics.py,python,class,,,Class: Test_fidelity,qutip,qutip,v5.0.4,,,,,,,,,Test_fidelity,,,,,,,,,,
test_metrics.py,python,class,,,Class: Test_tracedist,qutip,qutip,v5.0.4,,,,,,,,,Test_tracedist,,,,,,,,,,
test_metrics.py,python,class,,,Class: Test_hellinger_dist,qutip,qutip,v5.0.4,,,,,,,,,Test_hellinger_dist,,,,,,,,,,
test_metrics.py,python,class,,,Class: Test_average_gate_fidelity,qutip,qutip,v5.0.4,,,,,,,,,Test_average_gate_fidelity,,,,,,,,,,
test_metrics.py,python,class,,,Class: Test_hilbert_dist,qutip,qutip,v5.0.4,,,,,,,,,Test_hilbert_dist,,,,,,,,,,
test_metrics.py,python,class,,,Class: Test_unitarity,qutip,qutip,v5.0.4,,,,,,,,,Test_unitarity,,,,,,,,,,
test_metrics.py,python,class,,,Class: TestComparisons,qutip,qutip,v5.0.4,,,,,,,,,TestComparisons,,,,,,,,,,
test_metrics.py,python,class,,,Class: Test_dnorm,qutip,qutip,v5.0.4,,,,,,,,,Test_dnorm,,,,,,,,,,
test_metrics.py,python,function,overrotation,(x),Function: overrotation(x),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_metrics.py,python,function,had_mixture,(x),Function: had_mixture(x),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_metrics.py,python,function,swap_map,(x),Function: swap_map(x),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_metrics.py,python,function,adc_choi,(x),Function: adc_choi(x),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_metrics.py,python,function,test_process_fidelity_identical_unitaries,(),Function: test_process_fidelity_identical_unitaries(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_metrics.py,python,function,test_process_fidelity_consistency,(),Function: test_process_fidelity_consistency(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_metrics.py,python,function,test_process_fidelity_unitary_invariance,(),Function: test_process_fidelity_unitary_invariance(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_metrics.py,python,function,test_hilbert_space_dims_chi,(),Function: test_hilbert_space_dims_chi(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_metrics.py,python,constant,,,Constant: left = right = state,qutip,qutip,v5.0.4,,,,,left = right = state,left,right = state,,,,,,,,,,,,
test_metrics.py,python,constant,,,"Constant: paulis = [qeye(2), sigmax(), sigmay(), sigmaz()]",qutip,qutip,v5.0.4,,,,,"paulis = [qeye(2), sigmax(), sigmay(), sigmaz()]",paulis,"[qeye(2), sigmax(), sigmay(), sigmaz()]",,,,,,,,,,,,
test_metrics.py,python,import,,,Import: platform,qutip,qutip,v5.0.4,import platform,platform,,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",Qobj,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: tensor from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",tensor,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: fock_dm from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",fock_dm,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: basis from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",basis,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: destroy from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",destroy,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: qdiags from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",qdiags,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: sigmax from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",sigmax,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: sigmay from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",sigmay,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: sigmaz from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",sigmaz,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",qeye,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: rand_ket from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",rand_ket,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: rand_super_bcsz from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",rand_super_bcsz,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: rand_dm from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",rand_dm,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: rand_unitary from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",rand_unitary,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: to_super from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",to_super,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: to_choi from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",to_choi,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: kraus_to_choi from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",kraus_to_choi,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: to_chi from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",to_chi,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: to_kraus from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",to_kraus,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: fidelity from qutip,qutip,qutip,v5.0.4,"from qutip import (
    fidelity, tracedist, hellinger_dist, dnorm, average_gate_fidelity,
    unitarity, hilbert_dist, bures_dist, process_fidelity,
)",fidelity,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: tracedist from qutip,qutip,qutip,v5.0.4,"from qutip import (
    fidelity, tracedist, hellinger_dist, dnorm, average_gate_fidelity,
    unitarity, hilbert_dist, bures_dist, process_fidelity,
)",tracedist,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: hellinger_dist from qutip,qutip,qutip,v5.0.4,"from qutip import (
    fidelity, tracedist, hellinger_dist, dnorm, average_gate_fidelity,
    unitarity, hilbert_dist, bures_dist, process_fidelity,
)",hellinger_dist,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: dnorm from qutip,qutip,qutip,v5.0.4,"from qutip import (
    fidelity, tracedist, hellinger_dist, dnorm, average_gate_fidelity,
    unitarity, hilbert_dist, bures_dist, process_fidelity,
)",dnorm,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: average_gate_fidelity from qutip,qutip,qutip,v5.0.4,"from qutip import (
    fidelity, tracedist, hellinger_dist, dnorm, average_gate_fidelity,
    unitarity, hilbert_dist, bures_dist, process_fidelity,
)",average_gate_fidelity,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: unitarity from qutip,qutip,qutip,v5.0.4,"from qutip import (
    fidelity, tracedist, hellinger_dist, dnorm, average_gate_fidelity,
    unitarity, hilbert_dist, bures_dist, process_fidelity,
)",unitarity,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: hilbert_dist from qutip,qutip,qutip,v5.0.4,"from qutip import (
    fidelity, tracedist, hellinger_dist, dnorm, average_gate_fidelity,
    unitarity, hilbert_dist, bures_dist, process_fidelity,
)",hilbert_dist,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: bures_dist from qutip,qutip,qutip,v5.0.4,"from qutip import (
    fidelity, tracedist, hellinger_dist, dnorm, average_gate_fidelity,
    unitarity, hilbert_dist, bures_dist, process_fidelity,
)",bures_dist,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,import,,,Import: process_fidelity from qutip,qutip,qutip,v5.0.4,"from qutip import (
    fidelity, tracedist, hellinger_dist, dnorm, average_gate_fidelity,
    unitarity, hilbert_dist, bures_dist, process_fidelity,
)",process_fidelity,qutip,,,,,,,,,,,,,,,,
test_metrics.py,python,local_import,,,Import: snot from qutip.core.gates,qutip,qutip,v5.0.4,"from qutip.core.gates import snot, swap",snot,qutip.core.gates,qutip.core.gates,,,,,,,,,,,,,,,
test_metrics.py,python,local_import,,,Import: swap from qutip.core.gates,qutip,qutip,v5.0.4,"from qutip.core.gates import snot, swap",swap,qutip.core.gates,qutip.core.gates,,,,,,,,,,,,,,,
test_metrics.py,python,local_import,,,Import: _hilbert_space_dims from qutip.core.metrics,qutip,qutip,v5.0.4,from qutip.core.metrics import _hilbert_space_dims,_hilbert_space_dims,qutip.core.metrics,qutip.core.metrics,,,,,,,,,,,,,,,
test_metrics.py,python,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_metrics.py,python,,,,Directory: qutip\tests\core\test_metrics.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_operators.py,python,function,test_jmat_12,(),Function: test_jmat_12(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_operators.py,python,function,test_jmat_32,(),Function: test_jmat_32(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_operators.py,python,function,test_jmat_raise,(),Function: test_jmat_raise(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_operators.py,python,function,test_qzero_rectangular,(),Function: test_qzero_rectangular(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_operators.py,python,function,test_position,(),Function: test_position(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_operators.py,python,function,test_momentum,(),Function: test_momentum(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_operators.py,python,function,test_squeeze,(),Function: test_squeeze(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_operators.py,python,function,test_squeezing,(),Function: test_squeezing(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_operators.py,python,function,test_displace,(),Function: test_displace(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_operators.py,python,function,test_commutator,(),Function: test_commutator(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_operators.py,python,function,test_qutrit_ops,(),Function: test_qutrit_ops(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_operators.py,python,function,_id_func,(val),Function: _id_func(val),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_operators.py,python,function,_check_meta,"(object, dtype)","Function: _check_meta(object, dtype)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_operators.py,python,function,test_qeye_like_error,(),Function: test_qeye_like_error(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_operators.py,python,constant,,,Constant: N = 5,qutip,qutip,v5.0.4,,,,,N = 5,N,5,,,,,,,,,,,,
test_operators.py,python,constant,,,"Constant: dtype_names = [""dense"", ""csr""] + list(qutip.data.to.dtypes)",qutip,qutip,v5.0.4,,,,,"dtype_names = [""dense"", ""csr""] + list(qutip.data.to.dtypes)",dtype_names,"[""dense"", ""csr""] + list(qutip.data.to.dtypes)",,,,,,,,,,,,
test_operators.py,python,import,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,numbers,,,,,,,,,,,,,,,,,
test_operators.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_operators.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_operators.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_operators.py,python,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_operators.py,python,,,,Directory: qutip\tests\core\test_operators.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_ptrace.py,python,function,expected,"(qobj, sel)","Function: expected(qobj, sel)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_ptrace.py,python,function,test_ptrace_noncompound_rand,"(dtype, dm)","Function: test_ptrace_noncompound_rand(dtype, dm)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_ptrace.py,python,import,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,itertools,,,,,,,,,,,,,,,,,
test_ptrace.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_ptrace.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_ptrace.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_ptrace.py,python,local_import,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,data,qutip.core,qutip.core,,,,,,,,,,,,,,,
test_ptrace.py,python,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_ptrace.py,python,,,,Directory: qutip\tests\core\test_ptrace.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,class_method,,,Class method: TestQobjHermicity.test_standard(self),qutip,qutip,v5.0.4,,,,,,,,,TestQobjHermicity,test_standard,(self),,,,,,,,
test_qobj.py,python,class_method,,,Class method: TestQobjHermicity.test_addition(self),qutip,qutip,v5.0.4,,,,,,,,,TestQobjHermicity,test_addition,(self),,,,,,,,
test_qobj.py,python,class_method,,,Class method: TestQobjHermicity.test_multiplication(self),qutip,qutip,v5.0.4,,,,,,,,,TestQobjHermicity,test_multiplication,(self),,,,,,,,
test_qobj.py,python,class_method,,,"Class method: MockerScalar.__mul__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,MockerScalar,__mul__,"(self, other)",,,,,,,,
test_qobj.py,python,class_method,,,"Class method: MockerScalar.__rmul__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,MockerScalar,__rmul__,"(self, other)",,,,,,,,
test_qobj.py,python,class_method,,,"Class method: MockerScalar.__rtruediv__(self, other)",qutip,qutip,v5.0.4,,,,,,,,,MockerScalar,__rtruediv__,"(self, other)",,,,,,,,
test_qobj.py,python,class_method,,,Class method: TestTruncNeg.test_positive_operator(self),qutip,qutip,v5.0.4,,,,,,,,,TestTruncNeg,test_positive_operator,(self),,,,,,,,
test_qobj.py,python,class_method,,,Class method: TestTruncNeg.test_diagonal_operator(self),qutip,qutip,v5.0.4,,,,,,,,,TestTruncNeg,test_diagonal_operator,(self),,,,,,,,
test_qobj.py,python,class_method,,,Class method: TestTruncNeg.test_nondiagonal_operator(self),qutip,qutip,v5.0.4,,,,,,,,,TestTruncNeg,test_nondiagonal_operator,(self),,,,,,,,
test_qobj.py,python,class_method,,,Class method: TestTruncNeg.test_sgs_known_good(self),qutip,qutip,v5.0.4,,,,,,,,,TestTruncNeg,test_sgs_known_good,(self),,,,,,,,
test_qobj.py,python,class,,,Class: TestQobjHermicity,qutip,qutip,v5.0.4,,,,,,,,,TestQobjHermicity,,,,,,,,,,
test_qobj.py,python,class,,,Class: MockerScalar(),qutip,qutip,v5.0.4,,,,,,,,,MockerScalar,,,,,(),,,,,
test_qobj.py,python,class,,,Class: TestTruncNeg,qutip,qutip,v5.0.4,,,,,,,,,TestTruncNeg,,,,,,,,,,
test_qobj.py,python,function,_random_not_singular,(N),Function: _random_not_singular(N),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,assert_hermicity,"(oper, hermicity)","Function: assert_hermicity(oper, hermicity)",qutip,qutip,v5.0.4,,,,,,,,"# Check the cached isherm, if any exists.",,,,,,,,,,,
test_qobj.py,python,function,test_QobjData,(),Function: test_QobjData(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjType,(),Function: test_QobjType(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,assert_unitarity,"(oper, unitarity)","Function: assert_unitarity(oper, unitarity)",qutip,qutip,v5.0.4,,,,,,,,"# Check the cached isunitary.",,,,,,,,,,,
test_qobj.py,python,function,test_QobjUnitaryOper,(),Function: test_QobjUnitaryOper(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjDimsShape,(),Function: test_QobjDimsShape(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjMulNonsquareDims,(),Function: test_QobjMulNonsquareDims(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjAddition,(),Function: test_QobjAddition(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjSubtraction,(),Function: test_QobjSubtraction(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjMultiplication,(),Function: test_QobjMultiplication(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjNotImplemented,(),Function: test_QobjNotImplemented(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjDivision,(),Function: test_QobjDivision(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjPower,(),Function: test_QobjPower(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjNeg,(),Function: test_QobjNeg(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjEquals,(),Function: test_QobjEquals(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjGetItem,(),Function: test_QobjGetItem(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_CheckMulType,(),Function: test_CheckMulType(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_operator_ket_superrep,(),Function: test_operator_ket_superrep(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjConjugate,(),Function: test_QobjConjugate(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjDagger,(),Function: test_QobjDagger(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjDiagonals,(),Function: test_QobjDiagonals(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjEigenEnergies,(),Function: test_QobjEigenEnergies(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjEigenStates,(),Function: test_QobjEigenStates(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjExpm,(),Function: test_QobjExpm(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjExpmExplicitlySparse,(),Function: test_QobjExpmExplicitlySparse(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjExpmZeroOper,(),Function: test_QobjExpmZeroOper(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjLogm,(),Function: test_QobjLogm(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjLogmExplicitlySparse,(),Function: test_QobjLogmExplicitlySparse(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjLogmZeroOper,(),Function: test_QobjLogmZeroOper(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_Qobj_sqrtm,(),Function: test_Qobj_sqrtm(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_Qobj_inv,(),Function: test_Qobj_inv(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjFull,(),Function: test_QobjFull(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjNorm,(),Function: test_QobjNorm(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjPurity,(),Function: test_QobjPurity(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_QobjPermute,(datatype),Function: test_QobjPermute(datatype),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_KetType,(),Function: test_KetType(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_BraType,(),Function: test_BraType(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_OperType,(),Function: test_OperType(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_SuperType,(),Function: test_SuperType(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_isherm_skew,(),Function: test_isherm_skew(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_super_tensor_operket,(),Function: test_super_tensor_operket(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_super_tensor_property,(),Function: test_super_tensor_property(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_composite_oper,(),Function: test_composite_oper(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_composite_vec,(),Function: test_composite_vec(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,trunc_neg_case,"(qobj, method, expected=None)","Function: trunc_neg_case(qobj, method, expected=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_cosm,(),Function: test_cosm(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_sinm,(),Function: test_sinm(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_call,(),Function: test_call(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_mat_elem,(),Function: test_mat_elem(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_projection,(),Function: test_projection(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_overlap,(),Function: test_overlap(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_unit,(),Function: test_unit(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_trace,(),Function: test_trace(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_no_real_attribute,(monkeypatch),Function: test_no_real_attribute(monkeypatch),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,function,test_groundstate,(),Function: test_groundstate(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,import,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,numbers,,,,,,,,,,,,,,,,,
test_qobj.py,python,import,,,Import: operator,qutip,qutip,v5.0.4,import operator,operator,,,,,,,,,,,,,,,,,
test_qobj.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_qobj.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_qobj.py,python,import,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse,scipy.sparse,,,,,,,,,,,,,,,,,
test_qobj.py,python,import,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg,scipy.linalg,,,,,,,,,,,,,,,,,
test_qobj.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_qobj.py,python,local_import,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,data,qutip.core,qutip.core,,,,,,,,,,,,,,,
test_qobj.py,python,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobj.py,python,,,,Directory: qutip\tests\core\test_qobj.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,class_field,,,Class field: [instance] Pseudo_qevo.cte = cte,qutip,qutip,v5.0.4,,,,,,,,,Pseudo_qevo,__init__,"(self, cte, qobj, func, string, args)",self.cte = cte,self.cte = cte,,,,,,
test_qobjevo.py,python,class_field,,,Class field: [instance] Pseudo_qevo.qobj = qobj,qutip,qutip,v5.0.4,,,,,,,,,Pseudo_qevo,__init__,"(self, cte, qobj, func, string, args)",self.qobj = qobj,self.qobj = qobj,,,,,,
test_qobjevo.py,python,class_field,,,Class field: [instance] Pseudo_qevo.func = func,qutip,qutip,v5.0.4,,,,,,,,,Pseudo_qevo,__init__,"(self, cte, qobj, func, string, args)",self.func = func,self.func = func,,,,,,
test_qobjevo.py,python,class_field,,,Class field: [instance] Pseudo_qevo.str = string,qutip,qutip,v5.0.4,,,,,,,,,Pseudo_qevo,__init__,"(self, cte, qobj, func, string, args)",self.str = string,self.str = string,,,,,,
test_qobjevo.py,python,class_field,,,Class field: [instance] Pseudo_qevo.args = args,qutip,qutip,v5.0.4,,,,,,,,,Pseudo_qevo,__init__,"(self, cte, qobj, func, string, args)",self.args = args,self.args = args,,,,,,
test_qobjevo.py,python,class_field,,,Class field: [instance] Feedback_Checker_Coefficient.state = None,qutip,qutip,v5.0.4,,,,,,,,,Feedback_Checker_Coefficient,__init__,"(self, stacked=True)",self.state = None,self.state = None,,,,,,
test_qobjevo.py,python,class_field,,,Class field: [instance] Feedback_Checker_Coefficient.stacked = stacked,qutip,qutip,v5.0.4,,,,,,,,,Feedback_Checker_Coefficient,__init__,"(self, stacked=True)",self.stacked = stacked,self.stacked = stacked,,,,,,
test_qobjevo.py,python,class_method,,,"Class method: Pseudo_qevo.__init__(self, cte, qobj, func, string, args)",qutip,qutip,v5.0.4,,,,,,,,,Pseudo_qevo,__init__,"(self, cte, qobj, func, string, args)",,,,,,,,
test_qobjevo.py,python,class_method,,,Class method: Pseudo_qevo.array(self),qutip,qutip,v5.0.4,,,,,,,,,Pseudo_qevo,array,(self),,,,,,,,
test_qobjevo.py,python,class_method,,,Class method: Pseudo_qevo.logarray(self),qutip,qutip,v5.0.4,,,,,,,,,Pseudo_qevo,logarray,(self),,,,,,,,
test_qobjevo.py,python,class_method,,,Class method: Pseudo_qevo.func_coeff(self),qutip,qutip,v5.0.4,,,,,,,,,Pseudo_qevo,func_coeff,(self),,,,,,,,
test_qobjevo.py,python,class_method,,,Class method: Pseudo_qevo.string(self),qutip,qutip,v5.0.4,,,,,,,,,Pseudo_qevo,string,(self),,,,,,,,
test_qobjevo.py,python,class_method,,,Class method: Pseudo_qevo.func_call(self),qutip,qutip,v5.0.4,,,,,,,,,Pseudo_qevo,func_call,(self),,,,,,,,
test_qobjevo.py,python,class_method,,,"Class method: Pseudo_qevo.__call__(self, t, args={})",qutip,qutip,v5.0.4,,,,,,,,,Pseudo_qevo,__call__,"(self, t, args={})",,,,,,,,
test_qobjevo.py,python,class_method,,,"Class method: Pseudo_qevo.__getitem__(self, which)",qutip,qutip,v5.0.4,,,,,,,,,Pseudo_qevo,__getitem__,"(self, which)",,,,,,,,
test_qobjevo.py,python,class_method,,,Class method: [property] Pseudo_qevo._dims(self),qutip,qutip,v5.0.4,,,,,,,,,Pseudo_qevo,_dims,(self),,,,property,,,,
test_qobjevo.py,python,class_method,,,"Class method: Feedback_Checker_Coefficient.__init__(self, stacked=True)",qutip,qutip,v5.0.4,,,,,,,,,Feedback_Checker_Coefficient,__init__,"(self, stacked=True)",,,,,,,,
test_qobjevo.py,python,class_method,,,"Class method: Feedback_Checker_Coefficient.__call__(self, t, data=None, qobj=None, e_val=None)",qutip,qutip,v5.0.4,,,,,,,,,Feedback_Checker_Coefficient,__call__,"(self, t, data=None, qobj=None, e_val=None)",,,,,,,,
test_qobjevo.py,python,class,,,Class: Pseudo_qevo,qutip,qutip,v5.0.4,,,,,,,,,Pseudo_qevo,,,,,,,,,,
test_qobjevo.py,python,class,,,Class: Feedback_Checker_Coefficient,qutip,qutip,v5.0.4,,,,,,,,,Feedback_Checker_Coefficient,,,,,,,,,,
test_qobjevo.py,python,function,_real,"(t, args)","Function: _real(t, args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,function,_cplx,"(t, args)","Function: _cplx(t, args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,function,_assert_qobjevo_equivalent,"(obj1, obj2, tol=1e-8)","Function: _assert_qobjevo_equivalent(obj1, obj2, tol=1e-8)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,function,_assert_qobj_almost_eq,"(obj1, obj2, tol=1e-10)","Function: _assert_qobj_almost_eq(obj1, obj2, tol=1e-10)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,function,_assert_qobjevo_different,"(obj1, obj2)","Function: _assert_qobjevo_different(obj1, obj2)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,function,_div,"(a, b)","Function: _div(a, b)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,function,test_call,"(pseudo_qevo, coeff_type)","Function: test_call(pseudo_qevo, coeff_type)",qutip,qutip,v5.0.4,,,,,,,,"# test creation of QobjEvo and call",,,,,,,,,,,
test_qobjevo.py,python,function,test_QobjEvo_repr,(),Function: test_QobjEvo_repr(),qutip,qutip,v5.0.4,,,,,,,,"# case_n: cases with Objects of QobjEvo with unique __repr__",,,,,,,,,,,
test_qobjevo.py,python,function,test_QobjEvo_repr,(),Function: test_QobjEvo_repr(),qutip,qutip,v5.0.4,,,,,,,,"# expected_repr_n: are the Expected result from the __repr__",,,,,,,,,,,
test_qobjevo.py,python,function,test_copy,(all_qevo),Function: test_copy(all_qevo),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,function,binop_coeff,(all_qevo),Function: binop_coeff(all_qevo),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,function,test_copy_side_effects,(all_qevo),Function: test_copy_side_effects(all_qevo),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,function,test_QobjEvo_pickle,(all_qevo),Function: test_QobjEvo_pickle(all_qevo),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,function,test_QobjEvo_restore,(all_qevo),Function: test_QobjEvo_restore(all_qevo),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,function,test_mul_vec,(all_qevo),Function: test_mul_vec(all_qevo),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,function,test_matmul,(all_qevo),Function: test_matmul(all_qevo),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,function,test_expect_psi,(all_qevo),Function: test_expect_psi(all_qevo),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,function,test_expect_rho,(all_qevo),Function: test_expect_rho(all_qevo),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,function,test_compress,(),Function: test_compress(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,function,test_QobjEvo_step_coeff,(),Function: test_QobjEvo_step_coeff(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,function,test_QobjEvo_isherm_flag_knowcase,(),Function: test_QobjEvo_isherm_flag_knowcase(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,function,test_feedback_oper,(),Function: test_feedback_oper(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,function,test_feedback_super,(),Function: test_feedback_super(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,function,test_qobjevo_mixed,(),Function: test_qobjevo_mixed(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,constant,,,Constant: N = 3,qutip,qutip,v5.0.4,,,,,N = 3,N,3,,,,,,,,,,,,
test_qobjevo.py,python,constant,,,"Constant: args = {'w1': 1, ""w2"": 2}",qutip,qutip,v5.0.4,,,,,"args = {'w1': 1, ""w2"": 2}",args,"{'w1': 1, ""w2"": 2}",,,,,,,,,,,,
test_qobjevo.py,python,constant,,,"Constant: TESTTIMES = np.linspace(0.001, 1.0, 10)",qutip,qutip,v5.0.4,,,,,"TESTTIMES = np.linspace(0.001, 1.0, 10)",TESTTIMES,"np.linspace(0.001, 1.0, 10)",,,,,,,,,,,,
test_qobjevo.py,python,constant,,,"Constant: real_qevo = Pseudo_qevo(
    rand_stochastic(N).to(_data.CSR),
    rand_stochastic(N).to(_data.CSR),
    _real, ""sin(t*w1)"", args)",qutip,qutip,v5.0.4,,,,,"real_qevo = Pseudo_qevo(
    rand_stochastic(N).to(_data.CSR),
    rand_stochastic(N).to(_data.CSR),
    _real, ""sin(t*w1)"", args)",real_qevo,"Pseudo_qevo(
    rand_stochastic(N).to(_data.CSR),
    rand_stochastic(N).to(_data.CSR),
    _real, ""sin(t*w1)"", args)",,,,,,,,,,,,
test_qobjevo.py,python,constant,,,"Constant: herm_qevo = Pseudo_qevo(
    rand_herm(N).to(_data.Dense),
    rand_herm(N).to(_data.Dense),
    _real, ""sin(t*w1)"", args)",qutip,qutip,v5.0.4,,,,,"herm_qevo = Pseudo_qevo(
    rand_herm(N).to(_data.Dense),
    rand_herm(N).to(_data.Dense),
    _real, ""sin(t*w1)"", args)",herm_qevo,"Pseudo_qevo(
    rand_herm(N).to(_data.Dense),
    rand_herm(N).to(_data.Dense),
    _real, ""sin(t*w1)"", args)",,,,,,,,,,,,
test_qobjevo.py,python,constant,,,"Constant: cplx_qevo = Pseudo_qevo(
    rand_stochastic(N).to(_data.Dense),
    rand_stochastic(N).to(_data.CSR) + rand_stochastic(N).to(_data.CSR) * 1j,
    _cplx, ""exp(1j*t*w2)"", args)",qutip,qutip,v5.0.4,,,,,"cplx_qevo = Pseudo_qevo(
    rand_stochastic(N).to(_data.Dense),
    rand_stochastic(N).to(_data.CSR) + rand_stochastic(N).to(_data.CSR) * 1j,
    _cplx, ""exp(1j*t*w2)"", args)",cplx_qevo,"Pseudo_qevo(
    rand_stochastic(N).to(_data.Dense),
    rand_stochastic(N).to(_data.CSR) + rand_stochastic(N).to(_data.CSR) * 1j,
    _cplx, ""exp(1j*t*w2)"", args)",,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: operator,qutip,qutip,v5.0.4,import operator,operator,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",Qobj,qutip,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: QobjEvo from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",QobjEvo,qutip,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: coefficient from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",coefficient,qutip,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qeye,qutip,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: sigmax from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",sigmax,qutip,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: sigmaz from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",sigmaz,qutip,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: num from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",num,qutip,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: rand_stochastic from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",rand_stochastic,qutip,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: rand_herm from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",rand_herm,qutip,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: rand_ket from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",rand_ket,qutip,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: liouvillian from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",liouvillian,qutip,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: basis from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",basis,qutip,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: spre from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",spre,qutip,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: spost from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",spost,qutip,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: to_choi from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",to_choi,qutip,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: expect from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",expect,qutip,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: rand_ket from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",rand_ket,qutip,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: rand_dm from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",rand_dm,qutip,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: operator_to_vector from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",operator_to_vector,qutip,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: SESolver from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",SESolver,qutip,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: MESolver from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",MESolver,qutip,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: qutip.core.data,qutip,qutip,v5.0.4,import qutip.core.data as _data,qutip.core.data,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,local_import,,,Import: assert_allclose from numpy.testing,qutip,qutip,v5.0.4,from numpy.testing import assert_allclose,assert_allclose,numpy.testing,numpy.testing,,,,,,,,,,,,,,,
test_qobjevo.py,python,local_import,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,data,qutip.core,qutip.core,,,,,,,,,,,,,,,
test_qobjevo.py,python,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qobjevo.py,python,,,,Directory: qutip\tests\core\test_qobjevo.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_states.py,python,function,test_basis_error_type,(),Function: test_basis_error_type(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_states.py,python,function,test_CoherentState,(),Function: test_CoherentState(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_states.py,python,function,test_CoherentDensityMatrix,(),Function: test_CoherentDensityMatrix(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_states.py,python,function,test_thermal,(),Function: test_thermal(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_states.py,python,function,test_TripletStateNorm,(),Function: test_TripletStateNorm(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_states.py,python,function,test_ket2dm,(),Function: test_ket2dm(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_states.py,python,function,test_qstate_error,(),Function: test_qstate_error(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_states.py,python,function,test_w_states,(),Function: test_w_states(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_states.py,python,function,test_ghz_states,(),Function: test_ghz_states(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_states.py,python,function,test_bell_state,(),Function: test_bell_state(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_states.py,python,function,_id_func,(val),Function: _id_func(val),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_states.py,python,constant,,,Constant: dtype_names = list(qutip.data.to._str2type.keys()) + list(qutip.data.to.dtypes),qutip,qutip,v5.0.4,,,,,dtype_names = list(qutip.data.to._str2type.keys()) + list(qutip.data.to.dtypes),dtype_names,list(qutip.data.to._str2type.keys()) + list(qutip.data.to.dtypes),,,,,,,,,,,,
test_states.py,python,constant,,,Constant: dtype_types = list(qutip.data.to._str2type.values()) + list(qutip.data.to.dtypes),qutip,qutip,v5.0.4,,,,,dtype_types = list(qutip.data.to._str2type.values()) + list(qutip.data.to.dtypes),dtype_types,list(qutip.data.to._str2type.values()) + list(qutip.data.to.dtypes),,,,,,,,,,,,
test_states.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_states.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_states.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_states.py,python,import,,,Import: partial from functools,qutip,qutip,v5.0.4,from functools import partial,partial,functools,,,,,,,,,,,,,,,,
test_states.py,python,import,,,Import: combinations from itertools,qutip,qutip,v5.0.4,from itertools import combinations,combinations,itertools,,,,,,,,,,,,,,,,
test_states.py,python,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_states.py,python,,,,Directory: qutip\tests\core\test_states.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_superoper.py,python,class_field,,,Class field: TestSuper_td.N = 3,qutip,qutip,v5.0.4,,,,,,,,,TestSuper_td,,,N = 3,,,,N,3,,
test_superoper.py,python,class_field,,,"Class field: TestSuper_td.t1 = qutip.QobjEvo([qutip.qeye(N)*(1 + 0.1j),
                        [qutip.create(N) * (1 - 0.1j), f]])",qutip,qutip,v5.0.4,,,,,,,,,TestSuper_td,,,"t1 = qutip.QobjEvo([qutip.qeye(N)*(1 + 0.1j),
                        [qutip.create(N) * (1 - 0.1j), f]])",,,,t1,"qutip.QobjEvo([qutip.qeye(N)*(1 + 0.1j),
                        [qutip.create(N) * (1 - 0.1j), f]])",,
test_superoper.py,python,class_field,,,Class field: TestSuper_td.t2 = qutip.QobjEvo([qutip.destroy(N) * (1 - 0.2j)]),qutip,qutip,v5.0.4,,,,,,,,,TestSuper_td,,,t2 = qutip.QobjEvo([qutip.destroy(N) * (1 - 0.2j)]),,,,t2,qutip.QobjEvo([qutip.destroy(N) * (1 - 0.2j)]),,
test_superoper.py,python,class_field,,,"Class field: TestSuper_td.t3 = qutip.QobjEvo([[qutip.num(N) * (1 + 0.2j), f]])",qutip,qutip,v5.0.4,,,,,,,,,TestSuper_td,,,"t3 = qutip.QobjEvo([[qutip.num(N) * (1 + 0.2j), f]])",,,,t3,"qutip.QobjEvo([[qutip.num(N) * (1 + 0.2j), f]])",,
test_superoper.py,python,class_field,,,Class field: TestSuper_td.q1 = qutip.qeye(N) * (1 + 0.3j),qutip,qutip,v5.0.4,,,,,,,,,TestSuper_td,,,q1 = qutip.qeye(N) * (1 + 0.3j),,,,q1,qutip.qeye(N) * (1 + 0.3j),,
test_superoper.py,python,class_field,,,Class field: TestSuper_td.q2 = qutip.destroy(N) * (1 - 0.3j),qutip,qutip,v5.0.4,,,,,,,,,TestSuper_td,,,q2 = qutip.destroy(N) * (1 - 0.3j),,,,q2,qutip.destroy(N) * (1 - 0.3j),,
test_superoper.py,python,class_field,,,Class field: TestSuper_td.q3 = qutip.num(N) * (1 + 0.4j),qutip,qutip,v5.0.4,,,,,,,,,TestSuper_td,,,q3 = qutip.num(N) * (1 + 0.4j),,,,q3,qutip.num(N) * (1 + 0.4j),,
test_superoper.py,python,class_method,,,Class method: TestMatVec.testOperatorVector(self),qutip,qutip,v5.0.4,,,,,,,,,TestMatVec,testOperatorVector,(self),,,,,,,,
test_superoper.py,python,class_method,,,Class method: TestMatVec.testsuperrep(self),qutip,qutip,v5.0.4,,,,,,,,,TestMatVec,testsuperrep,(self),,,,,,,,
test_superoper.py,python,class_method,,,Class method: TestMatVec.testOperatorVectorTensor(self),qutip,qutip,v5.0.4,,,,,,,,,TestMatVec,testOperatorVectorTensor,(self),,,,,,,,
test_superoper.py,python,class_method,,,Class method: TestMatVec.testOperatorVectorNotSquare(self),qutip,qutip,v5.0.4,,,,,,,,,TestMatVec,testOperatorVectorNotSquare,(self),,,,,,,,
test_superoper.py,python,class_method,,,Class method: TestMatVec.testOperatorSpreAppl(self),qutip,qutip,v5.0.4,,,,,,,,,TestMatVec,testOperatorSpreAppl,(self),,,,,,,,
test_superoper.py,python,class_method,,,Class method: TestMatVec.testOperatorSpostAppl(self),qutip,qutip,v5.0.4,,,,,,,,,TestMatVec,testOperatorSpostAppl,(self),,,,,,,,
test_superoper.py,python,class_method,,,Class method: TestMatVec.testOperatorUnitaryTransform(self),qutip,qutip,v5.0.4,,,,,,,,,TestMatVec,testOperatorUnitaryTransform,(self),,,,,,,,
test_superoper.py,python,class_method,,,Class method: TestMatVec.testMatrixVecMat(self),qutip,qutip,v5.0.4,,,,,,,,,TestMatVec,testMatrixVecMat,(self),,,,,,,,
test_superoper.py,python,class_method,,,Class method: TestMatVec.testVecMatVec(self),qutip,qutip,v5.0.4,,,,,,,,,TestMatVec,testVecMatVec,(self),,,,,,,,
test_superoper.py,python,class_method,,,Class method: TestMatVec.testVecMatIndexConversion(self),qutip,qutip,v5.0.4,,,,,,,,,TestMatVec,testVecMatIndexConversion,(self),,,,,,,,
test_superoper.py,python,class_method,,,Class method: TestMatVec.testVecMatIndexCompability(self),qutip,qutip,v5.0.4,,,,,,,,,TestMatVec,testVecMatIndexCompability,(self),,,,,,,,
test_superoper.py,python,class_method,,,Class method: TestMatVec.test_reshuffle(self),qutip,qutip,v5.0.4,,,,,,,,,TestMatVec,test_reshuffle,(self),,,,,,,,
test_superoper.py,python,class_method,,,Class method: TestMatVec.test_sprepost(self),qutip,qutip,v5.0.4,,,,,,,,,TestMatVec,test_sprepost,(self),,,,,,,,
test_superoper.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""dtype"", [_data.CSR, _data.Dense])] TestMatVec.test_operation_dtype(self, dtype, operation)",qutip,qutip,v5.0.4,,,,,,,,,TestMatVec,test_operation_dtype,"(self, dtype, operation)",,,,"pytest.mark.parametrize(""dtype"", [_data.CSR, _data.Dense])",,,,
test_superoper.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""operation"", [qutip.spre,
                                           qutip.spost,
                                           qutip.liouvillian,
                                           qutip.lindblad_dissipator])] TestMatVec.test_operation_dtype(self, dtype, operation)",qutip,qutip,v5.0.4,,,,,,,,,TestMatVec,test_operation_dtype,"(self, dtype, operation)",,,,"pytest.mark.parametrize(""operation"", [qutip.spre,
                                           qutip.spost,
                                           qutip.liouvillian,
                                           qutip.lindblad_dissipator])",,,,
test_superoper.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""dtype"", [_data.CSR, _data.Dense])] TestMatVec.test_sprepost_dtype(self, dtype)",qutip,qutip,v5.0.4,,,,,,,,,TestMatVec,test_sprepost_dtype,"(self, dtype)",,,,"pytest.mark.parametrize(""dtype"", [_data.CSR, _data.Dense])",,,,
test_superoper.py,python,class_method,,,Class method: TestMatVec.testLiouvillianImplem(self),qutip,qutip,v5.0.4,,,,,,,,,TestMatVec,testLiouvillianImplem,(self),,,,,,,,
test_superoper.py,python,class_method,,,Class method: TestSuper_td.test_spre_td(self),qutip,qutip,v5.0.4,,,,,,,,,TestSuper_td,test_spre_td,(self),,,,,,,,
test_superoper.py,python,class_method,,,Class method: TestSuper_td.test_spost_td(self),qutip,qutip,v5.0.4,,,,,,,,,TestSuper_td,test_spost_td,(self),,,,,,,,
test_superoper.py,python,class_method,,,Class method: TestSuper_td.test_sprepost_td(self),qutip,qutip,v5.0.4,,,,,,,,,TestSuper_td,test_sprepost_td,(self),,,,,,,,
test_superoper.py,python,class_method,,,Class method: TestSuper_td.test_operator_vector_td(self),qutip,qutip,v5.0.4,,,,,,,,,TestSuper_td,test_operator_vector_td,(self),,,,,,,,
test_superoper.py,python,class_method,,,Class method: TestSuper_td.test_liouvillian_td(self),qutip,qutip,v5.0.4,,,,,,,,,TestSuper_td,test_liouvillian_td,(self),,,,,,,,
test_superoper.py,python,class_method,,,Class method: TestSuper_td.test_lindblad_dissipator_td(self),qutip,qutip,v5.0.4,,,,,,,,,TestSuper_td,test_lindblad_dissipator_td,(self),,,,,,,,
test_superoper.py,python,class,,,Class: TestMatVec,qutip,qutip,v5.0.4,,,,,,,,,TestMatVec,,,,,,,,,,
test_superoper.py,python,class,,,Class: TestSuper_td,qutip,qutip,v5.0.4,,,,,,,,,TestSuper_td,,,,,,,,,,
test_superoper.py,python,function,f,"(t, args)","Function: f(t, args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_superoper.py,python,function,liouvillian_ref,"(H, c_ops=())","Function: liouvillian_ref(H, c_ops=())",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_superoper.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_superoper.py,python,import,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg,scipy.linalg,,,,,,,,,,,,,,,,,
test_superoper.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_superoper.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_superoper.py,python,local_import,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,data,qutip.core,qutip.core,,,,,,,,,,,,,,,
test_superoper.py,python,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_superoper.py,python,,,,Directory: qutip\tests\core\test_superoper.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_superop_reps.py,python,class_field,,,Class field: TestSuperopReps.a = create(2).dag(),qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,,,a = create(2).dag(),,,,a,create(2).dag(),,
test_superop_reps.py,python,class_field,,,"Class field: TestSuperopReps.S = sprepost(a, a.dag())",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,,,"S = sprepost(a, a.dag())",,,,S,"sprepost(a, a.dag())",,
test_superop_reps.py,python,class_field,,,"Class field: TestSuperopReps.S_ = sprepost(a, a)",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,,,"S_ = sprepost(a, a)",,,,S_,"sprepost(a, a)",,
test_superop_reps.py,python,class_field,,,"Class field: TestSuperopReps.S_U = (
        to_super(tensor(sigmax(), identity(2))) +
        to_super(tensor(identity(2), sigmay()))
    ) / 2",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,,,"S_U = (
        to_super(tensor(sigmax(), identity(2))) +
        to_super(tensor(identity(2), sigmay()))
    ) / 2",,,,S_U,"(
        to_super(tensor(sigmax(), identity(2))) +
        to_super(tensor(identity(2), sigmay()))
    ) / 2",,
test_superop_reps.py,python,class_field,,,"Class field: TestSuperopReps.ptr_swap = Qobj(swap(), dims=[[[2], [2]]]*2, superrep='choi')",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,,,"ptr_swap = Qobj(swap(), dims=[[[2], [2]]]*2, superrep='choi')",,,,ptr_swap,"Qobj(swap(), dims=[[[2], [2]]]*2, superrep='choi')",,
test_superop_reps.py,python,class_field,,,"Class field: TestSuperopReps.subnorm_map = Qobj(identity(4) * 0.9, dims=[[[2], [2]]]*2,
                       superrep='super')",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,,,"subnorm_map = Qobj(identity(4) * 0.9, dims=[[[2], [2]]]*2,
                       superrep='super')",,,,subnorm_map,"Qobj(identity(4) * 0.9, dims=[[[2], [2]]]*2,
                       superrep='super')",,
test_superop_reps.py,python,class_field,,,"Class field: TestSuperopReps.chi_sigmax = [
        [0, 0, 0, 0],
        [0, 4, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,,,"chi_sigmax = [
        [0, 0, 0, 0],
        [0, 4, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]",,,,chi_sigmax,"[
        [0, 0, 0, 0],
        [0, 4, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]",,
test_superop_reps.py,python,class_field,,,"Class field: TestSuperopReps.chi_diag2 = [
        [4, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,,,"chi_diag2 = [
        [4, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]",,,,chi_diag2,"[
        [4, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]",,
test_superop_reps.py,python,class_field,,,Class field: TestSuperopReps.rotX_pi_4 = (-1j * sigmax() * np.pi / 4).expm(),qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,,,rotX_pi_4 = (-1j * sigmax() * np.pi / 4).expm(),,,,rotX_pi_4,(-1j * sigmax() * np.pi / 4).expm(),,
test_superop_reps.py,python,class_field,,,"Class field: TestSuperopReps.chi_rotX_pi_4 = [
        [2, 2j, 0, 0],
        [-2j, 2, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,,,"chi_rotX_pi_4 = [
        [2, 2j, 0, 0],
        [-2j, 2, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]",,,,chi_rotX_pi_4,"[
        [2, 2j, 0, 0],
        [-2j, 2, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]",,
test_superop_reps.py,python,class_method,,,"Class method: TestSuperopReps.test_SuperChoiSuper(self, superoperator)",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,test_SuperChoiSuper,"(self, superoperator)",,,,,,,,
test_superop_reps.py,python,class_method,,,"Class method: [pytest.mark.parametrize('dimension', [2, 4])] TestSuperopReps.test_SuperChoiChiSuper(self, dimension)",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,test_SuperChoiChiSuper,"(self, dimension)",,,,"pytest.mark.parametrize('dimension', [2, 4])",,,,
test_superop_reps.py,python,class_method,,,"Class method: TestSuperopReps.test_ChoiKrausChoi(self, superoperator)",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,test_ChoiKrausChoi,"(self, superoperator)",,,,,,,,
test_superop_reps.py,python,class_method,,,Class method: TestSuperopReps.test_NonSquareKrausSuperChoi(self),qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,test_NonSquareKrausSuperChoi,(self),,,,,,,,
test_superop_reps.py,python,class_method,,,Class method: TestSuperopReps.test_NeglectSmallKraus(self),qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,test_NeglectSmallKraus,(self),,,,,,,,
test_superop_reps.py,python,class_method,,,"Class method: TestSuperopReps.test_SuperPreservesSelf(self, superoperator)",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,test_SuperPreservesSelf,"(self, superoperator)",,,,,,,,
test_superop_reps.py,python,class_method,,,"Class method: TestSuperopReps.test_ChoiPreservesSelf(self, superoperator)",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,test_ChoiPreservesSelf,"(self, superoperator)",,,,,,,,
test_superop_reps.py,python,class_method,,,"Class method: TestSuperopReps.test_random_iscptp(self, superoperator)",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,test_random_iscptp,"(self, superoperator)",,,,,,,,
test_superop_reps.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['qobj', 'hp', 'cp', 'tp'], [
        pytest.param(sprepost(destroy(2), create(2)), True, True, False),
        pytest.param(sprepost(destroy(2), destroy(2)), False, False, False),
        pytest.param(qeye(2), True, True, True),
        pytest.param(sigmax(), True, True, True),
        pytest.param(tensor(sigmax(), qeye(2)), True, True, True),
        pytest.param(0.5 * (to_super(tensor(sigmax(), qeye(2)))
                            + to_super(tensor(qeye(2), sigmay()))),
                     True, True, True,
                     id=""linear combination of bipartite unitaries""),
        pytest.param(Qobj(swap(), dims=[[[2],[2]]]*2, superrep='choi'),
                     True, False, True,
                     id=""partial transpose map""),
        pytest.param(Qobj(qeye(4)*0.9, dims=[[[2],[2]]]*2), True, True, False,
                     id=""subnormalized map""),
        pytest.param(basis(2, 0), False, False, False, id=""ket""),
    ])] TestSuperopReps.test_known_iscptp(self, qobj, hp, cp, tp)",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,test_known_iscptp,"(self, qobj, hp, cp, tp)",,,,"pytest.mark.parametrize(['qobj', 'hp', 'cp', 'tp'], [
        pytest.param(sprepost(destroy(2), create(2)), True, True, False),
        pytest.param(sprepost(destroy(2), destroy(2)), False, False, False),
        pytest.param(qeye(2), True, True, True),
        pytest.param(sigmax(), True, True, True),
        pytest.param(tensor(sigmax(), qeye(2)), True, True, True),
        pytest.param(0.5 * (to_super(tensor(sigmax(), qeye(2)))
                            + to_super(tensor(qeye(2), sigmay()))),
                     True, True, True,
                     id=""linear combination of bipartite unitaries""),
        pytest.param(Qobj(swap(), dims=[[[2],[2]]]*2, superrep='choi'),
                     True, False, True,
                     id=""partial transpose map""),
        pytest.param(Qobj(qeye(4)*0.9, dims=[[[2],[2]]]*2), True, True, False,
                     id=""subnormalized map""),
        pytest.param(basis(2, 0), False, False, False, id=""ket""),
    ])",,,,
test_superop_reps.py,python,class_method,,,Class method: TestSuperopReps.test_choi_tr(self),qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,test_choi_tr,(self),,,,,,,,
test_superop_reps.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['qobj',  'shouldhp', 'shouldcp', 'shouldtp'], [
        pytest.param(S, True, True, False, id=""conjugatio by create op""),
        pytest.param(S_, False, False, False, id=""single off-diag""),
        pytest.param(identity(2), True, True, True, id=""Identity""),
        pytest.param(sigmax(), True, True, True, id=""Pauli X""),
        pytest.param(
            tensor(sigmax(), identity(2)), True, True, True,
            id=""bipartite system"",
        ),
        pytest.param(
            S_U, True, True, True, id=""linear combination of bip. unitaries"",
        ),
        pytest.param(ptr_swap,  True, False, True, id=""partial transpose map""),
        pytest.param(subnorm_map, True, True, False, id=""subnorm map""),
        pytest.param(basis(2), False, False, False, id=""not an operator""),

    ])] TestSuperopReps.test_known_iscptp(self, qobj, shouldhp, shouldcp, shouldtp)",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,test_known_iscptp,"(self, qobj, shouldhp, shouldcp, shouldtp)",,,,"pytest.mark.parametrize(['qobj',  'shouldhp', 'shouldcp', 'shouldtp'], [
        pytest.param(S, True, True, False, id=""conjugatio by create op""),
        pytest.param(S_, False, False, False, id=""single off-diag""),
        pytest.param(identity(2), True, True, True, id=""Identity""),
        pytest.param(sigmax(), True, True, True, id=""Pauli X""),
        pytest.param(
            tensor(sigmax(), identity(2)), True, True, True,
            id=""bipartite system"",
        ),
        pytest.param(
            S_U, True, True, True, id=""linear combination of bip. unitaries"",
        ),
        pytest.param(ptr_swap,  True, False, True, id=""partial transpose map""),
        pytest.param(subnorm_map, True, True, False, id=""subnorm map""),
        pytest.param(basis(2), False, False, False, id=""not an operator""),

    ])",,,,
test_superop_reps.py,python,class_method,,,"Class method: TestSuperopReps.test_choi_tr(self, dimension)",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,test_choi_tr,"(self, dimension)",,,,,,,,
test_superop_reps.py,python,class_method,,,"Class method: TestSuperopReps.test_stinespring_cp(self, dimension)",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,test_stinespring_cp,"(self, dimension)",,,,,,,,
test_superop_reps.py,python,class_method,,,"Class method: [pytest.mark.repeat(3)] TestSuperopReps.test_stinespring_agrees(self, dimension)",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,test_stinespring_agrees,"(self, dimension)",,,,pytest.mark.repeat(3),,,,
test_superop_reps.py,python,class_method,,,"Class method: TestSuperopReps.test_stinespring_dims(self, dimension)",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,test_stinespring_dims,"(self, dimension)",,,,,,,,
test_superop_reps.py,python,class_method,,,"Class method: [pytest.mark.parametrize('dimension', [2, 4, 8])] TestSuperopReps.test_chi_choi_roundtrip(self, dimension)",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,test_chi_choi_roundtrip,"(self, dimension)",,,,"pytest.mark.parametrize('dimension', [2, 4, 8])",,,,
test_superop_reps.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['superop', 'chi_expected'], [
        pytest.param(sigmax(), chi_sigmax),
        pytest.param(to_super(sigmax()), chi_sigmax),
        pytest.param(qeye(2), chi_diag2),
        pytest.param(rotX_pi_4, chi_rotX_pi_4)
    ])] TestSuperopReps.test_chi_known(self, superop, chi_expected)",qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,test_chi_known,"(self, superop, chi_expected)",,,,"pytest.mark.parametrize(['superop', 'chi_expected'], [
        pytest.param(sigmax(), chi_sigmax),
        pytest.param(to_super(sigmax()), chi_sigmax),
        pytest.param(qeye(2), chi_diag2),
        pytest.param(rotX_pi_4, chi_rotX_pi_4)
    ])",,,,
test_superop_reps.py,python,class,,,Class: TestSuperopReps,qutip,qutip,v5.0.4,,,,,,,,,TestSuperopReps,,,,,,,,,,
test_superop_reps.py,python,function,assert_kraus_equivalence,"(a, b, tol=tol)","Function: assert_kraus_equivalence(a, b, tol=tol)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_superop_reps.py,python,constant,,,Constant: tol = 1e-8,qutip,qutip,v5.0.4,,,,,tol = 1e-8,tol,1e-8,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",Qobj,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: basis from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",basis,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: identity from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",identity,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: sigmax from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",sigmax,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: sigmay from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",sigmay,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qeye,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: create from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",create,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: rand_super from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",rand_super,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: rand_super_bcsz from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",rand_super_bcsz,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: rand_dm from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",rand_dm,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: tensor from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",tensor,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: super_tensor from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",super_tensor,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: kraus_to_choi from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",kraus_to_choi,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: to_super from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",to_super,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: to_choi from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",to_choi,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: to_kraus from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",to_kraus,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: to_chi from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",to_chi,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: to_stinespring from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",to_stinespring,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: operator_to_vector from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",operator_to_vector,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: vector_to_operator from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",vector_to_operator,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: sprepost from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",sprepost,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: destroy from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",destroy,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,import,,,Import: CoreOptions from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",CoreOptions,qutip,,,,,,,,,,,,,,,,
test_superop_reps.py,python,local_import,,,Import: swap from qutip.core.gates,qutip,qutip,v5.0.4,from qutip.core.gates import swap,swap,qutip.core.gates,qutip.core.gates,,,,,,,,,,,,,,,
test_superop_reps.py,python,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_superop_reps.py,python,,,,Directory: qutip\tests\core\test_superop_reps.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_tensor.py,python,class_method,,,"Class method: [pytest.mark.parametrize(
        'permutation',
        tuple(itertools.chain(*[
            itertools.permutations(range(k)) for k in [2, 3, 4]
        ])),
        ids=_permutation_id)] Test_expand_operator.test_permutation_without_expansion(self, permutation)",qutip,qutip,v5.0.4,,,,,,,,,Test_expand_operator,test_permutation_without_expansion,"(self, permutation)",,,,"pytest.mark.parametrize(
        'permutation',
        tuple(itertools.chain(*[
            itertools.permutations(range(k)) for k in [2, 3, 4]
        ])),
        ids=_permutation_id)",,,,
test_tensor.py,python,class_method,,,"Class method: [pytest.mark.parametrize('n_targets', range(1, 5))] Test_expand_operator.test_general_qubit_expansion(self, n_targets)",qutip,qutip,v5.0.4,,,,,,,,,Test_expand_operator,test_general_qubit_expansion,"(self, n_targets)",,,,"pytest.mark.parametrize('n_targets', range(1, 5))",,,,
test_tensor.py,python,class_method,,,Class method: Test_expand_operator.test_cnot_explicit(self),qutip,qutip,v5.0.4,,,,,,,,,Test_expand_operator,test_cnot_explicit,(self),,,,,,,,
test_tensor.py,python,class_method,,,"Class method: [pytest.mark.parametrize('dimensions', [
        pytest.param([3, 4, 5], id=""standard""),
        pytest.param([3, 3, 4, 4, 2], id=""standard""),
        pytest.param([1, 2, 3], id=""1D space""),
    ])] Test_expand_operator.test_non_qubit_systems(self, dimensions)",qutip,qutip,v5.0.4,,,,,,,,,Test_expand_operator,test_non_qubit_systems,"(self, dimensions)",,,,"pytest.mark.parametrize('dimensions', [
        pytest.param([3, 4, 5], id=""standard""),
        pytest.param([3, 3, 4, 4, 2], id=""standard""),
        pytest.param([1, 2, 3], id=""1D space""),
    ])",,,,
test_tensor.py,python,class_method,,,Class method: Test_expand_operator.test_dtype(self),qutip,qutip,v5.0.4,,,,,,,,,Test_expand_operator,test_dtype,(self),,,,,,,,
test_tensor.py,python,class,,,Class: Test_expand_operator,qutip,qutip,v5.0.4,,,,,,,,,Test_expand_operator,,,,,,,,,,
test_tensor.py,python,function,test_tensor_contract_ident,(),Function: test_tensor_contract_ident(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_tensor.py,python,function,case_tensor_contract_other,"(left, right, pairs,
                               expected_dims, expected_data)","Function: case_tensor_contract_other(left, right, pairs,
                               expected_dims, expected_data)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_tensor.py,python,function,test_tensor_contract_other,(),Function: test_tensor_contract_other(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_tensor.py,python,function,case_tensor_swap,"(qobj, pairs, expected_dims, expected_data=None)","Function: case_tensor_swap(qobj, pairs, expected_dims, expected_data=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_tensor.py,python,function,test_tensor_swap_other,(),Function: test_tensor_swap_other(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_tensor.py,python,function,test_tensor_qobjevo,(),Function: test_tensor_qobjevo(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_tensor.py,python,function,test_tensor_qobjevo_non_square,(),Function: test_tensor_qobjevo_non_square(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_tensor.py,python,function,test_tensor_qobjevo_multiple,(),Function: test_tensor_qobjevo_multiple(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_tensor.py,python,function,test_tensor_and,(),Function: test_tensor_and(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_tensor.py,python,function,_permutation_id,(permutation),Function: _permutation_id(permutation),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_tensor.py,python,function,_tensor_with_entanglement,"(all_qubits, entangled, entangled_locations)","Function: _tensor_with_entanglement(all_qubits, entangled, entangled_locations)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_tensor.py,python,function,_apply_permutation,(permutation),Function: _apply_permutation(permutation),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_tensor.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_tensor.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_tensor.py,python,import,,,Import: functools,qutip,qutip,v5.0.4,import functools,functools,,,,,,,,,,,,,,,,,
test_tensor.py,python,import,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,itertools,,,,,,,,,,,,,,,,,
test_tensor.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_tensor.py,python,import,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",Qobj,qutip,,,,,,,,,,,,,,,,
test_tensor.py,python,import,,,Import: identity from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",identity,qutip,,,,,,,,,,,,,,,,
test_tensor.py,python,import,,,Import: sigmax from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",sigmax,qutip,,,,,,,,,,,,,,,,
test_tensor.py,python,import,,,Import: to_super from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",to_super,qutip,,,,,,,,,,,,,,,,
test_tensor.py,python,import,,,Import: to_choi from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",to_choi,qutip,,,,,,,,,,,,,,,,
test_tensor.py,python,import,,,Import: rand_super_bcsz from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",rand_super_bcsz,qutip,,,,,,,,,,,,,,,,
test_tensor.py,python,import,,,Import: basis from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",basis,qutip,,,,,,,,,,,,,,,,
test_tensor.py,python,import,,,Import: tensor_contract from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",tensor_contract,qutip,,,,,,,,,,,,,,,,
test_tensor.py,python,import,,,Import: tensor_swap from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",tensor_swap,qutip,,,,,,,,,,,,,,,,
test_tensor.py,python,import,,,Import: num from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",num,qutip,,,,,,,,,,,,,,,,
test_tensor.py,python,import,,,Import: QobjEvo from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",QobjEvo,qutip,,,,,,,,,,,,,,,,
test_tensor.py,python,import,,,Import: destroy from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",destroy,qutip,,,,,,,,,,,,,,,,
test_tensor.py,python,import,,,Import: tensor from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",tensor,qutip,,,,,,,,,,,,,,,,
test_tensor.py,python,import,,,Import: expand_operator from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",expand_operator,qutip,,,,,,,,,,,,,,,,
test_tensor.py,python,local_import,,,Import: assert_equal from numpy.testing,qutip,qutip,v5.0.4,"from numpy.testing import assert_equal, assert_",assert_equal,numpy.testing,numpy.testing,,,,,,,,,,,,,,,
test_tensor.py,python,local_import,,,Import: assert_ from numpy.testing,qutip,qutip,v5.0.4,"from numpy.testing import assert_equal, assert_",assert_,numpy.testing,numpy.testing,,,,,,,,,,,,,,,
test_tensor.py,python,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_tensor.py,python,,,,Directory: qutip\tests\core\test_tensor.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,Directory: qutip\tests\core\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
conftest.py,python,function,shuffle_indices_scipy_csr,(matrix),Function: shuffle_indices_scipy_csr(matrix),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
conftest.py,python,function,random_scipy_dia,"(shape, density, sort=False)","Function: random_scipy_dia(shape, density, sort=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
conftest.py,python,function,random_scipy_csr,"(shape, density, sorted_)","Function: random_scipy_csr(shape, density, sorted_)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
conftest.py,python,function,random_numpy_dense,"(shape, fortran)","Function: random_numpy_dense(shape, fortran)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
conftest.py,python,function,random_csr,"(shape, density, sorted_)","Function: random_csr(shape, density, sorted_)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
conftest.py,python,function,random_dense,"(shape, fortran)","Function: random_dense(shape, fortran)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
conftest.py,python,function,random_diag,"(shape, density, sort=False)","Function: random_diag(shape, density, sort=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
conftest.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
conftest.py,python,import,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse,scipy.sparse,,,,,,,,,,,,,,,,,
conftest.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
conftest.py,python,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
conftest.py,python,,,,Directory: qutip\tests\core\data\conftest.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_convert.py,python,class_field,,,"Class field: TestConvert.specialisations = [
        pytest.param(data.dense.from_csr, data.CSR, data.Dense),
        pytest.param(data.dense.from_dia, data.Dia, data.Dense),
        pytest.param(data.csr.from_dense, data.Dense, data.CSR),
        pytest.param(data.csr.from_dia, data.Dia, data.CSR),
        pytest.param(data.dia.from_dense, data.Dense, data.Dia),
        pytest.param(data.dia.from_csr, data.CSR, data.Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestConvert,,,"specialisations = [
        pytest.param(data.dense.from_csr, data.CSR, data.Dense),
        pytest.param(data.dense.from_dia, data.Dia, data.Dense),
        pytest.param(data.csr.from_dense, data.Dense, data.CSR),
        pytest.param(data.csr.from_dia, data.Dia, data.CSR),
        pytest.param(data.dia.from_dense, data.Dense, data.Dia),
        pytest.param(data.dia.from_csr, data.CSR, data.Dia),
    ]",,,,specialisations,"[
        pytest.param(data.dense.from_csr, data.CSR, data.Dense),
        pytest.param(data.dense.from_dia, data.Dia, data.Dense),
        pytest.param(data.csr.from_dense, data.Dense, data.CSR),
        pytest.param(data.csr.from_dia, data.Dia, data.CSR),
        pytest.param(data.dia.from_dense, data.Dense, data.Dia),
        pytest.param(data.dia.from_csr, data.CSR, data.Dia),
    ]",,
test_convert.py,python,class_method,,,"Class method: TestConvert.op_numpy(self, mat)",qutip,qutip,v5.0.4,,,,,,,,,TestConvert,op_numpy,"(self, mat)",,,,,,,,
test_convert.py,python,class,,,Class: TestConvert(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestConvert,,,,,(UnaryOpMixin),,,,,
test_convert.py,python,function,test_init_empty_data,(),Function: test_init_empty_data(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_convert.py,python,constant,,,Constant: dtype_names = list(data.to._str2type.keys()) + list(data.to.dtypes),qutip,qutip,v5.0.4,,,,,dtype_names = list(data.to._str2type.keys()) + list(data.to.dtypes),dtype_names,list(data.to._str2type.keys()) + list(data.to.dtypes),,,,,,,,,,,,
test_convert.py,python,constant,,,Constant: dtype_types = list(data.to._str2type.values()) + list(data.to.dtypes),qutip,qutip,v5.0.4,,,,,dtype_types = list(data.to._str2type.values()) + list(data.to.dtypes),dtype_types,list(data.to._str2type.values()) + list(data.to.dtypes),,,,,,,,,,,,
test_convert.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_convert.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_convert.py,python,import,,,Import: sparse from scipy,qutip,qutip,v5.0.4,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,,
test_convert.py,python,import,,,Import: data from qutip,qutip,qutip,v5.0.4,from qutip import data,data,qutip,,,,,,,,,,,,,,,,
test_convert.py,python,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_convert.py,python,,,,Directory: qutip\tests\core\data\test_convert.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_csr.py,python,class_field,,,"Class field: [instance] _blocks.rows = np.array(rows, dtype=data.base.idxint_dtype)",qutip,qutip,v5.0.4,,,,,,,,,_blocks,__init__,"(self, rows, cols, ops, n_blocks=2, block_size=2)","self.rows = np.array(rows, dtype=data.base.idxint_dtype)","self.rows = np.array(rows, dtype=data.base.idxint_dtype)",,,,,,
test_csr.py,python,class_field,,,"Class field: [instance] _blocks.cols = np.array(cols, dtype=data.base.idxint_dtype)",qutip,qutip,v5.0.4,,,,,,,,,_blocks,__init__,"(self, rows, cols, ops, n_blocks=2, block_size=2)","self.cols = np.array(cols, dtype=data.base.idxint_dtype)","self.cols = np.array(cols, dtype=data.base.idxint_dtype)",,,,,,
test_csr.py,python,class_field,,,"Class field: [instance] _blocks.ops = np.array(ops, dtype=object)",qutip,qutip,v5.0.4,,,,,,,,,_blocks,__init__,"(self, rows, cols, ops, n_blocks=2, block_size=2)","self.ops = np.array(ops, dtype=object)","self.ops = np.array(ops, dtype=object)",,,,,,
test_csr.py,python,class_field,,,Class field: [instance] _blocks.n_blocks = n_blocks,qutip,qutip,v5.0.4,,,,,,,,,_blocks,__init__,"(self, rows, cols, ops, n_blocks=2, block_size=2)",self.n_blocks = n_blocks,self.n_blocks = n_blocks,,,,,,
test_csr.py,python,class_field,,,Class field: [instance] _blocks.block_size = block_size,qutip,qutip,v5.0.4,,,,,,,,,_blocks,__init__,"(self, rows, cols, ops, n_blocks=2, block_size=2)",self.block_size = block_size,self.block_size = block_size,,,,,,
test_csr.py,python,class_method,,,"Class method: TestClassMethods.test_init_from_tuple(self, scipy_csr)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_init_from_tuple,"(self, scipy_csr)",,,,,,,,
test_csr.py,python,class_method,,,"Class method: [pytest.mark.parametrize('d_type', (
        _dtype_complex + _dtype_float + _dtype_int + _dtype_uint
    ))] TestClassMethods.test_init_from_tuple_allowed_dtypes(self, d_type, c_type, r_type)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_init_from_tuple_allowed_dtypes,"(self, d_type, c_type, r_type)",,,,"pytest.mark.parametrize('d_type', (
        _dtype_complex + _dtype_float + _dtype_int + _dtype_uint
    ))",,,,
test_csr.py,python,class_method,,,"Class method: [pytest.mark.parametrize('c_type', _dtype_int + _dtype_uint)] TestClassMethods.test_init_from_tuple_allowed_dtypes(self, d_type, c_type, r_type)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_init_from_tuple_allowed_dtypes,"(self, d_type, c_type, r_type)",,,,"pytest.mark.parametrize('c_type', _dtype_int + _dtype_uint)",,,,
test_csr.py,python,class_method,,,"Class method: [pytest.mark.parametrize('r_type', _dtype_int + _dtype_uint)] TestClassMethods.test_init_from_tuple_allowed_dtypes(self, d_type, c_type, r_type)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_init_from_tuple_allowed_dtypes,"(self, d_type, c_type, r_type)",,,,"pytest.mark.parametrize('r_type', _dtype_int + _dtype_uint)",,,,
test_csr.py,python,class_method,,,"Class method: TestClassMethods.test_init_from_scipy(self, scipy_csr)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_init_from_scipy,"(self, scipy_csr)",,,,,,,,
test_csr.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['arg', 'kwargs', 'error'], [
        pytest.param((), {}, ValueError, id=""arg 0 tuple""),
        pytest.param((None,), {}, ValueError, id=""arg 1 tuple""),
        pytest.param((None,)*2, {}, ValueError, id=""arg 2 tuple""),
        pytest.param((None,)*3, {}, TypeError, id=""arg None tuple""),
        pytest.param((None,)*4, {}, ValueError, id=""arg 4 tuple""),
        pytest.param(_valid_scipy(), {'shape': ()}, ValueError,
                     id=""scipy-shape 0 tuple""),
        pytest.param(_valid_scipy(), {'shape': (1,)}, ValueError,
                     id=""scipy-shape 1 tuple""),
        pytest.param(_valid_scipy(), {'shape': (None, None)}, ValueError,
                     id=""scipy-shape None tuple""),
        pytest.param(_valid_scipy(), {'shape': [2, 2]}, ValueError,
                     id=""scipy-shape list""),
        pytest.param(_valid_scipy(), {'shape': (1, 2, 3)}, ValueError,
                     id=""scipy-shape 3 tuple""),
        pytest.param(_valid_arg(), {'shape': ()}, ValueError,
                     id=""arg-shape 0 tuple""),
        pytest.param(_valid_arg(), {'shape': (1,)}, ValueError,
                     id=""arg-shape 1 tuple""),
        pytest.param(_valid_arg(), {'shape': (None, None)}, ValueError,
                     id=""arg-shape None tuple""),
        pytest.param(_valid_arg(), {'shape': [2, 2]}, TypeError,
                     id=""arg-shape list""),
        pytest.param(_valid_arg(), {'shape': (1, 2, 3)}, ValueError,
                     id=""arg-shape 3 tuple""),
        pytest.param(_valid_arg(), {'shape': (-1, -1)}, ValueError,
                     id=""arg-negative shape""),
    ])] TestClassMethods.test_init_from_wrong_input(self, arg, kwargs, error)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_init_from_wrong_input,"(self, arg, kwargs, error)",,,,"pytest.mark.parametrize(['arg', 'kwargs', 'error'], [
        pytest.param((), {}, ValueError, id=""arg 0 tuple""),
        pytest.param((None,), {}, ValueError, id=""arg 1 tuple""),
        pytest.param((None,)*2, {}, ValueError, id=""arg 2 tuple""),
        pytest.param((None,)*3, {}, TypeError, id=""arg None tuple""),
        pytest.param((None,)*4, {}, ValueError, id=""arg 4 tuple""),
        pytest.param(_valid_scipy(), {'shape': ()}, ValueError,
                     id=""scipy-shape 0 tuple""),
        pytest.param(_valid_scipy(), {'shape': (1,)}, ValueError,
                     id=""scipy-shape 1 tuple""),
        pytest.param(_valid_scipy(), {'shape': (None, None)}, ValueError,
                     id=""scipy-shape None tuple""),
        pytest.param(_valid_scipy(), {'shape': [2, 2]}, ValueError,
                     id=""scipy-shape list""),
        pytest.param(_valid_scipy(), {'shape': (1, 2, 3)}, ValueError,
                     id=""scipy-shape 3 tuple""),
        pytest.param(_valid_arg(), {'shape': ()}, ValueError,
                     id=""arg-shape 0 tuple""),
        pytest.param(_valid_arg(), {'shape': (1,)}, ValueError,
                     id=""arg-shape 1 tuple""),
        pytest.param(_valid_arg(), {'shape': (None, None)}, ValueError,
                     id=""arg-shape None tuple""),
        pytest.param(_valid_arg(), {'shape': [2, 2]}, TypeError,
                     id=""arg-shape list""),
        pytest.param(_valid_arg(), {'shape': (1, 2, 3)}, ValueError,
                     id=""arg-shape 3 tuple""),
        pytest.param(_valid_arg(), {'shape': (-1, -1)}, ValueError,
                     id=""arg-negative shape""),
    ])",,,,
test_csr.py,python,class_method,,,"Class method: TestClassMethods.test_copy_returns_a_correct_copy(self, data_csr)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_copy_returns_a_correct_copy,"(self, data_csr)",,,,,,,,
test_csr.py,python,class_method,,,"Class method: TestClassMethods.test_as_scipy_returns_a_view(self, data_csr)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_as_scipy_returns_a_view,"(self, data_csr)",,,,,,,,
test_csr.py,python,class_method,,,"Class method: TestClassMethods.test_as_scipy_caches_result(self, data_csr)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_as_scipy_caches_result,"(self, data_csr)",,,,,,,,
test_csr.py,python,class_method,,,"Class method: TestClassMethods.test_as_scipy_of_csr_from_scipy_is_different(self, scipy_csr)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_as_scipy_of_csr_from_scipy_is_different,"(self, scipy_csr)",,,,,,,,
test_csr.py,python,class_method,,,"Class method: TestClassMethods.test_as_scipy_of_copy_is_different(self, data_csr)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_as_scipy_of_copy_is_different,"(self, data_csr)",,,,,,,,
test_csr.py,python,class_method,,,"Class method: TestClassMethods.test_as_scipy_is_correct_result(self, scipy_csr)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_as_scipy_is_correct_result,"(self, scipy_csr)",,,,,,,,
test_csr.py,python,class_method,,,"Class method: TestClassMethods.test_as_scipy_of_uninitialised_is_empty(self, shape, density)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_as_scipy_of_uninitialised_is_empty,"(self, shape, density)",,,,,,,,
test_csr.py,python,class_method,,,"Class method: TestClassMethods.test_to_array_is_correct_result(self, data_csr)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_to_array_is_correct_result,"(self, data_csr)",,,,,,,,
test_csr.py,python,class_method,,,"Class method: TestClassMethods.test_sorted_indices(self, data_csr)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_sorted_indices,"(self, data_csr)",,,,,,,,
test_csr.py,python,class_method,,,"Class method: TestFactoryMethods.test_empty(self, shape, density)",qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,test_empty,"(self, shape, density)",,,,,,,,
test_csr.py,python,class_method,,,"Class method: TestFactoryMethods.test_zeros(self, shape)",qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,test_zeros,"(self, shape)",,,,,,,,
test_csr.py,python,class_method,,,"Class method: [pytest.mark.parametrize('dimension', [1, 5, 100])] TestFactoryMethods.test_identity(self, dimension, scale)",qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,test_identity,"(self, dimension, scale)",,,,"pytest.mark.parametrize('dimension', [1, 5, 100])",,,,
test_csr.py,python,class_method,,,"Class method: [pytest.mark.parametrize(
        'scale',
        [None, 2, -0.1, 1.5, 1.5+1j],
        ids=['none', 'int', 'negative', 'float', 'complex']
    )] TestFactoryMethods.test_identity(self, dimension, scale)",qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,test_identity,"(self, dimension, scale)",,,,"pytest.mark.parametrize(
        'scale',
        [None, 2, -0.1, 1.5, 1.5+1j],
        ids=['none', 'int', 'negative', 'float', 'complex']
    )",,,,
test_csr.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['diagonals', 'offsets', 'shape'], [
        pytest.param([2j, 3, 5, 9], None, None, id='main diagonal'),
        pytest.param([1], None, None, id='1x1'),
        pytest.param([[0.2j, 0.3]], None, None, id='main diagonal list'),
        pytest.param([0.2j, 0.3], 2, None, id='superdiagonal'),
        pytest.param([0.2j, 0.3], -2, None, id='subdiagonal'),
        pytest.param([[0.2, 0.3, 0.4], [0.1, 0.9]], [-2, 3], None,
                     id='two diagonals'),
        pytest.param([1, 2, 3], 0, (3, 5), id='main wide'),
        pytest.param([1, 2, 3], 0, (5, 3), id='main tall'),
        pytest.param([[1, 2, 3], [4, 5]], [-1, -2], (4, 8), id='two wide sub'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [1, 2], (4, 8),
                     id='two wide super'),
        pytest.param([[1, 2, 3], [4, 5]], [1, 2], (8, 4), id='two tall super'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [-1, -2], (8, 4),
                     id='two tall sub'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, -1, -2], (4, 4),
                     id='out of order'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, 1, -2], (4, 4),
                     id='sum duplicates'),
    ])] TestFactoryMethods.test_diags(self, diagonals, offsets, shape)",qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,test_diags,"(self, diagonals, offsets, shape)",,,,"pytest.mark.parametrize(['diagonals', 'offsets', 'shape'], [
        pytest.param([2j, 3, 5, 9], None, None, id='main diagonal'),
        pytest.param([1], None, None, id='1x1'),
        pytest.param([[0.2j, 0.3]], None, None, id='main diagonal list'),
        pytest.param([0.2j, 0.3], 2, None, id='superdiagonal'),
        pytest.param([0.2j, 0.3], -2, None, id='subdiagonal'),
        pytest.param([[0.2, 0.3, 0.4], [0.1, 0.9]], [-2, 3], None,
                     id='two diagonals'),
        pytest.param([1, 2, 3], 0, (3, 5), id='main wide'),
        pytest.param([1, 2, 3], 0, (5, 3), id='main tall'),
        pytest.param([[1, 2, 3], [4, 5]], [-1, -2], (4, 8), id='two wide sub'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [1, 2], (4, 8),
                     id='two wide super'),
        pytest.param([[1, 2, 3], [4, 5]], [1, 2], (8, 4), id='two tall super'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [-1, -2], (8, 4),
                     id='two tall sub'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, -1, -2], (4, 4),
                     id='out of order'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, 1, -2], (4, 4),
                     id='sum duplicates'),
    ])",,,,
test_csr.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((1, 1), (0, 0), None, id='minimal'),
        pytest.param((10, 10), (5, 5), 1.j, id='on diagonal'),
        pytest.param((10, 10), (1, 5), 1., id='upper'),
        pytest.param((10, 10), (5, 1), 2., id='lower'),
        pytest.param((10, 1), (5, 0), None, id='column'),
        pytest.param((1, 10), (0, 5), -5j, id='row'),
        pytest.param((10, 2), (5, 1), 1+2j, id='tall'),
        pytest.param((2, 10), (1, 5), 10, id='wide'),
    ])] TestFactoryMethods.test_one_element(self, shape, position, value)",qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,test_one_element,"(self, shape, position, value)",,,,"pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((1, 1), (0, 0), None, id='minimal'),
        pytest.param((10, 10), (5, 5), 1.j, id='on diagonal'),
        pytest.param((10, 10), (1, 5), 1., id='upper'),
        pytest.param((10, 10), (5, 1), 2., id='lower'),
        pytest.param((10, 1), (5, 0), None, id='column'),
        pytest.param((1, 10), (0, 5), -5j, id='row'),
        pytest.param((10, 2), (5, 1), 1+2j, id='tall'),
        pytest.param((2, 10), (1, 5), 10, id='wide'),
    ])",,,,
test_csr.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((0, 0), (0, 0), None, id='zero shape'),
        pytest.param((10, -2), (5, 0), 1.j, id='neg shape'),
        pytest.param((10, 10), (10, 5), 1., id='outside'),
        pytest.param((10, 10), (5, -1), 2., id='outside neg'),
    ])] TestFactoryMethods.test_one_element_error(self, shape, position, value)",qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,test_one_element_error,"(self, shape, position, value)",,,,"pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((0, 0), (0, 0), None, id='zero shape'),
        pytest.param((10, -2), (5, 0), 1.j, id='neg shape'),
        pytest.param((10, 10), (10, 5), 1., id='outside'),
        pytest.param((10, 10), (5, -1), 2., id='outside neg'),
    ])",,,,
test_csr.py,python,class_method,,,"Class method: _blocks.__init__(self, rows, cols, ops, n_blocks=2, block_size=2)",qutip,qutip,v5.0.4,,,,,,,,,_blocks,__init__,"(self, rows, cols, ops, n_blocks=2, block_size=2)",,,,,,,,
test_csr.py,python,class_method,,,Class method: _blocks.from_csr_blocks(self),qutip,qutip,v5.0.4,,,,,,,,,_blocks,from_csr_blocks,(self),,,,,,,,
test_csr.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['blocks'], [
        pytest.param(_blocks((0, 1), (0,), 1), id='rows neq ops'),
        pytest.param(_blocks((0,), (0, 1), 1), id='cols neq ops'),
    ])] TestFromCSRBlocks.test_input_length_error(self, blocks)",qutip,qutip,v5.0.4,,,,,,,,,TestFromCSRBlocks,test_input_length_error,"(self, blocks)",,,,"pytest.mark.parametrize(['blocks'], [
        pytest.param(_blocks((0, 1), (0,), 1), id='rows neq ops'),
        pytest.param(_blocks((0,), (0, 1), 1), id='cols neq ops'),
    ])",,,,
test_csr.py,python,class_method,,,Class method: TestFromCSRBlocks.test_op_shape_error(self),qutip,qutip,v5.0.4,,,,,,,,,TestFromCSRBlocks,test_op_shape_error,(self),,,,,,,,
test_csr.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['blocks'], [
        pytest.param(_blocks((1, 0), (0, 1), 2), id='rows not ordered'),
        pytest.param(_blocks((1, 1), (1, 0), 2), id='cols not ordered'),
        pytest.param(_blocks((1, 0), (1, 0), 2), id='non-unique block'),
    ])] TestFromCSRBlocks.test_op_ordering_error(self, blocks)",qutip,qutip,v5.0.4,,,,,,,,,TestFromCSRBlocks,test_op_ordering_error,"(self, blocks)",,,,"pytest.mark.parametrize(['blocks'], [
        pytest.param(_blocks((1, 0), (0, 1), 2), id='rows not ordered'),
        pytest.param(_blocks((1, 1), (1, 0), 2), id='cols not ordered'),
        pytest.param(_blocks((1, 0), (1, 0), 2), id='non-unique block'),
    ])",,,,
test_csr.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['blocks'], [
        pytest.param(_blocks((), (), ()), id='no ops'),
        pytest.param(_blocks((0, 1), (1, 0), 2), id='zero ops'),
    ])] TestFromCSRBlocks.test_zeros_output_fast_paths(self, blocks)",qutip,qutip,v5.0.4,,,,,,,,,TestFromCSRBlocks,test_zeros_output_fast_paths,"(self, blocks)",,,,"pytest.mark.parametrize(['blocks'], [
        pytest.param(_blocks((), (), ()), id='no ops'),
        pytest.param(_blocks((0, 1), (1, 0), 2), id='zero ops'),
    ])",,,,
test_csr.py,python,class_method,,,Class method: TestFromCSRBlocks.test_construct_identity_with_empty(self),qutip,qutip,v5.0.4,,,,,,,,,TestFromCSRBlocks,test_construct_identity_with_empty,(self),,,,,,,,
test_csr.py,python,class_method,,,Class method: TestFromCSRBlocks.test_construct_identity_with_zeros(self),qutip,qutip,v5.0.4,,,,,,,,,TestFromCSRBlocks,test_construct_identity_with_zeros,(self),,,,,,,,
test_csr.py,python,class_method,,,Class method: TestFromCSRBlocks.test_construct_kron(self),qutip,qutip,v5.0.4,,,,,,,,,TestFromCSRBlocks,test_construct_kron,(self),,,,,,,,
test_csr.py,python,class,,,Class: TestClassMethods,qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,,,,,,,,,,
test_csr.py,python,class,,,Class: TestFactoryMethods,qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,,,,,,,,,,
test_csr.py,python,class,,,Class: TestFromCSRBlocks,qutip,qutip,v5.0.4,,,,,,,,,TestFromCSRBlocks,,,,,,,,,,
test_csr.py,python,class,,,Class: _blocks,qutip,qutip,v5.0.4,,,,,,,,,_blocks,,,,,,,,,,
test_csr.py,python,function,_valid_scipy,(),Function: _valid_scipy(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_csr.py,python,function,_valid_arg,(),Function: _valid_arg(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_csr.py,python,function,test_tidyup,(),Function: test_tidyup(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_csr.py,python,constant,,,Constant: _dtype_complex = ['complex128'],qutip,qutip,v5.0.4,,,,,_dtype_complex = ['complex128'],_dtype_complex,['complex128'],,,,,,,,,,,,
test_csr.py,python,constant,,,Constant: _dtype_float = ['float64'],qutip,qutip,v5.0.4,,,,,_dtype_float = ['float64'],_dtype_float,['float64'],,,,,,,,,,,,
test_csr.py,python,constant,,,"Constant: _dtype_int = ['int32', 'int64']",qutip,qutip,v5.0.4,,,,,"_dtype_int = ['int32', 'int64']",_dtype_int,"['int32', 'int64']",,,,,,,,,,,,
test_csr.py,python,constant,,,Constant: _dtype_uint = ['uint32'],qutip,qutip,v5.0.4,,,,,_dtype_uint = ['uint32'],_dtype_uint,['uint32'],,,,,,,,,,,,
test_csr.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_csr.py,python,import,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse,scipy.sparse,,,,,,,,,,,,,,,,,
test_csr.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_csr.py,python,import,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import qeye, CoreOptions",qeye,qutip,,,,,,,,,,,,,,,,
test_csr.py,python,import,,,Import: CoreOptions from qutip,qutip,qutip,v5.0.4,"from qutip import qeye, CoreOptions",CoreOptions,qutip,,,,,,,,,,,,,,,,
test_csr.py,python,local_import,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data,data,qutip.core,qutip.core,,,,,,,,,,,,,,,
test_csr.py,python,local_import,,,Import: csr from qutip.core.data,qutip,qutip,v5.0.4,from qutip.core.data import csr,csr,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_csr.py,python,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_csr.py,python,,,,Directory: qutip\tests\core\data\test_csr.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_dense.py,python,class_method,,,"Class method: TestClassMethods.test_init_from_ndarray(self, numpy_dense)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_init_from_ndarray,"(self, numpy_dense)",,,,,,,,
test_dense.py,python,class_method,,,"Class method: [pytest.mark.parametrize('dtype', ['complex128',
                                       'float64',
                                       'int32', 'int64',
                                       'uint32'])] TestClassMethods.test_init_from_ndarray_other_dtype(self, shape, dtype)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_init_from_ndarray_other_dtype,"(self, shape, dtype)",,,,"pytest.mark.parametrize('dtype', ['complex128',
                                       'float64',
                                       'int32', 'int64',
                                       'uint32'])",,,,
test_dense.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['arg', 'kwargs', 'error'], [
        pytest.param(_valid_numpy(), {'shape': ()}, ValueError,
                     id=""numpy-shape 0 tuple""),
        pytest.param(_valid_numpy(), {'shape': (1,)}, ValueError,
                     id=""numpy-shape 1 tuple""),
        pytest.param(_valid_numpy(), {'shape': (None, None)}, ValueError,
                     id=""numpy-shape None tuple""),
        pytest.param(_valid_numpy(), {'shape': [2, 2]}, ValueError,
                     id=""numpy-shape list""),
        pytest.param(_valid_numpy(), {'shape': (1, 2, 3)}, ValueError,
                     id=""numpy-shape 3 tuple""),
        pytest.param(_valid_numpy(), {'shape': (-1, 1)}, ValueError,
                     id=""numpy-negative shape""),
        pytest.param(_valid_numpy(), {'shape': (-4, -4)}, ValueError,
                     id=""numpy-both negative shape""),
        pytest.param(_valid_numpy(), {'shape': (1213, 1217)}, ValueError,
                     id=""numpy-different shape""),
    ])] TestClassMethods.test_init_from_wrong_input(self, arg, kwargs, error)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_init_from_wrong_input,"(self, arg, kwargs, error)",,,,"pytest.mark.parametrize(['arg', 'kwargs', 'error'], [
        pytest.param(_valid_numpy(), {'shape': ()}, ValueError,
                     id=""numpy-shape 0 tuple""),
        pytest.param(_valid_numpy(), {'shape': (1,)}, ValueError,
                     id=""numpy-shape 1 tuple""),
        pytest.param(_valid_numpy(), {'shape': (None, None)}, ValueError,
                     id=""numpy-shape None tuple""),
        pytest.param(_valid_numpy(), {'shape': [2, 2]}, ValueError,
                     id=""numpy-shape list""),
        pytest.param(_valid_numpy(), {'shape': (1, 2, 3)}, ValueError,
                     id=""numpy-shape 3 tuple""),
        pytest.param(_valid_numpy(), {'shape': (-1, 1)}, ValueError,
                     id=""numpy-negative shape""),
        pytest.param(_valid_numpy(), {'shape': (-4, -4)}, ValueError,
                     id=""numpy-both negative shape""),
        pytest.param(_valid_numpy(), {'shape': (1213, 1217)}, ValueError,
                     id=""numpy-different shape""),
    ])",,,,
test_dense.py,python,class_method,,,"Class method: TestClassMethods.test_copy_returns_a_correct_copy(self, data_dense)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_copy_returns_a_correct_copy,"(self, data_dense)",,,,,,,,
test_dense.py,python,class_method,,,"Class method: TestClassMethods.test_as_ndarray_returns_a_view(self, data_dense)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_as_ndarray_returns_a_view,"(self, data_dense)",,,,,,,,
test_dense.py,python,class_method,,,"Class method: TestClassMethods.test_as_ndarray_caches_result(self, data_dense)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_as_ndarray_caches_result,"(self, data_dense)",,,,,,,,
test_dense.py,python,class_method,,,"Class method: TestClassMethods.test_as_ndarray_of_dense_from_ndarray_is_different(self, numpy_dense)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_as_ndarray_of_dense_from_ndarray_is_different,"(self, numpy_dense)",,,,,,,,
test_dense.py,python,class_method,,,"Class method: TestClassMethods.test_as_ndarray_of_copy_is_different(self, data_dense)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_as_ndarray_of_copy_is_different,"(self, data_dense)",,,,,,,,
test_dense.py,python,class_method,,,"Class method: TestClassMethods.test_as_ndarray_is_correct_result(self, numpy_dense)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_as_ndarray_is_correct_result,"(self, numpy_dense)",,,,,,,,
test_dense.py,python,class_method,,,"Class method: TestClassMethods.test_to_array_is_correct_result(self, data_dense)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_to_array_is_correct_result,"(self, data_dense)",,,,,,,,
test_dense.py,python,class_method,,,"Class method: [pytest.mark.parametrize('new_fortran', [
        pytest.param(-1, id='swap'),
        pytest.param(False, id='C'),
        pytest.param(True, id='Fortran'),
    ])] TestClassMethods.test_reorder(self, data_dense, new_fortran)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_reorder,"(self, data_dense, new_fortran)",,,,"pytest.mark.parametrize('new_fortran', [
        pytest.param(-1, id='swap'),
        pytest.param(False, id='C'),
        pytest.param(True, id='Fortran'),
    ])",,,,
test_dense.py,python,class_method,,,"Class method: TestFactoryMethods.test_empty(self, shape)",qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,test_empty,"(self, shape)",,,,,,,,
test_dense.py,python,class_method,,,"Class method: TestFactoryMethods.test_zeros(self, shape)",qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,test_zeros,"(self, shape)",,,,,,,,
test_dense.py,python,class_method,,,"Class method: [pytest.mark.parametrize('dimension', [1, 5, 100])] TestFactoryMethods.test_identity(self, dimension, scale)",qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,test_identity,"(self, dimension, scale)",,,,"pytest.mark.parametrize('dimension', [1, 5, 100])",,,,
test_dense.py,python,class_method,,,"Class method: [pytest.mark.parametrize(
        'scale',
        [None, 2, -0.1, 1.5, 1.5+1j],
        ids=['none', 'int', 'negative', 'float', 'complex']
    )] TestFactoryMethods.test_identity(self, dimension, scale)",qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,test_identity,"(self, dimension, scale)",,,,"pytest.mark.parametrize(
        'scale',
        [None, 2, -0.1, 1.5, 1.5+1j],
        ids=['none', 'int', 'negative', 'float', 'complex']
    )",,,,
test_dense.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['diagonals', 'offsets', 'shape'], [
        pytest.param([2j, 3, 5, 9], None, None, id='main diagonal'),
        pytest.param([1], None, None, id='1x1'),
        pytest.param([[0.2j, 0.3]], None, None, id='main diagonal list'),
        pytest.param([0.2j, 0.3], 2, None, id='superdiagonal'),
        pytest.param([0.2j, 0.3], -2, None, id='subdiagonal'),
        pytest.param([[0.2, 0.3, 0.4], [0.1, 0.9]], [-2, 3], None,
                     id='two diagonals'),
        pytest.param([1, 2, 3], 0, (3, 5), id='main wide'),
        pytest.param([1, 2, 3], 0, (5, 3), id='main tall'),
        pytest.param([[1, 2, 3], [4, 5]], [-1, -2], (4, 8), id='two wide sub'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [1, 2], (4, 8),
                     id='two wide super'),
        pytest.param([[1, 2, 3], [4, 5]], [1, 2], (8, 4), id='two tall super'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [-1, -2], (8, 4),
                     id='two tall sub'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, -1, -2], (4, 4),
                     id='out of order'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, 1, -2], (4, 4),
                     id='sum duplicates'),
    ])] TestFactoryMethods.test_diags(self, diagonals, offsets, shape)",qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,test_diags,"(self, diagonals, offsets, shape)",,,,"pytest.mark.parametrize(['diagonals', 'offsets', 'shape'], [
        pytest.param([2j, 3, 5, 9], None, None, id='main diagonal'),
        pytest.param([1], None, None, id='1x1'),
        pytest.param([[0.2j, 0.3]], None, None, id='main diagonal list'),
        pytest.param([0.2j, 0.3], 2, None, id='superdiagonal'),
        pytest.param([0.2j, 0.3], -2, None, id='subdiagonal'),
        pytest.param([[0.2, 0.3, 0.4], [0.1, 0.9]], [-2, 3], None,
                     id='two diagonals'),
        pytest.param([1, 2, 3], 0, (3, 5), id='main wide'),
        pytest.param([1, 2, 3], 0, (5, 3), id='main tall'),
        pytest.param([[1, 2, 3], [4, 5]], [-1, -2], (4, 8), id='two wide sub'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [1, 2], (4, 8),
                     id='two wide super'),
        pytest.param([[1, 2, 3], [4, 5]], [1, 2], (8, 4), id='two tall super'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [-1, -2], (8, 4),
                     id='two tall sub'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, -1, -2], (4, 4),
                     id='out of order'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, 1, -2], (4, 4),
                     id='sum duplicates'),
    ])",,,,
test_dense.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((1, 1), (0, 0), None, id='minimal'),
        pytest.param((10, 10), (5, 5), 1.j, id='on diagonal'),
        pytest.param((10, 10), (1, 5), 1., id='upper'),
        pytest.param((10, 10), (5, 1), 2., id='lower'),
        pytest.param((10, 1), (5, 0), None, id='column'),
        pytest.param((1, 10), (0, 5), -5.j, id='row'),
        pytest.param((10, 2), (5, 1), 1+2j, id='tall'),
        pytest.param((2, 10), (1, 5), 10, id='wide'),
    ])] TestFactoryMethods.test_one_element(self, shape, position, value)",qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,test_one_element,"(self, shape, position, value)",,,,"pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((1, 1), (0, 0), None, id='minimal'),
        pytest.param((10, 10), (5, 5), 1.j, id='on diagonal'),
        pytest.param((10, 10), (1, 5), 1., id='upper'),
        pytest.param((10, 10), (5, 1), 2., id='lower'),
        pytest.param((10, 1), (5, 0), None, id='column'),
        pytest.param((1, 10), (0, 5), -5.j, id='row'),
        pytest.param((10, 2), (5, 1), 1+2j, id='tall'),
        pytest.param((2, 10), (1, 5), 10, id='wide'),
    ])",,,,
test_dense.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((0, 0), (0, 0), None, id='zero shape'),
        pytest.param((10, -2), (5, 0), 1.j, id='neg shape'),
        pytest.param((10, 10), (10, 5), 1., id='outside'),
        pytest.param((10, 10), (5, -1), 2., id='outside neg'),
    ])] TestFactoryMethods.test_one_element_error(self, shape, position, value)",qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,test_one_element_error,"(self, shape, position, value)",,,,"pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((0, 0), (0, 0), None, id='zero shape'),
        pytest.param((10, -2), (5, 0), 1.j, id='neg shape'),
        pytest.param((10, 10), (10, 5), 1., id='outside'),
        pytest.param((10, 10), (5, -1), 2., id='outside neg'),
    ])",,,,
test_dense.py,python,class,,,Class: TestClassMethods,qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,,,,,,,,,,
test_dense.py,python,class,,,Class: TestFactoryMethods,qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,,,,,,,,,,
test_dense.py,python,function,_valid_numpy,(),Function: _valid_numpy(),qutip,qutip,v5.0.4,,,,,,,,"# Arbitrary valid numpy array.",,,,,,,,,,,
test_dense.py,python,function,test_OrderEfficiencyWarning,(),Function: test_OrderEfficiencyWarning(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_dense.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_dense.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_dense.py,python,local_import,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data,data,qutip.core,qutip.core,,,,,,,,,,,,,,,
test_dense.py,python,local_import,,,Import: dense from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import dense, csr",dense,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_dense.py,python,local_import,,,Import: csr from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import dense, csr",csr,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_dense.py,python,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_dense.py,python,,,,Directory: qutip\tests\core\data\test_dense.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_dia.py,python,class_method,,,"Class method: TestClassMethods.test_init_from_scipy(self, scipy_dia)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_init_from_scipy,"(self, scipy_dia)",,,,,,,,
test_dia.py,python,class_method,,,"Class method: TestClassMethods.test_init_from_tuple(self, scipy_dia)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_init_from_tuple,"(self, scipy_dia)",,,,,,,,
test_dia.py,python,class_method,,,"Class method: [pytest.mark.parametrize('d_type', (
        _dtype_complex + _dtype_float + _dtype_int + _dtype_uint
    ))] TestClassMethods.test_init_from_tuple_allowed_dtypes(self, d_type, o_type)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_init_from_tuple_allowed_dtypes,"(self, d_type, o_type)",,,,"pytest.mark.parametrize('d_type', (
        _dtype_complex + _dtype_float + _dtype_int + _dtype_uint
    ))",,,,
test_dia.py,python,class_method,,,"Class method: [pytest.mark.parametrize('o_type', _dtype_int + _dtype_uint)] TestClassMethods.test_init_from_tuple_allowed_dtypes(self, d_type, o_type)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_init_from_tuple_allowed_dtypes,"(self, d_type, o_type)",,,,"pytest.mark.parametrize('o_type', _dtype_int + _dtype_uint)",,,,
test_dia.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['arg', 'kwargs', 'error'], [
        pytest.param((), {}, ValueError, id=""arg 0 tuple""),
        pytest.param((None,), {}, ValueError, id=""arg 1 tuple""),
        pytest.param((None,)*2, {}, TypeError, id=""arg None tuple""),
        pytest.param((None,)*3, {}, ValueError, id=""arg 3 tuple""),
        pytest.param(_valid_scipy(), {'shape': ()}, ValueError,
                     id=""scipy-shape 0 tuple""),
        pytest.param(_valid_scipy(), {'shape': (1,)}, ValueError,
                     id=""scipy-shape 1 tuple""),
        pytest.param(_valid_scipy(), {'shape': (None, None)}, ValueError,
                     id=""scipy-shape None tuple""),
        pytest.param(_valid_scipy(), {'shape': [2, 2]}, ValueError,
                     id=""scipy-shape list""),
        pytest.param(_valid_scipy(), {'shape': (1, 2, 3)}, ValueError,
                     id=""scipy-shape 3 tuple""),
        pytest.param(_valid_arg(), {'shape': ()}, ValueError,
                     id=""arg-shape 0 tuple""),
        pytest.param(_valid_arg(), {'shape': (1,)}, ValueError,
                     id=""arg-shape 1 tuple""),
        pytest.param(_valid_arg(), {'shape': (None, None)}, ValueError,
                     id=""arg-shape None tuple""),
        pytest.param(_valid_arg(), {'shape': [2, 2]}, TypeError,
                     id=""arg-shape list""),
        pytest.param(_valid_arg(), {'shape': (1, 2, 3)}, ValueError,
                     id=""arg-shape 3 tuple""),
        pytest.param(_valid_arg(), {'shape': (-1, -1)}, ValueError,
                     id=""arg-negative shape""),
    ])] TestClassMethods.test_init_from_wrong_input(self, arg, kwargs, error)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_init_from_wrong_input,"(self, arg, kwargs, error)",,,,"pytest.mark.parametrize(['arg', 'kwargs', 'error'], [
        pytest.param((), {}, ValueError, id=""arg 0 tuple""),
        pytest.param((None,), {}, ValueError, id=""arg 1 tuple""),
        pytest.param((None,)*2, {}, TypeError, id=""arg None tuple""),
        pytest.param((None,)*3, {}, ValueError, id=""arg 3 tuple""),
        pytest.param(_valid_scipy(), {'shape': ()}, ValueError,
                     id=""scipy-shape 0 tuple""),
        pytest.param(_valid_scipy(), {'shape': (1,)}, ValueError,
                     id=""scipy-shape 1 tuple""),
        pytest.param(_valid_scipy(), {'shape': (None, None)}, ValueError,
                     id=""scipy-shape None tuple""),
        pytest.param(_valid_scipy(), {'shape': [2, 2]}, ValueError,
                     id=""scipy-shape list""),
        pytest.param(_valid_scipy(), {'shape': (1, 2, 3)}, ValueError,
                     id=""scipy-shape 3 tuple""),
        pytest.param(_valid_arg(), {'shape': ()}, ValueError,
                     id=""arg-shape 0 tuple""),
        pytest.param(_valid_arg(), {'shape': (1,)}, ValueError,
                     id=""arg-shape 1 tuple""),
        pytest.param(_valid_arg(), {'shape': (None, None)}, ValueError,
                     id=""arg-shape None tuple""),
        pytest.param(_valid_arg(), {'shape': [2, 2]}, TypeError,
                     id=""arg-shape list""),
        pytest.param(_valid_arg(), {'shape': (1, 2, 3)}, ValueError,
                     id=""arg-shape 3 tuple""),
        pytest.param(_valid_arg(), {'shape': (-1, -1)}, ValueError,
                     id=""arg-negative shape""),
    ])",,,,
test_dia.py,python,class_method,,,"Class method: TestClassMethods.test_copy_returns_a_correct_copy(self, data_diag)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_copy_returns_a_correct_copy,"(self, data_diag)",,,,,,,,
test_dia.py,python,class_method,,,"Class method: TestClassMethods.test_as_scipy_returns_a_view(self, data_diag)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_as_scipy_returns_a_view,"(self, data_diag)",,,,,,,,
test_dia.py,python,class_method,,,"Class method: TestClassMethods.test_as_scipy_caches_result(self, data_diag)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_as_scipy_caches_result,"(self, data_diag)",,,,,,,,
test_dia.py,python,class_method,,,"Class method: TestClassMethods.test_as_scipy_of_dia_from_scipy_is_different(self, scipy_dia)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_as_scipy_of_dia_from_scipy_is_different,"(self, scipy_dia)",,,,,,,,
test_dia.py,python,class_method,,,"Class method: TestClassMethods.test_as_scipy_of_copy_is_different(self, data_diag)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_as_scipy_of_copy_is_different,"(self, data_diag)",,,,,,,,
test_dia.py,python,class_method,,,"Class method: TestClassMethods.test_as_scipy_is_correct_result(self, scipy_dia)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_as_scipy_is_correct_result,"(self, scipy_dia)",,,,,,,,
test_dia.py,python,class_method,,,"Class method: TestClassMethods.test_as_scipy_of_uninitialised_is_empty(self, shape)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_as_scipy_of_uninitialised_is_empty,"(self, shape)",,,,,,,,
test_dia.py,python,class_method,,,"Class method: TestClassMethods.test_to_array_is_correct_result(self, data_diag)",qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,test_to_array_is_correct_result,"(self, data_diag)",,,,,,,,
test_dia.py,python,class_method,,,"Class method: TestFactoryMethods.test_empty(self, shape, density)",qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,test_empty,"(self, shape, density)",,,,,,,,
test_dia.py,python,class_method,,,"Class method: TestFactoryMethods.test_zeros(self, shape)",qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,test_zeros,"(self, shape)",,,,,,,,
test_dia.py,python,class_method,,,"Class method: [pytest.mark.parametrize('dimension', [1, 5, 100])] TestFactoryMethods.test_identity(self, dimension, scale)",qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,test_identity,"(self, dimension, scale)",,,,"pytest.mark.parametrize('dimension', [1, 5, 100])",,,,
test_dia.py,python,class_method,,,"Class method: [pytest.mark.parametrize(
        'scale',
        [None, 2, -0.1, 1.5, 1.5+1j],
        ids=['none', 'int', 'negative', 'float', 'complex']
    )] TestFactoryMethods.test_identity(self, dimension, scale)",qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,test_identity,"(self, dimension, scale)",,,,"pytest.mark.parametrize(
        'scale',
        [None, 2, -0.1, 1.5, 1.5+1j],
        ids=['none', 'int', 'negative', 'float', 'complex']
    )",,,,
test_dia.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['diagonals', 'offsets', 'shape'], [
        pytest.param([2j, 3, 5, 9], None, None, id='main diagonal'),
        pytest.param([1], None, None, id='1x1'),
        pytest.param([[0.2j, 0.3]], None, None, id='main diagonal list'),
        pytest.param([0.2j, 0.3], 2, None, id='superdiagonal'),
        pytest.param([0.2j, 0.3], -2, None, id='subdiagonal'),
        pytest.param([[0.2, 0.3, 0.4], [0.1, 0.9]], [-2, 3], None,
                     id='two diagonals'),
        pytest.param([1, 2, 3], 0, (3, 5), id='main wide'),
        pytest.param([1, 2, 3], 0, (5, 3), id='main tall'),
        pytest.param([[1, 2, 3], [4, 5]], [-1, -2], (4, 8), id='two wide sub'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [1, 2], (4, 8),
                     id='two wide super'),
        pytest.param([[1, 2, 3], [4, 5]], [1, 2], (8, 4), id='two tall super'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [-1, -2], (8, 4),
                     id='two tall sub'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, -1, -2], (4, 4),
                     id='out of order'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, 1, -2], (4, 4),
                     id='sum duplicates'),
    ])] TestFactoryMethods.test_diags(self, diagonals, offsets, shape)",qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,test_diags,"(self, diagonals, offsets, shape)",,,,"pytest.mark.parametrize(['diagonals', 'offsets', 'shape'], [
        pytest.param([2j, 3, 5, 9], None, None, id='main diagonal'),
        pytest.param([1], None, None, id='1x1'),
        pytest.param([[0.2j, 0.3]], None, None, id='main diagonal list'),
        pytest.param([0.2j, 0.3], 2, None, id='superdiagonal'),
        pytest.param([0.2j, 0.3], -2, None, id='subdiagonal'),
        pytest.param([[0.2, 0.3, 0.4], [0.1, 0.9]], [-2, 3], None,
                     id='two diagonals'),
        pytest.param([1, 2, 3], 0, (3, 5), id='main wide'),
        pytest.param([1, 2, 3], 0, (5, 3), id='main tall'),
        pytest.param([[1, 2, 3], [4, 5]], [-1, -2], (4, 8), id='two wide sub'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [1, 2], (4, 8),
                     id='two wide super'),
        pytest.param([[1, 2, 3], [4, 5]], [1, 2], (8, 4), id='two tall super'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [-1, -2], (8, 4),
                     id='two tall sub'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, -1, -2], (4, 4),
                     id='out of order'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, 1, -2], (4, 4),
                     id='sum duplicates'),
    ])",,,,
test_dia.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((1, 1), (0, 0), None, id='minimal'),
        pytest.param((10, 10), (5, 5), 1.j, id='on diagonal'),
        pytest.param((10, 10), (1, 5), 1., id='upper'),
        pytest.param((10, 10), (5, 1), 2., id='lower'),
        pytest.param((10, 1), (5, 0), None, id='column'),
        pytest.param((1, 10), (0, 5), -5.j, id='row'),
        pytest.param((10, 2), (5, 1), 1+2j, id='tall'),
        pytest.param((2, 10), (1, 5), 10, id='wide'),
    ])] TestFactoryMethods.test_one_element(self, shape, position, value)",qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,test_one_element,"(self, shape, position, value)",,,,"pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((1, 1), (0, 0), None, id='minimal'),
        pytest.param((10, 10), (5, 5), 1.j, id='on diagonal'),
        pytest.param((10, 10), (1, 5), 1., id='upper'),
        pytest.param((10, 10), (5, 1), 2., id='lower'),
        pytest.param((10, 1), (5, 0), None, id='column'),
        pytest.param((1, 10), (0, 5), -5.j, id='row'),
        pytest.param((10, 2), (5, 1), 1+2j, id='tall'),
        pytest.param((2, 10), (1, 5), 10, id='wide'),
    ])",,,,
test_dia.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((0, 0), (0, 0), None, id='zero shape'),
        pytest.param((10, -2), (5, 0), 1.j, id='neg shape'),
        pytest.param((10, 10), (10, 5), 1., id='outside'),
        pytest.param((10, 10), (5, -1), 2., id='outside neg'),
    ])] TestFactoryMethods.test_one_element_error(self, shape, position, value)",qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,test_one_element_error,"(self, shape, position, value)",,,,"pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((0, 0), (0, 0), None, id='zero shape'),
        pytest.param((10, -2), (5, 0), 1.j, id='neg shape'),
        pytest.param((10, 10), (10, 5), 1., id='outside'),
        pytest.param((10, 10), (5, -1), 2., id='outside neg'),
    ])",,,,
test_dia.py,python,class,,,Class: TestClassMethods,qutip,qutip,v5.0.4,,,,,,,,,TestClassMethods,,,,,,,,,,
test_dia.py,python,class,,,Class: TestFactoryMethods,qutip,qutip,v5.0.4,,,,,,,,,TestFactoryMethods,,,,,,,,,,
test_dia.py,python,function,_valid_scipy,(),Function: _valid_scipy(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_dia.py,python,function,_valid_arg,(),Function: _valid_arg(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_dia.py,python,function,test_tidyup,(data_diag),Function: test_tidyup(data_diag),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_dia.py,python,function,test_autotidyup,(),Function: test_autotidyup(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_dia.py,python,constant,,,Constant: _dtype_complex = ['complex128'],qutip,qutip,v5.0.4,,,,,_dtype_complex = ['complex128'],_dtype_complex,['complex128'],,,,,,,,,,,,
test_dia.py,python,constant,,,Constant: _dtype_float = ['float64'],qutip,qutip,v5.0.4,,,,,_dtype_float = ['float64'],_dtype_float,['float64'],,,,,,,,,,,,
test_dia.py,python,constant,,,"Constant: _dtype_int = ['int32', 'int64']",qutip,qutip,v5.0.4,,,,,"_dtype_int = ['int32', 'int64']",_dtype_int,"['int32', 'int64']",,,,,,,,,,,,
test_dia.py,python,constant,,,Constant: _dtype_uint = ['uint32'],qutip,qutip,v5.0.4,,,,,_dtype_uint = ['uint32'],_dtype_uint,['uint32'],,,,,,,,,,,,
test_dia.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_dia.py,python,import,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse,scipy.sparse,,,,,,,,,,,,,,,,,
test_dia.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_dia.py,python,local_import,,,Import: data from qutip.core,qutip,qutip,v5.0.4,"from qutip.core import data, qeye, CoreOptions",data,qutip.core,qutip.core,,,,,,,,,,,,,,,
test_dia.py,python,local_import,,,Import: qeye from qutip.core,qutip,qutip,v5.0.4,"from qutip.core import data, qeye, CoreOptions",qeye,qutip.core,qutip.core,,,,,,,,,,,,,,,
test_dia.py,python,local_import,,,Import: CoreOptions from qutip.core,qutip,qutip,v5.0.4,"from qutip.core import data, qeye, CoreOptions",CoreOptions,qutip.core,qutip.core,,,,,,,,,,,,,,,
test_dia.py,python,local_import,,,Import: dia from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import dia, Dense, Dia",dia,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_dia.py,python,local_import,,,Import: Dense from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import dia, Dense, Dia",Dense,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_dia.py,python,local_import,,,Import: Dia from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import dia, Dense, Dia",Dia,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_dia.py,python,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_dia.py,python,,,,Directory: qutip\tests\core\data\test_dia.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_dispatch.py,python,class_field,,,"Class field: func.__name__ = ""dummy name""",qutip,qutip,v5.0.4,,,,,,,,,func,,,"__name__ = ""dummy name""",,,,__name__,"""dummy name""",,
test_dispatch.py,python,class_field,,,"Class field: func.__name__ = """"",qutip,qutip,v5.0.4,,,,,,,,,func,,,"__name__ = """"",,,,__name__,"""""",,
test_dispatch.py,python,class_field,,,Class field: [instance] func.count = 0,qutip,qutip,v5.0.4,,,,,,,,,func,__init__,(self),self.count = 0,self.count = 0,,,,,,
test_dispatch.py,python,class_method,,,"Class method: pseudo_dipatched.__init__(self, types, output)",qutip,qutip,v5.0.4,,,,,,,,,pseudo_dipatched,__init__,"(self, types, output)",,,,,,,,
test_dispatch.py,python,class_method,,,"Class method: pseudo_dipatched.__call__(self, *args, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,pseudo_dipatched,__call__,"(self, *args, **kwargs)",,,,,,,,
test_dispatch.py,python,class_method,,,"Class method: func.__call__(self, a, /)",qutip,qutip,v5.0.4,,,,,,,,,func,__call__,"(self, a, /)",,,,,,,,
test_dispatch.py,python,class_method,,,Class method: func.__init__(self),qutip,qutip,v5.0.4,,,,,,,,,func,__init__,(self),,,,,,,,
test_dispatch.py,python,class_method,,,"Class method: func.__call__(self, a=None, b=None, /)",qutip,qutip,v5.0.4,,,,,,,,,func,__call__,"(self, a=None, b=None, /)",,,,,,,,
test_dispatch.py,python,class,,,Class: pseudo_dipatched,qutip,qutip,v5.0.4,,,,,,,,,pseudo_dipatched,,,,,,,,,,
test_dispatch.py,python,class,,,Class: func(),qutip,qutip,v5.0.4,,,,,,,,,func,,,,,(),,,,,
test_dispatch.py,python,class,,,Class: func(),qutip,qutip,v5.0.4,,,,,,,,,func,,,,,(),,,,,
test_dispatch.py,python,function,_test_name,(arg),Function: _test_name(arg),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_dispatch.py,python,function,test_Data_low_priority_one_dispatch,(),Function: test_Data_low_priority_one_dispatch(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_dispatch.py,python,function,test_Data_low_priority_two_dispatch,(),Function: test_Data_low_priority_two_dispatch(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_dispatch.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_dispatch.py,python,import,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,itertools,,,,,,,,,,,,,,,,,
test_dispatch.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_dispatch.py,python,import,,,Import: qutip.core.data,qutip,qutip,v5.0.4,import qutip.core.data as _data,qutip.core.data,,,,,,,,,,,,,,,,,
test_dispatch.py,python,local_import,,,Import: Dispatcher from qutip.core.data.dispatch,qutip,qutip,v5.0.4,"from qutip.core.data.dispatch import Dispatcher, _constructed_specialisation",Dispatcher,qutip.core.data.dispatch,qutip.core.data.dispatch,,,,,,,,,,,,,,,
test_dispatch.py,python,local_import,,,Import: _constructed_specialisation from qutip.core.data.dispatch,qutip,qutip,v5.0.4,"from qutip.core.data.dispatch import Dispatcher, _constructed_specialisation",_constructed_specialisation,qutip.core.data.dispatch,qutip.core.data.dispatch,,,,,,,,,,,,,,,
test_dispatch.py,python,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_dispatch.py,python,,,,Directory: qutip\tests\core\data\test_dispatch.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_expect.py,python,class_field,,,Class field: TestExpect._dim = 100,qutip,qutip,v5.0.4,,,,,,,,,TestExpect,,,_dim = 100,,,,_dim,100,,
test_expect.py,python,class_field,,,"Class field: TestExpect._ket = pytest.param((_dim, 1), id=""ket"")",qutip,qutip,v5.0.4,,,,,,,,,TestExpect,,,"_ket = pytest.param((_dim, 1), id=""ket"")",,,,_ket,"pytest.param((_dim, 1), id=""ket"")",,
test_expect.py,python,class_field,,,"Class field: TestExpect._dm = pytest.param((_dim, _dim), id=""dm"")",qutip,qutip,v5.0.4,,,,,,,,,TestExpect,,,"_dm = pytest.param((_dim, _dim), id=""dm"")",,,,_dm,"pytest.param((_dim, _dim), id=""dm"")",,
test_expect.py,python,class_field,,,"Class field: TestExpect._op = pytest.param((_dim, _dim), id=""op"")",qutip,qutip,v5.0.4,,,,,,,,,TestExpect,,,"_op = pytest.param((_dim, _dim), id=""op"")",,,,_op,"pytest.param((_dim, _dim), id=""op"")",,
test_expect.py,python,class_field,,,"Class field: TestExpect._bra = pytest.param((1, _dim), id=""bra"")",qutip,qutip,v5.0.4,,,,,,,,,TestExpect,,,"_bra = pytest.param((1, _dim), id=""bra"")",,,,_bra,"pytest.param((1, _dim), id=""bra"")",,
test_expect.py,python,class_field,,,"Class field: TestExpect._nonsquare = pytest.param((2, _dim), id=""nonsquare"")",qutip,qutip,v5.0.4,,,,,,,,,TestExpect,,,"_nonsquare = pytest.param((2, _dim), id=""nonsquare"")",,,,_nonsquare,"pytest.param((2, _dim), id=""nonsquare"")",,
test_expect.py,python,class_field,,,"Class field: TestExpect._not_op = [_bra, _ket, _nonsquare]",qutip,qutip,v5.0.4,,,,,,,,,TestExpect,,,"_not_op = [_bra, _ket, _nonsquare]",,,,_not_op,"[_bra, _ket, _nonsquare]",,
test_expect.py,python,class_field,,,"Class field: TestExpect.shapes = [
        (_op, _ket),
        (_op, _dm),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestExpect,,,"shapes = [
        (_op, _ket),
        (_op, _dm),
    ]",,,,shapes,"[
        (_op, _ket),
        (_op, _dm),
    ]",,
test_expect.py,python,class_field,,,"Class field: TestExpect.bad_shapes = list(product(_not_op, [_ket, _dm]))",qutip,qutip,v5.0.4,,,,,,,,,TestExpect,,,"bad_shapes = list(product(_not_op, [_ket, _dm]))",,,,bad_shapes,"list(product(_not_op, [_ket, _dm]))",,
test_expect.py,python,class_field,,,"Class field: TestExpect.specialisations = [
        pytest.param(data.expect_csr, CSR, CSR, complex),
        pytest.param(data.expect_dense, Dense, Dense, complex),
        pytest.param(data.expect_csr_dense, CSR, Dense, complex),
        pytest.param(data.expect_dia, Dia, Dia, complex),
        pytest.param(data.expect_dia_dense, Dia, Dense, complex),
        pytest.param(data.expect_data, Dense, CSR, complex),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestExpect,,,"specialisations = [
        pytest.param(data.expect_csr, CSR, CSR, complex),
        pytest.param(data.expect_dense, Dense, Dense, complex),
        pytest.param(data.expect_csr_dense, CSR, Dense, complex),
        pytest.param(data.expect_dia, Dia, Dia, complex),
        pytest.param(data.expect_dia_dense, Dia, Dense, complex),
        pytest.param(data.expect_data, Dense, CSR, complex),
    ]",,,,specialisations,"[
        pytest.param(data.expect_csr, CSR, CSR, complex),
        pytest.param(data.expect_dense, Dense, Dense, complex),
        pytest.param(data.expect_csr_dense, CSR, Dense, complex),
        pytest.param(data.expect_dia, Dia, Dia, complex),
        pytest.param(data.expect_dia_dense, Dia, Dense, complex),
        pytest.param(data.expect_data, Dense, CSR, complex),
    ]",,
test_expect.py,python,class_field,,,Class field: TestExpectSuper._dim = 100,qutip,qutip,v5.0.4,,,,,,,,,TestExpectSuper,,,_dim = 100,,,,_dim,100,,
test_expect.py,python,class_field,,,"Class field: TestExpectSuper._super_ket = pytest.param((_dim, 1), id=""super_ket"")",qutip,qutip,v5.0.4,,,,,,,,,TestExpectSuper,,,"_super_ket = pytest.param((_dim, 1), id=""super_ket"")",,,,_super_ket,"pytest.param((_dim, 1), id=""super_ket"")",,
test_expect.py,python,class_field,,,"Class field: TestExpectSuper._super_op = pytest.param((_dim, _dim), id=""super_op"")",qutip,qutip,v5.0.4,,,,,,,,,TestExpectSuper,,,"_super_op = pytest.param((_dim, _dim), id=""super_op"")",,,,_super_op,"pytest.param((_dim, _dim), id=""super_op"")",,
test_expect.py,python,class_field,,,"Class field: TestExpectSuper._bra = pytest.param((1, _dim), id=""row_stacked"")",qutip,qutip,v5.0.4,,,,,,,,,TestExpectSuper,,,"_bra = pytest.param((1, _dim), id=""row_stacked"")",,,,_bra,"pytest.param((1, _dim), id=""row_stacked"")",,
test_expect.py,python,class_field,,,"Class field: TestExpectSuper._nonsquare = pytest.param((2, _dim), id=""nonsquare"")",qutip,qutip,v5.0.4,,,,,,,,,TestExpectSuper,,,"_nonsquare = pytest.param((2, _dim), id=""nonsquare"")",,,,_nonsquare,"pytest.param((2, _dim), id=""nonsquare"")",,
test_expect.py,python,class_field,,,"Class field: TestExpectSuper._not_super_ket = [_super_op, _bra, _nonsquare]",qutip,qutip,v5.0.4,,,,,,,,,TestExpectSuper,,,"_not_super_ket = [_super_op, _bra, _nonsquare]",,,,_not_super_ket,"[_super_op, _bra, _nonsquare]",,
test_expect.py,python,class_field,,,"Class field: TestExpectSuper._not_super_op = [_super_ket, _bra, _nonsquare]",qutip,qutip,v5.0.4,,,,,,,,,TestExpectSuper,,,"_not_super_op = [_super_ket, _bra, _nonsquare]",,,,_not_super_op,"[_super_ket, _bra, _nonsquare]",,
test_expect.py,python,class_field,,,"Class field: TestExpectSuper.shapes = [(_super_op, _super_ket), ]",qutip,qutip,v5.0.4,,,,,,,,,TestExpectSuper,,,"shapes = [(_super_op, _super_ket), ]",,,,shapes,"[(_super_op, _super_ket), ]",,
test_expect.py,python,class_field,,,"Class field: TestExpectSuper.bad_shapes = list(product(_not_super_op, [_super_ket]))",qutip,qutip,v5.0.4,,,,,,,,,TestExpectSuper,,,"bad_shapes = list(product(_not_super_op, [_super_ket]))",,,,bad_shapes,"list(product(_not_super_op, [_super_ket]))",,
test_expect.py,python,class_field,,,"Class field: TestExpectSuper.specialisations = [
        pytest.param(data.expect_super_dense, Dense, Dense, complex),
        pytest.param(data.expect_super_csr, CSR, CSR, complex),
        pytest.param(data.expect_super_csr_dense, CSR, Dense, complex),
        pytest.param(data.expect_super_dia, Dia, Dia, complex),
        pytest.param(data.expect_super_dia_dense, Dia, Dense, complex),
        pytest.param(data.expect_super_data, CSR, Dense, complex),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestExpectSuper,,,"specialisations = [
        pytest.param(data.expect_super_dense, Dense, Dense, complex),
        pytest.param(data.expect_super_csr, CSR, CSR, complex),
        pytest.param(data.expect_super_csr_dense, CSR, Dense, complex),
        pytest.param(data.expect_super_dia, Dia, Dia, complex),
        pytest.param(data.expect_super_dia_dense, Dia, Dense, complex),
        pytest.param(data.expect_super_data, CSR, Dense, complex),
    ]",,,,specialisations,"[
        pytest.param(data.expect_super_dense, Dense, Dense, complex),
        pytest.param(data.expect_super_csr, CSR, CSR, complex),
        pytest.param(data.expect_super_csr_dense, CSR, Dense, complex),
        pytest.param(data.expect_super_dia, Dia, Dia, complex),
        pytest.param(data.expect_super_dia_dense, Dia, Dense, complex),
        pytest.param(data.expect_super_data, CSR, Dense, complex),
    ]",,
test_expect.py,python,class_method,,,"Class method: TestExpect.op_numpy(self, op, state)",qutip,qutip,v5.0.4,,,,,,,,,TestExpect,op_numpy,"(self, op, state)",,,,,,,,
test_expect.py,python,class_method,,,"Class method: TestExpectSuper.op_numpy(self, op, state)",qutip,qutip,v5.0.4,,,,,,,,,TestExpectSuper,op_numpy,"(self, op, state)",,,,,,,,
test_expect.py,python,class,,,Class: TestExpect(BinaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestExpect,,,,,(BinaryOpMixin),,,,,
test_expect.py,python,class,,,Class: TestExpectSuper(BinaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestExpectSuper,,,,,(BinaryOpMixin),,,,,
test_expect.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_expect.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_expect.py,python,import,,,Import: data from qutip,qutip,qutip,v5.0.4,from qutip import data,data,qutip,,,,,,,,,,,,,,,,
test_expect.py,python,import,,,Import: product from itertools,qutip,qutip,v5.0.4,from itertools import product,product,itertools,,,,,,,,,,,,,,,,
test_expect.py,python,local_import,,,Import: CSR from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",CSR,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_expect.py,python,local_import,,,Import: Dense from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",Dense,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_expect.py,python,local_import,,,Import: Dia from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",Dia,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_expect.py,python,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_expect.py,python,,,,Directory: qutip\tests\core\data\test_expect.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_linalg.py,python,class_method,,,"Class method: TestSolve.op_numpy(self, A, b)",qutip,qutip,v5.0.4,,,,,,,,,TestSolve,op_numpy,"(self, A, b)",,,,,,,,
test_linalg.py,python,class_method,,,"Class method: TestSolve._gen_op(self, N, dtype)",qutip,qutip,v5.0.4,,,,,,,,,TestSolve,_gen_op,"(self, N, dtype)",,,,,,,,
test_linalg.py,python,class_method,,,"Class method: TestSolve._gen_ket(self, N, dtype)",qutip,qutip,v5.0.4,,,,,,,,,TestSolve,_gen_ket,"(self, N, dtype)",,,,,,,,
test_linalg.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['method', ""opt""], [
        (""spsolve"", {}),
        (""splu"", {""csc"": True}),
        (""gmres"", {""atol"": 1e-8}),
        (""lsqr"", {}),
        (""solve"", {}),
        (""lstsq"", {}),
        pytest.param(""mkl_spsolve"", {}, marks=skip_no_mkl),
    ],
        ids=[
            ""spsolve"", ""splu"", ""gmres"", ""lsqr"", ""solve"", ""lstsq"", ""mkl_spsolve""
        ]
    )] TestSolve.test_mathematically_correct_sparse(self, method, opt, dtype)",qutip,qutip,v5.0.4,,,,,,,,,TestSolve,test_mathematically_correct_sparse,"(self, method, opt, dtype)",,,,"pytest.mark.parametrize(['method', ""opt""], [
        (""spsolve"", {}),
        (""splu"", {""csc"": True}),
        (""gmres"", {""atol"": 1e-8}),
        (""lsqr"", {}),
        (""solve"", {}),
        (""lstsq"", {}),
        pytest.param(""mkl_spsolve"", {}, marks=skip_no_mkl),
    ],
        ids=[
            ""spsolve"", ""splu"", ""gmres"", ""lsqr"", ""solve"", ""lstsq"", ""mkl_spsolve""
        ]
    )",,,,
test_linalg.py,python,class_method,,,"Class method: [pytest.mark.parametrize('dtype', [CSR, Dia])] TestSolve.test_mathematically_correct_sparse(self, method, opt, dtype)",qutip,qutip,v5.0.4,,,,,,,,,TestSolve,test_mathematically_correct_sparse,"(self, method, opt, dtype)",,,,"pytest.mark.parametrize('dtype', [CSR, Dia])",,,,
test_linalg.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['method', ""opt""], [
        (""solve"", {}),
        (""lstsq"", {}),
    ])] TestSolve.test_mathematically_correct_Dense(self, method, opt)",qutip,qutip,v5.0.4,,,,,,,,,TestSolve,test_mathematically_correct_Dense,"(self, method, opt)",,,,"pytest.mark.parametrize(['method', ""opt""], [
        (""solve"", {}),
        (""lstsq"", {}),
    ])",,,,
test_linalg.py,python,class_method,,,Class method: TestSolve.test_singular(self),qutip,qutip,v5.0.4,,,,,,,,,TestSolve,test_singular,(self),,,,,,,,
test_linalg.py,python,class_method,,,Class method: TestSolve.test_incorrect_shape_non_square(self),qutip,qutip,v5.0.4,,,,,,,,,TestSolve,test_incorrect_shape_non_square,(self),,,,,,,,
test_linalg.py,python,class_method,,,Class method: TestSolve.test_incorrect_shape_mismatch(self),qutip,qutip,v5.0.4,,,,,,,,,TestSolve,test_incorrect_shape_mismatch,(self),,,,,,,,
test_linalg.py,python,class_method,,,"Class method: TestSVD.op_numpy(self, A)",qutip,qutip,v5.0.4,,,,,,,,,TestSVD,op_numpy,"(self, A)",,,,,,,,
test_linalg.py,python,class_method,,,"Class method: TestSVD._gen_dm(self, N, rank, dtype)",qutip,qutip,v5.0.4,,,,,,,,,TestSVD,_gen_dm,"(self, N, rank, dtype)",,,,,,,,
test_linalg.py,python,class_method,,,"Class method: TestSVD._gen_non_square(self, N)",qutip,qutip,v5.0.4,,,,,,,,,TestSVD,_gen_non_square,"(self, N)",,,,,,,,
test_linalg.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""shape"", [""square"", ""non-square""])] TestSVD.test_mathematically_correct_svd(self, shape)",qutip,qutip,v5.0.4,,,,,,,,,TestSVD,test_mathematically_correct_svd,"(self, shape)",,,,"pytest.mark.parametrize(""shape"", [""square"", ""non-square""])",,,,
test_linalg.py,python,class_method,,,Class method: TestSVD.test_mathematically_correct_svd_csr(self),qutip,qutip,v5.0.4,,,,,,,,,TestSVD,test_mathematically_correct_svd_csr,(self),,,,,,,,
test_linalg.py,python,class,,,Class: TestSolve(),qutip,qutip,v5.0.4,,,,,,,,,TestSolve,,,,,(),,,,,
test_linalg.py,python,class,,,Class: TestSVD(),qutip,qutip,v5.0.4,,,,,,,,,TestSVD,,,,,(),,,,,
test_linalg.py,python,constant,,,"Constant: skip_no_mkl = pytest.mark.skipif(
    not settings.has_mkl, reason=""mkl not available""
)",qutip,qutip,v5.0.4,,,,,"skip_no_mkl = pytest.mark.skipif(
    not settings.has_mkl, reason=""mkl not available""
)",skip_no_mkl,"pytest.mark.skipif(
    not settings.has_mkl, reason=""mkl not available""
)",,,,,,,,,,,,
test_linalg.py,python,import,,,Import: qutip.settings,qutip,qutip,v5.0.4,import qutip.settings as settings,qutip.settings,,,,,,,,,,,,,,,,,
test_linalg.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_linalg.py,python,import,,,Import: scipy,qutip,qutip,v5.0.4,import scipy,scipy,,,,,,,,,,,,,,,,,
test_linalg.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_linalg.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_linalg.py,python,import,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,warnings,,,,,,,,,,,,,,,,,
test_linalg.py,python,local_import,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,data,qutip.core,qutip.core,,,,,,,,,,,,,,,
test_linalg.py,python,local_import,,,Import: Data from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import Data, Dense, CSR, Dia",Data,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_linalg.py,python,local_import,,,Import: Dense from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import Data, Dense, CSR, Dia",Dense,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_linalg.py,python,local_import,,,Import: CSR from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import Data, Dense, CSR, Dia",CSR,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_linalg.py,python,local_import,,,Import: Dia from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import Data, Dense, CSR, Dia",Dia,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_linalg.py,python,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_linalg.py,python,,,,Directory: qutip\tests\core\data\test_linalg.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mathematics.py,python,class_field,,,Class field: _GenericOpMixin.atol = 1e-10,qutip,qutip,v5.0.4,,,,,,,,,_GenericOpMixin,,,atol = 1e-10,,,,atol,1e-10,,
test_mathematics.py,python,class_field,,,Class field: _GenericOpMixin.rtol = 1e-7,qutip,qutip,v5.0.4,,,,,,,,,_GenericOpMixin,,,rtol = 1e-7,,,,rtol,1e-7,,
test_mathematics.py,python,class_field,,,Class field: _GenericOpMixin.shapes = [],qutip,qutip,v5.0.4,,,,,,,,,_GenericOpMixin,,,shapes = [],,,,shapes,[],,
test_mathematics.py,python,class_field,,,Class field: _GenericOpMixin.bad_shapes = [],qutip,qutip,v5.0.4,,,,,,,,,_GenericOpMixin,,,bad_shapes = [],,,,bad_shapes,[],,
test_mathematics.py,python,class_field,,,Class field: _GenericOpMixin.specialisations = [],qutip,qutip,v5.0.4,,,,,,,,,_GenericOpMixin,,,specialisations = [],,,,specialisations,[],,
test_mathematics.py,python,class_field,,,"Class field: UnaryOpMixin.shapes = [(x,) for x in shapes_unary()]",qutip,qutip,v5.0.4,,,,,,,,,UnaryOpMixin,,,"shapes = [(x,) for x in shapes_unary()]",,,,shapes,"[(x,) for x in shapes_unary()]",,
test_mathematics.py,python,class_field,,,Class field: UnaryOpMixin.bad_shapes = [],qutip,qutip,v5.0.4,,,,,,,,,UnaryOpMixin,,,bad_shapes = [],,,,bad_shapes,[],,
test_mathematics.py,python,class_field,,,"Class field: UnaryScalarOpMixin.shapes = [(x,) for x in shapes_unary()]",qutip,qutip,v5.0.4,,,,,,,,,UnaryScalarOpMixin,,,"shapes = [(x,) for x in shapes_unary()]",,,,shapes,"[(x,) for x in shapes_unary()]",,
test_mathematics.py,python,class_field,,,Class field: TestAdd.shapes = shapes_binary_identical(),qutip,qutip,v5.0.4,,,,,,,,,TestAdd,,,shapes = shapes_binary_identical(),,,,shapes,shapes_binary_identical(),,
test_mathematics.py,python,class_field,,,Class field: TestAdd.bad_shapes = shapes_binary_bad_identical(),qutip,qutip,v5.0.4,,,,,,,,,TestAdd,,,bad_shapes = shapes_binary_bad_identical(),,,,bad_shapes,shapes_binary_bad_identical(),,
test_mathematics.py,python,class_field,,,"Class field: TestAdd.specialisations = [
        pytest.param(data.add_csr, CSR, CSR, CSR),
        pytest.param(data.add_dense, Dense, Dense, Dense),
        pytest.param(data.add_dia, Dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestAdd,,,"specialisations = [
        pytest.param(data.add_csr, CSR, CSR, CSR),
        pytest.param(data.add_dense, Dense, Dense, Dense),
        pytest.param(data.add_dia, Dia, Dia, Dia),
    ]",,,,specialisations,"[
        pytest.param(data.add_csr, CSR, CSR, CSR),
        pytest.param(data.add_dense, Dense, Dense, Dense),
        pytest.param(data.add_dia, Dia, Dia, Dia),
    ]",,
test_mathematics.py,python,class_field,,,"Class field: TestAdjoint.specialisations = [
        pytest.param(data.adjoint_csr, CSR, CSR),
        pytest.param(data.adjoint_dense, Dense, Dense),
        pytest.param(data.adjoint_dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestAdjoint,,,"specialisations = [
        pytest.param(data.adjoint_csr, CSR, CSR),
        pytest.param(data.adjoint_dense, Dense, Dense),
        pytest.param(data.adjoint_dia, Dia, Dia),
    ]",,,,specialisations,"[
        pytest.param(data.adjoint_csr, CSR, CSR),
        pytest.param(data.adjoint_dense, Dense, Dense),
        pytest.param(data.adjoint_dia, Dia, Dia),
    ]",,
test_mathematics.py,python,class_field,,,"Class field: TestConj.specialisations = [
        pytest.param(data.conj_csr, CSR, CSR),
        pytest.param(data.conj_dense, Dense, Dense),
        pytest.param(data.conj_dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestConj,,,"specialisations = [
        pytest.param(data.conj_csr, CSR, CSR),
        pytest.param(data.conj_dense, Dense, Dense),
        pytest.param(data.conj_dia, Dia, Dia),
    ]",,,,specialisations,"[
        pytest.param(data.conj_csr, CSR, CSR),
        pytest.param(data.conj_dense, Dense, Dense),
        pytest.param(data.conj_dia, Dia, Dia),
    ]",,
test_mathematics.py,python,class_field,,,Class field: TestInner._dim = 100,qutip,qutip,v5.0.4,,,,,,,,,TestInner,,,_dim = 100,,,,_dim,100,,
test_mathematics.py,python,class_field,,,"Class field: TestInner._scalar = pytest.param((1, 1), id=""scalar"")",qutip,qutip,v5.0.4,,,,,,,,,TestInner,,,"_scalar = pytest.param((1, 1), id=""scalar"")",,,,_scalar,"pytest.param((1, 1), id=""scalar"")",,
test_mathematics.py,python,class_field,,,"Class field: TestInner._bra = pytest.param((1, _dim), id=""bra"")",qutip,qutip,v5.0.4,,,,,,,,,TestInner,,,"_bra = pytest.param((1, _dim), id=""bra"")",,,,_bra,"pytest.param((1, _dim), id=""bra"")",,
test_mathematics.py,python,class_field,,,"Class field: TestInner._ket = pytest.param((_dim, 1), id=""ket"")",qutip,qutip,v5.0.4,,,,,,,,,TestInner,,,"_ket = pytest.param((_dim, 1), id=""ket"")",,,,_ket,"pytest.param((_dim, 1), id=""ket"")",,
test_mathematics.py,python,class_field,,,"Class field: TestInner._op = pytest.param((_dim, _dim), id=""square"")",qutip,qutip,v5.0.4,,,,,,,,,TestInner,,,"_op = pytest.param((_dim, _dim), id=""square"")",,,,_op,"pytest.param((_dim, _dim), id=""square"")",,
test_mathematics.py,python,class_field,,,"Class field: TestInner.shapes = [
        (_bra, _ket),
        (_ket, _ket),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestInner,,,"shapes = [
        (_bra, _ket),
        (_ket, _ket),
    ]",,,,shapes,"[
        (_bra, _ket),
        (_ket, _ket),
    ]",,
test_mathematics.py,python,class_field,,,"Class field: TestInner.bad_shapes = [
        (_bra, _bra),
        (_ket, _bra),
        (_op, _ket),
        (_op, _bra),
        (_bra, _op),
        (_ket, _op),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestInner,,,"bad_shapes = [
        (_bra, _bra),
        (_ket, _bra),
        (_op, _ket),
        (_op, _bra),
        (_bra, _op),
        (_ket, _op),
    ]",,,,bad_shapes,"[
        (_bra, _bra),
        (_ket, _bra),
        (_op, _ket),
        (_op, _bra),
        (_bra, _op),
        (_ket, _op),
    ]",,
test_mathematics.py,python,class_field,,,"Class field: TestInner.specialisations = [
        pytest.param(data.inner_csr, CSR, CSR, complex),
        pytest.param(data.inner_dia, Dia, Dia, complex),
        pytest.param(data.inner_dense, Dense, Dense, complex),
        pytest.param(data.inner_data, Dense, Dense, complex),
        pytest.param(data.inner_data, CSR, CSR, complex),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestInner,,,"specialisations = [
        pytest.param(data.inner_csr, CSR, CSR, complex),
        pytest.param(data.inner_dia, Dia, Dia, complex),
        pytest.param(data.inner_dense, Dense, Dense, complex),
        pytest.param(data.inner_data, Dense, Dense, complex),
        pytest.param(data.inner_data, CSR, CSR, complex),
    ]",,,,specialisations,"[
        pytest.param(data.inner_csr, CSR, CSR, complex),
        pytest.param(data.inner_dia, Dia, Dia, complex),
        pytest.param(data.inner_dense, Dense, Dense, complex),
        pytest.param(data.inner_data, Dense, Dense, complex),
        pytest.param(data.inner_data, CSR, CSR, complex),
    ]",,
test_mathematics.py,python,class_field,,,Class field: TestInnerOp._dim = 100,qutip,qutip,v5.0.4,,,,,,,,,TestInnerOp,,,_dim = 100,,,,_dim,100,,
test_mathematics.py,python,class_field,,,"Class field: TestInnerOp._scalar = pytest.param((1, 1), id=""scalar"")",qutip,qutip,v5.0.4,,,,,,,,,TestInnerOp,,,"_scalar = pytest.param((1, 1), id=""scalar"")",,,,_scalar,"pytest.param((1, 1), id=""scalar"")",,
test_mathematics.py,python,class_field,,,"Class field: TestInnerOp._bra = pytest.param((1, _dim), id=""bra"")",qutip,qutip,v5.0.4,,,,,,,,,TestInnerOp,,,"_bra = pytest.param((1, _dim), id=""bra"")",,,,_bra,"pytest.param((1, _dim), id=""bra"")",,
test_mathematics.py,python,class_field,,,"Class field: TestInnerOp._ket = pytest.param((_dim, 1), id=""ket"")",qutip,qutip,v5.0.4,,,,,,,,,TestInnerOp,,,"_ket = pytest.param((_dim, 1), id=""ket"")",,,,_ket,"pytest.param((_dim, 1), id=""ket"")",,
test_mathematics.py,python,class_field,,,"Class field: TestInnerOp._op = pytest.param((_dim, _dim), id=""square"")",qutip,qutip,v5.0.4,,,,,,,,,TestInnerOp,,,"_op = pytest.param((_dim, _dim), id=""square"")",,,,_op,"pytest.param((_dim, _dim), id=""square"")",,
test_mathematics.py,python,class_field,,,"Class field: TestInnerOp.shapes = [
        (_bra, _op, _ket),
        (_ket, _op, _ket),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestInnerOp,,,"shapes = [
        (_bra, _op, _ket),
        (_ket, _op, _ket),
    ]",,,,shapes,"[
        (_bra, _op, _ket),
        (_ket, _op, _ket),
    ]",,
test_mathematics.py,python,class_field,,,"Class field: TestInnerOp.bad_shapes = [
        (_bra, _op, _bra),
        (_ket, _op, _bra),
        (_op, _op, _ket),
        (_op, _op, _bra),
        (_bra, _op, _op),
        (_ket, _op, _op),
        (_bra, _bra, _ket),
        (_ket, _bra, _ket),
        (_bra, _ket, _ket),
        (_ket, _ket, _ket),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestInnerOp,,,"bad_shapes = [
        (_bra, _op, _bra),
        (_ket, _op, _bra),
        (_op, _op, _ket),
        (_op, _op, _bra),
        (_bra, _op, _op),
        (_ket, _op, _op),
        (_bra, _bra, _ket),
        (_ket, _bra, _ket),
        (_bra, _ket, _ket),
        (_ket, _ket, _ket),
    ]",,,,bad_shapes,"[
        (_bra, _op, _bra),
        (_ket, _op, _bra),
        (_op, _op, _ket),
        (_op, _op, _bra),
        (_bra, _op, _op),
        (_ket, _op, _op),
        (_bra, _bra, _ket),
        (_ket, _bra, _ket),
        (_bra, _ket, _ket),
        (_ket, _ket, _ket),
    ]",,
test_mathematics.py,python,class_field,,,"Class field: TestInnerOp.specialisations = [
        pytest.param(data.inner_op_csr, CSR, CSR, CSR, complex),
        pytest.param(data.inner_op_dia, Dia, Dia, Dia, complex),
        pytest.param(data.inner_op_dense, Dense, Dense, Dense, complex),
        pytest.param(data.inner_op_data, Dense, CSR, Dense, complex),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestInnerOp,,,"specialisations = [
        pytest.param(data.inner_op_csr, CSR, CSR, CSR, complex),
        pytest.param(data.inner_op_dia, Dia, Dia, Dia, complex),
        pytest.param(data.inner_op_dense, Dense, Dense, Dense, complex),
        pytest.param(data.inner_op_data, Dense, CSR, Dense, complex),
    ]",,,,specialisations,"[
        pytest.param(data.inner_op_csr, CSR, CSR, CSR, complex),
        pytest.param(data.inner_op_dia, Dia, Dia, Dia, complex),
        pytest.param(data.inner_op_dense, Dense, Dense, Dense, complex),
        pytest.param(data.inner_op_data, Dense, CSR, Dense, complex),
    ]",,
test_mathematics.py,python,class_field,,,Class field: TestKron.shapes = shapes_binary_unrestricted(dim=5),qutip,qutip,v5.0.4,,,,,,,,,TestKron,,,shapes = shapes_binary_unrestricted(dim=5),,,,shapes,shapes_binary_unrestricted(dim=5),,
test_mathematics.py,python,class_field,,,Class field: TestKron.bad_shapes = shapes_binary_bad_unrestricted(dim=5),qutip,qutip,v5.0.4,,,,,,,,,TestKron,,,bad_shapes = shapes_binary_bad_unrestricted(dim=5),,,,bad_shapes,shapes_binary_bad_unrestricted(dim=5),,
test_mathematics.py,python,class_field,,,"Class field: TestKron.specialisations = [
        pytest.param(data.kron_csr, CSR, CSR, CSR),
        pytest.param(data.kron_dense, Dense, Dense, Dense),
        pytest.param(data.kron_dia, Dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestKron,,,"specialisations = [
        pytest.param(data.kron_csr, CSR, CSR, CSR),
        pytest.param(data.kron_dense, Dense, Dense, Dense),
        pytest.param(data.kron_dia, Dia, Dia, Dia),
    ]",,,,specialisations,"[
        pytest.param(data.kron_csr, CSR, CSR, CSR),
        pytest.param(data.kron_dense, Dense, Dense, Dense),
        pytest.param(data.kron_dia, Dia, Dia, Dia),
    ]",,
test_mathematics.py,python,class_field,,,Class field: TestKronT.shapes = shapes_binary_unrestricted(dim=5),qutip,qutip,v5.0.4,,,,,,,,,TestKronT,,,shapes = shapes_binary_unrestricted(dim=5),,,,shapes,shapes_binary_unrestricted(dim=5),,
test_mathematics.py,python,class_field,,,Class field: TestKronT.bad_shapes = shapes_binary_bad_unrestricted(dim=5),qutip,qutip,v5.0.4,,,,,,,,,TestKronT,,,bad_shapes = shapes_binary_bad_unrestricted(dim=5),,,,bad_shapes,shapes_binary_bad_unrestricted(dim=5),,
test_mathematics.py,python,class_field,,,"Class field: TestKronT.specialisations = [
        pytest.param(data.kron_transpose_data, CSR, CSR, CSR),
        pytest.param(data.kron_transpose_dense, Dense, Dense, Dense),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestKronT,,,"specialisations = [
        pytest.param(data.kron_transpose_data, CSR, CSR, CSR),
        pytest.param(data.kron_transpose_dense, Dense, Dense, Dense),
    ]",,,,specialisations,"[
        pytest.param(data.kron_transpose_data, CSR, CSR, CSR),
        pytest.param(data.kron_transpose_dense, Dense, Dense, Dense),
    ]",,
test_mathematics.py,python,class_field,,,Class field: TestMatmul.shapes = shapes_binary_matmul(),qutip,qutip,v5.0.4,,,,,,,,,TestMatmul,,,shapes = shapes_binary_matmul(),,,,shapes,shapes_binary_matmul(),,
test_mathematics.py,python,class_field,,,Class field: TestMatmul.bad_shapes = shapes_binary_bad_matmul(),qutip,qutip,v5.0.4,,,,,,,,,TestMatmul,,,bad_shapes = shapes_binary_bad_matmul(),,,,bad_shapes,shapes_binary_bad_matmul(),,
test_mathematics.py,python,class_field,,,"Class field: TestMatmul.specialisations = [
        pytest.param(data.matmul_csr, CSR, CSR, CSR),
        pytest.param(data.matmul_csr_dense_dense, CSR, Dense, Dense),
        pytest.param(data.matmul_dense, Dense, Dense, Dense),
        pytest.param(data.matmul_dia, Dia, Dia, Dia),
        pytest.param(data.matmul_dia_dense_dense, Dia, Dense, Dense),
        pytest.param(data.matmul_dense_dia_dense, Dense, Dia, Dense),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestMatmul,,,"specialisations = [
        pytest.param(data.matmul_csr, CSR, CSR, CSR),
        pytest.param(data.matmul_csr_dense_dense, CSR, Dense, Dense),
        pytest.param(data.matmul_dense, Dense, Dense, Dense),
        pytest.param(data.matmul_dia, Dia, Dia, Dia),
        pytest.param(data.matmul_dia_dense_dense, Dia, Dense, Dense),
        pytest.param(data.matmul_dense_dia_dense, Dense, Dia, Dense),
    ]",,,,specialisations,"[
        pytest.param(data.matmul_csr, CSR, CSR, CSR),
        pytest.param(data.matmul_csr_dense_dense, CSR, Dense, Dense),
        pytest.param(data.matmul_dense, Dense, Dense, Dense),
        pytest.param(data.matmul_dia, Dia, Dia, Dia),
        pytest.param(data.matmul_dia_dense_dense, Dia, Dense, Dense),
        pytest.param(data.matmul_dense_dia_dense, Dense, Dia, Dense),
    ]",,
test_mathematics.py,python,class_field,,,Class field: TestMultiply.shapes = shapes_binary_identical(),qutip,qutip,v5.0.4,,,,,,,,,TestMultiply,,,shapes = shapes_binary_identical(),,,,shapes,shapes_binary_identical(),,
test_mathematics.py,python,class_field,,,Class field: TestMultiply.bad_shapes = shapes_binary_bad_identical(),qutip,qutip,v5.0.4,,,,,,,,,TestMultiply,,,bad_shapes = shapes_binary_bad_identical(),,,,bad_shapes,shapes_binary_bad_identical(),,
test_mathematics.py,python,class_field,,,"Class field: TestMultiply.specialisations = [
        pytest.param(data.multiply_csr, CSR, CSR, CSR),
        pytest.param(data.multiply_dense, Dense, Dense, Dense),
        pytest.param(data.multiply_dia, Dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestMultiply,,,"specialisations = [
        pytest.param(data.multiply_csr, CSR, CSR, CSR),
        pytest.param(data.multiply_dense, Dense, Dense, Dense),
        pytest.param(data.multiply_dia, Dia, Dia, Dia),
    ]",,,,specialisations,"[
        pytest.param(data.multiply_csr, CSR, CSR, CSR),
        pytest.param(data.multiply_dense, Dense, Dense, Dense),
        pytest.param(data.multiply_dia, Dia, Dia, Dia),
    ]",,
test_mathematics.py,python,class_field,,,"Class field: TestMul.specialisations = [
        pytest.param(data.mul_csr, CSR, CSR),
        pytest.param(data.mul_dense, Dense, Dense),
        pytest.param(data.mul_dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestMul,,,"specialisations = [
        pytest.param(data.mul_csr, CSR, CSR),
        pytest.param(data.mul_dense, Dense, Dense),
        pytest.param(data.mul_dia, Dia, Dia),
    ]",,,,specialisations,"[
        pytest.param(data.mul_csr, CSR, CSR),
        pytest.param(data.mul_dense, Dense, Dense),
        pytest.param(data.mul_dia, Dia, Dia),
    ]",,
test_mathematics.py,python,class_field,,,"Class field: TestNeg.specialisations = [
        pytest.param(data.neg_csr, CSR, CSR),
        pytest.param(data.neg_dense, Dense, Dense),
        pytest.param(data.neg_dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestNeg,,,"specialisations = [
        pytest.param(data.neg_csr, CSR, CSR),
        pytest.param(data.neg_dense, Dense, Dense),
        pytest.param(data.neg_dia, Dia, Dia),
    ]",,,,specialisations,"[
        pytest.param(data.neg_csr, CSR, CSR),
        pytest.param(data.neg_dense, Dense, Dense),
        pytest.param(data.neg_dia, Dia, Dia),
    ]",,
test_mathematics.py,python,class_field,,,Class field: TestSub.shapes = shapes_binary_identical(),qutip,qutip,v5.0.4,,,,,,,,,TestSub,,,shapes = shapes_binary_identical(),,,,shapes,shapes_binary_identical(),,
test_mathematics.py,python,class_field,,,Class field: TestSub.bad_shapes = shapes_binary_bad_identical(),qutip,qutip,v5.0.4,,,,,,,,,TestSub,,,bad_shapes = shapes_binary_bad_identical(),,,,bad_shapes,shapes_binary_bad_identical(),,
test_mathematics.py,python,class_field,,,"Class field: TestSub.specialisations = [
        pytest.param(data.sub_csr, CSR, CSR, CSR),
        pytest.param(data.sub_dense, Dense, Dense, Dense),
        pytest.param(data.sub_dia, Dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestSub,,,"specialisations = [
        pytest.param(data.sub_csr, CSR, CSR, CSR),
        pytest.param(data.sub_dense, Dense, Dense, Dense),
        pytest.param(data.sub_dia, Dia, Dia, Dia),
    ]",,,,specialisations,"[
        pytest.param(data.sub_csr, CSR, CSR, CSR),
        pytest.param(data.sub_dense, Dense, Dense, Dense),
        pytest.param(data.sub_dia, Dia, Dia, Dia),
    ]",,
test_mathematics.py,python,class_field,,,Class field: TestTrace.shapes = shapes_square(),qutip,qutip,v5.0.4,,,,,,,,,TestTrace,,,shapes = shapes_square(),,,,shapes,shapes_square(),,
test_mathematics.py,python,class_field,,,Class field: TestTrace.bad_shapes = shapes_not_square(),qutip,qutip,v5.0.4,,,,,,,,,TestTrace,,,bad_shapes = shapes_not_square(),,,,bad_shapes,shapes_not_square(),,
test_mathematics.py,python,class_field,,,"Class field: TestTrace.specialisations = [
        pytest.param(data.trace_csr, CSR, complex),
        pytest.param(data.trace_dense, Dense, complex),
        pytest.param(data.trace_dia, Dia, complex),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestTrace,,,"specialisations = [
        pytest.param(data.trace_csr, CSR, complex),
        pytest.param(data.trace_dense, Dense, complex),
        pytest.param(data.trace_dia, Dia, complex),
    ]",,,,specialisations,"[
        pytest.param(data.trace_csr, CSR, complex),
        pytest.param(data.trace_dense, Dense, complex),
        pytest.param(data.trace_dia, Dia, complex),
    ]",,
test_mathematics.py,python,class_field,,,"Class field: TestTrace_oper_ket.shapes = [
        (pytest.param((100, 1), id=""oper-ket""),),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestTrace_oper_ket,,,"shapes = [
        (pytest.param((100, 1), id=""oper-ket""),),
    ]",,,,shapes,"[
        (pytest.param((100, 1), id=""oper-ket""),),
    ]",,
test_mathematics.py,python,class_field,,,"Class field: TestTrace_oper_ket.bad_shapes = [
        (pytest.param((1, 100), id=""bra""),),
        (pytest.param((99, 1), id=""ket""),),
        (pytest.param((99, 99), id=""ket""),),
        (pytest.param((2, 99), id=""nonsquare""),),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestTrace_oper_ket,,,"bad_shapes = [
        (pytest.param((1, 100), id=""bra""),),
        (pytest.param((99, 1), id=""ket""),),
        (pytest.param((99, 99), id=""ket""),),
        (pytest.param((2, 99), id=""nonsquare""),),
    ]",,,,bad_shapes,"[
        (pytest.param((1, 100), id=""bra""),),
        (pytest.param((99, 1), id=""ket""),),
        (pytest.param((99, 99), id=""ket""),),
        (pytest.param((2, 99), id=""nonsquare""),),
    ]",,
test_mathematics.py,python,class_field,,,"Class field: TestTrace_oper_ket.specialisations = [
        pytest.param(data.trace_oper_ket_csr, CSR, complex),
        pytest.param(data.trace_oper_ket_dense, Dense, complex),
        pytest.param(data.trace_oper_ket_dia, Dia, complex),
        pytest.param(data.trace_oper_ket_data, CSR, complex),
        pytest.param(data.trace_oper_ket_data, Dense, complex),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestTrace_oper_ket,,,"specialisations = [
        pytest.param(data.trace_oper_ket_csr, CSR, complex),
        pytest.param(data.trace_oper_ket_dense, Dense, complex),
        pytest.param(data.trace_oper_ket_dia, Dia, complex),
        pytest.param(data.trace_oper_ket_data, CSR, complex),
        pytest.param(data.trace_oper_ket_data, Dense, complex),
    ]",,,,specialisations,"[
        pytest.param(data.trace_oper_ket_csr, CSR, complex),
        pytest.param(data.trace_oper_ket_dense, Dense, complex),
        pytest.param(data.trace_oper_ket_dia, Dia, complex),
        pytest.param(data.trace_oper_ket_data, CSR, complex),
        pytest.param(data.trace_oper_ket_data, Dense, complex),
    ]",,
test_mathematics.py,python,class_field,,,Class field: TestPow.shapes = shapes_square(),qutip,qutip,v5.0.4,,,,,,,,,TestPow,,,shapes = shapes_square(),,,,shapes,shapes_square(),,
test_mathematics.py,python,class_field,,,Class field: TestPow.bad_shapes = shapes_not_square(),qutip,qutip,v5.0.4,,,,,,,,,TestPow,,,bad_shapes = shapes_not_square(),,,,bad_shapes,shapes_not_square(),,
test_mathematics.py,python,class_field,,,"Class field: TestPow.specialisations = [
        pytest.param(data.pow_csr, CSR, CSR),
        pytest.param(data.pow_dense, Dense, Dense),
        pytest.param(data.pow_dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestPow,,,"specialisations = [
        pytest.param(data.pow_csr, CSR, CSR),
        pytest.param(data.pow_dense, Dense, Dense),
        pytest.param(data.pow_dia, Dia, Dia),
    ]",,,,specialisations,"[
        pytest.param(data.pow_csr, CSR, CSR),
        pytest.param(data.pow_dense, Dense, Dense),
        pytest.param(data.pow_dia, Dia, Dia),
    ]",,
test_mathematics.py,python,class_field,,,Class field: TestExpm.shapes = shapes_square(),qutip,qutip,v5.0.4,,,,,,,,,TestExpm,,,shapes = shapes_square(),,,,shapes,shapes_square(),,
test_mathematics.py,python,class_field,,,Class field: TestExpm.bad_shapes = shapes_not_square(),qutip,qutip,v5.0.4,,,,,,,,,TestExpm,,,bad_shapes = shapes_not_square(),,,,bad_shapes,shapes_not_square(),,
test_mathematics.py,python,class_field,,,"Class field: TestExpm.specialisations = [
        pytest.param(data.expm_csr, CSR, CSR),
        pytest.param(data.expm_csr_dense, CSR, Dense),
        pytest.param(data.expm_dense, Dense, Dense),
        pytest.param(data.expm_dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestExpm,,,"specialisations = [
        pytest.param(data.expm_csr, CSR, CSR),
        pytest.param(data.expm_csr_dense, CSR, Dense),
        pytest.param(data.expm_dense, Dense, Dense),
        pytest.param(data.expm_dia, Dia, Dia),
    ]",,,,specialisations,"[
        pytest.param(data.expm_csr, CSR, CSR),
        pytest.param(data.expm_csr_dense, CSR, Dense),
        pytest.param(data.expm_dense, Dense, Dense),
        pytest.param(data.expm_dia, Dia, Dia),
    ]",,
test_mathematics.py,python,class_field,,,Class field: TestLogm.shapes = shapes_square(),qutip,qutip,v5.0.4,,,,,,,,,TestLogm,,,shapes = shapes_square(),,,,shapes,shapes_square(),,
test_mathematics.py,python,class_field,,,Class field: TestLogm.bad_shapes = shapes_not_square(),qutip,qutip,v5.0.4,,,,,,,,,TestLogm,,,bad_shapes = shapes_not_square(),,,,bad_shapes,shapes_not_square(),,
test_mathematics.py,python,class_field,,,"Class field: TestLogm.specialisations = [
        pytest.param(data.logm_dense, Dense, Dense),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestLogm,,,"specialisations = [
        pytest.param(data.logm_dense, Dense, Dense),
    ]",,,,specialisations,"[
        pytest.param(data.logm_dense, Dense, Dense),
    ]",,
test_mathematics.py,python,class_field,,,"Class field: TestTranspose.specialisations = [
        pytest.param(data.transpose_csr, CSR, CSR),
        pytest.param(data.transpose_dense, Dense, Dense),
        pytest.param(data.transpose_dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestTranspose,,,"specialisations = [
        pytest.param(data.transpose_csr, CSR, CSR),
        pytest.param(data.transpose_dense, Dense, Dense),
        pytest.param(data.transpose_dia, Dia, Dia),
    ]",,,,specialisations,"[
        pytest.param(data.transpose_csr, CSR, CSR),
        pytest.param(data.transpose_dense, Dense, Dense),
        pytest.param(data.transpose_dia, Dia, Dia),
    ]",,
test_mathematics.py,python,class_field,,,"Class field: TestProject.shapes = [
        (pytest.param((1, 1), id=""scalar""),),
        (pytest.param((1, 100), id=""bra""),),
        (pytest.param((100, 1), id=""ket""),),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestProject,,,"shapes = [
        (pytest.param((1, 1), id=""scalar""),),
        (pytest.param((1, 100), id=""bra""),),
        (pytest.param((100, 1), id=""ket""),),
    ]",,,,shapes,"[
        (pytest.param((1, 1), id=""scalar""),),
        (pytest.param((1, 100), id=""bra""),),
        (pytest.param((100, 1), id=""ket""),),
    ]",,
test_mathematics.py,python,class_field,,,"Class field: TestProject.bad_shapes = [
        (pytest.param((10, 10), id=""square""),),
        (pytest.param((2, 10), id=""nonsquare""),),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestProject,,,"bad_shapes = [
        (pytest.param((10, 10), id=""square""),),
        (pytest.param((2, 10), id=""nonsquare""),),
    ]",,,,bad_shapes,"[
        (pytest.param((10, 10), id=""square""),),
        (pytest.param((2, 10), id=""nonsquare""),),
    ]",,
test_mathematics.py,python,class_field,,,"Class field: TestProject.specialisations = [
        pytest.param(data.project_csr, CSR, CSR),
        pytest.param(data.project_dia, Dia, Dia),
        pytest.param(data.project_dense, Dense, Dense),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestProject,,,"specialisations = [
        pytest.param(data.project_csr, CSR, CSR),
        pytest.param(data.project_dia, Dia, Dia),
        pytest.param(data.project_dense, Dense, Dense),
    ]",,,,specialisations,"[
        pytest.param(data.project_csr, CSR, CSR),
        pytest.param(data.project_dia, Dia, Dia),
        pytest.param(data.project_dense, Dense, Dense),
    ]",,
test_mathematics.py,python,class_field,,,"Class field: TestInv.shapes = [
        (pytest.param((1, 1), id=""scalar""),),
        (pytest.param((10, 10), id=""square""),),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestInv,,,"shapes = [
        (pytest.param((1, 1), id=""scalar""),),
        (pytest.param((10, 10), id=""square""),),
    ]",,,,shapes,"[
        (pytest.param((1, 1), id=""scalar""),),
        (pytest.param((10, 10), id=""square""),),
    ]",,
test_mathematics.py,python,class_field,,,"Class field: TestInv.bad_shapes = [
        (pytest.param((2, 10), id=""nonsquare""),),
        (pytest.param((1, 100), id=""bra""),),
        (pytest.param((100, 1), id=""ket""),),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestInv,,,"bad_shapes = [
        (pytest.param((2, 10), id=""nonsquare""),),
        (pytest.param((1, 100), id=""bra""),),
        (pytest.param((100, 1), id=""ket""),),
    ]",,,,bad_shapes,"[
        (pytest.param((2, 10), id=""nonsquare""),),
        (pytest.param((1, 100), id=""bra""),),
        (pytest.param((100, 1), id=""ket""),),
    ]",,
test_mathematics.py,python,class_field,,,"Class field: TestInv.specialisations = [
        pytest.param(_inv_csr, CSR, CSR),
        pytest.param(_inv_dense, Dense, Dense),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestInv,,,"specialisations = [
        pytest.param(_inv_csr, CSR, CSR),
        pytest.param(_inv_dense, Dense, Dense),
    ]",,,,specialisations,"[
        pytest.param(_inv_csr, CSR, CSR),
        pytest.param(_inv_dense, Dense, Dense),
    ]",,
test_mathematics.py,python,class_field,,,"Class field: TestZeros_like.specialisations = [
        pytest.param(data.zeros_like_data, CSR, CSR),
        pytest.param(data.zeros_like_dense, Dense, Dense),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestZeros_like,,,"specialisations = [
        pytest.param(data.zeros_like_data, CSR, CSR),
        pytest.param(data.zeros_like_dense, Dense, Dense),
    ]",,,,specialisations,"[
        pytest.param(data.zeros_like_data, CSR, CSR),
        pytest.param(data.zeros_like_dense, Dense, Dense),
    ]",,
test_mathematics.py,python,class_field,,,Class field: TestIdentity_like.shapes = shapes_square(),qutip,qutip,v5.0.4,,,,,,,,,TestIdentity_like,,,shapes = shapes_square(),,,,shapes,shapes_square(),,
test_mathematics.py,python,class_field,,,Class field: TestIdentity_like.bad_shapes = shapes_not_square(),qutip,qutip,v5.0.4,,,,,,,,,TestIdentity_like,,,bad_shapes = shapes_not_square(),,,,bad_shapes,shapes_not_square(),,
test_mathematics.py,python,class_field,,,"Class field: TestIdentity_like.specialisations = [
        pytest.param(data.identity_like_data, CSR, CSR),
        pytest.param(data.identity_like_dense, Dense, Dense),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestIdentity_like,,,"specialisations = [
        pytest.param(data.identity_like_data, CSR, CSR),
        pytest.param(data.identity_like_dense, Dense, Dense),
    ]",,,,specialisations,"[
        pytest.param(data.identity_like_data, CSR, CSR),
        pytest.param(data.identity_like_dense, Dense, Dense),
    ]",,
test_mathematics.py,python,class_method,,,"Class method: _GenericOpMixin.op_numpy(self, *args)",qutip,qutip,v5.0.4,,,,,,,,,_GenericOpMixin,op_numpy,"(self, *args)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: _GenericOpMixin.generate_mathematically_correct(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,,,_GenericOpMixin,generate_mathematically_correct,"(self, metafunc)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: _GenericOpMixin.generate_incorrect_shape_raises(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,,,_GenericOpMixin,generate_incorrect_shape_raises,"(self, metafunc)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: _GenericOpMixin.pytest_generate_tests(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,,,_GenericOpMixin,pytest_generate_tests,"(self, metafunc)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: UnaryOpMixin.test_mathematically_correct(self, op, data_m, out_type)",qutip,qutip,v5.0.4,,,,,,,,,UnaryOpMixin,test_mathematically_correct,"(self, op, data_m, out_type)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: UnaryOpMixin.test_incorrect_shape_raises(self, op, data_m)",qutip,qutip,v5.0.4,,,,,,,,,UnaryOpMixin,test_incorrect_shape_raises,"(self, op, data_m)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: [pytest.mark.parametrize('scalar', [
        pytest.param(0, id='zero'),
        pytest.param(4.5, id='real'),
        pytest.param(3j, id='complex'),
    ])] UnaryScalarOpMixin.test_mathematically_correct(self, op, data_m, scalar, out_type)",qutip,qutip,v5.0.4,,,,,,,,,UnaryScalarOpMixin,test_mathematically_correct,"(self, op, data_m, scalar, out_type)",,,,"pytest.mark.parametrize('scalar', [
        pytest.param(0, id='zero'),
        pytest.param(4.5, id='real'),
        pytest.param(3j, id='complex'),
    ])",,,,
test_mathematics.py,python,class_method,,,"Class method: BinaryOpMixin.test_mathematically_correct(self, op, data_l, data_r, out_type)",qutip,qutip,v5.0.4,,,,,,,,,BinaryOpMixin,test_mathematically_correct,"(self, op, data_l, data_r, out_type)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: BinaryOpMixin.test_incorrect_shape_raises(self, op, data_l, data_r)",qutip,qutip,v5.0.4,,,,,,,,,BinaryOpMixin,test_incorrect_shape_raises,"(self, op, data_l, data_r)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TernaryOpMixin.test_mathematically_correct(self, op,
                                    data_l, data_m, data_r,
                                    out_type)",qutip,qutip,v5.0.4,,,,,,,,,TernaryOpMixin,test_mathematically_correct,"(self, op,
                                    data_l, data_m, data_r,
                                    out_type)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TernaryOpMixin.test_incorrect_shape_raises(self, op, data_l, data_m, data_r)",qutip,qutip,v5.0.4,,,,,,,,,TernaryOpMixin,test_incorrect_shape_raises,"(self, op, data_l, data_m, data_r)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestAdd.op_numpy(self, left, right, scale)",qutip,qutip,v5.0.4,,,,,,,,,TestAdd,op_numpy,"(self, left, right, scale)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: [pytest.mark.parametrize('scale', [None, 0.2, 0.5j],
                             ids=['unscaled', 'scale[real]', 'scale[complex]'])] TestAdd.test_mathematically_correct(self, op, data_l, data_r, out_type, scale)",qutip,qutip,v5.0.4,,,,,,,,,TestAdd,test_mathematically_correct,"(self, op, data_l, data_r, out_type, scale)",,,,"pytest.mark.parametrize('scale', [None, 0.2, 0.5j],
                             ids=['unscaled', 'scale[real]', 'scale[complex]'])",,,,
test_mathematics.py,python,class_method,,,"Class method: TestAdjoint.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,,,TestAdjoint,op_numpy,"(self, matrix)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestConj.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,,,TestConj,op_numpy,"(self, matrix)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestInner.op_numpy(self, left, right, scalar_is_ket=False)",qutip,qutip,v5.0.4,,,,,,,,,TestInner,op_numpy,"(self, left, right, scalar_is_ket=False)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestInner.generate_scalar_is_ket(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,,,TestInner,generate_scalar_is_ket,"(self, metafunc)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestInner.test_scalar_is_ket(self, op, data_l, data_r, out_type, scalar_is_ket)",qutip,qutip,v5.0.4,,,,,,,,,TestInner,test_scalar_is_ket,"(self, op, data_l, data_r, out_type, scalar_is_ket)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestInnerOp.op_numpy(self, left, mid, right, scalar_is_ket=False)",qutip,qutip,v5.0.4,,,,,,,,,TestInnerOp,op_numpy,"(self, left, mid, right, scalar_is_ket=False)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestInnerOp.generate_scalar_is_ket(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,,,TestInnerOp,generate_scalar_is_ket,"(self, metafunc)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestInnerOp.test_scalar_is_ket(self, op, data_l, data_m, data_r, out_type,
                           scalar_is_ket)",qutip,qutip,v5.0.4,,,,,,,,,TestInnerOp,test_scalar_is_ket,"(self, op, data_l, data_m, data_r, out_type,
                           scalar_is_ket)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestKron.op_numpy(self, left, right)",qutip,qutip,v5.0.4,,,,,,,,,TestKron,op_numpy,"(self, left, right)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestKronT.op_numpy(self, left, right)",qutip,qutip,v5.0.4,,,,,,,,,TestKronT,op_numpy,"(self, left, right)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestMatmul.op_numpy(self, left, right)",qutip,qutip,v5.0.4,,,,,,,,,TestMatmul,op_numpy,"(self, left, right)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestMultiply.op_numpy(self, left, right)",qutip,qutip,v5.0.4,,,,,,,,,TestMultiply,op_numpy,"(self, left, right)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestMul.op_numpy(self, matrix, scalar)",qutip,qutip,v5.0.4,,,,,,,,,TestMul,op_numpy,"(self, matrix, scalar)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestNeg.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,,,TestNeg,op_numpy,"(self, matrix)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestSub.op_numpy(self, left, right)",qutip,qutip,v5.0.4,,,,,,,,,TestSub,op_numpy,"(self, left, right)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestTrace.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,,,TestTrace,op_numpy,"(self, matrix)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestTrace_oper_ket.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,,,TestTrace_oper_ket,op_numpy,"(self, matrix)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestPow.op_numpy(self, matrix, n)",qutip,qutip,v5.0.4,,,,,,,,,TestPow,op_numpy,"(self, matrix, n)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""n"", [0, 1, 10], ids=[""n_0"", ""n_1"", ""n_10""])] TestPow.test_mathematically_correct(self, op, data_m, out_type, n)",qutip,qutip,v5.0.4,,,,,,,,,TestPow,test_mathematically_correct,"(self, op, data_m, out_type, n)",,,,"pytest.mark.parametrize(""n"", [0, 1, 10], ids=[""n_0"", ""n_1"", ""n_10""])",,,,
test_mathematics.py,python,class_method,,,"Class method: TestPow.test_incorrect_shape_raises(self, op, data_m)",qutip,qutip,v5.0.4,,,,,,,,,TestPow,test_incorrect_shape_raises,"(self, op, data_m)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestExpm.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,,,TestExpm,op_numpy,"(self, matrix)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestLogm.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,,,TestLogm,op_numpy,"(self, matrix)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestTranspose.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,,,TestTranspose,op_numpy,"(self, matrix)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestProject.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,,,TestProject,op_numpy,"(self, matrix)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestInv.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,,,TestInv,op_numpy,"(self, matrix)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestZeros_like.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,,,TestZeros_like,op_numpy,"(self, matrix)",,,,,,,,
test_mathematics.py,python,class_method,,,"Class method: TestIdentity_like.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,,,TestIdentity_like,op_numpy,"(self, matrix)",,,,,,,,
test_mathematics.py,python,class,,,Class: _GenericOpMixin,qutip,qutip,v5.0.4,,,,,,,,,_GenericOpMixin,,,,,,,,,,
test_mathematics.py,python,class,,,Class: UnaryOpMixin(_GenericOpMixin),qutip,qutip,v5.0.4,,,,,,,,,UnaryOpMixin,,,,,(_GenericOpMixin),,,,,
test_mathematics.py,python,class,,,Class: UnaryScalarOpMixin(_GenericOpMixin),qutip,qutip,v5.0.4,,,,,,,,,UnaryScalarOpMixin,,,,,(_GenericOpMixin),,,,,
test_mathematics.py,python,class,,,Class: BinaryOpMixin(_GenericOpMixin),qutip,qutip,v5.0.4,,,,,,,,,BinaryOpMixin,,,,,(_GenericOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TernaryOpMixin(_GenericOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TernaryOpMixin,,,,,(_GenericOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestAdd(BinaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestAdd,,,,,(BinaryOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestAdjoint(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestAdjoint,,,,,(UnaryOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestConj(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestConj,,,,,(UnaryOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestInner(BinaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestInner,,,,,(BinaryOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestInnerOp(TernaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestInnerOp,,,,,(TernaryOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestKron(BinaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestKron,,,,,(BinaryOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestKronT(BinaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestKronT,,,,,(BinaryOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestMatmul(BinaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestMatmul,,,,,(BinaryOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestMultiply(BinaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestMultiply,,,,,(BinaryOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestMul(UnaryScalarOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestMul,,,,,(UnaryScalarOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestNeg(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestNeg,,,,,(UnaryOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestSub(BinaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestSub,,,,,(BinaryOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestTrace(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestTrace,,,,,(UnaryOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestTrace_oper_ket(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestTrace_oper_ket,,,,,(UnaryOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestPow(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestPow,,,,,(UnaryOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestExpm(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestExpm,,,,,(UnaryOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestLogm(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestLogm,,,,,(UnaryOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestTranspose(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestTranspose,,,,,(UnaryOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestProject(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestProject,,,,,(UnaryOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestInv(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestInv,,,,,(UnaryOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestZeros_like(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestZeros_like,,,,,(UnaryOpMixin),,,,,
test_mathematics.py,python,class,,,Class: TestIdentity_like(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestIdentity_like,,,,,(UnaryOpMixin),,,,,
test_mathematics.py,python,function,shapes_unary,(dim=100),Function: shapes_unary(dim=100),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mathematics.py,python,function,shapes_binary_identical,(dim=100),Function: shapes_binary_identical(dim=100),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mathematics.py,python,function,shapes_binary_bad_identical,(dim=100),Function: shapes_binary_bad_identical(dim=100),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mathematics.py,python,function,shapes_binary_unrestricted,(dim=100),Function: shapes_binary_unrestricted(dim=100),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mathematics.py,python,function,shapes_binary_bad_unrestricted,(dim=100),Function: shapes_binary_bad_unrestricted(dim=100),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mathematics.py,python,function,shapes_binary_matmul,(dim=100),Function: shapes_binary_matmul(dim=100),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mathematics.py,python,function,shapes_binary_bad_matmul,(dim=100),Function: shapes_binary_bad_matmul(dim=100),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mathematics.py,python,function,shapes_square,(dim=100),Function: shapes_square(dim=100),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mathematics.py,python,function,shapes_not_square,(dim=100),Function: shapes_not_square(dim=100),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mathematics.py,python,function,cases_csr,(shape),Function: cases_csr(shape),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mathematics.py,python,function,cases_dense,(shape),Function: cases_dense(shape),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mathematics.py,python,function,cases_diag,(shape),Function: cases_diag(shape),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mathematics.py,python,function,cases_type_shape_product,"(cases_lookup, op, types, shapes, out_type=None)","Function: cases_type_shape_product(cases_lookup, op, types, shapes, out_type=None)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mathematics.py,python,function,_inv_dense,(matrix),Function: _inv_dense(matrix),qutip,qutip,v5.0.4,,,,,,,,"# Add a diagonal so `matrix` is not singular",,,,,,,,,,,
test_mathematics.py,python,function,_inv_csr,(matrix),Function: _inv_csr(matrix),qutip,qutip,v5.0.4,,,,,,,,"# Add a diagonal so `matrix` is not singular",,,,,,,,,,,
test_mathematics.py,python,constant,,,Constant: _ParameterSet = type(pytest.param()),qutip,qutip,v5.0.4,,,,,_ParameterSet = type(pytest.param()),_ParameterSet,type(pytest.param()),,,,,,,,,,,,
test_mathematics.py,python,constant,,,"Constant: _ALL_CASES = {
    CSR: cases_csr,
    Dia: cases_diag,
    Dense: cases_dense,
}",qutip,qutip,v5.0.4,,,,,"_ALL_CASES = {
    CSR: cases_csr,
    Dia: cases_diag,
    Dense: cases_dense,
}",_ALL_CASES,"{
    CSR: cases_csr,
    Dia: cases_diag,
    Dense: cases_dense,
}",,,,,,,,,,,,
test_mathematics.py,python,constant,,,"Constant: _RANDOM = {
    CSR: lambda shape: [lambda: conftest.random_csr(shape, 0.5, True)],
    Dense: lambda shape: [lambda: conftest.random_dense(shape, False)],
    Dia: lambda shape: [lambda: conftest.random_diag(shape, 0.5)],
}",qutip,qutip,v5.0.4,,,,,"_RANDOM = {
    CSR: lambda shape: [lambda: conftest.random_csr(shape, 0.5, True)],
    Dense: lambda shape: [lambda: conftest.random_dense(shape, False)],
    Dia: lambda shape: [lambda: conftest.random_diag(shape, 0.5)],
}",_RANDOM,"{
    CSR: lambda shape: [lambda: conftest.random_csr(shape, 0.5, True)],
    Dense: lambda shape: [lambda: conftest.random_dense(shape, False)],
    Dia: lambda shape: [lambda: conftest.random_diag(shape, 0.5)],
}",,,,,,,,,,,,
test_mathematics.py,python,import,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,itertools,,,,,,,,,,,,,,,,,
test_mathematics.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_mathematics.py,python,import,,,Import: scipy,qutip,qutip,v5.0.4,import scipy,scipy,,,,,,,,,,,,,,,,,
test_mathematics.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_mathematics.py,python,local_import,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data,data,qutip.core,qutip.core,,,,,,,,,,,,,,,
test_mathematics.py,python,local_import,,,Import: Data from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import Data, Dense, CSR, Dia",Data,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_mathematics.py,python,local_import,,,Import: Dense from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import Data, Dense, CSR, Dia",Dense,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_mathematics.py,python,local_import,,,Import: CSR from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import Data, Dense, CSR, Dia",CSR,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_mathematics.py,python,local_import,,,Import: Dia from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import Data, Dense, CSR, Dia",Dia,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_mathematics.py,python,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mathematics.py,python,,,,Directory: qutip\tests\core\data\test_mathematics.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_norm.py,python,class_field,,,"Class field: TestOneNorm.specialisations = [
        pytest.param(data.norm.one_csr, CSR, numbers.Number),
        pytest.param(data.norm.one_dia, Dia, numbers.Number),
        pytest.param(data.norm.one_dense, Dense, numbers.Number),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestOneNorm,,,"specialisations = [
        pytest.param(data.norm.one_csr, CSR, numbers.Number),
        pytest.param(data.norm.one_dia, Dia, numbers.Number),
        pytest.param(data.norm.one_dense, Dense, numbers.Number),
    ]",,,,specialisations,"[
        pytest.param(data.norm.one_csr, CSR, numbers.Number),
        pytest.param(data.norm.one_dia, Dia, numbers.Number),
        pytest.param(data.norm.one_dense, Dense, numbers.Number),
    ]",,
test_norm.py,python,class_field,,,"Class field: TestFrobeniusNorm.specialisations = [
        pytest.param(data.norm.frobenius_csr, CSR, numbers.Number),
        pytest.param(data.norm.frobenius_dia, Dia, numbers.Number),
        pytest.param(data.norm.frobenius_dense, Dense, numbers.Number),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestFrobeniusNorm,,,"specialisations = [
        pytest.param(data.norm.frobenius_csr, CSR, numbers.Number),
        pytest.param(data.norm.frobenius_dia, Dia, numbers.Number),
        pytest.param(data.norm.frobenius_dense, Dense, numbers.Number),
    ]",,,,specialisations,"[
        pytest.param(data.norm.frobenius_csr, CSR, numbers.Number),
        pytest.param(data.norm.frobenius_dia, Dia, numbers.Number),
        pytest.param(data.norm.frobenius_dense, Dense, numbers.Number),
    ]",,
test_norm.py,python,class_field,,,"Class field: TestMaxNorm.specialisations = [
        pytest.param(data.norm.max_csr, CSR, numbers.Number),
        pytest.param(data.norm.max_dia, Dia, numbers.Number),
        pytest.param(data.norm.max_dense, Dense, numbers.Number),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestMaxNorm,,,"specialisations = [
        pytest.param(data.norm.max_csr, CSR, numbers.Number),
        pytest.param(data.norm.max_dia, Dia, numbers.Number),
        pytest.param(data.norm.max_dense, Dense, numbers.Number),
    ]",,,,specialisations,"[
        pytest.param(data.norm.max_csr, CSR, numbers.Number),
        pytest.param(data.norm.max_dia, Dia, numbers.Number),
        pytest.param(data.norm.max_dense, Dense, numbers.Number),
    ]",,
test_norm.py,python,class_field,,,"Class field: TestL2Norm.shapes = [
        (x,) for x in testing.shapes_unary() if (x.values[0][0] == 1
                                                 or x.values[0][1] == 1)
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestL2Norm,,,"shapes = [
        (x,) for x in testing.shapes_unary() if (x.values[0][0] == 1
                                                 or x.values[0][1] == 1)
    ]",,,,shapes,"[
        (x,) for x in testing.shapes_unary() if (x.values[0][0] == 1
                                                 or x.values[0][1] == 1)
    ]",,
test_norm.py,python,class_field,,,"Class field: TestL2Norm.bad_shapes = [
        (x,) for x in testing.shapes_unary() if not (x.values[0][0] == 1
                                                     or x.values[0][1] == 1)
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestL2Norm,,,"bad_shapes = [
        (x,) for x in testing.shapes_unary() if not (x.values[0][0] == 1
                                                     or x.values[0][1] == 1)
    ]",,,,bad_shapes,"[
        (x,) for x in testing.shapes_unary() if not (x.values[0][0] == 1
                                                     or x.values[0][1] == 1)
    ]",,
test_norm.py,python,class_field,,,"Class field: TestL2Norm.specialisations = [
        pytest.param(data.norm.l2_csr, CSR, numbers.Number),
        pytest.param(data.norm.l2_dia, Dia, numbers.Number),
        pytest.param(data.norm.l2_dense, Dense, numbers.Number),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestL2Norm,,,"specialisations = [
        pytest.param(data.norm.l2_csr, CSR, numbers.Number),
        pytest.param(data.norm.l2_dia, Dia, numbers.Number),
        pytest.param(data.norm.l2_dense, Dense, numbers.Number),
    ]",,,,specialisations,"[
        pytest.param(data.norm.l2_csr, CSR, numbers.Number),
        pytest.param(data.norm.l2_dia, Dia, numbers.Number),
        pytest.param(data.norm.l2_dense, Dense, numbers.Number),
    ]",,
test_norm.py,python,class_field,,,"Class field: TestTraceNorm.specialisations = [
        pytest.param(data.norm.trace_csr, CSR, numbers.Number),
        pytest.param(data.norm.trace_dense, Dense, numbers.Number),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestTraceNorm,,,"specialisations = [
        pytest.param(data.norm.trace_csr, CSR, numbers.Number),
        pytest.param(data.norm.trace_dense, Dense, numbers.Number),
    ]",,,,specialisations,"[
        pytest.param(data.norm.trace_csr, CSR, numbers.Number),
        pytest.param(data.norm.trace_dense, Dense, numbers.Number),
    ]",,
test_norm.py,python,class_method,,,"Class method: TestOneNorm.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,,,TestOneNorm,op_numpy,"(self, matrix)",,,,,,,,
test_norm.py,python,class_method,,,"Class method: TestFrobeniusNorm.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,,,TestFrobeniusNorm,op_numpy,"(self, matrix)",,,,,,,,
test_norm.py,python,class_method,,,"Class method: TestMaxNorm.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,,,TestMaxNorm,op_numpy,"(self, matrix)",,,,,,,,
test_norm.py,python,class_method,,,"Class method: TestL2Norm.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,,,TestL2Norm,op_numpy,"(self, matrix)",,,,,,,,
test_norm.py,python,class_method,,,"Class method: TestTraceNorm.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,,,TestTraceNorm,op_numpy,"(self, matrix)",,,,,,,,
test_norm.py,python,class,,,Class: TestOneNorm(testing.UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestOneNorm,,,,,(testing.UnaryOpMixin),,,,,
test_norm.py,python,class,,,Class: TestFrobeniusNorm(testing.UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestFrobeniusNorm,,,,,(testing.UnaryOpMixin),,,,,
test_norm.py,python,class,,,Class: TestMaxNorm(testing.UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestMaxNorm,,,,,(testing.UnaryOpMixin),,,,,
test_norm.py,python,class,,,Class: TestL2Norm(testing.UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestL2Norm,,,,,(testing.UnaryOpMixin),,,,,
test_norm.py,python,class,,,Class: TestTraceNorm(testing.UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestTraceNorm,,,,,(testing.UnaryOpMixin),,,,,
test_norm.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_norm.py,python,import,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg,scipy.linalg,,,,,,,,,,,,,,,,,
test_norm.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_norm.py,python,import,,,Import: data from qutip,qutip,qutip,v5.0.4,from qutip import data,data,qutip,,,,,,,,,,,,,,,,
test_norm.py,python,import,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,numbers,,,,,,,,,,,,,,,,,
test_norm.py,python,local_import,,,Import: CSR from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",CSR,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_norm.py,python,local_import,,,Import: Dense from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",Dense,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_norm.py,python,local_import,,,Import: Dia from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",Dia,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_norm.py,python,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_norm.py,python,,,,Directory: qutip\tests\core\data\test_norm.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_operators.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_operators.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy,numpy,,,,,,,,,,,,,,,,,
test_operators.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_operators.py,python,import,,,Import: settings from qutip,qutip,qutip,v5.0.4,from qutip import settings,settings,qutip,,,,,,,,,,,,,,,,
test_operators.py,python,local_import,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,data,qutip.core,qutip.core,,,,,,,,,,,,,,,
test_operators.py,python,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_operators.py,python,,,,Directory: qutip\tests\core\data\test_operators.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_properties.py,python,class_field,,,Class field: Test_isherm.tol = 1e-12,qutip,qutip,v5.0.4,,,,,,,,,Test_isherm,,,tol = 1e-12,,,,tol,1e-12,,
test_properties.py,python,class_method,,,"Class method: [pytest.mark.repeat(20)] Test_isherm.test_random_equal_structure(self, datatype, size, density)",qutip,qutip,v5.0.4,,,,,,,,,Test_isherm,test_random_equal_structure,"(self, datatype, size, density)",,,,pytest.mark.repeat(20),,,,
test_properties.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""density"", (0.1, 0.8))] Test_isherm.test_random_equal_structure(self, datatype, size, density)",qutip,qutip,v5.0.4,,,,,,,,,Test_isherm,test_random_equal_structure,"(self, datatype, size, density)",,,,"pytest.mark.parametrize(""density"", (0.1, 0.8))",,,,
test_properties.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""size"", (10, 100))] Test_isherm.test_random_equal_structure(self, datatype, size, density)",qutip,qutip,v5.0.4,,,,,,,,,Test_isherm,test_random_equal_structure,"(self, datatype, size, density)",,,,"pytest.mark.parametrize(""size"", (10, 100))",,,,
test_properties.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""cols"", (2, 4))] Test_isherm.test_nonsquare_shapes(self, datatype, rows, cols)",qutip,qutip,v5.0.4,,,,,,,,,Test_isherm,test_nonsquare_shapes,"(self, datatype, rows, cols)",,,,"pytest.mark.parametrize(""cols"", (2, 4))",,,,
test_properties.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""rows"", (1, 5))] Test_isherm.test_nonsquare_shapes(self, datatype, rows, cols)",qutip,qutip,v5.0.4,,,,,,,,,Test_isherm,test_nonsquare_shapes,"(self, datatype, rows, cols)",,,,"pytest.mark.parametrize(""rows"", (1, 5))",,,,
test_properties.py,python,class_method,,,"Class method: Test_isherm.test_diagonal_elements(self, datatype)",qutip,qutip,v5.0.4,,,,,,,,,Test_isherm,test_diagonal_elements,"(self, datatype)",,,,,,,,
test_properties.py,python,class_method,,,"Class method: Test_isherm.test_compare_implicit_zero_structure(self, datatype)",qutip,qutip,v5.0.4,,,,,,,,,Test_isherm,test_compare_implicit_zero_structure,"(self, datatype)",,,,,,,,
test_properties.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""density"", np.linspace(0.2, 1, 17))] Test_isherm.test_compare_implicit_zero_random(self, datatype, density)",qutip,qutip,v5.0.4,,,,,,,,,Test_isherm,test_compare_implicit_zero_random,"(self, datatype, density)",,,,"pytest.mark.parametrize(""density"", np.linspace(0.2, 1, 17))",,,,
test_properties.py,python,class_method,,,"Class method: Test_isherm.test_structure_detection(self, datatype)",qutip,qutip,v5.0.4,,,,,,,,,Test_isherm,test_structure_detection,"(self, datatype)",,,,,,,,
test_properties.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""shape"",
        [(10, 1), (2, 5), (5, 2), (5, 5)]
    )] Test_isdiag.test_isdiag(self, shape, datatype)",qutip,qutip,v5.0.4,,,,,,,,,Test_isdiag,test_isdiag,"(self, shape, datatype)",,,,"pytest.mark.parametrize(""shape"",
        [(10, 1), (2, 5), (5, 2), (5, 5)]
    )",,,,
test_properties.py,python,class_method,,,"Class method: TestIsEqual.op_numpy(self, left, right, atol, rtol)",qutip,qutip,v5.0.4,,,,,,,,,TestIsEqual,op_numpy,"(self, left, right, atol, rtol)",,,,,,,,
test_properties.py,python,class_method,,,Class method: TestIsEqual.rand_dense(shape),qutip,qutip,v5.0.4,,,,,,,,,TestIsEqual,rand_dense,(shape),,,,,,,,
test_properties.py,python,class_method,,,Class method: TestIsEqual.rand_diag(shape),qutip,qutip,v5.0.4,,,,,,,,,TestIsEqual,rand_diag,(shape),,,,,,,,
test_properties.py,python,class_method,,,Class method: TestIsEqual.rand_csr(shape),qutip,qutip,v5.0.4,,,,,,,,,TestIsEqual,rand_csr,(shape),,,,,,,,
test_properties.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""factory"", [rand_dense, rand_diag, rand_csr])] TestIsEqual.test_same_shape(self, factory, shape)",qutip,qutip,v5.0.4,,,,,,,,,TestIsEqual,test_same_shape,"(self, factory, shape)",,,,"pytest.mark.parametrize(""factory"", [rand_dense, rand_diag, rand_csr])",,,,
test_properties.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])] TestIsEqual.test_same_shape(self, factory, shape)",qutip,qutip,v5.0.4,,,,,,,,,TestIsEqual,test_same_shape,"(self, factory, shape)",,,,"pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])",,,,
test_properties.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""factory"", [rand_dense, rand_diag, rand_csr])] TestIsEqual.test_different_shape(self, factory, shapeA, shapeB)",qutip,qutip,v5.0.4,,,,,,,,,TestIsEqual,test_different_shape,"(self, factory, shapeA, shapeB)",,,,"pytest.mark.parametrize(""factory"", [rand_dense, rand_diag, rand_csr])",,,,
test_properties.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""shapeA"", [(1, 10), (9, 9), (10, 2)])] TestIsEqual.test_different_shape(self, factory, shapeA, shapeB)",qutip,qutip,v5.0.4,,,,,,,,,TestIsEqual,test_different_shape,"(self, factory, shapeA, shapeB)",,,,"pytest.mark.parametrize(""shapeA"", [(1, 10), (9, 9), (10, 2)])",,,,
test_properties.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""shapeB"", [(1, 9), (10, 10), (10, 1)])] TestIsEqual.test_different_shape(self, factory, shapeA, shapeB)",qutip,qutip,v5.0.4,,,,,,,,,TestIsEqual,test_different_shape,"(self, factory, shapeA, shapeB)",,,,"pytest.mark.parametrize(""shapeB"", [(1, 9), (10, 10), (10, 1)])",,,,
test_properties.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""rtol"", [1e-6, 100])] TestIsEqual.test_rtol(self, factory, shape, rtol)",qutip,qutip,v5.0.4,,,,,,,,,TestIsEqual,test_rtol,"(self, factory, shape, rtol)",,,,"pytest.mark.parametrize(""rtol"", [1e-6, 100])",,,,
test_properties.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""factory"", [rand_dense, rand_diag, rand_csr])] TestIsEqual.test_rtol(self, factory, shape, rtol)",qutip,qutip,v5.0.4,,,,,,,,,TestIsEqual,test_rtol,"(self, factory, shape, rtol)",,,,"pytest.mark.parametrize(""factory"", [rand_dense, rand_diag, rand_csr])",,,,
test_properties.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])] TestIsEqual.test_rtol(self, factory, shape, rtol)",qutip,qutip,v5.0.4,,,,,,,,,TestIsEqual,test_rtol,"(self, factory, shape, rtol)",,,,"pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])",,,,
test_properties.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""atol"", [1e-14, 1e-6, 100])] TestIsEqual.test_atol(self, factory, shape, atol)",qutip,qutip,v5.0.4,,,,,,,,,TestIsEqual,test_atol,"(self, factory, shape, atol)",,,,"pytest.mark.parametrize(""atol"", [1e-14, 1e-6, 100])",,,,
test_properties.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""factory"", [rand_dense, rand_diag, rand_csr])] TestIsEqual.test_atol(self, factory, shape, atol)",qutip,qutip,v5.0.4,,,,,,,,,TestIsEqual,test_atol,"(self, factory, shape, atol)",,,,"pytest.mark.parametrize(""factory"", [rand_dense, rand_diag, rand_csr])",,,,
test_properties.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])] TestIsEqual.test_atol(self, factory, shape, atol)",qutip,qutip,v5.0.4,,,,,,,,,TestIsEqual,test_atol,"(self, factory, shape, atol)",,,,"pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])",,,,
test_properties.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])] TestIsEqual.test_csr_mismatch_sort(self, shape)",qutip,qutip,v5.0.4,,,,,,,,,TestIsEqual,test_csr_mismatch_sort,"(self, shape)",,,,"pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])",,,,
test_properties.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])] TestIsEqual.test_dia_mismatch_sort(self, shape)",qutip,qutip,v5.0.4,,,,,,,,,TestIsEqual,test_dia_mismatch_sort,"(self, shape)",,,,"pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])",,,,
test_properties.py,python,class,,,Class: Test_isherm,qutip,qutip,v5.0.4,,,,,,,,,Test_isherm,,,,,,,,,,
test_properties.py,python,class,,,Class: Test_isdiag,qutip,qutip,v5.0.4,,,,,,,,,Test_isdiag,,,,,,,,,,
test_properties.py,python,class,,,Class: TestIsEqual,qutip,qutip,v5.0.4,,,,,,,,,TestIsEqual,,,,,,,,,,
test_properties.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_properties.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_properties.py,python,import,,,Import: data from qutip,qutip,qutip,v5.0.4,from qutip import data as _data,data,qutip,,,,,,,,,,,,,,,,
test_properties.py,python,import,,,Import: CoreOptions from qutip,qutip,qutip,v5.0.4,from qutip import CoreOptions,CoreOptions,qutip,,,,,,,,,,,,,,,,
test_properties.py,python,local_import,,,Import: clean_dia from qutip.core.data.dia,qutip,qutip,v5.0.4,from qutip.core.data.dia import clean_dia,clean_dia,qutip.core.data.dia,qutip.core.data.dia,,,,,,,,,,,,,,,
test_properties.py,python,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_properties.py,python,,,,Directory: qutip\tests\core\data\test_properties.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_ptrace.py,python,class_field,,,Class field: TestPtrace.dims = [2] * 7,qutip,qutip,v5.0.4,,,,,,,,,TestPtrace,,,dims = [2] * 7,,,,dims,[2] * 7,,
test_ptrace.py,python,class_field,,,"Class field: TestPtrace.shapes = [(pytest.param((np.prod(dims), np.prod(dims))),)]",qutip,qutip,v5.0.4,,,,,,,,,TestPtrace,,,"shapes = [(pytest.param((np.prod(dims), np.prod(dims))),)]",,,,shapes,"[(pytest.param((np.prod(dims), np.prod(dims))),)]",,
test_ptrace.py,python,class_field,,,Class field: TestPtrace.bad_shapes = testing.shapes_not_square(np.prod(dims)),qutip,qutip,v5.0.4,,,,,,,,,TestPtrace,,,bad_shapes = testing.shapes_not_square(np.prod(dims)),,,,bad_shapes,testing.shapes_not_square(np.prod(dims)),,
test_ptrace.py,python,class_field,,,"Class field: TestPtrace.specialisations = [
        pytest.param(data.ptrace_csr, CSR, CSR),
        pytest.param(data.ptrace_csr_dense, CSR, Dense),
        pytest.param(data.ptrace_dense, Dense, Dense),
        pytest.param(data.ptrace_dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestPtrace,,,"specialisations = [
        pytest.param(data.ptrace_csr, CSR, CSR),
        pytest.param(data.ptrace_csr_dense, CSR, Dense),
        pytest.param(data.ptrace_dense, Dense, Dense),
        pytest.param(data.ptrace_dia, Dia, Dia),
    ]",,,,specialisations,"[
        pytest.param(data.ptrace_csr, CSR, CSR),
        pytest.param(data.ptrace_csr_dense, CSR, Dense),
        pytest.param(data.ptrace_dense, Dense, Dense),
        pytest.param(data.ptrace_dia, Dia, Dia),
    ]",,
test_ptrace.py,python,class_method,,,"Class method: TestPtrace.op_numpy(self, matrix, dims, sel)",qutip,qutip,v5.0.4,,,,,,,,,TestPtrace,op_numpy,"(self, matrix, dims, sel)",,,,,,,,
test_ptrace.py,python,class_method,,,"Class method: [pytest.mark.parametrize(
        ""sel"",
        [[0], [0, 3, 6], [0, 6, 3], list(range(len(dims))), []],
        ids=[
            ""keep_one"",
            ""keep_multiple_sorted"",
            ""keep_multiple_unsorted"",
            ""trace_none"",
            ""trace_all"",
        ],
    )] TestPtrace.test_mathematically_correct(self, op, data_m, out_type, sel)",qutip,qutip,v5.0.4,,,,,,,,,TestPtrace,test_mathematically_correct,"(self, op, data_m, out_type, sel)",,,,"pytest.mark.parametrize(
        ""sel"",
        [[0], [0, 3, 6], [0, 6, 3], list(range(len(dims))), []],
        ids=[
            ""keep_one"",
            ""keep_multiple_sorted"",
            ""keep_multiple_unsorted"",
            ""trace_none"",
            ""trace_all"",
        ],
    )",,,,
test_ptrace.py,python,class_method,,,"Class method: TestPtrace.test_incorrect_shape_raises(self, op, data_m)",qutip,qutip,v5.0.4,,,,,,,,,TestPtrace,test_incorrect_shape_raises,"(self, op, data_m)",,,,,,,,
test_ptrace.py,python,class_method,,,"Class method: [pytest.mark.parametrize(
        ""dims"",
        [[2], [0], [-2, -2] + [2] * 5, [1.2, 2.2, 3.3]],
        ids=[
            ""dims_different_to_shape"",
            ""dims_0"",
            ""dims_prod_is_shape_but_negative"",
            ""dims_is_not_int"",
        ],
    )] TestPtrace.test_incorrect_dims_raises(self, op, data_m, out_type, dims)",qutip,qutip,v5.0.4,,,,,,,,,TestPtrace,test_incorrect_dims_raises,"(self, op, data_m, out_type, dims)",,,,"pytest.mark.parametrize(
        ""dims"",
        [[2], [0], [-2, -2] + [2] * 5, [1.2, 2.2, 3.3]],
        ids=[
            ""dims_different_to_shape"",
            ""dims_0"",
            ""dims_prod_is_shape_but_negative"",
            ""dims_is_not_int"",
        ],
    )",,,,
test_ptrace.py,python,class_method,,,"Class method: TestPtrace.generate_incorrect_dims_raises(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,,,TestPtrace,generate_incorrect_dims_raises,"(self, metafunc)",,,,,,,,
test_ptrace.py,python,class_method,,,"Class method: [pytest.mark.parametrize(
        ""sel"",
        [[2, 10], [-1, 2]],
        ids=[
            ""sel_value_larger_than_dims"",
            ""sel_value_negative"",
        ],
    )] TestPtrace.test_incorrect_sel_raises(self, op, data_m, out_type, sel)",qutip,qutip,v5.0.4,,,,,,,,,TestPtrace,test_incorrect_sel_raises,"(self, op, data_m, out_type, sel)",,,,"pytest.mark.parametrize(
        ""sel"",
        [[2, 10], [-1, 2]],
        ids=[
            ""sel_value_larger_than_dims"",
            ""sel_value_negative"",
        ],
    )",,,,
test_ptrace.py,python,class_method,,,"Class method: TestPtrace.generate_incorrect_sel_raises(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,,,TestPtrace,generate_incorrect_sel_raises,"(self, metafunc)",,,,,,,,
test_ptrace.py,python,class,,,Class: TestPtrace(testing.UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestPtrace,,,,,(testing.UnaryOpMixin),,,,,
test_ptrace.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_ptrace.py,python,import,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg,scipy.linalg,,,,,,,,,,,,,,,,,
test_ptrace.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_ptrace.py,python,import,,,Import: data from qutip,qutip,qutip,v5.0.4,from qutip import data,data,qutip,,,,,,,,,,,,,,,,
test_ptrace.py,python,local_import,,,Import: CSR from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",CSR,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_ptrace.py,python,local_import,,,Import: Dense from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",Dense,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_ptrace.py,python,local_import,,,Import: Dia from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",Dia,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_ptrace.py,python,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_ptrace.py,python,,,,Directory: qutip\tests\core\data\test_ptrace.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_reshape.py,python,class_field,,,"Class field: TestSplitColumns.specialisations = [
        pytest.param(data.split_columns_csr, CSR, list),
        pytest.param(data.split_columns_dia, Dia, list),
        pytest.param(data.split_columns_dense, Dense, list),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestSplitColumns,,,"specialisations = [
        pytest.param(data.split_columns_csr, CSR, list),
        pytest.param(data.split_columns_dia, Dia, list),
        pytest.param(data.split_columns_dense, Dense, list),
    ]",,,,specialisations,"[
        pytest.param(data.split_columns_csr, CSR, list),
        pytest.param(data.split_columns_dia, Dia, list),
        pytest.param(data.split_columns_dense, Dense, list),
    ]",,
test_reshape.py,python,class_field,,,"Class field: TestColumnStack.specialisations = [
        pytest.param(data.column_stack_csr, CSR, CSR),
        pytest.param(data.column_stack_dia, Dia, Dia),
        pytest.param(data.column_stack_dense, Dense, Dense),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestColumnStack,,,"specialisations = [
        pytest.param(data.column_stack_csr, CSR, CSR),
        pytest.param(data.column_stack_dia, Dia, Dia),
        pytest.param(data.column_stack_dense, Dense, Dense),
    ]",,,,specialisations,"[
        pytest.param(data.column_stack_csr, CSR, CSR),
        pytest.param(data.column_stack_dia, Dia, Dia),
        pytest.param(data.column_stack_dense, Dense, Dense),
    ]",,
test_reshape.py,python,class_field,,,"Class field: TestColumnUnstack.shapes = [
        (pytest.param((10, 1), id=""ket""), ),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestColumnUnstack,,,"shapes = [
        (pytest.param((10, 1), id=""ket""), ),
    ]",,,,shapes,"[
        (pytest.param((10, 1), id=""ket""), ),
    ]",,
test_reshape.py,python,class_field,,,"Class field: TestColumnUnstack.bad_shapes = [
        (pytest.param((1, 10), id=""bra""), ),
        (pytest.param((10, 10), id=""square""), ),
        (pytest.param((2, 10), id=""non_square""), ),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestColumnUnstack,,,"bad_shapes = [
        (pytest.param((1, 10), id=""bra""), ),
        (pytest.param((10, 10), id=""square""), ),
        (pytest.param((2, 10), id=""non_square""), ),
    ]",,,,bad_shapes,"[
        (pytest.param((1, 10), id=""bra""), ),
        (pytest.param((10, 10), id=""square""), ),
        (pytest.param((2, 10), id=""non_square""), ),
    ]",,
test_reshape.py,python,class_field,,,"Class field: TestColumnUnstack.specialisations = [
        pytest.param(data.column_unstack_csr, CSR, CSR),
        pytest.param(data.column_unstack_dia, Dia, Dia),
        pytest.param(data.column_unstack_dense, Dense, Dense),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestColumnUnstack,,,"specialisations = [
        pytest.param(data.column_unstack_csr, CSR, CSR),
        pytest.param(data.column_unstack_dia, Dia, Dia),
        pytest.param(data.column_unstack_dense, Dense, Dense),
    ]",,,,specialisations,"[
        pytest.param(data.column_unstack_csr, CSR, CSR),
        pytest.param(data.column_unstack_dia, Dia, Dia),
        pytest.param(data.column_unstack_dense, Dense, Dense),
    ]",,
test_reshape.py,python,class_field,,,"Class field: TestReshape.shapes = [
        (pytest.param((1, 100), id=""bra""), ),
        (pytest.param((100, 1), id=""ket""), ),
        (pytest.param((2, 50), id=""non_square""), ),
        (pytest.param((10, 10), id=""square""), ),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestReshape,,,"shapes = [
        (pytest.param((1, 100), id=""bra""), ),
        (pytest.param((100, 1), id=""ket""), ),
        (pytest.param((2, 50), id=""non_square""), ),
        (pytest.param((10, 10), id=""square""), ),
    ]",,,,shapes,"[
        (pytest.param((1, 100), id=""bra""), ),
        (pytest.param((100, 1), id=""ket""), ),
        (pytest.param((2, 50), id=""non_square""), ),
        (pytest.param((10, 10), id=""square""), ),
    ]",,
test_reshape.py,python,class_field,,,"Class field: TestReshape.specialisations = [
        pytest.param(data.reshape_dense, Dense, Dense),
        pytest.param(data.reshape_dia, Dia, Dia),
        pytest.param(data.reshape_csr, CSR, CSR),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestReshape,,,"specialisations = [
        pytest.param(data.reshape_dense, Dense, Dense),
        pytest.param(data.reshape_dia, Dia, Dia),
        pytest.param(data.reshape_csr, CSR, CSR),
    ]",,,,specialisations,"[
        pytest.param(data.reshape_dense, Dense, Dense),
        pytest.param(data.reshape_dia, Dia, Dia),
        pytest.param(data.reshape_csr, CSR, CSR),
    ]",,
test_reshape.py,python,class_method,,,"Class method: TestSplitColumns.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,,,TestSplitColumns,op_numpy,"(self, matrix)",,,,,,,,
test_reshape.py,python,class_method,,,"Class method: TestColumnStack.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,,,TestColumnStack,op_numpy,"(self, matrix)",,,,,,,,
test_reshape.py,python,class_method,,,"Class method: TestColumnUnstack.op_numpy(self, matrix, rows)",qutip,qutip,v5.0.4,,,,,,,,,TestColumnUnstack,op_numpy,"(self, matrix, rows)",,,,,,,,
test_reshape.py,python,class_method,,,"Class method: [pytest.mark.parametrize('rows', [2, 5])] TestColumnUnstack.test_mathematically_correct(self, op, data_m, rows, out_type)",qutip,qutip,v5.0.4,,,,,,,,,TestColumnUnstack,test_mathematically_correct,"(self, op, data_m, rows, out_type)",,,,"pytest.mark.parametrize('rows', [2, 5])",,,,
test_reshape.py,python,class_method,,,"Class method: TestColumnUnstack.test_incorrect_shape_raises(self, op, data_m)",qutip,qutip,v5.0.4,,,,,,,,,TestColumnUnstack,test_incorrect_shape_raises,"(self, op, data_m)",,,,,,,,
test_reshape.py,python,class_method,,,"Class method: [pytest.mark.parametrize('rows', [-1, 0, 3], ids=['negative', 'zero',
                                                      'invalid'])] TestColumnUnstack.test_incorrect_rows_raises(self, op, data_m, out_type, rows)",qutip,qutip,v5.0.4,,,,,,,,,TestColumnUnstack,test_incorrect_rows_raises,"(self, op, data_m, out_type, rows)",,,,"pytest.mark.parametrize('rows', [-1, 0, 3], ids=['negative', 'zero',
                                                      'invalid'])",,,,
test_reshape.py,python,class_method,,,"Class method: TestColumnUnstack.generate_incorrect_rows_raises(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,,,TestColumnUnstack,generate_incorrect_rows_raises,"(self, metafunc)",,,,,,,,
test_reshape.py,python,class_method,,,"Class method: TestReshape.op_numpy(self, matrix, rows, columns)",qutip,qutip,v5.0.4,,,,,,,,,TestReshape,op_numpy,"(self, matrix, rows, columns)",,,,,,,,
test_reshape.py,python,class_method,,,"Class method: [pytest.mark.parametrize('rows, columns', [(5, 20), (10, 10)])] TestReshape.test_mathematically_correct(self, op, data_m, rows, columns, out_type)",qutip,qutip,v5.0.4,,,,,,,,,TestReshape,test_mathematically_correct,"(self, op, data_m, rows, columns, out_type)",,,,"pytest.mark.parametrize('rows, columns', [(5, 20), (10, 10)])",,,,
test_reshape.py,python,class_method,,,"Class method: [pytest.mark.parametrize('rows, columns', [(-2, -50), (-50, -2), (3, 10)],
                             ids=[""negative1"", ""negative2"", ""invalid""])] TestReshape.test_incorrect_rows_raises(self, op, data_m, out_type, rows, columns)",qutip,qutip,v5.0.4,,,,,,,,,TestReshape,test_incorrect_rows_raises,"(self, op, data_m, out_type, rows, columns)",,,,"pytest.mark.parametrize('rows, columns', [(-2, -50), (-50, -2), (3, 10)],
                             ids=[""negative1"", ""negative2"", ""invalid""])",,,,
test_reshape.py,python,class_method,,,"Class method: TestReshape.generate_incorrect_rows_raises(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,,,TestReshape,generate_incorrect_rows_raises,"(self, metafunc)",,,,,,,,
test_reshape.py,python,class,,,Class: TestSplitColumns(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestSplitColumns,,,,,(UnaryOpMixin),,,,,
test_reshape.py,python,class,,,Class: TestColumnStack(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestColumnStack,,,,,(UnaryOpMixin),,,,,
test_reshape.py,python,class,,,Class: TestColumnUnstack(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestColumnUnstack,,,,,(UnaryOpMixin),,,,,
test_reshape.py,python,class,,,Class: TestReshape(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,,,TestReshape,,,,,(UnaryOpMixin),,,,,
test_reshape.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_reshape.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_reshape.py,python,import,,,Import: data from qutip,qutip,qutip,v5.0.4,from qutip import data,data,qutip,,,,,,,,,,,,,,,,
test_reshape.py,python,local_import,,,Import: CSR from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",CSR,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_reshape.py,python,local_import,,,Import: Dense from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",Dense,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_reshape.py,python,local_import,,,Import: Dia from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",Dia,qutip.core.data,qutip.core.data,,,,,,,,,,,,,,,
test_reshape.py,python,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_reshape.py,python,,,,Directory: qutip\tests\core\data\test_reshape.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,Directory: qutip\tests\core\data\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,File: qutip\tests\piqs,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,Directory: qutip\tests\piqs\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brmesolve.py,python,function,pauli_spin_operators,(),Function: pauli_spin_operators(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brmesolve.py,python,function,_harmonic_oscillator_spectrum_frequency,"(n_th, w0, kappa)","Function: _harmonic_oscillator_spectrum_frequency(n_th, w0, kappa)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brmesolve.py,python,function,_harmonic_oscillator_c_ops,"(n_th, kappa, dimension)","Function: _harmonic_oscillator_c_ops(n_th, kappa, dimension)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brmesolve.py,python,function,test_jaynes_cummings_zero_temperature_spectral_callable,(),Function: test_jaynes_cummings_zero_temperature_spectral_callable(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brmesolve.py,python,function,test_tensor_system,(),Function: test_tensor_system(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brmesolve.py,python,function,test_solver_accepts_list_hamiltonian,(),Function: test_solver_accepts_list_hamiltonian(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brmesolve.py,python,function,test_jaynes_cummings_zero_temperature_spectral_str,(),Function: test_jaynes_cummings_zero_temperature_spectral_str(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brmesolve.py,python,function,_mixed_string,"(kappa, _)","Function: _mixed_string(kappa, _)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brmesolve.py,python,function,_separate_strings,"(kappa, _)","Function: _separate_strings(kappa, _)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brmesolve.py,python,function,_string_w_interpolating_t,"(kappa, times)","Function: _string_w_interpolating_t(kappa, times)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brmesolve.py,python,function,test_time_dependent_spline_in_c_ops,(),Function: test_time_dependent_spline_in_c_ops(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brmesolve.py,python,function,test_feedback,(),Function: test_feedback(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brmesolve.py,python,constant,,,Constant: _simple_qubit_gamma = 0.25,qutip,qutip,v5.0.4,,,,,_simple_qubit_gamma = 0.25,_simple_qubit_gamma,0.25,,,,,,,,,,,,
test_brmesolve.py,python,constant,,,"Constant: coeff = qutip.coefficient(lambda t, w: _simple_qubit_gamma * (w >= 0),
                          args={'w':0})",qutip,qutip,v5.0.4,,,,,"coeff = qutip.coefficient(lambda t, w: _simple_qubit_gamma * (w >= 0),
                          args={'w':0})",coeff,"qutip.coefficient(lambda t, w: _simple_qubit_gamma * (w >= 0),
                          args={'w':0})",,,,,,,,,,,,
test_brmesolve.py,python,constant,,,Constant: _m_c_op = np.sqrt(_simple_qubit_gamma) * qutip.sigmam(),qutip,qutip,v5.0.4,,,,,_m_c_op = np.sqrt(_simple_qubit_gamma) * qutip.sigmam(),_m_c_op,np.sqrt(_simple_qubit_gamma) * qutip.sigmam(),,,,,,,,,,,,
test_brmesolve.py,python,constant,,,Constant: _z_c_op = np.sqrt(_simple_qubit_gamma) * qutip.sigmaz(),qutip,qutip,v5.0.4,,,,,_z_c_op = np.sqrt(_simple_qubit_gamma) * qutip.sigmaz(),_z_c_op,np.sqrt(_simple_qubit_gamma) * qutip.sigmaz(),,,,,,,,,,,,
test_brmesolve.py,python,constant,,,"Constant: _x_a_op = [qutip.sigmax(), coeff]",qutip,qutip,v5.0.4,,,,,"_x_a_op = [qutip.sigmax(), coeff]",_x_a_op,"[qutip.sigmax(), coeff]",,,,,,,,,,,,
test_brmesolve.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_brmesolve.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_brmesolve.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_brmesolve.py,python,local_import,,,Import: brmesolve from qutip.solver.brmesolve,qutip,qutip,v5.0.4,from qutip.solver.brmesolve import brmesolve,brmesolve,qutip.solver.brmesolve,qutip.solver.brmesolve,,,,,,,,,,,,,,,
test_brmesolve.py,python,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_brmesolve.py,python,,,,Directory: qutip\tests\solver\test_brmesolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_correlation.py,python,class_method,,,"Class method: TestTimeDependence.test_varying_coefficient_hamiltonian_2ls(self, dependence_2ls)",qutip,qutip,v5.0.4,,,,,,,,,TestTimeDependence,test_varying_coefficient_hamiltonian_2ls,"(self, dependence_2ls)",,,,,,,,
test_correlation.py,python,class_method,,,Class method: TestTimeDependence.test_hamiltonian_from_function_2ls(self),qutip,qutip,v5.0.4,,,,,,,,,TestTimeDependence,test_hamiltonian_from_function_2ls,(self),,,,,,,,
test_correlation.py,python,class_method,,,"Class method: [pytest.mark.slow] TestTimeDependence.test_varying_coefficient_hamiltonian_c_ops_2ls(self, dependence_2ls)",qutip,qutip,v5.0.4,,,,,,,,,TestTimeDependence,test_varying_coefficient_hamiltonian_c_ops_2ls,"(self, dependence_2ls)",,,,pytest.mark.slow,,,,
test_correlation.py,python,class_method,,,"Class method: [pytest.mark.slow] TestTimeDependence.test_coefficient_c_ops_3ls(self, dependence_3ls)",qutip,qutip,v5.0.4,,,,,,,,,TestTimeDependence,test_coefficient_c_ops_3ls,"(self, dependence_3ls)",,,,pytest.mark.slow,,,,
test_correlation.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""dependence_3ls"", [
        pytest.param(_coefficient_string, id=""string""),
        pytest.param(_coefficient_function(_3ls_times, _3ls_args), id=""numpy""),
        pytest.param(_coefficient_function, id=""function""),
    ])] TestTimeDependence.test_coefficient_c_ops_3ls(self, dependence_3ls)",qutip,qutip,v5.0.4,,,,,,,,,TestTimeDependence,test_coefficient_c_ops_3ls,"(self, dependence_3ls)",,,,"pytest.mark.parametrize(""dependence_3ls"", [
        pytest.param(_coefficient_string, id=""string""),
        pytest.param(_coefficient_function(_3ls_times, _3ls_args), id=""numpy""),
        pytest.param(_coefficient_function, id=""function""),
    ])",,,,
test_correlation.py,python,class,,,Class: TestTimeDependence,qutip,qutip,v5.0.4,,,,,,,,,TestTimeDependence,,,,,,,,,,
test_correlation.py,python,function,_spectrum_wrapper,(solver),Function: _spectrum_wrapper(solver),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_correlation.py,python,function,_spectrum_fft,"(H, c_ops, a, b)","Function: _spectrum_fft(H, c_ops, a, b)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_correlation.py,python,function,_trapz_2d,"(z, xy)","Function: _trapz_2d(z, xy)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_correlation.py,python,function,_n_correlation,"(times, n)","Function: _n_correlation(times, n)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_correlation.py,python,function,_coefficient_function,"(t, args)","Function: _coefficient_function(t, args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_correlation.py,python,function,_h_qobj_function,"(t, args)","Function: _h_qobj_function(t, args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_correlation.py,python,function,_2ls_g2_0,"(H, c_ops)","Function: _2ls_g2_0(H, c_ops)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_correlation.py,python,function,_step,(t),Function: _step(t),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_correlation.py,python,function,test_hamiltonian_order_unimportant,(),Function: test_hamiltonian_order_unimportant(),qutip,qutip,v5.0.4,,,,,,,,"# Testing for regression on issue 1048.",,,,,,,,,,,
test_correlation.py,python,function,test_correlation_timedependant_op,(),Function: test_correlation_timedependant_op(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_correlation.py,python,function,test_alternative_solver,(),Function: test_alternative_solver(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_correlation.py,python,function,test_G1,(),Function: test_G1(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_correlation.py,python,function,test_G2,(),Function: test_G2(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_correlation.py,python,constant,,,"Constant: pytestmark = [pytest.mark.usefixtures(""in_temporary_directory"")]",qutip,qutip,v5.0.4,,,,,"pytestmark = [pytest.mark.usefixtures(""in_temporary_directory"")]",pytestmark,"[pytest.mark.usefixtures(""in_temporary_directory"")]",,,,,,,,,,,,
test_correlation.py,python,constant,,,Constant: _equivalence_dimension = 15,qutip,qutip,v5.0.4,,,,,_equivalence_dimension = 15,_equivalence_dimension,15,,,,,,,,,,,,
test_correlation.py,python,constant,,,"Constant: _equivalence_fock = qutip.fock(_equivalence_dimension, 1)",qutip,qutip,v5.0.4,,,,,"_equivalence_fock = qutip.fock(_equivalence_dimension, 1)",_equivalence_fock,"qutip.fock(_equivalence_dimension, 1)",,,,,,,,,,,,
test_correlation.py,python,constant,,,"Constant: _equivalence_coherent = qutip.coherent_dm(_equivalence_dimension, 2)",qutip,qutip,v5.0.4,,,,,"_equivalence_coherent = qutip.coherent_dm(_equivalence_dimension, 2)",_equivalence_coherent,"qutip.coherent_dm(_equivalence_dimension, 2)",,,,,,,,,,,,
test_correlation.py,python,constant,,,"Constant: _coefficient_string = ""exp(-(t-t_off)**2 / (2 * tp*tp))""",qutip,qutip,v5.0.4,,,,,"_coefficient_string = ""exp(-(t-t_off)**2 / (2 * tp*tp))""",_coefficient_string,"""exp(-(t-t_off)**2 / (2 * tp*tp))""",,,,,,,,,,,,
test_correlation.py,python,constant,,,"Constant: _2ls_args = {'H0': 2*qutip.sigmax(), 't_off': 1, 'tp': 0.5}",qutip,qutip,v5.0.4,,,,,"_2ls_args = {'H0': 2*qutip.sigmax(), 't_off': 1, 'tp': 0.5}",_2ls_args,"{'H0': 2*qutip.sigmax(), 't_off': 1, 'tp': 0.5}",,,,,,,,,,,,
test_correlation.py,python,constant,,,"Constant: _2ls_times = np.linspace(0, 5, 51)",qutip,qutip,v5.0.4,,,,,"_2ls_times = np.linspace(0, 5, 51)",_2ls_times,"np.linspace(0, 5, 51)",,,,,,,,,,,,
test_correlation.py,python,constant,,,"Constant: _3ls_args = {'t_off': 2, 'tp': 1}",qutip,qutip,v5.0.4,,,,,"_3ls_args = {'t_off': 2, 'tp': 1}",_3ls_args,"{'t_off': 2, 'tp': 1}",,,,,,,,,,,,
test_correlation.py,python,constant,,,"Constant: _3ls_times = np.linspace(0, 6, 20)",qutip,qutip,v5.0.4,,,,,"_3ls_times = np.linspace(0, 6, 20)",_3ls_times,"np.linspace(0, 6, 20)",,,,,,,,,,,,
test_correlation.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_correlation.py,python,import,,,Import: functools,qutip,qutip,v5.0.4,import functools,functools,,,,,,,,,,,,,,,,,
test_correlation.py,python,import,,,Import: product from itertools,qutip,qutip,v5.0.4,from itertools import product,product,itertools,,,,,,,,,,,,,,,,
test_correlation.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_correlation.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_correlation.py,python,local_import,,,Import: trapezoid from scipy.integrate,qutip,qutip,v5.0.4,from scipy.integrate import trapezoid,trapezoid,scipy.integrate,scipy.integrate,,,,,,,,,,,,,,,
test_correlation.py,python,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_correlation.py,python,,,,Directory: qutip\tests\solver\test_correlation.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_countstat.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_countstat.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_countstat.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_countstat.py,python,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_countstat.py,python,,,,Directory: qutip\tests\solver\test_countstat.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_floquet.py,python,class_method,,,Class method: TestFloquet.testFloquetBasis(self),qutip,qutip,v5.0.4,,,,,,,,,TestFloquet,testFloquetBasis,(self),,,,,,,,
test_floquet.py,python,class_method,,,Class method: TestFloquet.testFloquetUnitary(self),qutip,qutip,v5.0.4,,,,,,,,,TestFloquet,testFloquetUnitary,(self),,,,,,,,
test_floquet.py,python,class_method,,,Class method: TestFloquet.testFloquetMasterEquation1(self),qutip,qutip,v5.0.4,,,,,,,,,TestFloquet,testFloquetMasterEquation1,(self),,,,,,,,
test_floquet.py,python,class_method,,,Class method: TestFloquet.testFloquetMasterEquation2(self),qutip,qutip,v5.0.4,,,,,,,,,TestFloquet,testFloquetMasterEquation2,(self),,,,,,,,
test_floquet.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""kmax"", [5, 25, 100])] TestFloquet.testFloquetMasterEquation3(self, kmax)",qutip,qutip,v5.0.4,,,,,,,,,TestFloquet,testFloquetMasterEquation3,"(self, kmax)",,,,"pytest.mark.parametrize(""kmax"", [5, 25, 100])",,,,
test_floquet.py,python,class_method,,,Class method: TestFloquet.testFloquetMasterEquation_multiple_coupling(self),qutip,qutip,v5.0.4,,,,,,,,,TestFloquet,testFloquetMasterEquation_multiple_coupling,(self),,,,,,,,
test_floquet.py,python,class_method,,,Class method: TestFloquet.testFloquetRates(self),qutip,qutip,v5.0.4,,,,,,,,,TestFloquet,testFloquetRates,(self),,,,,,,,
test_floquet.py,python,class,,,Class: TestFloquet,qutip,qutip,v5.0.4,,,,,,,,,TestFloquet,,,,,,,,,,
test_floquet.py,python,function,_convert_c_ops,"(c_op_fmmesolve, noise_spectrum, vp, ep)","Function: _convert_c_ops(c_op_fmmesolve, noise_spectrum, vp, ep)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_floquet.py,python,function,test_fsesolve_fallback,(),Function: test_fsesolve_fallback(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_floquet.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_floquet.py,python,import,,,Import: sigmax from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",sigmax,qutip,,,,,,,,,,,,,,,,
test_floquet.py,python,import,,,Import: sigmay from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",sigmay,qutip,,,,,,,,,,,,,,,,
test_floquet.py,python,import,,,Import: sigmaz from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",sigmaz,qutip,,,,,,,,,,,,,,,,
test_floquet.py,python,import,,,Import: sigmap from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",sigmap,qutip,,,,,,,,,,,,,,,,
test_floquet.py,python,import,,,Import: sigmam from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",sigmam,qutip,,,,,,,,,,,,,,,,
test_floquet.py,python,import,,,Import: rand_ket from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",rand_ket,qutip,,,,,,,,,,,,,,,,
test_floquet.py,python,import,,,Import: num from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",num,qutip,,,,,,,,,,,,,,,,
test_floquet.py,python,import,,,Import: destroy from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",destroy,qutip,,,,,,,,,,,,,,,,
test_floquet.py,python,import,,,Import: mesolve from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",mesolve,qutip,,,,,,,,,,,,,,,,
test_floquet.py,python,import,,,Import: expect from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",expect,qutip,,,,,,,,,,,,,,,,
test_floquet.py,python,import,,,Import: sesolve from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",sesolve,qutip,,,,,,,,,,,,,,,,
test_floquet.py,python,import,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",Qobj,qutip,,,,,,,,,,,,,,,,
test_floquet.py,python,import,,,Import: QobjEvo from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",QobjEvo,qutip,,,,,,,,,,,,,,,,
test_floquet.py,python,import,,,Import: coefficient from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",coefficient,qutip,,,,,,,,,,,,,,,,
test_floquet.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_floquet.py,python,local_import,,,Import: FloquetBasis from qutip.solver.floquet,qutip,qutip,v5.0.4,"from qutip.solver.floquet import (
    FloquetBasis, floquet_tensor, fmmesolve, FMESolver,
    _floquet_delta_tensor, _floquet_X_matrices, fsesolve
)",FloquetBasis,qutip.solver.floquet,qutip.solver.floquet,,,,,,,,,,,,,,,
test_floquet.py,python,local_import,,,Import: floquet_tensor from qutip.solver.floquet,qutip,qutip,v5.0.4,"from qutip.solver.floquet import (
    FloquetBasis, floquet_tensor, fmmesolve, FMESolver,
    _floquet_delta_tensor, _floquet_X_matrices, fsesolve
)",floquet_tensor,qutip.solver.floquet,qutip.solver.floquet,,,,,,,,,,,,,,,
test_floquet.py,python,local_import,,,Import: fmmesolve from qutip.solver.floquet,qutip,qutip,v5.0.4,"from qutip.solver.floquet import (
    FloquetBasis, floquet_tensor, fmmesolve, FMESolver,
    _floquet_delta_tensor, _floquet_X_matrices, fsesolve
)",fmmesolve,qutip.solver.floquet,qutip.solver.floquet,,,,,,,,,,,,,,,
test_floquet.py,python,local_import,,,Import: FMESolver from qutip.solver.floquet,qutip,qutip,v5.0.4,"from qutip.solver.floquet import (
    FloquetBasis, floquet_tensor, fmmesolve, FMESolver,
    _floquet_delta_tensor, _floquet_X_matrices, fsesolve
)",FMESolver,qutip.solver.floquet,qutip.solver.floquet,,,,,,,,,,,,,,,
test_floquet.py,python,local_import,,,Import: _floquet_delta_tensor from qutip.solver.floquet,qutip,qutip,v5.0.4,"from qutip.solver.floquet import (
    FloquetBasis, floquet_tensor, fmmesolve, FMESolver,
    _floquet_delta_tensor, _floquet_X_matrices, fsesolve
)",_floquet_delta_tensor,qutip.solver.floquet,qutip.solver.floquet,,,,,,,,,,,,,,,
test_floquet.py,python,local_import,,,Import: _floquet_X_matrices from qutip.solver.floquet,qutip,qutip,v5.0.4,"from qutip.solver.floquet import (
    FloquetBasis, floquet_tensor, fmmesolve, FMESolver,
    _floquet_delta_tensor, _floquet_X_matrices, fsesolve
)",_floquet_X_matrices,qutip.solver.floquet,qutip.solver.floquet,,,,,,,,,,,,,,,
test_floquet.py,python,local_import,,,Import: fsesolve from qutip.solver.floquet,qutip,qutip,v5.0.4,"from qutip.solver.floquet import (
    FloquetBasis, floquet_tensor, fmmesolve, FMESolver,
    _floquet_delta_tensor, _floquet_X_matrices, fsesolve
)",fsesolve,qutip.solver.floquet,qutip.solver.floquet,,,,,,,,,,,,,,,
test_floquet.py,python,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_floquet.py,python,,,,Directory: qutip\tests\solver\test_floquet.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mcsolve.py,python,class_field,,,Class field: [instance] callable_qobj.oper = oper,qutip,qutip,v5.0.4,,,,,,,,,callable_qobj,__init__,"(self, oper, coeff=None)",self.oper = oper,self.oper = oper,,,,,,
test_mcsolve.py,python,class_field,,,Class field: [instance] callable_qobj.coeff = coeff,qutip,qutip,v5.0.4,,,,,,,,,callable_qobj,__init__,"(self, oper, coeff=None)",self.coeff = coeff,self.coeff = coeff,,,,,,
test_mcsolve.py,python,class_field,,,Class field: StatesAndExpectOutputCase.size = 10,qutip,qutip,v5.0.4,,,,,,,,,StatesAndExpectOutputCase,,,size = 10,,,,size,10,,
test_mcsolve.py,python,class_field,,,Class field: StatesAndExpectOutputCase.h = qutip.num(size),qutip,qutip,v5.0.4,,,,,,,,,StatesAndExpectOutputCase,,,h = qutip.num(size),,,,h,qutip.num(size),,
test_mcsolve.py,python,class_field,,,"Class field: StatesAndExpectOutputCase.state = qutip.basis(size, size-1)",qutip,qutip,v5.0.4,,,,,,,,,StatesAndExpectOutputCase,,,"state = qutip.basis(size, size-1)",,,,state,"qutip.basis(size, size-1)",,
test_mcsolve.py,python,class_field,,,"Class field: StatesAndExpectOutputCase.times = np.linspace(0, 1, 101)",qutip,qutip,v5.0.4,,,,,,,,,StatesAndExpectOutputCase,,,"times = np.linspace(0, 1, 101)",,,,times,"np.linspace(0, 1, 101)",,
test_mcsolve.py,python,class_field,,,Class field: StatesAndExpectOutputCase.e_ops = [qutip.num(size)],qutip,qutip,v5.0.4,,,,,,,,,StatesAndExpectOutputCase,,,e_ops = [qutip.num(size)],,,,e_ops,[qutip.num(size)],,
test_mcsolve.py,python,class_field,,,Class field: StatesAndExpectOutputCase.ntraj = 2000,qutip,qutip,v5.0.4,,,,,,,,,StatesAndExpectOutputCase,,,ntraj = 2000,,,,ntraj,2000,,
test_mcsolve.py,python,class_field,,,"Class field: TestSeeds.sizes = [6, 6, 6]",qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,,,"sizes = [6, 6, 6]",,,,sizes,"[6, 6, 6]",,
test_mcsolve.py,python,class_field,,,"Class field: TestSeeds.dampings = [0.1, 0.4, 0.1]",qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,,,"dampings = [0.1, 0.4, 0.1]",,,,dampings,"[0.1, 0.4, 0.1]",,
test_mcsolve.py,python,class_field,,,Class field: TestSeeds.ntraj = 25,qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,,,ntraj = 25,,,,ntraj,25,,
test_mcsolve.py,python,class_field,,,Class field: TestSeeds.a = [qutip.destroy(size) for size in sizes],qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,,,a = [qutip.destroy(size) for size in sizes],,,,a,[qutip.destroy(size) for size in sizes],,
test_mcsolve.py,python,class_field,,,"Class field: TestSeeds.H = 1j * (qutip.tensor(a[0], a[1].dag(), a[2].dag())
              - qutip.tensor(a[0].dag(), a[1], a[2]))",qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,,,"H = 1j * (qutip.tensor(a[0], a[1].dag(), a[2].dag())
              - qutip.tensor(a[0].dag(), a[1], a[2]))",,,,H,"1j * (qutip.tensor(a[0], a[1].dag(), a[2].dag())
              - qutip.tensor(a[0].dag(), a[1], a[2]))",,
test_mcsolve.py,python,class_field,,,"Class field: TestSeeds.state = qutip.tensor(qutip.coherent(sizes[0], np.sqrt(2)),
                         qutip.basis(sizes[1:], [0, 0]))",qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,,,"state = qutip.tensor(qutip.coherent(sizes[0], np.sqrt(2)),
                         qutip.basis(sizes[1:], [0, 0]))",,,,state,"qutip.tensor(qutip.coherent(sizes[0], np.sqrt(2)),
                         qutip.basis(sizes[1:], [0, 0]))",,
test_mcsolve.py,python,class_field,,,"Class field: TestSeeds.times = np.linspace(0, 10, 2)",qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,,,"times = np.linspace(0, 10, 2)",,,,times,"np.linspace(0, 10, 2)",,
test_mcsolve.py,python,class_field,,,"Class field: TestSeeds.c_ops = [
        np.sqrt(2*dampings[0]) * qutip.tensor(a[0], qutip.qeye(sizes[1:])),
        (np.sqrt(2*dampings[1])
         * qutip.tensor(qutip.qeye(sizes[0]), a[1], qutip.qeye(sizes[2]))),
        np.sqrt(2*dampings[2]) * qutip.tensor(qutip.qeye(sizes[:2]), a[2]),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,,,"c_ops = [
        np.sqrt(2*dampings[0]) * qutip.tensor(a[0], qutip.qeye(sizes[1:])),
        (np.sqrt(2*dampings[1])
         * qutip.tensor(qutip.qeye(sizes[0]), a[1], qutip.qeye(sizes[2]))),
        np.sqrt(2*dampings[2]) * qutip.tensor(qutip.qeye(sizes[:2]), a[2]),
    ]",,,,c_ops,"[
        np.sqrt(2*dampings[0]) * qutip.tensor(a[0], qutip.qeye(sizes[1:])),
        (np.sqrt(2*dampings[1])
         * qutip.tensor(qutip.qeye(sizes[0]), a[1], qutip.qeye(sizes[2]))),
        np.sqrt(2*dampings[2]) * qutip.tensor(qutip.qeye(sizes[:2]), a[2]),
    ]",,
test_mcsolve.py,python,class_method,,,"Class method: callable_qobj.__init__(self, oper, coeff=None)",qutip,qutip,v5.0.4,,,,,,,,,callable_qobj,__init__,"(self, oper, coeff=None)",,,,,,,,
test_mcsolve.py,python,class_method,,,"Class method: callable_qobj.__call__(self, t, args)",qutip,qutip,v5.0.4,,,,,,,,,callable_qobj,__call__,"(self, t, args)",,,,,,,,
test_mcsolve.py,python,class_method,,,"Class method: StatesAndExpectOutputCase._assert_states(self, result, expected, tol)",qutip,qutip,v5.0.4,,,,,,,,,StatesAndExpectOutputCase,_assert_states,"(self, result, expected, tol)",,,,,,,,
test_mcsolve.py,python,class_method,,,"Class method: StatesAndExpectOutputCase._assert_expect(self, result, expected, tol)",qutip,qutip,v5.0.4,,,,,,,,,StatesAndExpectOutputCase,_assert_expect,"(self, result, expected, tol)",,,,,,,,
test_mcsolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""improved_sampling"", [True, False])] StatesAndExpectOutputCase.test_states_and_expect(self, hamiltonian, args, c_ops, expected, tol,
                               improved_sampling)",qutip,qutip,v5.0.4,,,,,,,,,StatesAndExpectOutputCase,test_states_and_expect,"(self, hamiltonian, args, c_ops, expected, tol,
                               improved_sampling)",,,,"pytest.mark.parametrize(""improved_sampling"", [True, False])",,,,
test_mcsolve.py,python,class_method,,,"Class method: TestNoCollapse.pytest_generate_tests(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,,,TestNoCollapse,pytest_generate_tests,"(self, metafunc)",,,,,,,,
test_mcsolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""improved_sampling"", [True, False])] TestNoCollapse.test_states_only(self, hamiltonian, args, c_ops, expected, tol,
                         improved_sampling)",qutip,qutip,v5.0.4,,,,,,,,,TestNoCollapse,test_states_only,"(self, hamiltonian, args, c_ops, expected, tol,
                         improved_sampling)",,,,"pytest.mark.parametrize(""improved_sampling"", [True, False])",,,,
test_mcsolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""improved_sampling"", [True, False])] TestNoCollapse.test_expect_only(self, hamiltonian, args, c_ops, expected, tol,
                         improved_sampling)",qutip,qutip,v5.0.4,,,,,,,,,TestNoCollapse,test_expect_only,"(self, hamiltonian, args, c_ops, expected, tol,
                         improved_sampling)",,,,"pytest.mark.parametrize(""improved_sampling"", [True, False])",,,,
test_mcsolve.py,python,class_method,,,"Class method: TestConstantCollapse.pytest_generate_tests(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,,,TestConstantCollapse,pytest_generate_tests,"(self, metafunc)",,,,,,,,
test_mcsolve.py,python,class_method,,,"Class method: TestTimeDependentCollapse.pytest_generate_tests(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,,,TestTimeDependentCollapse,pytest_generate_tests,"(self, metafunc)",,,,,,,,
test_mcsolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""improved_sampling"", [True, False])] TestSeeds.test_seeds_can_be_reused(self, improved_sampling)",qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,test_seeds_can_be_reused,"(self, improved_sampling)",,,,"pytest.mark.parametrize(""improved_sampling"", [True, False])",,,,
test_mcsolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""improved_sampling"", [True, False])] TestSeeds.test_seeds_are_not_reused_by_default(self, improved_sampling)",qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,test_seeds_are_not_reused_by_default,"(self, improved_sampling)",,,,"pytest.mark.parametrize(""improved_sampling"", [True, False])",,,,
test_mcsolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""seed"", [1, np.random.SeedSequence(2)])] TestSeeds.test_seed_type(self, seed, improved_sampling)",qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,test_seed_type,"(self, seed, improved_sampling)",,,,"pytest.mark.parametrize(""seed"", [1, np.random.SeedSequence(2)])",,,,
test_mcsolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""improved_sampling"", [True, False])] TestSeeds.test_seed_type(self, seed, improved_sampling)",qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,test_seed_type,"(self, seed, improved_sampling)",,,,"pytest.mark.parametrize(""improved_sampling"", [True, False])",,,,
test_mcsolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""improved_sampling"", [True, False])] TestSeeds.test_bad_seed(self, improved_sampling)",qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,test_bad_seed,"(self, improved_sampling)",,,,"pytest.mark.parametrize(""improved_sampling"", [True, False])",,,,
test_mcsolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize(""improved_sampling"", [True, False])] TestSeeds.test_generator(self, improved_sampling)",qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,test_generator,"(self, improved_sampling)",,,,"pytest.mark.parametrize(""improved_sampling"", [True, False])",,,,
test_mcsolve.py,python,class_method,,,Class method: TestSeeds.test_stepping(self),qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,test_stepping,(self),,,,,,,,
test_mcsolve.py,python,class,,,Class: callable_qobj,qutip,qutip,v5.0.4,,,,,,,,,callable_qobj,,,,,,,,,,
test_mcsolve.py,python,class,,,Class: StatesAndExpectOutputCase,qutip,qutip,v5.0.4,,,,,,,,,StatesAndExpectOutputCase,,,,,,,,,,
test_mcsolve.py,python,class,,,Class: TestNoCollapse(StatesAndExpectOutputCase),qutip,qutip,v5.0.4,,,,,,,,,TestNoCollapse,,,,,(StatesAndExpectOutputCase),,,,,
test_mcsolve.py,python,class,,,Class: TestConstantCollapse(StatesAndExpectOutputCase),qutip,qutip,v5.0.4,,,,,,,,,TestConstantCollapse,,,,,(StatesAndExpectOutputCase),,,,,
test_mcsolve.py,python,class,,,Class: TestTimeDependentCollapse(StatesAndExpectOutputCase),qutip,qutip,v5.0.4,,,,,,,,,TestTimeDependentCollapse,,,,,(StatesAndExpectOutputCase),,,,,
test_mcsolve.py,python,class,,,Class: TestSeeds,qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,,,,,,,,,,
test_mcsolve.py,python,function,_return_constant,"(t, args)","Function: _return_constant(t, args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mcsolve.py,python,function,_return_decay,"(t, args)","Function: _return_decay(t, args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mcsolve.py,python,function,test_stored_collapse_operators_and_times,(),Function: test_stored_collapse_operators_and_times(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mcsolve.py,python,function,test_MCSolver_run,(),Function: test_MCSolver_run(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mcsolve.py,python,function,test_MCSolver_stepping,(),Function: test_MCSolver_stepping(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mcsolve.py,python,function,_coeff_collapse,"(t, A)","Function: _coeff_collapse(t, A)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mcsolve.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_mcsolve.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_mcsolve.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_mcsolve.py,python,import,,,Import: copy from copy,qutip,qutip,v5.0.4,from copy import copy,copy,copy,,,,,,,,,,,,,,,,
test_mcsolve.py,python,local_import,,,Import: mcsolve from qutip.solver.mcsolve,qutip,qutip,v5.0.4,"from qutip.solver.mcsolve import mcsolve, MCSolver",mcsolve,qutip.solver.mcsolve,qutip.solver.mcsolve,,,,,,,,,,,,,,,
test_mcsolve.py,python,local_import,,,Import: MCSolver from qutip.solver.mcsolve,qutip,qutip,v5.0.4,"from qutip.solver.mcsolve import mcsolve, MCSolver",MCSolver,qutip.solver.mcsolve,qutip.solver.mcsolve,,,,,,,,,,,,,,,
test_mcsolve.py,python,local_import,,,Import: Solver from qutip.solver.solver_base,qutip,qutip,v5.0.4,from qutip.solver.solver_base import Solver,Solver,qutip.solver.solver_base,qutip.solver.solver_base,,,,,,,,,,,,,,,
test_mcsolve.py,python,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mcsolve.py,python,,,,Directory: qutip\tests\solver\test_mcsolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mesolve.py,python,class_field,,,Class field: TestMESolveDecay.N = 10,qutip,qutip,v5.0.4,,,,,,,,,TestMESolveDecay,,,N = 10,,,,N,10,,
test_mesolve.py,python,class_field,,,Class field: TestMESolveDecay.a = qutip.destroy(N),qutip,qutip,v5.0.4,,,,,,,,,TestMESolveDecay,,,a = qutip.destroy(N),,,,a,qutip.destroy(N),,
test_mesolve.py,python,class_field,,,Class field: TestMESolveDecay.kappa = 0.2,qutip,qutip,v5.0.4,,,,,,,,,TestMESolveDecay,,,kappa = 0.2,,,,kappa,0.2,,
test_mesolve.py,python,class_field,,,"Class field: TestMESolveDecay.tlist = np.linspace(0, 10, 201)",qutip,qutip,v5.0.4,,,,,,,,,TestMESolveDecay,,,"tlist = np.linspace(0, 10, 201)",,,,tlist,"np.linspace(0, 10, 201)",,
test_mesolve.py,python,class_field,,,Class field: TestMESolveDecay.ada = a.dag() * a,qutip,qutip,v5.0.4,,,,,,,,,TestMESolveDecay,,,ada = a.dag() * a,,,,ada,a.dag() * a,,
test_mesolve.py,python,class_field,,,Class field: TestMESolveDecay.c_ops_1 = c_ops,qutip,qutip,v5.0.4,,,,,,,,,TestMESolveDecay,,,c_ops_1 = c_ops,,,,c_ops_1,c_ops,,
test_mesolve.py,python,class_field,,,"Class field: TestMESolveStepFuncCoeff.options = {""method"": ""dop853"", ""nsteps"": 1e8, ""progress_bar"": None}",qutip,qutip,v5.0.4,,,,,,,,,TestMESolveStepFuncCoeff,,,"options = {""method"": ""dop853"", ""nsteps"": 1e8, ""progress_bar"": None}",,,,options,"{""method"": ""dop853"", ""nsteps"": 1e8, ""progress_bar"": None}",,
test_mesolve.py,python,class_method,,,"Class method: [pytest.fixture(params=[
        pytest.param([ada, lambda t, args: 1], id='Hlist_func'),
        pytest.param([ada, '1'], id='Hlist_str'),
        pytest.param([ada, np.ones_like(tlist)], id='Hlist_array'),
        pytest.param(qutip.QobjEvo([ada, '1']), id='HQobjEvo'),
        pytest.param(lambda t, args: qutip.create(10) * qutip.destroy(10),
                     id='func'),
    ])] TestMESolveDecay.H(self, request)",qutip,qutip,v5.0.4,,,,,,,,,TestMESolveDecay,H,"(self, request)",,,,"pytest.fixture(params=[
        pytest.param([ada, lambda t, args: 1], id='Hlist_func'),
        pytest.param([ada, '1'], id='Hlist_str'),
        pytest.param([ada, np.ones_like(tlist)], id='Hlist_array'),
        pytest.param(qutip.QobjEvo([ada, '1']), id='HQobjEvo'),
        pytest.param(lambda t, args: qutip.create(10) * qutip.destroy(10),
                     id='func'),
    ])",,,,
test_mesolve.py,python,class_method,,,"Class method: [pytest.fixture(params=[
        pytest.param(np.sqrt(kappa) * a,
                     id='const'),
        pytest.param(lambda t, args: (np.sqrt(args['kappa'])
                                      * qutip.destroy(10)),
                     id='func'),
        pytest.param([a, lambda t, args: np.sqrt(args['kappa'])],
                     id='list_func'),
        pytest.param([a, 'sqrt(kappa)'],
                     id='list_str'),
        pytest.param([a, np.sqrt(kappa) * np.ones_like(tlist)],
                     id='list_array'),
        pytest.param(qutip.QobjEvo([a, 'sqrt(kappa)'], args={'kappa': kappa}),
                     id='QobjEvo'),
    ])] TestMESolveDecay.cte_c_ops(self, request)",qutip,qutip,v5.0.4,,,,,,,,,TestMESolveDecay,cte_c_ops,"(self, request)",,,,"pytest.fixture(params=[
        pytest.param(np.sqrt(kappa) * a,
                     id='const'),
        pytest.param(lambda t, args: (np.sqrt(args['kappa'])
                                      * qutip.destroy(10)),
                     id='func'),
        pytest.param([a, lambda t, args: np.sqrt(args['kappa'])],
                     id='list_func'),
        pytest.param([a, 'sqrt(kappa)'],
                     id='list_str'),
        pytest.param([a, np.sqrt(kappa) * np.ones_like(tlist)],
                     id='list_array'),
        pytest.param(qutip.QobjEvo([a, 'sqrt(kappa)'], args={'kappa': kappa}),
                     id='QobjEvo'),
    ])",,,,
test_mesolve.py,python,class_method,,,"Class method: [pytest.fixture(params=[
        pytest.param([a, lambda t, args: np.sqrt(args['kappa'] * np.exp(-t))],
                  id='list_func'),
        pytest.param([a, 'sqrt(kappa * exp(-t))'],
                  id='list_str'),
        pytest.param([a, np.sqrt(kappa * np.exp(-tlist))],
                  id='list_array'),
        pytest.param(qutip.QobjEvo([a, 'sqrt(kappa * exp(-t))'],
                          args={'kappa': kappa}),
                  id='QobjEvo'),
        pytest.param(lambda t, args: (np.sqrt(args['kappa'] * np.exp(-t)) *
                                      qutip.destroy(10)),
                     id='func'),
    ])] TestMESolveDecay.c_ops(self, request)",qutip,qutip,v5.0.4,,,,,,,,,TestMESolveDecay,c_ops,"(self, request)",,,,"pytest.fixture(params=[
        pytest.param([a, lambda t, args: np.sqrt(args['kappa'] * np.exp(-t))],
                  id='list_func'),
        pytest.param([a, 'sqrt(kappa * exp(-t))'],
                  id='list_str'),
        pytest.param([a, np.sqrt(kappa * np.exp(-tlist))],
                  id='list_array'),
        pytest.param(qutip.QobjEvo([a, 'sqrt(kappa * exp(-t))'],
                          args={'kappa': kappa}),
                  id='QobjEvo'),
        pytest.param(lambda t, args: (np.sqrt(args['kappa'] * np.exp(-t)) *
                                      qutip.destroy(10)),
                     id='func'),
    ])",,,,
test_mesolve.py,python,class_method,,,"Class method: TestMESolveDecay.testME_CteDecay(self, cte_c_ops)",qutip,qutip,v5.0.4,,,,,,,,,TestMESolveDecay,testME_CteDecay,"(self, cte_c_ops)",,,,,,,,
test_mesolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize('method',
                             all_ode_method, ids=all_ode_method)] TestMESolveDecay.testME_TDDecay(self, c_ops, method)",qutip,qutip,v5.0.4,,,,,,,,,TestMESolveDecay,testME_TDDecay,"(self, c_ops, method)",,,,"pytest.mark.parametrize('method',
                             all_ode_method, ids=all_ode_method)",,,,
test_mesolve.py,python,class_method,,,"Class method: TestMESolveDecay.testME_2TDDecay(self, c_ops, c_ops_1)",qutip,qutip,v5.0.4,,,,,,,,,TestMESolveDecay,testME_2TDDecay,"(self, c_ops, c_ops_1)",,,,,,,,
test_mesolve.py,python,class_method,,,"Class method: TestMESolveDecay.testME_TDH_TDDecay(self, H, c_ops)",qutip,qutip,v5.0.4,,,,,,,,,TestMESolveDecay,testME_TDH_TDDecay,"(self, H, c_ops)",,,,,,,,
test_mesolve.py,python,class_method,,,"Class method: TestMESolveDecay.testME_TDH_longTDDecay(self, H, c_ops)",qutip,qutip,v5.0.4,,,,,,,,,TestMESolveDecay,testME_TDH_longTDDecay,"(self, H, c_ops)",,,,,,,,
test_mesolve.py,python,class_method,,,"Class method: TestMESolveDecay.testME_TDDecayUnitary(self, c_ops)",qutip,qutip,v5.0.4,,,,,,,,,TestMESolveDecay,testME_TDDecayUnitary,"(self, c_ops)",,,,,,,,
test_mesolve.py,python,class_method,,,"Class method: TestMESolveDecay.testME_TDDecayliouvillian(self, c_ops)",qutip,qutip,v5.0.4,,,,,,,,,TestMESolveDecay,testME_TDDecayliouvillian,"(self, c_ops)",,,,,,,,
test_mesolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['state_type'], [
        pytest.param(""ket"", id=""ket""),
        pytest.param(""dm"", id=""dm""),
        pytest.param(""unitary"", id=""unitary""),
    ])] TestMESolveDecay.test_mesolve_normalization(self, state_type)",qutip,qutip,v5.0.4,,,,,,,,,TestMESolveDecay,test_mesolve_normalization,"(self, state_type)",,,,"pytest.mark.parametrize(['state_type'], [
        pytest.param(""ket"", id=""ket""),
        pytest.param(""dm"", id=""dm""),
        pytest.param(""unitary"", id=""unitary""),
    ])",,,,
test_mesolve.py,python,class_method,,,Class method: TestMESolveDecay.test_mesolver_pickling(self),qutip,qutip,v5.0.4,,,,,,,,,TestMESolveDecay,test_mesolver_pickling,(self),,,,,,,,
test_mesolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize('method',
                             all_ode_method, ids=all_ode_method)] TestMESolveDecay.test_mesolver_stepping(self, method)",qutip,qutip,v5.0.4,,,,,,,,,TestMESolveDecay,test_mesolver_stepping,"(self, method)",,,,"pytest.mark.parametrize('method',
                             all_ode_method, ids=all_ode_method)",,,,
test_mesolve.py,python,class_method,,,"Class method: TestJCModelEvolution.qubit_integrate(self, tlist, psi0, epsilon, delta, g1, g2)",qutip,qutip,v5.0.4,,,,,,,,,TestJCModelEvolution,qubit_integrate,"(self, tlist, psi0, epsilon, delta, g1, g2)",,,,,,,,
test_mesolve.py,python,class_method,,,"Class method: TestJCModelEvolution.jc_steadystate(self, N, wc, wa, g, kappa, gamma,
                       pump, psi0, use_rwa, tlist)",qutip,qutip,v5.0.4,,,,,,,,,TestJCModelEvolution,jc_steadystate,"(self, N, wc, wa, g, kappa, gamma,
                       pump, psi0, use_rwa, tlist)",,,,,,,,
test_mesolve.py,python,class_method,,,"Class method: TestJCModelEvolution.jc_integrate(self, N, wc, wa, g, kappa, gamma,
                     pump, psi0, use_rwa, tlist, oper_evo=False)",qutip,qutip,v5.0.4,,,,,,,,,TestJCModelEvolution,jc_integrate,"(self, N, wc, wa, g, kappa, gamma,
                     pump, psi0, use_rwa, tlist, oper_evo=False)",,,,,,,,
test_mesolve.py,python,class_method,,,Class method: TestJCModelEvolution.testSuperJC(self),qutip,qutip,v5.0.4,,,,,,,,,TestJCModelEvolution,testSuperJC,(self),,,,,,,,
test_mesolve.py,python,class_method,,,Class method: TestJCModelEvolution.testQubitDynamics1(self),qutip,qutip,v5.0.4,,,,,,,,,TestJCModelEvolution,testQubitDynamics1,(self),,,,,,,,
test_mesolve.py,python,class_method,,,Class method: TestJCModelEvolution.testQubitDynamics2(self),qutip,qutip,v5.0.4,,,,,,,,,TestJCModelEvolution,testQubitDynamics2,(self),,,,,,,,
test_mesolve.py,python,class_method,,,Class method: TestJCModelEvolution.testCavity1(self),qutip,qutip,v5.0.4,,,,,,,,,TestJCModelEvolution,testCavity1,(self),,,,,,,,
test_mesolve.py,python,class_method,,,Class method: TestJCModelEvolution.testCavity2(self),qutip,qutip,v5.0.4,,,,,,,,,TestJCModelEvolution,testCavity2,(self),,,,,,,,
test_mesolve.py,python,class_method,,,Class method: TestJCModelEvolution.testCavity3(self),qutip,qutip,v5.0.4,,,,,,,,,TestJCModelEvolution,testCavity3,(self),,,,,,,,
test_mesolve.py,python,class_method,,,"Class method: TestMESolveStepFuncCoeff.python_coeff(self, t, args)",qutip,qutip,v5.0.4,,,,,,,,,TestMESolveStepFuncCoeff,python_coeff,"(self, t, args)",,,,,,,,
test_mesolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize('method',
                             all_ode_method, ids=all_ode_method)] TestMESolveStepFuncCoeff.test_py_coeff(self, method)",qutip,qutip,v5.0.4,,,,,,,,,TestMESolveStepFuncCoeff,test_py_coeff,"(self, method)",,,,"pytest.mark.parametrize('method',
                             all_ode_method, ids=all_ode_method)",,,,
test_mesolve.py,python,class_method,,,Class method: TestMESolveStepFuncCoeff.test_array_cte_coeff(self),qutip,qutip,v5.0.4,,,,,,,,,TestMESolveStepFuncCoeff,test_array_cte_coeff,(self),,,,,,,,
test_mesolve.py,python,class_method,,,Class method: TestMESolveStepFuncCoeff.test_array_t_coeff(self),qutip,qutip,v5.0.4,,,,,,,,,TestMESolveStepFuncCoeff,test_array_t_coeff,(self),,,,,,,,
test_mesolve.py,python,class_method,,,Class method: TestMESolveStepFuncCoeff.test_array_str_coeff(self),qutip,qutip,v5.0.4,,,,,,,,,TestMESolveStepFuncCoeff,test_array_str_coeff,(self),,,,,,,,
test_mesolve.py,python,class_method,,,Class method: TestMESolveStepFuncCoeff.test_array_str_py_coeff(self),qutip,qutip,v5.0.4,,,,,,,,,TestMESolveStepFuncCoeff,test_array_str_py_coeff,(self),,,,,,,,
test_mesolve.py,python,class,,,Class: TestMESolveDecay,qutip,qutip,v5.0.4,,,,,,,,,TestMESolveDecay,,,,,,,,,,
test_mesolve.py,python,class,,,Class: TestJCModelEvolution,qutip,qutip,v5.0.4,,,,,,,,,TestJCModelEvolution,,,,,,,,,,
test_mesolve.py,python,class,,,Class: TestMESolveStepFuncCoeff,qutip,qutip,v5.0.4,,,,,,,,,TestMESolveStepFuncCoeff,,,,,,,,,,
test_mesolve.py,python,function,fidelitycheck,"(out1, out2, rho0vec)","Function: fidelitycheck(out1, out2, rho0vec)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mesolve.py,python,function,test_num_collapse_set,(),Function: test_num_collapse_set(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mesolve.py,python,function,test_mesolve_bad_H,(),Function: test_mesolve_bad_H(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mesolve.py,python,function,test_mesolve_bad_state,(),Function: test_mesolve_bad_state(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mesolve.py,python,function,test_mesolve_bad_options,(),Function: test_mesolve_bad_options(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mesolve.py,python,function,test_feedback,(),Function: test_feedback(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mesolve.py,python,constant,,,"Constant: all_ode_method = [
    method for method, integrator in MESolver.avail_integrators().items()
    if integrator.support_time_dependant
]",qutip,qutip,v5.0.4,,,,,"all_ode_method = [
    method for method, integrator in MESolver.avail_integrators().items()
    if integrator.support_time_dependant
]",all_ode_method,"[
    method for method, integrator in MESolver.avail_integrators().items()
    if integrator.support_time_dependant
]",,,,,,,,,,,,
test_mesolve.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_mesolve.py,python,import,,,Import: FunctionType from types,qutip,qutip,v5.0.4,from types import FunctionType,FunctionType,types,,,,,,,,,,,,,,,,
test_mesolve.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_mesolve.py,python,import,,,Import: pickle,qutip,qutip,v5.0.4,import pickle,pickle,,,,,,,,,,,,,,,,,
test_mesolve.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_mesolve.py,python,local_import,,,Import: mesolve from qutip.solver.mesolve,qutip,qutip,v5.0.4,"from qutip.solver.mesolve import mesolve, MESolver",mesolve,qutip.solver.mesolve,qutip.solver.mesolve,,,,,,,,,,,,,,,
test_mesolve.py,python,local_import,,,Import: MESolver from qutip.solver.mesolve,qutip,qutip,v5.0.4,"from qutip.solver.mesolve import mesolve, MESolver",MESolver,qutip.solver.mesolve,qutip.solver.mesolve,,,,,,,,,,,,,,,
test_mesolve.py,python,local_import,,,Import: Solver from qutip.solver.solver_base,qutip,qutip,v5.0.4,from qutip.solver.solver_base import Solver,Solver,qutip.solver.solver_base,qutip.solver.solver_base,,,,,,,,,,,,,,,
test_mesolve.py,python,local_import,,,Import: WARN_MISSING_MODULE from qutip.core.coefficient,qutip,qutip,v5.0.4,from qutip.core.coefficient import WARN_MISSING_MODULE,WARN_MISSING_MODULE,qutip.core.coefficient,qutip.core.coefficient,,,,,,,,,,,,,,,
test_mesolve.py,python,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_mesolve.py,python,,,,Directory: qutip\tests\solver\test_mesolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,class_field,,,Class field: [instance] callable_qobj.oper = oper,qutip,qutip,v5.0.4,,,,,,,,,callable_qobj,__init__,"(self, oper, coeff=None)",self.oper = oper,self.oper = oper,,,,,,
test_nm_mcsolve.py,python,class_field,,,Class field: [instance] callable_qobj.coeff = coeff,qutip,qutip,v5.0.4,,,,,,,,,callable_qobj,__init__,"(self, oper, coeff=None)",self.coeff = coeff,self.coeff = coeff,,,,,,
test_nm_mcsolve.py,python,class_field,,,Class field: StatesAndExpectOutputCase.size = 10,qutip,qutip,v5.0.4,,,,,,,,,StatesAndExpectOutputCase,,,size = 10,,,,size,10,,
test_nm_mcsolve.py,python,class_field,,,Class field: StatesAndExpectOutputCase.h = qutip.num(size),qutip,qutip,v5.0.4,,,,,,,,,StatesAndExpectOutputCase,,,h = qutip.num(size),,,,h,qutip.num(size),,
test_nm_mcsolve.py,python,class_field,,,"Class field: StatesAndExpectOutputCase.state = qutip.basis(size, size-1)",qutip,qutip,v5.0.4,,,,,,,,,StatesAndExpectOutputCase,,,"state = qutip.basis(size, size-1)",,,,state,"qutip.basis(size, size-1)",,
test_nm_mcsolve.py,python,class_field,,,"Class field: StatesAndExpectOutputCase.times = np.linspace(0, 1, 101)",qutip,qutip,v5.0.4,,,,,,,,,StatesAndExpectOutputCase,,,"times = np.linspace(0, 1, 101)",,,,times,"np.linspace(0, 1, 101)",,
test_nm_mcsolve.py,python,class_field,,,Class field: StatesAndExpectOutputCase.e_ops = [qutip.num(size)],qutip,qutip,v5.0.4,,,,,,,,,StatesAndExpectOutputCase,,,e_ops = [qutip.num(size)],,,,e_ops,[qutip.num(size)],,
test_nm_mcsolve.py,python,class_field,,,Class field: StatesAndExpectOutputCase.ntraj = 2000,qutip,qutip,v5.0.4,,,,,,,,,StatesAndExpectOutputCase,,,ntraj = 2000,,,,ntraj,2000,,
test_nm_mcsolve.py,python,class_field,,,"Class field: TestSeeds.sizes = [6, 6, 6]",qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,,,"sizes = [6, 6, 6]",,,,sizes,"[6, 6, 6]",,
test_nm_mcsolve.py,python,class_field,,,"Class field: TestSeeds.dampings = [0.1, 0.4, 0.1]",qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,,,"dampings = [0.1, 0.4, 0.1]",,,,dampings,"[0.1, 0.4, 0.1]",,
test_nm_mcsolve.py,python,class_field,,,Class field: TestSeeds.ntraj = 25,qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,,,ntraj = 25,,,,ntraj,25,,
test_nm_mcsolve.py,python,class_field,,,Class field: TestSeeds.a = [qutip.destroy(size) for size in sizes],qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,,,a = [qutip.destroy(size) for size in sizes],,,,a,[qutip.destroy(size) for size in sizes],,
test_nm_mcsolve.py,python,class_field,,,"Class field: TestSeeds.H = 1j * (qutip.tensor(a[0], a[1].dag(), a[2].dag())
              - qutip.tensor(a[0].dag(), a[1], a[2]))",qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,,,"H = 1j * (qutip.tensor(a[0], a[1].dag(), a[2].dag())
              - qutip.tensor(a[0].dag(), a[1], a[2]))",,,,H,"1j * (qutip.tensor(a[0], a[1].dag(), a[2].dag())
              - qutip.tensor(a[0].dag(), a[1], a[2]))",,
test_nm_mcsolve.py,python,class_field,,,"Class field: TestSeeds.state = qutip.tensor(qutip.coherent(sizes[0], np.sqrt(2)),
                         qutip.basis(sizes[1:], [0, 0]))",qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,,,"state = qutip.tensor(qutip.coherent(sizes[0], np.sqrt(2)),
                         qutip.basis(sizes[1:], [0, 0]))",,,,state,"qutip.tensor(qutip.coherent(sizes[0], np.sqrt(2)),
                         qutip.basis(sizes[1:], [0, 0]))",,
test_nm_mcsolve.py,python,class_field,,,"Class field: TestSeeds.times = np.linspace(0, 10, 2)",qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,,,"times = np.linspace(0, 10, 2)",,,,times,"np.linspace(0, 10, 2)",,
test_nm_mcsolve.py,python,class_field,,,"Class field: TestSeeds.ops_and_rates = [
        (qutip.tensor(a[0], qutip.qeye(sizes[1:])), 2 * dampings[0]),
        (
            qutip.tensor(qutip.qeye(sizes[0]), a[1], qutip.qeye(sizes[2])),
            2 * dampings[1],
        ),
        (qutip.tensor(qutip.qeye(sizes[:2]), a[2]), 2 * dampings[2]),
    ]",qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,,,"ops_and_rates = [
        (qutip.tensor(a[0], qutip.qeye(sizes[1:])), 2 * dampings[0]),
        (
            qutip.tensor(qutip.qeye(sizes[0]), a[1], qutip.qeye(sizes[2])),
            2 * dampings[1],
        ),
        (qutip.tensor(qutip.qeye(sizes[:2]), a[2]), 2 * dampings[2]),
    ]",,,,ops_and_rates,"[
        (qutip.tensor(a[0], qutip.qeye(sizes[1:])), 2 * dampings[0]),
        (
            qutip.tensor(qutip.qeye(sizes[0]), a[1], qutip.qeye(sizes[2])),
            2 * dampings[1],
        ),
        (qutip.tensor(qutip.qeye(sizes[:2]), a[2]), 2 * dampings[2]),
    ]",,
test_nm_mcsolve.py,python,class_method,,,"Class method: callable_qobj.__init__(self, oper, coeff=None)",qutip,qutip,v5.0.4,,,,,,,,,callable_qobj,__init__,"(self, oper, coeff=None)",,,,,,,,
test_nm_mcsolve.py,python,class_method,,,"Class method: callable_qobj.__call__(self, t, args)",qutip,qutip,v5.0.4,,,,,,,,,callable_qobj,__call__,"(self, t, args)",,,,,,,,
test_nm_mcsolve.py,python,class_method,,,"Class method: StatesAndExpectOutputCase._assert_states(self, result, expected, tol)",qutip,qutip,v5.0.4,,,,,,,,,StatesAndExpectOutputCase,_assert_states,"(self, result, expected, tol)",,,,,,,,
test_nm_mcsolve.py,python,class_method,,,"Class method: StatesAndExpectOutputCase._assert_expect(self, result, expected, tol)",qutip,qutip,v5.0.4,,,,,,,,,StatesAndExpectOutputCase,_assert_expect,"(self, result, expected, tol)",,,,,,,,
test_nm_mcsolve.py,python,class_method,,,"Class method: StatesAndExpectOutputCase.test_states_and_expect(
        self, hamiltonian, args, ops_and_rates, expected, tol
    )",qutip,qutip,v5.0.4,,,,,,,,,StatesAndExpectOutputCase,test_states_and_expect,"(
        self, hamiltonian, args, ops_and_rates, expected, tol
    )",,,,,,,,
test_nm_mcsolve.py,python,class_method,,,"Class method: TestNoCollapse.pytest_generate_tests(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,,,TestNoCollapse,pytest_generate_tests,"(self, metafunc)",,,,,,,,
test_nm_mcsolve.py,python,class_method,,,"Class method: TestNoCollapse.test_states_only(
        self, hamiltonian, args, ops_and_rates, expected, tol
    )",qutip,qutip,v5.0.4,,,,,,,,,TestNoCollapse,test_states_only,"(
        self, hamiltonian, args, ops_and_rates, expected, tol
    )",,,,,,,,
test_nm_mcsolve.py,python,class_method,,,"Class method: TestNoCollapse.test_expect_only(
        self, hamiltonian, args, ops_and_rates, expected, tol
    )",qutip,qutip,v5.0.4,,,,,,,,,TestNoCollapse,test_expect_only,"(
        self, hamiltonian, args, ops_and_rates, expected, tol
    )",,,,,,,,
test_nm_mcsolve.py,python,class_method,,,"Class method: TestConstantCollapse.pytest_generate_tests(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,,,TestConstantCollapse,pytest_generate_tests,"(self, metafunc)",,,,,,,,
test_nm_mcsolve.py,python,class_method,,,"Class method: TestTimeDependentCollapse.pytest_generate_tests(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,,,TestTimeDependentCollapse,pytest_generate_tests,"(self, metafunc)",,,,,,,,
test_nm_mcsolve.py,python,class_method,,,Class method: TestSeeds.test_seeds_can_be_reused(self),qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,test_seeds_can_be_reused,(self),,,,,,,,
test_nm_mcsolve.py,python,class_method,,,Class method: TestSeeds.test_seeds_are_not_reused_by_default(self),qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,test_seeds_are_not_reused_by_default,(self),,,,,,,,
test_nm_mcsolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize('seed', [1, np.random.SeedSequence(2)])] TestSeeds.test_seed_type(self, seed)",qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,test_seed_type,"(self, seed)",,,,"pytest.mark.parametrize('seed', [1, np.random.SeedSequence(2)])",,,,
test_nm_mcsolve.py,python,class_method,,,Class method: TestSeeds.test_bad_seed(self),qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,test_bad_seed,(self),,,,,,,,
test_nm_mcsolve.py,python,class_method,,,Class method: TestSeeds.test_generator(self),qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,test_generator,(self),,,,,,,,
test_nm_mcsolve.py,python,class_method,,,Class method: TestSeeds.test_stepping(self),qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,test_stepping,(self),,,,,,,,
test_nm_mcsolve.py,python,class,,,Class: callable_qobj,qutip,qutip,v5.0.4,,,,,,,,,callable_qobj,,,,,,,,,,
test_nm_mcsolve.py,python,class,,,Class: StatesAndExpectOutputCase,qutip,qutip,v5.0.4,,,,,,,,,StatesAndExpectOutputCase,,,,,,,,,,
test_nm_mcsolve.py,python,class,,,Class: TestNoCollapse(StatesAndExpectOutputCase),qutip,qutip,v5.0.4,,,,,,,,,TestNoCollapse,,,,,(StatesAndExpectOutputCase),,,,,
test_nm_mcsolve.py,python,class,,,Class: TestConstantCollapse(StatesAndExpectOutputCase),qutip,qutip,v5.0.4,,,,,,,,,TestConstantCollapse,,,,,(StatesAndExpectOutputCase),,,,,
test_nm_mcsolve.py,python,class,,,Class: TestTimeDependentCollapse(StatesAndExpectOutputCase),qutip,qutip,v5.0.4,,,,,,,,,TestTimeDependentCollapse,,,,,(StatesAndExpectOutputCase),,,,,
test_nm_mcsolve.py,python,class,,,Class: TestSeeds,qutip,qutip,v5.0.4,,,,,,,,,TestSeeds,,,,,,,,,,
test_nm_mcsolve.py,python,function,test_agreement_with_mesolve_for_negative_rates,(),Function: test_agreement_with_mesolve_for_negative_rates(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,function,test_completeness_relation,(),Function: test_completeness_relation(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,function,test_solver_pickleable,(),Function: test_solver_pickleable(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,function,_assert_functions_equal,"(f1, f2)","Function: _assert_functions_equal(f1, f2)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,function,_return_constant,"(t, args)","Function: _return_constant(t, args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,function,_return_decay,"(t, args)","Function: _return_decay(t, args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,function,test_stored_collapse_operators_and_times,(),Function: test_stored_collapse_operators_and_times(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,function,test_timeout,(),Function: test_timeout(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,function,test_super_H,(),Function: test_super_H(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,function,test_NonMarkovianMCSolver_run,(),Function: test_NonMarkovianMCSolver_run(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,function,test_NonMarkovianMCSolver_stepping,(),Function: test_NonMarkovianMCSolver_stepping(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,function,_dynamic,"(t, args)","Function: _dynamic(t, args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,import,,,Import: copy from copy,qutip,qutip,v5.0.4,from copy import copy,copy,copy,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,local_import,,,Import: nm_mcsolve from qutip.solver.nm_mcsolve,qutip,qutip,v5.0.4,"from qutip.solver.nm_mcsolve import nm_mcsolve, NonMarkovianMCSolver",nm_mcsolve,qutip.solver.nm_mcsolve,qutip.solver.nm_mcsolve,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,local_import,,,Import: NonMarkovianMCSolver from qutip.solver.nm_mcsolve,qutip,qutip,v5.0.4,"from qutip.solver.nm_mcsolve import nm_mcsolve, NonMarkovianMCSolver",NonMarkovianMCSolver,qutip.solver.nm_mcsolve,qutip.solver.nm_mcsolve,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,,,,Directory: qutip\tests\solver\test_nm_mcsolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_options.py,python,function,test_default,(),Function: test_default(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_options.py,python,function,test_SolverOptions_dictlike,(),Function: test_SolverOptions_dictlike(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_options.py,python,function,test_del,(),Function: test_del(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_options.py,python,function,test_SolverOptions_Feedback,(),Function: test_SolverOptions_Feedback(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_options.py,python,function,test_error,(),Function: test_error(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_options.py,python,function,test_print,(),Function: test_print(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_options.py,python,function,test_in_solver,(),Function: test_in_solver(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_options.py,python,function,test_options_update_solver,(),Function: test_options_update_solver(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_options.py,python,constant,,,"Constant: default = {
    ""opt1"": False,
    ""opt2"": True,
    ""opt3"": None,
}",qutip,qutip,v5.0.4,,,,,"default = {
    ""opt1"": False,
    ""opt2"": True,
    ""opt3"": None,
}",default,"{
    ""opt1"": False,
    ""opt2"": True,
    ""opt3"": None,
}",,,,,,,,,,,,
test_options.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_options.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_options.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_options.py,python,local_import,,,Import: _SolverOptions from qutip.solver.options,qutip,qutip,v5.0.4,from qutip.solver.options import _SolverOptions,_SolverOptions,qutip.solver.options,qutip.solver.options,,,,,,,,,,,,,,,
test_options.py,python,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_options.py,python,,,,Directory: qutip\tests\solver\test_options.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_parallel.py,python,class,,,Class: CustomException(Exception),qutip,qutip,v5.0.4,,,,,,,,,CustomException,,,,,(Exception),,,,,
test_parallel.py,python,function,_func1,(x),Function: _func1(x),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_parallel.py,python,function,_func2,"(x, a, b, c, d=0, e=0, f=0)","Function: _func2(x, a, b, c, d=0, e=0, f=0)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_parallel.py,python,function,func,(i),Function: func(i),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_parallel.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_parallel.py,python,import,,,Import: time,qutip,qutip,v5.0.4,import time,time,,,,,,,,,,,,,,,,,
test_parallel.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_parallel.py,python,import,,,Import: threading,qutip,qutip,v5.0.4,import threading,threading,,,,,,,,,,,,,,,,,
test_parallel.py,python,local_import,,,Import: parallel_map from qutip.solver.parallel,qutip,qutip,v5.0.4,"from qutip.solver.parallel import (
    parallel_map, serial_map, loky_pmap, mpi_pmap, MapExceptions
)",parallel_map,qutip.solver.parallel,qutip.solver.parallel,,,,,,,,,,,,,,,
test_parallel.py,python,local_import,,,Import: serial_map from qutip.solver.parallel,qutip,qutip,v5.0.4,"from qutip.solver.parallel import (
    parallel_map, serial_map, loky_pmap, mpi_pmap, MapExceptions
)",serial_map,qutip.solver.parallel,qutip.solver.parallel,,,,,,,,,,,,,,,
test_parallel.py,python,local_import,,,Import: loky_pmap from qutip.solver.parallel,qutip,qutip,v5.0.4,"from qutip.solver.parallel import (
    parallel_map, serial_map, loky_pmap, mpi_pmap, MapExceptions
)",loky_pmap,qutip.solver.parallel,qutip.solver.parallel,,,,,,,,,,,,,,,
test_parallel.py,python,local_import,,,Import: mpi_pmap from qutip.solver.parallel,qutip,qutip,v5.0.4,"from qutip.solver.parallel import (
    parallel_map, serial_map, loky_pmap, mpi_pmap, MapExceptions
)",mpi_pmap,qutip.solver.parallel,qutip.solver.parallel,,,,,,,,,,,,,,,
test_parallel.py,python,local_import,,,Import: MapExceptions from qutip.solver.parallel,qutip,qutip,v5.0.4,"from qutip.solver.parallel import (
    parallel_map, serial_map, loky_pmap, mpi_pmap, MapExceptions
)",MapExceptions,qutip.solver.parallel,qutip.solver.parallel,,,,,,,,,,,,,,,
test_parallel.py,python,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_parallel.py,python,,,,Directory: qutip\tests\solver\test_parallel.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_propagator.py,python,function,testPropHOB,(),Function: testPropHOB(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_propagator.py,python,function,testPropObj,(),Function: testPropObj(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_propagator.py,python,function,func,(t),Function: func(t),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_propagator.py,python,function,testPropHOTd,(),Function: testPropHOTd(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_propagator.py,python,function,testPropObjTd,(),Function: testPropObjTd(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_propagator.py,python,function,testPropHOSteady,(),Function: testPropHOSteady(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_propagator.py,python,function,testPropHDims,(),Function: testPropHDims(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_propagator.py,python,function,testPropHSuper,(),Function: testPropHSuper(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_propagator.py,python,function,testPropEvo,(),Function: testPropEvo(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_propagator.py,python,function,_make_se,"(H, a)","Function: _make_se(H, a)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_propagator.py,python,function,_make_me,"(H, a)","Function: _make_me(H, a)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_propagator.py,python,function,_make_br,"(H, a)","Function: _make_br(H, a)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_propagator.py,python,function,testPropMCSolver,(),Function: testPropMCSolver(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_propagator.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_propagator.py,python,import,,,Import: destroy from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",destroy,qutip,,,,,,,,,,,,,,,,
test_propagator.py,python,import,,,Import: propagator from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",propagator,qutip,,,,,,,,,,,,,,,,
test_propagator.py,python,import,,,Import: Propagator from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",Propagator,qutip,,,,,,,,,,,,,,,,
test_propagator.py,python,import,,,Import: propagator_steadystate from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",propagator_steadystate,qutip,,,,,,,,,,,,,,,,
test_propagator.py,python,import,,,Import: steadystate from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",steadystate,qutip,,,,,,,,,,,,,,,,
test_propagator.py,python,import,,,Import: tensor from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",tensor,qutip,,,,,,,,,,,,,,,,
test_propagator.py,python,import,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",qeye,qutip,,,,,,,,,,,,,,,,
test_propagator.py,python,import,,,Import: basis from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",basis,qutip,,,,,,,,,,,,,,,,
test_propagator.py,python,import,,,Import: QobjEvo from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",QobjEvo,qutip,,,,,,,,,,,,,,,,
test_propagator.py,python,import,,,Import: sesolve from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",sesolve,qutip,,,,,,,,,,,,,,,,
test_propagator.py,python,import,,,Import: liouvillian from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",liouvillian,qutip,,,,,,,,,,,,,,,,
test_propagator.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_propagator.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_propagator.py,python,local_import,,,Import: trapezoid from scipy.integrate,qutip,qutip,v5.0.4,from scipy.integrate import trapezoid,trapezoid,scipy.integrate,scipy.integrate,,,,,,,,,,,,,,,
test_propagator.py,python,local_import,,,Import: BRSolver from qutip.solver.brmesolve,qutip,qutip,v5.0.4,from qutip.solver.brmesolve import BRSolver,BRSolver,qutip.solver.brmesolve,qutip.solver.brmesolve,,,,,,,,,,,,,,,
test_propagator.py,python,local_import,,,Import: MESolver from qutip.solver.mesolve,qutip,qutip,v5.0.4,from qutip.solver.mesolve import MESolver,MESolver,qutip.solver.mesolve,qutip.solver.mesolve,,,,,,,,,,,,,,,
test_propagator.py,python,local_import,,,Import: SESolver from qutip.solver.sesolve,qutip,qutip,v5.0.4,from qutip.solver.sesolve import SESolver,SESolver,qutip.solver.sesolve,qutip.solver.sesolve,,,,,,,,,,,,,,,
test_propagator.py,python,local_import,,,Import: MCSolver from qutip.solver.mcsolve,qutip,qutip,v5.0.4,from qutip.solver.mcsolve import MCSolver,MCSolver,qutip.solver.mcsolve,qutip.solver.mcsolve,,,,,,,,,,,,,,,
test_propagator.py,python,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_propagator.py,python,,,,Directory: qutip\tests\solver\test_propagator.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qubit_evolution.py,python,function,_qubit_integrate,"(tlist, psi0, epsilon, delta, g1, g2, solver)","Function: _qubit_integrate(tlist, psi0, epsilon, delta, g1, g2, solver)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qubit_evolution.py,python,function,test_MESolverCase1,(),Function: test_MESolverCase1(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qubit_evolution.py,python,function,test_MESolverCase2,(),Function: test_MESolverCase2(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qubit_evolution.py,python,function,test_MCSolverCase1,(),Function: test_MCSolverCase1(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qubit_evolution.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_qubit_evolution.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_qubit_evolution.py,python,import,,,Import: sigmax from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz, sigmam, mesolve, mcsolve, basis,
)",sigmax,qutip,,,,,,,,,,,,,,,,
test_qubit_evolution.py,python,import,,,Import: sigmay from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz, sigmam, mesolve, mcsolve, basis,
)",sigmay,qutip,,,,,,,,,,,,,,,,
test_qubit_evolution.py,python,import,,,Import: sigmaz from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz, sigmam, mesolve, mcsolve, basis,
)",sigmaz,qutip,,,,,,,,,,,,,,,,
test_qubit_evolution.py,python,import,,,Import: sigmam from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz, sigmam, mesolve, mcsolve, basis,
)",sigmam,qutip,,,,,,,,,,,,,,,,
test_qubit_evolution.py,python,import,,,Import: mesolve from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz, sigmam, mesolve, mcsolve, basis,
)",mesolve,qutip,,,,,,,,,,,,,,,,
test_qubit_evolution.py,python,import,,,Import: mcsolve from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz, sigmam, mesolve, mcsolve, basis,
)",mcsolve,qutip,,,,,,,,,,,,,,,,
test_qubit_evolution.py,python,import,,,Import: basis from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz, sigmam, mesolve, mcsolve, basis,
)",basis,qutip,,,,,,,,,,,,,,,,
test_qubit_evolution.py,python,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_qubit_evolution.py,python,,,,Directory: qutip\tests\solver\test_qubit_evolution.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_results.py,python,class_method,,,"Class method: [pytest.mark.parametrize([""N"", ""e_ops"", ""options""], [
        pytest.param(10, (), {}, id=""no-e-ops""),
        pytest.param(
            10, qutip.create(10), {""store_states"": True}, id=""store-states"",
        )
    ])] TestResult.test_states(self, N, e_ops, options)",qutip,qutip,v5.0.4,,,,,,,,,TestResult,test_states,"(self, N, e_ops, options)",,,,"pytest.mark.parametrize([""N"", ""e_ops"", ""options""], [
        pytest.param(10, (), {}, id=""no-e-ops""),
        pytest.param(
            10, qutip.create(10), {""store_states"": True}, id=""store-states"",
        )
    ])",,,,
test_results.py,python,class_method,,,"Class method: [pytest.mark.parametrize([""N"", ""e_ops"", ""options""], [
        pytest.param(10, (), {
            ""store_states"": False, ""store_final_state"": True
        }, id=""no-e-ops""),
        pytest.param(10, qutip.create(10), {
            ""store_final_state"": True,
        }, id=""with-eops""),
    ])] TestResult.test_final_state_only(self, N, e_ops, options)",qutip,qutip,v5.0.4,,,,,,,,,TestResult,test_final_state_only,"(self, N, e_ops, options)",,,,"pytest.mark.parametrize([""N"", ""e_ops"", ""options""], [
        pytest.param(10, (), {
            ""store_states"": False, ""store_final_state"": True
        }, id=""no-e-ops""),
        pytest.param(10, qutip.create(10), {
            ""store_final_state"": True,
        }, id=""with-eops""),
    ])",,,,
test_results.py,python,class_method,,,"Class method: [pytest.mark.parametrize([""N"", ""e_ops"", ""results""], [
        pytest.param(
            10, qutip.num(10), {0: np.arange(10)}, id=""single-e-op"",
        ),
        pytest.param(
            10,
            [qutip.num(10), qutip.qeye(10)],
            {0: np.arange(10), 1: np.ones(10)},
            id=""list-e-ops"",
        ),
        pytest.param(
            10,
            {""a"": qutip.num(10), ""b"": qutip.qeye(10)},
            {""a"": np.arange(10), ""b"": np.ones(10)},
            id=""dict-e-ops"",
        ),
        pytest.param(
            5, qutip.QobjEvo(qutip.num(5)), {0: np.arange(5)}, id=""qobjevo"",
        ),
        pytest.param(
            5, e_op_state_by_time,
            {0: [i * qutip.basis(5, i) for i in range(5)]},
            id=""function"",
        )
    ])] TestResult.test_expect_and_e_ops(self, N, e_ops, results)",qutip,qutip,v5.0.4,,,,,,,,,TestResult,test_expect_and_e_ops,"(self, N, e_ops, results)",,,,"pytest.mark.parametrize([""N"", ""e_ops"", ""results""], [
        pytest.param(
            10, qutip.num(10), {0: np.arange(10)}, id=""single-e-op"",
        ),
        pytest.param(
            10,
            [qutip.num(10), qutip.qeye(10)],
            {0: np.arange(10), 1: np.ones(10)},
            id=""list-e-ops"",
        ),
        pytest.param(
            10,
            {""a"": qutip.num(10), ""b"": qutip.qeye(10)},
            {""a"": np.arange(10), ""b"": np.ones(10)},
            id=""dict-e-ops"",
        ),
        pytest.param(
            5, qutip.QobjEvo(qutip.num(5)), {0: np.arange(5)}, id=""qobjevo"",
        ),
        pytest.param(
            5, e_op_state_by_time,
            {0: [i * qutip.basis(5, i) for i in range(5)]},
            id=""function"",
        )
    ])",,,,
test_results.py,python,class_method,,,Class method: TestResult.test_add_processor(self),qutip,qutip,v5.0.4,,,,,,,,,TestResult,test_add_processor,(self),,,,,,,,
test_results.py,python,class_method,,,Class method: TestResult.test_repr_minimal(self),qutip,qutip,v5.0.4,,,,,,,,,TestResult,test_repr_minimal,(self),,,,,,,,
test_results.py,python,class_method,,,Class method: TestResult.test_repr_full(self),qutip,qutip,v5.0.4,,,,,,,,,TestResult,test_repr_full,(self),,,,,,,,
test_results.py,python,class_method,,,"Class method: TestMultiTrajResult._fill_trajectories(self, multiresult, N, ntraj,
                           collapse=False, noise=0, dm=False)",qutip,qutip,v5.0.4,,,,,,,,,TestMultiTrajResult,_fill_trajectories,"(self, multiresult, N, ntraj,
                           collapse=False, noise=0, dm=False)",,,,,,,,
test_results.py,python,class_method,,,"Class method: TestMultiTrajResult._expect_check_types(self, multiresult)",qutip,qutip,v5.0.4,,,,,,,,,TestMultiTrajResult,_expect_check_types,"(self, multiresult)",,,,,,,,
test_results.py,python,class_method,,,"Class method: [pytest.mark.parametrize('keep_runs_results', [True, False])] TestMultiTrajResult.test_McResult(self, dm, keep_runs_results)",qutip,qutip,v5.0.4,,,,,,,,,TestMultiTrajResult,test_McResult,"(self, dm, keep_runs_results)",,,,"pytest.mark.parametrize('keep_runs_results', [True, False])",,,,
test_results.py,python,class_method,,,"Class method: [pytest.mark.parametrize('dm', [True, False])] TestMultiTrajResult.test_McResult(self, dm, keep_runs_results)",qutip,qutip,v5.0.4,,,,,,,,,TestMultiTrajResult,test_McResult,"(self, dm, keep_runs_results)",,,,"pytest.mark.parametrize('dm', [True, False])",,,,
test_results.py,python,class_method,,,"Class method: [pytest.mark.parametrize('keep_runs_results', [True, False])] TestMultiTrajResult.test_multitraj_expect(self, keep_runs_results, e_ops, results)",qutip,qutip,v5.0.4,,,,,,,,,TestMultiTrajResult,test_multitraj_expect,"(self, keep_runs_results, e_ops, results)",,,,"pytest.mark.parametrize('keep_runs_results', [True, False])",,,,
test_results.py,python,class_method,,,"Class method: [pytest.mark.parametrize([""e_ops"", ""results""], [
        pytest.param(qutip.num(5), [np.arange(5)], id=""single-e-op""),
        pytest.param(
            {""a"": qutip.num(5), ""b"": qutip.qeye(5)},
            [np.arange(5), np.ones(5)],
            id=""dict-e-ops"",
        ),
        pytest.param(qutip.QobjEvo(qutip.num(5)), [np.arange(5)], id=""qobjevo""),
        pytest.param(e_op_num, [np.arange(5)], id=""function""),
        pytest.param(
            [qutip.num(5), e_op_num],
            [np.arange(5), np.arange(5)],
            id=""list-e-ops"",
        ),
    ])] TestMultiTrajResult.test_multitraj_expect(self, keep_runs_results, e_ops, results)",qutip,qutip,v5.0.4,,,,,,,,,TestMultiTrajResult,test_multitraj_expect,"(self, keep_runs_results, e_ops, results)",,,,"pytest.mark.parametrize([""e_ops"", ""results""], [
        pytest.param(qutip.num(5), [np.arange(5)], id=""single-e-op""),
        pytest.param(
            {""a"": qutip.num(5), ""b"": qutip.qeye(5)},
            [np.arange(5), np.ones(5)],
            id=""dict-e-ops"",
        ),
        pytest.param(qutip.QobjEvo(qutip.num(5)), [np.arange(5)], id=""qobjevo""),
        pytest.param(e_op_num, [np.arange(5)], id=""function""),
        pytest.param(
            [qutip.num(5), e_op_num],
            [np.arange(5), np.arange(5)],
            id=""list-e-ops"",
        ),
    ])",,,,
test_results.py,python,class_method,,,"Class method: [pytest.mark.parametrize('keep_runs_results', [True, False])] TestMultiTrajResult.test_multitraj_state(self, keep_runs_results, dm)",qutip,qutip,v5.0.4,,,,,,,,,TestMultiTrajResult,test_multitraj_state,"(self, keep_runs_results, dm)",,,,"pytest.mark.parametrize('keep_runs_results', [True, False])",,,,
test_results.py,python,class_method,,,"Class method: [pytest.mark.parametrize('dm', [True, False])] TestMultiTrajResult.test_multitraj_state(self, keep_runs_results, dm)",qutip,qutip,v5.0.4,,,,,,,,,TestMultiTrajResult,test_multitraj_state,"(self, keep_runs_results, dm)",,,,"pytest.mark.parametrize('dm', [True, False])",,,,
test_results.py,python,class_method,,,"Class method: [pytest.mark.parametrize('keep_runs_results', [True, False])] TestMultiTrajResult.test_multitraj_targettol(self, keep_runs_results, targettol)",qutip,qutip,v5.0.4,,,,,,,,,TestMultiTrajResult,test_multitraj_targettol,"(self, keep_runs_results, targettol)",,,,"pytest.mark.parametrize('keep_runs_results', [True, False])",,,,
test_results.py,python,class_method,,,"Class method: [pytest.mark.parametrize('targettol', [
        pytest.param(0.1, id='atol'),
        pytest.param([0.001, 0.1], id='rtol'),
        pytest.param([[0.001, 0.1], [0.1, 0]], id='tol_per_e_op'),
    ])] TestMultiTrajResult.test_multitraj_targettol(self, keep_runs_results, targettol)",qutip,qutip,v5.0.4,,,,,,,,,TestMultiTrajResult,test_multitraj_targettol,"(self, keep_runs_results, targettol)",,,,"pytest.mark.parametrize('targettol', [
        pytest.param(0.1, id='atol'),
        pytest.param([0.001, 0.1], id='rtol'),
        pytest.param([[0.001, 0.1], [0.1, 0]], id='tol_per_e_op'),
    ])",,,,
test_results.py,python,class_method,,,Class method: TestMultiTrajResult.test_multitraj_steadystate(self),qutip,qutip,v5.0.4,,,,,,,,,TestMultiTrajResult,test_multitraj_steadystate,(self),,,,,,,,
test_results.py,python,class_method,,,"Class method: [pytest.mark.parametrize('keep_runs_results', [True, False])] TestMultiTrajResult.test_repr(self, keep_runs_results)",qutip,qutip,v5.0.4,,,,,,,,,TestMultiTrajResult,test_repr,"(self, keep_runs_results)",,,,"pytest.mark.parametrize('keep_runs_results', [True, False])",,,,
test_results.py,python,class_method,,,"Class method: [pytest.mark.parametrize('keep_runs_results', [True, False])] TestMultiTrajResult.test_merge_result(self, keep_runs_results)",qutip,qutip,v5.0.4,,,,,,,,,TestMultiTrajResult,test_merge_result,"(self, keep_runs_results)",,,,"pytest.mark.parametrize('keep_runs_results', [True, False])",,,,
test_results.py,python,class,,,Class: TestResult,qutip,qutip,v5.0.4,,,,,,,,,TestResult,,,,,,,,,,
test_results.py,python,class,,,Class: TestMultiTrajResult,qutip,qutip,v5.0.4,,,,,,,,,TestMultiTrajResult,,,,,,,,,,
test_results.py,python,function,fill_options,(**kwargs),Function: fill_options(**kwargs),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_results.py,python,function,e_op_state_by_time,"(t, state)","Function: e_op_state_by_time(t, state)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_results.py,python,function,e_op_num,"(t, state)","Function: e_op_num(t, state)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_results.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_results.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_results.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_results.py,python,local_import,,,Import: Result from qutip.solver.result,qutip,qutip,v5.0.4,"from qutip.solver.result import Result, MultiTrajResult, McResult",Result,qutip.solver.result,qutip.solver.result,,,,,,,,,,,,,,,
test_results.py,python,local_import,,,Import: MultiTrajResult from qutip.solver.result,qutip,qutip,v5.0.4,"from qutip.solver.result import Result, MultiTrajResult, McResult",MultiTrajResult,qutip.solver.result,qutip.solver.result,,,,,,,,,,,,,,,
test_results.py,python,local_import,,,Import: McResult from qutip.solver.result,qutip,qutip,v5.0.4,"from qutip.solver.result import Result, MultiTrajResult, McResult",McResult,qutip.solver.result,qutip.solver.result,,,,,,,,,,,,,,,
test_results.py,python,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_results.py,python,,,,Directory: qutip\tests\solver\test_results.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_sesolve.py,python,class_field,,,Class field: TestSeSolve.H0 = 0.2 * np.pi * qutip.sigmaz(),qutip,qutip,v5.0.4,,,,,,,,,TestSeSolve,,,H0 = 0.2 * np.pi * qutip.sigmaz(),,,,H0,0.2 * np.pi * qutip.sigmaz(),,
test_sesolve.py,python,class_field,,,Class field: TestSeSolve.H1 = np.pi * qutip.sigmax(),qutip,qutip,v5.0.4,,,,,,,,,TestSeSolve,,,H1 = np.pi * qutip.sigmax(),,,,H1,np.pi * qutip.sigmax(),,
test_sesolve.py,python,class_field,,,"Class field: TestSeSolve.tlist = np.linspace(0, 20, 200)",qutip,qutip,v5.0.4,,,,,,,,,TestSeSolve,,,"tlist = np.linspace(0, 20, 200)",,,,tlist,"np.linspace(0, 20, 200)",,
test_sesolve.py,python,class_field,,,Class field: TestSeSolve.args = {'alpha': 0.5},qutip,qutip,v5.0.4,,,,,,,,,TestSeSolve,,,args = {'alpha': 0.5},,,,args,{'alpha': 0.5},,
test_sesolve.py,python,class_field,,,Class field: TestSeSolve.w_a = 0.35,qutip,qutip,v5.0.4,,,,,,,,,TestSeSolve,,,w_a = 0.35,,,,w_a,0.35,,
test_sesolve.py,python,class_field,,,Class field: TestSeSolve.a = 0.5,qutip,qutip,v5.0.4,,,,,,,,,TestSeSolve,,,a = 0.5,,,,a,0.5,,
test_sesolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['unitary_op'], [
        pytest.param(None, id=""state""),
        pytest.param(qutip.qeye(2), id=""unitary""),
    ])] TestSeSolve.test_sesolve(self, H, analytical, unitary_op)",qutip,qutip,v5.0.4,,,,,,,,,TestSeSolve,test_sesolve,"(self, H, analytical, unitary_op)",,,,"pytest.mark.parametrize(['unitary_op'], [
        pytest.param(None, id=""state""),
        pytest.param(qutip.qeye(2), id=""unitary""),
    ])",,,,
test_sesolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['H', 'analytical'], [
        pytest.param(H1, lambda t, _: t, id='const_H'),
        pytest.param(lambda t, alpha: (np.pi * qutip.sigmax()
                                       * np.exp(-alpha * t)),
                     _analytic, id='func_H'),
        pytest.param([[H1, lambda t, args: np.exp(-args['alpha'] * t)]],
                     _analytic, id='list_func_H'),
        pytest.param([[H1, 'exp(-alpha*t)']],
                     _analytic, id='list_str_H'),
        pytest.param([[H1, np.exp(-args['alpha'] * tlist)]],
                     _analytic, id='list_array_H'),
        pytest.param(qutip.QobjEvo([[H1, 'exp(-alpha*t)']], args=args),
                     _analytic, id='QobjEvo_H'),
    ])] TestSeSolve.test_sesolve(self, H, analytical, unitary_op)",qutip,qutip,v5.0.4,,,,,,,,,TestSeSolve,test_sesolve,"(self, H, analytical, unitary_op)",,,,"pytest.mark.parametrize(['H', 'analytical'], [
        pytest.param(H1, lambda t, _: t, id='const_H'),
        pytest.param(lambda t, alpha: (np.pi * qutip.sigmax()
                                       * np.exp(-alpha * t)),
                     _analytic, id='func_H'),
        pytest.param([[H1, lambda t, args: np.exp(-args['alpha'] * t)]],
                     _analytic, id='list_func_H'),
        pytest.param([[H1, 'exp(-alpha*t)']],
                     _analytic, id='list_str_H'),
        pytest.param([[H1, np.exp(-args['alpha'] * tlist)]],
                     _analytic, id='list_array_H'),
        pytest.param(qutip.QobjEvo([[H1, 'exp(-alpha*t)']], args=args),
                     _analytic, id='QobjEvo_H'),
    ])",,,,
test_sesolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['state_type'], [
        pytest.param(""ket"", id=""ket""),
        pytest.param(""unitary"", id=""unitary""),
    ])] TestSeSolve.test_sesolve_normalization(self, state_type)",qutip,qutip,v5.0.4,,,,,,,,,TestSeSolve,test_sesolve_normalization,"(self, state_type)",,,,"pytest.mark.parametrize(['state_type'], [
        pytest.param(""ket"", id=""ket""),
        pytest.param(""unitary"", id=""unitary""),
    ])",,,,
test_sesolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['unitary_op'], [
        pytest.param(None, id=""state""),
        pytest.param(qutip.qeye(2), id=""unitary""),
    ])] TestSeSolve.test_sesolve_method(self, method, unitary_op)",qutip,qutip,v5.0.4,,,,,,,,,TestSeSolve,test_sesolve_method,"(self, method, unitary_op)",,,,"pytest.mark.parametrize(['unitary_op'], [
        pytest.param(None, id=""state""),
        pytest.param(qutip.qeye(2), id=""unitary""),
    ])",,,,
test_sesolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize('method', all_ode_method, ids=all_ode_method)] TestSeSolve.test_sesolve_method(self, method, unitary_op)",qutip,qutip,v5.0.4,,,,,,,,,TestSeSolve,test_sesolve_method,"(self, method, unitary_op)",,,,"pytest.mark.parametrize('method', all_ode_method, ids=all_ode_method)",,,,
test_sesolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize('normalize', [True, False],
                             ids=['Normalized', ''])] TestSeSolve.test_compare_evolution(self, H, normalize, args, tol=5e-5)",qutip,qutip,v5.0.4,,,,,,,,,TestSeSolve,test_compare_evolution,"(self, H, normalize, args, tol=5e-5)",,,,"pytest.mark.parametrize('normalize', [True, False],
                             ids=['Normalized', ''])",,,,
test_sesolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['H', 'args'],
        [pytest.param(H0 + H1, {}, id='const_H'),
         pytest.param(lambda t, a, w_a: (
             a * t * 0.2 * np.pi * qutip.sigmaz() +
             np.cos(w_a * t) * np.pi * qutip.sigmax()
         ), {'a':a, 'w_a':w_a}, id='func_H'),
         pytest.param([
             [H0, lambda t, args: args['a']*t],
             [H1, lambda t, args: np.cos(args['w_a']*t)]
         ], {'a':a, 'w_a':w_a}, id='list_func_H'),
         pytest.param([H0, [H1, 'cos(w_a*t)']], {'w_a':w_a}, id='list_str_H'),
    ])] TestSeSolve.test_compare_evolution(self, H, normalize, args, tol=5e-5)",qutip,qutip,v5.0.4,,,,,,,,,TestSeSolve,test_compare_evolution,"(self, H, normalize, args, tol=5e-5)",,,,"pytest.mark.parametrize(['H', 'args'],
        [pytest.param(H0 + H1, {}, id='const_H'),
         pytest.param(lambda t, a, w_a: (
             a * t * 0.2 * np.pi * qutip.sigmaz() +
             np.cos(w_a * t) * np.pi * qutip.sigmax()
         ), {'a':a, 'w_a':w_a}, id='func_H'),
         pytest.param([
             [H0, lambda t, args: args['a']*t],
             [H1, lambda t, args: np.cos(args['w_a']*t)]
         ], {'a':a, 'w_a':w_a}, id='list_func_H'),
         pytest.param([H0, [H1, 'cos(w_a*t)']], {'w_a':w_a}, id='list_str_H'),
    ])",,,,
test_sesolve.py,python,class_method,,,Class method: TestSeSolve.test_sesolver_args(self),qutip,qutip,v5.0.4,,,,,,,,,TestSeSolve,test_sesolver_args,(self),,,,,,,,
test_sesolve.py,python,class_method,,,Class method: TestSeSolve.test_sesolver_pickling(self),qutip,qutip,v5.0.4,,,,,,,,,TestSeSolve,test_sesolver_pickling,(self),,,,,,,,
test_sesolve.py,python,class_method,,,"Class method: [pytest.mark.parametrize('method', all_ode_method, ids=all_ode_method)] TestSeSolve.test_sesolver_stepping(self, method)",qutip,qutip,v5.0.4,,,,,,,,,TestSeSolve,test_sesolver_stepping,"(self, method)",,,,"pytest.mark.parametrize('method', all_ode_method, ids=all_ode_method)",,,,
test_sesolve.py,python,class,,,Class: TestSeSolve(),qutip,qutip,v5.0.4,,,,,,,,,TestSeSolve,,,,,(),,,,,
test_sesolve.py,python,function,_analytic,"(t, alpha)","Function: _analytic(t, alpha)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_sesolve.py,python,function,test_sesolve_bad_H,(),Function: test_sesolve_bad_H(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_sesolve.py,python,function,test_sesolve_bad_state,(),Function: test_sesolve_bad_state(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_sesolve.py,python,function,test_sesolve_step_no_start,(),Function: test_sesolve_step_no_start(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_sesolve.py,python,function,test_krylovsolve_error,(),Function: test_krylovsolve_error(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_sesolve.py,python,function,test_feedback,(),Function: test_feedback(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_sesolve.py,python,constant,,,"Constant: all_ode_method = [
    method for method, integrator in SESolver.avail_integrators().items()
    if integrator.support_time_dependant
]",qutip,qutip,v5.0.4,,,,,"all_ode_method = [
    method for method, integrator in SESolver.avail_integrators().items()
    if integrator.support_time_dependant
]",all_ode_method,"[
    method for method, integrator in SESolver.avail_integrators().items()
    if integrator.support_time_dependant
]",,,,,,,,,,,,
test_sesolve.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_sesolve.py,python,import,,,Import: pickle,qutip,qutip,v5.0.4,import pickle,pickle,,,,,,,,,,,,,,,,,
test_sesolve.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_sesolve.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_sesolve.py,python,local_import,,,Import: sesolve from qutip.solver.sesolve,qutip,qutip,v5.0.4,"from qutip.solver.sesolve import sesolve, SESolver",sesolve,qutip.solver.sesolve,qutip.solver.sesolve,,,,,,,,,,,,,,,
test_sesolve.py,python,local_import,,,Import: SESolver from qutip.solver.sesolve,qutip,qutip,v5.0.4,"from qutip.solver.sesolve import sesolve, SESolver",SESolver,qutip.solver.sesolve,qutip.solver.sesolve,,,,,,,,,,,,,,,
test_sesolve.py,python,local_import,,,Import: krylovsolve from qutip.solver.krylovsolve,qutip,qutip,v5.0.4,from qutip.solver.krylovsolve import krylovsolve,krylovsolve,qutip.solver.krylovsolve,qutip.solver.krylovsolve,,,,,,,,,,,,,,,
test_sesolve.py,python,local_import,,,Import: Solver from qutip.solver.solver_base,qutip,qutip,v5.0.4,from qutip.solver.solver_base import Solver,Solver,qutip.solver.solver_base,qutip.solver.solver_base,,,,,,,,,,,,,,,
test_sesolve.py,python,local_import,,,Import: WARN_MISSING_MODULE from qutip.core.coefficient,qutip,qutip,v5.0.4,from qutip.core.coefficient import WARN_MISSING_MODULE,WARN_MISSING_MODULE,qutip.core.coefficient,qutip.core.coefficient,,,,,,,,,,,,,,,
test_sesolve.py,python,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_sesolve.py,python,,,,Directory: qutip\tests\solver\test_sesolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_sode_method.py,python,function,get_error_order,"(system, state, method, plot=False, **kw)","Function: get_error_order(system, state, method, plot=False, **kw)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_sode_method.py,python,function,_make_oper,"(kind, N)","Function: _make_oper(kind, N)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_sode_method.py,python,function,get_error_order_integrator,"(integrator, ref_integrator, state, plot=False)","Function: get_error_order_integrator(integrator, ref_integrator, state, plot=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_sode_method.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_sode_method.py,python,import,,,Import: product from itertools,qutip,qutip,v5.0.4,from itertools import product,product,itertools,,,,,,,,,,,,,,,,
test_sode_method.py,python,import,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import (qeye, destroy, QobjEvo, rand_ket, rand_herm, create, Qobj,
                   operator_to_vector, fock_dm)",qeye,qutip,,,,,,,,,,,,,,,,
test_sode_method.py,python,import,,,Import: destroy from qutip,qutip,qutip,v5.0.4,"from qutip import (qeye, destroy, QobjEvo, rand_ket, rand_herm, create, Qobj,
                   operator_to_vector, fock_dm)",destroy,qutip,,,,,,,,,,,,,,,,
test_sode_method.py,python,import,,,Import: QobjEvo from qutip,qutip,qutip,v5.0.4,"from qutip import (qeye, destroy, QobjEvo, rand_ket, rand_herm, create, Qobj,
                   operator_to_vector, fock_dm)",QobjEvo,qutip,,,,,,,,,,,,,,,,
test_sode_method.py,python,import,,,Import: rand_ket from qutip,qutip,qutip,v5.0.4,"from qutip import (qeye, destroy, QobjEvo, rand_ket, rand_herm, create, Qobj,
                   operator_to_vector, fock_dm)",rand_ket,qutip,,,,,,,,,,,,,,,,
test_sode_method.py,python,import,,,Import: rand_herm from qutip,qutip,qutip,v5.0.4,"from qutip import (qeye, destroy, QobjEvo, rand_ket, rand_herm, create, Qobj,
                   operator_to_vector, fock_dm)",rand_herm,qutip,,,,,,,,,,,,,,,,
test_sode_method.py,python,import,,,Import: create from qutip,qutip,qutip,v5.0.4,"from qutip import (qeye, destroy, QobjEvo, rand_ket, rand_herm, create, Qobj,
                   operator_to_vector, fock_dm)",create,qutip,,,,,,,,,,,,,,,,
test_sode_method.py,python,import,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import (qeye, destroy, QobjEvo, rand_ket, rand_herm, create, Qobj,
                   operator_to_vector, fock_dm)",Qobj,qutip,,,,,,,,,,,,,,,,
test_sode_method.py,python,import,,,Import: operator_to_vector from qutip,qutip,qutip,v5.0.4,"from qutip import (qeye, destroy, QobjEvo, rand_ket, rand_herm, create, Qobj,
                   operator_to_vector, fock_dm)",operator_to_vector,qutip,,,,,,,,,,,,,,,,
test_sode_method.py,python,import,,,Import: fock_dm from qutip,qutip,qutip,v5.0.4,"from qutip import (qeye, destroy, QobjEvo, rand_ket, rand_herm, create, Qobj,
                   operator_to_vector, fock_dm)",fock_dm,qutip,,,,,,,,,,,,,,,,
test_sode_method.py,python,import,,,Import: qutip.solver.sode._sode,qutip,qutip,v5.0.4,import qutip.solver.sode._sode as _sode,qutip.solver.sode._sode,,,,,,,,,,,,,,,,,
test_sode_method.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_sode_method.py,python,local_import,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,data,qutip.core,qutip.core,,,,,,,,,,,,,,,
test_sode_method.py,python,local_import,,,Import: SimpleStochasticSystem from qutip.solver.sode.ssystem,qutip,qutip,v5.0.4,"from qutip.solver.sode.ssystem import (
    SimpleStochasticSystem, StochasticOpenSystem, StochasticClosedSystem
)",SimpleStochasticSystem,qutip.solver.sode.ssystem,qutip.solver.sode.ssystem,,,,,,,,,,,,,,,
test_sode_method.py,python,local_import,,,Import: StochasticOpenSystem from qutip.solver.sode.ssystem,qutip,qutip,v5.0.4,"from qutip.solver.sode.ssystem import (
    SimpleStochasticSystem, StochasticOpenSystem, StochasticClosedSystem
)",StochasticOpenSystem,qutip.solver.sode.ssystem,qutip.solver.sode.ssystem,,,,,,,,,,,,,,,
test_sode_method.py,python,local_import,,,Import: StochasticClosedSystem from qutip.solver.sode.ssystem,qutip,qutip,v5.0.4,"from qutip.solver.sode.ssystem import (
    SimpleStochasticSystem, StochasticOpenSystem, StochasticClosedSystem
)",StochasticClosedSystem,qutip.solver.sode.ssystem,qutip.solver.sode.ssystem,,,,,,,,,,,,,,,
test_sode_method.py,python,local_import,,,Import: _Noise from qutip.solver.sode._noise,qutip,qutip,v5.0.4,from qutip.solver.sode._noise import _Noise,_Noise,qutip.solver.sode._noise,qutip.solver.sode._noise,,,,,,,,,,,,,,,
test_sode_method.py,python,local_import,,,Import: SMESolver from qutip.solver.stochastic,qutip,qutip,v5.0.4,"from qutip.solver.stochastic import SMESolver, _StochasticRHS",SMESolver,qutip.solver.stochastic,qutip.solver.stochastic,,,,,,,,,,,,,,,
test_sode_method.py,python,local_import,,,Import: _StochasticRHS from qutip.solver.stochastic,qutip,qutip,v5.0.4,"from qutip.solver.stochastic import SMESolver, _StochasticRHS",_StochasticRHS,qutip.solver.stochastic,qutip.solver.stochastic,,,,,,,,,,,,,,,
test_sode_method.py,python,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_sode_method.py,python,,,,Directory: qutip\tests\solver\test_sode_method.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_steadystate.py,python,function,test_rcm,(),Function: test_rcm(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_steadystate.py,python,function,test_wbm,(),Function: test_wbm(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_steadystate.py,python,function,test_bad_options_steadystate,(),Function: test_bad_options_steadystate(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_steadystate.py,python,function,test_bad_options_pseudo_inverse,(),Function: test_bad_options_pseudo_inverse(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_steadystate.py,python,function,test_bad_system,(),Function: test_bad_system(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_steadystate.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_steadystate.py,python,import,,,Import: scipy,qutip,qutip,v5.0.4,import scipy,scipy,,,,,,,,,,,,,,,,,
test_steadystate.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_steadystate.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_steadystate.py,python,import,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,warnings,,,,,,,,,,,,,,,,,
test_steadystate.py,python,import,,,Import: version from packaging,qutip,qutip,v5.0.4,from packaging import version as pac_version,version,packaging,,,,,,,,,,,,,,,,
test_steadystate.py,python,import,,,Import: qutip.core.data,qutip,qutip,v5.0.4,import qutip.core.data as _data,qutip.core.data,,,,,,,,,,,,,,,,,
test_steadystate.py,python,local_import,,,Import: _permute_rcm from qutip.solver.steadystate,qutip,qutip,v5.0.4,"from qutip.solver.steadystate import _permute_rcm, _permute_wbm",_permute_rcm,qutip.solver.steadystate,qutip.solver.steadystate,,,,,,,,,,,,,,,
test_steadystate.py,python,local_import,,,Import: _permute_wbm from qutip.solver.steadystate,qutip,qutip,v5.0.4,"from qutip.solver.steadystate import _permute_rcm, _permute_wbm",_permute_wbm,qutip.solver.steadystate,qutip.solver.steadystate,,,,,,,,,,,,,,,
test_steadystate.py,python,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_steadystate.py,python,,,,Directory: qutip\tests\solver\test_steadystate.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_stochastic.py,python,function,f,"(t, w)","Function: f(t, w)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_stochastic.py,python,function,_make_system,"(N, system)","Function: _make_system(N, system)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_stochastic.py,python,function,test_reuse_seeds,(),Function: test_reuse_seeds(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_stochastic.py,python,function,test_feedback,(),Function: test_feedback(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_stochastic.py,python,function,test_deprecation_warnings,(),Function: test_deprecation_warnings(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_stochastic.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_stochastic.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_stochastic.py,python,import,,,Import: mesolve from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",mesolve,qutip,,,,,,,,,,,,,,,,
test_stochastic.py,python,import,,,Import: liouvillian from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",liouvillian,qutip,,,,,,,,,,,,,,,,
test_stochastic.py,python,import,,,Import: QobjEvo from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",QobjEvo,qutip,,,,,,,,,,,,,,,,
test_stochastic.py,python,import,,,Import: spre from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",spre,qutip,,,,,,,,,,,,,,,,
test_stochastic.py,python,import,,,Import: spost from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",spost,qutip,,,,,,,,,,,,,,,,
test_stochastic.py,python,import,,,Import: destroy from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",destroy,qutip,,,,,,,,,,,,,,,,
test_stochastic.py,python,import,,,Import: coherent from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",coherent,qutip,,,,,,,,,,,,,,,,
test_stochastic.py,python,import,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",qeye,qutip,,,,,,,,,,,,,,,,
test_stochastic.py,python,import,,,Import: fock_dm from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",fock_dm,qutip,,,,,,,,,,,,,,,,
test_stochastic.py,python,import,,,Import: num from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",num,qutip,,,,,,,,,,,,,,,,
test_stochastic.py,python,import,,,Import: basis from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",basis,qutip,,,,,,,,,,,,,,,,
test_stochastic.py,python,local_import,,,Import: smesolve from qutip.solver.stochastic,qutip,qutip,v5.0.4,"from qutip.solver.stochastic import smesolve, ssesolve, SMESolver, SSESolver",smesolve,qutip.solver.stochastic,qutip.solver.stochastic,,,,,,,,,,,,,,,
test_stochastic.py,python,local_import,,,Import: ssesolve from qutip.solver.stochastic,qutip,qutip,v5.0.4,"from qutip.solver.stochastic import smesolve, ssesolve, SMESolver, SSESolver",ssesolve,qutip.solver.stochastic,qutip.solver.stochastic,,,,,,,,,,,,,,,
test_stochastic.py,python,local_import,,,Import: SMESolver from qutip.solver.stochastic,qutip,qutip,v5.0.4,"from qutip.solver.stochastic import smesolve, ssesolve, SMESolver, SSESolver",SMESolver,qutip.solver.stochastic,qutip.solver.stochastic,,,,,,,,,,,,,,,
test_stochastic.py,python,local_import,,,Import: SSESolver from qutip.solver.stochastic,qutip,qutip,v5.0.4,"from qutip.solver.stochastic import smesolve, ssesolve, SMESolver, SSESolver",SSESolver,qutip.solver.stochastic,qutip.solver.stochastic,,,,,,,,,,,,,,,
test_stochastic.py,python,local_import,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,data,qutip.core,qutip.core,,,,,,,,,,,,,,,
test_stochastic.py,python,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_stochastic.py,python,,,,Directory: qutip\tests\solver\test_stochastic.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_transfertensor.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_transfertensor.py,python,import,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,qutip,,,,,,,,,,,,,,,,,
test_transfertensor.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_transfertensor.py,python,local_import,,,Import: ttmsolve from qutip.solver.nonmarkov.transfertensor,qutip,qutip,v5.0.4,from qutip.solver.nonmarkov.transfertensor import ttmsolve,ttmsolve,qutip.solver.nonmarkov.transfertensor,qutip.solver.nonmarkov.transfertensor,,,,,,,,,,,,,,,
test_transfertensor.py,python,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_transfertensor.py,python,,,,Directory: qutip\tests\solver\test_transfertensor.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,Directory: qutip\tests\solver\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,class_field,,,Class field: [instance] RateSet.coeffs = coeffs,qutip,qutip,v5.0.4,,,,,,,,,RateSet,__init__,"(self, coeffs, tlist)",self.coeffs = coeffs,self.coeffs = coeffs,,,,,,
test_nm_mcsolve.py,python,class_field,,,Class field: [instance] RateSet.tlist = tlist,qutip,qutip,v5.0.4,,,,,,,,,RateSet,__init__,"(self, coeffs, tlist)",self.tlist = tlist,self.tlist = tlist,,,,,,
test_nm_mcsolve.py,python,class_method,,,"Class method: RateSet.__init__(self, coeffs, tlist)",qutip,qutip,v5.0.4,,,,,,,,,RateSet,__init__,"(self, coeffs, tlist)",,,,,,,,
test_nm_mcsolve.py,python,class_method,,,"Class method: [staticmethod] TestRateShiftCoefficient.assert_f_equals_rate_shift(f, coeffs, tlist, **kw)",qutip,qutip,v5.0.4,,,,,,,,,TestRateShiftCoefficient,assert_f_equals_rate_shift,"(f, coeffs, tlist, **kw)",,,,staticmethod,,,,
test_nm_mcsolve.py,python,class_method,,,"Class method: TestRateShiftCoefficient.test_call(self, rates)",qutip,qutip,v5.0.4,,,,,,,,,TestRateShiftCoefficient,test_call,"(self, rates)",,,,,,,,
test_nm_mcsolve.py,python,class_method,,,"Class method: TestRateShiftCoefficient.test_as_double(self, rates)",qutip,qutip,v5.0.4,,,,,,,,,TestRateShiftCoefficient,test_as_double,"(self, rates)",,,,,,,,
test_nm_mcsolve.py,python,class_method,,,"Class method: TestRateShiftCoefficient.test_copy(self, rates)",qutip,qutip,v5.0.4,,,,,,,,,TestRateShiftCoefficient,test_copy,"(self, rates)",,,,,,,,
test_nm_mcsolve.py,python,class_method,,,Class method: TestRateShiftCoefficient.test_replace_arguments(self),qutip,qutip,v5.0.4,,,,,,,,,TestRateShiftCoefficient,test_replace_arguments,(self),,,,,,,,
test_nm_mcsolve.py,python,class_method,,,Class method: TestRateShiftCoefficient.test_reduce(self),qutip,qutip,v5.0.4,,,,,,,,,TestRateShiftCoefficient,test_reduce,(self),,,,,,,,
test_nm_mcsolve.py,python,class_method,,,"Class method: [staticmethod] TestSqrtRealCoefficient.assert_f_equals_sqrt_real(f, coeff, tlist, **kw)",qutip,qutip,v5.0.4,,,,,,,,,TestSqrtRealCoefficient,assert_f_equals_sqrt_real,"(f, coeff, tlist, **kw)",,,,staticmethod,,,,
test_nm_mcsolve.py,python,class_method,,,Class method: TestSqrtRealCoefficient.test_call(self),qutip,qutip,v5.0.4,,,,,,,,,TestSqrtRealCoefficient,test_call,(self),,,,,,,,
test_nm_mcsolve.py,python,class_method,,,Class method: TestSqrtRealCoefficient.test_copy(self),qutip,qutip,v5.0.4,,,,,,,,,TestSqrtRealCoefficient,test_copy,(self),,,,,,,,
test_nm_mcsolve.py,python,class_method,,,Class method: TestSqrtRealCoefficient.test_replace_arguments(self),qutip,qutip,v5.0.4,,,,,,,,,TestSqrtRealCoefficient,test_replace_arguments,(self),,,,,,,,
test_nm_mcsolve.py,python,class_method,,,Class method: TestSqrtRealCoefficient.test_reduce(self),qutip,qutip,v5.0.4,,,,,,,,,TestSqrtRealCoefficient,test_reduce,(self),,,,,,,,
test_nm_mcsolve.py,python,class,,,Class: RateSet,qutip,qutip,v5.0.4,,,,,,,,,RateSet,,,,,,,,,,
test_nm_mcsolve.py,python,class,,,Class: TestRateShiftCoefficient,qutip,qutip,v5.0.4,,,,,,,,,TestRateShiftCoefficient,,,,,,,,,,
test_nm_mcsolve.py,python,class,,,Class: TestSqrtRealCoefficient,qutip,qutip,v5.0.4,,,,,,,,,TestSqrtRealCoefficient,,,,,,,,,,
test_nm_mcsolve.py,python,function,assert_functions_equal,"(f, g, tlist, rtol=1e-12, atol=1e-12)","Function: assert_functions_equal(f, g, tlist, rtol=1e-12, atol=1e-12)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,function,rate_set,"(coeffs, *, tlist=np.linspace(0, 1, 20), args=None, **kw)","Function: rate_set(coeffs, *, tlist=np.linspace(0, 1, 20), args=None, **kw)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,function,sin_t,(t),Function: sin_t(t),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,import,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,numbers,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,import,,,Import: pickle,qutip,qutip,v5.0.4,import pickle,pickle,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,import,,,Import: coefficient from qutip,qutip,qutip,v5.0.4,from qutip import coefficient,coefficient,qutip,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,local_import,,,Import: ConstantCoefficient from qutip.core.coefficient,qutip,qutip,v5.0.4,from qutip.core.coefficient import ConstantCoefficient,ConstantCoefficient,qutip.core.coefficient,qutip.core.coefficient,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,local_import,,,Import: RateShiftCoefficient from qutip.solver.cy.nm_mcsolve,qutip,qutip,v5.0.4,"from qutip.solver.cy.nm_mcsolve import (
    RateShiftCoefficient, SqrtRealCoefficient,
)",RateShiftCoefficient,qutip.solver.cy.nm_mcsolve,qutip.solver.cy.nm_mcsolve,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,local_import,,,Import: SqrtRealCoefficient from qutip.solver.cy.nm_mcsolve,qutip,qutip,v5.0.4,"from qutip.solver.cy.nm_mcsolve import (
    RateShiftCoefficient, SqrtRealCoefficient,
)",SqrtRealCoefficient,qutip.solver.cy.nm_mcsolve,qutip.solver.cy.nm_mcsolve,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,,,,File: qutip\tests\solver\cy,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_nm_mcsolve.py,python,,,,Directory: qutip\tests\solver\cy\test_nm_mcsolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_bofin_baths.py,python,class_method,,,Class method: TestBathExponent.test_create(self),qutip,qutip,v5.0.4,,,,,,,,,TestBathExponent,test_create,(self),,,,,,,,
test_bofin_baths.py,python,class_method,,,Class method: TestBathExponent.test_repr(self),qutip,qutip,v5.0.4,,,,,,,,,TestBathExponent,test_repr,(self),,,,,,,,
test_bofin_baths.py,python,class_method,,,Class method: TestBath.test_create(self),qutip,qutip,v5.0.4,,,,,,,,,TestBath,test_create,(self),,,,,,,,
test_bofin_baths.py,python,class_method,,,Class method: TestBosonicBath.test_create(self),qutip,qutip,v5.0.4,,,,,,,,,TestBosonicBath,test_create,(self),,,,,,,,
test_bofin_baths.py,python,class_method,,,Class method: TestBosonicBath.test_combine(self),qutip,qutip,v5.0.4,,,,,,,,,TestBosonicBath,test_combine,(self),,,,,,,,
test_bofin_baths.py,python,class_method,,,Class method: TestDrudeLorentzBath.test_create(self),qutip,qutip,v5.0.4,,,,,,,,,TestDrudeLorentzBath,test_create,(self),,,,,,,,
test_bofin_baths.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['combine'], [
        pytest.param(True, id=""combine""),
        pytest.param(False, id=""no-combine""),
    ])] TestDrudeLorentzBath.test_terminator(self, combine)",qutip,qutip,v5.0.4,,,,,,,,,TestDrudeLorentzBath,test_terminator,"(self, combine)",,,,"pytest.mark.parametrize(['combine'], [
        pytest.param(True, id=""combine""),
        pytest.param(False, id=""no-combine""),
    ])",,,,
test_bofin_baths.py,python,class_method,,,Class method: TestDrudeLorentzPadeBath.test_create(self),qutip,qutip,v5.0.4,,,,,,,,,TestDrudeLorentzPadeBath,test_create,(self),,,,,,,,
test_bofin_baths.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['combine'], [
        pytest.param(True, id=""combine""),
        pytest.param(False, id=""no-combine""),
    ])] TestDrudeLorentzPadeBath.test_terminator(self, combine)",qutip,qutip,v5.0.4,,,,,,,,,TestDrudeLorentzPadeBath,test_terminator,"(self, combine)",,,,"pytest.mark.parametrize(['combine'], [
        pytest.param(True, id=""combine""),
        pytest.param(False, id=""no-combine""),
    ])",,,,
test_bofin_baths.py,python,class_method,,,Class method: TestUnderDampedBath.test_create(self),qutip,qutip,v5.0.4,,,,,,,,,TestUnderDampedBath,test_create,(self),,,,,,,,
test_bofin_baths.py,python,class_method,,,Class method: TestFermionicBath.test_create(self),qutip,qutip,v5.0.4,,,,,,,,,TestFermionicBath,test_create,(self),,,,,,,,
test_bofin_baths.py,python,class_method,,,Class method: TestLorentzianBath.test_create(self),qutip,qutip,v5.0.4,,,,,,,,,TestLorentzianBath,test_create,(self),,,,,,,,
test_bofin_baths.py,python,class_method,,,Class method: TestLorentzianPadeBath.test_create(self),qutip,qutip,v5.0.4,,,,,,,,,TestLorentzianPadeBath,test_create,(self),,,,,,,,
test_bofin_baths.py,python,class,,,Class: TestBathExponent,qutip,qutip,v5.0.4,,,,,,,,,TestBathExponent,,,,,,,,,,
test_bofin_baths.py,python,class,,,Class: TestBath,qutip,qutip,v5.0.4,,,,,,,,,TestBath,,,,,,,,,,
test_bofin_baths.py,python,class,,,Class: TestBosonicBath,qutip,qutip,v5.0.4,,,,,,,,,TestBosonicBath,,,,,,,,,,
test_bofin_baths.py,python,class,,,Class: TestDrudeLorentzBath,qutip,qutip,v5.0.4,,,,,,,,,TestDrudeLorentzBath,,,,,,,,,,
test_bofin_baths.py,python,class,,,Class: TestDrudeLorentzPadeBath,qutip,qutip,v5.0.4,,,,,,,,,TestDrudeLorentzPadeBath,,,,,,,,,,
test_bofin_baths.py,python,class,,,Class: TestUnderDampedBath,qutip,qutip,v5.0.4,,,,,,,,,TestUnderDampedBath,,,,,,,,,,
test_bofin_baths.py,python,class,,,Class: TestFermionicBath,qutip,qutip,v5.0.4,,,,,,,,,TestFermionicBath,,,,,,,,,,
test_bofin_baths.py,python,class,,,Class: TestLorentzianBath,qutip,qutip,v5.0.4,,,,,,,,,TestLorentzianBath,,,,,,,,,,
test_bofin_baths.py,python,class,,,Class: TestLorentzianPadeBath,qutip,qutip,v5.0.4,,,,,,,,,TestLorentzianPadeBath,,,,,,,,,,
test_bofin_baths.py,python,function,isequal,"(Q1, Q2, tol)","Function: isequal(Q1, Q2, tol)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_bofin_baths.py,python,function,check_exponent,"(
    exp, type, dim, Q, ck, vk, ck2=None, sigma_bar_k_offset=None, tag=None,
)","Function: check_exponent(
    exp, type, dim, Q, ck, vk, ck2=None, sigma_bar_k_offset=None, tag=None,
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_bofin_baths.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_bofin_baths.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_bofin_baths.py,python,import,,,Import: spre from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, sigmax, sigmaz",spre,qutip,,,,,,,,,,,,,,,,
test_bofin_baths.py,python,import,,,Import: spost from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, sigmax, sigmaz",spost,qutip,,,,,,,,,,,,,,,,
test_bofin_baths.py,python,import,,,Import: sigmax from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, sigmax, sigmaz",sigmax,qutip,,,,,,,,,,,,,,,,
test_bofin_baths.py,python,import,,,Import: sigmaz from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, sigmax, sigmaz",sigmaz,qutip,,,,,,,,,,,,,,,,
test_bofin_baths.py,python,local_import,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,data,qutip.core,qutip.core,,,,,,,,,,,,,,,
test_bofin_baths.py,python,local_import,,,Import: BathExponent from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",BathExponent,qutip.solver.heom.bofin_baths,qutip.solver.heom.bofin_baths,,,,,,,,,,,,,,,
test_bofin_baths.py,python,local_import,,,Import: Bath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",Bath,qutip.solver.heom.bofin_baths,qutip.solver.heom.bofin_baths,,,,,,,,,,,,,,,
test_bofin_baths.py,python,local_import,,,Import: BosonicBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",BosonicBath,qutip.solver.heom.bofin_baths,qutip.solver.heom.bofin_baths,,,,,,,,,,,,,,,
test_bofin_baths.py,python,local_import,,,Import: DrudeLorentzBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",DrudeLorentzBath,qutip.solver.heom.bofin_baths,qutip.solver.heom.bofin_baths,,,,,,,,,,,,,,,
test_bofin_baths.py,python,local_import,,,Import: DrudeLorentzPadeBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",DrudeLorentzPadeBath,qutip.solver.heom.bofin_baths,qutip.solver.heom.bofin_baths,,,,,,,,,,,,,,,
test_bofin_baths.py,python,local_import,,,Import: UnderDampedBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",UnderDampedBath,qutip.solver.heom.bofin_baths,qutip.solver.heom.bofin_baths,,,,,,,,,,,,,,,
test_bofin_baths.py,python,local_import,,,Import: FermionicBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",FermionicBath,qutip.solver.heom.bofin_baths,qutip.solver.heom.bofin_baths,,,,,,,,,,,,,,,
test_bofin_baths.py,python,local_import,,,Import: LorentzianBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",LorentzianBath,qutip.solver.heom.bofin_baths,qutip.solver.heom.bofin_baths,,,,,,,,,,,,,,,
test_bofin_baths.py,python,local_import,,,Import: LorentzianPadeBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",LorentzianPadeBath,qutip.solver.heom.bofin_baths,qutip.solver.heom.bofin_baths,,,,,,,,,,,,,,,
test_bofin_baths.py,python,,,,File: qutip\tests\solver\heom,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_bofin_baths.py,python,,,,Directory: qutip\tests\solver\heom\test_bofin_baths.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] DrudeLorentzPureDephasingModel.lam = lam,qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPureDephasingModel,__init__,"(self, lam, gamma, T, Nk)",self.lam = lam,self.lam = lam,,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] DrudeLorentzPureDephasingModel.gamma = gamma,qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPureDephasingModel,__init__,"(self, lam, gamma, T, Nk)",self.gamma = gamma,self.gamma = gamma,,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] DrudeLorentzPureDephasingModel.T = T,qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPureDephasingModel,__init__,"(self, lam, gamma, T, Nk)",self.T = T,self.T = T,,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] DrudeLorentzPureDephasingModel.Nk = Nk,qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPureDephasingModel,__init__,"(self, lam, gamma, T, Nk)",self.Nk = Nk,self.Nk = Nk,,,,,,
test_bofin_solvers.py,python,class_field,,,"Class field: [instance] DrudeLorentzPureDephasingModel.H = Qobj(1e-5 * np.ones((2, 2)))",qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPureDephasingModel,__init__,"(self, lam, gamma, T, Nk)","self.H = Qobj(1e-5 * np.ones((2, 2)))","self.H = Qobj(1e-5 * np.ones((2, 2)))",,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] DrudeLorentzPureDephasingModel.Q = sigmaz(),qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPureDephasingModel,__init__,"(self, lam, gamma, T, Nk)",self.Q = sigmaz(),self.Q = sigmaz(),,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] UnderdampedPureDephasingModel.lam = lam,qutip,qutip,v5.0.4,,,,,,,,,UnderdampedPureDephasingModel,__init__,"(self, lam,  gamma, w0, T, Nk)",self.lam = lam,self.lam = lam,,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] UnderdampedPureDephasingModel.gamma = gamma,qutip,qutip,v5.0.4,,,,,,,,,UnderdampedPureDephasingModel,__init__,"(self, lam,  gamma, w0, T, Nk)",self.gamma = gamma,self.gamma = gamma,,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] UnderdampedPureDephasingModel.w0 = w0,qutip,qutip,v5.0.4,,,,,,,,,UnderdampedPureDephasingModel,__init__,"(self, lam,  gamma, w0, T, Nk)",self.w0 = w0,self.w0 = w0,,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] UnderdampedPureDephasingModel.T = T,qutip,qutip,v5.0.4,,,,,,,,,UnderdampedPureDephasingModel,__init__,"(self, lam,  gamma, w0, T, Nk)",self.T = T,self.T = T,,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] UnderdampedPureDephasingModel.Nk = Nk,qutip,qutip,v5.0.4,,,,,,,,,UnderdampedPureDephasingModel,__init__,"(self, lam,  gamma, w0, T, Nk)",self.Nk = Nk,self.Nk = Nk,,,,,,
test_bofin_solvers.py,python,class_field,,,"Class field: [instance] UnderdampedPureDephasingModel.H = Qobj(1e-5 * np.ones((2, 2)))",qutip,qutip,v5.0.4,,,,,,,,,UnderdampedPureDephasingModel,__init__,"(self, lam,  gamma, w0, T, Nk)","self.H = Qobj(1e-5 * np.ones((2, 2)))","self.H = Qobj(1e-5 * np.ones((2, 2)))",,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] UnderdampedPureDephasingModel.Q = sigmaz(),qutip,qutip,v5.0.4,,,,,,,,,UnderdampedPureDephasingModel,__init__,"(self, lam,  gamma, w0, T, Nk)",self.Q = sigmaz(),self.Q = sigmaz(),,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] BosonicMode.N = N,qutip,qutip,v5.0.4,,,,,,,,,BosonicMode,__init__,"(self, N, Lambda, Omega, gamma_b)",self.N = N,self.N = N,,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] BosonicMode.Lambda = Lambda,qutip,qutip,v5.0.4,,,,,,,,,BosonicMode,__init__,"(self, N, Lambda, Omega, gamma_b)",self.Lambda = Lambda,self.Lambda = Lambda,,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] BosonicMode.Omega = Omega,qutip,qutip,v5.0.4,,,,,,,,,BosonicMode,__init__,"(self, N, Lambda, Omega, gamma_b)",self.Omega = Omega,self.Omega = Omega,,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] BosonicMode.gamma_b = gamma_b,qutip,qutip,v5.0.4,,,,,,,,,BosonicMode,__init__,"(self, N, Lambda, Omega, gamma_b)",self.gamma_b = gamma_b,self.gamma_b = gamma_b,,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] DiscreteLevelCurrentModel.e1 = e1,qutip,qutip,v5.0.4,,,,,,,,,DiscreteLevelCurrentModel,__init__,"(self, gamma, W, T, lmax, theta=2., e1=1., bosonic_mode=None)",self.e1 = e1,self.e1 = e1,,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] DiscreteLevelCurrentModel.gamma = gamma,qutip,qutip,v5.0.4,,,,,,,,,DiscreteLevelCurrentModel,__init__,"(self, gamma, W, T, lmax, theta=2., e1=1., bosonic_mode=None)",self.gamma = gamma,self.gamma = gamma,,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] DiscreteLevelCurrentModel.W = W,qutip,qutip,v5.0.4,,,,,,,,,DiscreteLevelCurrentModel,__init__,"(self, gamma, W, T, lmax, theta=2., e1=1., bosonic_mode=None)",self.W = W,self.W = W,,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] DiscreteLevelCurrentModel.T = T,qutip,qutip,v5.0.4,,,,,,,,,DiscreteLevelCurrentModel,__init__,"(self, gamma, W, T, lmax, theta=2., e1=1., bosonic_mode=None)",self.T = T,self.T = T,,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] DiscreteLevelCurrentModel.lmax = lmax,qutip,qutip,v5.0.4,,,,,,,,,DiscreteLevelCurrentModel,__init__,"(self, gamma, W, T, lmax, theta=2., e1=1., bosonic_mode=None)",self.lmax = lmax,self.lmax = lmax,,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] DiscreteLevelCurrentModel.beta = 1. / T,qutip,qutip,v5.0.4,,,,,,,,,DiscreteLevelCurrentModel,__init__,"(self, gamma, W, T, lmax, theta=2., e1=1., bosonic_mode=None)",self.beta = 1. / T,self.beta = 1. / T,,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] DiscreteLevelCurrentModel.theta = theta,qutip,qutip,v5.0.4,,,,,,,,,DiscreteLevelCurrentModel,__init__,"(self, gamma, W, T, lmax, theta=2., e1=1., bosonic_mode=None)",self.theta = theta,self.theta = theta,,,,,,
test_bofin_solvers.py,python,class_field,,,Class field: [instance] DiscreteLevelCurrentModel.bosonic_mode = bosonic_mode,qutip,qutip,v5.0.4,,,,,,,,,DiscreteLevelCurrentModel,__init__,"(self, gamma, W, T, lmax, theta=2., e1=1., bosonic_mode=None)",self.bosonic_mode = bosonic_mode,self.bosonic_mode = bosonic_mode,,,,,,
test_bofin_solvers.py,python,class_method,,,"Class method: TestHierarchyADOs.mk_exponents(self, dims)",qutip,qutip,v5.0.4,,,,,,,,,TestHierarchyADOs,mk_exponents,"(self, dims)",,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: TestHierarchyADOs.test_create(self),qutip,qutip,v5.0.4,,,,,,,,,TestHierarchyADOs,test_create,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: TestHierarchyADOs.test_state_idx(self),qutip,qutip,v5.0.4,,,,,,,,,TestHierarchyADOs,test_state_idx,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: TestHierarchyADOs.test_next(self),qutip,qutip,v5.0.4,,,,,,,,,TestHierarchyADOs,test_next,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: TestHierarchyADOs.test_prev(self),qutip,qutip,v5.0.4,,,,,,,,,TestHierarchyADOs,test_prev,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: TestHierarchyADOs.test_exps(self),qutip,qutip,v5.0.4,,,,,,,,,TestHierarchyADOs,test_exps,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: TestHierarchyADOs.test_filter_by_nothing(self),qutip,qutip,v5.0.4,,,,,,,,,TestHierarchyADOs,test_filter_by_nothing,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: TestHierarchyADOs.test_filter_by_level(self),qutip,qutip,v5.0.4,,,,,,,,,TestHierarchyADOs,test_filter_by_level,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: TestHierarchyADOs.test_filter_by_exponents(self),qutip,qutip,v5.0.4,,,,,,,,,TestHierarchyADOs,test_filter_by_exponents,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,"Class method: TestHierarchyADOsState.mk_ados(self, bath_dims, max_depth)",qutip,qutip,v5.0.4,,,,,,,,,TestHierarchyADOsState,mk_ados,"(self, bath_dims, max_depth)",,,,,,,,
test_bofin_solvers.py,python,class_method,,,"Class method: TestHierarchyADOsState.mk_rho_and_soln(self, ados, rho_dims)",qutip,qutip,v5.0.4,,,,,,,,,TestHierarchyADOsState,mk_rho_and_soln,"(self, ados, rho_dims)",,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: TestHierarchyADOsState.test_create(self),qutip,qutip,v5.0.4,,,,,,,,,TestHierarchyADOsState,test_create,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: TestHierarchyADOsState.test_extract(self),qutip,qutip,v5.0.4,,,,,,,,,TestHierarchyADOsState,test_extract,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,"Class method: DrudeLorentzPureDephasingModel.__init__(self, lam, gamma, T, Nk)",qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPureDephasingModel,__init__,"(self, lam, gamma, T, Nk)",,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: DrudeLorentzPureDephasingModel.rho(self),qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPureDephasingModel,rho,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,"Class method: DrudeLorentzPureDephasingModel.state_results(self, states)",qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPureDephasingModel,state_results,"(self, states)",,,,,,,,
test_bofin_solvers.py,python,class_method,,,"Class method: DrudeLorentzPureDephasingModel.analytic_results(self, tlist)",qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPureDephasingModel,analytic_results,"(self, tlist)",,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: DrudeLorentzPureDephasingModel.bath_coefficients(self),qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPureDephasingModel,bath_coefficients,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,"Class method: UnderdampedPureDephasingModel.__init__(self, lam,  gamma, w0, T, Nk)",qutip,qutip,v5.0.4,,,,,,,,,UnderdampedPureDephasingModel,__init__,"(self, lam,  gamma, w0, T, Nk)",,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: UnderdampedPureDephasingModel.rho(self),qutip,qutip,v5.0.4,,,,,,,,,UnderdampedPureDephasingModel,rho,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,"Class method: UnderdampedPureDephasingModel.state_results(self, states)",qutip,qutip,v5.0.4,,,,,,,,,UnderdampedPureDephasingModel,state_results,"(self, states)",,,,,,,,
test_bofin_solvers.py,python,class_method,,,"Class method: UnderdampedPureDephasingModel.analytic_results(self, tlist)",qutip,qutip,v5.0.4,,,,,,,,,UnderdampedPureDephasingModel,analytic_results,"(self, tlist)",,,,,,,,
test_bofin_solvers.py,python,class_method,,,"Class method: BosonicMode.__init__(self, N, Lambda, Omega, gamma_b)",qutip,qutip,v5.0.4,,,,,,,,,BosonicMode,__init__,"(self, N, Lambda, Omega, gamma_b)",,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: BosonicMode.bath_coefficients(self),qutip,qutip,v5.0.4,,,,,,,,,BosonicMode,bath_coefficients,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,"Class method: DiscreteLevelCurrentModel.__init__(self, gamma, W, T, lmax, theta=2., e1=1., bosonic_mode=None)",qutip,qutip,v5.0.4,,,,,,,,,DiscreteLevelCurrentModel,__init__,"(self, gamma, W, T, lmax, theta=2., e1=1., bosonic_mode=None)",,,,,,,,
test_bofin_solvers.py,python,class_method,,,"Class method: DiscreteLevelCurrentModel.rho(self, rho_fermion=None)",qutip,qutip,v5.0.4,,,,,,,,,DiscreteLevelCurrentModel,rho,"(self, rho_fermion=None)",,,,,,,,
test_bofin_solvers.py,python,class_method,,,"Class method: DiscreteLevelCurrentModel.sys_occupation(self, state)",qutip,qutip,v5.0.4,,,,,,,,,DiscreteLevelCurrentModel,sys_occupation,"(self, state)",,,,,,,,
test_bofin_solvers.py,python,class_method,,,"Class method: DiscreteLevelCurrentModel.state_current(self, ado_state, tags=None)",qutip,qutip,v5.0.4,,,,,,,,,DiscreteLevelCurrentModel,state_current,"(self, ado_state, tags=None)",,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: DiscreteLevelCurrentModel.analytic_current(self),qutip,qutip,v5.0.4,,,,,,,,,DiscreteLevelCurrentModel,analytic_current,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: DiscreteLevelCurrentModel.bath_coefficients(self),qutip,qutip,v5.0.4,,,,,,,,,DiscreteLevelCurrentModel,bath_coefficients,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: TestHEOMSolver.test_create_bosonic(self),qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,test_create_bosonic,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: TestHEOMSolver.test_create_fermionic(self),qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,test_create_fermionic,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: TestHEOMSolver.test_create_mixed_bosonic_and_fermionic(self),qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,test_create_mixed_bosonic_and_fermionic,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: TestHEOMSolver.test_create_bath_errors(self),qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,test_create_bath_errors,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: TestHEOMSolver.test_create_h_sys_errors(self),qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,test_create_h_sys_errors,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['method'], [
        pytest.param(""run"", id=""run""),
        pytest.param(""start"", id=""start""),
    ])] TestHEOMSolver.test_invalid_rho0_errors(self, method)",qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,test_invalid_rho0_errors,"(self, method)",,,,"pytest.mark.parametrize(['method'], [
        pytest.param(""run"", id=""run""),
        pytest.param(""start"", id=""start""),
    ])",,,,
test_bofin_solvers.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj"", id=""qobj""),
        pytest.param(""qobjevo_const"", id=""qobjevo_const""),
        pytest.param(""qobjevo_timedep"", id=""qobjevo_timedep""),
    ])] TestHEOMSolver.test_pure_dephasing_model_bosonic_bath(
        self, evo, liouvillianize, atol=1e-3
    )",qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,test_pure_dephasing_model_bosonic_bath,"(
        self, evo, liouvillianize, atol=1e-3
    )",,,,"pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj"", id=""qobj""),
        pytest.param(""qobjevo_const"", id=""qobjevo_const""),
        pytest.param(""qobjevo_timedep"", id=""qobjevo_timedep""),
    ])",,,,
test_bofin_solvers.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])] TestHEOMSolver.test_pure_dephasing_model_bosonic_bath(
        self, evo, liouvillianize, atol=1e-3
    )",qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,test_pure_dephasing_model_bosonic_bath,"(
        self, evo, liouvillianize, atol=1e-3
    )",,,,"pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])",,,,
test_bofin_solvers.py,python,class_method,,,"Class method: TestHEOMSolver.test_steady_state_bosonic_bath(
        self, atol=1e-3
    )",qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,test_steady_state_bosonic_bath,"(
        self, atol=1e-3
    )",,,,,,,,
test_bofin_solvers.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['terminator'], [
        pytest.param(True, id=""terminator""),
        pytest.param(False, id=""noterminator""),
    ])] TestHEOMSolver.test_pure_dephasing_model_drude_lorentz_baths(
        self, terminator, bath_cls, atol=1e-3
    )",qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,test_pure_dephasing_model_drude_lorentz_baths,"(
        self, terminator, bath_cls, atol=1e-3
    )",,,,"pytest.mark.parametrize(['terminator'], [
        pytest.param(True, id=""terminator""),
        pytest.param(False, id=""noterminator""),
    ])",,,,
test_bofin_solvers.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['bath_cls'], [
        pytest.param(DrudeLorentzBath, id=""matsubara""),
        pytest.param(DrudeLorentzPadeBath, id=""pade""),
    ])] TestHEOMSolver.test_pure_dephasing_model_drude_lorentz_baths(
        self, terminator, bath_cls, atol=1e-3
    )",qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,test_pure_dephasing_model_drude_lorentz_baths,"(
        self, terminator, bath_cls, atol=1e-3
    )",,,,"pytest.mark.parametrize(['bath_cls'], [
        pytest.param(DrudeLorentzBath, id=""matsubara""),
        pytest.param(DrudeLorentzPadeBath, id=""pade""),
    ])",,,,
test_bofin_solvers.py,python,class_method,,,"Class method: TestHEOMSolver.test_underdamped_pure_dephasing_model_underdamped_bath(
        self, atol=1e-3
    )",qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,test_underdamped_pure_dephasing_model_underdamped_bath,"(
        self, atol=1e-3
    )",,,,,,,,
test_bofin_solvers.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj""),
        pytest.param(""qobjevo_const""),
        pytest.param(""qobjevo_timedep""),
    ])] TestHEOMSolver.test_discrete_level_model_fermionic_bath(self, evo, liouvillianize)",qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,test_discrete_level_model_fermionic_bath,"(self, evo, liouvillianize)",,,,"pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj""),
        pytest.param(""qobjevo_const""),
        pytest.param(""qobjevo_timedep""),
    ])",,,,
test_bofin_solvers.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])] TestHEOMSolver.test_discrete_level_model_fermionic_bath(self, evo, liouvillianize)",qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,test_discrete_level_model_fermionic_bath,"(self, evo, liouvillianize)",,,,"pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])",,,,
test_bofin_solvers.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['bath_cls', 'analytic_current'], [
        pytest.param(LorentzianBath, 0.001101, id=""matsubara""),
        pytest.param(LorentzianPadeBath, 0.000813, id=""pade""),
    ])] TestHEOMSolver.test_discrete_level_model_lorentzian_baths(
        self, bath_cls, analytic_current, atol=1e-3
    )",qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,test_discrete_level_model_lorentzian_baths,"(
        self, bath_cls, analytic_current, atol=1e-3
    )",,,,"pytest.mark.parametrize(['bath_cls', 'analytic_current'], [
        pytest.param(LorentzianBath, 0.001101, id=""matsubara""),
        pytest.param(LorentzianPadeBath, 0.000813, id=""pade""),
    ])",,,,
test_bofin_solvers.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj""),
        pytest.param(""qobjevo_const""),
        pytest.param(""qobjevo_timedep""),
    ])] TestHEOMSolver.test_discrete_level_model_fermionic_bath_with_decoupled_bosonic_bath(
        self, evo, liouvillianize
    )",qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,test_discrete_level_model_fermionic_bath_with_decoupled_bosonic_bath,"(
        self, evo, liouvillianize
    )",,,,"pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj""),
        pytest.param(""qobjevo_const""),
        pytest.param(""qobjevo_timedep""),
    ])",,,,
test_bofin_solvers.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])] TestHEOMSolver.test_discrete_level_model_fermionic_bath_with_decoupled_bosonic_bath(
        self, evo, liouvillianize
    )",qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,test_discrete_level_model_fermionic_bath_with_decoupled_bosonic_bath,"(
        self, evo, liouvillianize
    )",,,,"pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])",,,,
test_bofin_solvers.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj""),
        pytest.param(""qobjevo_const""),
        pytest.param(""qobjevo_timedep""),
    ])] TestHEOMSolver.test_discrete_level_model_fermionic_bath_with_coupled_bosonic_bath(
        self, evo, liouvillianize
    )",qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,test_discrete_level_model_fermionic_bath_with_coupled_bosonic_bath,"(
        self, evo, liouvillianize
    )",,,,"pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj""),
        pytest.param(""qobjevo_const""),
        pytest.param(""qobjevo_timedep""),
    ])",,,,
test_bofin_solvers.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])] TestHEOMSolver.test_discrete_level_model_fermionic_bath_with_coupled_bosonic_bath(
        self, evo, liouvillianize
    )",qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,test_discrete_level_model_fermionic_bath_with_coupled_bosonic_bath,"(
        self, evo, liouvillianize
    )",,,,"pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])",,,,
test_bofin_solvers.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['ado_format'], [
        pytest.param(""hierarchy-ados-state"", id=""hierarchy-ados-state""),
        pytest.param(""numpy"", id=""numpy""),
    ])] TestHEOMSolver.test_ado_input_and_return(self, ado_format)",qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,test_ado_input_and_return,"(self, ado_format)",,,,"pytest.mark.parametrize(['ado_format'], [
        pytest.param(""hierarchy-ados-state"", id=""hierarchy-ados-state""),
        pytest.param(""numpy"", id=""numpy""),
    ])",,,,
test_bofin_solvers.py,python,class_method,,,Class method: TestHEOMSolver.test_solving_with_step(self),qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,test_solving_with_step,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj"", id=""qobj""),
        pytest.param(""listevo_const"", id=""listevo_const""),
        pytest.param(""qobjevo_const"", id=""qobjevo_const""),
        pytest.param(""qobjevo_timedep"", id=""qobjevo_timedep""),
    ])] TestHeomsolveFunction.test_heomsolve_with_pure_dephasing_model(
        self, evo, liouvillianize, atol=1e-3
    )",qutip,qutip,v5.0.4,,,,,,,,,TestHeomsolveFunction,test_heomsolve_with_pure_dephasing_model,"(
        self, evo, liouvillianize, atol=1e-3
    )",,,,"pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj"", id=""qobj""),
        pytest.param(""listevo_const"", id=""listevo_const""),
        pytest.param(""qobjevo_const"", id=""qobjevo_const""),
        pytest.param(""qobjevo_timedep"", id=""qobjevo_timedep""),
    ])",,,,
test_bofin_solvers.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])] TestHeomsolveFunction.test_heomsolve_with_pure_dephasing_model(
        self, evo, liouvillianize, atol=1e-3
    )",qutip,qutip,v5.0.4,,,,,,,,,TestHeomsolveFunction,test_heomsolve_with_pure_dephasing_model,"(
        self, evo, liouvillianize, atol=1e-3
    )",,,,"pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])",,,,
test_bofin_solvers.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['bnd_cut_approx', 'atol'], [
        pytest.param(True, 1e-4, id=""bnd_cut_approx""),
        pytest.param(False,  1e-3, id=""no_bnd_cut_approx""),
    ])] TestHSolverDL.test_pure_dephasing_model(
        self, bnd_cut_approx, atol, evo, combine, liouvillianize,
    )",qutip,qutip,v5.0.4,,,,,,,,,TestHSolverDL,test_pure_dephasing_model,"(
        self, bnd_cut_approx, atol, evo, combine, liouvillianize,
    )",,,,"pytest.mark.parametrize(['bnd_cut_approx', 'atol'], [
        pytest.param(True, 1e-4, id=""bnd_cut_approx""),
        pytest.param(False,  1e-3, id=""no_bnd_cut_approx""),
    ])",,,,
test_bofin_solvers.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['evo', 'combine'], [
        pytest.param(""qobj"", True, id=""qobj-combined""),
        pytest.param(""qobjevo_const"", True, id=""qobjevo-const-combined""),
        pytest.param(""listevo_const"", True, id=""listevo-const-combined""),
        pytest.param(""qobjevo_timedep"", True, id=""qobjevo-timedep-combined""),
        pytest.param(
            ""qobjevo_timedep"", False, id=""qobjevo-timedep-uncombined"",
        ),
    ])] TestHSolverDL.test_pure_dephasing_model(
        self, bnd_cut_approx, atol, evo, combine, liouvillianize,
    )",qutip,qutip,v5.0.4,,,,,,,,,TestHSolverDL,test_pure_dephasing_model,"(
        self, bnd_cut_approx, atol, evo, combine, liouvillianize,
    )",,,,"pytest.mark.parametrize(['evo', 'combine'], [
        pytest.param(""qobj"", True, id=""qobj-combined""),
        pytest.param(""qobjevo_const"", True, id=""qobjevo-const-combined""),
        pytest.param(""listevo_const"", True, id=""listevo-const-combined""),
        pytest.param(""qobjevo_timedep"", True, id=""qobjevo-timedep-combined""),
        pytest.param(
            ""qobjevo_timedep"", False, id=""qobjevo-timedep-uncombined"",
        ),
    ])",,,,
test_bofin_solvers.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])] TestHSolverDL.test_pure_dephasing_model(
        self, bnd_cut_approx, atol, evo, combine, liouvillianize,
    )",qutip,qutip,v5.0.4,,,,,,,,,TestHSolverDL,test_pure_dephasing_model,"(
        self, bnd_cut_approx, atol, evo, combine, liouvillianize,
    )",,,,"pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])",,,,
test_bofin_solvers.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['bnd_cut_approx', 'tol'], [
        pytest.param(True, 1e-4, id=""bnd_cut_approx""),
        pytest.param(False, 1e-3, id=""renorm""),
    ])] TestHSolverDL.test_hsolverdl_backwards_compatibility(self, bnd_cut_approx, tol)",qutip,qutip,v5.0.4,,,,,,,,,TestHSolverDL,test_hsolverdl_backwards_compatibility,"(self, bnd_cut_approx, tol)",,,,"pytest.mark.parametrize(['bnd_cut_approx', 'tol'], [
        pytest.param(True, 1e-4, id=""bnd_cut_approx""),
        pytest.param(False, 1e-3, id=""renorm""),
    ])",,,,
test_bofin_solvers.py,python,class_method,,,"Class method: [pytest.mark.filterwarnings(""ignore:_zvode.*Excess work done:UserWarning"")] TestHSolverDL.test_integration_error(self)",qutip,qutip,v5.0.4,,,,,,,,,TestHSolverDL,test_integration_error,(self),,,,"pytest.mark.filterwarnings(""ignore:_zvode.*Excess work done:UserWarning"")",,,,
test_bofin_solvers.py,python,class_method,,,"Class method: TestHEOMResult.mk_ados(self, bath_dims, max_depth)",qutip,qutip,v5.0.4,,,,,,,,,TestHEOMResult,mk_ados,"(self, bath_dims, max_depth)",,,,,,,,
test_bofin_solvers.py,python,class_method,,,"Class method: TestHEOMResult.mk_rho_and_soln(self, ados, rho_dims)",qutip,qutip,v5.0.4,,,,,,,,,TestHEOMResult,mk_rho_and_soln,"(self, ados, rho_dims)",,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: TestHEOMResult.test_create_ado_states_attribute(self),qutip,qutip,v5.0.4,,,,,,,,,TestHEOMResult,test_create_ado_states_attribute,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,"Class method: [pytest.mark.parametrize(['e_op_type'], [
        pytest.param(""qobj"", id=""qobj""),
        pytest.param(""qobjevo"", id=""qobjevo""),
        pytest.param(""callable"", id=""callable""),
    ])] TestHEOMResult.test_e_ops(self, e_op_type)",qutip,qutip,v5.0.4,,,,,,,,,TestHEOMResult,test_e_ops,"(self, e_op_type)",,,,"pytest.mark.parametrize(['e_op_type'], [
        pytest.param(""qobj"", id=""qobj""),
        pytest.param(""qobjevo"", id=""qobjevo""),
        pytest.param(""callable"", id=""callable""),
    ])",,,,
test_bofin_solvers.py,python,class_method,,,Class method: TestHEOMResult.test_store_state(self),qutip,qutip,v5.0.4,,,,,,,,,TestHEOMResult,test_store_state,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: TestHEOMResult.test_store_ados(self),qutip,qutip,v5.0.4,,,,,,,,,TestHEOMResult,test_store_ados,(self),,,,,,,,
test_bofin_solvers.py,python,class_method,,,Class method: Test_GatherHEOMRHS.test_simple_gather(self),qutip,qutip,v5.0.4,,,,,,,,,Test_GatherHEOMRHS,test_simple_gather,(self),,,,,,,,
test_bofin_solvers.py,python,class,,,Class: TestHierarchyADOs,qutip,qutip,v5.0.4,,,,,,,,,TestHierarchyADOs,,,,,,,,,,
test_bofin_solvers.py,python,class,,,Class: TestHierarchyADOsState,qutip,qutip,v5.0.4,,,,,,,,,TestHierarchyADOsState,,,,,,,,,,
test_bofin_solvers.py,python,class,,,Class: DrudeLorentzPureDephasingModel,qutip,qutip,v5.0.4,,,,,,,,,DrudeLorentzPureDephasingModel,,,,,,,,,,
test_bofin_solvers.py,python,class,,,Class: UnderdampedPureDephasingModel,qutip,qutip,v5.0.4,,,,,,,,,UnderdampedPureDephasingModel,,,,,,,,,,
test_bofin_solvers.py,python,class,,,Class: BosonicMode,qutip,qutip,v5.0.4,,,,,,,,,BosonicMode,,,,,,,,,,
test_bofin_solvers.py,python,class,,,Class: DiscreteLevelCurrentModel,qutip,qutip,v5.0.4,,,,,,,,,DiscreteLevelCurrentModel,,,,,,,,,,
test_bofin_solvers.py,python,class,,,Class: TestHEOMSolver,qutip,qutip,v5.0.4,,,,,,,,,TestHEOMSolver,,,,,,,,,,
test_bofin_solvers.py,python,class,,,Class: TestHeomsolveFunction,qutip,qutip,v5.0.4,,,,,,,,,TestHeomsolveFunction,,,,,,,,,,
test_bofin_solvers.py,python,class,,,Class: TestHSolverDL,qutip,qutip,v5.0.4,,,,,,,,,TestHSolverDL,,,,,,,,,,
test_bofin_solvers.py,python,class,,,Class: TestHEOMResult,qutip,qutip,v5.0.4,,,,,,,,,TestHEOMResult,,,,,,,,,,
test_bofin_solvers.py,python,class,,,Class: Test_GatherHEOMRHS,qutip,qutip,v5.0.4,,,,,,,,,Test_GatherHEOMRHS,,,,,,,,,,
test_bofin_solvers.py,python,function,fill_options,(**kwargs),Function: fill_options(**kwargs),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,function,assert_raises_steady_state_time_dependent,(hsolver),Function: assert_raises_steady_state_time_dependent(hsolver),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,function,hamiltonian_to_sys,"(H, evo, liouvillianize)","Function: hamiltonian_to_sys(H, evo, liouvillianize)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,constant,,,"Constant: _HAMILTONIAN_EVO_KINDS = {
    ""qobj"": lambda H: H,
    ""qobjevo_const"": lambda H: QobjEvo([H]),
    ""qobjevo_timedep"": lambda H: QobjEvo([H, lambda t: 1.0]),
    ""listevo_const"": lambda H: [H],
}",qutip,qutip,v5.0.4,,,,,"_HAMILTONIAN_EVO_KINDS = {
    ""qobj"": lambda H: H,
    ""qobjevo_const"": lambda H: QobjEvo([H]),
    ""qobjevo_timedep"": lambda H: QobjEvo([H, lambda t: 1.0]),
    ""listevo_const"": lambda H: [H],
}",_HAMILTONIAN_EVO_KINDS,"{
    ""qobj"": lambda H: H,
    ""qobjevo_const"": lambda H: QobjEvo([H]),
    ""qobjevo_timedep"": lambda H: QobjEvo([H, lambda t: 1.0]),
    ""listevo_const"": lambda H: [H],
}",,,,,,,,,,,,
test_bofin_solvers.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,import,,,Import: basis from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",basis,qutip,,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,import,,,Import: destroy from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",destroy,qutip,,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,import,,,Import: expect from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",expect,qutip,,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,import,,,Import: liouvillian from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",liouvillian,qutip,,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,import,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",qeye,qutip,,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,import,,,Import: sigmax from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",sigmax,qutip,,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,import,,,Import: sigmaz from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",sigmaz,qutip,,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,import,,,Import: sigmay from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",sigmay,qutip,,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,import,,,Import: tensor from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",tensor,qutip,,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,import,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",Qobj,qutip,,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,import,,,Import: QobjEvo from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",QobjEvo,qutip,,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,import,,,Import: fidelity from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",fidelity,qutip,,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,local_import,,,Import: eigvalsh from numpy.linalg,qutip,qutip,v5.0.4,from numpy.linalg import eigvalsh,eigvalsh,numpy.linalg,numpy.linalg,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,local_import,,,Import: quad from scipy.integrate,qutip,qutip,v5.0.4,from scipy.integrate import quad,quad,scipy.integrate,scipy.integrate,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,local_import,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,data,qutip.core,qutip.core,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,local_import,,,Import: BathExponent from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",BathExponent,qutip.solver.heom.bofin_baths,qutip.solver.heom.bofin_baths,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,local_import,,,Import: Bath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",Bath,qutip.solver.heom.bofin_baths,qutip.solver.heom.bofin_baths,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,local_import,,,Import: BosonicBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",BosonicBath,qutip.solver.heom.bofin_baths,qutip.solver.heom.bofin_baths,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,local_import,,,Import: DrudeLorentzBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",DrudeLorentzBath,qutip.solver.heom.bofin_baths,qutip.solver.heom.bofin_baths,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,local_import,,,Import: DrudeLorentzPadeBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",DrudeLorentzPadeBath,qutip.solver.heom.bofin_baths,qutip.solver.heom.bofin_baths,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,local_import,,,Import: UnderDampedBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",UnderDampedBath,qutip.solver.heom.bofin_baths,qutip.solver.heom.bofin_baths,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,local_import,,,Import: FermionicBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",FermionicBath,qutip.solver.heom.bofin_baths,qutip.solver.heom.bofin_baths,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,local_import,,,Import: LorentzianBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",LorentzianBath,qutip.solver.heom.bofin_baths,qutip.solver.heom.bofin_baths,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,local_import,,,Import: LorentzianPadeBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",LorentzianPadeBath,qutip.solver.heom.bofin_baths,qutip.solver.heom.bofin_baths,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,local_import,,,Import: heomsolve from qutip.solver.heom.bofin_solvers,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_solvers import (
    heomsolve,
    HierarchyADOs,
    HierarchyADOsState,
    HEOMResult,
    HEOMSolver,
    HSolverDL,
    _GatherHEOMRHS,
)",heomsolve,qutip.solver.heom.bofin_solvers,qutip.solver.heom.bofin_solvers,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,local_import,,,Import: HierarchyADOs from qutip.solver.heom.bofin_solvers,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_solvers import (
    heomsolve,
    HierarchyADOs,
    HierarchyADOsState,
    HEOMResult,
    HEOMSolver,
    HSolverDL,
    _GatherHEOMRHS,
)",HierarchyADOs,qutip.solver.heom.bofin_solvers,qutip.solver.heom.bofin_solvers,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,local_import,,,Import: HierarchyADOsState from qutip.solver.heom.bofin_solvers,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_solvers import (
    heomsolve,
    HierarchyADOs,
    HierarchyADOsState,
    HEOMResult,
    HEOMSolver,
    HSolverDL,
    _GatherHEOMRHS,
)",HierarchyADOsState,qutip.solver.heom.bofin_solvers,qutip.solver.heom.bofin_solvers,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,local_import,,,Import: HEOMResult from qutip.solver.heom.bofin_solvers,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_solvers import (
    heomsolve,
    HierarchyADOs,
    HierarchyADOsState,
    HEOMResult,
    HEOMSolver,
    HSolverDL,
    _GatherHEOMRHS,
)",HEOMResult,qutip.solver.heom.bofin_solvers,qutip.solver.heom.bofin_solvers,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,local_import,,,Import: HEOMSolver from qutip.solver.heom.bofin_solvers,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_solvers import (
    heomsolve,
    HierarchyADOs,
    HierarchyADOsState,
    HEOMResult,
    HEOMSolver,
    HSolverDL,
    _GatherHEOMRHS,
)",HEOMSolver,qutip.solver.heom.bofin_solvers,qutip.solver.heom.bofin_solvers,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,local_import,,,Import: HSolverDL from qutip.solver.heom.bofin_solvers,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_solvers import (
    heomsolve,
    HierarchyADOs,
    HierarchyADOsState,
    HEOMResult,
    HEOMSolver,
    HSolverDL,
    _GatherHEOMRHS,
)",HSolverDL,qutip.solver.heom.bofin_solvers,qutip.solver.heom.bofin_solvers,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,local_import,,,Import: _GatherHEOMRHS from qutip.solver.heom.bofin_solvers,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_solvers import (
    heomsolve,
    HierarchyADOs,
    HierarchyADOsState,
    HEOMResult,
    HEOMSolver,
    HSolverDL,
    _GatherHEOMRHS,
)",_GatherHEOMRHS,qutip.solver.heom.bofin_solvers,qutip.solver.heom.bofin_solvers,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,local_import,,,Import: IntegratorException from qutip.solver,qutip,qutip,v5.0.4,"from qutip.solver import (
    IntegratorException,
)",IntegratorException,qutip.solver,qutip.solver,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,,,,File: qutip\tests\solver\heom,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_bofin_solvers.py,python,,,,Directory: qutip\tests\solver\heom\test_bofin_solvers.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_heom.py,python,class_method,,,Class method: TestBathAPI.test_api(self),qutip,qutip,v5.0.4,,,,,,,,,TestBathAPI,test_api,(self),,,,,,,,
test_heom.py,python,class_method,,,Class method: TestSolverAPI.test_api(self),qutip,qutip,v5.0.4,,,,,,,,,TestSolverAPI,test_api,(self),,,,,,,,
test_heom.py,python,class,,,Class: TestBathAPI,qutip,qutip,v5.0.4,,,,,,,,,TestBathAPI,,,,,,,,,,
test_heom.py,python,class,,,Class: TestSolverAPI,qutip,qutip,v5.0.4,,,,,,,,,TestSolverAPI,,,,,,,,,,
test_heom.py,python,import,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,pytest,,,,,,,,,,,,,,,,,
test_heom.py,python,local_import,,,Import: BathExponent from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",BathExponent,qutip.solver.heom,qutip.solver.heom,,,,,,,,,,,,,,,
test_heom.py,python,local_import,,,Import: Bath from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",Bath,qutip.solver.heom,qutip.solver.heom,,,,,,,,,,,,,,,
test_heom.py,python,local_import,,,Import: BosonicBath from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",BosonicBath,qutip.solver.heom,qutip.solver.heom,,,,,,,,,,,,,,,
test_heom.py,python,local_import,,,Import: DrudeLorentzBath from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",DrudeLorentzBath,qutip.solver.heom,qutip.solver.heom,,,,,,,,,,,,,,,
test_heom.py,python,local_import,,,Import: DrudeLorentzPadeBath from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",DrudeLorentzPadeBath,qutip.solver.heom,qutip.solver.heom,,,,,,,,,,,,,,,
test_heom.py,python,local_import,,,Import: UnderDampedBath from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",UnderDampedBath,qutip.solver.heom,qutip.solver.heom,,,,,,,,,,,,,,,
test_heom.py,python,local_import,,,Import: FermionicBath from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",FermionicBath,qutip.solver.heom,qutip.solver.heom,,,,,,,,,,,,,,,
test_heom.py,python,local_import,,,Import: LorentzianBath from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",LorentzianBath,qutip.solver.heom,qutip.solver.heom,,,,,,,,,,,,,,,
test_heom.py,python,local_import,,,Import: LorentzianPadeBath from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",LorentzianPadeBath,qutip.solver.heom,qutip.solver.heom,,,,,,,,,,,,,,,
test_heom.py,python,local_import,,,Import: heomsolve from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",heomsolve,qutip.solver.heom,qutip.solver.heom,,,,,,,,,,,,,,,
test_heom.py,python,local_import,,,Import: HEOMSolver from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",HEOMSolver,qutip.solver.heom,qutip.solver.heom,,,,,,,,,,,,,,,
test_heom.py,python,local_import,,,Import: HEOMResult from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",HEOMResult,qutip.solver.heom,qutip.solver.heom,,,,,,,,,,,,,,,
test_heom.py,python,local_import,,,Import: HSolverDL from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",HSolverDL,qutip.solver.heom,qutip.solver.heom,,,,,,,,,,,,,,,
test_heom.py,python,local_import,,,Import: HierarchyADOs from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",HierarchyADOs,qutip.solver.heom,qutip.solver.heom,,,,,,,,,,,,,,,
test_heom.py,python,local_import,,,Import: HierarchyADOsState from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",HierarchyADOsState,qutip.solver.heom,qutip.solver.heom,,,,,,,,,,,,,,,
test_heom.py,python,,,,File: qutip\tests\solver\heom,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
test_heom.py,python,,,,Directory: qutip\tests\solver\heom\test_heom.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,File: qutip\tests\solver\heom,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,Directory: qutip\tests\solver\heom\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
progressbar.py,python,class_field,,,"Class field: [instance] BaseProgressBar._start(iterations, chunk_size)",qutip,qutip,v5.0.4,,,,,,,,,BaseProgressBar,__init__,"(self, iterations=0, chunk_size=10, **kwargs)","self._start(iterations, chunk_size)","self._start(iterations, chunk_size)",,,,,,
progressbar.py,python,class_field,,,Class field: [instance] EnhancedTextProgressBar.fill_char = '*',qutip,qutip,v5.0.4,,,,,,,,,EnhancedTextProgressBar,__init__,"(self, iterations=0, chunk_size=10, **kwargs)",self.fill_char = '*',self.fill_char = '*',,,,,,
progressbar.py,python,class_field,,,Class field: [instance] EnhancedTextProgressBar.width = 25,qutip,qutip,v5.0.4,,,,,,,,,EnhancedTextProgressBar,__init__,"(self, iterations=0, chunk_size=10, **kwargs)",self.width = 25,self.width = 25,,,,,,
progressbar.py,python,class_field,,,"Class field: [instance] TqdmProgressBar.pbar = tqdm(total=iterations, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,TqdmProgressBar,__init__,"(self, iterations=0, chunk_size=10, **kwargs)","self.pbar = tqdm(total=iterations, **kwargs)","self.pbar = tqdm(total=iterations, **kwargs)",,,,,,
progressbar.py,python,class_field,,,Class field: [instance] TqdmProgressBar.t_start = time.time(),qutip,qutip,v5.0.4,,,,,,,,,TqdmProgressBar,__init__,"(self, iterations=0, chunk_size=10, **kwargs)",self.t_start = time.time(),self.t_start = time.time(),,,,,,
progressbar.py,python,class_field,,,Class field: [instance] TqdmProgressBar.t_done = t_start - 1,qutip,qutip,v5.0.4,,,,,,,,,TqdmProgressBar,__init__,"(self, iterations=0, chunk_size=10, **kwargs)",self.t_done = self.t_start - 1,self.t_done = self.t_start - 1,,,,,,
progressbar.py,python,class_field,,,Class field: [instance] HTMLProgressBar.display = display,qutip,qutip,v5.0.4,,,,,,,,,HTMLProgressBar,__init__,"(self, iterations=0, chunk_size=1.0, **kwargs)",self.display = display,self.display = display,,,,,,
progressbar.py,python,class_field,,,Class field: [instance] HTMLProgressBar.Javascript = Javascript,qutip,qutip,v5.0.4,,,,,,,,,HTMLProgressBar,__init__,"(self, iterations=0, chunk_size=1.0, **kwargs)",self.Javascript = Javascript,self.Javascript = Javascript,,,,,,
progressbar.py,python,class_field,,,Class field: [instance] HTMLProgressBar.divid = str(uuid.uuid4()),qutip,qutip,v5.0.4,,,,,,,,,HTMLProgressBar,__init__,"(self, iterations=0, chunk_size=1.0, **kwargs)",self.divid = str(uuid.uuid4()),self.divid = str(uuid.uuid4()),,,,,,
progressbar.py,python,class_field,,,Class field: [instance] HTMLProgressBar.textid = str(uuid.uuid4()),qutip,qutip,v5.0.4,,,,,,,,,HTMLProgressBar,__init__,"(self, iterations=0, chunk_size=1.0, **kwargs)",self.textid = str(uuid.uuid4()),self.textid = str(uuid.uuid4()),,,,,,
progressbar.py,python,class_field,,,"Class field: [instance] HTMLProgressBar.pb = HTML(
            '<div style=""border: 2px solid grey; width: 600px"">\n  '
            f'<div id=""{divid}"" '
            'style=""background-color: rgba(121,195,106,0.75); '
            'width:0%"">&nbsp;</div>\n'
            '</div>\n'
            f'<p id=""{textid}""></p>\n'
        )",qutip,qutip,v5.0.4,,,,,,,,,HTMLProgressBar,__init__,"(self, iterations=0, chunk_size=1.0, **kwargs)","self.pb = HTML(
            '<div style=""border: 2px solid grey; width: 600px"">\n  '
            f'<div id=""{self.divid}"" '
            'style=""background-color: rgba(121,195,106,0.75); '
            'width:0%"">&nbsp;</div>\n'
            '</div>\n'
            f'<p id=""{self.textid}""></p>\n'
        )","self.pb = HTML(
            '<div style=""border: 2px solid grey; width: 600px"">\n  '
            f'<div id=""{self.divid}"" '
            'style=""background-color: rgba(121,195,106,0.75); '
            'width:0%"">&nbsp;</div>\n'
            '</div>\n'
            f'<p id=""{self.textid}""></p>\n'
        )",,,,,,
progressbar.py,python,class_field,,,Class field: [instance] HTMLProgressBar.display(pb),qutip,qutip,v5.0.4,,,,,,,,,HTMLProgressBar,__init__,"(self, iterations=0, chunk_size=1.0, **kwargs)",self.display(self.pb),self.display(self.pb),,,,,,
progressbar.py,python,class_method,,,"Class method: BaseProgressBar.__init__(self, iterations=0, chunk_size=10, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,BaseProgressBar,__init__,"(self, iterations=0, chunk_size=10, **kwargs)",,,,,,,,
progressbar.py,python,class_method,,,"Class method: BaseProgressBar._start(self, iterations, chunk_size=10, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,BaseProgressBar,_start,"(self, iterations, chunk_size=10, **kwargs)",,,,,,,,
progressbar.py,python,class_method,,,Class method: BaseProgressBar.update(self),qutip,qutip,v5.0.4,,,,,,,,,BaseProgressBar,update,(self),,,,,,,,
progressbar.py,python,class_method,,,Class method: BaseProgressBar.total_time(self),qutip,qutip,v5.0.4,,,,,,,,,BaseProgressBar,total_time,(self),,,,,,,,
progressbar.py,python,class_method,,,Class method: BaseProgressBar.time_elapsed(self),qutip,qutip,v5.0.4,,,,,,,,,BaseProgressBar,time_elapsed,(self),,,,,,,,
progressbar.py,python,class_method,,,"Class method: BaseProgressBar.time_remaining_est(self, p)",qutip,qutip,v5.0.4,,,,,,,,,BaseProgressBar,time_remaining_est,"(self, p)",,,,,,,,
progressbar.py,python,class_method,,,Class method: BaseProgressBar.finished(self),qutip,qutip,v5.0.4,,,,,,,,,BaseProgressBar,finished,(self),,,,,,,,
progressbar.py,python,class_method,,,"Class method: TextProgressBar.__init__(self, iterations=0, chunk_size=10, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,TextProgressBar,__init__,"(self, iterations=0, chunk_size=10, **kwargs)",,,,,,,,
progressbar.py,python,class_method,,,Class method: TextProgressBar.update(self),qutip,qutip,v5.0.4,,,,,,,,,TextProgressBar,update,(self),,,,,,,,
progressbar.py,python,class_method,,,Class method: TextProgressBar.finished(self),qutip,qutip,v5.0.4,,,,,,,,,TextProgressBar,finished,(self),,,,,,,,
progressbar.py,python,class_method,,,"Class method: EnhancedTextProgressBar.__init__(self, iterations=0, chunk_size=10, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,EnhancedTextProgressBar,__init__,"(self, iterations=0, chunk_size=10, **kwargs)",,,,,,,,
progressbar.py,python,class_method,,,Class method: EnhancedTextProgressBar.update(self),qutip,qutip,v5.0.4,,,,,,,,,EnhancedTextProgressBar,update,(self),,,,,,,,
progressbar.py,python,class_method,,,Class method: EnhancedTextProgressBar.finished(self),qutip,qutip,v5.0.4,,,,,,,,,EnhancedTextProgressBar,finished,(self),,,,,,,,
progressbar.py,python,class_method,,,"Class method: TqdmProgressBar.__init__(self, iterations=0, chunk_size=10, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,TqdmProgressBar,__init__,"(self, iterations=0, chunk_size=10, **kwargs)",,,,,,,,
progressbar.py,python,class_method,,,Class method: TqdmProgressBar.update(self),qutip,qutip,v5.0.4,,,,,,,,,TqdmProgressBar,update,(self),,,,,,,,
progressbar.py,python,class_method,,,Class method: TqdmProgressBar.finished(self),qutip,qutip,v5.0.4,,,,,,,,,TqdmProgressBar,finished,(self),,,,,,,,
progressbar.py,python,class_method,,,"Class method: HTMLProgressBar.__init__(self, iterations=0, chunk_size=1.0, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,HTMLProgressBar,__init__,"(self, iterations=0, chunk_size=1.0, **kwargs)",,,,,,,,
progressbar.py,python,class_method,,,Class method: HTMLProgressBar.update(self),qutip,qutip,v5.0.4,,,,,,,,,HTMLProgressBar,update,(self),,,,,,,,
progressbar.py,python,class_method,,,Class method: HTMLProgressBar.finished(self),qutip,qutip,v5.0.4,,,,,,,,,HTMLProgressBar,finished,(self),,,,,,,,
progressbar.py,python,class,,,Class: BaseProgressBar(object),qutip,qutip,v5.0.4,,,,,,,,,BaseProgressBar,,,,,(object),,,,,
progressbar.py,python,class,,,Class: TextProgressBar(BaseProgressBar),qutip,qutip,v5.0.4,,,,,,,,,TextProgressBar,,,,,(BaseProgressBar),,,,,
progressbar.py,python,class,,,Class: EnhancedTextProgressBar(BaseProgressBar),qutip,qutip,v5.0.4,,,,,,,,,EnhancedTextProgressBar,,,,,(BaseProgressBar),,,,,
progressbar.py,python,class,,,Class: TqdmProgressBar(BaseProgressBar),qutip,qutip,v5.0.4,,,,,,,,,TqdmProgressBar,,,,,(BaseProgressBar),,,,,
progressbar.py,python,class,,,Class: HTMLProgressBar(BaseProgressBar),qutip,qutip,v5.0.4,,,,,,,,,HTMLProgressBar,,,,,(BaseProgressBar),,,,,
progressbar.py,python,constant,,,"Constant: __all__ = ['BaseProgressBar', 'TextProgressBar',
           'EnhancedTextProgressBar', 'TqdmProgressBar',
           'HTMLProgressBar', 'progress_bars']",qutip,qutip,v5.0.4,,,,,"__all__ = ['BaseProgressBar', 'TextProgressBar',
           'EnhancedTextProgressBar', 'TqdmProgressBar',
           'HTMLProgressBar', 'progress_bars']",__all__,"['BaseProgressBar', 'TextProgressBar',
           'EnhancedTextProgressBar', 'TqdmProgressBar',
           'HTMLProgressBar', 'progress_bars']",,,,,,,,,,,,
progressbar.py,python,constant,,,"Constant: progress_bars = {
    ""Enhanced"": EnhancedTextProgressBar,
    ""enhanced"": EnhancedTextProgressBar,
    ""Text"": TextProgressBar,
    ""text"": TextProgressBar,
    True: TextProgressBar,
    ""Tqdm"": TqdmProgressBar,
    ""tqdm"": TqdmProgressBar,
    ""Html"": HTMLProgressBar,
    ""html"": HTMLProgressBar,
    ""base"": BaseProgressBar,
    """": BaseProgressBar,
    False: BaseProgressBar,
    None: BaseProgressBar,
}",qutip,qutip,v5.0.4,,,,,"progress_bars = {
    ""Enhanced"": EnhancedTextProgressBar,
    ""enhanced"": EnhancedTextProgressBar,
    ""Text"": TextProgressBar,
    ""text"": TextProgressBar,
    True: TextProgressBar,
    ""Tqdm"": TqdmProgressBar,
    ""tqdm"": TqdmProgressBar,
    ""Html"": HTMLProgressBar,
    ""html"": HTMLProgressBar,
    ""base"": BaseProgressBar,
    """": BaseProgressBar,
    False: BaseProgressBar,
    None: BaseProgressBar,
}",progress_bars,"{
    ""Enhanced"": EnhancedTextProgressBar,
    ""enhanced"": EnhancedTextProgressBar,
    ""Text"": TextProgressBar,
    ""text"": TextProgressBar,
    True: TextProgressBar,
    ""Tqdm"": TqdmProgressBar,
    ""tqdm"": TqdmProgressBar,
    ""Html"": HTMLProgressBar,
    ""html"": HTMLProgressBar,
    ""base"": BaseProgressBar,
    """": BaseProgressBar,
    False: BaseProgressBar,
    None: BaseProgressBar,
}",,,,,,,,,,,,
progressbar.py,python,import,,,Import: time,qutip,qutip,v5.0.4,import time,time,,,,,,,,,,,,,,,,,
progressbar.py,python,import,,,Import: datetime,qutip,qutip,v5.0.4,import datetime,datetime,,,,,,,,,,,,,,,,,
progressbar.py,python,import,,,Import: sys,qutip,qutip,v5.0.4,import sys,sys,,,,,,,,,,,,,,,,,
progressbar.py,python,import,,,Import: settings from qutip,qutip,qutip,v5.0.4,from qutip import settings,settings,qutip,,,,,,,,,,,,,,,,
progressbar.py,python,,,,File: qutip\ui,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
progressbar.py,python,,,,Directory: qutip\ui\progressbar.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
spmv.py,python,function,mkl_spmv,"(A, x)","Function: mkl_spmv(A, x)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
spmv.py,python,constant,,,Constant: zcsrgemv = qset.mkl_lib.mkl_cspblas_zcsrgemv,qutip,qutip,v5.0.4,,,,,zcsrgemv = qset.mkl_lib.mkl_cspblas_zcsrgemv,zcsrgemv,qset.mkl_lib.mkl_cspblas_zcsrgemv,,,,,,,,,,,,
spmv.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
spmv.py,python,import,,,Import: POINTER from ctypes,qutip,qutip,v5.0.4,"from ctypes import POINTER, c_int, c_char, byref",POINTER,ctypes,,,,,,,,,,,,,,,,
spmv.py,python,import,,,Import: c_int from ctypes,qutip,qutip,v5.0.4,"from ctypes import POINTER, c_int, c_char, byref",c_int,ctypes,,,,,,,,,,,,,,,,
spmv.py,python,import,,,Import: c_char from ctypes,qutip,qutip,v5.0.4,"from ctypes import POINTER, c_int, c_char, byref",c_char,ctypes,,,,,,,,,,,,,,,,
spmv.py,python,import,,,Import: byref from ctypes,qutip,qutip,v5.0.4,"from ctypes import POINTER, c_int, c_char, byref",byref,ctypes,,,,,,,,,,,,,,,,
spmv.py,python,import,,,Import: qutip.settings,qutip,qutip,v5.0.4,import qutip.settings as qset,qutip.settings,,,,,,,,,,,,,,,,,
spmv.py,python,local_import,,,Import: ndpointer from numpy.ctypeslib,qutip,qutip,v5.0.4,from numpy.ctypeslib import ndpointer,ndpointer,numpy.ctypeslib,numpy.ctypeslib,,,,,,,,,,,,,,,
spmv.py,python,,,,File: qutip\_mkl,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
spmv.py,python,,,,Directory: qutip\_mkl\spmv.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
spsolve.py,python,class_field,,,Class field: [instance] mkl_lu._np_pt = np_pt,qutip,qutip,v5.0.4,,,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._np_pt = np_pt,self._np_pt = np_pt,,,,,,
spsolve.py,python,class_field,,,Class field: [instance] mkl_lu._dim = dim,qutip,qutip,v5.0.4,,,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._dim = dim,self._dim = dim,,,,,,
spsolve.py,python,class_field,,,Class field: [instance] mkl_lu._is_complex = is_complex,qutip,qutip,v5.0.4,,,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._is_complex = is_complex,self._is_complex = is_complex,,,,,,
spsolve.py,python,class_field,,,Class field: [instance] mkl_lu._data = data,qutip,qutip,v5.0.4,,,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._data = data,self._data = data,,,,,,
spsolve.py,python,class_field,,,Class field: [instance] mkl_lu._indptr = indptr,qutip,qutip,v5.0.4,,,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._indptr = indptr,self._indptr = indptr,,,,,,
spsolve.py,python,class_field,,,Class field: [instance] mkl_lu._indices = indices,qutip,qutip,v5.0.4,,,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._indices = indices,self._indices = indices,,,,,,
spsolve.py,python,class_field,,,Class field: [instance] mkl_lu._iparm = iparm,qutip,qutip,v5.0.4,,,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._iparm = iparm,self._iparm = iparm,,,,,,
spsolve.py,python,class_field,,,Class field: [instance] mkl_lu._np_iparm = np_iparm,qutip,qutip,v5.0.4,,,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._np_iparm = np_iparm,self._np_iparm = np_iparm,,,,,,
spsolve.py,python,class_field,,,Class field: [instance] mkl_lu._mtype = mtype,qutip,qutip,v5.0.4,,,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._mtype = mtype,self._mtype = mtype,,,,,,
spsolve.py,python,class_field,,,Class field: [instance] mkl_lu._perm = perm,qutip,qutip,v5.0.4,,,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._perm = perm,self._perm = perm,,,,,,
spsolve.py,python,class_field,,,Class field: [instance] mkl_lu._np_perm = np_perm,qutip,qutip,v5.0.4,,,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._np_perm = np_perm,self._np_perm = np_perm,,,,,,
spsolve.py,python,class_field,,,Class field: [instance] mkl_lu._factor_time = factor_time,qutip,qutip,v5.0.4,,,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._factor_time = factor_time,self._factor_time = factor_time,,,,,,
spsolve.py,python,class_field,,,Class field: [instance] mkl_lu._solve_time = None,qutip,qutip,v5.0.4,,,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._solve_time = None,self._solve_time = None,,,,,,
spsolve.py,python,class_method,,,"Class method: mkl_lu.__init__(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",qutip,qutip,v5.0.4,,,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",,,,,,,,
spsolve.py,python,class_method,,,"Class method: mkl_lu.solve(self, b, verbose=None)",qutip,qutip,v5.0.4,,,,,,,,,mkl_lu,solve,"(self, b, verbose=None)",,,,,,,,
spsolve.py,python,class_method,,,Class method: mkl_lu.info(self),qutip,qutip,v5.0.4,,,,,,,,,mkl_lu,info,(self),,,,,,,,
spsolve.py,python,class_method,,,Class method: mkl_lu.delete(self),qutip,qutip,v5.0.4,,,,,,,,,mkl_lu,delete,(self),,,,,,,,
spsolve.py,python,class,,,Class: mkl_lu,qutip,qutip,v5.0.4,,,,,,,,,mkl_lu,,,,,,,,,,
spsolve.py,python,function,_pardiso_parameters,"(hermitian, has_perm,
                        max_iter_refine,
                        scaling_vectors,
                        weighted_matching)","Function: _pardiso_parameters(hermitian, has_perm,
                        max_iter_refine,
                        scaling_vectors,
                        weighted_matching)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
spsolve.py,python,function,_default_solver_args,(),Function: _default_solver_args(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
spsolve.py,python,function,_mkl_matrix_type,"(dtype, solver_args)","Function: _mkl_matrix_type(dtype, solver_args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
spsolve.py,python,function,mkl_splu,"(A, perm=None, verbose=False, **kwargs)","Function: mkl_splu(A, perm=None, verbose=False, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
spsolve.py,python,function,mkl_spsolve,"(A, b, perm=None, verbose=False, **kwargs)","Function: mkl_spsolve(A, b, perm=None, verbose=False, **kwargs)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
spsolve.py,python,constant,,,Constant: pardiso = qset.mkl_lib.pardiso,qutip,qutip,v5.0.4,,,,,pardiso = qset.mkl_lib.pardiso,pardiso,qset.mkl_lib.pardiso,,,,,,,,,,,,
spsolve.py,python,constant,,,Constant: pardiso_delete = qset.mkl_lib.pardiso_handle_delete,qutip,qutip,v5.0.4,,,,,pardiso_delete = qset.mkl_lib.pardiso_handle_delete,pardiso_delete,qset.mkl_lib.pardiso_handle_delete,,,,,,,,,,,,
spsolve.py,python,constant,,,"Constant: pardiso_error_msgs = {
    '-1': 'Input inconsistant',
    '-2': 'Out of memory',
    '-3': 'Reordering problem',
    '-4':
        'Zero pivot, numerical factorization or iterative refinement problem',
    '-5': 'Unclassified internal error',
    '-6': 'Reordering failed',
    '-7': 'Diagonal matrix is singular',
    '-8': '32-bit integer overflow',
    '-9': 'Not enough memory for OOC',
    '-10': 'Error opening OOC files',
    '-11': 'Read/write error with OOC files',
    '-12': 'Pardiso-64 called from 32-bit library',
}",qutip,qutip,v5.0.4,,,,,"pardiso_error_msgs = {
    '-1': 'Input inconsistant',
    '-2': 'Out of memory',
    '-3': 'Reordering problem',
    '-4':
        'Zero pivot, numerical factorization or iterative refinement problem',
    '-5': 'Unclassified internal error',
    '-6': 'Reordering failed',
    '-7': 'Diagonal matrix is singular',
    '-8': '32-bit integer overflow',
    '-9': 'Not enough memory for OOC',
    '-10': 'Error opening OOC files',
    '-11': 'Read/write error with OOC files',
    '-12': 'Pardiso-64 called from 32-bit library',
}",pardiso_error_msgs,"{
    '-1': 'Input inconsistant',
    '-2': 'Out of memory',
    '-3': 'Reordering problem',
    '-4':
        'Zero pivot, numerical factorization or iterative refinement problem',
    '-5': 'Unclassified internal error',
    '-6': 'Reordering failed',
    '-7': 'Diagonal matrix is singular',
    '-8': '32-bit integer overflow',
    '-9': 'Not enough memory for OOC',
    '-10': 'Error opening OOC files',
    '-11': 'Read/write error with OOC files',
    '-12': 'Pardiso-64 called from 32-bit library',
}",,,,,,,,,,,,
spsolve.py,python,constant,,,"Constant: _MATRIX_TYPE_NAMES = {
    4: 'Complex Hermitian positive-definite',
    -4: 'Complex Hermitian indefinite',
    2: 'Real symmetric positive-definite',
    -2: 'Real symmetric indefinite',
    11: 'Real non-symmetric',
    13: 'Complex non-symmetric',
}",qutip,qutip,v5.0.4,,,,,"_MATRIX_TYPE_NAMES = {
    4: 'Complex Hermitian positive-definite',
    -4: 'Complex Hermitian indefinite',
    2: 'Real symmetric positive-definite',
    -2: 'Real symmetric indefinite',
    11: 'Real non-symmetric',
    13: 'Complex non-symmetric',
}",_MATRIX_TYPE_NAMES,"{
    4: 'Complex Hermitian positive-definite',
    -4: 'Complex Hermitian indefinite',
    2: 'Real symmetric positive-definite',
    -2: 'Real symmetric indefinite',
    11: 'Real non-symmetric',
    13: 'Complex non-symmetric',
}",,,,,,,,,,,,
spsolve.py,python,import,,,Import: sys,qutip,qutip,v5.0.4,import sys,sys,,,,,,,,,,,,,,,,,
spsolve.py,python,import,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,numpy,,,,,,,,,,,,,,,,,
spsolve.py,python,import,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,scipy.sparse,,,,,,,,,,,,,,,,,
spsolve.py,python,import,,,Import: c_int from ctypes,qutip,qutip,v5.0.4,"from ctypes import c_int, byref",c_int,ctypes,,,,,,,,,,,,,,,,
spsolve.py,python,import,,,Import: byref from ctypes,qutip,qutip,v5.0.4,"from ctypes import c_int, byref",byref,ctypes,,,,,,,,,,,,,,,,
spsolve.py,python,import,,,Import: time,qutip,qutip,v5.0.4,import time,time,,,,,,,,,,,,,,,,,
spsolve.py,python,local_import,,,Import: ndpointer from numpy.ctypeslib,qutip,qutip,v5.0.4,from numpy.ctypeslib import ndpointer,ndpointer,numpy.ctypeslib,numpy.ctypeslib,,,,,,,,,,,,,,,
spsolve.py,python,local_import,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings as qset,settings,qutip.settings,qutip.settings,,,,,,,,,,,,,,,
spsolve.py,python,,,,File: qutip\_mkl,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
spsolve.py,python,,,,Directory: qutip\_mkl\spsolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,File: qutip\_mkl,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
__init__.py,python,,,,Directory: qutip\_mkl\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,,
