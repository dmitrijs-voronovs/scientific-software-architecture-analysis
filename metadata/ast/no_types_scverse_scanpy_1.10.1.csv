id,filename,ext,embedding_no_type,element_type,function.name,function.parameters,function.type,embedding,author,repo_name,tag,import,import.name,import.from,import.path,constant,constant.name,constant.value,function.docstring,class.name,method.name,method.parameters,class.field,class.instance_field,method.type,method.decorator,class.base,field.name,field.default
scverse_scanpy_1.10.1,min-deps.py,python,min_dep(req: Requirement) -> Requirement,function,min_dep,(req: Requirement),Requirement,Function: min_dep(req: Requirement) -> Requirement,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,min-deps.py,python,"extract_min_deps(
    dependencies: Iterable[Requirement], *, pyproject
) -> Generator[Requirement, None, None]",function,extract_min_deps,"(
    dependencies: Iterable[Requirement], *, pyproject
)","Generator[Requirement, None, None]","Function: extract_min_deps(
    dependencies: Iterable[Requirement], *, pyproject
) -> Generator[Requirement, None, None]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,min-deps.py,python,main(),function,main,(),,Function: main(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,min-deps.py,python,argparse,import,,,,Import: argparse,scverse,scanpy,1.10.1,import argparse,argparse,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,min-deps.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,sys,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,min-deps.py,python,deque from collections,import,,,,Import: deque from collections,scverse,scanpy,1.10.1,from collections import deque,deque,collections,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,min-deps.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,min-deps.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,min-deps.py,python,Requirement from packaging.requirements,local_import,,,,Import: Requirement from packaging.requirements,scverse,scanpy,1.10.1,from packaging.requirements import Requirement,Requirement,packaging.requirements,packaging.requirements,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,min-deps.py,python,Version from packaging.version,local_import,,,,Import: Version from packaging.version,scverse,scanpy,1.10.1,from packaging.version import Version,Version,packaging.version,packaging.version,,,,,,,,,,,,,,
,min-deps.py,python,,,,,,File: ci\scripts,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,min-deps.py,python,,,,,,Directory: ci\scripts\min-deps.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,setup(app: Sphinx),function,setup,(app: Sphinx),,Function: setup(app: Sphinx),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,HERE = Path(__file__).parent,constant,,,,Constant: HERE = Path(__file__).parent,scverse,scanpy,1.10.1,,,,,HERE = Path(__file__).parent,HERE,Path(__file__).parent,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,nitpicky = True,constant,,,,Constant: nitpicky = True,scverse,scanpy,1.10.1,,,,,nitpicky = True,nitpicky,True,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"needs_sphinx = ""4.0""",constant,,,,"Constant: needs_sphinx = ""4.0""",scverse,scanpy,1.10.1,,,,,"needs_sphinx = ""4.0""",needs_sphinx,"""4.0""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"suppress_warnings = [
    ""myst.header"",  # https://github.com/executablebooks/MyST-Parser/issues/262
]",constant,,,,"Constant: suppress_warnings = [
    ""myst.header"",  # https://github.com/executablebooks/MyST-Parser/issues/262
]",scverse,scanpy,1.10.1,,,,,"suppress_warnings = [
    ""myst.header"",  # https://github.com/executablebooks/MyST-Parser/issues/262
]",suppress_warnings,"[
    ""myst.header"",  # https://github.com/executablebooks/MyST-Parser/issues/262
]",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"project = ""Scanpy""",constant,,,,"Constant: project = ""Scanpy""",scverse,scanpy,1.10.1,,,,,"project = ""Scanpy""",project,"""Scanpy""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"author = ""Scanpy development team""",constant,,,,"Constant: author = ""Scanpy development team""",scverse,scanpy,1.10.1,,,,,"author = ""Scanpy development team""",author,"""Scanpy development team""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"repository_url = ""https://github.com/scverse/scanpy""",constant,,,,"Constant: repository_url = ""https://github.com/scverse/scanpy""",scverse,scanpy,1.10.1,,,,,"repository_url = ""https://github.com/scverse/scanpy""",repository_url,"""https://github.com/scverse/scanpy""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"copyright = f""{datetime.now():%Y}, the Scanpy development team""",constant,,,,"Constant: copyright = f""{datetime.now():%Y}, the Scanpy development team""",scverse,scanpy,1.10.1,,,,,"copyright = f""{datetime.now():%Y}, the Scanpy development team""",copyright,"f""{datetime.now():%Y}, the Scanpy development team""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"version = scanpy.__version__.replace("".dirty"", """")",constant,,,,"Constant: version = scanpy.__version__.replace("".dirty"", """")",scverse,scanpy,1.10.1,,,,,"version = scanpy.__version__.replace("".dirty"", """")",version,"scanpy.__version__.replace("".dirty"", """")",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,release = version,constant,,,,Constant: release = version,scverse,scanpy,1.10.1,,,,,release = version,release,version,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"bibtex_bibfiles = [""references.bib""]",constant,,,,"Constant: bibtex_bibfiles = [""references.bib""]",scverse,scanpy,1.10.1,,,,,"bibtex_bibfiles = [""references.bib""]",bibtex_bibfiles,"[""references.bib""]",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"bibtex_reference_style = ""author_year""",constant,,,,"Constant: bibtex_reference_style = ""author_year""",scverse,scanpy,1.10.1,,,,,"bibtex_reference_style = ""author_year""",bibtex_reference_style,"""author_year""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"templates_path = [""_templates""]",constant,,,,"Constant: templates_path = [""_templates""]",scverse,scanpy,1.10.1,,,,,"templates_path = [""_templates""]",templates_path,"[""_templates""]",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"master_doc = ""index""",constant,,,,"Constant: master_doc = ""index""",scverse,scanpy,1.10.1,,,,,"master_doc = ""index""",master_doc,"""index""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"default_role = ""literal""",constant,,,,"Constant: default_role = ""literal""",scverse,scanpy,1.10.1,,,,,"default_role = ""literal""",default_role,"""literal""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"exclude_patterns = [""_build"", ""Thumbs.db"", "".DS_Store"", ""**.ipynb_checkpoints""]",constant,,,,"Constant: exclude_patterns = [""_build"", ""Thumbs.db"", "".DS_Store"", ""**.ipynb_checkpoints""]",scverse,scanpy,1.10.1,,,,,"exclude_patterns = [""_build"", ""Thumbs.db"", "".DS_Store"", ""**.ipynb_checkpoints""]",exclude_patterns,"[""_build"", ""Thumbs.db"", "".DS_Store"", ""**.ipynb_checkpoints""]",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"extensions = [
    ""myst_nb"",
    ""sphinx_copybutton"",
    ""sphinx.ext.autodoc"",
    ""sphinx.ext.intersphinx"",
    ""sphinx.ext.doctest"",
    ""sphinx.ext.coverage"",
    ""sphinx.ext.mathjax"",
    ""sphinx.ext.napoleon"",
    ""sphinx.ext.autosummary"",
    ""sphinx.ext.extlinks"",
    ""sphinxcontrib.bibtex"",
    ""matplotlib.sphinxext.plot_directive"",
    ""sphinx_autodoc_typehints"",  # needs to be after napoleon
    ""git_ref"",  # needs to be before scanpydoc.rtd_github_links
    ""scanpydoc"",  # needs to be before sphinx.ext.linkcode
    ""sphinx.ext.linkcode"",
    ""sphinx_design"",
    ""sphinx_search.extension"",
    ""sphinxext.opengraph"",
    *[p.stem for p in (HERE / ""extensions"").glob(""*.py"") if p.stem not in {""git_ref""}],
]",constant,,,,"Constant: extensions = [
    ""myst_nb"",
    ""sphinx_copybutton"",
    ""sphinx.ext.autodoc"",
    ""sphinx.ext.intersphinx"",
    ""sphinx.ext.doctest"",
    ""sphinx.ext.coverage"",
    ""sphinx.ext.mathjax"",
    ""sphinx.ext.napoleon"",
    ""sphinx.ext.autosummary"",
    ""sphinx.ext.extlinks"",
    ""sphinxcontrib.bibtex"",
    ""matplotlib.sphinxext.plot_directive"",
    ""sphinx_autodoc_typehints"",  # needs to be after napoleon
    ""git_ref"",  # needs to be before scanpydoc.rtd_github_links
    ""scanpydoc"",  # needs to be before sphinx.ext.linkcode
    ""sphinx.ext.linkcode"",
    ""sphinx_design"",
    ""sphinx_search.extension"",
    ""sphinxext.opengraph"",
    *[p.stem for p in (HERE / ""extensions"").glob(""*.py"") if p.stem not in {""git_ref""}],
]",scverse,scanpy,1.10.1,,,,,"extensions = [
    ""myst_nb"",
    ""sphinx_copybutton"",
    ""sphinx.ext.autodoc"",
    ""sphinx.ext.intersphinx"",
    ""sphinx.ext.doctest"",
    ""sphinx.ext.coverage"",
    ""sphinx.ext.mathjax"",
    ""sphinx.ext.napoleon"",
    ""sphinx.ext.autosummary"",
    ""sphinx.ext.extlinks"",
    ""sphinxcontrib.bibtex"",
    ""matplotlib.sphinxext.plot_directive"",
    ""sphinx_autodoc_typehints"",  # needs to be after napoleon
    ""git_ref"",  # needs to be before scanpydoc.rtd_github_links
    ""scanpydoc"",  # needs to be before sphinx.ext.linkcode
    ""sphinx.ext.linkcode"",
    ""sphinx_design"",
    ""sphinx_search.extension"",
    ""sphinxext.opengraph"",
    *[p.stem for p in (HERE / ""extensions"").glob(""*.py"") if p.stem not in {""git_ref""}],
]",extensions,"[
    ""myst_nb"",
    ""sphinx_copybutton"",
    ""sphinx.ext.autodoc"",
    ""sphinx.ext.intersphinx"",
    ""sphinx.ext.doctest"",
    ""sphinx.ext.coverage"",
    ""sphinx.ext.mathjax"",
    ""sphinx.ext.napoleon"",
    ""sphinx.ext.autosummary"",
    ""sphinx.ext.extlinks"",
    ""sphinxcontrib.bibtex"",
    ""matplotlib.sphinxext.plot_directive"",
    ""sphinx_autodoc_typehints"",  # needs to be after napoleon
    ""git_ref"",  # needs to be before scanpydoc.rtd_github_links
    ""scanpydoc"",  # needs to be before sphinx.ext.linkcode
    ""sphinx.ext.linkcode"",
    ""sphinx_design"",
    ""sphinx_search.extension"",
    ""sphinxext.opengraph"",
    *[p.stem for p in (HERE / ""extensions"").glob(""*.py"") if p.stem not in {""git_ref""}],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,autosummary_generate = True,constant,,,,Constant: autosummary_generate = True,scverse,scanpy,1.10.1,,,,,autosummary_generate = True,autosummary_generate,True,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"autodoc_member_order = ""bysource""",constant,,,,"Constant: autodoc_member_order = ""bysource""",scverse,scanpy,1.10.1,,,,,"autodoc_member_order = ""bysource""",autodoc_member_order,"""bysource""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,napoleon_google_docstring = False,constant,,,,Constant: napoleon_google_docstring = False,scverse,scanpy,1.10.1,,,,,napoleon_google_docstring = False,napoleon_google_docstring,False,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,napoleon_numpy_docstring = True,constant,,,,Constant: napoleon_numpy_docstring = True,scverse,scanpy,1.10.1,,,,,napoleon_numpy_docstring = True,napoleon_numpy_docstring,True,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,napoleon_include_init_with_doc = False,constant,,,,Constant: napoleon_include_init_with_doc = False,scverse,scanpy,1.10.1,,,,,napoleon_include_init_with_doc = False,napoleon_include_init_with_doc,False,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,napoleon_use_rtype = True,constant,,,,Constant: napoleon_use_rtype = True,scverse,scanpy,1.10.1,,,,,napoleon_use_rtype = True,napoleon_use_rtype,True,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,napoleon_use_param = True,constant,,,,Constant: napoleon_use_param = True,scverse,scanpy,1.10.1,,,,,napoleon_use_param = True,napoleon_use_param,True,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"napoleon_custom_sections = [(""Params"", ""Parameters"")]",constant,,,,"Constant: napoleon_custom_sections = [(""Params"", ""Parameters"")]",scverse,scanpy,1.10.1,,,,,"napoleon_custom_sections = [(""Params"", ""Parameters"")]",napoleon_custom_sections,"[(""Params"", ""Parameters"")]",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,todo_include_todos = False,constant,,,,Constant: todo_include_todos = False,scverse,scanpy,1.10.1,,,,,todo_include_todos = False,todo_include_todos,False,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"api_dir = HERE / ""api""",constant,,,,"Constant: api_dir = HERE / ""api""",scverse,scanpy,1.10.1,,,,,"api_dir = HERE / ""api""",api_dir,"HERE / ""api""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"myst_enable_extensions = [
    ""amsmath"",
    ""colon_fence"",
    ""deflist"",
    ""dollarmath"",
    ""html_image"",
    ""html_admonition"",
]",constant,,,,"Constant: myst_enable_extensions = [
    ""amsmath"",
    ""colon_fence"",
    ""deflist"",
    ""dollarmath"",
    ""html_image"",
    ""html_admonition"",
]",scverse,scanpy,1.10.1,,,,,"myst_enable_extensions = [
    ""amsmath"",
    ""colon_fence"",
    ""deflist"",
    ""dollarmath"",
    ""html_image"",
    ""html_admonition"",
]",myst_enable_extensions,"[
    ""amsmath"",
    ""colon_fence"",
    ""deflist"",
    ""dollarmath"",
    ""html_image"",
    ""html_admonition"",
]",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"myst_url_schemes = (""http"", ""https"", ""mailto"", ""ftp"")",constant,,,,"Constant: myst_url_schemes = (""http"", ""https"", ""mailto"", ""ftp"")",scverse,scanpy,1.10.1,,,,,"myst_url_schemes = (""http"", ""https"", ""mailto"", ""ftp"")",myst_url_schemes,"(""http"", ""https"", ""mailto"", ""ftp"")",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"nb_output_stderr = ""remove""",constant,,,,"Constant: nb_output_stderr = ""remove""",scverse,scanpy,1.10.1,,,,,"nb_output_stderr = ""remove""",nb_output_stderr,"""remove""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"nb_execution_mode = ""off""",constant,,,,"Constant: nb_execution_mode = ""off""",scverse,scanpy,1.10.1,,,,,"nb_execution_mode = ""off""",nb_execution_mode,"""off""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,nb_merge_streams = True,constant,,,,Constant: nb_merge_streams = True,scverse,scanpy,1.10.1,,,,,nb_merge_streams = True,nb_merge_streams,True,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"ogp_site_url = ""https://scanpy.readthedocs.io/en/stable/""",constant,,,,"Constant: ogp_site_url = ""https://scanpy.readthedocs.io/en/stable/""",scverse,scanpy,1.10.1,,,,,"ogp_site_url = ""https://scanpy.readthedocs.io/en/stable/""",ogp_site_url,"""https://scanpy.readthedocs.io/en/stable/""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"ogp_image = ""https://scanpy.readthedocs.io/en/stable/_static/Scanpy_Logo_BrightFG.svg""",constant,,,,"Constant: ogp_image = ""https://scanpy.readthedocs.io/en/stable/_static/Scanpy_Logo_BrightFG.svg""",scverse,scanpy,1.10.1,,,,,"ogp_image = ""https://scanpy.readthedocs.io/en/stable/_static/Scanpy_Logo_BrightFG.svg""",ogp_image,"""https://scanpy.readthedocs.io/en/stable/_static/Scanpy_Logo_BrightFG.svg""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"typehints_defaults = ""braces""",constant,,,,"Constant: typehints_defaults = ""braces""",scverse,scanpy,1.10.1,,,,,"typehints_defaults = ""braces""",typehints_defaults,"""braces""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"pygments_style = ""default""",constant,,,,"Constant: pygments_style = ""default""",scverse,scanpy,1.10.1,,,,,"pygments_style = ""default""",pygments_style,"""default""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"pygments_dark_style = ""native""",constant,,,,"Constant: pygments_dark_style = ""native""",scverse,scanpy,1.10.1,,,,,"pygments_dark_style = ""native""",pygments_dark_style,"""native""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"intersphinx_mapping = dict(
    anndata=(""https://anndata.readthedocs.io/en/stable/"", None),
    bbknn=(""https://bbknn.readthedocs.io/en/latest/"", None),
    cuml=(""https://docs.rapids.ai/api/cuml/stable/"", None),
    cycler=(""https://matplotlib.org/cycler/"", None),
    dask=(""https://docs.dask.org/en/stable/"", None),
    dask_ml=(""https://ml.dask.org/"", None),
    h5py=(""https://docs.h5py.org/en/stable/"", None),
    ipython=(""https://ipython.readthedocs.io/en/stable/"", None),
    igraph=(""https://python.igraph.org/en/stable/api/"", None),
    leidenalg=(""https://leidenalg.readthedocs.io/en/latest/"", None),
    louvain=(""https://louvain-igraph.readthedocs.io/en/latest/"", None),
    matplotlib=(""https://matplotlib.org/stable/"", None),
    networkx=(""https://networkx.org/documentation/stable/"", None),
    numpy=(""https://numpy.org/doc/stable/"", None),
    pandas=(""https://pandas.pydata.org/pandas-docs/stable/"", None),
    pynndescent=(""https://pynndescent.readthedocs.io/en/latest/"", None),
    pytest=(""https://docs.pytest.org/en/latest/"", None),
    python=(""https://docs.python.org/3"", None),
    rapids_singlecell=(""https://rapids-singlecell.readthedocs.io/en/latest/"", None),
    scipy=(""https://docs.scipy.org/doc/scipy/"", None),
    seaborn=(""https://seaborn.pydata.org/"", None),
    sklearn=(""https://scikit-learn.org/stable/"", None),
)",constant,,,,"Constant: intersphinx_mapping = dict(
    anndata=(""https://anndata.readthedocs.io/en/stable/"", None),
    bbknn=(""https://bbknn.readthedocs.io/en/latest/"", None),
    cuml=(""https://docs.rapids.ai/api/cuml/stable/"", None),
    cycler=(""https://matplotlib.org/cycler/"", None),
    dask=(""https://docs.dask.org/en/stable/"", None),
    dask_ml=(""https://ml.dask.org/"", None),
    h5py=(""https://docs.h5py.org/en/stable/"", None),
    ipython=(""https://ipython.readthedocs.io/en/stable/"", None),
    igraph=(""https://python.igraph.org/en/stable/api/"", None),
    leidenalg=(""https://leidenalg.readthedocs.io/en/latest/"", None),
    louvain=(""https://louvain-igraph.readthedocs.io/en/latest/"", None),
    matplotlib=(""https://matplotlib.org/stable/"", None),
    networkx=(""https://networkx.org/documentation/stable/"", None),
    numpy=(""https://numpy.org/doc/stable/"", None),
    pandas=(""https://pandas.pydata.org/pandas-docs/stable/"", None),
    pynndescent=(""https://pynndescent.readthedocs.io/en/latest/"", None),
    pytest=(""https://docs.pytest.org/en/latest/"", None),
    python=(""https://docs.python.org/3"", None),
    rapids_singlecell=(""https://rapids-singlecell.readthedocs.io/en/latest/"", None),
    scipy=(""https://docs.scipy.org/doc/scipy/"", None),
    seaborn=(""https://seaborn.pydata.org/"", None),
    sklearn=(""https://scikit-learn.org/stable/"", None),
)",scverse,scanpy,1.10.1,,,,,"intersphinx_mapping = dict(
    anndata=(""https://anndata.readthedocs.io/en/stable/"", None),
    bbknn=(""https://bbknn.readthedocs.io/en/latest/"", None),
    cuml=(""https://docs.rapids.ai/api/cuml/stable/"", None),
    cycler=(""https://matplotlib.org/cycler/"", None),
    dask=(""https://docs.dask.org/en/stable/"", None),
    dask_ml=(""https://ml.dask.org/"", None),
    h5py=(""https://docs.h5py.org/en/stable/"", None),
    ipython=(""https://ipython.readthedocs.io/en/stable/"", None),
    igraph=(""https://python.igraph.org/en/stable/api/"", None),
    leidenalg=(""https://leidenalg.readthedocs.io/en/latest/"", None),
    louvain=(""https://louvain-igraph.readthedocs.io/en/latest/"", None),
    matplotlib=(""https://matplotlib.org/stable/"", None),
    networkx=(""https://networkx.org/documentation/stable/"", None),
    numpy=(""https://numpy.org/doc/stable/"", None),
    pandas=(""https://pandas.pydata.org/pandas-docs/stable/"", None),
    pynndescent=(""https://pynndescent.readthedocs.io/en/latest/"", None),
    pytest=(""https://docs.pytest.org/en/latest/"", None),
    python=(""https://docs.python.org/3"", None),
    rapids_singlecell=(""https://rapids-singlecell.readthedocs.io/en/latest/"", None),
    scipy=(""https://docs.scipy.org/doc/scipy/"", None),
    seaborn=(""https://seaborn.pydata.org/"", None),
    sklearn=(""https://scikit-learn.org/stable/"", None),
)",intersphinx_mapping,"dict(
    anndata=(""https://anndata.readthedocs.io/en/stable/"", None),
    bbknn=(""https://bbknn.readthedocs.io/en/latest/"", None),
    cuml=(""https://docs.rapids.ai/api/cuml/stable/"", None),
    cycler=(""https://matplotlib.org/cycler/"", None),
    dask=(""https://docs.dask.org/en/stable/"", None),
    dask_ml=(""https://ml.dask.org/"", None),
    h5py=(""https://docs.h5py.org/en/stable/"", None),
    ipython=(""https://ipython.readthedocs.io/en/stable/"", None),
    igraph=(""https://python.igraph.org/en/stable/api/"", None),
    leidenalg=(""https://leidenalg.readthedocs.io/en/latest/"", None),
    louvain=(""https://louvain-igraph.readthedocs.io/en/latest/"", None),
    matplotlib=(""https://matplotlib.org/stable/"", None),
    networkx=(""https://networkx.org/documentation/stable/"", None),
    numpy=(""https://numpy.org/doc/stable/"", None),
    pandas=(""https://pandas.pydata.org/pandas-docs/stable/"", None),
    pynndescent=(""https://pynndescent.readthedocs.io/en/latest/"", None),
    pytest=(""https://docs.pytest.org/en/latest/"", None),
    python=(""https://docs.python.org/3"", None),
    rapids_singlecell=(""https://rapids-singlecell.readthedocs.io/en/latest/"", None),
    scipy=(""https://docs.scipy.org/doc/scipy/"", None),
    seaborn=(""https://seaborn.pydata.org/"", None),
    sklearn=(""https://scikit-learn.org/stable/"", None),
)",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"html_theme = ""scanpydoc""",constant,,,,"Constant: html_theme = ""scanpydoc""",scverse,scanpy,1.10.1,,,,,"html_theme = ""scanpydoc""",html_theme,"""scanpydoc""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"html_theme_options = {
    ""repository_url"": repository_url,
    ""use_repository_button"": True,
}",constant,,,,"Constant: html_theme_options = {
    ""repository_url"": repository_url,
    ""use_repository_button"": True,
}",scverse,scanpy,1.10.1,,,,,"html_theme_options = {
    ""repository_url"": repository_url,
    ""use_repository_button"": True,
}",html_theme_options,"{
    ""repository_url"": repository_url,
    ""use_repository_button"": True,
}",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"html_static_path = [""_static""]",constant,,,,"Constant: html_static_path = [""_static""]",scverse,scanpy,1.10.1,,,,,"html_static_path = [""_static""]",html_static_path,"[""_static""]",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,html_show_sphinx = False,constant,,,,Constant: html_show_sphinx = False,scverse,scanpy,1.10.1,,,,,html_show_sphinx = False,html_show_sphinx,False,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"html_logo = ""_static/img/Scanpy_Logo_BrightFG.svg""",constant,,,,"Constant: html_logo = ""_static/img/Scanpy_Logo_BrightFG.svg""",scverse,scanpy,1.10.1,,,,,"html_logo = ""_static/img/Scanpy_Logo_BrightFG.svg""",html_logo,"""_static/img/Scanpy_Logo_BrightFG.svg""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"html_title = ""scanpy""",constant,,,,"Constant: html_title = ""scanpy""",scverse,scanpy,1.10.1,,,,,"html_title = ""scanpy""",html_title,"""scanpy""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"htmlhelp_basename = f""{project}doc""",constant,,,,"Constant: htmlhelp_basename = f""{project}doc""",scverse,scanpy,1.10.1,,,,,"htmlhelp_basename = f""{project}doc""",htmlhelp_basename,"f""{project}doc""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"doc_title = f""{project} Documentation""",constant,,,,"Constant: doc_title = f""{project} Documentation""",scverse,scanpy,1.10.1,,,,,"doc_title = f""{project} Documentation""",doc_title,"f""{project} Documentation""",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"latex_documents = [(master_doc, f""{project}.tex"", doc_title, author, ""manual"")]",constant,,,,"Constant: latex_documents = [(master_doc, f""{project}.tex"", doc_title, author, ""manual"")]",scverse,scanpy,1.10.1,,,,,"latex_documents = [(master_doc, f""{project}.tex"", doc_title, author, ""manual"")]",latex_documents,"[(master_doc, f""{project}.tex"", doc_title, author, ""manual"")]",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"man_pages = [(master_doc, project, doc_title, [author], 1)]",constant,,,,"Constant: man_pages = [(master_doc, project, doc_title, [author], 1)]",scverse,scanpy,1.10.1,,,,,"man_pages = [(master_doc, project, doc_title, [author], 1)]",man_pages,"[(master_doc, project, doc_title, [author], 1)]",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"texinfo_documents = [
    (
        master_doc,
        project,
        doc_title,
        author,
        project,
        ""One line description of project."",
        ""Miscellaneous"",
    )
]",constant,,,,"Constant: texinfo_documents = [
    (
        master_doc,
        project,
        doc_title,
        author,
        project,
        ""One line description of project."",
        ""Miscellaneous"",
    )
]",scverse,scanpy,1.10.1,,,,,"texinfo_documents = [
    (
        master_doc,
        project,
        doc_title,
        author,
        project,
        ""One line description of project."",
        ""Miscellaneous"",
    )
]",texinfo_documents,"[
    (
        master_doc,
        project,
        doc_title,
        author,
        project,
        ""One line description of project."",
        ""Miscellaneous"",
    )
]",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"qualname_overrides = {
    ""sklearn.neighbors._dist_metrics.DistanceMetric"": ""sklearn.metrics.DistanceMetric"",
    ""scanpy.plotting._matrixplot.MatrixPlot"": ""scanpy.pl.MatrixPlot"",
    ""scanpy.plotting._dotplot.DotPlot"": ""scanpy.pl.DotPlot"",
    ""scanpy.plotting._stacked_violin.StackedViolin"": ""scanpy.pl.StackedViolin"",
    ""pandas.core.series.Series"": ""pandas.Series"",
}",constant,,,,"Constant: qualname_overrides = {
    ""sklearn.neighbors._dist_metrics.DistanceMetric"": ""sklearn.metrics.DistanceMetric"",
    ""scanpy.plotting._matrixplot.MatrixPlot"": ""scanpy.pl.MatrixPlot"",
    ""scanpy.plotting._dotplot.DotPlot"": ""scanpy.pl.DotPlot"",
    ""scanpy.plotting._stacked_violin.StackedViolin"": ""scanpy.pl.StackedViolin"",
    ""pandas.core.series.Series"": ""pandas.Series"",
}",scverse,scanpy,1.10.1,,,,,"qualname_overrides = {
    ""sklearn.neighbors._dist_metrics.DistanceMetric"": ""sklearn.metrics.DistanceMetric"",
    ""scanpy.plotting._matrixplot.MatrixPlot"": ""scanpy.pl.MatrixPlot"",
    ""scanpy.plotting._dotplot.DotPlot"": ""scanpy.pl.DotPlot"",
    ""scanpy.plotting._stacked_violin.StackedViolin"": ""scanpy.pl.StackedViolin"",
    ""pandas.core.series.Series"": ""pandas.Series"",
}",qualname_overrides,"{
    ""sklearn.neighbors._dist_metrics.DistanceMetric"": ""sklearn.metrics.DistanceMetric"",
    ""scanpy.plotting._matrixplot.MatrixPlot"": ""scanpy.pl.MatrixPlot"",
    ""scanpy.plotting._dotplot.DotPlot"": ""scanpy.pl.DotPlot"",
    ""scanpy.plotting._stacked_violin.StackedViolin"": ""scanpy.pl.StackedViolin"",
    ""pandas.core.series.Series"": ""pandas.Series"",
}",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"nitpick_ignore = [
    # Technical issues
    (""py:class"", ""numpy.int64""),  # documented as “attribute”
    # Will probably be documented
    (""py:class"", ""scanpy._settings.Verbosity""),
    (""py:class"", ""scanpy.neighbors.OnFlySymMatrix""),
    (""py:class"", ""scanpy.plotting._baseplot_class.BasePlot""),
    # Currently undocumented
    # https://github.com/mwaskom/seaborn/issues/1810
    (""py:class"", ""seaborn.matrix.ClusterGrid""),
    (""py:class"", ""samalg.SAM""),
    # Won’t be documented
    (""py:class"", ""scanpy.plotting._utils._AxesSubplot""),
    (""py:class"", ""scanpy._utils.Empty""),
    (""py:class"", ""numpy.random.mtrand.RandomState""),
    (""py:class"", ""scanpy.neighbors._types.KnnTransformerLike""),
    # Will work once scipy 1.8 is released
    (""py:class"", ""scipy.sparse.base.spmatrix""),
    (""py:class"", ""scipy.sparse.csr.csr_matrix""),
]",constant,,,,"Constant: nitpick_ignore = [
    # Technical issues
    (""py:class"", ""numpy.int64""),  # documented as “attribute”
    # Will probably be documented
    (""py:class"", ""scanpy._settings.Verbosity""),
    (""py:class"", ""scanpy.neighbors.OnFlySymMatrix""),
    (""py:class"", ""scanpy.plotting._baseplot_class.BasePlot""),
    # Currently undocumented
    # https://github.com/mwaskom/seaborn/issues/1810
    (""py:class"", ""seaborn.matrix.ClusterGrid""),
    (""py:class"", ""samalg.SAM""),
    # Won’t be documented
    (""py:class"", ""scanpy.plotting._utils._AxesSubplot""),
    (""py:class"", ""scanpy._utils.Empty""),
    (""py:class"", ""numpy.random.mtrand.RandomState""),
    (""py:class"", ""scanpy.neighbors._types.KnnTransformerLike""),
    # Will work once scipy 1.8 is released
    (""py:class"", ""scipy.sparse.base.spmatrix""),
    (""py:class"", ""scipy.sparse.csr.csr_matrix""),
]",scverse,scanpy,1.10.1,,,,,"nitpick_ignore = [
    # Technical issues
    (""py:class"", ""numpy.int64""),  # documented as “attribute”
    # Will probably be documented
    (""py:class"", ""scanpy._settings.Verbosity""),
    (""py:class"", ""scanpy.neighbors.OnFlySymMatrix""),
    (""py:class"", ""scanpy.plotting._baseplot_class.BasePlot""),
    # Currently undocumented
    # https://github.com/mwaskom/seaborn/issues/1810
    (""py:class"", ""seaborn.matrix.ClusterGrid""),
    (""py:class"", ""samalg.SAM""),
    # Won’t be documented
    (""py:class"", ""scanpy.plotting._utils._AxesSubplot""),
    (""py:class"", ""scanpy._utils.Empty""),
    (""py:class"", ""numpy.random.mtrand.RandomState""),
    (""py:class"", ""scanpy.neighbors._types.KnnTransformerLike""),
    # Will work once scipy 1.8 is released
    (""py:class"", ""scipy.sparse.base.spmatrix""),
    (""py:class"", ""scipy.sparse.csr.csr_matrix""),
]",nitpick_ignore,"[
    # Technical issues
    (""py:class"", ""numpy.int64""),  # documented as “attribute”
    # Will probably be documented
    (""py:class"", ""scanpy._settings.Verbosity""),
    (""py:class"", ""scanpy.neighbors.OnFlySymMatrix""),
    (""py:class"", ""scanpy.plotting._baseplot_class.BasePlot""),
    # Currently undocumented
    # https://github.com/mwaskom/seaborn/issues/1810
    (""py:class"", ""seaborn.matrix.ClusterGrid""),
    (""py:class"", ""samalg.SAM""),
    # Won’t be documented
    (""py:class"", ""scanpy.plotting._utils._AxesSubplot""),
    (""py:class"", ""scanpy._utils.Empty""),
    (""py:class"", ""numpy.random.mtrand.RandomState""),
    (""py:class"", ""scanpy.neighbors._types.KnnTransformerLike""),
    # Will work once scipy 1.8 is released
    (""py:class"", ""scipy.sparse.base.spmatrix""),
    (""py:class"", ""scipy.sparse.csr.csr_matrix""),
]",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,plot_include_source = True,constant,,,,Constant: plot_include_source = True,scverse,scanpy,1.10.1,,,,,plot_include_source = True,plot_include_source,True,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"plot_formats = [(""png"", 90)]",constant,,,,"Constant: plot_formats = [(""png"", 90)]",scverse,scanpy,1.10.1,,,,,"plot_formats = [(""png"", 90)]",plot_formats,"[(""png"", 90)]",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,plot_html_show_formats = False,constant,,,,Constant: plot_html_show_formats = False,scverse,scanpy,1.10.1,,,,,plot_html_show_formats = False,plot_html_show_formats,False,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,plot_html_show_source_link = False,constant,,,,Constant: plot_html_show_source_link = False,scverse,scanpy,1.10.1,,,,,plot_html_show_source_link = False,plot_html_show_source_link,False,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,plot_working_directory = HERE.parent,constant,,,,Constant: plot_working_directory = HERE.parent,scverse,scanpy,1.10.1,,,,,plot_working_directory = HERE.parent,plot_working_directory,HERE.parent,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"extlinks = {
    ""issue"": (""https://github.com/scverse/scanpy/issues/%s"", ""issue%s""),
    ""pr"": (""https://github.com/scverse/scanpy/pull/%s"", ""pr%s""),
}",constant,,,,"Constant: extlinks = {
    ""issue"": (""https://github.com/scverse/scanpy/issues/%s"", ""issue%s""),
    ""pr"": (""https://github.com/scverse/scanpy/pull/%s"", ""pr%s""),
}",scverse,scanpy,1.10.1,,,,,"extlinks = {
    ""issue"": (""https://github.com/scverse/scanpy/issues/%s"", ""issue%s""),
    ""pr"": (""https://github.com/scverse/scanpy/pull/%s"", ""pr%s""),
}",extlinks,"{
    ""issue"": (""https://github.com/scverse/scanpy/issues/%s"", ""issue%s""),
    ""pr"": (""https://github.com/scverse/scanpy/pull/%s"", ""pr%s""),
}",,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,sys,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,datetime from datetime,import,,,,Import: datetime from datetime,scverse,scanpy,1.10.1,from datetime import datetime,datetime,datetime,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,matplotlib,import,,,,Import: matplotlib,scverse,scanpy,1.10.1,import matplotlib,matplotlib,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,Version from packaging.version,local_import,,,,Import: Version from packaging.version,scverse,scanpy,1.10.1,from packaging.version import Version,Version,packaging.version,packaging.version,,,,,,,,,,,,,,
,conf.py,python,,,,,,File: docs,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,conf.py,python,,,,,,Directory: docs\conf.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cite.py,python,"cite_role(  # noqa: PLR0917
    name: str,
    rawsource: str,
    text: str,
    lineno: int,
    inliner: Inliner,
    options: Mapping[str, Any] = MappingProxyType({}),
    content: Sequence[str] = (),
) -> tuple[list[nodes.Node], list[nodes.system_message]]",function,cite_role,"(  # noqa: PLR0917
    name: str,
    rawsource: str,
    text: str,
    lineno: int,
    inliner: Inliner,
    options: Mapping[str, Any] = MappingProxyType({}),
    content: Sequence[str] = (),
)","tuple[list[nodes.Node], list[nodes.system_message]]","Function: cite_role(  # noqa: PLR0917
    name: str,
    rawsource: str,
    text: str,
    lineno: int,
    inliner: Inliner,
    options: Mapping[str, Any] = MappingProxyType({}),
    content: Sequence[str] = (),
) -> tuple[list[nodes.Node], list[nodes.system_message]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cite.py,python,setup(app: Sphinx),function,setup,(app: Sphinx),,Function: setup(app: Sphinx),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cite.py,python,MappingProxyType from types,import,,,,Import: MappingProxyType from types,scverse,scanpy,1.10.1,from types import MappingProxyType,MappingProxyType,types,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cite.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cite.py,python,nodes from docutils,import,,,,Import: nodes from docutils,scverse,scanpy,1.10.1,"from docutils import nodes, utils",nodes,docutils,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cite.py,python,utils from docutils,import,,,,Import: utils from docutils,scverse,scanpy,1.10.1,"from docutils import nodes, utils",utils,docutils,,,,,,,,,,,,,,,
,cite.py,python,,,,,,File: docs\extensions,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,cite.py,python,,,,,,Directory: docs\extensions\cite.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,debug_docstrings.py,python,"pd_new(app, what, name, obj, options, lines)",function,pd_new,"(app, what, name, obj, options, lines)",,"Function: pd_new(app, what, name, obj, options, lines)",scverse,scanpy,1.10.1,,,,,,,,"# noqa: PLR0917",,,,,,,,,,
scverse_scanpy_1.10.1,debug_docstrings.py,python,setup(app: Sphinx),function,setup,(app: Sphinx),,Function: setup(app: Sphinx),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,debug_docstrings.py,python,_pd_orig = sphinx.ext.napoleon._process_docstring,constant,,,,Constant: _pd_orig = sphinx.ext.napoleon._process_docstring,scverse,scanpy,1.10.1,,,,,_pd_orig = sphinx.ext.napoleon._process_docstring,_pd_orig,sphinx.ext.napoleon._process_docstring,,,,,,,,,,,
scverse_scanpy_1.10.1,debug_docstrings.py,python,os,import,,,,Import: os,scverse,scanpy,1.10.1,import os,os,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,debug_docstrings.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,debug_docstrings.py,python,sphinx.ext.napoleon,import,,,,Import: sphinx.ext.napoleon,scverse,scanpy,1.10.1,import sphinx.ext.napoleon,sphinx.ext.napoleon,,,,,,,,,,,,,,,,
,debug_docstrings.py,python,,,,,,File: docs\extensions,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,debug_docstrings.py,python,,,,,,Directory: docs\extensions\debug_docstrings.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,function_images.py,python,"insert_function_images(  # noqa: PLR0917
    app: Sphinx, what: str, name: str, obj: Any, options: Options, lines: list[str]
)",function,insert_function_images,"(  # noqa: PLR0917
    app: Sphinx, what: str, name: str, obj: Any, options: Options, lines: list[str]
)",,"Function: insert_function_images(  # noqa: PLR0917
    app: Sphinx, what: str, name: str, obj: Any, options: Options, lines: list[str]
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,function_images.py,python,setup(app: Sphinx),function,setup,(app: Sphinx),,Function: setup(app: Sphinx),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,function_images.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,function_images.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,function_images.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",Any,typing,,,,,,,,,,,,,,,
,function_images.py,python,,,,,,File: docs\extensions,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,function_images.py,python,,,,,,Directory: docs\extensions\function_images.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,git_ref.py,python,git(*args: str) -> str,function,git,(*args: str),str,Function: git(*args: str) -> str,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,git_ref.py,python,"set_ref(app: Sphinx, config: Config)",function,set_ref,"(app: Sphinx, config: Config)",,"Function: set_ref(app: Sphinx, config: Config)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,git_ref.py,python,setup(app: Sphinx) -> None,function,setup,(app: Sphinx),None,Function: setup(app: Sphinx) -> None,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,git_ref.py,python,re,import,,,,Import: re,scverse,scanpy,1.10.1,import re,re,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,git_ref.py,python,subprocess,import,,,,Import: subprocess,scverse,scanpy,1.10.1,import subprocess,subprocess,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,git_ref.py,python,lru_cache from functools,import,,,,Import: lru_cache from functools,scverse,scanpy,1.10.1,from functools import lru_cache,lru_cache,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,git_ref.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
,git_ref.py,python,,,,,,File: docs\extensions,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,git_ref.py,python,,,,,,Directory: docs\extensions\git_ref.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,has_attr_test.py,python,"has_member(obj_path: str, attr: str) -> bool",function,has_member,"(obj_path: str, attr: str)",bool,"Function: has_member(obj_path: str, attr: str) -> bool",scverse,scanpy,1.10.1,,,,,,,,"# https://jinja.palletsprojects.com/en/3.0.x/api/#custom-tests",,,,,,,,,,
scverse_scanpy_1.10.1,has_attr_test.py,python,setup(app: Sphinx),function,setup,(app: Sphinx),,Function: setup(app: Sphinx),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,has_attr_test.py,python,get_annotations from inspect,import,,,,Import: get_annotations from inspect,scverse,scanpy,1.10.1,from inspect import get_annotations,get_annotations,inspect,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,has_attr_test.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,has_attr_test.py,python,DEFAULT_NAMESPACE from jinja2.defaults,local_import,,,,Import: DEFAULT_NAMESPACE from jinja2.defaults,scverse,scanpy,1.10.1,from jinja2.defaults import DEFAULT_NAMESPACE,DEFAULT_NAMESPACE,jinja2.defaults,jinja2.defaults,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,has_attr_test.py,python,import_string from jinja2.utils,local_import,,,,Import: import_string from jinja2.utils,scverse,scanpy,1.10.1,from jinja2.utils import import_string,import_string,jinja2.utils,jinja2.utils,,,,,,,,,,,,,,
,has_attr_test.py,python,,,,,,File: docs\extensions,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,has_attr_test.py,python,,,,,,Directory: docs\extensions\has_attr_test.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,param_police.py,python,"scanpy_log_param_types(self, fields, field_role=""param"", type_role=""type"")",function,scanpy_log_param_types,"(self, fields, field_role=""param"", type_role=""type"")",,"Function: scanpy_log_param_types(self, fields, field_role=""param"", type_role=""type"")",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,param_police.py,python,"show_param_warnings(app, exception)",function,show_param_warnings,"(app, exception)",,"Function: show_param_warnings(app, exception)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,param_police.py,python,setup(app: Sphinx),function,setup,(app: Sphinx),,Function: setup(app: Sphinx),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,param_police.py,python,_format_docutils_params_orig = NumpyDocstring._format_docutils_params,constant,,,,Constant: _format_docutils_params_orig = NumpyDocstring._format_docutils_params,scverse,scanpy,1.10.1,,,,,_format_docutils_params_orig = NumpyDocstring._format_docutils_params,_format_docutils_params_orig,NumpyDocstring._format_docutils_params,,,,,,,,,,,
scverse_scanpy_1.10.1,param_police.py,python,param_warnings = {},constant,,,,Constant: param_warnings = {},scverse,scanpy,1.10.1,,,,,param_warnings = {},param_warnings,{},,,,,,,,,,,
scverse_scanpy_1.10.1,param_police.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,param_police.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,param_police.py,python,NumpyDocstring from sphinx.ext.napoleon,local_import,,,,Import: NumpyDocstring from sphinx.ext.napoleon,scverse,scanpy,1.10.1,from sphinx.ext.napoleon import NumpyDocstring,NumpyDocstring,sphinx.ext.napoleon,sphinx.ext.napoleon,,,,,,,,,,,,,,
,param_police.py,python,,,,,,File: docs\extensions,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,param_police.py,python,,,,,,Directory: docs\extensions\param_police.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,[instance] _DelegatingSubparsersAction.command = _command,class_field,,,,Class field: [instance] _DelegatingSubparsersAction.command = _command,scverse,scanpy,1.10.1,,,,,,,,,_DelegatingSubparsersAction,__init__,"(self, *args, _command: str, _runargs: dict[str, Any], **kwargs)",self.command = _command,self.command = _command,,,,,
scverse_scanpy_1.10.1,cli.py,python,"[instance] _DelegatingSubparsersAction._name_parser_map = choices = _CommandDelegator(
            _command, self, **_runargs
        )",class_field,,,,"Class field: [instance] _DelegatingSubparsersAction._name_parser_map = choices = _CommandDelegator(
            _command, self, **_runargs
        )",scverse,scanpy,1.10.1,,,,,,,,,_DelegatingSubparsersAction,__init__,"(self, *args, _command: str, _runargs: dict[str, Any], **kwargs)","self._name_parser_map = self.choices = _CommandDelegator(
            _command, self, **_runargs
        )","self._name_parser_map = self.choices = _CommandDelegator(
            _command, self, **_runargs
        )",,,,,
scverse_scanpy_1.10.1,cli.py,python,[instance] _CommandDelegator.command = command,class_field,,,,Class field: [instance] _CommandDelegator.command = command,scverse,scanpy,1.10.1,,,,,,,,,_CommandDelegator,__init__,"(self, command: str, action: _DelegatingSubparsersAction, **runargs)",self.command = command,self.command = command,,,,,
scverse_scanpy_1.10.1,cli.py,python,[instance] _CommandDelegator.action = action,class_field,,,,Class field: [instance] _CommandDelegator.action = action,scverse,scanpy,1.10.1,,,,,,,,,_CommandDelegator,__init__,"(self, command: str, action: _DelegatingSubparsersAction, **runargs)",self.action = action,self.action = action,,,,,
scverse_scanpy_1.10.1,cli.py,python,[instance] _CommandDelegator.parser_map = {},class_field,,,,Class field: [instance] _CommandDelegator.parser_map = {},scverse,scanpy,1.10.1,,,,,,,,,_CommandDelegator,__init__,"(self, command: str, action: _DelegatingSubparsersAction, **runargs)",self.parser_map = {},self.parser_map = {},,,,,
scverse_scanpy_1.10.1,cli.py,python,[instance] _CommandDelegator.runargs = runargs,class_field,,,,Class field: [instance] _CommandDelegator.runargs = runargs,scverse,scanpy,1.10.1,,,,,,,,,_CommandDelegator,__init__,"(self, command: str, action: _DelegatingSubparsersAction, **runargs)",self.runargs = runargs,self.runargs = runargs,,,,,
scverse_scanpy_1.10.1,cli.py,python,[instance] _DelegatingParser.cd = cd,class_field,,,,Class field: [instance] _DelegatingParser.cd = cd,scverse,scanpy,1.10.1,,,,,,,,,_DelegatingParser,__init__,"(self, cd: _CommandDelegator, subcmd: str)",self.cd = cd,self.cd = cd,,,,,
scverse_scanpy_1.10.1,cli.py,python,[instance] _DelegatingParser.subcmd = subcmd,class_field,,,,Class field: [instance] _DelegatingParser.subcmd = subcmd,scverse,scanpy,1.10.1,,,,,,,,,_DelegatingParser,__init__,"(self, cd: _CommandDelegator, subcmd: str)",self.subcmd = subcmd,self.subcmd = subcmd,,,,,
scverse_scanpy_1.10.1,cli.py,python,"_DelegatingSubparsersAction.__init__(self, *args, _command: str, _runargs: dict[str, Any], **kwargs)",class_method,,,,"Class method: _DelegatingSubparsersAction.__init__(self, *args, _command: str, _runargs: dict[str, Any], **kwargs)",scverse,scanpy,1.10.1,,,,,,,,,_DelegatingSubparsersAction,__init__,"(self, *args, _command: str, _runargs: dict[str, Any], **kwargs)",,,,,,,
scverse_scanpy_1.10.1,cli.py,python,"_CommandDelegator.__init__(self, command: str, action: _DelegatingSubparsersAction, **runargs)",class_method,,,,"Class method: _CommandDelegator.__init__(self, command: str, action: _DelegatingSubparsersAction, **runargs)",scverse,scanpy,1.10.1,,,,,,,,,_CommandDelegator,__init__,"(self, command: str, action: _DelegatingSubparsersAction, **runargs)",,,,,,,
scverse_scanpy_1.10.1,cli.py,python,"_CommandDelegator.__contains__(self, k: str) -> bool",class_method,,,,"Class method: _CommandDelegator.__contains__(self, k: str) -> bool",scverse,scanpy,1.10.1,,,,,,,,,_CommandDelegator,__contains__,"(self, k: str)",,,bool,,,,
scverse_scanpy_1.10.1,cli.py,python,"_CommandDelegator.__getitem__(self, k: str) -> ArgumentParser",class_method,,,,"Class method: _CommandDelegator.__getitem__(self, k: str) -> ArgumentParser",scverse,scanpy,1.10.1,,,,,,,,,_CommandDelegator,__getitem__,"(self, k: str)",,,ArgumentParser,,,,
scverse_scanpy_1.10.1,cli.py,python,"_CommandDelegator.__setitem__(self, k: str, v: ArgumentParser) -> None",class_method,,,,"Class method: _CommandDelegator.__setitem__(self, k: str, v: ArgumentParser) -> None",scverse,scanpy,1.10.1,,,,,,,,,_CommandDelegator,__setitem__,"(self, k: str, v: ArgumentParser)",,,None,,,,
scverse_scanpy_1.10.1,cli.py,python,"_CommandDelegator.__delitem__(self, k: str) -> None",class_method,,,,"Class method: _CommandDelegator.__delitem__(self, k: str) -> None",scverse,scanpy,1.10.1,,,,,,,,,_CommandDelegator,__delitem__,"(self, k: str)",,,None,,,,
scverse_scanpy_1.10.1,cli.py,python,"_CommandDelegator.__iter__(self) -> Generator[str, None, None]",class_method,,,,"Class method: _CommandDelegator.__iter__(self) -> Generator[str, None, None]",scverse,scanpy,1.10.1,,,,,,,,,_CommandDelegator,__iter__,(self),,,"Generator[str, None, None]",,,,
scverse_scanpy_1.10.1,cli.py,python,_CommandDelegator.__len__(self) -> int,class_method,,,,Class method: _CommandDelegator.__len__(self) -> int,scverse,scanpy,1.10.1,,,,,,,,,_CommandDelegator,__len__,(self),,,int,,,,
scverse_scanpy_1.10.1,cli.py,python,_CommandDelegator.__hash__(self) -> int,class_method,,,,Class method: _CommandDelegator.__hash__(self) -> int,scverse,scanpy,1.10.1,,,,,,,,,_CommandDelegator,__hash__,(self),,,int,,,,
scverse_scanpy_1.10.1,cli.py,python,"_CommandDelegator.__eq__(self, other: Mapping[str, ArgumentParser])",class_method,,,,"Class method: _CommandDelegator.__eq__(self, other: Mapping[str, ArgumentParser])",scverse,scanpy,1.10.1,,,,,,,,,_CommandDelegator,__eq__,"(self, other: Mapping[str, ArgumentParser])",,,,,,,
scverse_scanpy_1.10.1,cli.py,python,[property] _CommandDelegator.commands(self) -> frozenset[str],class_method,,,,Class method: [property] _CommandDelegator.commands(self) -> frozenset[str],scverse,scanpy,1.10.1,,,,,,,,,_CommandDelegator,commands,(self),,,frozenset[str],property,,,
scverse_scanpy_1.10.1,cli.py,python,[lru_cache] _CommandDelegator.commands(self) -> frozenset[str],class_method,,,,Class method: [lru_cache] _CommandDelegator.commands(self) -> frozenset[str],scverse,scanpy,1.10.1,,,,,,,,,_CommandDelegator,commands,(self),,,frozenset[str],lru_cache,,,
scverse_scanpy_1.10.1,cli.py,python,"_DelegatingParser.__init__(self, cd: _CommandDelegator, subcmd: str)",class_method,,,,"Class method: _DelegatingParser.__init__(self, cd: _CommandDelegator, subcmd: str)",scverse,scanpy,1.10.1,,,,,,,,,_DelegatingParser,__init__,"(self, cd: _CommandDelegator, subcmd: str)",,,,,,,
scverse_scanpy_1.10.1,cli.py,python,"_DelegatingParser.parse_known_args(
        self,
        args: Sequence[str] | None = None,
        namespace: Namespace | None = None,
    ) -> tuple[Namespace, list[str]]",class_method,,,,"Class method: _DelegatingParser.parse_known_args(
        self,
        args: Sequence[str] | None = None,
        namespace: Namespace | None = None,
    ) -> tuple[Namespace, list[str]]",scverse,scanpy,1.10.1,,,,,,,,,_DelegatingParser,parse_known_args,"(
        self,
        args: Sequence[str] | None = None,
        namespace: Namespace | None = None,
    )",,,"tuple[Namespace, list[str]]",,,,
scverse_scanpy_1.10.1,cli.py,python,_DelegatingSubparsersAction(_SubParsersAction),class,,,,Class: _DelegatingSubparsersAction(_SubParsersAction),scverse,scanpy,1.10.1,,,,,,,,,_DelegatingSubparsersAction,,,,,,,(_SubParsersAction),,
scverse_scanpy_1.10.1,cli.py,python,_CommandDelegator(cabc.MutableMapping),class,,,,Class: _CommandDelegator(cabc.MutableMapping),scverse,scanpy,1.10.1,,,,,,,,,_CommandDelegator,,,,,,,(cabc.MutableMapping),,
scverse_scanpy_1.10.1,cli.py,python,_DelegatingParser(ArgumentParser),class,,,,Class: _DelegatingParser(ArgumentParser),scverse,scanpy,1.10.1,,,,,,,,,_DelegatingParser,,,,,,,(ArgumentParser),,
scverse_scanpy_1.10.1,cli.py,python,_cmd_settings() -> None,function,_cmd_settings,(),None,Function: _cmd_settings() -> None,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,"main(
    argv: Sequence[str] | None = None, *, check: bool = True, **runargs
) -> CompletedProcess | None",function,main,"(
    argv: Sequence[str] | None = None, *, check: bool = True, **runargs
)",CompletedProcess | None,"Function: main(
    argv: Sequence[str] | None = None, *, check: bool = True, **runargs
) -> CompletedProcess | None",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,console_main(),function,console_main,(),,Function: console_main(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,collections.abc,import,,,,Import: collections.abc,scverse,scanpy,1.10.1,import collections.abc as cabc,collections.abc,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,os,import,,,,Import: os,scverse,scanpy,1.10.1,import os,os,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,sys,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,ArgumentParser from argparse,import,,,,Import: ArgumentParser from argparse,scverse,scanpy,1.10.1,"from argparse import ArgumentParser, Namespace, _SubParsersAction",ArgumentParser,argparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,Namespace from argparse,import,,,,Import: Namespace from argparse,scverse,scanpy,1.10.1,"from argparse import ArgumentParser, Namespace, _SubParsersAction",Namespace,argparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,_SubParsersAction from argparse,import,,,,Import: _SubParsersAction from argparse,scverse,scanpy,1.10.1,"from argparse import ArgumentParser, Namespace, _SubParsersAction",_SubParsersAction,argparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,lru_cache from functools,import,,,,Import: lru_cache from functools,scverse,scanpy,1.10.1,"from functools import lru_cache, partial",lru_cache,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,"from functools import lru_cache, partial",partial,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,which from shutil,import,,,,Import: which from shutil,scverse,scanpy,1.10.1,from shutil import which,which,shutil,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,CompletedProcess from subprocess,import,,,,Import: CompletedProcess from subprocess,scverse,scanpy,1.10.1,"from subprocess import CompletedProcess, run",CompletedProcess,subprocess,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,run from subprocess,import,,,,Import: run from subprocess,scverse,scanpy,1.10.1,"from subprocess import CompletedProcess, run",run,subprocess,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",Any,typing,,,,,,,,,,,,,,,
,cli.py,python,,,,,,File: scanpy,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,cli.py,python,,,,,,Directory: scanpy\cli.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,[instance] _RootLogger.propagate = False,class_field,,,,Class field: [instance] _RootLogger.propagate = False,scverse,scanpy,1.10.1,,,,,,,,,_RootLogger,__init__,"(self, level)",self.propagate = False,self.propagate = False,,,,,
scverse_scanpy_1.10.1,logging.py,python,"_RootLogger.__init__(self, level)",class_method,,,,"Class method: _RootLogger.__init__(self, level)",scverse,scanpy,1.10.1,,,,,,,,,_RootLogger,__init__,"(self, level)",,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"_RootLogger.log(
        self,
        level: int,
        msg: str,
        *,
        extra: dict | None = None,
        time: datetime | None = None,
        deep: str | None = None,
    ) -> datetime",class_method,,,,"Class method: _RootLogger.log(
        self,
        level: int,
        msg: str,
        *,
        extra: dict | None = None,
        time: datetime | None = None,
        deep: str | None = None,
    ) -> datetime",scverse,scanpy,1.10.1,,,,,,,,,_RootLogger,log,"(
        self,
        level: int,
        msg: str,
        *,
        extra: dict | None = None,
        time: datetime | None = None,
        deep: str | None = None,
    )",,,datetime,,,,
scverse_scanpy_1.10.1,logging.py,python,"_RootLogger.critical(self, msg, *, time=None, deep=None, extra=None) -> datetime",class_method,,,,"Class method: _RootLogger.critical(self, msg, *, time=None, deep=None, extra=None) -> datetime",scverse,scanpy,1.10.1,,,,,,,,,_RootLogger,critical,"(self, msg, *, time=None, deep=None, extra=None)",,,datetime,,,,
scverse_scanpy_1.10.1,logging.py,python,"_RootLogger.error(self, msg, *, time=None, deep=None, extra=None) -> datetime",class_method,,,,"Class method: _RootLogger.error(self, msg, *, time=None, deep=None, extra=None) -> datetime",scverse,scanpy,1.10.1,,,,,,,,,_RootLogger,error,"(self, msg, *, time=None, deep=None, extra=None)",,,datetime,,,,
scverse_scanpy_1.10.1,logging.py,python,"_RootLogger.warning(self, msg, *, time=None, deep=None, extra=None) -> datetime",class_method,,,,"Class method: _RootLogger.warning(self, msg, *, time=None, deep=None, extra=None) -> datetime",scverse,scanpy,1.10.1,,,,,,,,,_RootLogger,warning,"(self, msg, *, time=None, deep=None, extra=None)",,,datetime,,,,
scverse_scanpy_1.10.1,logging.py,python,"_RootLogger.info(self, msg, *, time=None, deep=None, extra=None) -> datetime",class_method,,,,"Class method: _RootLogger.info(self, msg, *, time=None, deep=None, extra=None) -> datetime",scverse,scanpy,1.10.1,,,,,,,,,_RootLogger,info,"(self, msg, *, time=None, deep=None, extra=None)",,,datetime,,,,
scverse_scanpy_1.10.1,logging.py,python,"_RootLogger.hint(self, msg, *, time=None, deep=None, extra=None) -> datetime",class_method,,,,"Class method: _RootLogger.hint(self, msg, *, time=None, deep=None, extra=None) -> datetime",scverse,scanpy,1.10.1,,,,,,,,,_RootLogger,hint,"(self, msg, *, time=None, deep=None, extra=None)",,,datetime,,,,
scverse_scanpy_1.10.1,logging.py,python,"_RootLogger.debug(self, msg, *, time=None, deep=None, extra=None) -> datetime",class_method,,,,"Class method: _RootLogger.debug(self, msg, *, time=None, deep=None, extra=None) -> datetime",scverse,scanpy,1.10.1,,,,,,,,,_RootLogger,debug,"(self, msg, *, time=None, deep=None, extra=None)",,,datetime,,,,
scverse_scanpy_1.10.1,logging.py,python,"_LogFormatter.__init__(
        self, fmt=""{levelname}: {message}"", datefmt=""%Y-%m-%d %H:%M"", style=""{""
    )",class_method,,,,"Class method: _LogFormatter.__init__(
        self, fmt=""{levelname}: {message}"", datefmt=""%Y-%m-%d %H:%M"", style=""{""
    )",scverse,scanpy,1.10.1,,,,,,,,,_LogFormatter,__init__,"(
        self, fmt=""{levelname}: {message}"", datefmt=""%Y-%m-%d %H:%M"", style=""{""
    )",,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"_LogFormatter.format(self, record: logging.LogRecord)",class_method,,,,"Class method: _LogFormatter.format(self, record: logging.LogRecord)",scverse,scanpy,1.10.1,,,,,,,,,_LogFormatter,format,"(self, record: logging.LogRecord)",,,,,,,
scverse_scanpy_1.10.1,logging.py,python,_RootLogger(logging.RootLogger),class,,,,Class: _RootLogger(logging.RootLogger),scverse,scanpy,1.10.1,,,,,,,,,_RootLogger,,,,,,,(logging.RootLogger),,
scverse_scanpy_1.10.1,logging.py,python,_LogFormatter(logging.Formatter),class,,,,Class: _LogFormatter(logging.Formatter),scverse,scanpy,1.10.1,,,,,,,,,_LogFormatter,,,,,,,(logging.Formatter),,
scverse_scanpy_1.10.1,logging.py,python,_set_log_file(settings: ScanpyConfig),function,_set_log_file,(settings: ScanpyConfig),,Function: _set_log_file(settings: ScanpyConfig),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"_set_log_level(settings: ScanpyConfig, level: int)",function,_set_log_level,"(settings: ScanpyConfig, level: int)",,"Function: _set_log_level(settings: ScanpyConfig, level: int)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,_versions_dependencies(dependencies),function,_versions_dependencies,(dependencies),,Function: _versions_dependencies(dependencies),scverse,scanpy,1.10.1,,,,,,,,"# this is not the same as the requirements!",,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"print_header(*, file=None)",function,print_header,"(*, file=None)",,"Function: print_header(*, file=None)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"print_versions(*, file: IO[str] | None = None)",function,print_versions,"(*, file: IO[str] | None = None)",,"Function: print_versions(*, file: IO[str] | None = None)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"print_version_and_date(*, file=None)",function,print_version_and_date,"(*, file=None)",,"Function: print_version_and_date(*, file=None)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,_copy_docs_and_signature(fn),function,_copy_docs_and_signature,(fn),,Function: _copy_docs_and_signature(fn),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"error(
    msg: str,
    *,
    time: datetime = None,
    deep: str | None = None,
    extra: dict | None = None,
) -> datetime",function,error,"(
    msg: str,
    *,
    time: datetime = None,
    deep: str | None = None,
    extra: dict | None = None,
)",datetime,"Function: error(
    msg: str,
    *,
    time: datetime = None,
    deep: str | None = None,
    extra: dict | None = None,
) -> datetime",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"__all__ = [""print_versions""]",constant,,,,"Constant: __all__ = [""print_versions""]",scverse,scanpy,1.10.1,,,,,"__all__ = [""print_versions""]",__all__,"[""print_versions""]",,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,HINT = (INFO + DEBUG) // 2,constant,,,,Constant: HINT = (INFO + DEBUG) // 2,scverse,scanpy,1.10.1,,,,,HINT = (INFO + DEBUG) // 2,HINT,(INFO + DEBUG) // 2,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,print_memory_usage = anndata.logging.print_memory_usage,constant,,,,Constant: print_memory_usage = anndata.logging.print_memory_usage,scverse,scanpy,1.10.1,,,,,print_memory_usage = anndata.logging.print_memory_usage,print_memory_usage,anndata.logging.print_memory_usage,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,get_memory_usage = anndata.logging.get_memory_usage,constant,,,,Constant: get_memory_usage = anndata.logging.get_memory_usage,scverse,scanpy,1.10.1,,,,,get_memory_usage = anndata.logging.get_memory_usage,get_memory_usage,anndata.logging.get_memory_usage,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"_DEPENDENCIES_NUMERICS = [
    ""anndata"",  # anndata actually shouldn't, but as long as it's in development
    ""umap"",
    ""numpy"",
    ""scipy"",
    ""pandas"",
    (""sklearn"", ""scikit-learn""),
    ""statsmodels"",
    ""igraph"",
    ""louvain"",
    ""leidenalg"",
    ""pynndescent"",
]",constant,,,,"Constant: _DEPENDENCIES_NUMERICS = [
    ""anndata"",  # anndata actually shouldn't, but as long as it's in development
    ""umap"",
    ""numpy"",
    ""scipy"",
    ""pandas"",
    (""sklearn"", ""scikit-learn""),
    ""statsmodels"",
    ""igraph"",
    ""louvain"",
    ""leidenalg"",
    ""pynndescent"",
]",scverse,scanpy,1.10.1,,,,,"_DEPENDENCIES_NUMERICS = [
    ""anndata"",  # anndata actually shouldn't, but as long as it's in development
    ""umap"",
    ""numpy"",
    ""scipy"",
    ""pandas"",
    (""sklearn"", ""scikit-learn""),
    ""statsmodels"",
    ""igraph"",
    ""louvain"",
    ""leidenalg"",
    ""pynndescent"",
]",_DEPENDENCIES_NUMERICS,"[
    ""anndata"",  # anndata actually shouldn't, but as long as it's in development
    ""umap"",
    ""numpy"",
    ""scipy"",
    ""pandas"",
    (""sklearn"", ""scikit-learn""),
    ""statsmodels"",
    ""igraph"",
    ""louvain"",
    ""leidenalg"",
    ""pynndescent"",
]",,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,logging,import,,,,Import: logging,scverse,scanpy,1.10.1,import logging,logging,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,sys,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,datetime from datetime,import,,,,Import: datetime from datetime,scverse,scanpy,1.10.1,"from datetime import datetime, timedelta, timezone",datetime,datetime,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,timedelta from datetime,import,,,,Import: timedelta from datetime,scverse,scanpy,1.10.1,"from datetime import datetime, timedelta, timezone",timedelta,datetime,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,timezone from datetime,import,,,,Import: timezone from datetime,scverse,scanpy,1.10.1,"from datetime import datetime, timedelta, timezone",timezone,datetime,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,"from functools import partial, update_wrapper",partial,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,update_wrapper from functools,import,,,,Import: update_wrapper from functools,scverse,scanpy,1.10.1,"from functools import partial, update_wrapper",update_wrapper,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,CRITICAL from logging,import,,,,Import: CRITICAL from logging,scverse,scanpy,1.10.1,"from logging import CRITICAL, DEBUG, ERROR, INFO, WARNING",CRITICAL,logging,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,DEBUG from logging,import,,,,Import: DEBUG from logging,scverse,scanpy,1.10.1,"from logging import CRITICAL, DEBUG, ERROR, INFO, WARNING",DEBUG,logging,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,ERROR from logging,import,,,,Import: ERROR from logging,scverse,scanpy,1.10.1,"from logging import CRITICAL, DEBUG, ERROR, INFO, WARNING",ERROR,logging,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,INFO from logging,import,,,,Import: INFO from logging,scverse,scanpy,1.10.1,"from logging import CRITICAL, DEBUG, ERROR, INFO, WARNING",INFO,logging,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,WARNING from logging,import,,,,Import: WARNING from logging,scverse,scanpy,1.10.1,"from logging import CRITICAL, DEBUG, ERROR, INFO, WARNING",WARNING,logging,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,IO from typing,import,,,,Import: IO from typing,scverse,scanpy,1.10.1,"from typing import IO, TYPE_CHECKING",IO,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import IO, TYPE_CHECKING",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,anndata.logging,import,,,,Import: anndata.logging,scverse,scanpy,1.10.1,import anndata.logging,anndata.logging,,,,,,,,,,,,,,,,
,logging.py,python,,,,,,File: scanpy,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,logging.py,python,,,,,,Directory: scanpy\logging.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"_read_legacy_10x_h5(filename, *, genome=None, start=None)",function,_read_legacy_10x_h5,"(filename, *, genome=None, start=None)",,"Function: _read_legacy_10x_h5(filename, *, genome=None, start=None)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"_collect_datasets(dsets: dict, group: h5py.Group)",function,_collect_datasets,"(dsets: dict, group: h5py.Group)",,"Function: _collect_datasets(dsets: dict, group: h5py.Group)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"_read_v3_10x_h5(filename, *, start=None)",function,_read_v3_10x_h5,"(filename, *, start=None)",,"Function: _read_v3_10x_h5(filename, *, start=None)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"read_visium(
    path: Path | str,
    genome: str | None = None,
    *,
    count_file: str = ""filtered_feature_bc_matrix.h5"",
    library_id: str | None = None,
    load_images: bool | None = True,
    source_image_path: Path | str | None = None,
) -> AnnData",function,read_visium,"(
    path: Path | str,
    genome: str | None = None,
    *,
    count_file: str = ""filtered_feature_bc_matrix.h5"",
    library_id: str | None = None,
    load_images: bool | None = True,
    source_image_path: Path | str | None = None,
)",AnnData,"Function: read_visium(
    path: Path | str,
    genome: str | None = None,
    *,
    count_file: str = ""filtered_feature_bc_matrix.h5"",
    library_id: str | None = None,
    load_images: bool | None = True,
    source_image_path: Path | str | None = None,
) -> AnnData",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"_read_10x_mtx(
    path: Path,
    *,
    var_names: Literal[""gene_symbols"", ""gene_ids""] = ""gene_symbols"",
    make_unique: bool = True,
    cache: bool = False,
    cache_compression: Literal[""gzip"", ""lzf""] | None | Empty = _empty,
    prefix: str = """",
    is_legacy: bool,
) -> AnnData",function,_read_10x_mtx,"(
    path: Path,
    *,
    var_names: Literal[""gene_symbols"", ""gene_ids""] = ""gene_symbols"",
    make_unique: bool = True,
    cache: bool = False,
    cache_compression: Literal[""gzip"", ""lzf""] | None | Empty = _empty,
    prefix: str = """",
    is_legacy: bool,
)",AnnData,"Function: _read_10x_mtx(
    path: Path,
    *,
    var_names: Literal[""gene_symbols"", ""gene_ids""] = ""gene_symbols"",
    make_unique: bool = True,
    cache: bool = False,
    cache_compression: Literal[""gzip"", ""lzf""] | None | Empty = _empty,
    prefix: str = """",
    is_legacy: bool,
) -> AnnData",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"read_params(
    filename: Path | str, asheader: bool = False
) -> dict[str, int | float | bool | str | None]",function,read_params,"(
    filename: Path | str, asheader: bool = False
)","dict[str, int | float | bool | str | None]","Function: read_params(
    filename: Path | str, asheader: bool = False
) -> dict[str, int | float | bool | str | None]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"write_params(path: Path | str, *args, **maps)",function,write_params,"(path: Path | str, *args, **maps)",,"Function: write_params(path: Path | str, *args, **maps)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"_read(
    filename: Path,
    *,
    backed=None,
    sheet=None,
    ext=None,
    delimiter=None,
    first_column_names=None,
    backup_url=None,
    cache=False,
    cache_compression=None,
    suppress_cache_warning=False,
    **kwargs,
)",function,_read,"(
    filename: Path,
    *,
    backed=None,
    sheet=None,
    ext=None,
    delimiter=None,
    first_column_names=None,
    backup_url=None,
    cache=False,
    cache_compression=None,
    suppress_cache_warning=False,
    **kwargs,
)",,"Function: _read(
    filename: Path,
    *,
    backed=None,
    sheet=None,
    ext=None,
    delimiter=None,
    first_column_names=None,
    backup_url=None,
    cache=False,
    cache_compression=None,
    suppress_cache_warning=False,
    **kwargs,
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,_slugify(path: str | PurePath) -> str,function,_slugify,(path: str | PurePath),str,Function: _slugify(path: str | PurePath) -> str,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,_read_softgz(filename: str | bytes | Path | BinaryIO) -> AnnData,function,_read_softgz,(filename: str | bytes | Path | BinaryIO),AnnData,Function: _read_softgz(filename: str | bytes | Path | BinaryIO) -> AnnData,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,is_float(string: str) -> float,function,is_float,(string: str),float,Function: is_float(string: str) -> float,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,is_int(string: str) -> bool,function,is_int,(string: str),bool,Function: is_int(string: str) -> bool,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"convert_bool(string: str) -> tuple[bool, bool]",function,convert_bool,(string: str),"tuple[bool, bool]","Function: convert_bool(string: str) -> tuple[bool, bool]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,convert_string(string: str) -> int | float | bool | str | None,function,convert_string,(string: str),int | float | bool | str | None,Function: convert_string(string: str) -> int | float | bool | str | None,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,get_used_files(),function,get_used_files,(),,Function: get_used_files(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"_get_filename_from_key(key, ext=None) -> Path",function,_get_filename_from_key,"(key, ext=None)",Path,"Function: _get_filename_from_key(key, ext=None) -> Path",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"_download(url: str, path: Path)",function,_download,"(url: str, path: Path)",,"Function: _download(url: str, path: Path)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"_check_datafile_present_and_download(path, backup_url=None)",function,_check_datafile_present_and_download,"(path, backup_url=None)",,"Function: _check_datafile_present_and_download(path, backup_url=None)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"is_valid_filename(filename: Path, return_ext=False)",function,is_valid_filename,"(filename: Path, return_ext=False)",,"Function: is_valid_filename(filename: Path, return_ext=False)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"text_exts = {
    ""csv"",
    ""tsv"",
    ""tab"",
    ""data"",
    ""txt"",  # these four are all equivalent
}",constant,,,,"Constant: text_exts = {
    ""csv"",
    ""tsv"",
    ""tab"",
    ""data"",
    ""txt"",  # these four are all equivalent
}",scverse,scanpy,1.10.1,,,,,"text_exts = {
    ""csv"",
    ""tsv"",
    ""tab"",
    ""data"",
    ""txt"",  # these four are all equivalent
}",text_exts,"{
    ""csv"",
    ""tsv"",
    ""tab"",
    ""data"",
    ""txt"",  # these four are all equivalent
}",,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"avail_exts = {
    ""anndata"",
    ""xlsx"",
    ""h5"",
    ""h5ad"",
    ""mtx"",
    ""mtx.gz"",
    ""soft.gz"",
    ""loom"",
} | text_exts",constant,,,,"Constant: avail_exts = {
    ""anndata"",
    ""xlsx"",
    ""h5"",
    ""h5ad"",
    ""mtx"",
    ""mtx.gz"",
    ""soft.gz"",
    ""loom"",
} | text_exts",scverse,scanpy,1.10.1,,,,,"avail_exts = {
    ""anndata"",
    ""xlsx"",
    ""h5"",
    ""h5ad"",
    ""mtx"",
    ""mtx.gz"",
    ""soft.gz"",
    ""loom"",
} | text_exts",avail_exts,"{
    ""anndata"",
    ""xlsx"",
    ""h5"",
    ""h5ad"",
    ""mtx"",
    ""mtx.gz"",
    ""soft.gz"",
    ""loom"",
} | text_exts",,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,json,import,,,,Import: json,scverse,scanpy,1.10.1,import json,json,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,"from pathlib import Path, PurePath",Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,PurePath from pathlib,import,,,,Import: PurePath from pathlib,scverse,scanpy,1.10.1,"from pathlib import Path, PurePath",PurePath,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,BinaryIO from typing,import,,,,Import: BinaryIO from typing,scverse,scanpy,1.10.1,"from typing import BinaryIO, Literal",BinaryIO,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import BinaryIO, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,anndata.utils,import,,,,Import: anndata.utils,scverse,scanpy,1.10.1,import anndata.utils,anndata.utils,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,h5py,import,,,,Import: h5py,scverse,scanpy,1.10.1,import h5py,h5py,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
)",AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,read_csv from anndata,import,,,,Import: read_csv from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
)",read_csv,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,read_excel from anndata,import,,,,Import: read_excel from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
)",read_excel,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,read_h5ad from anndata,import,,,,Import: read_h5ad from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
)",read_h5ad,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,read_hdf from anndata,import,,,,Import: read_hdf from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
)",read_hdf,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,read_loom from anndata,import,,,,Import: read_loom from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
)",read_loom,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,read_mtx from anndata,import,,,,Import: read_mtx from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
)",read_mtx,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,read_text from anndata,import,,,,Import: read_text from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
)",read_text,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,imread from matplotlib.image,local_import,,,,Import: imread from matplotlib.image,scverse,scanpy,1.10.1,from matplotlib.image import imread,imread,matplotlib.image,matplotlib.image,,,,,,,,,,,,,,
,readwrite.py,python,,,,,,File: scanpy,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,readwrite.py,python,,,,,,Directory: scanpy\readwrite.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,chdir.path: Path,class_field,,,,Class field: chdir.path: Path,scverse,scanpy,1.10.1,,,,,,,,,chdir,,,path: Path,,,,,path,
scverse_scanpy_1.10.1,_compat.py,python,chdir._old_cwd: list[Path] = field(default_factory=list),class_field,,,,Class field: chdir._old_cwd: list[Path] = field(default_factory=list),scverse,scanpy,1.10.1,,,,,,,,,chdir,,,_old_cwd: list[Path] = field(default_factory=list),,,,,_old_cwd,field(default_factory=list)
scverse_scanpy_1.10.1,_compat.py,python,chdir.__enter__(self) -> None,class_method,,,,Class method: chdir.__enter__(self) -> None,scverse,scanpy,1.10.1,,,,,,,,,chdir,__enter__,(self),,,None,,,,
scverse_scanpy_1.10.1,_compat.py,python,"chdir.__exit__(self, *_excinfo) -> None",class_method,,,,"Class method: chdir.__exit__(self, *_excinfo) -> None",scverse,scanpy,1.10.1,,,,,,,,,chdir,__exit__,"(self, *_excinfo)",,,None,,,,
scverse_scanpy_1.10.1,_compat.py,python,DaskArray,class,,,,Class: DaskArray,scverse,scanpy,1.10.1,,,,,,,,,DaskArray,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,ZappyArray,class,,,,Class: ZappyArray,scverse,scanpy,1.10.1,,,,,,,,,ZappyArray,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,chdir(AbstractContextManager),class,,,,Class: chdir(AbstractContextManager),scverse,scanpy,1.10.1,,,,,,,,,chdir,,,,,,,(AbstractContextManager),,
scverse_scanpy_1.10.1,_compat.py,python,fullname(typ: type) -> str,function,fullname,(typ: type),str,Function: fullname(typ: type) -> str,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,pkg_metadata(package),function,pkg_metadata,(package),,Function: pkg_metadata(package),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,"__all__ = [
    ""cache"",
    ""DaskArray"",
    ""ZappyArray"",
    ""fullname"",
    ""pkg_metadata"",
    ""pkg_version"",
]",constant,,,,"Constant: __all__ = [
    ""cache"",
    ""DaskArray"",
    ""ZappyArray"",
    ""fullname"",
    ""pkg_metadata"",
    ""pkg_version"",
]",scverse,scanpy,1.10.1,,,,,"__all__ = [
    ""cache"",
    ""DaskArray"",
    ""ZappyArray"",
    ""fullname"",
    ""pkg_metadata"",
    ""pkg_version"",
]",__all__,"[
    ""cache"",
    ""DaskArray"",
    ""ZappyArray"",
    ""fullname"",
    ""pkg_metadata"",
    ""pkg_version"",
]",,,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,"old_positionals = partial(legacy_api, category=FutureWarning)",constant,,,,"Constant: old_positionals = partial(legacy_api, category=FutureWarning)",scverse,scanpy,1.10.1,,,,,"old_positionals = partial(legacy_api, category=FutureWarning)",old_positionals,"partial(legacy_api, category=FutureWarning)",,,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,dataclass from dataclasses,import,,,,Import: dataclass from dataclasses,scverse,scanpy,1.10.1,"from dataclasses import dataclass, field",dataclass,dataclasses,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,field from dataclasses,import,,,,Import: field from dataclasses,scverse,scanpy,1.10.1,"from dataclasses import dataclass, field",field,dataclasses,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,partial,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,legacy_api from legacy_api_wrap,import,,,,Import: legacy_api from legacy_api_wrap,scverse,scanpy,1.10.1,from legacy_api_wrap import legacy_api,legacy_api,legacy_api_wrap,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,version,packaging,,,,,,,,,,,,,,,
,_compat.py,python,,,,,,File: scanpy,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_compat.py,python,,,,,,Directory: scanpy\_compat.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,Verbosity.error = 0,class_field,,,,Class field: Verbosity.error = 0,scverse,scanpy,1.10.1,,,,,,,,,Verbosity,,,error = 0,,,,,error,0
scverse_scanpy_1.10.1,_settings.py,python,Verbosity.warning = 1,class_field,,,,Class field: Verbosity.warning = 1,scverse,scanpy,1.10.1,,,,,,,,,Verbosity,,,warning = 1,,,,,warning,1
scverse_scanpy_1.10.1,_settings.py,python,Verbosity.info = 2,class_field,,,,Class field: Verbosity.info = 2,scverse,scanpy,1.10.1,,,,,,,,,Verbosity,,,info = 2,,,,,info,2
scverse_scanpy_1.10.1,_settings.py,python,Verbosity.hint = 3,class_field,,,,Class field: Verbosity.hint = 3,scverse,scanpy,1.10.1,,,,,,,,,Verbosity,,,hint = 3,,,,,hint,3
scverse_scanpy_1.10.1,_settings.py,python,Verbosity.debug = 4,class_field,,,,Class field: Verbosity.debug = 4,scverse,scanpy,1.10.1,,,,,,,,,Verbosity,,,debug = 4,,,,,debug,4
scverse_scanpy_1.10.1,_settings.py,python,ScanpyConfig.N_PCS: int,class_field,,,,Class field: ScanpyConfig.N_PCS: int,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,,,N_PCS: int,,,,,N_PCS,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig._root_logger = _RootLogger(logging.INFO),class_field,,,,Class field: [instance] ScanpyConfig._root_logger = _RootLogger(logging.INFO),scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self._root_logger = _RootLogger(logging.INFO),self._root_logger = _RootLogger(logging.INFO),,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.logfile = logfile,class_field,,,,Class field: [instance] ScanpyConfig.logfile = logfile,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.logfile = logfile,self.logfile = logfile,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.verbosity = verbosity,class_field,,,,Class field: [instance] ScanpyConfig.verbosity = verbosity,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.verbosity = verbosity,self.verbosity = verbosity,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.plot_suffix = plot_suffix,class_field,,,,Class field: [instance] ScanpyConfig.plot_suffix = plot_suffix,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.plot_suffix = plot_suffix,self.plot_suffix = plot_suffix,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.file_format_data = file_format_data,class_field,,,,Class field: [instance] ScanpyConfig.file_format_data = file_format_data,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.file_format_data = file_format_data,self.file_format_data = file_format_data,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.file_format_figs = file_format_figs,class_field,,,,Class field: [instance] ScanpyConfig.file_format_figs = file_format_figs,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.file_format_figs = file_format_figs,self.file_format_figs = file_format_figs,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.autosave = autosave,class_field,,,,Class field: [instance] ScanpyConfig.autosave = autosave,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.autosave = autosave,self.autosave = autosave,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.autoshow = autoshow,class_field,,,,Class field: [instance] ScanpyConfig.autoshow = autoshow,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.autoshow = autoshow,self.autoshow = autoshow,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.writedir = writedir,class_field,,,,Class field: [instance] ScanpyConfig.writedir = writedir,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.writedir = writedir,self.writedir = writedir,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.cachedir = cachedir,class_field,,,,Class field: [instance] ScanpyConfig.cachedir = cachedir,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.cachedir = cachedir,self.cachedir = cachedir,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.datasetdir = datasetdir,class_field,,,,Class field: [instance] ScanpyConfig.datasetdir = datasetdir,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.datasetdir = datasetdir,self.datasetdir = datasetdir,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.figdir = figdir,class_field,,,,Class field: [instance] ScanpyConfig.figdir = figdir,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.figdir = figdir,self.figdir = figdir,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.cache_compression = cache_compression,class_field,,,,Class field: [instance] ScanpyConfig.cache_compression = cache_compression,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.cache_compression = cache_compression,self.cache_compression = cache_compression,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.max_memory = max_memory,class_field,,,,Class field: [instance] ScanpyConfig.max_memory = max_memory,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.max_memory = max_memory,self.max_memory = max_memory,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.n_jobs = n_jobs,class_field,,,,Class field: [instance] ScanpyConfig.n_jobs = n_jobs,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.n_jobs = n_jobs,self.n_jobs = n_jobs,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.categories_to_ignore = categories_to_ignore,class_field,,,,Class field: [instance] ScanpyConfig.categories_to_ignore = categories_to_ignore,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.categories_to_ignore = categories_to_ignore,self.categories_to_ignore = categories_to_ignore,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig._frameon = _frameon,class_field,,,,Class field: [instance] ScanpyConfig._frameon = _frameon,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self._frameon = _frameon,self._frameon = _frameon,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig._vector_friendly = _vector_friendly,class_field,,,,Class field: [instance] ScanpyConfig._vector_friendly = _vector_friendly,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self._vector_friendly = _vector_friendly,self._vector_friendly = _vector_friendly,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig._low_resolution_warning = _low_resolution_warning,class_field,,,,Class field: [instance] ScanpyConfig._low_resolution_warning = _low_resolution_warning,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self._low_resolution_warning = _low_resolution_warning,self._low_resolution_warning = _low_resolution_warning,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig._start = time(),class_field,,,,Class field: [instance] ScanpyConfig._start = time(),scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self._start = time(),self._start = time(),,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig._previous_time = _start,class_field,,,,Class field: [instance] ScanpyConfig._previous_time = _start,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self._previous_time = self._start,self._previous_time = self._start,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig._previous_memory_usage = -1,class_field,,,,Class field: [instance] ScanpyConfig._previous_memory_usage = -1,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self._previous_memory_usage = -1,self._previous_memory_usage = -1,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.N_PCS = n_pcs,class_field,,,,Class field: [instance] ScanpyConfig.N_PCS = n_pcs,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.N_PCS = n_pcs,self.N_PCS = n_pcs,,,,,
scverse_scanpy_1.10.1,_settings.py,python,"Verbosity.__eq__(self, other: Verbosity | int | str) -> bool",class_method,,,,"Class method: Verbosity.__eq__(self, other: Verbosity | int | str) -> bool",scverse,scanpy,1.10.1,,,,,,,,,Verbosity,__eq__,"(self, other: Verbosity | int | str)",,,bool,,,,
scverse_scanpy_1.10.1,_settings.py,python,[property] Verbosity.level(self) -> int,class_method,,,,Class method: [property] Verbosity.level(self) -> int,scverse,scanpy,1.10.1,,,,,,,,,Verbosity,level,(self),,,int,property,,,
scverse_scanpy_1.10.1,_settings.py,python,"[contextmanager] Verbosity.override(
        self, verbosity: Verbosity | str | int
    ) -> Generator[Verbosity, None, None]",class_method,,,,"Class method: [contextmanager] Verbosity.override(
        self, verbosity: Verbosity | str | int
    ) -> Generator[Verbosity, None, None]",scverse,scanpy,1.10.1,,,,,,,,,Verbosity,override,"(
        self, verbosity: Verbosity | str | int
    )",,,"Generator[Verbosity, None, None]",contextmanager,,,
scverse_scanpy_1.10.1,_settings.py,python,"ScanpyConfig.__init__(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",class_method,,,,"Class method: ScanpyConfig.__init__(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.verbosity(self) -> Verbosity,class_method,,,,Class method: [property] ScanpyConfig.verbosity(self) -> Verbosity,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,verbosity,(self),,,Verbosity,property,,,
scverse_scanpy_1.10.1,_settings.py,python,"[verbosity.setter] ScanpyConfig.verbosity(self, verbosity: Verbosity | int | str)",class_method,,,,"Class method: [verbosity.setter] ScanpyConfig.verbosity(self, verbosity: Verbosity | int | str)",scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,verbosity,"(self, verbosity: Verbosity | int | str)",,,,verbosity.setter,,,
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.plot_suffix(self) -> str,class_method,,,,Class method: [property] ScanpyConfig.plot_suffix(self) -> str,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,plot_suffix,(self),,,str,property,,,
scverse_scanpy_1.10.1,_settings.py,python,"[plot_suffix.setter] ScanpyConfig.plot_suffix(self, plot_suffix: str)",class_method,,,,"Class method: [plot_suffix.setter] ScanpyConfig.plot_suffix(self, plot_suffix: str)",scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,plot_suffix,"(self, plot_suffix: str)",,,,plot_suffix.setter,,,
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.file_format_data(self) -> str,class_method,,,,Class method: [property] ScanpyConfig.file_format_data(self) -> str,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,file_format_data,(self),,,str,property,,,
scverse_scanpy_1.10.1,_settings.py,python,"[file_format_data.setter] ScanpyConfig.file_format_data(self, file_format: str)",class_method,,,,"Class method: [file_format_data.setter] ScanpyConfig.file_format_data(self, file_format: str)",scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,file_format_data,"(self, file_format: str)",,,,file_format_data.setter,,,
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.file_format_figs(self) -> str,class_method,,,,Class method: [property] ScanpyConfig.file_format_figs(self) -> str,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,file_format_figs,(self),,,str,property,,,
scverse_scanpy_1.10.1,_settings.py,python,"[file_format_figs.setter] ScanpyConfig.file_format_figs(self, figure_format: str)",class_method,,,,"Class method: [file_format_figs.setter] ScanpyConfig.file_format_figs(self, figure_format: str)",scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,file_format_figs,"(self, figure_format: str)",,,,file_format_figs.setter,,,
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.autosave(self) -> bool,class_method,,,,Class method: [property] ScanpyConfig.autosave(self) -> bool,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,autosave,(self),,,bool,property,,,
scverse_scanpy_1.10.1,_settings.py,python,"[autosave.setter] ScanpyConfig.autosave(self, autosave: bool)",class_method,,,,"Class method: [autosave.setter] ScanpyConfig.autosave(self, autosave: bool)",scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,autosave,"(self, autosave: bool)",,,,autosave.setter,,,
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.autoshow(self) -> bool,class_method,,,,Class method: [property] ScanpyConfig.autoshow(self) -> bool,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,autoshow,(self),,,bool,property,,,
scverse_scanpy_1.10.1,_settings.py,python,"[autoshow.setter] ScanpyConfig.autoshow(self, autoshow: bool)",class_method,,,,"Class method: [autoshow.setter] ScanpyConfig.autoshow(self, autoshow: bool)",scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,autoshow,"(self, autoshow: bool)",,,,autoshow.setter,,,
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.writedir(self) -> Path,class_method,,,,Class method: [property] ScanpyConfig.writedir(self) -> Path,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,writedir,(self),,,Path,property,,,
scverse_scanpy_1.10.1,_settings.py,python,"[writedir.setter] ScanpyConfig.writedir(self, writedir: Path | str)",class_method,,,,"Class method: [writedir.setter] ScanpyConfig.writedir(self, writedir: Path | str)",scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,writedir,"(self, writedir: Path | str)",,,,writedir.setter,,,
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.cachedir(self) -> Path,class_method,,,,Class method: [property] ScanpyConfig.cachedir(self) -> Path,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,cachedir,(self),,,Path,property,,,
scverse_scanpy_1.10.1,_settings.py,python,"[cachedir.setter] ScanpyConfig.cachedir(self, cachedir: Path | str)",class_method,,,,"Class method: [cachedir.setter] ScanpyConfig.cachedir(self, cachedir: Path | str)",scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,cachedir,"(self, cachedir: Path | str)",,,,cachedir.setter,,,
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.datasetdir(self) -> Path,class_method,,,,Class method: [property] ScanpyConfig.datasetdir(self) -> Path,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,datasetdir,(self),,,Path,property,,,
scverse_scanpy_1.10.1,_settings.py,python,"[datasetdir.setter] ScanpyConfig.datasetdir(self, datasetdir: Path | str)",class_method,,,,"Class method: [datasetdir.setter] ScanpyConfig.datasetdir(self, datasetdir: Path | str)",scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,datasetdir,"(self, datasetdir: Path | str)",,,,datasetdir.setter,,,
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.figdir(self) -> Path,class_method,,,,Class method: [property] ScanpyConfig.figdir(self) -> Path,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,figdir,(self),,,Path,property,,,
scverse_scanpy_1.10.1,_settings.py,python,"[figdir.setter] ScanpyConfig.figdir(self, figdir: Path | str)",class_method,,,,"Class method: [figdir.setter] ScanpyConfig.figdir(self, figdir: Path | str)",scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,figdir,"(self, figdir: Path | str)",,,,figdir.setter,,,
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.cache_compression(self) -> str | None,class_method,,,,Class method: [property] ScanpyConfig.cache_compression(self) -> str | None,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,cache_compression,(self),,,str | None,property,,,
scverse_scanpy_1.10.1,_settings.py,python,"[cache_compression.setter] ScanpyConfig.cache_compression(self, cache_compression: str | None)",class_method,,,,"Class method: [cache_compression.setter] ScanpyConfig.cache_compression(self, cache_compression: str | None)",scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,cache_compression,"(self, cache_compression: str | None)",,,,cache_compression.setter,,,
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.max_memory(self) -> int | float,class_method,,,,Class method: [property] ScanpyConfig.max_memory(self) -> int | float,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,max_memory,(self),,,int | float,property,,,
scverse_scanpy_1.10.1,_settings.py,python,"[max_memory.setter] ScanpyConfig.max_memory(self, max_memory: int | float)",class_method,,,,"Class method: [max_memory.setter] ScanpyConfig.max_memory(self, max_memory: int | float)",scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,max_memory,"(self, max_memory: int | float)",,,,max_memory.setter,,,
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.n_jobs(self) -> int,class_method,,,,Class method: [property] ScanpyConfig.n_jobs(self) -> int,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,n_jobs,(self),,,int,property,,,
scverse_scanpy_1.10.1,_settings.py,python,"[n_jobs.setter] ScanpyConfig.n_jobs(self, n_jobs: int)",class_method,,,,"Class method: [n_jobs.setter] ScanpyConfig.n_jobs(self, n_jobs: int)",scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,n_jobs,"(self, n_jobs: int)",,,,n_jobs.setter,,,
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.logpath(self) -> Path | None,class_method,,,,Class method: [property] ScanpyConfig.logpath(self) -> Path | None,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,logpath,(self),,,Path | None,property,,,
scverse_scanpy_1.10.1,_settings.py,python,"[logpath.setter] ScanpyConfig.logpath(self, logpath: Path | str | None)",class_method,,,,"Class method: [logpath.setter] ScanpyConfig.logpath(self, logpath: Path | str | None)",scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,logpath,"(self, logpath: Path | str | None)",,,,logpath.setter,,,
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.logfile(self) -> TextIO,class_method,,,,Class method: [property] ScanpyConfig.logfile(self) -> TextIO,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,logfile,(self),,,TextIO,property,,,
scverse_scanpy_1.10.1,_settings.py,python,"[logfile.setter] ScanpyConfig.logfile(self, logfile: Path | str | TextIO | None)",class_method,,,,"Class method: [logfile.setter] ScanpyConfig.logfile(self, logfile: Path | str | TextIO | None)",scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,logfile,"(self, logfile: Path | str | TextIO | None)",,,,logfile.setter,,,
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.categories_to_ignore(self) -> list[str],class_method,,,,Class method: [property] ScanpyConfig.categories_to_ignore(self) -> list[str],scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,categories_to_ignore,(self),,,list[str],property,,,
scverse_scanpy_1.10.1,_settings.py,python,"[categories_to_ignore.setter] ScanpyConfig.categories_to_ignore(self, categories_to_ignore: Iterable[str])",class_method,,,,"Class method: [categories_to_ignore.setter] ScanpyConfig.categories_to_ignore(self, categories_to_ignore: Iterable[str])",scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,categories_to_ignore,"(self, categories_to_ignore: Iterable[str])",,,,categories_to_ignore.setter,,,
scverse_scanpy_1.10.1,_settings.py,python,"[old_positionals(
        ""scanpy"",
        ""dpi"",
        ""dpi_save"",
        ""frameon"",
        ""vector_friendly"",
        ""fontsize"",
        ""figsize"",
        ""color_map"",
        ""format"",
        ""facecolor"",
        ""transparent"",
        ""ipython_format"",
    )] ScanpyConfig.set_figure_params(
        self,
        *,
        scanpy: bool = True,
        dpi: int = 80,
        dpi_save: int = 150,
        frameon: bool = True,
        vector_friendly: bool = True,
        fontsize: int = 14,
        figsize: int | None = None,
        color_map: str | None = None,
        format: _Format = ""pdf"",
        facecolor: str | None = None,
        transparent: bool = False,
        ipython_format: str = ""png2x"",
    ) -> None",class_method,,,,"Class method: [old_positionals(
        ""scanpy"",
        ""dpi"",
        ""dpi_save"",
        ""frameon"",
        ""vector_friendly"",
        ""fontsize"",
        ""figsize"",
        ""color_map"",
        ""format"",
        ""facecolor"",
        ""transparent"",
        ""ipython_format"",
    )] ScanpyConfig.set_figure_params(
        self,
        *,
        scanpy: bool = True,
        dpi: int = 80,
        dpi_save: int = 150,
        frameon: bool = True,
        vector_friendly: bool = True,
        fontsize: int = 14,
        figsize: int | None = None,
        color_map: str | None = None,
        format: _Format = ""pdf"",
        facecolor: str | None = None,
        transparent: bool = False,
        ipython_format: str = ""png2x"",
    ) -> None",scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,set_figure_params,"(
        self,
        *,
        scanpy: bool = True,
        dpi: int = 80,
        dpi_save: int = 150,
        frameon: bool = True,
        vector_friendly: bool = True,
        fontsize: int = 14,
        figsize: int | None = None,
        color_map: str | None = None,
        format: _Format = ""pdf"",
        facecolor: str | None = None,
        transparent: bool = False,
        ipython_format: str = ""png2x"",
    )",,,None,"old_positionals(
        ""scanpy"",
        ""dpi"",
        ""dpi_save"",
        ""frameon"",
        ""vector_friendly"",
        ""fontsize"",
        ""figsize"",
        ""color_map"",
        ""format"",
        ""facecolor"",
        ""transparent"",
        ""ipython_format"",
    )",,,
scverse_scanpy_1.10.1,_settings.py,python,[staticmethod] ScanpyConfig._is_run_from_ipython(),class_method,,,,Class method: [staticmethod] ScanpyConfig._is_run_from_ipython(),scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,_is_run_from_ipython,(),,,,staticmethod,,,
scverse_scanpy_1.10.1,_settings.py,python,ScanpyConfig.__str__(self) -> str,class_method,,,,Class method: ScanpyConfig.__str__(self) -> str,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,__str__,(self),,,str,,,,
scverse_scanpy_1.10.1,_settings.py,python,Verbosity(IntEnum),class,,,,Class: Verbosity(IntEnum),scverse,scanpy,1.10.1,,,,,,,,,Verbosity,,,,,,,(IntEnum),,
scverse_scanpy_1.10.1,_settings.py,python,ScanpyConfig,class,,,,Class: ScanpyConfig,scverse,scanpy,1.10.1,,,,,,,,,ScanpyConfig,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,"_type_check(var: Any, varname: str, types: type | tuple[type, ...])",function,_type_check,"(var: Any, varname: str, types: type | tuple[type, ...])",,"Function: _type_check(var: Any, varname: str, types: type | tuple[type, ...])",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,"_VERBOSITY_TO_LOGLEVEL = {
    ""error"": ""ERROR"",
    ""warning"": ""WARNING"",
    ""info"": ""INFO"",
    ""hint"": ""HINT"",
    ""debug"": ""DEBUG"",
}",constant,,,,"Constant: _VERBOSITY_TO_LOGLEVEL = {
    ""error"": ""ERROR"",
    ""warning"": ""WARNING"",
    ""info"": ""INFO"",
    ""hint"": ""HINT"",
    ""debug"": ""DEBUG"",
}",scverse,scanpy,1.10.1,,,,,"_VERBOSITY_TO_LOGLEVEL = {
    ""error"": ""ERROR"",
    ""warning"": ""WARNING"",
    ""info"": ""INFO"",
    ""hint"": ""HINT"",
    ""debug"": ""DEBUG"",
}",_VERBOSITY_TO_LOGLEVEL,"{
    ""error"": ""ERROR"",
    ""warning"": ""WARNING"",
    ""info"": ""INFO"",
    ""hint"": ""HINT"",
    ""debug"": ""DEBUG"",
}",,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,"_Format = Union[
    Literal[""png"", ""jpg"", ""tif"", ""tiff""],
    Literal[""pdf"", ""ps"", ""eps"", ""svg"", ""svgz"", ""pgf""],
    Literal[""raw"", ""rgba""],
]",constant,,,,"Constant: _Format = Union[
    Literal[""png"", ""jpg"", ""tif"", ""tiff""],
    Literal[""pdf"", ""ps"", ""eps"", ""svg"", ""svgz"", ""pgf""],
    Literal[""raw"", ""rgba""],
]",scverse,scanpy,1.10.1,,,,,"_Format = Union[
    Literal[""png"", ""jpg"", ""tif"", ""tiff""],
    Literal[""pdf"", ""ps"", ""eps"", ""svg"", ""svgz"", ""pgf""],
    Literal[""raw"", ""rgba""],
]",_Format,"Union[
    Literal[""png"", ""jpg"", ""tif"", ""tiff""],
    Literal[""pdf"", ""ps"", ""eps"", ""svg"", ""svgz"", ""pgf""],
    Literal[""raw"", ""rgba""],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,settings = ScanpyConfig(),constant,,,,Constant: settings = ScanpyConfig(),scverse,scanpy,1.10.1,,,,,settings = ScanpyConfig(),settings,ScanpyConfig(),,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,inspect,import,,,,Import: inspect,scverse,scanpy,1.10.1,import inspect,inspect,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,sys,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,contextmanager from contextlib,import,,,,Import: contextmanager from contextlib,scverse,scanpy,1.10.1,from contextlib import contextmanager,contextmanager,contextlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,IntEnum from enum,import,,,,Import: IntEnum from enum,scverse,scanpy,1.10.1,from enum import IntEnum,IntEnum,enum,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,getLevelName from logging,import,,,,Import: getLevelName from logging,scverse,scanpy,1.10.1,from logging import getLevelName,getLevelName,logging,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,time from time,import,,,,Import: time from time,scverse,scanpy,1.10.1,from time import time,time,time,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, TextIO, Union",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, TextIO, Union",Any,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, TextIO, Union",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,TextIO from typing,import,,,,Import: TextIO from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, TextIO, Union",TextIO,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,Union from typing,import,,,,Import: Union from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, TextIO, Union",Union,typing,,,,,,,,,,,,,,,
,_settings.py,python,,,,,,File: scanpy,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_settings.py,python,,,,,,Directory: scanpy\_settings.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,set_figure_params = settings.set_figure_params,constant,,,,Constant: set_figure_params = settings.set_figure_params,scverse,scanpy,1.10.1,,,,,set_figure_params = settings.set_figure_params,set_figure_params,settings.set_figure_params,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""__version__"",
    ""AnnData"",
    ""concat"",
    ""read_csv"",
    ""read_excel"",
    ""read_h5ad"",
    ""read_hdf"",
    ""read_loom"",
    ""read_mtx"",
    ""read_text"",
    ""read_umi_tools"",
    ""read"",
    ""read_10x_h5"",
    ""read_10x_mtx"",
    ""read_visium"",
    ""write"",
    ""datasets"",
    ""experimental"",
    ""external"",
    ""get"",
    ""logging"",
    ""metrics"",
    ""queries"",
    ""pl"",
    ""pp"",
    ""tl"",
    ""Verbosity"",
    ""settings"",
    ""Neighbors"",
    ""set_figure_params"",
]",constant,,,,"Constant: __all__ = [
    ""__version__"",
    ""AnnData"",
    ""concat"",
    ""read_csv"",
    ""read_excel"",
    ""read_h5ad"",
    ""read_hdf"",
    ""read_loom"",
    ""read_mtx"",
    ""read_text"",
    ""read_umi_tools"",
    ""read"",
    ""read_10x_h5"",
    ""read_10x_mtx"",
    ""read_visium"",
    ""write"",
    ""datasets"",
    ""experimental"",
    ""external"",
    ""get"",
    ""logging"",
    ""metrics"",
    ""queries"",
    ""pl"",
    ""pp"",
    ""tl"",
    ""Verbosity"",
    ""settings"",
    ""Neighbors"",
    ""set_figure_params"",
]",scverse,scanpy,1.10.1,,,,,"__all__ = [
    ""__version__"",
    ""AnnData"",
    ""concat"",
    ""read_csv"",
    ""read_excel"",
    ""read_h5ad"",
    ""read_hdf"",
    ""read_loom"",
    ""read_mtx"",
    ""read_text"",
    ""read_umi_tools"",
    ""read"",
    ""read_10x_h5"",
    ""read_10x_mtx"",
    ""read_visium"",
    ""write"",
    ""datasets"",
    ""experimental"",
    ""external"",
    ""get"",
    ""logging"",
    ""metrics"",
    ""queries"",
    ""pl"",
    ""pp"",
    ""tl"",
    ""Verbosity"",
    ""settings"",
    ""Neighbors"",
    ""set_figure_params"",
]",__all__,"[
    ""__version__"",
    ""AnnData"",
    ""concat"",
    ""read_csv"",
    ""read_excel"",
    ""read_h5ad"",
    ""read_hdf"",
    ""read_loom"",
    ""read_mtx"",
    ""read_text"",
    ""read_umi_tools"",
    ""read"",
    ""read_10x_h5"",
    ""read_10x_mtx"",
    ""read_visium"",
    ""write"",
    ""datasets"",
    ""experimental"",
    ""external"",
    ""get"",
    ""logging"",
    ""metrics"",
    ""queries"",
    ""pl"",
    ""pp"",
    ""tl"",
    ""Verbosity"",
    ""settings"",
    ""Neighbors"",
    ""set_figure_params"",
]",,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,sys,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    concat,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
    read_umi_tools,
)",AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,concat from anndata,import,,,,Import: concat from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    concat,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
    read_umi_tools,
)",concat,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,read_csv from anndata,import,,,,Import: read_csv from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    concat,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
    read_umi_tools,
)",read_csv,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,read_excel from anndata,import,,,,Import: read_excel from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    concat,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
    read_umi_tools,
)",read_excel,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,read_h5ad from anndata,import,,,,Import: read_h5ad from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    concat,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
    read_umi_tools,
)",read_h5ad,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,read_hdf from anndata,import,,,,Import: read_hdf from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    concat,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
    read_umi_tools,
)",read_hdf,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,read_loom from anndata,import,,,,Import: read_loom from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    concat,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
    read_umi_tools,
)",read_loom,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,read_mtx from anndata,import,,,,Import: read_mtx from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    concat,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
    read_umi_tools,
)",read_mtx,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,read_text from anndata,import,,,,Import: read_text from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    concat,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
    read_umi_tools,
)",read_text,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,read_umi_tools from anndata,import,,,,Import: read_umi_tools from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    concat,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
    read_umi_tools,
)",read_umi_tools,anndata,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__main__.py,python,,,,,,File: scanpy,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__main__.py,python,,,,,,Directory: scanpy\__main__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,krumsiek11() -> ad.AnnData,function,krumsiek11,(),ad.AnnData,Function: krumsiek11() -> ad.AnnData,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,toggleswitch() -> ad.AnnData,function,toggleswitch,(),ad.AnnData,Function: toggleswitch() -> ad.AnnData,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,"_download_visium_dataset(
    sample_id: str,
    spaceranger_version: str,
    base_dir: Path | None = None,
    download_image: bool = False,
)",function,_download_visium_dataset,"(
    sample_id: str,
    spaceranger_version: str,
    base_dir: Path | None = None,
    download_image: bool = False,
)",,"Function: _download_visium_dataset(
    sample_id: str,
    spaceranger_version: str,
    base_dir: Path | None = None,
    download_image: bool = False,
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,HERE = Path(__file__).parent,constant,,,,Constant: HERE = Path(__file__).parent,scverse,scanpy,1.10.1,,,,,HERE = Path(__file__).parent,HERE,Path(__file__).parent,,,,,,,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,anndata,import,,,,Import: anndata,scverse,scanpy,1.10.1,import anndata as ad,anndata,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
,_datasets.py,python,,,,,,File: scanpy\datasets,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_datasets.py,python,,,,,,Directory: scanpy\datasets\_datasets.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,_filter_boring(dataframe: pd.DataFrame) -> pd.DataFrame,function,_filter_boring,(dataframe: pd.DataFrame),pd.DataFrame,Function: _filter_boring(dataframe: pd.DataFrame) -> pd.DataFrame,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,sniff_url(accession: str),function,sniff_url,(accession: str),,Function: sniff_url(accession: str),scverse,scanpy,1.10.1,,,,,,,,"# Note that data is downloaded from gxa/sc/experiment, not experiments",,,,,,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,read_mtx_from_stream(stream: BinaryIO) -> sparse.csr_matrix,function,read_mtx_from_stream,(stream: BinaryIO),sparse.csr_matrix,Function: read_mtx_from_stream(stream: BinaryIO) -> sparse.csr_matrix,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,read_expression_from_archive(archive: ZipFile) -> anndata.AnnData,function,read_expression_from_archive,(archive: ZipFile),anndata.AnnData,Function: read_expression_from_archive(archive: ZipFile) -> anndata.AnnData,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,"ebi_expression_atlas(
    accession: str, *, filter_boring: bool = False
) -> anndata.AnnData",function,ebi_expression_atlas,"(
    accession: str, *, filter_boring: bool = False
)",anndata.AnnData,"Function: ebi_expression_atlas(
    accession: str, *, filter_boring: bool = False
) -> anndata.AnnData",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,BinaryIO from typing,import,,,,Import: BinaryIO from typing,scverse,scanpy,1.10.1,from typing import BinaryIO,BinaryIO,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,ZipFile from zipfile,import,,,,Import: ZipFile from zipfile,scverse,scanpy,1.10.1,from zipfile import ZipFile,ZipFile,zipfile,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,anndata,import,,,,Import: anndata,scverse,scanpy,1.10.1,import anndata,anndata,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,HTTPError from urllib.error,local_import,,,,Import: HTTPError from urllib.error,scverse,scanpy,1.10.1,from urllib.error import HTTPError,HTTPError,urllib.error,urllib.error,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,urlopen from urllib.request,local_import,,,,Import: urlopen from urllib.request,scverse,scanpy,1.10.1,from urllib.request import urlopen,urlopen,urllib.request,urllib.request,,,,,,,,,,,,,,
,_ebi_expression_atlas.py,python,,,,,,File: scanpy\datasets,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_ebi_expression_atlas.py,python,,,,,,Directory: scanpy\datasets\_ebi_expression_atlas.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,check_datasetdir_exists(f),function,check_datasetdir_exists,(f),,Function: check_datasetdir_exists(f),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,filter_oldformatwarning(f),function,filter_oldformatwarning,(f),,Function: filter_oldformatwarning(f),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,wraps from functools,import,,,,Import: wraps from functools,scverse,scanpy,1.10.1,from functools import wraps,wraps,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,anndata,import,,,,Import: anndata,scverse,scanpy,1.10.1,import anndata as ad,anndata,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,version,packaging,,,,,,,,,,,,,,,
,_utils.py,python,,,,,,File: scanpy\datasets,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_utils.py,python,,,,,,Directory: scanpy\datasets\_utils.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""blobs"",
    ""burczynski06"",
    ""krumsiek11"",
    ""moignard15"",
    ""paul15"",
    ""pbmc3k"",
    ""pbmc3k_processed"",
    ""pbmc68k_reduced"",
    ""toggleswitch"",
    ""visium_sge"",
    ""ebi_expression_atlas"",
]",constant,,,,"Constant: __all__ = [
    ""blobs"",
    ""burczynski06"",
    ""krumsiek11"",
    ""moignard15"",
    ""paul15"",
    ""pbmc3k"",
    ""pbmc3k_processed"",
    ""pbmc68k_reduced"",
    ""toggleswitch"",
    ""visium_sge"",
    ""ebi_expression_atlas"",
]",scverse,scanpy,1.10.1,,,,,"__all__ = [
    ""blobs"",
    ""burczynski06"",
    ""krumsiek11"",
    ""moignard15"",
    ""paul15"",
    ""pbmc3k"",
    ""pbmc3k_processed"",
    ""pbmc68k_reduced"",
    ""toggleswitch"",
    ""visium_sge"",
    ""ebi_expression_atlas"",
]",__all__,"[
    ""blobs"",
    ""burczynski06"",
    ""krumsiek11"",
    ""moignard15"",
    ""paul15"",
    ""pbmc3k"",
    ""pbmc3k_processed"",
    ""pbmc68k_reduced"",
    ""toggleswitch"",
    ""visium_sge"",
    ""ebi_expression_atlas"",
]",,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\datasets,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\datasets\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_adata = """"""\
adata
    The annotated data matrix of shape `n_obs` × `n_vars`.
    Rows correspond to cells and columns to genes.
""""""",constant,,,,"Constant: doc_adata = """"""\
adata
    The annotated data matrix of shape `n_obs` × `n_vars`.
    Rows correspond to cells and columns to genes.
""""""",scverse,scanpy,1.10.1,,,,,"doc_adata = """"""\
adata
    The annotated data matrix of shape `n_obs` × `n_vars`.
    Rows correspond to cells and columns to genes.
""""""",doc_adata,"""""""\
adata
    The annotated data matrix of shape `n_obs` × `n_vars`.
    Rows correspond to cells and columns to genes.
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_dist_params = """"""\
theta
    The negative binomial overdispersion parameter `theta` for Pearson residuals.
    Higher values correspond to less overdispersion \
    (`var = mean + mean^2/theta`), and `theta=np.Inf` corresponds to a Poisson model.
clip
    Determines if and how residuals are clipped:

    * If `None`, residuals are clipped to the interval \
    `[-sqrt(n_obs), sqrt(n_obs)]`, where `n_obs` is the number of cells in the dataset (default behavior).
    * If any scalar `c`, residuals are clipped to the interval `[-c, c]`. Set \
    `clip=np.Inf` for no clipping.
""""""",constant,,,,"Constant: doc_dist_params = """"""\
theta
    The negative binomial overdispersion parameter `theta` for Pearson residuals.
    Higher values correspond to less overdispersion \
    (`var = mean + mean^2/theta`), and `theta=np.Inf` corresponds to a Poisson model.
clip
    Determines if and how residuals are clipped:

    * If `None`, residuals are clipped to the interval \
    `[-sqrt(n_obs), sqrt(n_obs)]`, where `n_obs` is the number of cells in the dataset (default behavior).
    * If any scalar `c`, residuals are clipped to the interval `[-c, c]`. Set \
    `clip=np.Inf` for no clipping.
""""""",scverse,scanpy,1.10.1,,,,,"doc_dist_params = """"""\
theta
    The negative binomial overdispersion parameter `theta` for Pearson residuals.
    Higher values correspond to less overdispersion \
    (`var = mean + mean^2/theta`), and `theta=np.Inf` corresponds to a Poisson model.
clip
    Determines if and how residuals are clipped:

    * If `None`, residuals are clipped to the interval \
    `[-sqrt(n_obs), sqrt(n_obs)]`, where `n_obs` is the number of cells in the dataset (default behavior).
    * If any scalar `c`, residuals are clipped to the interval `[-c, c]`. Set \
    `clip=np.Inf` for no clipping.
""""""",doc_dist_params,"""""""\
theta
    The negative binomial overdispersion parameter `theta` for Pearson residuals.
    Higher values correspond to less overdispersion \
    (`var = mean + mean^2/theta`), and `theta=np.Inf` corresponds to a Poisson model.
clip
    Determines if and how residuals are clipped:

    * If `None`, residuals are clipped to the interval \
    `[-sqrt(n_obs), sqrt(n_obs)]`, where `n_obs` is the number of cells in the dataset (default behavior).
    * If any scalar `c`, residuals are clipped to the interval `[-c, c]`. Set \
    `clip=np.Inf` for no clipping.
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_check_values = """"""\
check_values
    If `True`, checks if counts in selected layer are integers as expected by this
    function, and return a warning if non-integers are found. Otherwise, proceed
    without checking. Setting this to `False` can speed up code for large datasets.
""""""",constant,,,,"Constant: doc_check_values = """"""\
check_values
    If `True`, checks if counts in selected layer are integers as expected by this
    function, and return a warning if non-integers are found. Otherwise, proceed
    without checking. Setting this to `False` can speed up code for large datasets.
""""""",scverse,scanpy,1.10.1,,,,,"doc_check_values = """"""\
check_values
    If `True`, checks if counts in selected layer are integers as expected by this
    function, and return a warning if non-integers are found. Otherwise, proceed
    without checking. Setting this to `False` can speed up code for large datasets.
""""""",doc_check_values,"""""""\
check_values
    If `True`, checks if counts in selected layer are integers as expected by this
    function, and return a warning if non-integers are found. Otherwise, proceed
    without checking. Setting this to `False` can speed up code for large datasets.
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_layer = """"""\
layer
    Layer to use as input instead of `X`. If `None`, `X` is used.
""""""",constant,,,,"Constant: doc_layer = """"""\
layer
    Layer to use as input instead of `X`. If `None`, `X` is used.
""""""",scverse,scanpy,1.10.1,,,,,"doc_layer = """"""\
layer
    Layer to use as input instead of `X`. If `None`, `X` is used.
""""""",doc_layer,"""""""\
layer
    Layer to use as input instead of `X`. If `None`, `X` is used.
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_subset = """"""\
subset
    Inplace subset to highly-variable genes if `True` otherwise merely indicate
    highly variable genes.
""""""",constant,,,,"Constant: doc_subset = """"""\
subset
    Inplace subset to highly-variable genes if `True` otherwise merely indicate
    highly variable genes.
""""""",scverse,scanpy,1.10.1,,,,,"doc_subset = """"""\
subset
    Inplace subset to highly-variable genes if `True` otherwise merely indicate
    highly variable genes.
""""""",doc_subset,"""""""\
subset
    Inplace subset to highly-variable genes if `True` otherwise merely indicate
    highly variable genes.
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_genes_batch_chunk = """"""\
n_top_genes
    Number of highly-variable genes to keep. Mandatory if `flavor='seurat_v3'` or
    `flavor='pearson_residuals'`.
batch_key
    If specified, highly-variable genes are selected within each batch separately
    and merged. This simple process avoids the selection of batch-specific genes
    and acts as a lightweight batch correction method. Genes are first sorted by
    how many batches they are a HVG. If `flavor='pearson_residuals'`, ties are
    broken by the median rank (across batches) based on within-batch residual
    variance.
chunksize
    If `flavor='pearson_residuals'`, this dertermines how many genes are processed at
    once while computing the residual variance. Choosing a smaller value will reduce
    the required memory.
""""""",constant,,,,"Constant: doc_genes_batch_chunk = """"""\
n_top_genes
    Number of highly-variable genes to keep. Mandatory if `flavor='seurat_v3'` or
    `flavor='pearson_residuals'`.
batch_key
    If specified, highly-variable genes are selected within each batch separately
    and merged. This simple process avoids the selection of batch-specific genes
    and acts as a lightweight batch correction method. Genes are first sorted by
    how many batches they are a HVG. If `flavor='pearson_residuals'`, ties are
    broken by the median rank (across batches) based on within-batch residual
    variance.
chunksize
    If `flavor='pearson_residuals'`, this dertermines how many genes are processed at
    once while computing the residual variance. Choosing a smaller value will reduce
    the required memory.
""""""",scverse,scanpy,1.10.1,,,,,"doc_genes_batch_chunk = """"""\
n_top_genes
    Number of highly-variable genes to keep. Mandatory if `flavor='seurat_v3'` or
    `flavor='pearson_residuals'`.
batch_key
    If specified, highly-variable genes are selected within each batch separately
    and merged. This simple process avoids the selection of batch-specific genes
    and acts as a lightweight batch correction method. Genes are first sorted by
    how many batches they are a HVG. If `flavor='pearson_residuals'`, ties are
    broken by the median rank (across batches) based on within-batch residual
    variance.
chunksize
    If `flavor='pearson_residuals'`, this dertermines how many genes are processed at
    once while computing the residual variance. Choosing a smaller value will reduce
    the required memory.
""""""",doc_genes_batch_chunk,"""""""\
n_top_genes
    Number of highly-variable genes to keep. Mandatory if `flavor='seurat_v3'` or
    `flavor='pearson_residuals'`.
batch_key
    If specified, highly-variable genes are selected within each batch separately
    and merged. This simple process avoids the selection of batch-specific genes
    and acts as a lightweight batch correction method. Genes are first sorted by
    how many batches they are a HVG. If `flavor='pearson_residuals'`, ties are
    broken by the median rank (across batches) based on within-batch residual
    variance.
chunksize
    If `flavor='pearson_residuals'`, this dertermines how many genes are processed at
    once while computing the residual variance. Choosing a smaller value will reduce
    the required memory.
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_pca_chunk = """"""\
n_comps
    Number of principal components to compute in the PCA step.
random_state
    Random seed for setting the initial states for the optimization in the PCA step.
kwargs_pca
    Dictionary of further keyword arguments passed on to `scanpy.pp.pca()`.
""""""",constant,,,,"Constant: doc_pca_chunk = """"""\
n_comps
    Number of principal components to compute in the PCA step.
random_state
    Random seed for setting the initial states for the optimization in the PCA step.
kwargs_pca
    Dictionary of further keyword arguments passed on to `scanpy.pp.pca()`.
""""""",scverse,scanpy,1.10.1,,,,,"doc_pca_chunk = """"""\
n_comps
    Number of principal components to compute in the PCA step.
random_state
    Random seed for setting the initial states for the optimization in the PCA step.
kwargs_pca
    Dictionary of further keyword arguments passed on to `scanpy.pp.pca()`.
""""""",doc_pca_chunk,"""""""\
n_comps
    Number of principal components to compute in the PCA step.
random_state
    Random seed for setting the initial states for the optimization in the PCA step.
kwargs_pca
    Dictionary of further keyword arguments passed on to `scanpy.pp.pca()`.
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_inplace = """"""\
inplace
    If `True`, update `adata` with results. Otherwise, return results. See below for
    details of what is returned.
""""""",constant,,,,"Constant: doc_inplace = """"""\
inplace
    If `True`, update `adata` with results. Otherwise, return results. See below for
    details of what is returned.
""""""",scverse,scanpy,1.10.1,,,,,"doc_inplace = """"""\
inplace
    If `True`, update `adata` with results. Otherwise, return results. See below for
    details of what is returned.
""""""",doc_inplace,"""""""\
inplace
    If `True`, update `adata` with results. Otherwise, return results. See below for
    details of what is returned.
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_copy = """"""\
copy
    If `True`, the function runs on a copy of the input object and returns the
    modified copy. Otherwise, the input object is modified direcly. Not compatible
    with `inplace=False`.
""""""",constant,,,,"Constant: doc_copy = """"""\
copy
    If `True`, the function runs on a copy of the input object and returns the
    modified copy. Otherwise, the input object is modified direcly. Not compatible
    with `inplace=False`.
""""""",scverse,scanpy,1.10.1,,,,,"doc_copy = """"""\
copy
    If `True`, the function runs on a copy of the input object and returns the
    modified copy. Otherwise, the input object is modified direcly. Not compatible
    with `inplace=False`.
""""""",doc_copy,"""""""\
copy
    If `True`, the function runs on a copy of the input object and returns the
    modified copy. Otherwise, the input object is modified direcly. Not compatible
    with `inplace=False`.
""""""",,,,,,,,,,,
,_docs.py,python,,,,,,File: scanpy\experimental,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_docs.py,python,,,,,,Directory: scanpy\experimental\_docs.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [""pp""]",constant,,,,"Constant: __all__ = [""pp""]",scverse,scanpy,1.10.1,,,,,"__all__ = [""pp""]",__all__,"[""pp""]",,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\experimental,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\experimental\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_highly_variable_pearson_residuals(
    adata: AnnData,
    *,
    theta: float = 100,
    clip: float | None = None,
    n_top_genes: int = 1000,
    batch_key: str | None = None,
    chunksize: int = 1000,
    check_values: bool = True,
    layer: str | None = None,
    subset: bool = False,
    inplace: bool = True,
) -> pd.DataFrame | None",function,_highly_variable_pearson_residuals,"(
    adata: AnnData,
    *,
    theta: float = 100,
    clip: float | None = None,
    n_top_genes: int = 1000,
    batch_key: str | None = None,
    chunksize: int = 1000,
    check_values: bool = True,
    layer: str | None = None,
    subset: bool = False,
    inplace: bool = True,
)",pd.DataFrame | None,"Function: _highly_variable_pearson_residuals(
    adata: AnnData,
    *,
    theta: float = 100,
    clip: float | None = None,
    n_top_genes: int = 1000,
    batch_key: str | None = None,
    chunksize: int = 1000,
    check_values: bool = True,
    layer: str | None = None,
    subset: bool = False,
    inplace: bool = True,
) -> pd.DataFrame | None",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,partial,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,sqrt from math,import,,,,Import: sqrt from math,scverse,scanpy,1.10.1,from math import sqrt,sqrt,math,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,numba,import,,,,Import: numba,scverse,scanpy,1.10.1,import numba as nb,numba,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,scipy.sparse,import,,,,Import: scipy.sparse,scverse,scanpy,1.10.1,import scipy.sparse as sp_sparse,scipy.sparse,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,logging from scanpy,import,,,,Import: logging from scanpy,scverse,scanpy,1.10.1,from scanpy import logging as logg,logging,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,Verbosity from scanpy._settings,local_import,,,,Import: Verbosity from scanpy._settings,scverse,scanpy,1.10.1,"from scanpy._settings import Verbosity, settings",Verbosity,scanpy._settings,scanpy._settings,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,settings from scanpy._settings,local_import,,,,Import: settings from scanpy._settings,scverse,scanpy,1.10.1,"from scanpy._settings import Verbosity, settings",settings,scanpy._settings,scanpy._settings,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,_doc_params from scanpy._utils,local_import,,,,Import: _doc_params from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import _doc_params, check_nonnegative_integers, view_to_actual",_doc_params,scanpy._utils,scanpy._utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,check_nonnegative_integers from scanpy._utils,local_import,,,,Import: check_nonnegative_integers from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import _doc_params, check_nonnegative_integers, view_to_actual",check_nonnegative_integers,scanpy._utils,scanpy._utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,view_to_actual from scanpy._utils,local_import,,,,Import: view_to_actual from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import _doc_params, check_nonnegative_integers, view_to_actual",view_to_actual,scanpy._utils,scanpy._utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,doc_adata from scanpy.experimental._docs,local_import,,,,Import: doc_adata from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_layer,
)",doc_adata,scanpy.experimental._docs,scanpy.experimental._docs,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,doc_check_values from scanpy.experimental._docs,local_import,,,,Import: doc_check_values from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_layer,
)",doc_check_values,scanpy.experimental._docs,scanpy.experimental._docs,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,doc_dist_params from scanpy.experimental._docs,local_import,,,,Import: doc_dist_params from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_layer,
)",doc_dist_params,scanpy.experimental._docs,scanpy.experimental._docs,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,doc_genes_batch_chunk from scanpy.experimental._docs,local_import,,,,Import: doc_genes_batch_chunk from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_layer,
)",doc_genes_batch_chunk,scanpy.experimental._docs,scanpy.experimental._docs,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,doc_inplace from scanpy.experimental._docs,local_import,,,,Import: doc_inplace from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_layer,
)",doc_inplace,scanpy.experimental._docs,scanpy.experimental._docs,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,doc_layer from scanpy.experimental._docs,local_import,,,,Import: doc_layer from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_layer,
)",doc_layer,scanpy.experimental._docs,scanpy.experimental._docs,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,_get_obs_rep from scanpy.get,local_import,,,,Import: _get_obs_rep from scanpy.get,scverse,scanpy,1.10.1,from scanpy.get import _get_obs_rep,_get_obs_rep,scanpy.get,scanpy.get,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,materialize_as_ndarray from scanpy.preprocessing._distributed,local_import,,,,Import: materialize_as_ndarray from scanpy.preprocessing._distributed,scverse,scanpy,1.10.1,from scanpy.preprocessing._distributed import materialize_as_ndarray,materialize_as_ndarray,scanpy.preprocessing._distributed,scanpy.preprocessing._distributed,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,_get_mean_var from scanpy.preprocessing._utils,local_import,,,,Import: _get_mean_var from scanpy.preprocessing._utils,scverse,scanpy,1.10.1,from scanpy.preprocessing._utils import _get_mean_var,_get_mean_var,scanpy.preprocessing._utils,scanpy.preprocessing._utils,,,,,,,,,,,,,,
,_highly_variable_genes.py,python,,,,,,File: scanpy\experimental\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_highly_variable_genes.py,python,,,,,,Directory: scanpy\experimental\pp\_highly_variable_genes.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,"_pearson_residuals(X, theta, clip, check_values, copy: bool = False)",function,_pearson_residuals,"(X, theta, clip, check_values, copy: bool = False)",,"Function: _pearson_residuals(X, theta, clip, check_values, copy: bool = False)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,MappingProxyType from types,import,,,,Import: MappingProxyType from types,scverse,scanpy,1.10.1,from types import MappingProxyType,MappingProxyType,types,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",Any,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,warn from warnings,import,,,,Import: warn from warnings,scverse,scanpy,1.10.1,from warnings import warn,warn,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import issparse,issparse,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
,_normalization.py,python,,,,,,File: scanpy\experimental\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_normalization.py,python,,,,,,Directory: scanpy\experimental\pp\_normalization.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,experimental from scanpy,import,,,,Import: experimental from scanpy,scverse,scanpy,1.10.1,from scanpy import experimental,experimental,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,_doc_params from scanpy._utils,local_import,,,,Import: _doc_params from scanpy._utils,scverse,scanpy,1.10.1,from scanpy._utils import _doc_params,_doc_params,scanpy._utils,scanpy._utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,doc_adata from scanpy.experimental._docs,local_import,,,,Import: doc_adata from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_pca_chunk,
)",doc_adata,scanpy.experimental._docs,scanpy.experimental._docs,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,doc_check_values from scanpy.experimental._docs,local_import,,,,Import: doc_check_values from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_pca_chunk,
)",doc_check_values,scanpy.experimental._docs,scanpy.experimental._docs,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,doc_dist_params from scanpy.experimental._docs,local_import,,,,Import: doc_dist_params from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_pca_chunk,
)",doc_dist_params,scanpy.experimental._docs,scanpy.experimental._docs,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,doc_genes_batch_chunk from scanpy.experimental._docs,local_import,,,,Import: doc_genes_batch_chunk from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_pca_chunk,
)",doc_genes_batch_chunk,scanpy.experimental._docs,scanpy.experimental._docs,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,doc_inplace from scanpy.experimental._docs,local_import,,,,Import: doc_inplace from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_pca_chunk,
)",doc_inplace,scanpy.experimental._docs,scanpy.experimental._docs,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,doc_pca_chunk from scanpy.experimental._docs,local_import,,,,Import: doc_pca_chunk from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_pca_chunk,
)",doc_pca_chunk,scanpy.experimental._docs,scanpy.experimental._docs,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,pca from scanpy.preprocessing,local_import,,,,Import: pca from scanpy.preprocessing,scverse,scanpy,1.10.1,from scanpy.preprocessing import pca,pca,scanpy.preprocessing,scanpy.preprocessing,,,,,,,,,,,,,,
,_recipes.py,python,,,,,,File: scanpy\experimental\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_recipes.py,python,,,,,,Directory: scanpy\experimental\pp\_recipes.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""highly_variable_genes"",
    ""normalize_pearson_residuals"",
    ""normalize_pearson_residuals_pca"",
    ""recipe_pearson_residuals"",
]",constant,,,,"Constant: __all__ = [
    ""highly_variable_genes"",
    ""normalize_pearson_residuals"",
    ""normalize_pearson_residuals_pca"",
    ""recipe_pearson_residuals"",
]",scverse,scanpy,1.10.1,,,,,"__all__ = [
    ""highly_variable_genes"",
    ""normalize_pearson_residuals"",
    ""normalize_pearson_residuals_pca"",
    ""recipe_pearson_residuals"",
]",__all__,"[
    ""highly_variable_genes"",
    ""normalize_pearson_residuals"",
    ""normalize_pearson_residuals_pca"",
    ""recipe_pearson_residuals"",
]",,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,highly_variable_genes from scanpy.experimental.pp._highly_variable_genes,local_import,,,,Import: highly_variable_genes from scanpy.experimental.pp._highly_variable_genes,scverse,scanpy,1.10.1,from scanpy.experimental.pp._highly_variable_genes import highly_variable_genes,highly_variable_genes,scanpy.experimental.pp._highly_variable_genes,scanpy.experimental.pp._highly_variable_genes,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,normalize_pearson_residuals from scanpy.experimental.pp._normalization,local_import,,,,Import: normalize_pearson_residuals from scanpy.experimental.pp._normalization,scverse,scanpy,1.10.1,"from scanpy.experimental.pp._normalization import (
    normalize_pearson_residuals,
    normalize_pearson_residuals_pca,
)",normalize_pearson_residuals,scanpy.experimental.pp._normalization,scanpy.experimental.pp._normalization,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,normalize_pearson_residuals_pca from scanpy.experimental.pp._normalization,local_import,,,,Import: normalize_pearson_residuals_pca from scanpy.experimental.pp._normalization,scverse,scanpy,1.10.1,"from scanpy.experimental.pp._normalization import (
    normalize_pearson_residuals,
    normalize_pearson_residuals_pca,
)",normalize_pearson_residuals_pca,scanpy.experimental.pp._normalization,scanpy.experimental.pp._normalization,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,recipe_pearson_residuals from scanpy.experimental.pp._recipes,local_import,,,,Import: recipe_pearson_residuals from scanpy.experimental.pp._recipes,scverse,scanpy,1.10.1,from scanpy.experimental.pp._recipes import recipe_pearson_residuals,recipe_pearson_residuals,scanpy.experimental.pp._recipes,scanpy.experimental.pp._recipes,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\experimental\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\experimental\pp\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"_get_edges(adata, neighbors_key=None)",function,_get_edges,"(adata, neighbors_key=None)",,"Function: _get_edges(adata, neighbors_key=None)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"write_hdf5_genes(E, gene_list, filename)",function,write_hdf5_genes,"(E, gene_list, filename)",,"Function: write_hdf5_genes(E, gene_list, filename)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"write_hdf5_cells(E, filename)",function,write_hdf5_cells,"(E, filename)",,"Function: write_hdf5_cells(E, filename)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"write_sparse_npz(E, filename, compressed=False)",function,write_sparse_npz,"(E, filename, compressed=False)",,"Function: write_sparse_npz(E, filename, compressed=False)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"_write_graph(filename, n_nodes, edges)",function,_write_graph,"(filename, n_nodes, edges)",,"Function: _write_graph(filename, n_nodes, edges)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"_write_edges(filename, edges)",function,_write_edges,"(filename, edges)",,"Function: _write_edges(filename, edges)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"_write_color_tracks(ctracks, fname)",function,_write_color_tracks,"(ctracks, fname)",,"Function: _write_color_tracks(ctracks, fname)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,_frac_to_hex(frac),function,_frac_to_hex,(frac),,Function: _frac_to_hex(frac),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"_get_color_stats_genes(color_stats, E, gene_list)",function,_get_color_stats_genes,"(color_stats, E, gene_list)",,"Function: _get_color_stats_genes(color_stats, E, gene_list)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"_get_color_stats_custom(color_stats, custom_colors)",function,_get_color_stats_custom,"(color_stats, custom_colors)",,"Function: _get_color_stats_custom(color_stats, custom_colors)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"_write_color_stats(filename, color_stats)",function,_write_color_stats,"(filename, color_stats)",,"Function: _write_color_stats(filename, color_stats)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"_build_categ_colors(categorical_coloring_data, cell_groupings)",function,_build_categ_colors,"(categorical_coloring_data, cell_groupings)",,"Function: _build_categ_colors(categorical_coloring_data, cell_groupings)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"_write_cell_groupings(filename, categorical_coloring_data)",function,_write_cell_groupings,"(filename, categorical_coloring_data)",,"Function: _write_cell_groupings(filename, categorical_coloring_data)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"_export_PAGA_to_SPRING(adata, paga_coords, outpath)",function,_export_PAGA_to_SPRING,"(adata, paga_coords, outpath)",,"Function: _export_PAGA_to_SPRING(adata, paga_coords, outpath)",scverse,scanpy,1.10.1,,,,,,,,"# retrieve node data",,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"__all__ = [""spring_project"", ""cellbrowser""]",constant,,,,"Constant: __all__ = [""spring_project"", ""cellbrowser""]",scverse,scanpy,1.10.1,,,,,"__all__ = [""spring_project"", ""cellbrowser""]",__all__,"[""spring_project"", ""cellbrowser""]",,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,json,import,,,,Import: json,scverse,scanpy,1.10.1,import json,json,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,logging,import,,,,Import: logging,scverse,scanpy,1.10.1,import logging as logg,logging,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,h5py,import,,,,Import: h5py,scverse,scanpy,1.10.1,import h5py,h5py,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,matplotlib.pyplot,import,,,,Import: matplotlib.pyplot,scverse,scanpy,1.10.1,import matplotlib.pyplot as plt,matplotlib.pyplot,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,scipy.sparse,import,,,,Import: scipy.sparse,scverse,scanpy,1.10.1,import scipy.sparse,scipy.sparse,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,CategoricalDtype from pandas.api.types,local_import,,,,Import: CategoricalDtype from pandas.api.types,scverse,scanpy,1.10.1,from pandas.api.types import CategoricalDtype,CategoricalDtype,pandas.api.types,pandas.api.types,,,,,,,,,,,,,,
,exporting.py,python,,,,,,File: scanpy\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,exporting.py,python,,,,,,Directory: scanpy\external\exporting.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pl.py,python,"__all__ = [
    ""phate"",
    ""trimap"",
    ""harmony_timeseries"",
    ""sam"",
    ""wishbone_marker_trajectory"",
]",constant,,,,"Constant: __all__ = [
    ""phate"",
    ""trimap"",
    ""harmony_timeseries"",
    ""sam"",
    ""wishbone_marker_trajectory"",
]",scverse,scanpy,1.10.1,,,,,"__all__ = [
    ""phate"",
    ""trimap"",
    ""harmony_timeseries"",
    ""sam"",
    ""wishbone_marker_trajectory"",
]",__all__,"[
    ""phate"",
    ""trimap"",
    ""harmony_timeseries"",
    ""sam"",
    ""wishbone_marker_trajectory"",
]",,,,,,,,,,,
scverse_scanpy_1.10.1,pl.py,python,"scrublet_score_distribution = deprecated(""Import from sc.pl instead"")(
    _scrublet.scrublet_score_distribution
)",constant,,,,"Constant: scrublet_score_distribution = deprecated(""Import from sc.pl instead"")(
    _scrublet.scrublet_score_distribution
)",scverse,scanpy,1.10.1,,,,,"scrublet_score_distribution = deprecated(""Import from sc.pl instead"")(
    _scrublet.scrublet_score_distribution
)",scrublet_score_distribution,"deprecated(""Import from sc.pl instead"")(
    _scrublet.scrublet_score_distribution
)",,,,,,,,,,,
scverse_scanpy_1.10.1,pl.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pl.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",Any,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pl.py,python,matplotlib.pyplot,import,,,,Import: matplotlib.pyplot,scverse,scanpy,1.10.1,import matplotlib.pyplot as plt,matplotlib.pyplot,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pl.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pl.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pl.py,python,Axes from matplotlib.axes,local_import,,,,Import: Axes from matplotlib.axes,scverse,scanpy,1.10.1,from matplotlib.axes import Axes,Axes,matplotlib.axes,matplotlib.axes,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pl.py,python,deprecated from sklearn.utils,local_import,,,,Import: deprecated from sklearn.utils,scverse,scanpy,1.10.1,from sklearn.utils import deprecated,deprecated,sklearn.utils,sklearn.utils,,,,,,,,,,,,,,
,pl.py,python,,,,,,File: scanpy\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,pl.py,python,,,,,,Directory: scanpy\external\pl.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [""exporting"", ""pl"", ""pp"", ""tl""]",constant,,,,"Constant: __all__ = [""exporting"", ""pl"", ""pp"", ""tl""]",scverse,scanpy,1.10.1,,,,,"__all__ = [""exporting"", ""pl"", ""pp"", ""tl""]",__all__,"[""exporting"", ""pl"", ""pp"", ""tl""]",,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,sys,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\external\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_bbknn.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Callable",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_bbknn.py,python,Callable from typing,import,,,,Import: Callable from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Callable",Callable,typing,,,,,,,,,,,,,,,
,_bbknn.py,python,,,,,,File: scanpy\external\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_bbknn.py,python,,,,,,Directory: scanpy\external\pp\_bbknn.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dca.py,python,"_AEType = Literal[""zinb-conddisp"", ""zinb"", ""nb-conddisp"", ""nb""]",constant,,,,"Constant: _AEType = Literal[""zinb-conddisp"", ""zinb"", ""nb-conddisp"", ""nb""]",scverse,scanpy,1.10.1,,,,,"_AEType = Literal[""zinb-conddisp"", ""zinb"", ""nb-conddisp"", ""nb""]",_AEType,"Literal[""zinb-conddisp"", ""zinb"", ""nb-conddisp"", ""nb""]",,,,,,,,,,,
scverse_scanpy_1.10.1,_dca.py,python,MappingProxyType from types,import,,,,Import: MappingProxyType from types,scverse,scanpy,1.10.1,from types import MappingProxyType,MappingProxyType,types,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dca.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dca.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",Any,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dca.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",Literal,typing,,,,,,,,,,,,,,,
,_dca.py,python,,,,,,File: scanpy\external\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_dca.py,python,,,,,,Directory: scanpy\external\pp\_dca.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_harmony_integrate.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_harmony_integrate.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
,_harmony_integrate.py,python,,,,,,File: scanpy\external\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_harmony_integrate.py,python,,,,,,Directory: scanpy\external\pp\_harmony_integrate.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_hashsolo.py,python,"_calculate_log_likelihoods(
    data: np.ndarray, number_of_noise_barcodes: int
) -> tuple[NDArray[np.float64], NDArray[np.float64], dict[int, str]]",function,_calculate_log_likelihoods,"(
    data: np.ndarray, number_of_noise_barcodes: int
)","tuple[NDArray[np.float64], NDArray[np.float64], dict[int, str]]","Function: _calculate_log_likelihoods(
    data: np.ndarray, number_of_noise_barcodes: int
) -> tuple[NDArray[np.float64], NDArray[np.float64], dict[int, str]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_hashsolo.py,python,"_calculate_bayes_rule(
    data: np.ndarray, priors: ArrayLike, number_of_noise_barcodes: int
) -> dict[str, np.ndarray]",function,_calculate_bayes_rule,"(
    data: np.ndarray, priors: ArrayLike, number_of_noise_barcodes: int
)","dict[str, np.ndarray]","Function: _calculate_bayes_rule(
    data: np.ndarray, priors: ArrayLike, number_of_noise_barcodes: int
) -> dict[str, np.ndarray]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_hashsolo.py,python,product from itertools,import,,,,Import: product from itertools,scverse,scanpy,1.10.1,from itertools import product,product,itertools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_hashsolo.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_hashsolo.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_hashsolo.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_hashsolo.py,python,norm from scipy.stats,local_import,,,,Import: norm from scipy.stats,scverse,scanpy,1.10.1,from scipy.stats import norm,norm,scipy.stats,scipy.stats,,,,,,,,,,,,,,
,_hashsolo.py,python,,,,,,File: scanpy\external\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_hashsolo.py,python,,,,,,Directory: scanpy\external\pp\_hashsolo.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_magic.py,python,"MIN_VERSION = ""2.0""",constant,,,,"Constant: MIN_VERSION = ""2.0""",scverse,scanpy,1.10.1,,,,,"MIN_VERSION = ""2.0""",MIN_VERSION,"""2.0""",,,,,,,,,,,
scverse_scanpy_1.10.1,_magic.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_magic.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_magic.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,version,packaging,,,,,,,,,,,,,,,
,_magic.py,python,,,,,,File: scanpy\external\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_magic.py,python,,,,,,Directory: scanpy\external\pp\_magic.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_mnn_correct.py,python,"mnn_correct(
    *datas: AnnData | np.ndarray,
    var_index: Collection[str] | None = None,
    var_subset: Collection[str] | None = None,
    batch_key: str = ""batch"",
    index_unique: str = ""-"",
    batch_categories: Collection[Any] | None = None,
    k: int = 20,
    sigma: float = 1.0,
    cos_norm_in: bool = True,
    cos_norm_out: bool = True,
    svd_dim: int | None = None,
    var_adj: bool = True,
    compute_angle: bool = False,
    mnn_order: Sequence[int] | None = None,
    svd_mode: Literal[""svd"", ""rsvd"", ""irlb""] = ""rsvd"",
    do_concatenate: bool = True,
    save_raw: bool = False,
    n_jobs: int | None = None,
    **kwargs,
) -> tuple[
    np.ndarray | AnnData,
    list[pd.DataFrame],
    list[tuple[float | None, int]] | None,
]",function,mnn_correct,"(
    *datas: AnnData | np.ndarray,
    var_index: Collection[str] | None = None,
    var_subset: Collection[str] | None = None,
    batch_key: str = ""batch"",
    index_unique: str = ""-"",
    batch_categories: Collection[Any] | None = None,
    k: int = 20,
    sigma: float = 1.0,
    cos_norm_in: bool = True,
    cos_norm_out: bool = True,
    svd_dim: int | None = None,
    var_adj: bool = True,
    compute_angle: bool = False,
    mnn_order: Sequence[int] | None = None,
    svd_mode: Literal[""svd"", ""rsvd"", ""irlb""] = ""rsvd"",
    do_concatenate: bool = True,
    save_raw: bool = False,
    n_jobs: int | None = None,
    **kwargs,
)","tuple[
    np.ndarray | AnnData,
    list[pd.DataFrame],
    list[tuple[float | None, int]] | None,
]","Function: mnn_correct(
    *datas: AnnData | np.ndarray,
    var_index: Collection[str] | None = None,
    var_subset: Collection[str] | None = None,
    batch_key: str = ""batch"",
    index_unique: str = ""-"",
    batch_categories: Collection[Any] | None = None,
    k: int = 20,
    sigma: float = 1.0,
    cos_norm_in: bool = True,
    cos_norm_out: bool = True,
    svd_dim: int | None = None,
    var_adj: bool = True,
    compute_angle: bool = False,
    mnn_order: Sequence[int] | None = None,
    svd_mode: Literal[""svd"", ""rsvd"", ""irlb""] = ""rsvd"",
    do_concatenate: bool = True,
    save_raw: bool = False,
    n_jobs: int | None = None,
    **kwargs,
) -> tuple[
    np.ndarray | AnnData,
    list[pd.DataFrame],
    list[tuple[float | None, int]] | None,
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_mnn_correct.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_mnn_correct.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",Any,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_mnn_correct.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",Literal,typing,,,,,,,,,,,,,,,
,_mnn_correct.py,python,,,,,,File: scanpy\external\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_mnn_correct.py,python,,,,,,Directory: scanpy\external\pp\_mnn_correct.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scanorama_integrate.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scanorama_integrate.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
,_scanorama_integrate.py,python,,,,,,File: scanpy\external\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_scanorama_integrate.py,python,,,,,,Directory: scanpy\external\pp\_scanorama_integrate.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"scrublet = deprecated(""Import from sc.pp instead"")(_scrublet.scrublet)",constant,,,,"Constant: scrublet = deprecated(""Import from sc.pp instead"")(_scrublet.scrublet)",scverse,scanpy,1.10.1,,,,,"scrublet = deprecated(""Import from sc.pp instead"")(_scrublet.scrublet)",scrublet,"deprecated(""Import from sc.pp instead"")(_scrublet.scrublet)",,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"scrublet_simulate_doublets = deprecated(""Import from sc.pp instead"")(
    _scrublet.scrublet_simulate_doublets
)",constant,,,,"Constant: scrublet_simulate_doublets = deprecated(""Import from sc.pp instead"")(
    _scrublet.scrublet_simulate_doublets
)",scverse,scanpy,1.10.1,,,,,"scrublet_simulate_doublets = deprecated(""Import from sc.pp instead"")(
    _scrublet.scrublet_simulate_doublets
)",scrublet_simulate_doublets,"deprecated(""Import from sc.pp instead"")(
    _scrublet.scrublet_simulate_doublets
)",,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""bbknn"",
    ""dca"",
    ""harmony_integrate"",
    ""hashsolo"",
    ""magic"",
    ""mnn_correct"",
    ""scanorama_integrate"",
]",constant,,,,"Constant: __all__ = [
    ""bbknn"",
    ""dca"",
    ""harmony_integrate"",
    ""hashsolo"",
    ""magic"",
    ""mnn_correct"",
    ""scanorama_integrate"",
]",scverse,scanpy,1.10.1,,,,,"__all__ = [
    ""bbknn"",
    ""dca"",
    ""harmony_integrate"",
    ""hashsolo"",
    ""magic"",
    ""mnn_correct"",
    ""scanorama_integrate"",
]",__all__,"[
    ""bbknn"",
    ""dca"",
    ""harmony_integrate"",
    ""hashsolo"",
    ""magic"",
    ""mnn_correct"",
    ""scanorama_integrate"",
]",,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,deprecated from sklearn.utils,local_import,,,,Import: deprecated from sklearn.utils,scverse,scanpy,1.10.1,from sklearn.utils import deprecated,deprecated,sklearn.utils,sklearn.utils,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\external\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\external\pp\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_harmony_timeseries.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_harmony_timeseries.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_harmony_timeseries.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
,_harmony_timeseries.py,python,,,,,,File: scanpy\external\tl,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_harmony_timeseries.py,python,,,,,,Directory: scanpy\external\tl\_harmony_timeseries.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_palantir.py,python,_check_import(),function,_check_import,(),,Function: _check_import(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_palantir.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_palantir.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
,_palantir.py,python,,,,,,File: scanpy\external\tl,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_palantir.py,python,,,,,,Directory: scanpy\external\tl\_palantir.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_phate.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_phate.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
,_phate.py,python,,,,,,File: scanpy\external\tl,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_phate.py,python,,,,,,Directory: scanpy\external\tl\_phate.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_phenograph.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_phenograph.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",Any,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_phenograph.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_phenograph.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_phenograph.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
,_phenograph.py,python,,,,,,File: scanpy\external\tl,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_phenograph.py,python,,,,,,Directory: scanpy\external\tl\_phenograph.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pypairs.py,python,"cyclone(
    adata: AnnData,
    marker_pairs: Mapping[str, Collection[tuple[str, str]]] | None = None,
    *,
    iterations: int = 1000,
    min_iter: int = 100,
    min_pairs: int = 50,
) -> pd.DataFrame",function,cyclone,"(
    adata: AnnData,
    marker_pairs: Mapping[str, Collection[tuple[str, str]]] | None = None,
    *,
    iterations: int = 1000,
    min_iter: int = 100,
    min_pairs: int = 50,
)",pd.DataFrame,"Function: cyclone(
    adata: AnnData,
    marker_pairs: Mapping[str, Collection[tuple[str, str]]] | None = None,
    *,
    iterations: int = 1000,
    min_iter: int = 100,
    min_pairs: int = 50,
) -> pd.DataFrame",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pypairs.py,python,_check_import(),function,_check_import,(),,Function: _check_import(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pypairs.py,python,"Genes = Collection[Union[str, int, bool]]",constant,,,,"Constant: Genes = Collection[Union[str, int, bool]]",scverse,scanpy,1.10.1,,,,,"Genes = Collection[Union[str, int, bool]]",Genes,"Collection[Union[str, int, bool]]",,,,,,,,,,,
scverse_scanpy_1.10.1,_pypairs.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Union",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pypairs.py,python,Union from typing,import,,,,Import: Union from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Union",Union,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pypairs.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,version,packaging,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pypairs.py,python,Collection from collections.abc,local_import,,,,Import: Collection from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Collection, Mapping",Collection,collections.abc,collections.abc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pypairs.py,python,Mapping from collections.abc,local_import,,,,Import: Mapping from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Collection, Mapping",Mapping,collections.abc,collections.abc,,,,,,,,,,,,,,
,_pypairs.py,python,,,,,,File: scanpy\external\tl,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_pypairs.py,python,,,,,,Directory: scanpy\external\tl\_pypairs.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sam.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sam.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
,_sam.py,python,,,,,,File: scanpy\external\tl,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_sam.py,python,,,,,,Directory: scanpy\external\tl\_sam.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_trimap.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_trimap.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_trimap.py,python,scipy.sparse,import,,,,Import: scipy.sparse,scverse,scanpy,1.10.1,import scipy.sparse as scp,scipy.sparse,,,,,,,,,,,,,,,,
,_trimap.py,python,,,,,,File: scanpy\external\tl,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_trimap.py,python,,,,,,Directory: scanpy\external\tl\_trimap.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_wishbone.py,python,_anndata_to_wishbone(adata: AnnData),function,_anndata_to_wishbone,(adata: AnnData),,Function: _anndata_to_wishbone(adata: AnnData),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_wishbone.py,python,collections.abc,import,,,,Import: collections.abc,scverse,scanpy,1.10.1,import collections.abc as cabc,collections.abc,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_wishbone.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_wishbone.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_wishbone.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
,_wishbone.py,python,,,,,,File: scanpy\external\tl,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_wishbone.py,python,,,,,,Directory: scanpy\external\tl\_wishbone.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""harmony_timeseries"",
    ""palantir"",
    ""palantir_results"",
    ""phate"",
    ""phenograph"",
    ""cyclone"",
    ""sandbag"",
    ""sam"",
    ""trimap"",
    ""wishbone"",
]",constant,,,,"Constant: __all__ = [
    ""harmony_timeseries"",
    ""palantir"",
    ""palantir_results"",
    ""phate"",
    ""phenograph"",
    ""cyclone"",
    ""sandbag"",
    ""sam"",
    ""trimap"",
    ""wishbone"",
]",scverse,scanpy,1.10.1,,,,,"__all__ = [
    ""harmony_timeseries"",
    ""palantir"",
    ""palantir_results"",
    ""phate"",
    ""phenograph"",
    ""cyclone"",
    ""sandbag"",
    ""sam"",
    ""trimap"",
    ""wishbone"",
]",__all__,"[
    ""harmony_timeseries"",
    ""palantir"",
    ""palantir_results"",
    ""phate"",
    ""phenograph"",
    ""cyclone"",
    ""sandbag"",
    ""sam"",
    ""trimap"",
    ""wishbone"",
]",,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\external\tl,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\external\tl\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,"rank_genes_groups_df(
    adata: AnnData,
    group: str | Iterable[str] | None,
    *,
    key: str = ""rank_genes_groups"",
    pval_cutoff: float | None = None,
    log2fc_min: float | None = None,
    log2fc_max: float | None = None,
    gene_symbols: str | None = None,
) -> pd.DataFrame",function,rank_genes_groups_df,"(
    adata: AnnData,
    group: str | Iterable[str] | None,
    *,
    key: str = ""rank_genes_groups"",
    pval_cutoff: float | None = None,
    log2fc_min: float | None = None,
    log2fc_max: float | None = None,
    gene_symbols: str | None = None,
)",pd.DataFrame,"Function: rank_genes_groups_df(
    adata: AnnData,
    group: str | Iterable[str] | None,
    *,
    key: str = ""rank_genes_groups"",
    pval_cutoff: float | None = None,
    log2fc_min: float | None = None,
    log2fc_max: float | None = None,
    gene_symbols: str | None = None,
) -> pd.DataFrame",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,"_check_indices(
    dim_df: pd.DataFrame,
    alt_index: pd.Index,
    *,
    dim: Literal[""obs"", ""var""],
    keys: list[str],
    alias_index: pd.Index | None = None,
    use_raw: bool = False,
) -> tuple[list[str], list[str], list[str]]",function,_check_indices,"(
    dim_df: pd.DataFrame,
    alt_index: pd.Index,
    *,
    dim: Literal[""obs"", ""var""],
    keys: list[str],
    alias_index: pd.Index | None = None,
    use_raw: bool = False,
)","tuple[list[str], list[str], list[str]]","Function: _check_indices(
    dim_df: pd.DataFrame,
    alt_index: pd.Index,
    *,
    dim: Literal[""obs"", ""var""],
    keys: list[str],
    alias_index: pd.Index | None = None,
    use_raw: bool = False,
) -> tuple[list[str], list[str], list[str]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,"_get_array_values(
    X,
    dim_names: pd.Index,
    keys: list[str],
    axis: Literal[0, 1],
    backed: bool,
)",function,_get_array_values,"(
    X,
    dim_names: pd.Index,
    keys: list[str],
    axis: Literal[0, 1],
    backed: bool,
)",,"Function: _get_array_values(
    X,
    dim_names: pd.Index,
    keys: list[str],
    axis: Literal[0, 1],
    backed: bool,
)",scverse,scanpy,1.10.1,,,,,,,,"# TODO: This should be made easier on the anndata side",,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,"obs_df(
    adata: AnnData,
    keys: Iterable[str] = (),
    obsm_keys: Iterable[tuple[str, int]] = (),
    *,
    layer: str | None = None,
    gene_symbols: str | None = None,
    use_raw: bool = False,
) -> pd.DataFrame",function,obs_df,"(
    adata: AnnData,
    keys: Iterable[str] = (),
    obsm_keys: Iterable[tuple[str, int]] = (),
    *,
    layer: str | None = None,
    gene_symbols: str | None = None,
    use_raw: bool = False,
)",pd.DataFrame,"Function: obs_df(
    adata: AnnData,
    keys: Iterable[str] = (),
    obsm_keys: Iterable[tuple[str, int]] = (),
    *,
    layer: str | None = None,
    gene_symbols: str | None = None,
    use_raw: bool = False,
) -> pd.DataFrame",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,"var_df(
    adata: AnnData,
    keys: Iterable[str] = (),
    varm_keys: Iterable[tuple[str, int]] = (),
    *,
    layer: str | None = None,
) -> pd.DataFrame",function,var_df,"(
    adata: AnnData,
    keys: Iterable[str] = (),
    varm_keys: Iterable[tuple[str, int]] = (),
    *,
    layer: str | None = None,
)",pd.DataFrame,"Function: var_df(
    adata: AnnData,
    keys: Iterable[str] = (),
    varm_keys: Iterable[tuple[str, int]] = (),
    *,
    layer: str | None = None,
) -> pd.DataFrame",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,"_get_obs_rep(
    adata: AnnData,
    *,
    use_raw: bool = False,
    layer: str | None = None,
    obsm: str | None = None,
    obsp: str | None = None,
) -> (
    np.ndarray
    | spmatrix
    | pd.DataFrame
    | ArrayView
    | BaseCompressedSparseDataset
    | None
)",function,_get_obs_rep,"(
    adata: AnnData,
    *,
    use_raw: bool = False,
    layer: str | None = None,
    obsm: str | None = None,
    obsp: str | None = None,
)","(
    np.ndarray
    | spmatrix
    | pd.DataFrame
    | ArrayView
    | BaseCompressedSparseDataset
    | None
)","Function: _get_obs_rep(
    adata: AnnData,
    *,
    use_raw: bool = False,
    layer: str | None = None,
    obsm: str | None = None,
    obsp: str | None = None,
) -> (
    np.ndarray
    | spmatrix
    | pd.DataFrame
    | ArrayView
    | BaseCompressedSparseDataset
    | None
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,"_set_obs_rep(
    adata: AnnData,
    val: Any,
    *,
    use_raw: bool = False,
    layer: str | None = None,
    obsm: str | None = None,
    obsp: str | None = None,
)",function,_set_obs_rep,"(
    adata: AnnData,
    val: Any,
    *,
    use_raw: bool = False,
    layer: str | None = None,
    obsm: str | None = None,
    obsp: str | None = None,
)",,"Function: _set_obs_rep(
    adata: AnnData,
    val: Any,
    *,
    use_raw: bool = False,
    layer: str | None = None,
    obsm: str | None = None,
    obsp: str | None = None,
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,"_check_mask(
    data: AnnData | np.ndarray,
    mask: NDArray[np.bool_] | str,
    dim: Literal[""obs"", ""var""],
) -> NDArray[np.bool_]",function,_check_mask,"(
    data: AnnData | np.ndarray,
    mask: NDArray[np.bool_] | str,
    dim: Literal[""obs"", ""var""],
)",NDArray[np.bool_],"Function: _check_mask(
    data: AnnData | np.ndarray,
    mask: NDArray[np.bool_] | str,
    dim: Literal[""obs"", ""var""],
) -> NDArray[np.bool_]",scverse,scanpy,1.10.1,,,,,,,,"# Could also be a series, but should be one or the other",,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",Any,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,Version from packaging.version,local_import,,,,Import: Version from packaging.version,scverse,scanpy,1.10.1,from packaging.version import Version,Version,packaging.version,packaging.version,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,spmatrix from scipy.sparse,local_import,,,,Import: spmatrix from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import spmatrix,spmatrix,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
,get.py,python,,,,,,File: scanpy\get,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,get.py,python,,,,,,Directory: scanpy\get\get.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,[instance] Aggregate.groupby = groupby,class_field,,,,Class field: [instance] Aggregate.groupby = groupby,scverse,scanpy,1.10.1,,,,,,,,,Aggregate,__init__,"(
        self,
        groupby: pd.Categorical,
        data: Array,
        *,
        mask: NDArray[np.bool_] | None = None,
    )",self.groupby = groupby,self.groupby = groupby,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,"[instance] Aggregate.indicator_matrix = sparse_indicator(groupby, mask=mask)",class_field,,,,"Class field: [instance] Aggregate.indicator_matrix = sparse_indicator(groupby, mask=mask)",scverse,scanpy,1.10.1,,,,,,,,,Aggregate,__init__,"(
        self,
        groupby: pd.Categorical,
        data: Array,
        *,
        mask: NDArray[np.bool_] | None = None,
    )","self.indicator_matrix = sparse_indicator(groupby, mask=mask)","self.indicator_matrix = sparse_indicator(groupby, mask=mask)",,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,[instance] Aggregate.data = data,class_field,,,,Class field: [instance] Aggregate.data = data,scverse,scanpy,1.10.1,,,,,,,,,Aggregate,__init__,"(
        self,
        groupby: pd.Categorical,
        data: Array,
        *,
        mask: NDArray[np.bool_] | None = None,
    )",self.data = data,self.data = data,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,Aggregate.groupby: pd.Categorical,class_field,,,,Class field: Aggregate.groupby: pd.Categorical,scverse,scanpy,1.10.1,,,,,,,,,Aggregate,,,groupby: pd.Categorical,,,,,groupby,
scverse_scanpy_1.10.1,_aggregated.py,python,Aggregate.indicator_matrix: sparse.coo_matrix,class_field,,,,Class field: Aggregate.indicator_matrix: sparse.coo_matrix,scverse,scanpy,1.10.1,,,,,,,,,Aggregate,,,indicator_matrix: sparse.coo_matrix,,,,,indicator_matrix,
scverse_scanpy_1.10.1,_aggregated.py,python,Aggregate.data: Array,class_field,,,,Class field: Aggregate.data: Array,scverse,scanpy,1.10.1,,,,,,,,,Aggregate,,,data: Array,,,,,data,
scverse_scanpy_1.10.1,_aggregated.py,python,"Aggregate.__init__(
        self,
        groupby: pd.Categorical,
        data: Array,
        *,
        mask: NDArray[np.bool_] | None = None,
    ) -> None",class_method,,,,"Class method: Aggregate.__init__(
        self,
        groupby: pd.Categorical,
        data: Array,
        *,
        mask: NDArray[np.bool_] | None = None,
    ) -> None",scverse,scanpy,1.10.1,,,,,,,,,Aggregate,__init__,"(
        self,
        groupby: pd.Categorical,
        data: Array,
        *,
        mask: NDArray[np.bool_] | None = None,
    )",,,None,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,Aggregate.count_nonzero(self) -> NDArray[np.integer],class_method,,,,Class method: Aggregate.count_nonzero(self) -> NDArray[np.integer],scverse,scanpy,1.10.1,,,,,,,,,Aggregate,count_nonzero,(self),,,NDArray[np.integer],,,,
scverse_scanpy_1.10.1,_aggregated.py,python,Aggregate.sum(self) -> Array,class_method,,,,Class method: Aggregate.sum(self) -> Array,scverse,scanpy,1.10.1,,,,,,,,,Aggregate,sum,(self),,,Array,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,Aggregate.mean(self) -> Array,class_method,,,,Class method: Aggregate.mean(self) -> Array,scverse,scanpy,1.10.1,,,,,,,,,Aggregate,mean,(self),,,Array,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,"Aggregate.mean_var(self, dof: int = 1) -> tuple[np.ndarray, np.ndarray]",class_method,,,,"Class method: Aggregate.mean_var(self, dof: int = 1) -> tuple[np.ndarray, np.ndarray]",scverse,scanpy,1.10.1,,,,,,,,,Aggregate,mean_var,"(self, dof: int = 1)",,,"tuple[np.ndarray, np.ndarray]",,,,
scverse_scanpy_1.10.1,_aggregated.py,python,Aggregate,class,,,,Class: Aggregate,scverse,scanpy,1.10.1,,,,,,,,,Aggregate,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,"_power(X: Array, power: float | int) -> Array",function,_power,"(X: Array, power: float | int)",Array,"Function: _power(X: Array, power: float | int) -> Array",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,"aggregate(
    adata: AnnData,
    by: str | Collection[str],
    func: AggType | Iterable[AggType],
    *,
    axis: Literal[""obs"", 0, ""var"", 1] | None = None,
    mask: NDArray[np.bool_] | str | None = None,
    dof: int = 1,
    layer: str | None = None,
    obsm: str | None = None,
    varm: str | None = None,
) -> AnnData",function,aggregate,"(
    adata: AnnData,
    by: str | Collection[str],
    func: AggType | Iterable[AggType],
    *,
    axis: Literal[""obs"", 0, ""var"", 1] | None = None,
    mask: NDArray[np.bool_] | str | None = None,
    dof: int = 1,
    layer: str | None = None,
    obsm: str | None = None,
    varm: str | None = None,
)",AnnData,"Function: aggregate(
    adata: AnnData,
    by: str | Collection[str],
    func: AggType | Iterable[AggType],
    *,
    axis: Literal[""obs"", 0, ""var"", 1] | None = None,
    mask: NDArray[np.bool_] | str | None = None,
    dof: int = 1,
    layer: str | None = None,
    obsm: str | None = None,
    varm: str | None = None,
) -> AnnData",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,"_combine_categories(
    label_df: pd.DataFrame, cols: Collection[str] | str
) -> tuple[pd.Categorical, pd.DataFrame]",function,_combine_categories,"(
    label_df: pd.DataFrame, cols: Collection[str] | str
)","tuple[pd.Categorical, pd.DataFrame]","Function: _combine_categories(
    label_df: pd.DataFrame, cols: Collection[str] | str
) -> tuple[pd.Categorical, pd.DataFrame]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,"sparse_indicator(
    categorical: pd.Categorical,
    *,
    mask: NDArray[np.bool_] | None = None,
    weight: NDArray[np.floating] | None = None,
) -> sparse.coo_matrix",function,sparse_indicator,"(
    categorical: pd.Categorical,
    *,
    mask: NDArray[np.bool_] | None = None,
    weight: NDArray[np.floating] | None = None,
)",sparse.coo_matrix,"Function: sparse_indicator(
    categorical: pd.Categorical,
    *,
    mask: NDArray[np.bool_] | None = None,
    weight: NDArray[np.floating] | None = None,
) -> sparse.coo_matrix",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,"Array = Union[np.ndarray, sparse.csc_matrix, sparse.csr_matrix]",constant,,,,"Constant: Array = Union[np.ndarray, sparse.csc_matrix, sparse.csr_matrix]",scverse,scanpy,1.10.1,,,,,"Array = Union[np.ndarray, sparse.csc_matrix, sparse.csr_matrix]",Array,"Union[np.ndarray, sparse.csc_matrix, sparse.csr_matrix]",,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,"AggType = Literal[""count_nonzero"", ""mean"", ""sum"", ""var""]",constant,,,,"Constant: AggType = Literal[""count_nonzero"", ""mean"", ""sum"", ""var""]",scverse,scanpy,1.10.1,,,,,"AggType = Literal[""count_nonzero"", ""mean"", ""sum"", ""var""]",AggType,"Literal[""count_nonzero"", ""mean"", ""sum"", ""var""]",,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,singledispatch from functools,import,,,,Import: singledispatch from functools,scverse,scanpy,1.10.1,from functools import singledispatch,singledispatch,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, Union, get_args",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, Union, get_args",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,Union from typing,import,,,,Import: Union from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, Union, get_args",Union,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,get_args from typing,import,,,,Import: get_args from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, Union, get_args",get_args,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,"from anndata import AnnData, utils",AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,utils from anndata,import,,,,Import: utils from anndata,scverse,scanpy,1.10.1,"from anndata import AnnData, utils",utils,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,
,_aggregated.py,python,,,,,,File: scanpy\get,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_aggregated.py,python,,,,,,Directory: scanpy\get\_aggregated.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""_check_mask"",
    ""_get_obs_rep"",
    ""_set_obs_rep"",
    ""aggregate"",
    ""obs_df"",
    ""rank_genes_groups_df"",
    ""var_df"",
]",constant,,,,"Constant: __all__ = [
    ""_check_mask"",
    ""_get_obs_rep"",
    ""_set_obs_rep"",
    ""aggregate"",
    ""obs_df"",
    ""rank_genes_groups_df"",
    ""var_df"",
]",scverse,scanpy,1.10.1,,,,,"__all__ = [
    ""_check_mask"",
    ""_get_obs_rep"",
    ""_set_obs_rep"",
    ""aggregate"",
    ""obs_df"",
    ""rank_genes_groups_df"",
    ""var_df"",
]",__all__,"[
    ""_check_mask"",
    ""_get_obs_rep"",
    ""_set_obs_rep"",
    ""aggregate"",
    ""obs_df"",
    ""rank_genes_groups_df"",
    ""var_df"",
]",,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\get,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\get\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,"_check_vals(
    vals: V,
) -> tuple[V, NDArray[np.bool_] | slice, NDArray[np.float64]]",function,_check_vals,"(
    vals: V,
)","tuple[V, NDArray[np.bool_] | slice, NDArray[np.float64]]","Function: _check_vals(
    vals: V,
) -> tuple[V, NDArray[np.bool_] | slice, NDArray[np.float64]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,"V = TypeVar(""V"", np.ndarray, sparse.csr_matrix)",constant,,,,"Constant: V = TypeVar(""V"", np.ndarray, sparse.csr_matrix)",scverse,scanpy,1.10.1,,,,,"V = TypeVar(""V"", np.ndarray, sparse.csr_matrix)",V,"TypeVar(""V"", np.ndarray, sparse.csr_matrix)",,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,singledispatch from functools,import,,,,Import: singledispatch from functools,scverse,scanpy,1.10.1,from functools import singledispatch,singledispatch,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, TypeVar",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,TypeVar from typing,import,,,,Import: TypeVar from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, TypeVar",TypeVar,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,
,_common.py,python,,,,,,File: scanpy\metrics,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_common.py,python,,,,,,Directory: scanpy\metrics\_common.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_gearys_c.py,python,singledispatch from functools,import,,,,Import: singledispatch from functools,scverse,scanpy,1.10.1,from functools import singledispatch,singledispatch,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_gearys_c.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_gearys_c.py,python,numba,import,,,,Import: numba,scverse,scanpy,1.10.1,import numba,numba,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_gearys_c.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_gearys_c.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,
,_gearys_c.py,python,,,,,,File: scanpy\metrics,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_gearys_c.py,python,,,,,,Directory: scanpy\metrics\_gearys_c.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_metrics.py,python,"confusion_matrix(
    orig: pd.Series | np.ndarray | Sequence,
    new: pd.Series | np.ndarray | Sequence,
    data: pd.DataFrame | None = None,
    *,
    normalize: bool = True,
) -> pd.DataFrame",function,confusion_matrix,"(
    orig: pd.Series | np.ndarray | Sequence,
    new: pd.Series | np.ndarray | Sequence,
    data: pd.DataFrame | None = None,
    *,
    normalize: bool = True,
)",pd.DataFrame,"Function: confusion_matrix(
    orig: pd.Series | np.ndarray | Sequence,
    new: pd.Series | np.ndarray | Sequence,
    data: pd.DataFrame | None = None,
    *,
    normalize: bool = True,
) -> pd.DataFrame",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_metrics.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_metrics.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_metrics.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_metrics.py,python,natsorted from natsort,import,,,,Import: natsorted from natsort,scverse,scanpy,1.10.1,from natsort import natsorted,natsorted,natsort,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_metrics.py,python,CategoricalDtype from pandas.api.types,local_import,,,,Import: CategoricalDtype from pandas.api.types,scverse,scanpy,1.10.1,from pandas.api.types import CategoricalDtype,CategoricalDtype,pandas.api.types,pandas.api.types,,,,,,,,,,,,,,
,_metrics.py,python,,,,,,File: scanpy\metrics,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_metrics.py,python,,,,,,Directory: scanpy\metrics\_metrics.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_morans_i.py,python,singledispatch from functools,import,,,,Import: singledispatch from functools,scverse,scanpy,1.10.1,from functools import singledispatch,singledispatch,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_morans_i.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_morans_i.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_morans_i.py,python,njit from numba,import,,,,Import: njit from numba,scverse,scanpy,1.10.1,"from numba import njit, prange",njit,numba,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_morans_i.py,python,prange from numba,import,,,,Import: prange from numba,scverse,scanpy,1.10.1,"from numba import njit, prange",prange,numba,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_morans_i.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,
,_morans_i.py,python,,,,,,File: scanpy\metrics,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_morans_i.py,python,,,,,,Directory: scanpy\metrics\_morans_i.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [""gearys_c"", ""morans_i"", ""confusion_matrix""]",constant,,,,"Constant: __all__ = [""gearys_c"", ""morans_i"", ""confusion_matrix""]",scverse,scanpy,1.10.1,,,,,"__all__ = [""gearys_c"", ""morans_i"", ""confusion_matrix""]",__all__,"[""gearys_c"", ""morans_i"", ""confusion_matrix""]",,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\metrics,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\metrics\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,"_has_self_column(
    indices: NDArray[np.int32 | np.int64],
    distances: NDArray[np.float32 | np.float64],
) -> bool",function,_has_self_column,"(
    indices: NDArray[np.int32 | np.int64],
    distances: NDArray[np.float32 | np.float64],
)",bool,"Function: _has_self_column(
    indices: NDArray[np.int32 | np.int64],
    distances: NDArray[np.float32 | np.float64],
) -> bool",scverse,scanpy,1.10.1,,,,,,,,"# some algorithms have some messed up reordering.",,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,"_remove_self_column(
    indices: NDArray[np.int32 | np.int64],
    distances: NDArray[np.float32 | np.float64],
) -> tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]]",function,_remove_self_column,"(
    indices: NDArray[np.int32 | np.int64],
    distances: NDArray[np.float32 | np.float64],
)","tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]]","Function: _remove_self_column(
    indices: NDArray[np.int32 | np.int64],
    distances: NDArray[np.float32 | np.float64],
) -> tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,"_get_sparse_matrix_from_indices_distances(
    indices: NDArray[np.int32 | np.int64],
    distances: NDArray[np.float32 | np.float64],
    *,
    keep_self: bool,
) -> csr_matrix",function,_get_sparse_matrix_from_indices_distances,"(
    indices: NDArray[np.int32 | np.int64],
    distances: NDArray[np.float32 | np.float64],
    *,
    keep_self: bool,
)",csr_matrix,"Function: _get_sparse_matrix_from_indices_distances(
    indices: NDArray[np.int32 | np.int64],
    distances: NDArray[np.float32 | np.float64],
    *,
    keep_self: bool,
) -> csr_matrix",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,"_get_indices_distances_from_dense_matrix(
    D: NDArray[np.float32 | np.float64], n_neighbors: int
)",function,_get_indices_distances_from_dense_matrix,"(
    D: NDArray[np.float32 | np.float64], n_neighbors: int
)",,"Function: _get_indices_distances_from_dense_matrix(
    D: NDArray[np.float32 | np.float64], n_neighbors: int
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,"_get_indices_distances_from_sparse_matrix(
    D: csr_matrix, n_neighbors: int
) -> tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]]",function,_get_indices_distances_from_sparse_matrix,"(
    D: csr_matrix, n_neighbors: int
)","tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]]","Function: _get_indices_distances_from_sparse_matrix(
    D: csr_matrix, n_neighbors: int
) -> tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,"_ind_dist_slow(
    D: csr_matrix, n_neighbors: int
) -> tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]]",function,_ind_dist_slow,"(
    D: csr_matrix, n_neighbors: int
)","tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]]","Function: _ind_dist_slow(
    D: csr_matrix, n_neighbors: int
) -> tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,"_ind_dist_shortcut(
    D: csr_matrix,
) -> tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]] | None",function,_ind_dist_shortcut,"(
    D: csr_matrix,
)","tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]] | None","Function: _ind_dist_shortcut(
    D: csr_matrix,
) -> tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]] | None",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,warn from warnings,import,,,,Import: warn from warnings,scverse,scanpy,1.10.1,from warnings import warn,warn,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import csr_matrix,csr_matrix,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,is_constant from scanpy._utils.compute.is_constant,local_import,,,,Import: is_constant from scanpy._utils.compute.is_constant,scverse,scanpy,1.10.1,from scanpy._utils.compute.is_constant import is_constant,is_constant,scanpy._utils.compute.is_constant,scanpy._utils.compute.is_constant,,,,,,,,,,,,,,
,_common.py,python,,,,,,File: scanpy\neighbors,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_common.py,python,,,,,,Directory: scanpy\neighbors\_common.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_connectivity.py,python,"gauss(distances: D, n_neighbors: int, *, knn: bool) -> D",function,gauss,"(distances: D, n_neighbors: int, *, knn: bool)",D,"Function: gauss(distances: D, n_neighbors: int, *, knn: bool) -> D",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_connectivity.py,python,"umap(
    knn_indices: NDArray[np.int32 | np.int64],
    knn_dists: NDArray[np.float32 | np.float64],
    *,
    n_obs: int,
    n_neighbors: int,
    set_op_mix_ratio: float = 1.0,
    local_connectivity: float = 1.0,
) -> csr_matrix",function,umap,"(
    knn_indices: NDArray[np.int32 | np.int64],
    knn_dists: NDArray[np.float32 | np.float64],
    *,
    n_obs: int,
    n_neighbors: int,
    set_op_mix_ratio: float = 1.0,
    local_connectivity: float = 1.0,
)",csr_matrix,"Function: umap(
    knn_indices: NDArray[np.int32 | np.int64],
    knn_dists: NDArray[np.float32 | np.float64],
    *,
    n_obs: int,
    n_neighbors: int,
    set_op_mix_ratio: float = 1.0,
    local_connectivity: float = 1.0,
) -> csr_matrix",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_connectivity.py,python,"D = TypeVar(""D"", NDArray[np.float32], csr_matrix)",constant,,,,"Constant: D = TypeVar(""D"", NDArray[np.float32], csr_matrix)",scverse,scanpy,1.10.1,,,,,"D = TypeVar(""D"", NDArray[np.float32], csr_matrix)",D,"TypeVar(""D"", NDArray[np.float32], csr_matrix)",,,,,,,,,,,
scverse_scanpy_1.10.1,_connectivity.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_connectivity.py,python,TypeVar from typing,import,,,,Import: TypeVar from typing,scverse,scanpy,1.10.1,from typing import TypeVar,TypeVar,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_connectivity.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_connectivity.py,python,NDArray from numpy.typing,local_import,,,,Import: NDArray from numpy.typing,scverse,scanpy,1.10.1,from numpy.typing import NDArray,NDArray,numpy.typing,numpy.typing,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_connectivity.py,python,coo_matrix from scipy.sparse,local_import,,,,Import: coo_matrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import coo_matrix, csr_matrix, issparse",coo_matrix,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_connectivity.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import coo_matrix, csr_matrix, issparse",csr_matrix,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_connectivity.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import coo_matrix, csr_matrix, issparse",issparse,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
,_connectivity.py,python,,,,,,File: scanpy\neighbors,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_connectivity.py,python,,,,,,Directory: scanpy\neighbors\_connectivity.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_doc.py,python,"doc_use_rep = """"""\
use_rep
    Use the indicated representation. `'X'` or any key for `.obsm` is valid.
    If `None`, the representation is chosen automatically:
    For `.n_vars` < :attr:`~scanpy._settings.ScanpyConfig.N_PCS` (default: 50), `.X` is used, otherwise 'X_pca' is used.
    If 'X_pca' is not present, it’s computed with default parameters or `n_pcs` if present.\
""""""",constant,,,,"Constant: doc_use_rep = """"""\
use_rep
    Use the indicated representation. `'X'` or any key for `.obsm` is valid.
    If `None`, the representation is chosen automatically:
    For `.n_vars` < :attr:`~scanpy._settings.ScanpyConfig.N_PCS` (default: 50), `.X` is used, otherwise 'X_pca' is used.
    If 'X_pca' is not present, it’s computed with default parameters or `n_pcs` if present.\
""""""",scverse,scanpy,1.10.1,,,,,"doc_use_rep = """"""\
use_rep
    Use the indicated representation. `'X'` or any key for `.obsm` is valid.
    If `None`, the representation is chosen automatically:
    For `.n_vars` < :attr:`~scanpy._settings.ScanpyConfig.N_PCS` (default: 50), `.X` is used, otherwise 'X_pca' is used.
    If 'X_pca' is not present, it’s computed with default parameters or `n_pcs` if present.\
""""""",doc_use_rep,"""""""\
use_rep
    Use the indicated representation. `'X'` or any key for `.obsm` is valid.
    If `None`, the representation is chosen automatically:
    For `.n_vars` < :attr:`~scanpy._settings.ScanpyConfig.N_PCS` (default: 50), `.X` is used, otherwise 'X_pca' is used.
    If 'X_pca' is not present, it’s computed with default parameters or `n_pcs` if present.\
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_doc.py,python,"doc_n_pcs = """"""\
n_pcs
    Use this many PCs. If `n_pcs==0` use `.X` if `use_rep is None`.\
""""""",constant,,,,"Constant: doc_n_pcs = """"""\
n_pcs
    Use this many PCs. If `n_pcs==0` use `.X` if `use_rep is None`.\
""""""",scverse,scanpy,1.10.1,,,,,"doc_n_pcs = """"""\
n_pcs
    Use this many PCs. If `n_pcs==0` use `.X` if `use_rep is None`.\
""""""",doc_n_pcs,"""""""\
n_pcs
    Use this many PCs. If `n_pcs==0` use `.X` if `use_rep is None`.\
""""""",,,,,,,,,,,
,_doc.py,python,,,,,,File: scanpy\neighbors,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_doc.py,python,,,,,,Directory: scanpy\neighbors\_doc.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,"KnnTransformerLike.fit(self, X, y: None = None)",class_method,,,,"Class method: KnnTransformerLike.fit(self, X, y: None = None)",scverse,scanpy,1.10.1,,,,,,,,,KnnTransformerLike,fit,"(self, X, y: None = None)",,,,,,,
scverse_scanpy_1.10.1,_types.py,python,"KnnTransformerLike.transform(self, X) -> spmatrix",class_method,,,,"Class method: KnnTransformerLike.transform(self, X) -> spmatrix",scverse,scanpy,1.10.1,,,,,,,,,KnnTransformerLike,transform,"(self, X)",,,spmatrix,,,,
scverse_scanpy_1.10.1,_types.py,python,"KnnTransformerLike.fit_transform(self, X, y: None = None) -> spmatrix",class_method,,,,"Class method: KnnTransformerLike.fit_transform(self, X, y: None = None) -> spmatrix",scverse,scanpy,1.10.1,,,,,,,,,KnnTransformerLike,fit_transform,"(self, X, y: None = None)",,,spmatrix,,,,
scverse_scanpy_1.10.1,_types.py,python,"KnnTransformerLike.get_params(self, deep: bool = True) -> dict[str, Any]",class_method,,,,"Class method: KnnTransformerLike.get_params(self, deep: bool = True) -> dict[str, Any]",scverse,scanpy,1.10.1,,,,,,,,,KnnTransformerLike,get_params,"(self, deep: bool = True)",,,"dict[str, Any]",,,,
scverse_scanpy_1.10.1,_types.py,python,"KnnTransformerLike.set_params(self, **params: Any) -> Self",class_method,,,,"Class method: KnnTransformerLike.set_params(self, **params: Any) -> Self",scverse,scanpy,1.10.1,,,,,,,,,KnnTransformerLike,set_params,"(self, **params: Any)",,,Self,,,,
scverse_scanpy_1.10.1,_types.py,python,KnnTransformerLike(Protocol),class,,,,Class: KnnTransformerLike(Protocol),scverse,scanpy,1.10.1,,,,,,,,,KnnTransformerLike,,,,,,,(Protocol),,
scverse_scanpy_1.10.1,_types.py,python,"_Method = Literal[""umap"", ""gauss""]",constant,,,,"Constant: _Method = Literal[""umap"", ""gauss""]",scverse,scanpy,1.10.1,,,,,"_Method = Literal[""umap"", ""gauss""]",_Method,"Literal[""umap"", ""gauss""]",,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,"_KnownTransformer = Literal[""pynndescent"", ""sklearn"", ""rapids""]",constant,,,,"Constant: _KnownTransformer = Literal[""pynndescent"", ""sklearn"", ""rapids""]",scverse,scanpy,1.10.1,,,,,"_KnownTransformer = Literal[""pynndescent"", ""sklearn"", ""rapids""]",_KnownTransformer,"Literal[""pynndescent"", ""sklearn"", ""rapids""]",,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,"_MetricFn = _C[[np.ndarray, np.ndarray], float]",constant,,,,"Constant: _MetricFn = _C[[np.ndarray, np.ndarray], float]",scverse,scanpy,1.10.1,,,,,"_MetricFn = _C[[np.ndarray, np.ndarray], float]",_MetricFn,"_C[[np.ndarray, np.ndarray], float]",,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,"_MetricSparseCapable = Literal[
    ""cityblock"", ""cosine"", ""euclidean"", ""l1"", ""l2"", ""manhattan""
]",constant,,,,"Constant: _MetricSparseCapable = Literal[
    ""cityblock"", ""cosine"", ""euclidean"", ""l1"", ""l2"", ""manhattan""
]",scverse,scanpy,1.10.1,,,,,"_MetricSparseCapable = Literal[
    ""cityblock"", ""cosine"", ""euclidean"", ""l1"", ""l2"", ""manhattan""
]",_MetricSparseCapable,"Literal[
    ""cityblock"", ""cosine"", ""euclidean"", ""l1"", ""l2"", ""manhattan""
]",,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,"_MetricScipySpatial = Literal[
    ""braycurtis"",
    ""canberra"",
    ""chebyshev"",
    ""correlation"",
    ""dice"",
    ""hamming"",
    ""jaccard"",
    ""kulsinski"",
    ""mahalanobis"",
    ""minkowski"",
    ""rogerstanimoto"",
    ""russellrao"",
    ""seuclidean"",
    ""sokalmichener"",
    ""sokalsneath"",
    ""sqeuclidean"",
    ""yule"",
]",constant,,,,"Constant: _MetricScipySpatial = Literal[
    ""braycurtis"",
    ""canberra"",
    ""chebyshev"",
    ""correlation"",
    ""dice"",
    ""hamming"",
    ""jaccard"",
    ""kulsinski"",
    ""mahalanobis"",
    ""minkowski"",
    ""rogerstanimoto"",
    ""russellrao"",
    ""seuclidean"",
    ""sokalmichener"",
    ""sokalsneath"",
    ""sqeuclidean"",
    ""yule"",
]",scverse,scanpy,1.10.1,,,,,"_MetricScipySpatial = Literal[
    ""braycurtis"",
    ""canberra"",
    ""chebyshev"",
    ""correlation"",
    ""dice"",
    ""hamming"",
    ""jaccard"",
    ""kulsinski"",
    ""mahalanobis"",
    ""minkowski"",
    ""rogerstanimoto"",
    ""russellrao"",
    ""seuclidean"",
    ""sokalmichener"",
    ""sokalsneath"",
    ""sqeuclidean"",
    ""yule"",
]",_MetricScipySpatial,"Literal[
    ""braycurtis"",
    ""canberra"",
    ""chebyshev"",
    ""correlation"",
    ""dice"",
    ""hamming"",
    ""jaccard"",
    ""kulsinski"",
    ""mahalanobis"",
    ""minkowski"",
    ""rogerstanimoto"",
    ""russellrao"",
    ""seuclidean"",
    ""sokalmichener"",
    ""sokalsneath"",
    ""sqeuclidean"",
    ""yule"",
]",,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,"_Metric = _U[_MetricSparseCapable, _MetricScipySpatial]",constant,,,,"Constant: _Metric = _U[_MetricSparseCapable, _MetricScipySpatial]",scverse,scanpy,1.10.1,,,,,"_Metric = _U[_MetricSparseCapable, _MetricScipySpatial]",_Metric,"_U[_MetricSparseCapable, _MetricScipySpatial]",,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, Protocol",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, Protocol",Any,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, Protocol",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,Protocol from typing,import,,,,Import: Protocol from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, Protocol",Protocol,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,Callable from typing,import,,,,Import: Callable from typing,scverse,scanpy,1.10.1,from typing import Callable as _C,Callable,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,Union from typing,import,,,,Import: Union from typing,scverse,scanpy,1.10.1,from typing import Union as _U,Union,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
,_types.py,python,,,,,,File: scanpy\neighbors,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_types.py,python,,,,,,Directory: scanpy\neighbors\_types.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,KwdsForTransformer.n_neighbors: int,class_field,,,,Class field: KwdsForTransformer.n_neighbors: int,scverse,scanpy,1.10.1,,,,,,,,,KwdsForTransformer,,,n_neighbors: int,,,,,n_neighbors,
scverse_scanpy_1.10.1,__init__.py,python,KwdsForTransformer.metric: _Metric | _MetricFn,class_field,,,,Class field: KwdsForTransformer.metric: _Metric | _MetricFn,scverse,scanpy,1.10.1,,,,,,,,,KwdsForTransformer,,,metric: _Metric | _MetricFn,,,,,metric,
scverse_scanpy_1.10.1,__init__.py,python,"KwdsForTransformer.metric_params: Mapping[str, Any]",class_field,,,,"Class field: KwdsForTransformer.metric_params: Mapping[str, Any]",scverse,scanpy,1.10.1,,,,,,,,,KwdsForTransformer,,,"metric_params: Mapping[str, Any]",,,,,metric_params,
scverse_scanpy_1.10.1,__init__.py,python,KwdsForTransformer.random_state: AnyRandom,class_field,,,,Class field: KwdsForTransformer.random_state: AnyRandom,scverse,scanpy,1.10.1,,,,,,,,,KwdsForTransformer,,,random_state: AnyRandom,,,,,random_state,
scverse_scanpy_1.10.1,__init__.py,python,FlatTree.hyperplanes: None,class_field,,,,Class field: FlatTree.hyperplanes: None,scverse,scanpy,1.10.1,,,,,,,,,FlatTree,,,hyperplanes: None,,,,,hyperplanes,
scverse_scanpy_1.10.1,__init__.py,python,FlatTree.offsets: None,class_field,,,,Class field: FlatTree.offsets: None,scverse,scanpy,1.10.1,,,,,,,,,FlatTree,,,offsets: None,,,,,offsets,
scverse_scanpy_1.10.1,__init__.py,python,FlatTree.children: None,class_field,,,,Class field: FlatTree.children: None,scverse,scanpy,1.10.1,,,,,,,,,FlatTree,,,children: None,,,,,children,
scverse_scanpy_1.10.1,__init__.py,python,FlatTree.indices: None,class_field,,,,Class field: FlatTree.indices: None,scverse,scanpy,1.10.1,,,,,,,,,FlatTree,,,indices: None,,,,,indices,
scverse_scanpy_1.10.1,__init__.py,python,[instance] OnFlySymMatrix.get_row = get_row,class_field,,,,Class field: [instance] OnFlySymMatrix.get_row = get_row,scverse,scanpy,1.10.1,,,,,,,,,OnFlySymMatrix,__init__,"(
        self,
        get_row: Callable[[Any], np.ndarray],
        shape: tuple[int, int],
        *,
        DC_start: int = 0,
        DC_end: int = -1,
        rows: MutableMapping[Any, np.ndarray] | None = None,
        restrict_array: np.ndarray | None = None,
    )",self.get_row = get_row,self.get_row = get_row,,,,,
scverse_scanpy_1.10.1,__init__.py,python,[instance] OnFlySymMatrix.shape = shape,class_field,,,,Class field: [instance] OnFlySymMatrix.shape = shape,scverse,scanpy,1.10.1,,,,,,,,,OnFlySymMatrix,__init__,"(
        self,
        get_row: Callable[[Any], np.ndarray],
        shape: tuple[int, int],
        *,
        DC_start: int = 0,
        DC_end: int = -1,
        rows: MutableMapping[Any, np.ndarray] | None = None,
        restrict_array: np.ndarray | None = None,
    )",self.shape = shape,self.shape = shape,,,,,
scverse_scanpy_1.10.1,__init__.py,python,[instance] OnFlySymMatrix.DC_start = DC_start,class_field,,,,Class field: [instance] OnFlySymMatrix.DC_start = DC_start,scverse,scanpy,1.10.1,,,,,,,,,OnFlySymMatrix,__init__,"(
        self,
        get_row: Callable[[Any], np.ndarray],
        shape: tuple[int, int],
        *,
        DC_start: int = 0,
        DC_end: int = -1,
        rows: MutableMapping[Any, np.ndarray] | None = None,
        restrict_array: np.ndarray | None = None,
    )",self.DC_start = DC_start,self.DC_start = DC_start,,,,,
scverse_scanpy_1.10.1,__init__.py,python,[instance] OnFlySymMatrix.DC_end = DC_end,class_field,,,,Class field: [instance] OnFlySymMatrix.DC_end = DC_end,scverse,scanpy,1.10.1,,,,,,,,,OnFlySymMatrix,__init__,"(
        self,
        get_row: Callable[[Any], np.ndarray],
        shape: tuple[int, int],
        *,
        DC_start: int = 0,
        DC_end: int = -1,
        rows: MutableMapping[Any, np.ndarray] | None = None,
        restrict_array: np.ndarray | None = None,
    )",self.DC_end = DC_end,self.DC_end = DC_end,,,,,
scverse_scanpy_1.10.1,__init__.py,python,[instance] OnFlySymMatrix.rows = {} if rows is None else rows,class_field,,,,Class field: [instance] OnFlySymMatrix.rows = {} if rows is None else rows,scverse,scanpy,1.10.1,,,,,,,,,OnFlySymMatrix,__init__,"(
        self,
        get_row: Callable[[Any], np.ndarray],
        shape: tuple[int, int],
        *,
        DC_start: int = 0,
        DC_end: int = -1,
        rows: MutableMapping[Any, np.ndarray] | None = None,
        restrict_array: np.ndarray | None = None,
    )",self.rows = {} if rows is None else rows,self.rows = {} if rows is None else rows,,,,,
scverse_scanpy_1.10.1,__init__.py,python,[instance] OnFlySymMatrix.restrict_array = restrict_array,class_field,,,,Class field: [instance] OnFlySymMatrix.restrict_array = restrict_array,scverse,scanpy,1.10.1,,,,,,,,,OnFlySymMatrix,__init__,"(
        self,
        get_row: Callable[[Any], np.ndarray],
        shape: tuple[int, int],
        *,
        DC_start: int = 0,
        DC_end: int = -1,
        rows: MutableMapping[Any, np.ndarray] | None = None,
        restrict_array: np.ndarray | None = None,
    )",self.restrict_array = restrict_array,self.restrict_array = restrict_array,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"OnFlySymMatrix.__init__(
        self,
        get_row: Callable[[Any], np.ndarray],
        shape: tuple[int, int],
        *,
        DC_start: int = 0,
        DC_end: int = -1,
        rows: MutableMapping[Any, np.ndarray] | None = None,
        restrict_array: np.ndarray | None = None,
    )",class_method,,,,"Class method: OnFlySymMatrix.__init__(
        self,
        get_row: Callable[[Any], np.ndarray],
        shape: tuple[int, int],
        *,
        DC_start: int = 0,
        DC_end: int = -1,
        rows: MutableMapping[Any, np.ndarray] | None = None,
        restrict_array: np.ndarray | None = None,
    )",scverse,scanpy,1.10.1,,,,,,,,,OnFlySymMatrix,__init__,"(
        self,
        get_row: Callable[[Any], np.ndarray],
        shape: tuple[int, int],
        *,
        DC_start: int = 0,
        DC_end: int = -1,
        rows: MutableMapping[Any, np.ndarray] | None = None,
        restrict_array: np.ndarray | None = None,
    )",,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"OnFlySymMatrix.__getitem__(self, index)",class_method,,,,"Class method: OnFlySymMatrix.__getitem__(self, index)",scverse,scanpy,1.10.1,,,,,,,,,OnFlySymMatrix,__getitem__,"(self, index)",,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"OnFlySymMatrix.restrict(self, index_array)",class_method,,,,"Class method: OnFlySymMatrix.restrict(self, index_array)",scverse,scanpy,1.10.1,,,,,,,,,OnFlySymMatrix,restrict,"(self, index_array)",,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"[old_positionals(""n_dcs"", ""neighbors_key"")] Neighbors.__init__(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        neighbors_key: str | None = None,
    )",class_method,,,,"Class method: [old_positionals(""n_dcs"", ""neighbors_key"")] Neighbors.__init__(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        neighbors_key: str | None = None,
    )",scverse,scanpy,1.10.1,,,,,,,,,Neighbors,__init__,"(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        neighbors_key: str | None = None,
    )",,,,"old_positionals(""n_dcs"", ""neighbors_key"")",,,
scverse_scanpy_1.10.1,__init__.py,python,[property] Neighbors.rp_forest(self) -> RPForestDict | None,class_method,,,,Class method: [property] Neighbors.rp_forest(self) -> RPForestDict | None,scverse,scanpy,1.10.1,,,,,,,,,Neighbors,rp_forest,(self),,,RPForestDict | None,property,,,
scverse_scanpy_1.10.1,__init__.py,python,[property] Neighbors.distances(self) -> np.ndarray | csr_matrix | None,class_method,,,,Class method: [property] Neighbors.distances(self) -> np.ndarray | csr_matrix | None,scverse,scanpy,1.10.1,,,,,,,,,Neighbors,distances,(self),,,np.ndarray | csr_matrix | None,property,,,
scverse_scanpy_1.10.1,__init__.py,python,[property] Neighbors.connectivities(self) -> np.ndarray | csr_matrix | None,class_method,,,,Class method: [property] Neighbors.connectivities(self) -> np.ndarray | csr_matrix | None,scverse,scanpy,1.10.1,,,,,,,,,Neighbors,connectivities,(self),,,np.ndarray | csr_matrix | None,property,,,
scverse_scanpy_1.10.1,__init__.py,python,[property] Neighbors.transitions(self) -> np.ndarray | csr_matrix,class_method,,,,Class method: [property] Neighbors.transitions(self) -> np.ndarray | csr_matrix,scverse,scanpy,1.10.1,,,,,,,,,Neighbors,transitions,(self),,,np.ndarray | csr_matrix,property,,,
scverse_scanpy_1.10.1,__init__.py,python,[property] Neighbors.transitions_sym(self) -> np.ndarray | csr_matrix | None,class_method,,,,Class method: [property] Neighbors.transitions_sym(self) -> np.ndarray | csr_matrix | None,scverse,scanpy,1.10.1,,,,,,,,,Neighbors,transitions_sym,(self),,,np.ndarray | csr_matrix | None,property,,,
scverse_scanpy_1.10.1,__init__.py,python,[property] Neighbors.eigen_values(self) -> np.ndarray,class_method,,,,Class method: [property] Neighbors.eigen_values(self) -> np.ndarray,scverse,scanpy,1.10.1,,,,,,,,,Neighbors,eigen_values,(self),,,np.ndarray,property,,,
scverse_scanpy_1.10.1,__init__.py,python,[property] Neighbors.eigen_basis(self) -> np.ndarray,class_method,,,,Class method: [property] Neighbors.eigen_basis(self) -> np.ndarray,scverse,scanpy,1.10.1,,,,,,,,,Neighbors,eigen_basis,(self),,,np.ndarray,property,,,
scverse_scanpy_1.10.1,__init__.py,python,[property] Neighbors.distances_dpt(self) -> OnFlySymMatrix,class_method,,,,Class method: [property] Neighbors.distances_dpt(self) -> OnFlySymMatrix,scverse,scanpy,1.10.1,,,,,,,,,Neighbors,distances_dpt,(self),,,OnFlySymMatrix,property,,,
scverse_scanpy_1.10.1,__init__.py,python,Neighbors.to_igraph(self) -> Graph,class_method,,,,Class method: Neighbors.to_igraph(self) -> Graph,scverse,scanpy,1.10.1,,,,,,,,,Neighbors,to_igraph,(self),,,Graph,,,,
scverse_scanpy_1.10.1,__init__.py,python,"[_doc_params(n_pcs=doc_n_pcs, use_rep=doc_use_rep)] Neighbors.compute_neighbors(
        self,
        n_neighbors: int = 30,
        n_pcs: int | None = None,
        *,
        use_rep: str | None = None,
        knn: bool = True,
        method: _Method | None = ""umap"",
        transformer: KnnTransformerLike | _KnownTransformer | None = None,
        metric: _Metric | _MetricFn = ""euclidean"",
        metric_kwds: Mapping[str, Any] = MappingProxyType({}),
        random_state: AnyRandom = 0,
    ) -> None",class_method,,,,"Class method: [_doc_params(n_pcs=doc_n_pcs, use_rep=doc_use_rep)] Neighbors.compute_neighbors(
        self,
        n_neighbors: int = 30,
        n_pcs: int | None = None,
        *,
        use_rep: str | None = None,
        knn: bool = True,
        method: _Method | None = ""umap"",
        transformer: KnnTransformerLike | _KnownTransformer | None = None,
        metric: _Metric | _MetricFn = ""euclidean"",
        metric_kwds: Mapping[str, Any] = MappingProxyType({}),
        random_state: AnyRandom = 0,
    ) -> None",scverse,scanpy,1.10.1,,,,,,,,,Neighbors,compute_neighbors,"(
        self,
        n_neighbors: int = 30,
        n_pcs: int | None = None,
        *,
        use_rep: str | None = None,
        knn: bool = True,
        method: _Method | None = ""umap"",
        transformer: KnnTransformerLike | _KnownTransformer | None = None,
        metric: _Metric | _MetricFn = ""euclidean"",
        metric_kwds: Mapping[str, Any] = MappingProxyType({}),
        random_state: AnyRandom = 0,
    )",,,None,"_doc_params(n_pcs=doc_n_pcs, use_rep=doc_use_rep)",,,
scverse_scanpy_1.10.1,__init__.py,python,"Neighbors._handle_transformer(
        self,
        method: _Method | Literal[""gauss""] | None,
        transformer: KnnTransformerLike | _KnownTransformer | None,
        *,
        knn: bool,
        kwds: KwdsForTransformer,
    ) -> tuple[_Method | None, KnnTransformerLike, bool]",class_method,,,,"Class method: Neighbors._handle_transformer(
        self,
        method: _Method | Literal[""gauss""] | None,
        transformer: KnnTransformerLike | _KnownTransformer | None,
        *,
        knn: bool,
        kwds: KwdsForTransformer,
    ) -> tuple[_Method | None, KnnTransformerLike, bool]",scverse,scanpy,1.10.1,,,,,,,,,Neighbors,_handle_transformer,"(
        self,
        method: _Method | Literal[""gauss""] | None,
        transformer: KnnTransformerLike | _KnownTransformer | None,
        *,
        knn: bool,
        kwds: KwdsForTransformer,
    )",,,"tuple[_Method | None, KnnTransformerLike, bool]",,,,
scverse_scanpy_1.10.1,__init__.py,python,"Neighbors.compute_transitions(self, density_normalize: bool = True)",class_method,,,,"Class method: Neighbors.compute_transitions(self, density_normalize: bool = True)",scverse,scanpy,1.10.1,,,,,,,,,Neighbors,compute_transitions,"(self, density_normalize: bool = True)",,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"Neighbors.compute_eigen(
        self,
        n_comps: int = 15,
        sym: bool | None = None,
        sort: Literal[""decrease"", ""increase""] = ""decrease"",
        random_state: AnyRandom = 0,
    )",class_method,,,,"Class method: Neighbors.compute_eigen(
        self,
        n_comps: int = 15,
        sym: bool | None = None,
        sort: Literal[""decrease"", ""increase""] = ""decrease"",
        random_state: AnyRandom = 0,
    )",scverse,scanpy,1.10.1,,,,,,,,,Neighbors,compute_eigen,"(
        self,
        n_comps: int = 15,
        sym: bool | None = None,
        sort: Literal[""decrease"", ""increase""] = ""decrease"",
        random_state: AnyRandom = 0,
    )",,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Neighbors._init_iroot(self),class_method,,,,Class method: Neighbors._init_iroot(self),scverse,scanpy,1.10.1,,,,,,,,,Neighbors,_init_iroot,(self),,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"Neighbors._get_dpt_row(self, i: int) -> np.ndarray",class_method,,,,"Class method: Neighbors._get_dpt_row(self, i: int) -> np.ndarray",scverse,scanpy,1.10.1,,,,,,,,,Neighbors,_get_dpt_row,"(self, i: int)",,,np.ndarray,,,,
scverse_scanpy_1.10.1,__init__.py,python,Neighbors._set_pseudotime(self),class_method,,,,Class method: Neighbors._set_pseudotime(self),scverse,scanpy,1.10.1,,,,,,,,,Neighbors,_set_pseudotime,(self),,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"Neighbors._set_iroot_via_xroot(self, xroot: np.ndarray)",class_method,,,,"Class method: Neighbors._set_iroot_via_xroot(self, xroot: np.ndarray)",scverse,scanpy,1.10.1,,,,,,,,,Neighbors,_set_iroot_via_xroot,"(self, xroot: np.ndarray)",,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,KwdsForTransformer(TypedDict),class,,,,Class: KwdsForTransformer(TypedDict),scverse,scanpy,1.10.1,,,,,,,,,KwdsForTransformer,,,,,,,(TypedDict),,
scverse_scanpy_1.10.1,__init__.py,python,FlatTree(NamedTuple),class,,,,Class: FlatTree(NamedTuple),scverse,scanpy,1.10.1,,,,,,,,,FlatTree,,,,,,,(NamedTuple),,
scverse_scanpy_1.10.1,__init__.py,python,OnFlySymMatrix,class,,,,Class: OnFlySymMatrix,scverse,scanpy,1.10.1,,,,,,,,,OnFlySymMatrix,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Neighbors,class,,,,Class: Neighbors,scverse,scanpy,1.10.1,,,,,,,,,Neighbors,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,_backwards_compat_get_full_X_diffmap(adata: AnnData) -> np.ndarray,function,_backwards_compat_get_full_X_diffmap,(adata: AnnData),np.ndarray,Function: _backwards_compat_get_full_X_diffmap(adata: AnnData) -> np.ndarray,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,_backwards_compat_get_full_eval(adata: AnnData),function,_backwards_compat_get_full_eval,(adata: AnnData),,Function: _backwards_compat_get_full_eval(adata: AnnData),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,_make_forest_dict(forest),function,_make_forest_dict,(forest),,Function: _make_forest_dict(forest),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"RPForestDict = Mapping[str, Mapping[str, np.ndarray]]",constant,,,,"Constant: RPForestDict = Mapping[str, Mapping[str, np.ndarray]]",scverse,scanpy,1.10.1,,,,,"RPForestDict = Mapping[str, Mapping[str, np.ndarray]]",RPForestDict,"Mapping[str, Mapping[str, np.ndarray]]",,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,N_DCS = 15,constant,,,,Constant: N_DCS = 15,scverse,scanpy,1.10.1,,,,,N_DCS = 15,N_DCS,15,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,N_PCS = settings.N_PCS,constant,,,,Constant: N_PCS = settings.N_PCS,scverse,scanpy,1.10.1,,,,,N_PCS = settings.N_PCS,N_PCS,settings.N_PCS,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,indent from textwrap,import,,,,Import: indent from textwrap,scverse,scanpy,1.10.1,from textwrap import indent,indent,textwrap,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,MappingProxyType from types,import,,,,Import: MappingProxyType from types,scverse,scanpy,1.10.1,from types import MappingProxyType,MappingProxyType,types,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, NamedTuple, TypedDict, get_args",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, NamedTuple, TypedDict, get_args",Any,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, NamedTuple, TypedDict, get_args",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,NamedTuple from typing,import,,,,Import: NamedTuple from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, NamedTuple, TypedDict, get_args",NamedTuple,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,TypedDict from typing,import,,,,Import: TypedDict from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, NamedTuple, TypedDict, get_args",TypedDict,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,get_args from typing,import,,,,Import: get_args from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, NamedTuple, TypedDict, get_args",get_args,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,warn from warnings,import,,,,Import: warn from warnings,scverse,scanpy,1.10.1,from warnings import warn,warn,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,scipy,import,,,,Import: scipy,scverse,scanpy,1.10.1,import scipy,scipy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Callable from collections.abc,local_import,,,,Import: Callable from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Callable, Mapping, MutableMapping",Callable,collections.abc,collections.abc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Mapping from collections.abc,local_import,,,,Import: Mapping from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Callable, Mapping, MutableMapping",Mapping,collections.abc,collections.abc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,MutableMapping from collections.abc,local_import,,,,Import: MutableMapping from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Callable, Mapping, MutableMapping",MutableMapping,collections.abc,collections.abc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse",csr_matrix,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse",issparse,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,check_random_state from sklearn.utils,local_import,,,,Import: check_random_state from sklearn.utils,scverse,scanpy,1.10.1,from sklearn.utils import check_random_state,check_random_state,sklearn.utils,sklearn.utils,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\neighbors,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\neighbors\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,[instance] RapidsKNNTransformer.n_neighbors = n_neighbors,class_field,,,,Class field: [instance] RapidsKNNTransformer.n_neighbors = n_neighbors,scverse,scanpy,1.10.1,,,,,,,,,RapidsKNNTransformer,__init__,"(
        self,
        *,
        handle=None,
        algorithm: _Algorithm | Literal[""auto""] = ""auto"",
        n_neighbors: int,
        metric: _Metric = ""euclidean"",
        p: int = 2,
        algo_params: Mapping[str, Any] | None = None,
        metric_params: Mapping[str, Any] | None = None,
        random_state=None,
    )",self.n_neighbors = n_neighbors,self.n_neighbors = n_neighbors,,,,,
scverse_scanpy_1.10.1,rapids.py,python,[instance] RapidsKNNTransformer.metric = metric,class_field,,,,Class field: [instance] RapidsKNNTransformer.metric = metric,scverse,scanpy,1.10.1,,,,,,,,,RapidsKNNTransformer,__init__,"(
        self,
        *,
        handle=None,
        algorithm: _Algorithm | Literal[""auto""] = ""auto"",
        n_neighbors: int,
        metric: _Metric = ""euclidean"",
        p: int = 2,
        algo_params: Mapping[str, Any] | None = None,
        metric_params: Mapping[str, Any] | None = None,
        random_state=None,
    )",self.metric = metric,self.metric = metric,,,,,
scverse_scanpy_1.10.1,rapids.py,python,[instance] RapidsKNNTransformer.p = p,class_field,,,,Class field: [instance] RapidsKNNTransformer.p = p,scverse,scanpy,1.10.1,,,,,,,,,RapidsKNNTransformer,__init__,"(
        self,
        *,
        handle=None,
        algorithm: _Algorithm | Literal[""auto""] = ""auto"",
        n_neighbors: int,
        metric: _Metric = ""euclidean"",
        p: int = 2,
        algo_params: Mapping[str, Any] | None = None,
        metric_params: Mapping[str, Any] | None = None,
        random_state=None,
    )",self.p = p,self.p = p,,,,,
scverse_scanpy_1.10.1,rapids.py,python,"[instance] RapidsKNNTransformer.nn = NearestNeighbors(
            n_neighbors=n_neighbors,
            # https://docs.rapids.ai/api/cuml/nightly/api/#verbosity-levels
            verbose=settings.verbosity + 2,
            handle=handle,
            algorithm=algorithm,
            metric=metric,
            p=p,
            algo_params=algo_params,
            metric_params=metric_params,
            output_type=""input"",  # could also be None to respect global setting
        )",class_field,,,,"Class field: [instance] RapidsKNNTransformer.nn = NearestNeighbors(
            n_neighbors=n_neighbors,
            # https://docs.rapids.ai/api/cuml/nightly/api/#verbosity-levels
            verbose=settings.verbosity + 2,
            handle=handle,
            algorithm=algorithm,
            metric=metric,
            p=p,
            algo_params=algo_params,
            metric_params=metric_params,
            output_type=""input"",  # could also be None to respect global setting
        )",scverse,scanpy,1.10.1,,,,,,,,,RapidsKNNTransformer,__init__,"(
        self,
        *,
        handle=None,
        algorithm: _Algorithm | Literal[""auto""] = ""auto"",
        n_neighbors: int,
        metric: _Metric = ""euclidean"",
        p: int = 2,
        algo_params: Mapping[str, Any] | None = None,
        metric_params: Mapping[str, Any] | None = None,
        random_state=None,
    )","self.nn = NearestNeighbors(
            n_neighbors=n_neighbors,
            # https://docs.rapids.ai/api/cuml/nightly/api/#verbosity-levels
            verbose=settings.verbosity + 2,
            handle=handle,
            algorithm=algorithm,
            metric=metric,
            p=p,
            algo_params=algo_params,
            metric_params=metric_params,
            output_type=""input"",  # could also be None to respect global setting
        )","self.nn = NearestNeighbors(
            n_neighbors=n_neighbors,
            # https://docs.rapids.ai/api/cuml/nightly/api/#verbosity-levels
            verbose=settings.verbosity + 2,
            handle=handle,
            algorithm=algorithm,
            metric=metric,
            p=p,
            algo_params=algo_params,
            metric_params=metric_params,
            output_type=""input"",  # could also be None to respect global setting
        )",,,,,
scverse_scanpy_1.10.1,rapids.py,python,"RapidsKNNTransformer.__init__(
        self,
        *,
        handle=None,
        algorithm: _Algorithm | Literal[""auto""] = ""auto"",
        n_neighbors: int,
        metric: _Metric = ""euclidean"",
        p: int = 2,
        algo_params: Mapping[str, Any] | None = None,
        metric_params: Mapping[str, Any] | None = None,
        random_state=None,
    ) -> None",class_method,,,,"Class method: RapidsKNNTransformer.__init__(
        self,
        *,
        handle=None,
        algorithm: _Algorithm | Literal[""auto""] = ""auto"",
        n_neighbors: int,
        metric: _Metric = ""euclidean"",
        p: int = 2,
        algo_params: Mapping[str, Any] | None = None,
        metric_params: Mapping[str, Any] | None = None,
        random_state=None,
    ) -> None",scverse,scanpy,1.10.1,,,,,,,,,RapidsKNNTransformer,__init__,"(
        self,
        *,
        handle=None,
        algorithm: _Algorithm | Literal[""auto""] = ""auto"",
        n_neighbors: int,
        metric: _Metric = ""euclidean"",
        p: int = 2,
        algo_params: Mapping[str, Any] | None = None,
        metric_params: Mapping[str, Any] | None = None,
        random_state=None,
    )",,,None,,,,
scverse_scanpy_1.10.1,rapids.py,python,RapidsKNNTransformer.__sklearn_is_fitted__(self) -> bool,class_method,,,,Class method: RapidsKNNTransformer.__sklearn_is_fitted__(self) -> bool,scverse,scanpy,1.10.1,,,,,,,,,RapidsKNNTransformer,__sklearn_is_fitted__,(self),,,bool,,,,
scverse_scanpy_1.10.1,rapids.py,python,"RapidsKNNTransformer.fit(self, X: ArrayLike, y: Any = None) -> RapidsKNNTransformer",class_method,,,,"Class method: RapidsKNNTransformer.fit(self, X: ArrayLike, y: Any = None) -> RapidsKNNTransformer",scverse,scanpy,1.10.1,,,,,,,,,RapidsKNNTransformer,fit,"(self, X: ArrayLike, y: Any = None)",,,RapidsKNNTransformer,,,,
scverse_scanpy_1.10.1,rapids.py,python,"RapidsKNNTransformer.transform(self, X: ArrayLike) -> csr_matrix",class_method,,,,"Class method: RapidsKNNTransformer.transform(self, X: ArrayLike) -> csr_matrix",scverse,scanpy,1.10.1,,,,,,,,,RapidsKNNTransformer,transform,"(self, X: ArrayLike)",,,csr_matrix,,,,
scverse_scanpy_1.10.1,rapids.py,python,"RapidsKNNTransformer._more_tags(self) -> dict[str, Any]",class_method,,,,"Class method: RapidsKNNTransformer._more_tags(self) -> dict[str, Any]",scverse,scanpy,1.10.1,,,,,,,,,RapidsKNNTransformer,_more_tags,(self),,,"dict[str, Any]",,,,
scverse_scanpy_1.10.1,rapids.py,python,"RapidsKNNTransformer(TransformerChecksMixin, TransformerMixin, BaseEstimator)",class,,,,"Class: RapidsKNNTransformer(TransformerChecksMixin, TransformerMixin, BaseEstimator)",scverse,scanpy,1.10.1,,,,,,,,,RapidsKNNTransformer,,,,,,,"(TransformerChecksMixin, TransformerMixin, BaseEstimator)",,
scverse_scanpy_1.10.1,rapids.py,python,"_Algorithm = Literal[""rbc"", ""brute"", ""ivfflat"", ""ivfpq""]",constant,,,,"Constant: _Algorithm = Literal[""rbc"", ""brute"", ""ivfflat"", ""ivfpq""]",scverse,scanpy,1.10.1,,,,,"_Algorithm = Literal[""rbc"", ""brute"", ""ivfflat"", ""ivfpq""]",_Algorithm,"Literal[""rbc"", ""brute"", ""ivfflat"", ""ivfpq""]",,,,,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,"_Metric = Literal[
    ""l1"",
    ""cityblock"",
    ""taxicab"",
    ""manhattan"",
    ""euclidean"",
    ""l2"",
    ""braycurtis"",
    ""canberra"",
    ""minkowski"",
    ""chebyshev"",
    ""jensenshannon"",
    ""cosine"",
    ""correlation"",
]",constant,,,,"Constant: _Metric = Literal[
    ""l1"",
    ""cityblock"",
    ""taxicab"",
    ""manhattan"",
    ""euclidean"",
    ""l2"",
    ""braycurtis"",
    ""canberra"",
    ""minkowski"",
    ""chebyshev"",
    ""jensenshannon"",
    ""cosine"",
    ""correlation"",
]",scverse,scanpy,1.10.1,,,,,"_Metric = Literal[
    ""l1"",
    ""cityblock"",
    ""taxicab"",
    ""manhattan"",
    ""euclidean"",
    ""l2"",
    ""braycurtis"",
    ""canberra"",
    ""minkowski"",
    ""chebyshev"",
    ""jensenshannon"",
    ""cosine"",
    ""correlation"",
]",_Metric,"Literal[
    ""l1"",
    ""cityblock"",
    ""taxicab"",
    ""manhattan"",
    ""euclidean"",
    ""l2"",
    ""braycurtis"",
    ""canberra"",
    ""minkowski"",
    ""chebyshev"",
    ""jensenshannon"",
    ""cosine"",
    ""correlation"",
]",,,,,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",Any,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,BaseEstimator from sklearn.base,local_import,,,,Import: BaseEstimator from sklearn.base,scverse,scanpy,1.10.1,"from sklearn.base import BaseEstimator, TransformerMixin",BaseEstimator,sklearn.base,sklearn.base,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,TransformerMixin from sklearn.base,local_import,,,,Import: TransformerMixin from sklearn.base,scverse,scanpy,1.10.1,"from sklearn.base import BaseEstimator, TransformerMixin",TransformerMixin,sklearn.base,sklearn.base,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,NotFittedError from sklearn.exceptions,local_import,,,,Import: NotFittedError from sklearn.exceptions,scverse,scanpy,1.10.1,from sklearn.exceptions import NotFittedError,NotFittedError,sklearn.exceptions,sklearn.exceptions,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,check_is_fitted from sklearn.utils.validation,local_import,,,,Import: check_is_fitted from sklearn.utils.validation,scverse,scanpy,1.10.1,from sklearn.utils.validation import check_is_fitted,check_is_fitted,sklearn.utils.validation,sklearn.utils.validation,,,,,,,,,,,,,,
,rapids.py,python,,,,,,File: scanpy\neighbors\_backends,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,rapids.py,python,,,,,,Directory: scanpy\neighbors\_backends\rapids.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,"TransformerChecksMixin._transform_checks(self, X, *fitted_props, **check_params)",class_method,,,,"Class method: TransformerChecksMixin._transform_checks(self, X, *fitted_props, **check_params)",scverse,scanpy,1.10.1,,,,,,,,,TransformerChecksMixin,_transform_checks,"(self, X, *fitted_props, **check_params)",,,,,,,
scverse_scanpy_1.10.1,_common.py,python,TransformerChecksMixin,class,,,,Class: TransformerChecksMixin,scverse,scanpy,1.10.1,,,,,,,,,TransformerChecksMixin,,,,,,,,,
,_common.py,python,,,,,,File: scanpy\neighbors\_backends,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_common.py,python,,,,,,Directory: scanpy\neighbors\_backends\_common.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,"_plot_color_cycle(clists: Mapping[str, Sequence[str]])",function,_plot_color_cycle,"(clists: Mapping[str, Sequence[str]])",,"Function: _plot_color_cycle(clists: Mapping[str, Sequence[str]])",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,"vega_10 = list(map(colors.to_hex, cm.tab10.colors))",constant,,,,"Constant: vega_10 = list(map(colors.to_hex, cm.tab10.colors))",scverse,scanpy,1.10.1,,,,,"vega_10 = list(map(colors.to_hex, cm.tab10.colors))",vega_10,"list(map(colors.to_hex, cm.tab10.colors))",,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,vega_10_scanpy = vega_10.copy(),constant,,,,Constant: vega_10_scanpy = vega_10.copy(),scverse,scanpy,1.10.1,,,,,vega_10_scanpy = vega_10.copy(),vega_10_scanpy,vega_10.copy(),,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,"vega_20 = list(map(colors.to_hex, cm.tab20.colors))",constant,,,,"Constant: vega_20 = list(map(colors.to_hex, cm.tab20.colors))",scverse,scanpy,1.10.1,,,,,"vega_20 = list(map(colors.to_hex, cm.tab20.colors))",vega_20,"list(map(colors.to_hex, cm.tab20.colors))",,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,"vega_20_scanpy = [
    # dark without grey:
    *vega_20[0:14:2],
    *vega_20[16::2],
    # light without grey:
    *vega_20[1:15:2],
    *vega_20[17::2],
    # manual additions:
    ""#ad494a"",
    ""#8c6d31"",
]",constant,,,,"Constant: vega_20_scanpy = [
    # dark without grey:
    *vega_20[0:14:2],
    *vega_20[16::2],
    # light without grey:
    *vega_20[1:15:2],
    *vega_20[17::2],
    # manual additions:
    ""#ad494a"",
    ""#8c6d31"",
]",scverse,scanpy,1.10.1,,,,,"vega_20_scanpy = [
    # dark without grey:
    *vega_20[0:14:2],
    *vega_20[16::2],
    # light without grey:
    *vega_20[1:15:2],
    *vega_20[17::2],
    # manual additions:
    ""#ad494a"",
    ""#8c6d31"",
]",vega_20_scanpy,"[
    # dark without grey:
    *vega_20[0:14:2],
    *vega_20[16::2],
    # light without grey:
    *vega_20[1:15:2],
    *vega_20[17::2],
    # manual additions:
    ""#ad494a"",
    ""#8c6d31"",
]",,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,default_20 = vega_20_scanpy,constant,,,,Constant: default_20 = vega_20_scanpy,scverse,scanpy,1.10.1,,,,,default_20 = vega_20_scanpy,default_20,vega_20_scanpy,,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,"zeileis_28 = [
    ""#023fa5"",
    ""#7d87b9"",
    ""#bec1d4"",
    ""#d6bcc0"",
    ""#bb7784"",
    ""#8e063b"",
    ""#4a6fe3"",
    ""#8595e1"",
    ""#b5bbe3"",
    ""#e6afb9"",
    ""#e07b91"",
    ""#d33f6a"",
    ""#11c638"",
    ""#8dd593"",
    ""#c6dec7"",
    ""#ead3c6"",
    ""#f0b98d"",
    ""#ef9708"",
    ""#0fcfc0"",
    ""#9cded6"",
    ""#d5eae7"",
    ""#f3e1eb"",
    ""#f6c4e1"",
    ""#f79cd4"",
    # these last ones were added:
    ""#7f7f7f"",
    ""#c7c7c7"",
    ""#1CE6FF"",
    ""#336600"",
]",constant,,,,"Constant: zeileis_28 = [
    ""#023fa5"",
    ""#7d87b9"",
    ""#bec1d4"",
    ""#d6bcc0"",
    ""#bb7784"",
    ""#8e063b"",
    ""#4a6fe3"",
    ""#8595e1"",
    ""#b5bbe3"",
    ""#e6afb9"",
    ""#e07b91"",
    ""#d33f6a"",
    ""#11c638"",
    ""#8dd593"",
    ""#c6dec7"",
    ""#ead3c6"",
    ""#f0b98d"",
    ""#ef9708"",
    ""#0fcfc0"",
    ""#9cded6"",
    ""#d5eae7"",
    ""#f3e1eb"",
    ""#f6c4e1"",
    ""#f79cd4"",
    # these last ones were added:
    ""#7f7f7f"",
    ""#c7c7c7"",
    ""#1CE6FF"",
    ""#336600"",
]",scverse,scanpy,1.10.1,,,,,"zeileis_28 = [
    ""#023fa5"",
    ""#7d87b9"",
    ""#bec1d4"",
    ""#d6bcc0"",
    ""#bb7784"",
    ""#8e063b"",
    ""#4a6fe3"",
    ""#8595e1"",
    ""#b5bbe3"",
    ""#e6afb9"",
    ""#e07b91"",
    ""#d33f6a"",
    ""#11c638"",
    ""#8dd593"",
    ""#c6dec7"",
    ""#ead3c6"",
    ""#f0b98d"",
    ""#ef9708"",
    ""#0fcfc0"",
    ""#9cded6"",
    ""#d5eae7"",
    ""#f3e1eb"",
    ""#f6c4e1"",
    ""#f79cd4"",
    # these last ones were added:
    ""#7f7f7f"",
    ""#c7c7c7"",
    ""#1CE6FF"",
    ""#336600"",
]",zeileis_28,"[
    ""#023fa5"",
    ""#7d87b9"",
    ""#bec1d4"",
    ""#d6bcc0"",
    ""#bb7784"",
    ""#8e063b"",
    ""#4a6fe3"",
    ""#8595e1"",
    ""#b5bbe3"",
    ""#e6afb9"",
    ""#e07b91"",
    ""#d33f6a"",
    ""#11c638"",
    ""#8dd593"",
    ""#c6dec7"",
    ""#ead3c6"",
    ""#f0b98d"",
    ""#ef9708"",
    ""#0fcfc0"",
    ""#9cded6"",
    ""#d5eae7"",
    ""#f3e1eb"",
    ""#f6c4e1"",
    ""#f79cd4"",
    # these last ones were added:
    ""#7f7f7f"",
    ""#c7c7c7"",
    ""#1CE6FF"",
    ""#336600"",
]",,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,default_28 = zeileis_28,constant,,,,Constant: default_28 = zeileis_28,scverse,scanpy,1.10.1,,,,,default_28 = zeileis_28,default_28,zeileis_28,,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,"godsnot_102 = [
    # ""#000000"",  # remove the black, as often, we have black colored annotation
    ""#FFFF00"",
    ""#1CE6FF"",
    ""#FF34FF"",
    ""#FF4A46"",
    ""#008941"",
    ""#006FA6"",
    ""#A30059"",
    ""#FFDBE5"",
    ""#7A4900"",
    ""#0000A6"",
    ""#63FFAC"",
    ""#B79762"",
    ""#004D43"",
    ""#8FB0FF"",
    ""#997D87"",
    ""#5A0007"",
    ""#809693"",
    ""#6A3A4C"",
    ""#1B4400"",
    ""#4FC601"",
    ""#3B5DFF"",
    ""#4A3B53"",
    ""#FF2F80"",
    ""#61615A"",
    ""#BA0900"",
    ""#6B7900"",
    ""#00C2A0"",
    ""#FFAA92"",
    ""#FF90C9"",
    ""#B903AA"",
    ""#D16100"",
    ""#DDEFFF"",
    ""#000035"",
    ""#7B4F4B"",
    ""#A1C299"",
    ""#300018"",
    ""#0AA6D8"",
    ""#013349"",
    ""#00846F"",
    ""#372101"",
    ""#FFB500"",
    ""#C2FFED"",
    ""#A079BF"",
    ""#CC0744"",
    ""#C0B9B2"",
    ""#C2FF99"",
    ""#001E09"",
    ""#00489C"",
    ""#6F0062"",
    ""#0CBD66"",
    ""#EEC3FF"",
    ""#456D75"",
    ""#B77B68"",
    ""#7A87A1"",
    ""#788D66"",
    ""#885578"",
    ""#FAD09F"",
    ""#FF8A9A"",
    ""#D157A0"",
    ""#BEC459"",
    ""#456648"",
    ""#0086ED"",
    ""#886F4C"",
    ""#34362D"",
    ""#B4A8BD"",
    ""#00A6AA"",
    ""#452C2C"",
    ""#636375"",
    ""#A3C8C9"",
    ""#FF913F"",
    ""#938A81"",
    ""#575329"",
    ""#00FECF"",
    ""#B05B6F"",
    ""#8CD0FF"",
    ""#3B9700"",
    ""#04F757"",
    ""#C8A1A1"",
    ""#1E6E00"",
    ""#7900D7"",
    ""#A77500"",
    ""#6367A9"",
    ""#A05837"",
    ""#6B002C"",
    ""#772600"",
    ""#D790FF"",
    ""#9B9700"",
    ""#549E79"",
    ""#FFF69F"",
    ""#201625"",
    ""#72418F"",
    ""#BC23FF"",
    ""#99ADC0"",
    ""#3A2465"",
    ""#922329"",
    ""#5B4534"",
    ""#FDE8DC"",
    ""#404E55"",
    ""#0089A3"",
    ""#CB7E98"",
    ""#A4E804"",
    ""#324E72"",
]",constant,,,,"Constant: godsnot_102 = [
    # ""#000000"",  # remove the black, as often, we have black colored annotation
    ""#FFFF00"",
    ""#1CE6FF"",
    ""#FF34FF"",
    ""#FF4A46"",
    ""#008941"",
    ""#006FA6"",
    ""#A30059"",
    ""#FFDBE5"",
    ""#7A4900"",
    ""#0000A6"",
    ""#63FFAC"",
    ""#B79762"",
    ""#004D43"",
    ""#8FB0FF"",
    ""#997D87"",
    ""#5A0007"",
    ""#809693"",
    ""#6A3A4C"",
    ""#1B4400"",
    ""#4FC601"",
    ""#3B5DFF"",
    ""#4A3B53"",
    ""#FF2F80"",
    ""#61615A"",
    ""#BA0900"",
    ""#6B7900"",
    ""#00C2A0"",
    ""#FFAA92"",
    ""#FF90C9"",
    ""#B903AA"",
    ""#D16100"",
    ""#DDEFFF"",
    ""#000035"",
    ""#7B4F4B"",
    ""#A1C299"",
    ""#300018"",
    ""#0AA6D8"",
    ""#013349"",
    ""#00846F"",
    ""#372101"",
    ""#FFB500"",
    ""#C2FFED"",
    ""#A079BF"",
    ""#CC0744"",
    ""#C0B9B2"",
    ""#C2FF99"",
    ""#001E09"",
    ""#00489C"",
    ""#6F0062"",
    ""#0CBD66"",
    ""#EEC3FF"",
    ""#456D75"",
    ""#B77B68"",
    ""#7A87A1"",
    ""#788D66"",
    ""#885578"",
    ""#FAD09F"",
    ""#FF8A9A"",
    ""#D157A0"",
    ""#BEC459"",
    ""#456648"",
    ""#0086ED"",
    ""#886F4C"",
    ""#34362D"",
    ""#B4A8BD"",
    ""#00A6AA"",
    ""#452C2C"",
    ""#636375"",
    ""#A3C8C9"",
    ""#FF913F"",
    ""#938A81"",
    ""#575329"",
    ""#00FECF"",
    ""#B05B6F"",
    ""#8CD0FF"",
    ""#3B9700"",
    ""#04F757"",
    ""#C8A1A1"",
    ""#1E6E00"",
    ""#7900D7"",
    ""#A77500"",
    ""#6367A9"",
    ""#A05837"",
    ""#6B002C"",
    ""#772600"",
    ""#D790FF"",
    ""#9B9700"",
    ""#549E79"",
    ""#FFF69F"",
    ""#201625"",
    ""#72418F"",
    ""#BC23FF"",
    ""#99ADC0"",
    ""#3A2465"",
    ""#922329"",
    ""#5B4534"",
    ""#FDE8DC"",
    ""#404E55"",
    ""#0089A3"",
    ""#CB7E98"",
    ""#A4E804"",
    ""#324E72"",
]",scverse,scanpy,1.10.1,,,,,"godsnot_102 = [
    # ""#000000"",  # remove the black, as often, we have black colored annotation
    ""#FFFF00"",
    ""#1CE6FF"",
    ""#FF34FF"",
    ""#FF4A46"",
    ""#008941"",
    ""#006FA6"",
    ""#A30059"",
    ""#FFDBE5"",
    ""#7A4900"",
    ""#0000A6"",
    ""#63FFAC"",
    ""#B79762"",
    ""#004D43"",
    ""#8FB0FF"",
    ""#997D87"",
    ""#5A0007"",
    ""#809693"",
    ""#6A3A4C"",
    ""#1B4400"",
    ""#4FC601"",
    ""#3B5DFF"",
    ""#4A3B53"",
    ""#FF2F80"",
    ""#61615A"",
    ""#BA0900"",
    ""#6B7900"",
    ""#00C2A0"",
    ""#FFAA92"",
    ""#FF90C9"",
    ""#B903AA"",
    ""#D16100"",
    ""#DDEFFF"",
    ""#000035"",
    ""#7B4F4B"",
    ""#A1C299"",
    ""#300018"",
    ""#0AA6D8"",
    ""#013349"",
    ""#00846F"",
    ""#372101"",
    ""#FFB500"",
    ""#C2FFED"",
    ""#A079BF"",
    ""#CC0744"",
    ""#C0B9B2"",
    ""#C2FF99"",
    ""#001E09"",
    ""#00489C"",
    ""#6F0062"",
    ""#0CBD66"",
    ""#EEC3FF"",
    ""#456D75"",
    ""#B77B68"",
    ""#7A87A1"",
    ""#788D66"",
    ""#885578"",
    ""#FAD09F"",
    ""#FF8A9A"",
    ""#D157A0"",
    ""#BEC459"",
    ""#456648"",
    ""#0086ED"",
    ""#886F4C"",
    ""#34362D"",
    ""#B4A8BD"",
    ""#00A6AA"",
    ""#452C2C"",
    ""#636375"",
    ""#A3C8C9"",
    ""#FF913F"",
    ""#938A81"",
    ""#575329"",
    ""#00FECF"",
    ""#B05B6F"",
    ""#8CD0FF"",
    ""#3B9700"",
    ""#04F757"",
    ""#C8A1A1"",
    ""#1E6E00"",
    ""#7900D7"",
    ""#A77500"",
    ""#6367A9"",
    ""#A05837"",
    ""#6B002C"",
    ""#772600"",
    ""#D790FF"",
    ""#9B9700"",
    ""#549E79"",
    ""#FFF69F"",
    ""#201625"",
    ""#72418F"",
    ""#BC23FF"",
    ""#99ADC0"",
    ""#3A2465"",
    ""#922329"",
    ""#5B4534"",
    ""#FDE8DC"",
    ""#404E55"",
    ""#0089A3"",
    ""#CB7E98"",
    ""#A4E804"",
    ""#324E72"",
]",godsnot_102,"[
    # ""#000000"",  # remove the black, as often, we have black colored annotation
    ""#FFFF00"",
    ""#1CE6FF"",
    ""#FF34FF"",
    ""#FF4A46"",
    ""#008941"",
    ""#006FA6"",
    ""#A30059"",
    ""#FFDBE5"",
    ""#7A4900"",
    ""#0000A6"",
    ""#63FFAC"",
    ""#B79762"",
    ""#004D43"",
    ""#8FB0FF"",
    ""#997D87"",
    ""#5A0007"",
    ""#809693"",
    ""#6A3A4C"",
    ""#1B4400"",
    ""#4FC601"",
    ""#3B5DFF"",
    ""#4A3B53"",
    ""#FF2F80"",
    ""#61615A"",
    ""#BA0900"",
    ""#6B7900"",
    ""#00C2A0"",
    ""#FFAA92"",
    ""#FF90C9"",
    ""#B903AA"",
    ""#D16100"",
    ""#DDEFFF"",
    ""#000035"",
    ""#7B4F4B"",
    ""#A1C299"",
    ""#300018"",
    ""#0AA6D8"",
    ""#013349"",
    ""#00846F"",
    ""#372101"",
    ""#FFB500"",
    ""#C2FFED"",
    ""#A079BF"",
    ""#CC0744"",
    ""#C0B9B2"",
    ""#C2FF99"",
    ""#001E09"",
    ""#00489C"",
    ""#6F0062"",
    ""#0CBD66"",
    ""#EEC3FF"",
    ""#456D75"",
    ""#B77B68"",
    ""#7A87A1"",
    ""#788D66"",
    ""#885578"",
    ""#FAD09F"",
    ""#FF8A9A"",
    ""#D157A0"",
    ""#BEC459"",
    ""#456648"",
    ""#0086ED"",
    ""#886F4C"",
    ""#34362D"",
    ""#B4A8BD"",
    ""#00A6AA"",
    ""#452C2C"",
    ""#636375"",
    ""#A3C8C9"",
    ""#FF913F"",
    ""#938A81"",
    ""#575329"",
    ""#00FECF"",
    ""#B05B6F"",
    ""#8CD0FF"",
    ""#3B9700"",
    ""#04F757"",
    ""#C8A1A1"",
    ""#1E6E00"",
    ""#7900D7"",
    ""#A77500"",
    ""#6367A9"",
    ""#A05837"",
    ""#6B002C"",
    ""#772600"",
    ""#D790FF"",
    ""#9B9700"",
    ""#549E79"",
    ""#FFF69F"",
    ""#201625"",
    ""#72418F"",
    ""#BC23FF"",
    ""#99ADC0"",
    ""#3A2465"",
    ""#922329"",
    ""#5B4534"",
    ""#FDE8DC"",
    ""#404E55"",
    ""#0089A3"",
    ""#CB7E98"",
    ""#A4E804"",
    ""#324E72"",
]",,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,default_102 = godsnot_102,constant,,,,Constant: default_102 = godsnot_102,scverse,scanpy,1.10.1,,,,,default_102 = godsnot_102,default_102,godsnot_102,,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,cm from matplotlib,import,,,,Import: cm from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import cm, colors",cm,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,colors from matplotlib,import,,,,Import: colors from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import cm, colors",colors,matplotlib,,,,,,,,,,,,,,,
,palettes.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,palettes.py,python,,,,,,Directory: scanpy\plotting\palettes.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_scatter_obs(
    *,
    adata: AnnData,
    x=None,
    y=None,
    color=None,
    use_raw=None,
    layers=None,
    sort_order=True,
    alpha=None,
    basis=None,
    groups=None,
    components=None,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    legend_loc=""right margin"",
    legend_fontsize=None,
    legend_fontweight=None,
    legend_fontoutline=None,
    color_map=None,
    palette=None,
    frameon=None,
    right_margin=None,
    left_margin=None,
    size=None,
    marker=""."",
    title=None,
    show=None,
    save=None,
    ax=None,
) -> Axes | list[Axes] | None",function,_scatter_obs,"(
    *,
    adata: AnnData,
    x=None,
    y=None,
    color=None,
    use_raw=None,
    layers=None,
    sort_order=True,
    alpha=None,
    basis=None,
    groups=None,
    components=None,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    legend_loc=""right margin"",
    legend_fontsize=None,
    legend_fontweight=None,
    legend_fontoutline=None,
    color_map=None,
    palette=None,
    frameon=None,
    right_margin=None,
    left_margin=None,
    size=None,
    marker=""."",
    title=None,
    show=None,
    save=None,
    ax=None,
)",Axes | list[Axes] | None,"Function: _scatter_obs(
    *,
    adata: AnnData,
    x=None,
    y=None,
    color=None,
    use_raw=None,
    layers=None,
    sort_order=True,
    alpha=None,
    basis=None,
    groups=None,
    components=None,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    legend_loc=""right margin"",
    legend_fontsize=None,
    legend_fontweight=None,
    legend_fontoutline=None,
    color_map=None,
    palette=None,
    frameon=None,
    right_margin=None,
    left_margin=None,
    size=None,
    marker=""."",
    title=None,
    show=None,
    save=None,
    ax=None,
) -> Axes | list[Axes] | None",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_prepare_dataframe(
    adata: AnnData,
    var_names: _VarNames | Mapping[str, _VarNames],
    groupby: str | Sequence[str] | None = None,
    *,
    use_raw: bool | None = None,
    log: bool = False,
    num_categories: int = 7,
    layer: str | None = None,
    gene_symbols: str | None = None,
) -> tuple[Sequence[str], pd.DataFrame]",function,_prepare_dataframe,"(
    adata: AnnData,
    var_names: _VarNames | Mapping[str, _VarNames],
    groupby: str | Sequence[str] | None = None,
    *,
    use_raw: bool | None = None,
    log: bool = False,
    num_categories: int = 7,
    layer: str | None = None,
    gene_symbols: str | None = None,
)","tuple[Sequence[str], pd.DataFrame]","Function: _prepare_dataframe(
    adata: AnnData,
    var_names: _VarNames | Mapping[str, _VarNames],
    groupby: str | Sequence[str] | None = None,
    *,
    use_raw: bool | None = None,
    log: bool = False,
    num_categories: int = 7,
    layer: str | None = None,
    gene_symbols: str | None = None,
) -> tuple[Sequence[str], pd.DataFrame]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_plot_gene_groups_brackets(
    gene_groups_ax: Axes,
    *,
    group_positions: Iterable[tuple[int, int]],
    group_labels: Sequence[str],
    left_adjustment: float = -0.3,
    right_adjustment: float = 0.3,
    rotation: float | None = None,
    orientation: Literal[""top"", ""right""] = ""top"",
)",function,_plot_gene_groups_brackets,"(
    gene_groups_ax: Axes,
    *,
    group_positions: Iterable[tuple[int, int]],
    group_labels: Sequence[str],
    left_adjustment: float = -0.3,
    right_adjustment: float = 0.3,
    rotation: float | None = None,
    orientation: Literal[""top"", ""right""] = ""top"",
)",,"Function: _plot_gene_groups_brackets(
    gene_groups_ax: Axes,
    *,
    group_positions: Iterable[tuple[int, int]],
    group_labels: Sequence[str],
    left_adjustment: float = -0.3,
    right_adjustment: float = 0.3,
    rotation: float | None = None,
    orientation: Literal[""top"", ""right""] = ""top"",
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_reorder_categories_after_dendrogram(
    adata: AnnData,
    groupby,
    dendrogram,
    *,
    var_names=None,
    var_group_labels=None,
    var_group_positions=None,
    categories=None,
)",function,_reorder_categories_after_dendrogram,"(
    adata: AnnData,
    groupby,
    dendrogram,
    *,
    var_names=None,
    var_group_labels=None,
    var_group_positions=None,
    categories=None,
)",,"Function: _reorder_categories_after_dendrogram(
    adata: AnnData,
    groupby,
    dendrogram,
    *,
    var_names=None,
    var_group_labels=None,
    var_group_positions=None,
    categories=None,
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,_format_first_three_categories(categories),function,_format_first_three_categories,(categories),,Function: _format_first_three_categories(categories),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_get_dendrogram_key(adata, dendrogram_key, groupby)",function,_get_dendrogram_key,"(adata, dendrogram_key, groupby)",,"Function: _get_dendrogram_key(adata, dendrogram_key, groupby)",scverse,scanpy,1.10.1,,,,,,,,"# the `dendrogram_key` can be a bool an NoneType or the name of the",,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_get_dendrogram_key(adata, dendrogram_key, groupby)",function,_get_dendrogram_key,"(adata, dendrogram_key, groupby)",,"Function: _get_dendrogram_key(adata, dendrogram_key, groupby)",scverse,scanpy,1.10.1,,,,,,,,"# dendrogram key. By default the name of the dendrogram key is 'dendrogram'",,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_plot_dendrogram(
    dendro_ax: Axes,
    adata: AnnData,
    groupby: str,
    *,
    dendrogram_key: str | None = None,
    orientation: Literal[""top"", ""bottom"", ""left"", ""right""] = ""right"",
    remove_labels: bool = True,
    ticks: Collection[float] | None = None,
)",function,_plot_dendrogram,"(
    dendro_ax: Axes,
    adata: AnnData,
    groupby: str,
    *,
    dendrogram_key: str | None = None,
    orientation: Literal[""top"", ""bottom"", ""left"", ""right""] = ""right"",
    remove_labels: bool = True,
    ticks: Collection[float] | None = None,
)",,"Function: _plot_dendrogram(
    dendro_ax: Axes,
    adata: AnnData,
    groupby: str,
    *,
    dendrogram_key: str | None = None,
    orientation: Literal[""top"", ""bottom"", ""left"", ""right""] = ""right"",
    remove_labels: bool = True,
    ticks: Collection[float] | None = None,
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_plot_categories_as_colorblocks(
    groupby_ax: Axes,
    obs_tidy: pd.DataFrame,
    colors=None,
    orientation: Literal[""top"", ""bottom"", ""left"", ""right""] = ""left"",
    cmap_name: str = ""tab20"",
)",function,_plot_categories_as_colorblocks,"(
    groupby_ax: Axes,
    obs_tidy: pd.DataFrame,
    colors=None,
    orientation: Literal[""top"", ""bottom"", ""left"", ""right""] = ""left"",
    cmap_name: str = ""tab20"",
)",,"Function: _plot_categories_as_colorblocks(
    groupby_ax: Axes,
    obs_tidy: pd.DataFrame,
    colors=None,
    orientation: Literal[""top"", ""bottom"", ""left"", ""right""] = ""left"",
    cmap_name: str = ""tab20"",
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_plot_colorbar(mappable, fig, subplot_spec, max_cbar_height: float = 4.0)",function,_plot_colorbar,"(mappable, fig, subplot_spec, max_cbar_height: float = 4.0)",,"Function: _plot_colorbar(mappable, fig, subplot_spec, max_cbar_height: float = 4.0)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_check_var_names_type(var_names, var_group_labels, var_group_positions)",function,_check_var_names_type,"(var_names, var_group_labels, var_group_positions)",,"Function: _check_var_names_type(var_names, var_group_labels, var_group_positions)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"VALID_LEGENDLOCS = {
    ""none"",
    ""right margin"",
    ""on data"",
    ""on data export"",
    ""best"",
    ""upper right"",
    ""upper left"",
    ""lower left"",
    ""lower right"",
    ""right"",
    ""center left"",
    ""center right"",
    ""lower center"",
    ""upper center"",
    ""center"",
}",constant,,,,"Constant: VALID_LEGENDLOCS = {
    ""none"",
    ""right margin"",
    ""on data"",
    ""on data export"",
    ""best"",
    ""upper right"",
    ""upper left"",
    ""lower left"",
    ""lower right"",
    ""right"",
    ""center left"",
    ""center right"",
    ""lower center"",
    ""upper center"",
    ""center"",
}",scverse,scanpy,1.10.1,,,,,"VALID_LEGENDLOCS = {
    ""none"",
    ""right margin"",
    ""on data"",
    ""on data export"",
    ""best"",
    ""upper right"",
    ""upper left"",
    ""lower left"",
    ""lower right"",
    ""right"",
    ""center left"",
    ""center right"",
    ""lower center"",
    ""upper center"",
    ""center"",
}",VALID_LEGENDLOCS,"{
    ""none"",
    ""right margin"",
    ""on data"",
    ""on data export"",
    ""best"",
    ""upper right"",
    ""upper left"",
    ""lower left"",
    ""lower right"",
    ""right"",
    ""center left"",
    ""center right"",
    ""lower center"",
    ""upper center"",
    ""center"",
}",,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_Basis = Literal[""pca"", ""tsne"", ""umap"", ""diffmap"", ""draw_graph_fr""]",constant,,,,"Constant: _Basis = Literal[""pca"", ""tsne"", ""umap"", ""diffmap"", ""draw_graph_fr""]",scverse,scanpy,1.10.1,,,,,"_Basis = Literal[""pca"", ""tsne"", ""umap"", ""diffmap"", ""draw_graph_fr""]",_Basis,"Literal[""pca"", ""tsne"", ""umap"", ""diffmap"", ""draw_graph_fr""]",,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_VarNames = Union[str, Sequence[str]]",constant,,,,"Constant: _VarNames = Union[str, Sequence[str]]",scverse,scanpy,1.10.1,,,,,"_VarNames = Union[str, Sequence[str]]",_VarNames,"Union[str, Sequence[str]]",,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,collections.abc,import,,,,Import: collections.abc,scverse,scanpy,1.10.1,import collections.abc as cabc,collections.abc,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,OrderedDict from collections,import,,,,Import: OrderedDict from collections,scverse,scanpy,1.10.1,from collections import OrderedDict,OrderedDict,collections,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,product from itertools,import,,,,Import: product from itertools,scverse,scanpy,1.10.1,from itertools import product,product,itertools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, Union",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, Union",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,Union from typing,import,,,,Import: Union from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, Union",Union,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,gridspec from matplotlib,import,,,,Import: gridspec from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import gridspec, patheffects, rcParams",gridspec,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,patheffects from matplotlib,import,,,,Import: patheffects from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import gridspec, patheffects, rcParams",patheffects,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,rcParams from matplotlib,import,,,,Import: rcParams from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import gridspec, patheffects, rcParams",rcParams,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,pyplot,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,Collection from collections.abc,local_import,,,,Import: Collection from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Collection, Iterable, Mapping, Sequence",Collection,collections.abc,collections.abc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,Iterable from collections.abc,local_import,,,,Import: Iterable from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Collection, Iterable, Mapping, Sequence",Iterable,collections.abc,collections.abc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,Mapping from collections.abc,local_import,,,,Import: Mapping from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Collection, Iterable, Mapping, Sequence",Mapping,collections.abc,collections.abc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,Sequence from collections.abc,local_import,,,,Import: Sequence from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Collection, Iterable, Mapping, Sequence",Sequence,collections.abc,collections.abc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,Colormap from matplotlib.colors,local_import,,,,Import: Colormap from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Colormap, ListedColormap, Normalize, is_color_like",Colormap,matplotlib.colors,matplotlib.colors,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,ListedColormap from matplotlib.colors,local_import,,,,Import: ListedColormap from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Colormap, ListedColormap, Normalize, is_color_like",ListedColormap,matplotlib.colors,matplotlib.colors,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,Normalize from matplotlib.colors,local_import,,,,Import: Normalize from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Colormap, ListedColormap, Normalize, is_color_like",Normalize,matplotlib.colors,matplotlib.colors,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,is_color_like from matplotlib.colors,local_import,,,,Import: is_color_like from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Colormap, ListedColormap, Normalize, is_color_like",is_color_like,matplotlib.colors,matplotlib.colors,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,CategoricalDtype from pandas.api.types,local_import,,,,Import: CategoricalDtype from pandas.api.types,scverse,scanpy,1.10.1,"from pandas.api.types import CategoricalDtype, is_numeric_dtype",CategoricalDtype,pandas.api.types,pandas.api.types,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,is_numeric_dtype from pandas.api.types,local_import,,,,Import: is_numeric_dtype from pandas.api.types,scverse,scanpy,1.10.1,"from pandas.api.types import CategoricalDtype, is_numeric_dtype",is_numeric_dtype,pandas.api.types,pandas.api.types,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import issparse,issparse,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
,_anndata.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_anndata.py,python,,,,,,Directory: scanpy\plotting\_anndata.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot.DEFAULT_SAVE_PREFIX = ""baseplot_""",class_field,,,,"Class field: BasePlot.DEFAULT_SAVE_PREFIX = ""baseplot_""",scverse,scanpy,1.10.1,,,,,,,,,BasePlot,,,"DEFAULT_SAVE_PREFIX = ""baseplot_""",,,,,DEFAULT_SAVE_PREFIX,"""baseplot_"""
scverse_scanpy_1.10.1,_baseplot_class.py,python,BasePlot.MIN_FIGURE_HEIGHT = 2.5,class_field,,,,Class field: BasePlot.MIN_FIGURE_HEIGHT = 2.5,scverse,scanpy,1.10.1,,,,,,,,,BasePlot,,,MIN_FIGURE_HEIGHT = 2.5,,,,,MIN_FIGURE_HEIGHT,2.5
scverse_scanpy_1.10.1,_baseplot_class.py,python,BasePlot.DEFAULT_CATEGORY_HEIGHT = 0.35,class_field,,,,Class field: BasePlot.DEFAULT_CATEGORY_HEIGHT = 0.35,scverse,scanpy,1.10.1,,,,,,,,,BasePlot,,,DEFAULT_CATEGORY_HEIGHT = 0.35,,,,,DEFAULT_CATEGORY_HEIGHT,0.35
scverse_scanpy_1.10.1,_baseplot_class.py,python,BasePlot.DEFAULT_CATEGORY_WIDTH = 0.37,class_field,,,,Class field: BasePlot.DEFAULT_CATEGORY_WIDTH = 0.37,scverse,scanpy,1.10.1,,,,,,,,,BasePlot,,,DEFAULT_CATEGORY_WIDTH = 0.37,,,,,DEFAULT_CATEGORY_WIDTH,0.37
scverse_scanpy_1.10.1,_baseplot_class.py,python,BasePlot.DEFAULT_WSPACE = 0,class_field,,,,Class field: BasePlot.DEFAULT_WSPACE = 0,scverse,scanpy,1.10.1,,,,,,,,,BasePlot,,,DEFAULT_WSPACE = 0,,,,,DEFAULT_WSPACE,0
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot.DEFAULT_COLORMAP = ""winter""",class_field,,,,"Class field: BasePlot.DEFAULT_COLORMAP = ""winter""",scverse,scanpy,1.10.1,,,,,,,,,BasePlot,,,"DEFAULT_COLORMAP = ""winter""",,,,,DEFAULT_COLORMAP,"""winter"""
scverse_scanpy_1.10.1,_baseplot_class.py,python,BasePlot.DEFAULT_LEGENDS_WIDTH = 1.5,class_field,,,,Class field: BasePlot.DEFAULT_LEGENDS_WIDTH = 1.5,scverse,scanpy,1.10.1,,,,,,,,,BasePlot,,,DEFAULT_LEGENDS_WIDTH = 1.5,,,,,DEFAULT_LEGENDS_WIDTH,1.5
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot.DEFAULT_COLOR_LEGEND_TITLE = ""Expression\nlevel in group""",class_field,,,,"Class field: BasePlot.DEFAULT_COLOR_LEGEND_TITLE = ""Expression\nlevel in group""",scverse,scanpy,1.10.1,,,,,,,,,BasePlot,,,"DEFAULT_COLOR_LEGEND_TITLE = ""Expression\nlevel in group""",,,,,DEFAULT_COLOR_LEGEND_TITLE,"""Expression\nlevel in group"""
scverse_scanpy_1.10.1,_baseplot_class.py,python,BasePlot.MAX_NUM_CATEGORIES = 500,class_field,,,,Class field: BasePlot.MAX_NUM_CATEGORIES = 500,scverse,scanpy,1.10.1,,,,,,,,,BasePlot,,,MAX_NUM_CATEGORIES = 500,,,,,MAX_NUM_CATEGORIES,500
scverse_scanpy_1.10.1,_baseplot_class.py,python,"[old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""ax"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )] BasePlot.__init__(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        ax: _AxesSubplot | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",class_method,,,,"Class method: [old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""ax"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )] BasePlot.__init__(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        ax: _AxesSubplot | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",scverse,scanpy,1.10.1,,,,,,,,,BasePlot,__init__,"(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        ax: _AxesSubplot | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",,,,"old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""ax"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )",,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot.swap_axes(self, swap_axes: bool | None = True) -> BasePlot",class_method,,,,"Class method: BasePlot.swap_axes(self, swap_axes: bool | None = True) -> BasePlot",scverse,scanpy,1.10.1,,,,,,,,,BasePlot,swap_axes,"(self, swap_axes: bool | None = True)",,,BasePlot,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot.add_dendrogram(
        self,
        show: bool | None = True,
        dendrogram_key: str | None = None,
        size: float | None = 0.8,
    ) -> BasePlot",class_method,,,,"Class method: BasePlot.add_dendrogram(
        self,
        show: bool | None = True,
        dendrogram_key: str | None = None,
        size: float | None = 0.8,
    ) -> BasePlot",scverse,scanpy,1.10.1,,,,,,,,,BasePlot,add_dendrogram,"(
        self,
        show: bool | None = True,
        dendrogram_key: str | None = None,
        size: float | None = 0.8,
    )",,,BasePlot,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot.add_totals(
        self,
        show: bool | None = True,
        sort: Literal[""ascending"", ""descending""] = None,
        size: float | None = 0.8,
        color: ColorLike | Sequence[ColorLike] | None = None,
    ) -> BasePlot",class_method,,,,"Class method: BasePlot.add_totals(
        self,
        show: bool | None = True,
        sort: Literal[""ascending"", ""descending""] = None,
        size: float | None = 0.8,
        color: ColorLike | Sequence[ColorLike] | None = None,
    ) -> BasePlot",scverse,scanpy,1.10.1,,,,,,,,,BasePlot,add_totals,"(
        self,
        show: bool | None = True,
        sort: Literal[""ascending"", ""descending""] = None,
        size: float | None = 0.8,
        color: ColorLike | Sequence[ColorLike] | None = None,
    )",,,BasePlot,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"[old_positionals(""cmap"")] BasePlot.style(self, *, cmap: str | None = DEFAULT_COLORMAP) -> BasePlot",class_method,,,,"Class method: [old_positionals(""cmap"")] BasePlot.style(self, *, cmap: str | None = DEFAULT_COLORMAP) -> BasePlot",scverse,scanpy,1.10.1,,,,,,,,,BasePlot,style,"(self, *, cmap: str | None = DEFAULT_COLORMAP)",,,BasePlot,"old_positionals(""cmap"")",,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"[old_positionals(""show"", ""title"", ""width"")] BasePlot.legend(
        self,
        *,
        show: bool | None = True,
        title: str | None = DEFAULT_COLOR_LEGEND_TITLE,
        width: float | None = DEFAULT_LEGENDS_WIDTH,
    ) -> BasePlot",class_method,,,,"Class method: [old_positionals(""show"", ""title"", ""width"")] BasePlot.legend(
        self,
        *,
        show: bool | None = True,
        title: str | None = DEFAULT_COLOR_LEGEND_TITLE,
        width: float | None = DEFAULT_LEGENDS_WIDTH,
    ) -> BasePlot",scverse,scanpy,1.10.1,,,,,,,,,BasePlot,legend,"(
        self,
        *,
        show: bool | None = True,
        title: str | None = DEFAULT_COLOR_LEGEND_TITLE,
        width: float | None = DEFAULT_LEGENDS_WIDTH,
    )",,,BasePlot,"old_positionals(""show"", ""title"", ""width"")",,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot.get_axes(self) -> dict[str, Axes]",class_method,,,,"Class method: BasePlot.get_axes(self) -> dict[str, Axes]",scverse,scanpy,1.10.1,,,,,,,,,BasePlot,get_axes,(self),,,"dict[str, Axes]",,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot._plot_totals(
        self, total_barplot_ax: Axes, orientation: Literal[""top"", ""right""]
    )",class_method,,,,"Class method: BasePlot._plot_totals(
        self, total_barplot_ax: Axes, orientation: Literal[""top"", ""right""]
    )",scverse,scanpy,1.10.1,,,,,,,,,BasePlot,_plot_totals,"(
        self, total_barplot_ax: Axes, orientation: Literal[""top"", ""right""]
    )",,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot._plot_colorbar(self, color_legend_ax: Axes, normalize) -> None",class_method,,,,"Class method: BasePlot._plot_colorbar(self, color_legend_ax: Axes, normalize) -> None",scverse,scanpy,1.10.1,,,,,,,,,BasePlot,_plot_colorbar,"(self, color_legend_ax: Axes, normalize)",,,None,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot._plot_legend(self, legend_ax, return_ax_dict, normalize)",class_method,,,,"Class method: BasePlot._plot_legend(self, legend_ax, return_ax_dict, normalize)",scverse,scanpy,1.10.1,,,,,,,,,BasePlot,_plot_legend,"(self, legend_ax, return_ax_dict, normalize)",,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot._mainplot(self, ax)",class_method,,,,"Class method: BasePlot._mainplot(self, ax)",scverse,scanpy,1.10.1,,,,,,,,,BasePlot,_mainplot,"(self, ax)",,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,BasePlot.make_figure(self),class_method,,,,Class method: BasePlot.make_figure(self),scverse,scanpy,1.10.1,,,,,,,,,BasePlot,make_figure,(self),,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot.show(self, return_axes: bool | None = None) -> dict[str, Axes] | None",class_method,,,,"Class method: BasePlot.show(self, return_axes: bool | None = None) -> dict[str, Axes] | None",scverse,scanpy,1.10.1,,,,,,,,,BasePlot,show,"(self, return_axes: bool | None = None)",,,"dict[str, Axes] | None",,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot.savefig(self, filename: str, bbox_inches: str | None = ""tight"", **kwargs)",class_method,,,,"Class method: BasePlot.savefig(self, filename: str, bbox_inches: str | None = ""tight"", **kwargs)",scverse,scanpy,1.10.1,,,,,,,,,BasePlot,savefig,"(self, filename: str, bbox_inches: str | None = ""tight"", **kwargs)",,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot._reorder_categories_after_dendrogram(self, dendrogram) -> None",class_method,,,,"Class method: BasePlot._reorder_categories_after_dendrogram(self, dendrogram) -> None",scverse,scanpy,1.10.1,,,,,,,,,BasePlot,_reorder_categories_after_dendrogram,"(self, dendrogram)",,,None,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"[staticmethod] BasePlot._plot_var_groups_brackets(
        gene_groups_ax: Axes,
        *,
        group_positions: Iterable[tuple[int, int]],
        group_labels: Sequence[str],
        left_adjustment: float = -0.3,
        right_adjustment: float = 0.3,
        rotation: float | None = None,
        orientation: Literal[""top"", ""right""] = ""top"",
    ) -> None",class_method,,,,"Class method: [staticmethod] BasePlot._plot_var_groups_brackets(
        gene_groups_ax: Axes,
        *,
        group_positions: Iterable[tuple[int, int]],
        group_labels: Sequence[str],
        left_adjustment: float = -0.3,
        right_adjustment: float = 0.3,
        rotation: float | None = None,
        orientation: Literal[""top"", ""right""] = ""top"",
    ) -> None",scverse,scanpy,1.10.1,,,,,,,,,BasePlot,_plot_var_groups_brackets,"(
        gene_groups_ax: Axes,
        *,
        group_positions: Iterable[tuple[int, int]],
        group_labels: Sequence[str],
        left_adjustment: float = -0.3,
        right_adjustment: float = 0.3,
        rotation: float | None = None,
        orientation: Literal[""top"", ""right""] = ""top"",
    )",,,None,staticmethod,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,BasePlot._update_var_groups(self) -> None,class_method,,,,Class method: BasePlot._update_var_groups(self) -> None,scverse,scanpy,1.10.1,,,,,,,,,BasePlot,_update_var_groups,(self),,,None,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,BasePlot,class,,,,Class: BasePlot,scverse,scanpy,1.10.1,,,,,,,,,BasePlot,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"_VarNames = Union[str, Sequence[str]]",constant,,,,"Constant: _VarNames = Union[str, Sequence[str]]",scverse,scanpy,1.10.1,,,,,"_VarNames = Union[str, Sequence[str]]",_VarNames,"Union[str, Sequence[str]]",,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"doc_common_groupby_plot_args = """"""\
title
    Title for the figure
colorbar_title
    Title for the color bar. New line character (\\n) can be used.
cmap
    String denoting matplotlib color map.
standard_scale
    Whether or not to standardize the given dimension between 0 and 1, meaning for
    each variable or group, subtract the minimum and divide each by its maximum.
swap_axes
     By default, the x axis contains `var_names` (e.g. genes) and the y axis
     the `groupby` categories. By setting `swap_axes` then x are the
     `groupby` categories and y the `var_names`.
return_fig
    Returns :class:`DotPlot` object. Useful for fine-tuning
    the plot. Takes precedence over `show=False`.
""""""",constant,,,,"Constant: doc_common_groupby_plot_args = """"""\
title
    Title for the figure
colorbar_title
    Title for the color bar. New line character (\\n) can be used.
cmap
    String denoting matplotlib color map.
standard_scale
    Whether or not to standardize the given dimension between 0 and 1, meaning for
    each variable or group, subtract the minimum and divide each by its maximum.
swap_axes
     By default, the x axis contains `var_names` (e.g. genes) and the y axis
     the `groupby` categories. By setting `swap_axes` then x are the
     `groupby` categories and y the `var_names`.
return_fig
    Returns :class:`DotPlot` object. Useful for fine-tuning
    the plot. Takes precedence over `show=False`.
""""""",scverse,scanpy,1.10.1,,,,,"doc_common_groupby_plot_args = """"""\
title
    Title for the figure
colorbar_title
    Title for the color bar. New line character (\\n) can be used.
cmap
    String denoting matplotlib color map.
standard_scale
    Whether or not to standardize the given dimension between 0 and 1, meaning for
    each variable or group, subtract the minimum and divide each by its maximum.
swap_axes
     By default, the x axis contains `var_names` (e.g. genes) and the y axis
     the `groupby` categories. By setting `swap_axes` then x are the
     `groupby` categories and y the `var_names`.
return_fig
    Returns :class:`DotPlot` object. Useful for fine-tuning
    the plot. Takes precedence over `show=False`.
""""""",doc_common_groupby_plot_args,"""""""\
title
    Title for the figure
colorbar_title
    Title for the color bar. New line character (\\n) can be used.
cmap
    String denoting matplotlib color map.
standard_scale
    Whether or not to standardize the given dimension between 0 and 1, meaning for
    each variable or group, subtract the minimum and divide each by its maximum.
swap_axes
     By default, the x axis contains `var_names` (e.g. genes) and the y axis
     the `groupby` categories. By setting `swap_axes` then x are the
     `groupby` categories and y the `var_names`.
return_fig
    Returns :class:`DotPlot` object. Useful for fine-tuning
    the plot. Takes precedence over `show=False`.
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,collections.abc,import,,,,Import: collections.abc,scverse,scanpy,1.10.1,import collections.abc as cabc,collections.abc,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,namedtuple from collections,import,,,,Import: namedtuple from collections,scverse,scanpy,1.10.1,from collections import namedtuple,namedtuple,collections,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, Union",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, Union",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,Union from typing,import,,,,Import: Union from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, Union",Union,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,warn from warnings,import,,,,Import: warn from warnings,scverse,scanpy,1.10.1,from warnings import warn,warn,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,gridspec from matplotlib,import,,,,Import: gridspec from matplotlib,scverse,scanpy,1.10.1,from matplotlib import gridspec,gridspec,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,pyplot,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,Iterable from collections.abc,local_import,,,,Import: Iterable from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Iterable, Mapping, Sequence",Iterable,collections.abc,collections.abc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,Mapping from collections.abc,local_import,,,,Import: Mapping from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Iterable, Mapping, Sequence",Mapping,collections.abc,collections.abc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,Sequence from collections.abc,local_import,,,,Import: Sequence from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Iterable, Mapping, Sequence",Sequence,collections.abc,collections.abc,,,,,,,,,,,,,,
,_baseplot_class.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_baseplot_class.py,python,,,,,,Directory: scanpy\plotting\_baseplot_class.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_adata_color_etc = """"""\
adata
    Annotated data matrix.
color
    Keys for annotations of observations/cells or variables/genes, e.g.,
    `'ann1'` or `['ann1', 'ann2']`.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols. By default `var_names`
    refer to the index column of the `.var` DataFrame. Setting this option allows
    alternative names to be used.
use_raw
    Use `.raw` attribute of `adata` for coloring with gene expression. If `None`,
    defaults to `True` if `layer` isn't provided and `adata.raw` is present.
layer
    Name of the AnnData object layer that wants to be plotted. By default
    adata.raw.X is plotted. If `use_raw=False` is set, then `adata.X` is plotted.
    If `layer` is set to a valid layer name, then the layer is plotted. `layer`
    takes precedence over `use_raw`.\
""""""",constant,,,,"Constant: doc_adata_color_etc = """"""\
adata
    Annotated data matrix.
color
    Keys for annotations of observations/cells or variables/genes, e.g.,
    `'ann1'` or `['ann1', 'ann2']`.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols. By default `var_names`
    refer to the index column of the `.var` DataFrame. Setting this option allows
    alternative names to be used.
use_raw
    Use `.raw` attribute of `adata` for coloring with gene expression. If `None`,
    defaults to `True` if `layer` isn't provided and `adata.raw` is present.
layer
    Name of the AnnData object layer that wants to be plotted. By default
    adata.raw.X is plotted. If `use_raw=False` is set, then `adata.X` is plotted.
    If `layer` is set to a valid layer name, then the layer is plotted. `layer`
    takes precedence over `use_raw`.\
""""""",scverse,scanpy,1.10.1,,,,,"doc_adata_color_etc = """"""\
adata
    Annotated data matrix.
color
    Keys for annotations of observations/cells or variables/genes, e.g.,
    `'ann1'` or `['ann1', 'ann2']`.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols. By default `var_names`
    refer to the index column of the `.var` DataFrame. Setting this option allows
    alternative names to be used.
use_raw
    Use `.raw` attribute of `adata` for coloring with gene expression. If `None`,
    defaults to `True` if `layer` isn't provided and `adata.raw` is present.
layer
    Name of the AnnData object layer that wants to be plotted. By default
    adata.raw.X is plotted. If `use_raw=False` is set, then `adata.X` is plotted.
    If `layer` is set to a valid layer name, then the layer is plotted. `layer`
    takes precedence over `use_raw`.\
""""""",doc_adata_color_etc,"""""""\
adata
    Annotated data matrix.
color
    Keys for annotations of observations/cells or variables/genes, e.g.,
    `'ann1'` or `['ann1', 'ann2']`.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols. By default `var_names`
    refer to the index column of the `.var` DataFrame. Setting this option allows
    alternative names to be used.
use_raw
    Use `.raw` attribute of `adata` for coloring with gene expression. If `None`,
    defaults to `True` if `layer` isn't provided and `adata.raw` is present.
layer
    Name of the AnnData object layer that wants to be plotted. By default
    adata.raw.X is plotted. If `use_raw=False` is set, then `adata.X` is plotted.
    If `layer` is set to a valid layer name, then the layer is plotted. `layer`
    takes precedence over `use_raw`.\
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_edges_arrows = """"""\
edges
    Show edges.
edges_width
    Width of edges.
edges_color
    Color of edges. See :func:`~networkx.drawing.nx_pylab.draw_networkx_edges`.
neighbors_key
    Where to look for neighbors connectivities.
    If not specified, this looks .obsp['connectivities'] for connectivities
    (default storage place for pp.neighbors).
    If specified, this looks
    .obsp[.uns[neighbors_key]['connectivities_key']] for connectivities.
arrows
    Show arrows (deprecated in favour of `scvelo.pl.velocity_embedding`).
arrows_kwds
    Passed to :meth:`~matplotlib.axes.Axes.quiver`\
""""""",constant,,,,"Constant: doc_edges_arrows = """"""\
edges
    Show edges.
edges_width
    Width of edges.
edges_color
    Color of edges. See :func:`~networkx.drawing.nx_pylab.draw_networkx_edges`.
neighbors_key
    Where to look for neighbors connectivities.
    If not specified, this looks .obsp['connectivities'] for connectivities
    (default storage place for pp.neighbors).
    If specified, this looks
    .obsp[.uns[neighbors_key]['connectivities_key']] for connectivities.
arrows
    Show arrows (deprecated in favour of `scvelo.pl.velocity_embedding`).
arrows_kwds
    Passed to :meth:`~matplotlib.axes.Axes.quiver`\
""""""",scverse,scanpy,1.10.1,,,,,"doc_edges_arrows = """"""\
edges
    Show edges.
edges_width
    Width of edges.
edges_color
    Color of edges. See :func:`~networkx.drawing.nx_pylab.draw_networkx_edges`.
neighbors_key
    Where to look for neighbors connectivities.
    If not specified, this looks .obsp['connectivities'] for connectivities
    (default storage place for pp.neighbors).
    If specified, this looks
    .obsp[.uns[neighbors_key]['connectivities_key']] for connectivities.
arrows
    Show arrows (deprecated in favour of `scvelo.pl.velocity_embedding`).
arrows_kwds
    Passed to :meth:`~matplotlib.axes.Axes.quiver`\
""""""",doc_edges_arrows,"""""""\
edges
    Show edges.
edges_width
    Width of edges.
edges_color
    Color of edges. See :func:`~networkx.drawing.nx_pylab.draw_networkx_edges`.
neighbors_key
    Where to look for neighbors connectivities.
    If not specified, this looks .obsp['connectivities'] for connectivities
    (default storage place for pp.neighbors).
    If specified, this looks
    .obsp[.uns[neighbors_key]['connectivities_key']] for connectivities.
arrows
    Show arrows (deprecated in favour of `scvelo.pl.velocity_embedding`).
arrows_kwds
    Passed to :meth:`~matplotlib.axes.Axes.quiver`\
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_scatter_basic = """"""\
sort_order
    For continuous annotations used as color parameter, plot data points
    with higher values on top of others.
groups
    Restrict to a few categories in categorical observation annotation.
    The default is not to restrict to any groups.
dimensions
    0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].
    Unlike `components`, this argument is used in the same way as `colors`, e.g. is
    used to specify a single plot at a time. Will eventually replace the components
    argument.
components
    For instance, `['1,2', '2,3']`. To plot all available components use
    `components='all'`.
projection
    Projection of plot (default: `'2d'`).
legend_loc
    Location of legend, either `'on data'`, `'right margin'` or a valid keyword
    for the `loc` parameter of :class:`~matplotlib.legend.Legend`.
legend_fontsize
    Numeric size in pt or string describing the size.
    See :meth:`~matplotlib.text.Text.set_fontsize`.
legend_fontweight
    Legend font weight. A numeric value in range 0-1000 or a string.
    Defaults to `'bold'` if `legend_loc == 'on data'`, otherwise to `'normal'`.
    See :meth:`~matplotlib.text.Text.set_fontweight`.
legend_fontoutline
    Line width of the legend font outline in pt. Draws a white outline using
    the path effect :class:`~matplotlib.patheffects.withStroke`.
colorbar_loc
    Where to place the colorbar for continous variables. If `None`, no colorbar
    is added.
size
    Point size. If `None`, is automatically computed as 120000 / n_cells.
    Can be a sequence containing the size for each cell. The order should be
    the same as in adata.obs.
color_map
    Color map to use for continous variables. Can be a name or a
    :class:`~matplotlib.colors.Colormap` instance (e.g. `""magma`"", `""viridis""`
    or `mpl.cm.cividis`), see :func:`~matplotlib.cm.get_cmap`.
    If `None`, the value of `mpl.rcParams[""image.cmap""]` is used.
    The default `color_map` can be set using :func:`~scanpy.set_figure_params`.
palette
    Colors to use for plotting categorical annotation groups.
    The palette can be a valid :class:`~matplotlib.colors.ListedColormap` name
    (`'Set2'`, `'tab20'`, …), a :class:`~cycler.Cycler` object, a dict mapping
    categories to colors, or a sequence of colors. Colors must be valid to
    matplotlib. (see :func:`~matplotlib.colors.is_color_like`).
    If `None`, `mpl.rcParams[""axes.prop_cycle""]` is used unless the categorical
    variable already has colors stored in `adata.uns[""{var}_colors""]`.
    If provided, values of `adata.uns[""{var}_colors""]` will be set.
na_color
    Color to use for null or masked values. Can be anything matplotlib accepts as a
    color. Used for all points if `color=None`.
na_in_legend
    If there are missing values, whether they get an entry in the legend. Currently
    only implemented for categorical legends.
frameon
    Draw a frame around the scatter plot. Defaults to value set in
    :func:`~scanpy.set_figure_params`, defaults to `True`.
title
    Provide title for panels either as string or list of strings,
    e.g. `['title1', 'title2', ...]`.
""""""",constant,,,,"Constant: doc_scatter_basic = """"""\
sort_order
    For continuous annotations used as color parameter, plot data points
    with higher values on top of others.
groups
    Restrict to a few categories in categorical observation annotation.
    The default is not to restrict to any groups.
dimensions
    0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].
    Unlike `components`, this argument is used in the same way as `colors`, e.g. is
    used to specify a single plot at a time. Will eventually replace the components
    argument.
components
    For instance, `['1,2', '2,3']`. To plot all available components use
    `components='all'`.
projection
    Projection of plot (default: `'2d'`).
legend_loc
    Location of legend, either `'on data'`, `'right margin'` or a valid keyword
    for the `loc` parameter of :class:`~matplotlib.legend.Legend`.
legend_fontsize
    Numeric size in pt or string describing the size.
    See :meth:`~matplotlib.text.Text.set_fontsize`.
legend_fontweight
    Legend font weight. A numeric value in range 0-1000 or a string.
    Defaults to `'bold'` if `legend_loc == 'on data'`, otherwise to `'normal'`.
    See :meth:`~matplotlib.text.Text.set_fontweight`.
legend_fontoutline
    Line width of the legend font outline in pt. Draws a white outline using
    the path effect :class:`~matplotlib.patheffects.withStroke`.
colorbar_loc
    Where to place the colorbar for continous variables. If `None`, no colorbar
    is added.
size
    Point size. If `None`, is automatically computed as 120000 / n_cells.
    Can be a sequence containing the size for each cell. The order should be
    the same as in adata.obs.
color_map
    Color map to use for continous variables. Can be a name or a
    :class:`~matplotlib.colors.Colormap` instance (e.g. `""magma`"", `""viridis""`
    or `mpl.cm.cividis`), see :func:`~matplotlib.cm.get_cmap`.
    If `None`, the value of `mpl.rcParams[""image.cmap""]` is used.
    The default `color_map` can be set using :func:`~scanpy.set_figure_params`.
palette
    Colors to use for plotting categorical annotation groups.
    The palette can be a valid :class:`~matplotlib.colors.ListedColormap` name
    (`'Set2'`, `'tab20'`, …), a :class:`~cycler.Cycler` object, a dict mapping
    categories to colors, or a sequence of colors. Colors must be valid to
    matplotlib. (see :func:`~matplotlib.colors.is_color_like`).
    If `None`, `mpl.rcParams[""axes.prop_cycle""]` is used unless the categorical
    variable already has colors stored in `adata.uns[""{var}_colors""]`.
    If provided, values of `adata.uns[""{var}_colors""]` will be set.
na_color
    Color to use for null or masked values. Can be anything matplotlib accepts as a
    color. Used for all points if `color=None`.
na_in_legend
    If there are missing values, whether they get an entry in the legend. Currently
    only implemented for categorical legends.
frameon
    Draw a frame around the scatter plot. Defaults to value set in
    :func:`~scanpy.set_figure_params`, defaults to `True`.
title
    Provide title for panels either as string or list of strings,
    e.g. `['title1', 'title2', ...]`.
""""""",scverse,scanpy,1.10.1,,,,,"doc_scatter_basic = """"""\
sort_order
    For continuous annotations used as color parameter, plot data points
    with higher values on top of others.
groups
    Restrict to a few categories in categorical observation annotation.
    The default is not to restrict to any groups.
dimensions
    0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].
    Unlike `components`, this argument is used in the same way as `colors`, e.g. is
    used to specify a single plot at a time. Will eventually replace the components
    argument.
components
    For instance, `['1,2', '2,3']`. To plot all available components use
    `components='all'`.
projection
    Projection of plot (default: `'2d'`).
legend_loc
    Location of legend, either `'on data'`, `'right margin'` or a valid keyword
    for the `loc` parameter of :class:`~matplotlib.legend.Legend`.
legend_fontsize
    Numeric size in pt or string describing the size.
    See :meth:`~matplotlib.text.Text.set_fontsize`.
legend_fontweight
    Legend font weight. A numeric value in range 0-1000 or a string.
    Defaults to `'bold'` if `legend_loc == 'on data'`, otherwise to `'normal'`.
    See :meth:`~matplotlib.text.Text.set_fontweight`.
legend_fontoutline
    Line width of the legend font outline in pt. Draws a white outline using
    the path effect :class:`~matplotlib.patheffects.withStroke`.
colorbar_loc
    Where to place the colorbar for continous variables. If `None`, no colorbar
    is added.
size
    Point size. If `None`, is automatically computed as 120000 / n_cells.
    Can be a sequence containing the size for each cell. The order should be
    the same as in adata.obs.
color_map
    Color map to use for continous variables. Can be a name or a
    :class:`~matplotlib.colors.Colormap` instance (e.g. `""magma`"", `""viridis""`
    or `mpl.cm.cividis`), see :func:`~matplotlib.cm.get_cmap`.
    If `None`, the value of `mpl.rcParams[""image.cmap""]` is used.
    The default `color_map` can be set using :func:`~scanpy.set_figure_params`.
palette
    Colors to use for plotting categorical annotation groups.
    The palette can be a valid :class:`~matplotlib.colors.ListedColormap` name
    (`'Set2'`, `'tab20'`, …), a :class:`~cycler.Cycler` object, a dict mapping
    categories to colors, or a sequence of colors. Colors must be valid to
    matplotlib. (see :func:`~matplotlib.colors.is_color_like`).
    If `None`, `mpl.rcParams[""axes.prop_cycle""]` is used unless the categorical
    variable already has colors stored in `adata.uns[""{var}_colors""]`.
    If provided, values of `adata.uns[""{var}_colors""]` will be set.
na_color
    Color to use for null or masked values. Can be anything matplotlib accepts as a
    color. Used for all points if `color=None`.
na_in_legend
    If there are missing values, whether they get an entry in the legend. Currently
    only implemented for categorical legends.
frameon
    Draw a frame around the scatter plot. Defaults to value set in
    :func:`~scanpy.set_figure_params`, defaults to `True`.
title
    Provide title for panels either as string or list of strings,
    e.g. `['title1', 'title2', ...]`.
""""""",doc_scatter_basic,"""""""\
sort_order
    For continuous annotations used as color parameter, plot data points
    with higher values on top of others.
groups
    Restrict to a few categories in categorical observation annotation.
    The default is not to restrict to any groups.
dimensions
    0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].
    Unlike `components`, this argument is used in the same way as `colors`, e.g. is
    used to specify a single plot at a time. Will eventually replace the components
    argument.
components
    For instance, `['1,2', '2,3']`. To plot all available components use
    `components='all'`.
projection
    Projection of plot (default: `'2d'`).
legend_loc
    Location of legend, either `'on data'`, `'right margin'` or a valid keyword
    for the `loc` parameter of :class:`~matplotlib.legend.Legend`.
legend_fontsize
    Numeric size in pt or string describing the size.
    See :meth:`~matplotlib.text.Text.set_fontsize`.
legend_fontweight
    Legend font weight. A numeric value in range 0-1000 or a string.
    Defaults to `'bold'` if `legend_loc == 'on data'`, otherwise to `'normal'`.
    See :meth:`~matplotlib.text.Text.set_fontweight`.
legend_fontoutline
    Line width of the legend font outline in pt. Draws a white outline using
    the path effect :class:`~matplotlib.patheffects.withStroke`.
colorbar_loc
    Where to place the colorbar for continous variables. If `None`, no colorbar
    is added.
size
    Point size. If `None`, is automatically computed as 120000 / n_cells.
    Can be a sequence containing the size for each cell. The order should be
    the same as in adata.obs.
color_map
    Color map to use for continous variables. Can be a name or a
    :class:`~matplotlib.colors.Colormap` instance (e.g. `""magma`"", `""viridis""`
    or `mpl.cm.cividis`), see :func:`~matplotlib.cm.get_cmap`.
    If `None`, the value of `mpl.rcParams[""image.cmap""]` is used.
    The default `color_map` can be set using :func:`~scanpy.set_figure_params`.
palette
    Colors to use for plotting categorical annotation groups.
    The palette can be a valid :class:`~matplotlib.colors.ListedColormap` name
    (`'Set2'`, `'tab20'`, …), a :class:`~cycler.Cycler` object, a dict mapping
    categories to colors, or a sequence of colors. Colors must be valid to
    matplotlib. (see :func:`~matplotlib.colors.is_color_like`).
    If `None`, `mpl.rcParams[""axes.prop_cycle""]` is used unless the categorical
    variable already has colors stored in `adata.uns[""{var}_colors""]`.
    If provided, values of `adata.uns[""{var}_colors""]` will be set.
na_color
    Color to use for null or masked values. Can be anything matplotlib accepts as a
    color. Used for all points if `color=None`.
na_in_legend
    If there are missing values, whether they get an entry in the legend. Currently
    only implemented for categorical legends.
frameon
    Draw a frame around the scatter plot. Defaults to value set in
    :func:`~scanpy.set_figure_params`, defaults to `True`.
title
    Provide title for panels either as string or list of strings,
    e.g. `['title1', 'title2', ...]`.
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_vbound_percentile = """"""\
vmin
    The value representing the lower limit of the color scale. Values smaller than vmin are plotted
    with the same color as vmin. vmin can be a number, a string, a function or `None`. If
    vmin is a string and has the format `pN`, this is interpreted as a vmin=percentile(N).
    For example vmin='p1.5' is interpreted as the 1.5 percentile. If vmin is function, then
    vmin is interpreted as the return value of the function over the list of values to plot.
    For example to set vmin tp the mean of the values to plot, `def my_vmin(values): return
    np.mean(values)` and then set `vmin=my_vmin`. If vmin is None (default) an automatic
    minimum value is used as defined by matplotlib `scatter` function. When making multiple
    plots, vmin can be a list of values, one for each plot. For example `vmin=[0.1, 'p1', None, my_vmin]`
vmax
    The value representing the upper limit of the color scale. The format is the same as for `vmin`.
vcenter
    The value representing the center of the color scale. Useful for diverging colormaps.
    The format is the same as for `vmin`.
    Example: sc.pl.umap(adata, color='TREM2', vcenter='p50', cmap='RdBu_r')\
""""""",constant,,,,"Constant: doc_vbound_percentile = """"""\
vmin
    The value representing the lower limit of the color scale. Values smaller than vmin are plotted
    with the same color as vmin. vmin can be a number, a string, a function or `None`. If
    vmin is a string and has the format `pN`, this is interpreted as a vmin=percentile(N).
    For example vmin='p1.5' is interpreted as the 1.5 percentile. If vmin is function, then
    vmin is interpreted as the return value of the function over the list of values to plot.
    For example to set vmin tp the mean of the values to plot, `def my_vmin(values): return
    np.mean(values)` and then set `vmin=my_vmin`. If vmin is None (default) an automatic
    minimum value is used as defined by matplotlib `scatter` function. When making multiple
    plots, vmin can be a list of values, one for each plot. For example `vmin=[0.1, 'p1', None, my_vmin]`
vmax
    The value representing the upper limit of the color scale. The format is the same as for `vmin`.
vcenter
    The value representing the center of the color scale. Useful for diverging colormaps.
    The format is the same as for `vmin`.
    Example: sc.pl.umap(adata, color='TREM2', vcenter='p50', cmap='RdBu_r')\
""""""",scverse,scanpy,1.10.1,,,,,"doc_vbound_percentile = """"""\
vmin
    The value representing the lower limit of the color scale. Values smaller than vmin are plotted
    with the same color as vmin. vmin can be a number, a string, a function or `None`. If
    vmin is a string and has the format `pN`, this is interpreted as a vmin=percentile(N).
    For example vmin='p1.5' is interpreted as the 1.5 percentile. If vmin is function, then
    vmin is interpreted as the return value of the function over the list of values to plot.
    For example to set vmin tp the mean of the values to plot, `def my_vmin(values): return
    np.mean(values)` and then set `vmin=my_vmin`. If vmin is None (default) an automatic
    minimum value is used as defined by matplotlib `scatter` function. When making multiple
    plots, vmin can be a list of values, one for each plot. For example `vmin=[0.1, 'p1', None, my_vmin]`
vmax
    The value representing the upper limit of the color scale. The format is the same as for `vmin`.
vcenter
    The value representing the center of the color scale. Useful for diverging colormaps.
    The format is the same as for `vmin`.
    Example: sc.pl.umap(adata, color='TREM2', vcenter='p50', cmap='RdBu_r')\
""""""",doc_vbound_percentile,"""""""\
vmin
    The value representing the lower limit of the color scale. Values smaller than vmin are plotted
    with the same color as vmin. vmin can be a number, a string, a function or `None`. If
    vmin is a string and has the format `pN`, this is interpreted as a vmin=percentile(N).
    For example vmin='p1.5' is interpreted as the 1.5 percentile. If vmin is function, then
    vmin is interpreted as the return value of the function over the list of values to plot.
    For example to set vmin tp the mean of the values to plot, `def my_vmin(values): return
    np.mean(values)` and then set `vmin=my_vmin`. If vmin is None (default) an automatic
    minimum value is used as defined by matplotlib `scatter` function. When making multiple
    plots, vmin can be a list of values, one for each plot. For example `vmin=[0.1, 'p1', None, my_vmin]`
vmax
    The value representing the upper limit of the color scale. The format is the same as for `vmin`.
vcenter
    The value representing the center of the color scale. Useful for diverging colormaps.
    The format is the same as for `vmin`.
    Example: sc.pl.umap(adata, color='TREM2', vcenter='p50', cmap='RdBu_r')\
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_vboundnorm = """"""\
vmin
    The value representing the lower limit of the color scale. Values smaller than vmin are plotted
    with the same color as vmin.
vmax
    The value representing the upper limit of the color scale. Values larger than vmax are plotted
    with the same color as vmax.
vcenter
    The value representing the center of the color scale. Useful for diverging colormaps.
norm
    Custom color normalization object from matplotlib. See
    `https://matplotlib.org/stable/tutorials/colors/colormapnorms.html` for details.\
""""""",constant,,,,"Constant: doc_vboundnorm = """"""\
vmin
    The value representing the lower limit of the color scale. Values smaller than vmin are plotted
    with the same color as vmin.
vmax
    The value representing the upper limit of the color scale. Values larger than vmax are plotted
    with the same color as vmax.
vcenter
    The value representing the center of the color scale. Useful for diverging colormaps.
norm
    Custom color normalization object from matplotlib. See
    `https://matplotlib.org/stable/tutorials/colors/colormapnorms.html` for details.\
""""""",scverse,scanpy,1.10.1,,,,,"doc_vboundnorm = """"""\
vmin
    The value representing the lower limit of the color scale. Values smaller than vmin are plotted
    with the same color as vmin.
vmax
    The value representing the upper limit of the color scale. Values larger than vmax are plotted
    with the same color as vmax.
vcenter
    The value representing the center of the color scale. Useful for diverging colormaps.
norm
    Custom color normalization object from matplotlib. See
    `https://matplotlib.org/stable/tutorials/colors/colormapnorms.html` for details.\
""""""",doc_vboundnorm,"""""""\
vmin
    The value representing the lower limit of the color scale. Values smaller than vmin are plotted
    with the same color as vmin.
vmax
    The value representing the upper limit of the color scale. Values larger than vmax are plotted
    with the same color as vmax.
vcenter
    The value representing the center of the color scale. Useful for diverging colormaps.
norm
    Custom color normalization object from matplotlib. See
    `https://matplotlib.org/stable/tutorials/colors/colormapnorms.html` for details.\
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_outline = """"""\
add_outline
    If set to True, this will add a thin border around groups of dots. In some situations
    this can enhance the aesthetics of the resulting image
outline_color
    Tuple with two valid color names used to adjust the add_outline. The first color is the
    border color (default: black), while the second color is a gap color between the
    border color and the scatter dot (default: white).
outline_width
    Tuple with two width numbers used to adjust the outline. The first value is the width
    of the border color as a fraction of the scatter dot size (default: 0.3). The second value is
    width of the gap color (default: 0.05).\
""""""",constant,,,,"Constant: doc_outline = """"""\
add_outline
    If set to True, this will add a thin border around groups of dots. In some situations
    this can enhance the aesthetics of the resulting image
outline_color
    Tuple with two valid color names used to adjust the add_outline. The first color is the
    border color (default: black), while the second color is a gap color between the
    border color and the scatter dot (default: white).
outline_width
    Tuple with two width numbers used to adjust the outline. The first value is the width
    of the border color as a fraction of the scatter dot size (default: 0.3). The second value is
    width of the gap color (default: 0.05).\
""""""",scverse,scanpy,1.10.1,,,,,"doc_outline = """"""\
add_outline
    If set to True, this will add a thin border around groups of dots. In some situations
    this can enhance the aesthetics of the resulting image
outline_color
    Tuple with two valid color names used to adjust the add_outline. The first color is the
    border color (default: black), while the second color is a gap color between the
    border color and the scatter dot (default: white).
outline_width
    Tuple with two width numbers used to adjust the outline. The first value is the width
    of the border color as a fraction of the scatter dot size (default: 0.3). The second value is
    width of the gap color (default: 0.05).\
""""""",doc_outline,"""""""\
add_outline
    If set to True, this will add a thin border around groups of dots. In some situations
    this can enhance the aesthetics of the resulting image
outline_color
    Tuple with two valid color names used to adjust the add_outline. The first color is the
    border color (default: black), while the second color is a gap color between the
    border color and the scatter dot (default: white).
outline_width
    Tuple with two width numbers used to adjust the outline. The first value is the width
    of the border color as a fraction of the scatter dot size (default: 0.3). The second value is
    width of the gap color (default: 0.05).\
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_panels = """"""\
ncols
    Number of panels per row.
wspace
    Adjust the width of the space between multiple panels.
hspace
    Adjust the height of the space between multiple panels.
return_fig
    Return the matplotlib figure.\
""""""",constant,,,,"Constant: doc_panels = """"""\
ncols
    Number of panels per row.
wspace
    Adjust the width of the space between multiple panels.
hspace
    Adjust the height of the space between multiple panels.
return_fig
    Return the matplotlib figure.\
""""""",scverse,scanpy,1.10.1,,,,,"doc_panels = """"""\
ncols
    Number of panels per row.
wspace
    Adjust the width of the space between multiple panels.
hspace
    Adjust the height of the space between multiple panels.
return_fig
    Return the matplotlib figure.\
""""""",doc_panels,"""""""\
ncols
    Number of panels per row.
wspace
    Adjust the width of the space between multiple panels.
hspace
    Adjust the height of the space between multiple panels.
return_fig
    Return the matplotlib figure.\
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_scatter_embedding = f""""""\
{doc_scatter_basic}
{doc_vbound_percentile}
{doc_outline}
{doc_panels}
kwargs
    Arguments to pass to :func:`matplotlib.pyplot.scatter`,
    for instance: the maximum and minimum values (e.g. `vmin=-2, vmax=5`).\
""""""",constant,,,,"Constant: doc_scatter_embedding = f""""""\
{doc_scatter_basic}
{doc_vbound_percentile}
{doc_outline}
{doc_panels}
kwargs
    Arguments to pass to :func:`matplotlib.pyplot.scatter`,
    for instance: the maximum and minimum values (e.g. `vmin=-2, vmax=5`).\
""""""",scverse,scanpy,1.10.1,,,,,"doc_scatter_embedding = f""""""\
{doc_scatter_basic}
{doc_vbound_percentile}
{doc_outline}
{doc_panels}
kwargs
    Arguments to pass to :func:`matplotlib.pyplot.scatter`,
    for instance: the maximum and minimum values (e.g. `vmin=-2, vmax=5`).\
""""""",doc_scatter_embedding,"f""""""\
{doc_scatter_basic}
{doc_vbound_percentile}
{doc_outline}
{doc_panels}
kwargs
    Arguments to pass to :func:`matplotlib.pyplot.scatter`,
    for instance: the maximum and minimum values (e.g. `vmin=-2, vmax=5`).\
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_show_save_ax = """"""\
show
     Show the plot, do not return axis.
save
    If `True` or a `str`, save the figure.
    A string is appended to the default filename.
    Infer the filetype if ending on {`'.pdf'`, `'.png'`, `'.svg'`}.
ax
    A matplotlib axes object. Only works if plotting a single component.\
""""""",constant,,,,"Constant: doc_show_save_ax = """"""\
show
     Show the plot, do not return axis.
save
    If `True` or a `str`, save the figure.
    A string is appended to the default filename.
    Infer the filetype if ending on {`'.pdf'`, `'.png'`, `'.svg'`}.
ax
    A matplotlib axes object. Only works if plotting a single component.\
""""""",scverse,scanpy,1.10.1,,,,,"doc_show_save_ax = """"""\
show
     Show the plot, do not return axis.
save
    If `True` or a `str`, save the figure.
    A string is appended to the default filename.
    Infer the filetype if ending on {`'.pdf'`, `'.png'`, `'.svg'`}.
ax
    A matplotlib axes object. Only works if plotting a single component.\
""""""",doc_show_save_ax,"""""""\
show
     Show the plot, do not return axis.
save
    If `True` or a `str`, save the figure.
    A string is appended to the default filename.
    Infer the filetype if ending on {`'.pdf'`, `'.png'`, `'.svg'`}.
ax
    A matplotlib axes object. Only works if plotting a single component.\
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_common_plot_args = """"""\
adata
    Annotated data matrix.
var_names
    `var_names` should be a valid subset of `adata.var_names`.
    If `var_names` is a mapping, then the key is used as label
    to group the values (see `var_group_labels`). The mapping values
    should be sequences of valid `adata.var_names`. In this
    case either coloring or 'brackets' are used for the grouping
    of var names depending on the plot. When `var_names` is a mapping,
    then the `var_group_labels` and `var_group_positions` are set.
groupby
    The key of the observation grouping to consider.
use_raw
    Use `raw` attribute of `adata` if present.
log
    Plot on logarithmic axis.
num_categories
    Only used if groupby observation is not categorical. This value
    determines the number of groups into which the groupby observation
    should be subdivided.
categories_order
    Order in which to show the categories. Note: add_dendrogram or add_totals
    can change the categories order.
figsize
    Figure size when `multi_panel=True`.
    Otherwise the `rcParam['figure.figsize]` value is used.
    Format is (width, height)
dendrogram
    If True or a valid dendrogram key, a dendrogram based on the hierarchical
    clustering between the `groupby` categories is added.
    The dendrogram information is computed using :func:`scanpy.tl.dendrogram`.
    If `tl.dendrogram` has not been called previously the function is called
    with default parameters.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols.
    By default `var_names` refer to the index column of the `.var` DataFrame.
    Setting this option allows alternative names to be used.
var_group_positions
    Use this parameter to highlight groups of `var_names`.
    This will draw a 'bracket' or a color block between the given start and end
    positions. If the parameter `var_group_labels` is set, the corresponding
    labels are added on top/left. E.g. `var_group_positions=[(4,10)]`
    will add a bracket between the fourth `var_name` and the tenth `var_name`.
    By giving more positions, more brackets/color blocks are drawn.
var_group_labels
    Labels for each of the `var_group_positions` that want to be highlighted.
var_group_rotation
    Label rotation degrees.
    By default, labels larger than 4 characters are rotated 90 degrees.
layer
    Name of the AnnData object layer that wants to be plotted. By default adata.raw.X is plotted.
    If `use_raw=False` is set, then `adata.X` is plotted. If `layer` is set to a valid layer name,
    then the layer is plotted. `layer` takes precedence over `use_raw`.\
""""""",constant,,,,"Constant: doc_common_plot_args = """"""\
adata
    Annotated data matrix.
var_names
    `var_names` should be a valid subset of `adata.var_names`.
    If `var_names` is a mapping, then the key is used as label
    to group the values (see `var_group_labels`). The mapping values
    should be sequences of valid `adata.var_names`. In this
    case either coloring or 'brackets' are used for the grouping
    of var names depending on the plot. When `var_names` is a mapping,
    then the `var_group_labels` and `var_group_positions` are set.
groupby
    The key of the observation grouping to consider.
use_raw
    Use `raw` attribute of `adata` if present.
log
    Plot on logarithmic axis.
num_categories
    Only used if groupby observation is not categorical. This value
    determines the number of groups into which the groupby observation
    should be subdivided.
categories_order
    Order in which to show the categories. Note: add_dendrogram or add_totals
    can change the categories order.
figsize
    Figure size when `multi_panel=True`.
    Otherwise the `rcParam['figure.figsize]` value is used.
    Format is (width, height)
dendrogram
    If True or a valid dendrogram key, a dendrogram based on the hierarchical
    clustering between the `groupby` categories is added.
    The dendrogram information is computed using :func:`scanpy.tl.dendrogram`.
    If `tl.dendrogram` has not been called previously the function is called
    with default parameters.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols.
    By default `var_names` refer to the index column of the `.var` DataFrame.
    Setting this option allows alternative names to be used.
var_group_positions
    Use this parameter to highlight groups of `var_names`.
    This will draw a 'bracket' or a color block between the given start and end
    positions. If the parameter `var_group_labels` is set, the corresponding
    labels are added on top/left. E.g. `var_group_positions=[(4,10)]`
    will add a bracket between the fourth `var_name` and the tenth `var_name`.
    By giving more positions, more brackets/color blocks are drawn.
var_group_labels
    Labels for each of the `var_group_positions` that want to be highlighted.
var_group_rotation
    Label rotation degrees.
    By default, labels larger than 4 characters are rotated 90 degrees.
layer
    Name of the AnnData object layer that wants to be plotted. By default adata.raw.X is plotted.
    If `use_raw=False` is set, then `adata.X` is plotted. If `layer` is set to a valid layer name,
    then the layer is plotted. `layer` takes precedence over `use_raw`.\
""""""",scverse,scanpy,1.10.1,,,,,"doc_common_plot_args = """"""\
adata
    Annotated data matrix.
var_names
    `var_names` should be a valid subset of `adata.var_names`.
    If `var_names` is a mapping, then the key is used as label
    to group the values (see `var_group_labels`). The mapping values
    should be sequences of valid `adata.var_names`. In this
    case either coloring or 'brackets' are used for the grouping
    of var names depending on the plot. When `var_names` is a mapping,
    then the `var_group_labels` and `var_group_positions` are set.
groupby
    The key of the observation grouping to consider.
use_raw
    Use `raw` attribute of `adata` if present.
log
    Plot on logarithmic axis.
num_categories
    Only used if groupby observation is not categorical. This value
    determines the number of groups into which the groupby observation
    should be subdivided.
categories_order
    Order in which to show the categories. Note: add_dendrogram or add_totals
    can change the categories order.
figsize
    Figure size when `multi_panel=True`.
    Otherwise the `rcParam['figure.figsize]` value is used.
    Format is (width, height)
dendrogram
    If True or a valid dendrogram key, a dendrogram based on the hierarchical
    clustering between the `groupby` categories is added.
    The dendrogram information is computed using :func:`scanpy.tl.dendrogram`.
    If `tl.dendrogram` has not been called previously the function is called
    with default parameters.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols.
    By default `var_names` refer to the index column of the `.var` DataFrame.
    Setting this option allows alternative names to be used.
var_group_positions
    Use this parameter to highlight groups of `var_names`.
    This will draw a 'bracket' or a color block between the given start and end
    positions. If the parameter `var_group_labels` is set, the corresponding
    labels are added on top/left. E.g. `var_group_positions=[(4,10)]`
    will add a bracket between the fourth `var_name` and the tenth `var_name`.
    By giving more positions, more brackets/color blocks are drawn.
var_group_labels
    Labels for each of the `var_group_positions` that want to be highlighted.
var_group_rotation
    Label rotation degrees.
    By default, labels larger than 4 characters are rotated 90 degrees.
layer
    Name of the AnnData object layer that wants to be plotted. By default adata.raw.X is plotted.
    If `use_raw=False` is set, then `adata.X` is plotted. If `layer` is set to a valid layer name,
    then the layer is plotted. `layer` takes precedence over `use_raw`.\
""""""",doc_common_plot_args,"""""""\
adata
    Annotated data matrix.
var_names
    `var_names` should be a valid subset of `adata.var_names`.
    If `var_names` is a mapping, then the key is used as label
    to group the values (see `var_group_labels`). The mapping values
    should be sequences of valid `adata.var_names`. In this
    case either coloring or 'brackets' are used for the grouping
    of var names depending on the plot. When `var_names` is a mapping,
    then the `var_group_labels` and `var_group_positions` are set.
groupby
    The key of the observation grouping to consider.
use_raw
    Use `raw` attribute of `adata` if present.
log
    Plot on logarithmic axis.
num_categories
    Only used if groupby observation is not categorical. This value
    determines the number of groups into which the groupby observation
    should be subdivided.
categories_order
    Order in which to show the categories. Note: add_dendrogram or add_totals
    can change the categories order.
figsize
    Figure size when `multi_panel=True`.
    Otherwise the `rcParam['figure.figsize]` value is used.
    Format is (width, height)
dendrogram
    If True or a valid dendrogram key, a dendrogram based on the hierarchical
    clustering between the `groupby` categories is added.
    The dendrogram information is computed using :func:`scanpy.tl.dendrogram`.
    If `tl.dendrogram` has not been called previously the function is called
    with default parameters.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols.
    By default `var_names` refer to the index column of the `.var` DataFrame.
    Setting this option allows alternative names to be used.
var_group_positions
    Use this parameter to highlight groups of `var_names`.
    This will draw a 'bracket' or a color block between the given start and end
    positions. If the parameter `var_group_labels` is set, the corresponding
    labels are added on top/left. E.g. `var_group_positions=[(4,10)]`
    will add a bracket between the fourth `var_name` and the tenth `var_name`.
    By giving more positions, more brackets/color blocks are drawn.
var_group_labels
    Labels for each of the `var_group_positions` that want to be highlighted.
var_group_rotation
    Label rotation degrees.
    By default, labels larger than 4 characters are rotated 90 degrees.
layer
    Name of the AnnData object layer that wants to be plotted. By default adata.raw.X is plotted.
    If `use_raw=False` is set, then `adata.X` is plotted. If `layer` is set to a valid layer name,
    then the layer is plotted. `layer` takes precedence over `use_raw`.\
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_rank_genes_groups_plot_args = """"""\
adata
    Annotated data matrix.
groups
    The groups for which to show the gene ranking.
n_genes
    Number of genes to show. This can be a negative number to show for
    example the down regulated genes. eg: num_genes=-10. Is ignored if
    `gene_names` is passed.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols. By default `var_names`
    refer to the index column of the `.var` DataFrame. Setting this option allows
    alternative names to be used.
groupby
    The key of the observation grouping to consider. By default,
    the groupby is chosen from the rank genes groups parameter but
    other groupby options can be used.  It is expected that
    groupby is a categorical. If groupby is not a categorical observation,
    it would be subdivided into `num_categories` (see :func:`~scanpy.pl.dotplot`).
min_logfoldchange
    Value to filter genes in groups if their logfoldchange is less than the
    min_logfoldchange
key
    Key used to store the ranking results in `adata.uns`.\
""""""",constant,,,,"Constant: doc_rank_genes_groups_plot_args = """"""\
adata
    Annotated data matrix.
groups
    The groups for which to show the gene ranking.
n_genes
    Number of genes to show. This can be a negative number to show for
    example the down regulated genes. eg: num_genes=-10. Is ignored if
    `gene_names` is passed.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols. By default `var_names`
    refer to the index column of the `.var` DataFrame. Setting this option allows
    alternative names to be used.
groupby
    The key of the observation grouping to consider. By default,
    the groupby is chosen from the rank genes groups parameter but
    other groupby options can be used.  It is expected that
    groupby is a categorical. If groupby is not a categorical observation,
    it would be subdivided into `num_categories` (see :func:`~scanpy.pl.dotplot`).
min_logfoldchange
    Value to filter genes in groups if their logfoldchange is less than the
    min_logfoldchange
key
    Key used to store the ranking results in `adata.uns`.\
""""""",scverse,scanpy,1.10.1,,,,,"doc_rank_genes_groups_plot_args = """"""\
adata
    Annotated data matrix.
groups
    The groups for which to show the gene ranking.
n_genes
    Number of genes to show. This can be a negative number to show for
    example the down regulated genes. eg: num_genes=-10. Is ignored if
    `gene_names` is passed.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols. By default `var_names`
    refer to the index column of the `.var` DataFrame. Setting this option allows
    alternative names to be used.
groupby
    The key of the observation grouping to consider. By default,
    the groupby is chosen from the rank genes groups parameter but
    other groupby options can be used.  It is expected that
    groupby is a categorical. If groupby is not a categorical observation,
    it would be subdivided into `num_categories` (see :func:`~scanpy.pl.dotplot`).
min_logfoldchange
    Value to filter genes in groups if their logfoldchange is less than the
    min_logfoldchange
key
    Key used to store the ranking results in `adata.uns`.\
""""""",doc_rank_genes_groups_plot_args,"""""""\
adata
    Annotated data matrix.
groups
    The groups for which to show the gene ranking.
n_genes
    Number of genes to show. This can be a negative number to show for
    example the down regulated genes. eg: num_genes=-10. Is ignored if
    `gene_names` is passed.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols. By default `var_names`
    refer to the index column of the `.var` DataFrame. Setting this option allows
    alternative names to be used.
groupby
    The key of the observation grouping to consider. By default,
    the groupby is chosen from the rank genes groups parameter but
    other groupby options can be used.  It is expected that
    groupby is a categorical. If groupby is not a categorical observation,
    it would be subdivided into `num_categories` (see :func:`~scanpy.pl.dotplot`).
min_logfoldchange
    Value to filter genes in groups if their logfoldchange is less than the
    min_logfoldchange
key
    Key used to store the ranking results in `adata.uns`.\
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_rank_genes_groups_values_to_plot = """"""\
values_to_plot
    Instead of the mean gene value, plot the values computed by `sc.rank_genes_groups`.
    The options are: ['scores', 'logfoldchanges', 'pvals', 'pvals_adj',
    'log10_pvals', 'log10_pvals_adj']. When plotting logfoldchanges a divergent
    colormap is recommended. See examples below.
var_names
    Genes to plot. Sometimes is useful to pass a specific list of var names (e.g. genes)
    to check their fold changes or p-values, instead of the top/bottom genes. The
    var_names could be a dictionary or a list as in :func:`~scanpy.pl.dotplot` or
    :func:`~scanpy.pl.matrixplot`. See examples below.\
""""""",constant,,,,"Constant: doc_rank_genes_groups_values_to_plot = """"""\
values_to_plot
    Instead of the mean gene value, plot the values computed by `sc.rank_genes_groups`.
    The options are: ['scores', 'logfoldchanges', 'pvals', 'pvals_adj',
    'log10_pvals', 'log10_pvals_adj']. When plotting logfoldchanges a divergent
    colormap is recommended. See examples below.
var_names
    Genes to plot. Sometimes is useful to pass a specific list of var names (e.g. genes)
    to check their fold changes or p-values, instead of the top/bottom genes. The
    var_names could be a dictionary or a list as in :func:`~scanpy.pl.dotplot` or
    :func:`~scanpy.pl.matrixplot`. See examples below.\
""""""",scverse,scanpy,1.10.1,,,,,"doc_rank_genes_groups_values_to_plot = """"""\
values_to_plot
    Instead of the mean gene value, plot the values computed by `sc.rank_genes_groups`.
    The options are: ['scores', 'logfoldchanges', 'pvals', 'pvals_adj',
    'log10_pvals', 'log10_pvals_adj']. When plotting logfoldchanges a divergent
    colormap is recommended. See examples below.
var_names
    Genes to plot. Sometimes is useful to pass a specific list of var names (e.g. genes)
    to check their fold changes or p-values, instead of the top/bottom genes. The
    var_names could be a dictionary or a list as in :func:`~scanpy.pl.dotplot` or
    :func:`~scanpy.pl.matrixplot`. See examples below.\
""""""",doc_rank_genes_groups_values_to_plot,"""""""\
values_to_plot
    Instead of the mean gene value, plot the values computed by `sc.rank_genes_groups`.
    The options are: ['scores', 'logfoldchanges', 'pvals', 'pvals_adj',
    'log10_pvals', 'log10_pvals_adj']. When plotting logfoldchanges a divergent
    colormap is recommended. See examples below.
var_names
    Genes to plot. Sometimes is useful to pass a specific list of var names (e.g. genes)
    to check their fold changes or p-values, instead of the top/bottom genes. The
    var_names could be a dictionary or a list as in :func:`~scanpy.pl.dotplot` or
    :func:`~scanpy.pl.matrixplot`. See examples below.\
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_scatter_spatial = """"""\
library_id
    library_id for Visium data, e.g. key in `adata.uns[""spatial""]`.
img_key
    Key for image data, used to get `img` and `scale_factor` from `""images""`
    and `""scalefactors""` entires for this library. To use spatial coordinates,
    but not plot an image, pass `img_key=None`.
img
    image data to plot, overrides `img_key`.
scale_factor
    Scaling factor used to map from coordinate space to pixel space.
    Found by default if `library_id` and `img_key` can be resolved.
    Otherwise defaults to `1.`.
spot_size
    Diameter of spot (in coordinate space) for each point. Diameter
    in pixels of the spots will be `size * spot_size * scale_factor`.
    This argument is required if it cannot be resolved from library info.
crop_coord
    Coordinates to use for cropping the image (left, right, top, bottom).
    These coordinates are expected to be in pixel space (same as `basis`)
    and will be transformed by `scale_factor`.
    If not provided, image is automatically cropped to bounds of `basis`,
    plus a border.
alpha_img
    Alpha value for image.
bw
    Plot image data in gray scale.\
""""""",constant,,,,"Constant: doc_scatter_spatial = """"""\
library_id
    library_id for Visium data, e.g. key in `adata.uns[""spatial""]`.
img_key
    Key for image data, used to get `img` and `scale_factor` from `""images""`
    and `""scalefactors""` entires for this library. To use spatial coordinates,
    but not plot an image, pass `img_key=None`.
img
    image data to plot, overrides `img_key`.
scale_factor
    Scaling factor used to map from coordinate space to pixel space.
    Found by default if `library_id` and `img_key` can be resolved.
    Otherwise defaults to `1.`.
spot_size
    Diameter of spot (in coordinate space) for each point. Diameter
    in pixels of the spots will be `size * spot_size * scale_factor`.
    This argument is required if it cannot be resolved from library info.
crop_coord
    Coordinates to use for cropping the image (left, right, top, bottom).
    These coordinates are expected to be in pixel space (same as `basis`)
    and will be transformed by `scale_factor`.
    If not provided, image is automatically cropped to bounds of `basis`,
    plus a border.
alpha_img
    Alpha value for image.
bw
    Plot image data in gray scale.\
""""""",scverse,scanpy,1.10.1,,,,,"doc_scatter_spatial = """"""\
library_id
    library_id for Visium data, e.g. key in `adata.uns[""spatial""]`.
img_key
    Key for image data, used to get `img` and `scale_factor` from `""images""`
    and `""scalefactors""` entires for this library. To use spatial coordinates,
    but not plot an image, pass `img_key=None`.
img
    image data to plot, overrides `img_key`.
scale_factor
    Scaling factor used to map from coordinate space to pixel space.
    Found by default if `library_id` and `img_key` can be resolved.
    Otherwise defaults to `1.`.
spot_size
    Diameter of spot (in coordinate space) for each point. Diameter
    in pixels of the spots will be `size * spot_size * scale_factor`.
    This argument is required if it cannot be resolved from library info.
crop_coord
    Coordinates to use for cropping the image (left, right, top, bottom).
    These coordinates are expected to be in pixel space (same as `basis`)
    and will be transformed by `scale_factor`.
    If not provided, image is automatically cropped to bounds of `basis`,
    plus a border.
alpha_img
    Alpha value for image.
bw
    Plot image data in gray scale.\
""""""",doc_scatter_spatial,"""""""\
library_id
    library_id for Visium data, e.g. key in `adata.uns[""spatial""]`.
img_key
    Key for image data, used to get `img` and `scale_factor` from `""images""`
    and `""scalefactors""` entires for this library. To use spatial coordinates,
    but not plot an image, pass `img_key=None`.
img
    image data to plot, overrides `img_key`.
scale_factor
    Scaling factor used to map from coordinate space to pixel space.
    Found by default if `library_id` and `img_key` can be resolved.
    Otherwise defaults to `1.`.
spot_size
    Diameter of spot (in coordinate space) for each point. Diameter
    in pixels of the spots will be `size * spot_size * scale_factor`.
    This argument is required if it cannot be resolved from library info.
crop_coord
    Coordinates to use for cropping the image (left, right, top, bottom).
    These coordinates are expected to be in pixel space (same as `basis`)
    and will be transformed by `scale_factor`.
    If not provided, image is automatically cropped to bounds of `basis`,
    plus a border.
alpha_img
    Alpha value for image.
bw
    Plot image data in gray scale.\
""""""",,,,,,,,,,,
,_docs.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_docs.py,python,,,,,,Directory: scanpy\plotting\_docs.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dotplot.py,python,"DotPlot.DEFAULT_SAVE_PREFIX = ""dotplot_""",class_field,,,,"Class field: DotPlot.DEFAULT_SAVE_PREFIX = ""dotplot_""",scverse,scanpy,1.10.1,,,,,,,,,DotPlot,,,"DEFAULT_SAVE_PREFIX = ""dotplot_""",,,,,DEFAULT_SAVE_PREFIX,"""dotplot_"""
scverse_scanpy_1.10.1,_dotplot.py,python,"DotPlot.DEFAULT_COLORMAP = ""winter""",class_field,,,,"Class field: DotPlot.DEFAULT_COLORMAP = ""winter""",scverse,scanpy,1.10.1,,,,,,,,,DotPlot,,,"DEFAULT_COLORMAP = ""winter""",,,,,DEFAULT_COLORMAP,"""winter"""
scverse_scanpy_1.10.1,_dotplot.py,python,"DotPlot.DEFAULT_COLOR_ON = ""dot""",class_field,,,,"Class field: DotPlot.DEFAULT_COLOR_ON = ""dot""",scverse,scanpy,1.10.1,,,,,,,,,DotPlot,,,"DEFAULT_COLOR_ON = ""dot""",,,,,DEFAULT_COLOR_ON,"""dot"""
scverse_scanpy_1.10.1,_dotplot.py,python,DotPlot.DEFAULT_DOT_MAX = None,class_field,,,,Class field: DotPlot.DEFAULT_DOT_MAX = None,scverse,scanpy,1.10.1,,,,,,,,,DotPlot,,,DEFAULT_DOT_MAX = None,,,,,DEFAULT_DOT_MAX,None
scverse_scanpy_1.10.1,_dotplot.py,python,DotPlot.DEFAULT_DOT_MIN = None,class_field,,,,Class field: DotPlot.DEFAULT_DOT_MIN = None,scverse,scanpy,1.10.1,,,,,,,,,DotPlot,,,DEFAULT_DOT_MIN = None,,,,,DEFAULT_DOT_MIN,None
scverse_scanpy_1.10.1,_dotplot.py,python,DotPlot.DEFAULT_SMALLEST_DOT = 0.0,class_field,,,,Class field: DotPlot.DEFAULT_SMALLEST_DOT = 0.0,scverse,scanpy,1.10.1,,,,,,,,,DotPlot,,,DEFAULT_SMALLEST_DOT = 0.0,,,,,DEFAULT_SMALLEST_DOT,0.0
scverse_scanpy_1.10.1,_dotplot.py,python,DotPlot.DEFAULT_LARGEST_DOT = 200.0,class_field,,,,Class field: DotPlot.DEFAULT_LARGEST_DOT = 200.0,scverse,scanpy,1.10.1,,,,,,,,,DotPlot,,,DEFAULT_LARGEST_DOT = 200.0,,,,,DEFAULT_LARGEST_DOT,200.0
scverse_scanpy_1.10.1,_dotplot.py,python,"DotPlot.DEFAULT_DOT_EDGECOLOR = ""black""",class_field,,,,"Class field: DotPlot.DEFAULT_DOT_EDGECOLOR = ""black""",scverse,scanpy,1.10.1,,,,,,,,,DotPlot,,,"DEFAULT_DOT_EDGECOLOR = ""black""",,,,,DEFAULT_DOT_EDGECOLOR,"""black"""
scverse_scanpy_1.10.1,_dotplot.py,python,DotPlot.DEFAULT_DOT_EDGELW = 0.2,class_field,,,,Class field: DotPlot.DEFAULT_DOT_EDGELW = 0.2,scverse,scanpy,1.10.1,,,,,,,,,DotPlot,,,DEFAULT_DOT_EDGELW = 0.2,,,,,DEFAULT_DOT_EDGELW,0.2
scverse_scanpy_1.10.1,_dotplot.py,python,DotPlot.DEFAULT_SIZE_EXPONENT = 1.5,class_field,,,,Class field: DotPlot.DEFAULT_SIZE_EXPONENT = 1.5,scverse,scanpy,1.10.1,,,,,,,,,DotPlot,,,DEFAULT_SIZE_EXPONENT = 1.5,,,,,DEFAULT_SIZE_EXPONENT,1.5
scverse_scanpy_1.10.1,_dotplot.py,python,"DotPlot.DEFAULT_SIZE_LEGEND_TITLE = ""Fraction of cells\nin group (%)""",class_field,,,,"Class field: DotPlot.DEFAULT_SIZE_LEGEND_TITLE = ""Fraction of cells\nin group (%)""",scverse,scanpy,1.10.1,,,,,,,,,DotPlot,,,"DEFAULT_SIZE_LEGEND_TITLE = ""Fraction of cells\nin group (%)""",,,,,DEFAULT_SIZE_LEGEND_TITLE,"""Fraction of cells\nin group (%)"""
scverse_scanpy_1.10.1,_dotplot.py,python,"DotPlot.DEFAULT_COLOR_LEGEND_TITLE = ""Mean expression\nin group""",class_field,,,,"Class field: DotPlot.DEFAULT_COLOR_LEGEND_TITLE = ""Mean expression\nin group""",scverse,scanpy,1.10.1,,,,,,,,,DotPlot,,,"DEFAULT_COLOR_LEGEND_TITLE = ""Mean expression\nin group""",,,,,DEFAULT_COLOR_LEGEND_TITLE,"""Mean expression\nin group"""
scverse_scanpy_1.10.1,_dotplot.py,python,DotPlot.DEFAULT_LEGENDS_WIDTH = 1.5,class_field,,,,Class field: DotPlot.DEFAULT_LEGENDS_WIDTH = 1.5,scverse,scanpy,1.10.1,,,,,,,,,DotPlot,,,DEFAULT_LEGENDS_WIDTH = 1.5,,,,,DEFAULT_LEGENDS_WIDTH,1.5
scverse_scanpy_1.10.1,_dotplot.py,python,DotPlot.DEFAULT_PLOT_X_PADDING = 0.8,class_field,,,,Class field: DotPlot.DEFAULT_PLOT_X_PADDING = 0.8,scverse,scanpy,1.10.1,,,,,,,,,DotPlot,,,DEFAULT_PLOT_X_PADDING = 0.8,,,,,DEFAULT_PLOT_X_PADDING,0.8
scverse_scanpy_1.10.1,_dotplot.py,python,DotPlot.DEFAULT_PLOT_Y_PADDING = 1.0,class_field,,,,Class field: DotPlot.DEFAULT_PLOT_Y_PADDING = 1.0,scverse,scanpy,1.10.1,,,,,,,,,DotPlot,,,DEFAULT_PLOT_Y_PADDING = 1.0,,,,,DEFAULT_PLOT_Y_PADDING,1.0
scverse_scanpy_1.10.1,_dotplot.py,python,"[old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""expression_cutoff"",
        ""mean_only_expressed"",
        ""standard_scale"",
        ""dot_color_df"",
        ""dot_size_df"",
        ""ax"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )] DotPlot.__init__(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        expression_cutoff: float = 0.0,
        mean_only_expressed: bool = False,
        standard_scale: Literal[""var"", ""group""] | None = None,
        dot_color_df: pd.DataFrame | None = None,
        dot_size_df: pd.DataFrame | None = None,
        ax: _AxesSubplot | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",class_method,,,,"Class method: [old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""expression_cutoff"",
        ""mean_only_expressed"",
        ""standard_scale"",
        ""dot_color_df"",
        ""dot_size_df"",
        ""ax"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )] DotPlot.__init__(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        expression_cutoff: float = 0.0,
        mean_only_expressed: bool = False,
        standard_scale: Literal[""var"", ""group""] | None = None,
        dot_color_df: pd.DataFrame | None = None,
        dot_size_df: pd.DataFrame | None = None,
        ax: _AxesSubplot | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",scverse,scanpy,1.10.1,,,,,,,,,DotPlot,__init__,"(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        expression_cutoff: float = 0.0,
        mean_only_expressed: bool = False,
        standard_scale: Literal[""var"", ""group""] | None = None,
        dot_color_df: pd.DataFrame | None = None,
        dot_size_df: pd.DataFrame | None = None,
        ax: _AxesSubplot | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",,,,"old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""expression_cutoff"",
        ""mean_only_expressed"",
        ""standard_scale"",
        ""dot_color_df"",
        ""dot_size_df"",
        ""ax"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )",,,
scverse_scanpy_1.10.1,_dotplot.py,python,"[old_positionals(
        ""cmap"",
        ""color_on"",
        ""dot_max"",
        ""dot_min"",
        ""smallest_dot"",
        ""largest_dot"",
        ""dot_edge_color"",
        ""dot_edge_lw"",
        ""size_exponent"",
        ""grid"",
        ""x_padding"",
        ""y_padding"",
    )] DotPlot.style(
        self,
        *,
        cmap: str = DEFAULT_COLORMAP,
        color_on: Literal[""dot"", ""square""] | None = DEFAULT_COLOR_ON,
        dot_max: float | None = DEFAULT_DOT_MAX,
        dot_min: float | None = DEFAULT_DOT_MIN,
        smallest_dot: float | None = DEFAULT_SMALLEST_DOT,
        largest_dot: float | None = DEFAULT_LARGEST_DOT,
        dot_edge_color: ColorLike | None = DEFAULT_DOT_EDGECOLOR,
        dot_edge_lw: float | None = DEFAULT_DOT_EDGELW,
        size_exponent: float | None = DEFAULT_SIZE_EXPONENT,
        grid: float | None = False,
        x_padding: float | None = DEFAULT_PLOT_X_PADDING,
        y_padding: float | None = DEFAULT_PLOT_Y_PADDING,
    )",class_method,,,,"Class method: [old_positionals(
        ""cmap"",
        ""color_on"",
        ""dot_max"",
        ""dot_min"",
        ""smallest_dot"",
        ""largest_dot"",
        ""dot_edge_color"",
        ""dot_edge_lw"",
        ""size_exponent"",
        ""grid"",
        ""x_padding"",
        ""y_padding"",
    )] DotPlot.style(
        self,
        *,
        cmap: str = DEFAULT_COLORMAP,
        color_on: Literal[""dot"", ""square""] | None = DEFAULT_COLOR_ON,
        dot_max: float | None = DEFAULT_DOT_MAX,
        dot_min: float | None = DEFAULT_DOT_MIN,
        smallest_dot: float | None = DEFAULT_SMALLEST_DOT,
        largest_dot: float | None = DEFAULT_LARGEST_DOT,
        dot_edge_color: ColorLike | None = DEFAULT_DOT_EDGECOLOR,
        dot_edge_lw: float | None = DEFAULT_DOT_EDGELW,
        size_exponent: float | None = DEFAULT_SIZE_EXPONENT,
        grid: float | None = False,
        x_padding: float | None = DEFAULT_PLOT_X_PADDING,
        y_padding: float | None = DEFAULT_PLOT_Y_PADDING,
    )",scverse,scanpy,1.10.1,,,,,,,,,DotPlot,style,"(
        self,
        *,
        cmap: str = DEFAULT_COLORMAP,
        color_on: Literal[""dot"", ""square""] | None = DEFAULT_COLOR_ON,
        dot_max: float | None = DEFAULT_DOT_MAX,
        dot_min: float | None = DEFAULT_DOT_MIN,
        smallest_dot: float | None = DEFAULT_SMALLEST_DOT,
        largest_dot: float | None = DEFAULT_LARGEST_DOT,
        dot_edge_color: ColorLike | None = DEFAULT_DOT_EDGECOLOR,
        dot_edge_lw: float | None = DEFAULT_DOT_EDGELW,
        size_exponent: float | None = DEFAULT_SIZE_EXPONENT,
        grid: float | None = False,
        x_padding: float | None = DEFAULT_PLOT_X_PADDING,
        y_padding: float | None = DEFAULT_PLOT_Y_PADDING,
    )",,,,"old_positionals(
        ""cmap"",
        ""color_on"",
        ""dot_max"",
        ""dot_min"",
        ""smallest_dot"",
        ""largest_dot"",
        ""dot_edge_color"",
        ""dot_edge_lw"",
        ""size_exponent"",
        ""grid"",
        ""x_padding"",
        ""y_padding"",
    )",,,
scverse_scanpy_1.10.1,_dotplot.py,python,"[old_positionals(
        ""show"",
        ""show_size_legend"",
        ""show_colorbar"",
        ""size_title"",
        ""colorbar_title"",
        ""width"",
    )] DotPlot.legend(
        self,
        *,
        show: bool | None = True,
        show_size_legend: bool | None = True,
        show_colorbar: bool | None = True,
        size_title: str | None = DEFAULT_SIZE_LEGEND_TITLE,
        colorbar_title: str | None = DEFAULT_COLOR_LEGEND_TITLE,
        width: float | None = DEFAULT_LEGENDS_WIDTH,
    )",class_method,,,,"Class method: [old_positionals(
        ""show"",
        ""show_size_legend"",
        ""show_colorbar"",
        ""size_title"",
        ""colorbar_title"",
        ""width"",
    )] DotPlot.legend(
        self,
        *,
        show: bool | None = True,
        show_size_legend: bool | None = True,
        show_colorbar: bool | None = True,
        size_title: str | None = DEFAULT_SIZE_LEGEND_TITLE,
        colorbar_title: str | None = DEFAULT_COLOR_LEGEND_TITLE,
        width: float | None = DEFAULT_LEGENDS_WIDTH,
    )",scverse,scanpy,1.10.1,,,,,,,,,DotPlot,legend,"(
        self,
        *,
        show: bool | None = True,
        show_size_legend: bool | None = True,
        show_colorbar: bool | None = True,
        size_title: str | None = DEFAULT_SIZE_LEGEND_TITLE,
        colorbar_title: str | None = DEFAULT_COLOR_LEGEND_TITLE,
        width: float | None = DEFAULT_LEGENDS_WIDTH,
    )",,,,"old_positionals(
        ""show"",
        ""show_size_legend"",
        ""show_colorbar"",
        ""size_title"",
        ""colorbar_title"",
        ""width"",
    )",,,
scverse_scanpy_1.10.1,_dotplot.py,python,"DotPlot._plot_size_legend(self, size_legend_ax: Axes)",class_method,,,,"Class method: DotPlot._plot_size_legend(self, size_legend_ax: Axes)",scverse,scanpy,1.10.1,,,,,,,,,DotPlot,_plot_size_legend,"(self, size_legend_ax: Axes)",,,,,,,
scverse_scanpy_1.10.1,_dotplot.py,python,"DotPlot._plot_legend(self, legend_ax, return_ax_dict, normalize)",class_method,,,,"Class method: DotPlot._plot_legend(self, legend_ax, return_ax_dict, normalize)",scverse,scanpy,1.10.1,,,,,,,,,DotPlot,_plot_legend,"(self, legend_ax, return_ax_dict, normalize)",,,,,,,
scverse_scanpy_1.10.1,_dotplot.py,python,"DotPlot._mainplot(self, ax)",class_method,,,,"Class method: DotPlot._mainplot(self, ax)",scverse,scanpy,1.10.1,,,,,,,,,DotPlot,_mainplot,"(self, ax)",,,,,,,
scverse_scanpy_1.10.1,_dotplot.py,python,"[staticmethod] DotPlot._dotplot(
        dot_size,
        dot_color,
        dot_ax,
        *,
        cmap: str = ""Reds"",
        color_on: str | None = ""dot"",
        y_label: str | None = None,
        dot_max: float | None = None,
        dot_min: float | None = None,
        standard_scale: Literal[""var"", ""group""] | None = None,
        smallest_dot: float | None = 0.0,
        largest_dot: float | None = 200,
        size_exponent: float | None = 2,
        edge_color: ColorLike | None = None,
        edge_lw: float | None = None,
        grid: bool | None = False,
        x_padding: float | None = 0.8,
        y_padding: float | None = 1.0,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",class_method,,,,"Class method: [staticmethod] DotPlot._dotplot(
        dot_size,
        dot_color,
        dot_ax,
        *,
        cmap: str = ""Reds"",
        color_on: str | None = ""dot"",
        y_label: str | None = None,
        dot_max: float | None = None,
        dot_min: float | None = None,
        standard_scale: Literal[""var"", ""group""] | None = None,
        smallest_dot: float | None = 0.0,
        largest_dot: float | None = 200,
        size_exponent: float | None = 2,
        edge_color: ColorLike | None = None,
        edge_lw: float | None = None,
        grid: bool | None = False,
        x_padding: float | None = 0.8,
        y_padding: float | None = 1.0,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",scverse,scanpy,1.10.1,,,,,,,,,DotPlot,_dotplot,"(
        dot_size,
        dot_color,
        dot_ax,
        *,
        cmap: str = ""Reds"",
        color_on: str | None = ""dot"",
        y_label: str | None = None,
        dot_max: float | None = None,
        dot_min: float | None = None,
        standard_scale: Literal[""var"", ""group""] | None = None,
        smallest_dot: float | None = 0.0,
        largest_dot: float | None = 200,
        size_exponent: float | None = 2,
        edge_color: ColorLike | None = None,
        edge_lw: float | None = None,
        grid: bool | None = False,
        x_padding: float | None = 0.8,
        y_padding: float | None = 1.0,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",,,,staticmethod,,,
scverse_scanpy_1.10.1,_dotplot.py,python,DotPlot(BasePlot),class,,,,Class: DotPlot(BasePlot),scverse,scanpy,1.10.1,,,,,,,,,DotPlot,,,,,,,(BasePlot),,
scverse_scanpy_1.10.1,_dotplot.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dotplot.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dotplot.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dotplot.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,pyplot,matplotlib,,,,,,,,,,,,,,,
,_dotplot.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_dotplot.py,python,,,,,,Directory: scanpy\plotting\_dotplot.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_matrixplot.py,python,"MatrixPlot.DEFAULT_SAVE_PREFIX = ""matrixplot_""",class_field,,,,"Class field: MatrixPlot.DEFAULT_SAVE_PREFIX = ""matrixplot_""",scverse,scanpy,1.10.1,,,,,,,,,MatrixPlot,,,"DEFAULT_SAVE_PREFIX = ""matrixplot_""",,,,,DEFAULT_SAVE_PREFIX,"""matrixplot_"""
scverse_scanpy_1.10.1,_matrixplot.py,python,"MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE = ""Mean expression\nin group""",class_field,,,,"Class field: MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE = ""Mean expression\nin group""",scverse,scanpy,1.10.1,,,,,,,,,MatrixPlot,,,"DEFAULT_COLOR_LEGEND_TITLE = ""Mean expression\nin group""",,,,,DEFAULT_COLOR_LEGEND_TITLE,"""Mean expression\nin group"""
scverse_scanpy_1.10.1,_matrixplot.py,python,"MatrixPlot.DEFAULT_COLORMAP = rcParams[""image.cmap""]",class_field,,,,"Class field: MatrixPlot.DEFAULT_COLORMAP = rcParams[""image.cmap""]",scverse,scanpy,1.10.1,,,,,,,,,MatrixPlot,,,"DEFAULT_COLORMAP = rcParams[""image.cmap""]",,,,,DEFAULT_COLORMAP,"rcParams[""image.cmap""]"
scverse_scanpy_1.10.1,_matrixplot.py,python,"MatrixPlot.DEFAULT_EDGE_COLOR = ""gray""",class_field,,,,"Class field: MatrixPlot.DEFAULT_EDGE_COLOR = ""gray""",scverse,scanpy,1.10.1,,,,,,,,,MatrixPlot,,,"DEFAULT_EDGE_COLOR = ""gray""",,,,,DEFAULT_EDGE_COLOR,"""gray"""
scverse_scanpy_1.10.1,_matrixplot.py,python,MatrixPlot.DEFAULT_EDGE_LW = 0.1,class_field,,,,Class field: MatrixPlot.DEFAULT_EDGE_LW = 0.1,scverse,scanpy,1.10.1,,,,,,,,,MatrixPlot,,,DEFAULT_EDGE_LW = 0.1,,,,,DEFAULT_EDGE_LW,0.1
scverse_scanpy_1.10.1,_matrixplot.py,python,"[old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""standard_scale"",
        ""ax"",
        ""values_df"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )] MatrixPlot.__init__(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        standard_scale: Literal[""var"", ""group""] = None,
        ax: _AxesSubplot | None = None,
        values_df: pd.DataFrame | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",class_method,,,,"Class method: [old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""standard_scale"",
        ""ax"",
        ""values_df"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )] MatrixPlot.__init__(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        standard_scale: Literal[""var"", ""group""] = None,
        ax: _AxesSubplot | None = None,
        values_df: pd.DataFrame | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",scverse,scanpy,1.10.1,,,,,,,,,MatrixPlot,__init__,"(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        standard_scale: Literal[""var"", ""group""] = None,
        ax: _AxesSubplot | None = None,
        values_df: pd.DataFrame | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",,,,"old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""standard_scale"",
        ""ax"",
        ""values_df"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )",,,
scverse_scanpy_1.10.1,_matrixplot.py,python,"MatrixPlot.style(
        self,
        cmap: str = DEFAULT_COLORMAP,
        edge_color: ColorLike | None = DEFAULT_EDGE_COLOR,
        edge_lw: float | None = DEFAULT_EDGE_LW,
    )",class_method,,,,"Class method: MatrixPlot.style(
        self,
        cmap: str = DEFAULT_COLORMAP,
        edge_color: ColorLike | None = DEFAULT_EDGE_COLOR,
        edge_lw: float | None = DEFAULT_EDGE_LW,
    )",scverse,scanpy,1.10.1,,,,,,,,,MatrixPlot,style,"(
        self,
        cmap: str = DEFAULT_COLORMAP,
        edge_color: ColorLike | None = DEFAULT_EDGE_COLOR,
        edge_lw: float | None = DEFAULT_EDGE_LW,
    )",,,,,,,
scverse_scanpy_1.10.1,_matrixplot.py,python,"MatrixPlot._mainplot(self, ax)",class_method,,,,"Class method: MatrixPlot._mainplot(self, ax)",scverse,scanpy,1.10.1,,,,,,,,,MatrixPlot,_mainplot,"(self, ax)",,,,,,,
scverse_scanpy_1.10.1,_matrixplot.py,python,MatrixPlot(BasePlot),class,,,,Class: MatrixPlot(BasePlot),scverse,scanpy,1.10.1,,,,,,,,,MatrixPlot,,,,,,,(BasePlot),,
scverse_scanpy_1.10.1,_matrixplot.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_matrixplot.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_matrixplot.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_matrixplot.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,pyplot,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_matrixplot.py,python,rcParams from matplotlib,import,,,,Import: rcParams from matplotlib,scverse,scanpy,1.10.1,from matplotlib import rcParams,rcParams,matplotlib,,,,,,,,,,,,,,,
,_matrixplot.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_matrixplot.py,python,,,,,,Directory: scanpy\plotting\_matrixplot.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_preprocessing.py,python,"filter_genes_dispersion(
    result: np.recarray,
    log: bool = False,
    show: bool | None = None,
    save: bool | str | None = None,
) -> None",function,filter_genes_dispersion,"(
    result: np.recarray,
    log: bool = False,
    show: bool | None = None,
    save: bool | str | None = None,
)",None,"Function: filter_genes_dispersion(
    result: np.recarray,
    log: bool = False,
    show: bool | None = None,
    save: bool | str | None = None,
) -> None",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_preprocessing.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_preprocessing.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_preprocessing.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_preprocessing.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,pyplot,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_preprocessing.py,python,rcParams from matplotlib,import,,,,Import: rcParams from matplotlib,scverse,scanpy,1.10.1,from matplotlib import rcParams,rcParams,matplotlib,,,,,,,,,,,,,,,
,_preprocessing.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_preprocessing.py,python,,,,,,Directory: scanpy\plotting\_preprocessing.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,pyplot,matplotlib,,,,,,,,,,,,,,,
,_qc.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_qc.py,python,,,,,,Directory: scanpy\plotting\_qc.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rcmod.py,python,"set_rcParams_scanpy(fontsize=14, color_map=None)",function,set_rcParams_scanpy,"(fontsize=14, color_map=None)",,"Function: set_rcParams_scanpy(fontsize=14, color_map=None)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rcmod.py,python,set_rcParams_defaults(),function,set_rcParams_defaults,(),,Function: set_rcParams_defaults(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rcmod.py,python,matplotlib,import,,,,Import: matplotlib,scverse,scanpy,1.10.1,import matplotlib as mpl,matplotlib,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rcmod.py,python,cycler from cycler,import,,,,Import: cycler from cycler,scverse,scanpy,1.10.1,from cycler import cycler,cycler,cycler,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rcmod.py,python,rcParams from matplotlib,import,,,,Import: rcParams from matplotlib,scverse,scanpy,1.10.1,from matplotlib import rcParams,rcParams,matplotlib,,,,,,,,,,,,,,,
,_rcmod.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_rcmod.py,python,,,,,,Directory: scanpy\plotting\_rcmod.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scrublet.py,python,"_plot_scores(
    ax: Axes,
    scores: np.ndarray,
    scale: Scale,
    title: str,
    threshold: float | None = None,
) -> None",function,_plot_scores,"(
    ax: Axes,
    scores: np.ndarray,
    scale: Scale,
    title: str,
    threshold: float | None = None,
)",None,"Function: _plot_scores(
    ax: Axes,
    scores: np.ndarray,
    scale: Scale,
    title: str,
    threshold: float | None = None,
) -> None",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scrublet.py,python,"Scale = _U[Literal[""linear"", ""log"", ""symlog"", ""logit""], str]",constant,,,,"Constant: Scale = _U[Literal[""linear"", ""log"", ""symlog"", ""logit""], str]",scverse,scanpy,1.10.1,,,,,"Scale = _U[Literal[""linear"", ""log"", ""symlog"", ""logit""], str]",Scale,"_U[Literal[""linear"", ""log"", ""symlog"", ""logit""], str]",,,,,,,,,,,
scverse_scanpy_1.10.1,_scrublet.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scrublet.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scrublet.py,python,Union from typing,import,,,,Import: Union from typing,scverse,scanpy,1.10.1,from typing import Union as _U,Union,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scrublet.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scrublet.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scrublet.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,pyplot,matplotlib,,,,,,,,,,,,,,,
,_scrublet.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_scrublet.py,python,,,,,,Directory: scanpy\plotting\_scrublet.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,"StackedViolin.DEFAULT_SAVE_PREFIX = ""stacked_violin_""",class_field,,,,"Class field: StackedViolin.DEFAULT_SAVE_PREFIX = ""stacked_violin_""",scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,,,"DEFAULT_SAVE_PREFIX = ""stacked_violin_""",,,,,DEFAULT_SAVE_PREFIX,"""stacked_violin_"""
scverse_scanpy_1.10.1,_stacked_violin.py,python,"StackedViolin.DEFAULT_COLOR_LEGEND_TITLE = ""Median expression\nin group""",class_field,,,,"Class field: StackedViolin.DEFAULT_COLOR_LEGEND_TITLE = ""Median expression\nin group""",scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,,,"DEFAULT_COLOR_LEGEND_TITLE = ""Median expression\nin group""",,,,,DEFAULT_COLOR_LEGEND_TITLE,"""Median expression\nin group"""
scverse_scanpy_1.10.1,_stacked_violin.py,python,"StackedViolin.DEFAULT_COLORMAP = ""Blues""",class_field,,,,"Class field: StackedViolin.DEFAULT_COLORMAP = ""Blues""",scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,,,"DEFAULT_COLORMAP = ""Blues""",,,,,DEFAULT_COLORMAP,"""Blues"""
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_STRIPPLOT = False,class_field,,,,Class field: StackedViolin.DEFAULT_STRIPPLOT = False,scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,,,DEFAULT_STRIPPLOT = False,,,,,DEFAULT_STRIPPLOT,False
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_JITTER = False,class_field,,,,Class field: StackedViolin.DEFAULT_JITTER = False,scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,,,DEFAULT_JITTER = False,,,,,DEFAULT_JITTER,False
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_JITTER_SIZE = 1,class_field,,,,Class field: StackedViolin.DEFAULT_JITTER_SIZE = 1,scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,,,DEFAULT_JITTER_SIZE = 1,,,,,DEFAULT_JITTER_SIZE,1
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_LINE_WIDTH = 0.2,class_field,,,,Class field: StackedViolin.DEFAULT_LINE_WIDTH = 0.2,scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,,,DEFAULT_LINE_WIDTH = 0.2,,,,,DEFAULT_LINE_WIDTH,0.2
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_ROW_PALETTE = None,class_field,,,,Class field: StackedViolin.DEFAULT_ROW_PALETTE = None,scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,,,DEFAULT_ROW_PALETTE = None,,,,,DEFAULT_ROW_PALETTE,None
scverse_scanpy_1.10.1,_stacked_violin.py,python,"StackedViolin.DEFAULT_DENSITY_NORM: Literal[""area"", ""count"", ""width""] = ""width""",class_field,,,,"Class field: StackedViolin.DEFAULT_DENSITY_NORM: Literal[""area"", ""count"", ""width""] = ""width""",scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,,,"DEFAULT_DENSITY_NORM: Literal[""area"", ""count"", ""width""] = ""width""",,,,,DEFAULT_DENSITY_NORM,"""width"""
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_PLOT_YTICKLABELS = False,class_field,,,,Class field: StackedViolin.DEFAULT_PLOT_YTICKLABELS = False,scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,,,DEFAULT_PLOT_YTICKLABELS = False,,,,,DEFAULT_PLOT_YTICKLABELS,False
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_YLIM = None,class_field,,,,Class field: StackedViolin.DEFAULT_YLIM = None,scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,,,DEFAULT_YLIM = None,,,,,DEFAULT_YLIM,None
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_PLOT_X_PADDING = 0.5,class_field,,,,Class field: StackedViolin.DEFAULT_PLOT_X_PADDING = 0.5,scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,,,DEFAULT_PLOT_X_PADDING = 0.5,,,,,DEFAULT_PLOT_X_PADDING,0.5
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_PLOT_Y_PADDING = 0.5,class_field,,,,Class field: StackedViolin.DEFAULT_PLOT_Y_PADDING = 0.5,scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,,,DEFAULT_PLOT_Y_PADDING = 0.5,,,,,DEFAULT_PLOT_Y_PADDING,0.5
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_CUT = 0,class_field,,,,Class field: StackedViolin.DEFAULT_CUT = 0,scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,,,DEFAULT_CUT = 0,,,,,DEFAULT_CUT,0
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_INNER = None,class_field,,,,Class field: StackedViolin.DEFAULT_INNER = None,scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,,,DEFAULT_INNER = None,,,,,DEFAULT_INNER,None
scverse_scanpy_1.10.1,_stacked_violin.py,python,"StackedViolin.__getattribute__(self, name: str) -> object",class_method,,,,"Class method: StackedViolin.__getattribute__(self, name: str) -> object",scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,__getattribute__,"(self, name: str)",,,object,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,"[old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""standard_scale"",
        ""ax"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )] StackedViolin.__init__(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        standard_scale: Literal[""var"", ""group""] | None = None,
        ax: _AxesSubplot | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",class_method,,,,"Class method: [old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""standard_scale"",
        ""ax"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )] StackedViolin.__init__(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        standard_scale: Literal[""var"", ""group""] | None = None,
        ax: _AxesSubplot | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,__init__,"(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        standard_scale: Literal[""var"", ""group""] | None = None,
        ax: _AxesSubplot | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",,,,"old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""standard_scale"",
        ""ax"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )",,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,"[old_positionals(
        ""cmap"",
        ""stripplot"",
        ""jitter"",
        ""jitter_size"",
        ""linewidth"",
        ""row_palette"",
        ""density_norm"",
        ""yticklabels"",
        ""ylim"",
        ""x_padding"",
        ""y_padding"",
    )] StackedViolin.style(
        self,
        *,
        cmap: str | None = DEFAULT_COLORMAP,
        stripplot: bool | None = DEFAULT_STRIPPLOT,
        jitter: float | bool | None = DEFAULT_JITTER,
        jitter_size: int | None = DEFAULT_JITTER_SIZE,
        linewidth: float | None = DEFAULT_LINE_WIDTH,
        row_palette: str | None = DEFAULT_ROW_PALETTE,
        density_norm: Literal[""area"", ""count"", ""width""] = DEFAULT_DENSITY_NORM,
        yticklabels: bool | None = DEFAULT_PLOT_YTICKLABELS,
        ylim: tuple[float, float] | None = DEFAULT_YLIM,
        x_padding: float | None = DEFAULT_PLOT_X_PADDING,
        y_padding: float | None = DEFAULT_PLOT_Y_PADDING,
        # deprecated
        scale: Literal[""area"", ""count"", ""width""] | None = None,
    )",class_method,,,,"Class method: [old_positionals(
        ""cmap"",
        ""stripplot"",
        ""jitter"",
        ""jitter_size"",
        ""linewidth"",
        ""row_palette"",
        ""density_norm"",
        ""yticklabels"",
        ""ylim"",
        ""x_padding"",
        ""y_padding"",
    )] StackedViolin.style(
        self,
        *,
        cmap: str | None = DEFAULT_COLORMAP,
        stripplot: bool | None = DEFAULT_STRIPPLOT,
        jitter: float | bool | None = DEFAULT_JITTER,
        jitter_size: int | None = DEFAULT_JITTER_SIZE,
        linewidth: float | None = DEFAULT_LINE_WIDTH,
        row_palette: str | None = DEFAULT_ROW_PALETTE,
        density_norm: Literal[""area"", ""count"", ""width""] = DEFAULT_DENSITY_NORM,
        yticklabels: bool | None = DEFAULT_PLOT_YTICKLABELS,
        ylim: tuple[float, float] | None = DEFAULT_YLIM,
        x_padding: float | None = DEFAULT_PLOT_X_PADDING,
        y_padding: float | None = DEFAULT_PLOT_Y_PADDING,
        # deprecated
        scale: Literal[""area"", ""count"", ""width""] | None = None,
    )",scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,style,"(
        self,
        *,
        cmap: str | None = DEFAULT_COLORMAP,
        stripplot: bool | None = DEFAULT_STRIPPLOT,
        jitter: float | bool | None = DEFAULT_JITTER,
        jitter_size: int | None = DEFAULT_JITTER_SIZE,
        linewidth: float | None = DEFAULT_LINE_WIDTH,
        row_palette: str | None = DEFAULT_ROW_PALETTE,
        density_norm: Literal[""area"", ""count"", ""width""] = DEFAULT_DENSITY_NORM,
        yticklabels: bool | None = DEFAULT_PLOT_YTICKLABELS,
        ylim: tuple[float, float] | None = DEFAULT_YLIM,
        x_padding: float | None = DEFAULT_PLOT_X_PADDING,
        y_padding: float | None = DEFAULT_PLOT_Y_PADDING,
        # deprecated
        scale: Literal[""area"", ""count"", ""width""] | None = None,
    )",,,,"old_positionals(
        ""cmap"",
        ""stripplot"",
        ""jitter"",
        ""jitter_size"",
        ""linewidth"",
        ""row_palette"",
        ""density_norm"",
        ""yticklabels"",
        ""ylim"",
        ""x_padding"",
        ""y_padding"",
    )",,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,"StackedViolin._mainplot(self, ax)",class_method,,,,"Class method: StackedViolin._mainplot(self, ax)",scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,_mainplot,"(self, ax)",,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,"StackedViolin._make_rows_of_violinplots(
        self, ax, _matrix, colormap_array, _color_df, x_spacer_size, y_spacer_size
    )",class_method,,,,"Class method: StackedViolin._make_rows_of_violinplots(
        self, ax, _matrix, colormap_array, _color_df, x_spacer_size, y_spacer_size
    )",scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,_make_rows_of_violinplots,"(
        self, ax, _matrix, colormap_array, _color_df, x_spacer_size, y_spacer_size
    )",,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,"StackedViolin._setup_violin_axes_ticks(self, row_ax, num_cols)",class_method,,,,"Class method: StackedViolin._setup_violin_axes_ticks(self, row_ax, num_cols)",scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,_setup_violin_axes_ticks,"(self, row_ax, num_cols)",,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin(BasePlot),class,,,,Class: StackedViolin(BasePlot),scverse,scanpy,1.10.1,,,,,,,,,StackedViolin,,,,,,,(BasePlot),,
scverse_scanpy_1.10.1,_stacked_violin.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,pyplot,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,Normalize from matplotlib.colors,local_import,,,,Import: Normalize from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Normalize, is_color_like",Normalize,matplotlib.colors,matplotlib.colors,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,is_color_like from matplotlib.colors,local_import,,,,Import: is_color_like from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Normalize, is_color_like",is_color_like,matplotlib.colors,matplotlib.colors,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,Version from packaging.version,local_import,,,,Import: Version from packaging.version,scverse,scanpy,1.10.1,from packaging.version import Version,Version,packaging.version,packaging.version,,,,,,,,,,,,,,
,_stacked_violin.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_stacked_violin.py,python,,,,,,Directory: scanpy\plotting\_stacked_violin.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_AxesSubplot(Axes, axes.SubplotBase)",class,,,,"Class: _AxesSubplot(Axes, axes.SubplotBase)",scverse,scanpy,1.10.1,,,,,,,,,_AxesSubplot,,,,,,,"(Axes, axes.SubplotBase)",,
scverse_scanpy_1.10.1,_utils.py,python,"timeseries(X, **kwargs)",function,timeseries,"(X, **kwargs)",,"Function: timeseries(X, **kwargs)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"timeseries_subplot(
    X: np.ndarray,
    *,
    time=None,
    color=None,
    var_names=(),
    highlights_x=(),
    xlabel="""",
    ylabel=""gene expression"",
    yticks=None,
    xlim=None,
    legend=True,
    palette: Sequence[str] | Cycler | None = None,
    color_map=""viridis"",
    ax: Axes | None = None,
    marker: str | Sequence[str] = ""."",
)",function,timeseries_subplot,"(
    X: np.ndarray,
    *,
    time=None,
    color=None,
    var_names=(),
    highlights_x=(),
    xlabel="""",
    ylabel=""gene expression"",
    yticks=None,
    xlim=None,
    legend=True,
    palette: Sequence[str] | Cycler | None = None,
    color_map=""viridis"",
    ax: Axes | None = None,
    marker: str | Sequence[str] = ""."",
)",,"Function: timeseries_subplot(
    X: np.ndarray,
    *,
    time=None,
    color=None,
    var_names=(),
    highlights_x=(),
    xlabel="""",
    ylabel=""gene expression"",
    yticks=None,
    xlim=None,
    legend=True,
    palette: Sequence[str] | Cycler | None = None,
    color_map=""viridis"",
    ax: Axes | None = None,
    marker: str | Sequence[str] = ""."",
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"timeseries_as_heatmap(
    X: np.ndarray, *, var_names: Collection[str] = (), highlights_x=(), color_map=None
)",function,timeseries_as_heatmap,"(
    X: np.ndarray, *, var_names: Collection[str] = (), highlights_x=(), color_map=None
)",,"Function: timeseries_as_heatmap(
    X: np.ndarray, *, var_names: Collection[str] = (), highlights_x=(), color_map=None
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"savefig(writekey, dpi=None, ext=None)",function,savefig,"(writekey, dpi=None, ext=None)",,"Function: savefig(writekey, dpi=None, ext=None)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"savefig_or_show(
    writekey: str,
    show: bool | None = None,
    dpi: int | None = None,
    ext: str | None = None,
    save: bool | str | None = None,
)",function,savefig_or_show,"(
    writekey: str,
    show: bool | None = None,
    dpi: int | None = None,
    ext: str | None = None,
    save: bool | str | None = None,
)",,"Function: savefig_or_show(
    writekey: str,
    show: bool | None = None,
    dpi: int | None = None,
    ext: str | None = None,
    save: bool | str | None = None,
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"default_palette(
    palette: str | Sequence[str] | Cycler | None = None,
) -> str | Cycler",function,default_palette,"(
    palette: str | Sequence[str] | Cycler | None = None,
)",str | Cycler,"Function: default_palette(
    palette: str | Sequence[str] | Cycler | None = None,
) -> str | Cycler",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_validate_palette(adata: AnnData, key: str) -> None",function,_validate_palette,"(adata: AnnData, key: str)",None,"Function: _validate_palette(adata: AnnData, key: str) -> None",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_set_colors_for_categorical_obs(
    adata, value_to_plot, palette: str | Sequence[str] | Cycler
)",function,_set_colors_for_categorical_obs,"(
    adata, value_to_plot, palette: str | Sequence[str] | Cycler
)",,"Function: _set_colors_for_categorical_obs(
    adata, value_to_plot, palette: str | Sequence[str] | Cycler
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_set_default_colors_for_categorical_obs(adata, value_to_plot)",function,_set_default_colors_for_categorical_obs,"(adata, value_to_plot)",,"Function: _set_default_colors_for_categorical_obs(adata, value_to_plot)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"add_colors_for_categorical_sample_annotation(
    adata, key, palette=None, force_update_colors=False
)",function,add_colors_for_categorical_sample_annotation,"(
    adata, key, palette=None, force_update_colors=False
)",,"Function: add_colors_for_categorical_sample_annotation(
    adata, key, palette=None, force_update_colors=False
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"plot_edges(axs, adata, basis, edges_width, edges_color, *, neighbors_key=None)",function,plot_edges,"(axs, adata, basis, edges_width, edges_color, *, neighbors_key=None)",,"Function: plot_edges(axs, adata, basis, edges_width, edges_color, *, neighbors_key=None)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"plot_arrows(axs, adata, basis, arrows_kwds=None)",function,plot_arrows,"(axs, adata, basis, arrows_kwds=None)",,"Function: plot_arrows(axs, adata, basis, arrows_kwds=None)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"scatter_group(
    ax: Axes,
    key: str,
    cat_code: int,
    adata: AnnData,
    Y: np.ndarray,
    *,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    size: int = 3,
    alpha: float | None = None,
    marker: MarkerType = ""."",
)",function,scatter_group,"(
    ax: Axes,
    key: str,
    cat_code: int,
    adata: AnnData,
    Y: np.ndarray,
    *,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    size: int = 3,
    alpha: float | None = None,
    marker: MarkerType = ""."",
)",,"Function: scatter_group(
    ax: Axes,
    key: str,
    cat_code: int,
    adata: AnnData,
    Y: np.ndarray,
    *,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    size: int = 3,
    alpha: float | None = None,
    marker: MarkerType = ""."",
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"setup_axes(
    ax: Axes | Sequence[Axes] | None = None,
    *,
    panels=""blue"",
    colorbars=(False,),
    right_margin=None,
    left_margin=None,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    show_ticks=False,
)",function,setup_axes,"(
    ax: Axes | Sequence[Axes] | None = None,
    *,
    panels=""blue"",
    colorbars=(False,),
    right_margin=None,
    left_margin=None,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    show_ticks=False,
)",,"Function: setup_axes(
    ax: Axes | Sequence[Axes] | None = None,
    *,
    panels=""blue"",
    colorbars=(False,),
    right_margin=None,
    left_margin=None,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    show_ticks=False,
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"scatter_base(
    Y: np.ndarray,
    *,
    colors: str | Sequence[ColorLike | np.ndarray] = ""blue"",
    sort_order=True,
    alpha=None,
    highlights=(),
    right_margin=None,
    left_margin=None,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    title=None,
    component_name=""DC"",
    component_indexnames=(1, 2, 3),
    axis_labels=None,
    colorbars=(False,),
    sizes=(1,),
    markers=""."",
    color_map=""viridis"",
    show_ticks=True,
    ax=None,
) -> Axes | list[Axes]",function,scatter_base,"(
    Y: np.ndarray,
    *,
    colors: str | Sequence[ColorLike | np.ndarray] = ""blue"",
    sort_order=True,
    alpha=None,
    highlights=(),
    right_margin=None,
    left_margin=None,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    title=None,
    component_name=""DC"",
    component_indexnames=(1, 2, 3),
    axis_labels=None,
    colorbars=(False,),
    sizes=(1,),
    markers=""."",
    color_map=""viridis"",
    show_ticks=True,
    ax=None,
)",Axes | list[Axes],"Function: scatter_base(
    Y: np.ndarray,
    *,
    colors: str | Sequence[ColorLike | np.ndarray] = ""blue"",
    sort_order=True,
    alpha=None,
    highlights=(),
    right_margin=None,
    left_margin=None,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    title=None,
    component_name=""DC"",
    component_indexnames=(1, 2, 3),
    axis_labels=None,
    colorbars=(False,),
    sizes=(1,),
    markers=""."",
    color_map=""viridis"",
    show_ticks=True,
    ax=None,
) -> Axes | list[Axes]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"scatter_single(ax: Axes, Y: np.ndarray, *args, **kwargs)",function,scatter_single,"(ax: Axes, Y: np.ndarray, *args, **kwargs)",,"Function: scatter_single(ax: Axes, Y: np.ndarray, *args, **kwargs)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"arrows_transitions(ax: Axes, X: np.ndarray, indices: Sequence[int], weight=None)",function,arrows_transitions,"(ax: Axes, X: np.ndarray, indices: Sequence[int], weight=None)",,"Function: arrows_transitions(ax: Axes, X: np.ndarray, indices: Sequence[int], weight=None)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"ticks_formatter(x, pos)",function,ticks_formatter,"(x, pos)",,"Function: ticks_formatter(x, pos)",scverse,scanpy,1.10.1,,,,,,,,"# pretty scientific notation",,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,pimp_axis(x_or_y_ax),function,pimp_axis,(x_or_y_ax),,Function: pimp_axis(x_or_y_ax),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,scale_to_zero_one(x),function,scale_to_zero_one,(x),,Function: scale_to_zero_one(x),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"hierarchy_pos(G, root, levels=None, width=1.0, height=1.0)",function,hierarchy_pos,"(G, root, levels=None, width=1.0, height=1.0)",,"Function: hierarchy_pos(G, root, levels=None, width=1.0, height=1.0)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"hierarchy_sc(G, root, node_sets)",function,hierarchy_sc,"(G, root, node_sets)",,"Function: hierarchy_sc(G, root, node_sets)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"zoom(ax, xy=""x"", factor=1)",function,zoom,"(ax, xy=""x"", factor=1)",,"Function: zoom(ax, xy=""x"", factor=1)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"get_ax_size(ax: Axes, fig: Figure)",function,get_ax_size,"(ax: Axes, fig: Figure)",,"Function: get_ax_size(ax: Axes, fig: Figure)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"axis_to_data(ax: Axes, width: float)",function,axis_to_data,"(ax: Axes, width: float)",,"Function: axis_to_data(ax: Axes, width: float)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"axis_to_data_points(ax: Axes, points_axis: np.ndarray)",function,axis_to_data_points,"(ax: Axes, points_axis: np.ndarray)",,"Function: axis_to_data_points(ax: Axes, points_axis: np.ndarray)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"data_to_axis_points(ax: Axes, points_data: np.ndarray)",function,data_to_axis_points,"(ax: Axes, points_data: np.ndarray)",,"Function: data_to_axis_points(ax: Axes, points_data: np.ndarray)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,check_projection(projection),function,check_projection,(projection),,Function: check_projection(projection),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"circles(
    x, y, *, s, ax, marker=None, c=""b"", vmin=None, vmax=None, scale_factor=1.0, **kwargs
)",function,circles,"(
    x, y, *, s, ax, marker=None, c=""b"", vmin=None, vmax=None, scale_factor=1.0, **kwargs
)",,"Function: circles(
    x, y, *, s, ax, marker=None, c=""b"", vmin=None, vmax=None, scale_factor=1.0, **kwargs
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"make_grid_spec(
    ax_or_figsize: tuple[int, int] | _AxesSubplot,
    *,
    nrows: int,
    ncols: int,
    wspace: float | None = None,
    hspace: float | None = None,
    width_ratios: Sequence[float] | None = None,
    height_ratios: Sequence[float] | None = None,
) -> tuple[Figure, gridspec.GridSpecBase]",function,make_grid_spec,"(
    ax_or_figsize: tuple[int, int] | _AxesSubplot,
    *,
    nrows: int,
    ncols: int,
    wspace: float | None = None,
    hspace: float | None = None,
    width_ratios: Sequence[float] | None = None,
    height_ratios: Sequence[float] | None = None,
)","tuple[Figure, gridspec.GridSpecBase]","Function: make_grid_spec(
    ax_or_figsize: tuple[int, int] | _AxesSubplot,
    *,
    nrows: int,
    ncols: int,
    wspace: float | None = None,
    hspace: float | None = None,
    width_ratios: Sequence[float] | None = None,
    height_ratios: Sequence[float] | None = None,
) -> tuple[Figure, gridspec.GridSpecBase]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"fix_kwds(kwds_dict, **kwargs)",function,fix_kwds,"(kwds_dict, **kwargs)",,"Function: fix_kwds(kwds_dict, **kwargs)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_get_basis(adata: AnnData, basis: str)",function,_get_basis,"(adata: AnnData, basis: str)",,"Function: _get_basis(adata: AnnData, basis: str)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"check_colornorm(vmin=None, vmax=None, vcenter=None, norm=None)",function,check_colornorm,"(vmin=None, vmax=None, vcenter=None, norm=None)",,"Function: check_colornorm(vmin=None, vmax=None, vcenter=None, norm=None)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_deprecated_scale(density_norm: DN, scale: DN | None, *, default: DN) -> DN",function,_deprecated_scale,"(density_norm: DN, scale: DN | None, *, default: DN)",DN,"Function: _deprecated_scale(density_norm: DN, scale: DN | None, *, default: DN) -> DN",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"ColorLike = _U[str, tuple[float, ...]]",constant,,,,"Constant: ColorLike = _U[str, tuple[float, ...]]",scverse,scanpy,1.10.1,,,,,"ColorLike = _U[str, tuple[float, ...]]",ColorLike,"_U[str, tuple[float, ...]]",,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_IGraphLayout = Literal[""fa"", ""fr"", ""rt"", ""rt_circular"", ""drl"", ""eq_tree"", ...]",constant,,,,"Constant: _IGraphLayout = Literal[""fa"", ""fr"", ""rt"", ""rt_circular"", ""drl"", ""eq_tree"", ...]",scverse,scanpy,1.10.1,,,,,"_IGraphLayout = Literal[""fa"", ""fr"", ""rt"", ""rt_circular"", ""drl"", ""eq_tree"", ...]",_IGraphLayout,"Literal[""fa"", ""fr"", ""rt"", ""rt_circular"", ""drl"", ""eq_tree"", ...]",,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_FontWeight = Literal[""light"", ""normal"", ""medium"", ""semibold"", ""bold"", ""heavy"", ""black""]",constant,,,,"Constant: _FontWeight = Literal[""light"", ""normal"", ""medium"", ""semibold"", ""bold"", ""heavy"", ""black""]",scverse,scanpy,1.10.1,,,,,"_FontWeight = Literal[""light"", ""normal"", ""medium"", ""semibold"", ""bold"", ""heavy"", ""black""]",_FontWeight,"Literal[""light"", ""normal"", ""medium"", ""semibold"", ""bold"", ""heavy"", ""black""]",,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_FontSize = Literal[
    ""xx-small"", ""x-small"", ""small"", ""medium"", ""large"", ""x-large"", ""xx-large""
]",constant,,,,"Constant: _FontSize = Literal[
    ""xx-small"", ""x-small"", ""small"", ""medium"", ""large"", ""x-large"", ""xx-large""
]",scverse,scanpy,1.10.1,,,,,"_FontSize = Literal[
    ""xx-small"", ""x-small"", ""small"", ""medium"", ""large"", ""x-large"", ""xx-large""
]",_FontSize,"Literal[
    ""xx-small"", ""x-small"", ""small"", ""medium"", ""large"", ""x-large"", ""xx-large""
]",,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"VBound = _U[str, float, Callable[[Sequence[float]], float]]",constant,,,,"Constant: VBound = _U[str, float, Callable[[Sequence[float]], float]]",scverse,scanpy,1.10.1,,,,,"VBound = _U[str, float, Callable[[Sequence[float]], float]]",VBound,"_U[str, float, Callable[[Sequence[float]], float]]",,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"additional_colors = {
    ""gold2"": ""#eec900"",
    ""firebrick3"": ""#cd2626"",
    ""khaki2"": ""#eee685"",
    ""slategray3"": ""#9fb6cd"",
    ""palegreen3"": ""#7ccd7c"",
    ""tomato2"": ""#ee5c42"",
    ""grey80"": ""#cccccc"",
    ""grey90"": ""#e5e5e5"",
    ""wheat4"": ""#8b7e66"",
    ""grey65"": ""#a6a6a6"",
    ""grey10"": ""#1a1a1a"",
    ""grey20"": ""#333333"",
    ""grey50"": ""#7f7f7f"",
    ""grey30"": ""#4d4d4d"",
    ""grey40"": ""#666666"",
    ""antiquewhite2"": ""#eedfcc"",
    ""grey77"": ""#c4c4c4"",
    ""snow4"": ""#8b8989"",
    ""chartreuse3"": ""#66cd00"",
    ""yellow4"": ""#8b8b00"",
    ""darkolivegreen2"": ""#bcee68"",
    ""olivedrab3"": ""#9acd32"",
    ""azure3"": ""#c1cdcd"",
    ""violetred"": ""#d02090"",
    ""mediumpurple3"": ""#8968cd"",
    ""purple4"": ""#551a8b"",
    ""seagreen4"": ""#2e8b57"",
    ""lightblue3"": ""#9ac0cd"",
    ""orchid3"": ""#b452cd"",
    ""indianred 3"": ""#cd5555"",
    ""grey60"": ""#999999"",
    ""mediumorchid1"": ""#e066ff"",
    ""plum3"": ""#cd96cd"",
    ""palevioletred3"": ""#cd6889"",
}",constant,,,,"Constant: additional_colors = {
    ""gold2"": ""#eec900"",
    ""firebrick3"": ""#cd2626"",
    ""khaki2"": ""#eee685"",
    ""slategray3"": ""#9fb6cd"",
    ""palegreen3"": ""#7ccd7c"",
    ""tomato2"": ""#ee5c42"",
    ""grey80"": ""#cccccc"",
    ""grey90"": ""#e5e5e5"",
    ""wheat4"": ""#8b7e66"",
    ""grey65"": ""#a6a6a6"",
    ""grey10"": ""#1a1a1a"",
    ""grey20"": ""#333333"",
    ""grey50"": ""#7f7f7f"",
    ""grey30"": ""#4d4d4d"",
    ""grey40"": ""#666666"",
    ""antiquewhite2"": ""#eedfcc"",
    ""grey77"": ""#c4c4c4"",
    ""snow4"": ""#8b8989"",
    ""chartreuse3"": ""#66cd00"",
    ""yellow4"": ""#8b8b00"",
    ""darkolivegreen2"": ""#bcee68"",
    ""olivedrab3"": ""#9acd32"",
    ""azure3"": ""#c1cdcd"",
    ""violetred"": ""#d02090"",
    ""mediumpurple3"": ""#8968cd"",
    ""purple4"": ""#551a8b"",
    ""seagreen4"": ""#2e8b57"",
    ""lightblue3"": ""#9ac0cd"",
    ""orchid3"": ""#b452cd"",
    ""indianred 3"": ""#cd5555"",
    ""grey60"": ""#999999"",
    ""mediumorchid1"": ""#e066ff"",
    ""plum3"": ""#cd96cd"",
    ""palevioletred3"": ""#cd6889"",
}",scverse,scanpy,1.10.1,,,,,"additional_colors = {
    ""gold2"": ""#eec900"",
    ""firebrick3"": ""#cd2626"",
    ""khaki2"": ""#eee685"",
    ""slategray3"": ""#9fb6cd"",
    ""palegreen3"": ""#7ccd7c"",
    ""tomato2"": ""#ee5c42"",
    ""grey80"": ""#cccccc"",
    ""grey90"": ""#e5e5e5"",
    ""wheat4"": ""#8b7e66"",
    ""grey65"": ""#a6a6a6"",
    ""grey10"": ""#1a1a1a"",
    ""grey20"": ""#333333"",
    ""grey50"": ""#7f7f7f"",
    ""grey30"": ""#4d4d4d"",
    ""grey40"": ""#666666"",
    ""antiquewhite2"": ""#eedfcc"",
    ""grey77"": ""#c4c4c4"",
    ""snow4"": ""#8b8989"",
    ""chartreuse3"": ""#66cd00"",
    ""yellow4"": ""#8b8b00"",
    ""darkolivegreen2"": ""#bcee68"",
    ""olivedrab3"": ""#9acd32"",
    ""azure3"": ""#c1cdcd"",
    ""violetred"": ""#d02090"",
    ""mediumpurple3"": ""#8968cd"",
    ""purple4"": ""#551a8b"",
    ""seagreen4"": ""#2e8b57"",
    ""lightblue3"": ""#9ac0cd"",
    ""orchid3"": ""#b452cd"",
    ""indianred 3"": ""#cd5555"",
    ""grey60"": ""#999999"",
    ""mediumorchid1"": ""#e066ff"",
    ""plum3"": ""#cd96cd"",
    ""palevioletred3"": ""#cd6889"",
}",additional_colors,"{
    ""gold2"": ""#eec900"",
    ""firebrick3"": ""#cd2626"",
    ""khaki2"": ""#eee685"",
    ""slategray3"": ""#9fb6cd"",
    ""palegreen3"": ""#7ccd7c"",
    ""tomato2"": ""#ee5c42"",
    ""grey80"": ""#cccccc"",
    ""grey90"": ""#e5e5e5"",
    ""wheat4"": ""#8b7e66"",
    ""grey65"": ""#a6a6a6"",
    ""grey10"": ""#1a1a1a"",
    ""grey20"": ""#333333"",
    ""grey50"": ""#7f7f7f"",
    ""grey30"": ""#4d4d4d"",
    ""grey40"": ""#666666"",
    ""antiquewhite2"": ""#eedfcc"",
    ""grey77"": ""#c4c4c4"",
    ""snow4"": ""#8b8989"",
    ""chartreuse3"": ""#66cd00"",
    ""yellow4"": ""#8b8b00"",
    ""darkolivegreen2"": ""#bcee68"",
    ""olivedrab3"": ""#9acd32"",
    ""azure3"": ""#c1cdcd"",
    ""violetred"": ""#d02090"",
    ""mediumpurple3"": ""#8968cd"",
    ""purple4"": ""#551a8b"",
    ""seagreen4"": ""#2e8b57"",
    ""lightblue3"": ""#9ac0cd"",
    ""orchid3"": ""#b452cd"",
    ""indianred 3"": ""#cd5555"",
    ""grey60"": ""#999999"",
    ""mediumorchid1"": ""#e066ff"",
    ""plum3"": ""#cd96cd"",
    ""palevioletred3"": ""#cd6889"",
}",,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"DN = Literal[""area"", ""count"", ""width""]",constant,,,,"Constant: DN = Literal[""area"", ""count"", ""width""]",scverse,scanpy,1.10.1,,,,,"DN = Literal[""area"", ""count"", ""width""]",DN,"Literal[""area"", ""count"", ""width""]",,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,collections.abc,import,,,,Import: collections.abc,scverse,scanpy,1.10.1,import collections.abc as cabc,collections.abc,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Callable, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Callable from typing,import,,,,Import: Callable from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Callable, Literal",Callable,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Callable, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Union from typing,import,,,,Import: Union from typing,scverse,scanpy,1.10.1,from typing import Union as _U,Union,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,matplotlib,import,,,,Import: matplotlib,scverse,scanpy,1.10.1,import matplotlib as mpl,matplotlib,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Cycler from cycler,import,,,,Import: Cycler from cycler,scverse,scanpy,1.10.1,"from cycler import Cycler, cycler",Cycler,cycler,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,cycler from cycler,import,,,,Import: cycler from cycler,scverse,scanpy,1.10.1,"from cycler import Cycler, cycler",cycler,cycler,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,axes from matplotlib,import,,,,Import: axes from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import axes, gridspec, rcParams, ticker",axes,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,gridspec from matplotlib,import,,,,Import: gridspec from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import axes, gridspec, rcParams, ticker",gridspec,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,rcParams from matplotlib,import,,,,Import: rcParams from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import axes, gridspec, rcParams, ticker",rcParams,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,ticker from matplotlib,import,,,,Import: ticker from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import axes, gridspec, rcParams, ticker",ticker,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,pyplot,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Collection from collections.abc,local_import,,,,Import: Collection from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Collection, Sequence",Collection,collections.abc,collections.abc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Sequence from collections.abc,local_import,,,,Import: Sequence from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Collection, Sequence",Sequence,collections.abc,collections.abc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Axes from matplotlib.axes,local_import,,,,Import: Axes from matplotlib.axes,scverse,scanpy,1.10.1,from matplotlib.axes import Axes,Axes,matplotlib.axes,matplotlib.axes,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,PatchCollection from matplotlib.collections,local_import,,,,Import: PatchCollection from matplotlib.collections,scverse,scanpy,1.10.1,from matplotlib.collections import PatchCollection,PatchCollection,matplotlib.collections,matplotlib.collections,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Colormap from matplotlib.colors,local_import,,,,Import: Colormap from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Colormap, is_color_like",Colormap,matplotlib.colors,matplotlib.colors,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,is_color_like from matplotlib.colors,local_import,,,,Import: is_color_like from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Colormap, is_color_like",is_color_like,matplotlib.colors,matplotlib.colors,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Figure from matplotlib.figure,local_import,,,,Import: Figure from matplotlib.figure,scverse,scanpy,1.10.1,from matplotlib.figure import Figure,Figure,matplotlib.figure,matplotlib.figure,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,SubplotParams from matplotlib.figure,local_import,,,,Import: SubplotParams from matplotlib.figure,scverse,scanpy,1.10.1,from matplotlib.figure import SubplotParams as sppars,SubplotParams,matplotlib.figure,matplotlib.figure,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Circle from matplotlib.patches,local_import,,,,Import: Circle from matplotlib.patches,scverse,scanpy,1.10.1,from matplotlib.patches import Circle,Circle,matplotlib.patches,matplotlib.patches,,,,,,,,,,,,,,
,_utils.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_utils.py,python,,,,,,Directory: scanpy\plotting\_utils.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""palettes"",
    ""clustermap"",
    ""correlation_matrix"",
    ""dendrogram"",
    ""heatmap"",
    ""ranking"",
    ""scatter"",
    ""tracksplot"",
    ""violin"",
    ""DotPlot"",
    ""dotplot"",
    ""MatrixPlot"",
    ""matrixplot"",
    ""filter_genes_dispersion"",
    ""highly_variable_genes"",
    ""highest_expr_genes"",
    ""set_rcParams_defaults"",
    ""set_rcParams_scanpy"",
    ""StackedViolin"",
    ""stacked_violin"",
    ""scrublet_score_distribution"",
    ""dpt_groups_pseudotime"",
    ""dpt_timeseries"",
    ""embedding_density"",
    ""pca_loadings"",
    ""pca_overview"",
    ""pca_scatter"",
    ""pca_variance_ratio"",
    ""rank_genes_groups"",
    ""rank_genes_groups_dotplot"",
    ""rank_genes_groups_heatmap"",
    ""rank_genes_groups_matrixplot"",
    ""rank_genes_groups_stacked_violin"",
    ""rank_genes_groups_tracksplot"",
    ""rank_genes_groups_violin"",
    ""sim"",
    ""paga"",
    ""paga_compare"",
    ""paga_path"",
    ""diffmap"",
    ""draw_graph"",
    ""embedding"",
    ""pca"",
    ""spatial"",
    ""tsne"",
    ""umap"",
    ""matrix"",
    ""timeseries"",
    ""timeseries_as_heatmap"",
    ""timeseries_subplot"",
]",constant,,,,"Constant: __all__ = [
    ""palettes"",
    ""clustermap"",
    ""correlation_matrix"",
    ""dendrogram"",
    ""heatmap"",
    ""ranking"",
    ""scatter"",
    ""tracksplot"",
    ""violin"",
    ""DotPlot"",
    ""dotplot"",
    ""MatrixPlot"",
    ""matrixplot"",
    ""filter_genes_dispersion"",
    ""highly_variable_genes"",
    ""highest_expr_genes"",
    ""set_rcParams_defaults"",
    ""set_rcParams_scanpy"",
    ""StackedViolin"",
    ""stacked_violin"",
    ""scrublet_score_distribution"",
    ""dpt_groups_pseudotime"",
    ""dpt_timeseries"",
    ""embedding_density"",
    ""pca_loadings"",
    ""pca_overview"",
    ""pca_scatter"",
    ""pca_variance_ratio"",
    ""rank_genes_groups"",
    ""rank_genes_groups_dotplot"",
    ""rank_genes_groups_heatmap"",
    ""rank_genes_groups_matrixplot"",
    ""rank_genes_groups_stacked_violin"",
    ""rank_genes_groups_tracksplot"",
    ""rank_genes_groups_violin"",
    ""sim"",
    ""paga"",
    ""paga_compare"",
    ""paga_path"",
    ""diffmap"",
    ""draw_graph"",
    ""embedding"",
    ""pca"",
    ""spatial"",
    ""tsne"",
    ""umap"",
    ""matrix"",
    ""timeseries"",
    ""timeseries_as_heatmap"",
    ""timeseries_subplot"",
]",scverse,scanpy,1.10.1,,,,,"__all__ = [
    ""palettes"",
    ""clustermap"",
    ""correlation_matrix"",
    ""dendrogram"",
    ""heatmap"",
    ""ranking"",
    ""scatter"",
    ""tracksplot"",
    ""violin"",
    ""DotPlot"",
    ""dotplot"",
    ""MatrixPlot"",
    ""matrixplot"",
    ""filter_genes_dispersion"",
    ""highly_variable_genes"",
    ""highest_expr_genes"",
    ""set_rcParams_defaults"",
    ""set_rcParams_scanpy"",
    ""StackedViolin"",
    ""stacked_violin"",
    ""scrublet_score_distribution"",
    ""dpt_groups_pseudotime"",
    ""dpt_timeseries"",
    ""embedding_density"",
    ""pca_loadings"",
    ""pca_overview"",
    ""pca_scatter"",
    ""pca_variance_ratio"",
    ""rank_genes_groups"",
    ""rank_genes_groups_dotplot"",
    ""rank_genes_groups_heatmap"",
    ""rank_genes_groups_matrixplot"",
    ""rank_genes_groups_stacked_violin"",
    ""rank_genes_groups_tracksplot"",
    ""rank_genes_groups_violin"",
    ""sim"",
    ""paga"",
    ""paga_compare"",
    ""paga_path"",
    ""diffmap"",
    ""draw_graph"",
    ""embedding"",
    ""pca"",
    ""spatial"",
    ""tsne"",
    ""umap"",
    ""matrix"",
    ""timeseries"",
    ""timeseries_as_heatmap"",
    ""timeseries_subplot"",
]",__all__,"[
    ""palettes"",
    ""clustermap"",
    ""correlation_matrix"",
    ""dendrogram"",
    ""heatmap"",
    ""ranking"",
    ""scatter"",
    ""tracksplot"",
    ""violin"",
    ""DotPlot"",
    ""dotplot"",
    ""MatrixPlot"",
    ""matrixplot"",
    ""filter_genes_dispersion"",
    ""highly_variable_genes"",
    ""highest_expr_genes"",
    ""set_rcParams_defaults"",
    ""set_rcParams_scanpy"",
    ""StackedViolin"",
    ""stacked_violin"",
    ""scrublet_score_distribution"",
    ""dpt_groups_pseudotime"",
    ""dpt_timeseries"",
    ""embedding_density"",
    ""pca_loadings"",
    ""pca_overview"",
    ""pca_scatter"",
    ""pca_variance_ratio"",
    ""rank_genes_groups"",
    ""rank_genes_groups_dotplot"",
    ""rank_genes_groups_heatmap"",
    ""rank_genes_groups_matrixplot"",
    ""rank_genes_groups_stacked_violin"",
    ""rank_genes_groups_tracksplot"",
    ""rank_genes_groups_violin"",
    ""sim"",
    ""paga"",
    ""paga_compare"",
    ""paga_path"",
    ""diffmap"",
    ""draw_graph"",
    ""embedding"",
    ""pca"",
    ""spatial"",
    ""tsne"",
    ""umap"",
    ""matrix"",
    ""timeseries"",
    ""timeseries_as_heatmap"",
    ""timeseries_subplot"",
]",,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\plotting\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,"_compute_pos(
    adjacency_solid,
    *,
    layout=None,
    random_state=0,
    init_pos=None,
    adj_tree=None,
    root=0,
    layout_kwds: Mapping[str, Any] = MappingProxyType({}),
)",function,_compute_pos,"(
    adjacency_solid,
    *,
    layout=None,
    random_state=0,
    init_pos=None,
    adj_tree=None,
    root=0,
    layout_kwds: Mapping[str, Any] = MappingProxyType({}),
)",,"Function: _compute_pos(
    adjacency_solid,
    *,
    layout=None,
    random_state=0,
    init_pos=None,
    adj_tree=None,
    root=0,
    layout_kwds: Mapping[str, Any] = MappingProxyType({}),
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,"_paga_graph(
    adata,
    ax,
    *,
    solid_edges=None,
    dashed_edges=None,
    adjacency_solid=None,
    adjacency_dashed=None,
    transitions=None,
    threshold=None,
    root=0,
    colors=None,
    labels=None,
    fontsize=None,
    fontweight=None,
    fontoutline=None,
    text_kwds: Mapping[str, Any] = MappingProxyType({}),
    node_size_scale=1.0,
    node_size_power=0.5,
    edge_width_scale=1.0,
    normalize_to_color=""reference"",
    title=None,
    pos=None,
    cmap=None,
    frameon=True,
    min_edge_width=None,
    max_edge_width=None,
    export_to_gexf=False,
    colorbar=None,
    use_raw=True,
    cb_kwds: Mapping[str, Any] = MappingProxyType({}),
    single_component=False,
    arrowsize=30,
)",function,_paga_graph,"(
    adata,
    ax,
    *,
    solid_edges=None,
    dashed_edges=None,
    adjacency_solid=None,
    adjacency_dashed=None,
    transitions=None,
    threshold=None,
    root=0,
    colors=None,
    labels=None,
    fontsize=None,
    fontweight=None,
    fontoutline=None,
    text_kwds: Mapping[str, Any] = MappingProxyType({}),
    node_size_scale=1.0,
    node_size_power=0.5,
    edge_width_scale=1.0,
    normalize_to_color=""reference"",
    title=None,
    pos=None,
    cmap=None,
    frameon=True,
    min_edge_width=None,
    max_edge_width=None,
    export_to_gexf=False,
    colorbar=None,
    use_raw=True,
    cb_kwds: Mapping[str, Any] = MappingProxyType({}),
    single_component=False,
    arrowsize=30,
)",,"Function: _paga_graph(
    adata,
    ax,
    *,
    solid_edges=None,
    dashed_edges=None,
    adjacency_solid=None,
    adjacency_dashed=None,
    transitions=None,
    threshold=None,
    root=0,
    colors=None,
    labels=None,
    fontsize=None,
    fontweight=None,
    fontoutline=None,
    text_kwds: Mapping[str, Any] = MappingProxyType({}),
    node_size_scale=1.0,
    node_size_power=0.5,
    edge_width_scale=1.0,
    normalize_to_color=""reference"",
    title=None,
    pos=None,
    cmap=None,
    frameon=True,
    min_edge_width=None,
    max_edge_width=None,
    export_to_gexf=False,
    colorbar=None,
    use_raw=True,
    cb_kwds: Mapping[str, Any] = MappingProxyType({}),
    single_component=False,
    arrowsize=30,
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,"paga_adjacency(
    adata: AnnData,
    *,
    adjacency: str = ""connectivities"",
    adjacency_tree: str = ""connectivities_tree"",
    as_heatmap: bool = True,
    color_map: str | Colormap | None = None,
    show: bool | None = None,
    save: bool | str | None = None,
) -> None",function,paga_adjacency,"(
    adata: AnnData,
    *,
    adjacency: str = ""connectivities"",
    adjacency_tree: str = ""connectivities_tree"",
    as_heatmap: bool = True,
    color_map: str | Colormap | None = None,
    show: bool | None = None,
    save: bool | str | None = None,
)",None,"Function: paga_adjacency(
    adata: AnnData,
    *,
    adjacency: str = ""connectivities"",
    adjacency_tree: str = ""connectivities_tree"",
    as_heatmap: bool = True,
    color_map: str | Colormap | None = None,
    show: bool | None = None,
    save: bool | str | None = None,
) -> None",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,collections.abc,import,,,,Import: collections.abc,scverse,scanpy,1.10.1,import collections.abc as cabc,collections.abc,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,MappingProxyType from types,import,,,,Import: MappingProxyType from types,scverse,scanpy,1.10.1,from types import MappingProxyType,MappingProxyType,types,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",Any,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,scipy,import,,,,Import: scipy,scverse,scanpy,1.10.1,import scipy,scipy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,patheffects from matplotlib,import,,,,Import: patheffects from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import patheffects, rcParams, ticker",patheffects,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,rcParams from matplotlib,import,,,,Import: rcParams from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import patheffects, rcParams, ticker",rcParams,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,ticker from matplotlib,import,,,,Import: ticker from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import patheffects, rcParams, ticker",ticker,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,pyplot,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,Colormap from matplotlib.colors,local_import,,,,Import: Colormap from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Colormap, is_color_like",Colormap,matplotlib.colors,matplotlib.colors,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,is_color_like from matplotlib.colors,local_import,,,,Import: is_color_like from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Colormap, is_color_like",is_color_like,matplotlib.colors,matplotlib.colors,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,CategoricalDtype from pandas.api.types,local_import,,,,Import: CategoricalDtype from pandas.api.types,scverse,scanpy,1.10.1,from pandas.api.types import CategoricalDtype,CategoricalDtype,pandas.api.types,pandas.api.types,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import issparse,issparse,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,check_random_state from sklearn.utils,local_import,,,,Import: check_random_state from sklearn.utils,scverse,scanpy,1.10.1,from sklearn.utils import check_random_state,check_random_state,sklearn.utils,sklearn.utils,,,,,,,,,,,,,,
,paga.py,python,,,,,,File: scanpy\plotting\_tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,paga.py,python,,,,,,Directory: scanpy\plotting\_tools\paga.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_panel_grid(hspace, wspace, ncols, num_panels)",function,_panel_grid,"(hspace, wspace, ncols, num_panels)",,"Function: _panel_grid(hspace, wspace, ncols, num_panels)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_get_vboundnorm(
    vmin: Sequence[VBound],
    vmax: Sequence[VBound],
    vcenter: Sequence[VBound],
    *,
    norm: Sequence[Normalize],
    index: int,
    colors: Sequence[float],
) -> tuple[float | None, float | None]",function,_get_vboundnorm,"(
    vmin: Sequence[VBound],
    vmax: Sequence[VBound],
    vcenter: Sequence[VBound],
    *,
    norm: Sequence[Normalize],
    index: int,
    colors: Sequence[float],
)","tuple[float | None, float | None]","Function: _get_vboundnorm(
    vmin: Sequence[VBound],
    vmax: Sequence[VBound],
    vcenter: Sequence[VBound],
    *,
    norm: Sequence[Normalize],
    index: int,
    colors: Sequence[float],
) -> tuple[float | None, float | None]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,_wraps_plot_scatter(wrapper),function,_wraps_plot_scatter,(wrapper),,Function: _wraps_plot_scatter(wrapper),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_components_to_dimensions(
    components: str | Collection[str] | None,
    dimensions: Collection[int] | Collection[Collection[int]] | None,
    *,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    total_dims: int,
) -> list[Collection[int]]",function,_components_to_dimensions,"(
    components: str | Collection[str] | None,
    dimensions: Collection[int] | Collection[Collection[int]] | None,
    *,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    total_dims: int,
)",list[Collection[int]],"Function: _components_to_dimensions(
    components: str | Collection[str] | None,
    dimensions: Collection[int] | Collection[Collection[int]] | None,
    *,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    total_dims: int,
) -> list[Collection[int]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_add_categorical_legend(
    ax,
    color_source_vector,
    *,
    palette: dict,
    legend_loc: str,
    legend_fontweight,
    legend_fontsize,
    legend_fontoutline,
    multi_panel,
    na_color,
    na_in_legend: bool,
    scatter_array=None,
)",function,_add_categorical_legend,"(
    ax,
    color_source_vector,
    *,
    palette: dict,
    legend_loc: str,
    legend_fontweight,
    legend_fontsize,
    legend_fontoutline,
    multi_panel,
    na_color,
    na_in_legend: bool,
    scatter_array=None,
)",,"Function: _add_categorical_legend(
    ax,
    color_source_vector,
    *,
    palette: dict,
    legend_loc: str,
    legend_fontweight,
    legend_fontsize,
    legend_fontoutline,
    multi_panel,
    na_color,
    na_in_legend: bool,
    scatter_array=None,
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_get_basis(adata: AnnData, basis: str) -> np.ndarray",function,_get_basis,"(adata: AnnData, basis: str)",np.ndarray,"Function: _get_basis(adata: AnnData, basis: str) -> np.ndarray",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_get_color_source_vector(
    adata: AnnData,
    value_to_plot: str,
    *,
    mask_obs: NDArray[np.bool_] | None = None,
    use_raw: bool = False,
    gene_symbols: str | None = None,
    layer: str | None = None,
    groups: Sequence[str] | None = None,
) -> np.ndarray | pd.api.extensions.ExtensionArray",function,_get_color_source_vector,"(
    adata: AnnData,
    value_to_plot: str,
    *,
    mask_obs: NDArray[np.bool_] | None = None,
    use_raw: bool = False,
    gene_symbols: str | None = None,
    layer: str | None = None,
    groups: Sequence[str] | None = None,
)",np.ndarray | pd.api.extensions.ExtensionArray,"Function: _get_color_source_vector(
    adata: AnnData,
    value_to_plot: str,
    *,
    mask_obs: NDArray[np.bool_] | None = None,
    use_raw: bool = False,
    gene_symbols: str | None = None,
    layer: str | None = None,
    groups: Sequence[str] | None = None,
) -> np.ndarray | pd.api.extensions.ExtensionArray",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_get_palette(adata, values_key: str, palette=None)",function,_get_palette,"(adata, values_key: str, palette=None)",,"Function: _get_palette(adata, values_key: str, palette=None)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_color_vector(
    adata: AnnData,
    values_key: str | None,
    *,
    values: np.ndarray | pd.api.extensions.ExtensionArray,
    palette: str | Sequence[str] | Cycler | None,
    na_color: ColorLike = ""lightgray"",
) -> tuple[np.ndarray | pd.api.extensions.ExtensionArray, Literal[""cat"", ""na"", ""cont""]]",function,_color_vector,"(
    adata: AnnData,
    values_key: str | None,
    *,
    values: np.ndarray | pd.api.extensions.ExtensionArray,
    palette: str | Sequence[str] | Cycler | None,
    na_color: ColorLike = ""lightgray"",
)","tuple[np.ndarray | pd.api.extensions.ExtensionArray, Literal[""cat"", ""na"", ""cont""]]","Function: _color_vector(
    adata: AnnData,
    values_key: str | None,
    *,
    values: np.ndarray | pd.api.extensions.ExtensionArray,
    palette: str | Sequence[str] | Cycler | None,
    na_color: ColorLike = ""lightgray"",
) -> tuple[np.ndarray | pd.api.extensions.ExtensionArray, Literal[""cat"", ""na"", ""cont""]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,_basis2name(basis),function,_basis2name,(basis),,Function: _basis2name(basis),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_check_spot_size(spatial_data: Mapping | None, spot_size: float | None) -> float",function,_check_spot_size,"(spatial_data: Mapping | None, spot_size: float | None)",float,"Function: _check_spot_size(spatial_data: Mapping | None, spot_size: float | None) -> float",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_check_scale_factor(
    spatial_data: Mapping | None,
    img_key: str | None,
    scale_factor: float | None,
) -> float",function,_check_scale_factor,"(
    spatial_data: Mapping | None,
    img_key: str | None,
    scale_factor: float | None,
)",float,"Function: _check_scale_factor(
    spatial_data: Mapping | None,
    img_key: str | None,
    scale_factor: float | None,
) -> float",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_check_spatial_data(
    uns: Mapping, library_id: str | None | Empty
) -> tuple[str | None, Mapping | None]",function,_check_spatial_data,"(
    uns: Mapping, library_id: str | None | Empty
)","tuple[str | None, Mapping | None]","Function: _check_spatial_data(
    uns: Mapping, library_id: str | None | Empty
) -> tuple[str | None, Mapping | None]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_check_img(
    spatial_data: Mapping | None,
    img: np.ndarray | None,
    img_key: None | str | Empty,
    bw: bool = False,
) -> tuple[np.ndarray | None, str | None]",function,_check_img,"(
    spatial_data: Mapping | None,
    img: np.ndarray | None,
    img_key: None | str | Empty,
    bw: bool = False,
)","tuple[np.ndarray | None, str | None]","Function: _check_img(
    spatial_data: Mapping | None,
    img: np.ndarray | None,
    img_key: None | str | Empty,
    bw: bool = False,
) -> tuple[np.ndarray | None, str | None]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_check_crop_coord(
    crop_coord: tuple | None,
    scale_factor: float,
) -> tuple[float, float, float, float]",function,_check_crop_coord,"(
    crop_coord: tuple | None,
    scale_factor: float,
)","tuple[float, float, float, float]","Function: _check_crop_coord(
    crop_coord: tuple | None,
    scale_factor: float,
) -> tuple[float, float, float, float]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_check_na_color(
    na_color: ColorLike | None, *, img: np.ndarray | None = None
) -> ColorLike",function,_check_na_color,"(
    na_color: ColorLike | None, *, img: np.ndarray | None = None
)",ColorLike,"Function: _check_na_color(
    na_color: ColorLike | None, *, img: np.ndarray | None = None
) -> ColorLike",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,_broadcast_args(*args),function,_broadcast_args,(*args),,Function: _broadcast_args(*args),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,collections.abc,import,,,,Import: collections.abc,scverse,scanpy,1.10.1,import collections.abc as cabc,collections.abc,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,inspect,import,,,,Import: inspect,scverse,scanpy,1.10.1,import inspect,inspect,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,sys,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,copy from copy,import,,,,Import: copy from copy,scverse,scanpy,1.10.1,from copy import copy,copy,copy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,partial,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,combinations from itertools,import,,,,Import: combinations from itertools,scverse,scanpy,1.10.1,"from itertools import combinations, product",combinations,itertools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,product from itertools,import,,,,Import: product from itertools,scverse,scanpy,1.10.1,"from itertools import combinations, product",product,itertools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Integral from numbers,import,,,,Import: Integral from numbers,scverse,scanpy,1.10.1,from numbers import Integral,Integral,numbers,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",Any,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Cycler from cycler,import,,,,Import: Cycler from cycler,scverse,scanpy,1.10.1,from cycler import Cycler,Cycler,cycler,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,colormaps from matplotlib,import,,,,Import: colormaps from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import colormaps, colors, patheffects, rcParams",colormaps,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,colors from matplotlib,import,,,,Import: colors from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import colormaps, colors, patheffects, rcParams",colors,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,patheffects from matplotlib,import,,,,Import: patheffects from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import colormaps, colors, patheffects, rcParams",patheffects,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,rcParams from matplotlib,import,,,,Import: rcParams from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import colormaps, colors, patheffects, rcParams",rcParams,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,pyplot,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Mapping from collections.abc,local_import,,,,Import: Mapping from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Mapping, Sequence",Mapping,collections.abc,collections.abc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Sequence from collections.abc,local_import,,,,Import: Sequence from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Mapping, Sequence",Sequence,collections.abc,collections.abc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Axes from matplotlib.axes,local_import,,,,Import: Axes from matplotlib.axes,scverse,scanpy,1.10.1,from matplotlib.axes import Axes,Axes,matplotlib.axes,matplotlib.axes,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Colormap from matplotlib.colors,local_import,,,,Import: Colormap from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Colormap, Normalize",Colormap,matplotlib.colors,matplotlib.colors,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Normalize from matplotlib.colors,local_import,,,,Import: Normalize from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Colormap, Normalize",Normalize,matplotlib.colors,matplotlib.colors,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Figure from matplotlib.figure,local_import,,,,Import: Figure from matplotlib.figure,scverse,scanpy,1.10.1,from matplotlib.figure import Figure,Figure,matplotlib.figure,matplotlib.figure,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,NDArray from numpy.typing,local_import,,,,Import: NDArray from numpy.typing,scverse,scanpy,1.10.1,from numpy.typing import NDArray,NDArray,numpy.typing,numpy.typing,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Version from packaging.version,local_import,,,,Import: Version from packaging.version,scverse,scanpy,1.10.1,from packaging.version import Version,Version,packaging.version,packaging.version,,,,,,,,,,,,,,
,scatterplots.py,python,,,,,,File: scanpy\plotting\_tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,scatterplots.py,python,,,,,,Directory: scanpy\plotting\_tools\scatterplots.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_fig_show_save_or_axes(plot_obj, return_fig, show, save)",function,_fig_show_save_or_axes,"(plot_obj, return_fig, show, save)",,"Function: _fig_show_save_or_axes(plot_obj, return_fig, show, save)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_rank_genes_groups_plot(
    adata: AnnData,
    plot_type: str = ""heatmap"",
    *,
    groups: str | Sequence[str] | None = None,
    n_genes: int | None = None,
    groupby: str | None = None,
    values_to_plot: str | None = None,
    var_names: Sequence[str] | Mapping[str, Sequence[str]] | None = None,
    min_logfoldchange: float | None = None,
    key: str | None = None,
    show: bool | None = None,
    save: bool | None = None,
    return_fig: bool | None = False,
    gene_symbols: str | None = None,
    **kwds,
)",function,_rank_genes_groups_plot,"(
    adata: AnnData,
    plot_type: str = ""heatmap"",
    *,
    groups: str | Sequence[str] | None = None,
    n_genes: int | None = None,
    groupby: str | None = None,
    values_to_plot: str | None = None,
    var_names: Sequence[str] | Mapping[str, Sequence[str]] | None = None,
    min_logfoldchange: float | None = None,
    key: str | None = None,
    show: bool | None = None,
    save: bool | None = None,
    return_fig: bool | None = False,
    gene_symbols: str | None = None,
    **kwds,
)",,"Function: _rank_genes_groups_plot(
    adata: AnnData,
    plot_type: str = ""heatmap"",
    *,
    groups: str | Sequence[str] | None = None,
    n_genes: int | None = None,
    groupby: str | None = None,
    values_to_plot: str | None = None,
    var_names: Sequence[str] | Mapping[str, Sequence[str]] | None = None,
    min_logfoldchange: float | None = None,
    key: str | None = None,
    show: bool | None = None,
    save: bool | None = None,
    return_fig: bool | None = False,
    gene_symbols: str | None = None,
    **kwds,
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_get_values_to_plot(
    adata,
    values_to_plot: Literal[
        ""scores"",
        ""logfoldchanges"",
        ""pvals"",
        ""pvals_adj"",
        ""log10_pvals"",
        ""log10_pvals_adj"",
    ],
    gene_names: Sequence[str],
    *,
    groups: Sequence[str] | None = None,
    key: str | None = ""rank_genes_groups"",
    gene_symbols: str | None = None,
)",function,_get_values_to_plot,"(
    adata,
    values_to_plot: Literal[
        ""scores"",
        ""logfoldchanges"",
        ""pvals"",
        ""pvals_adj"",
        ""log10_pvals"",
        ""log10_pvals_adj"",
    ],
    gene_names: Sequence[str],
    *,
    groups: Sequence[str] | None = None,
    key: str | None = ""rank_genes_groups"",
    gene_symbols: str | None = None,
)",,"Function: _get_values_to_plot(
    adata,
    values_to_plot: Literal[
        ""scores"",
        ""logfoldchanges"",
        ""pvals"",
        ""pvals_adj"",
        ""log10_pvals"",
        ""log10_pvals_adj"",
    ],
    gene_names: Sequence[str],
    *,
    groups: Sequence[str] | None = None,
    key: str | None = ""rank_genes_groups"",
    gene_symbols: str | None = None,
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,pca_scatter = pca,constant,,,,Constant: pca_scatter = pca,scverse,scanpy,1.10.1,,,,,pca_scatter = pca,pca_scatter,pca,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,collections.abc,import,,,,Import: collections.abc,scverse,scanpy,1.10.1,import collections.abc as cabc,collections.abc,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,copy from copy,import,,,,Import: copy from copy,scverse,scanpy,1.10.1,from copy import copy,copy,copy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,colormaps from matplotlib,import,,,,Import: colormaps from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import colormaps, rcParams",colormaps,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,rcParams from matplotlib,import,,,,Import: rcParams from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import colormaps, rcParams",rcParams,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,pyplot,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Iterable from collections.abc,local_import,,,,Import: Iterable from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Iterable, Mapping, Sequence",Iterable,collections.abc,collections.abc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Mapping from collections.abc,local_import,,,,Import: Mapping from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Iterable, Mapping, Sequence",Mapping,collections.abc,collections.abc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Sequence from collections.abc,local_import,,,,Import: Sequence from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Iterable, Mapping, Sequence",Sequence,collections.abc,collections.abc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,obs_df from scanpy.get,local_import,,,,Import: obs_df from scanpy.get,scverse,scanpy,1.10.1,from scanpy.get import obs_df,obs_df,scanpy.get,scanpy.get,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\plotting\_tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\plotting\_tools\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_combat.py,python,"_design_matrix(
    model: pd.DataFrame, batch_key: str, batch_levels: Collection[str]
) -> pd.DataFrame",function,_design_matrix,"(
    model: pd.DataFrame, batch_key: str, batch_levels: Collection[str]
)",pd.DataFrame,"Function: _design_matrix(
    model: pd.DataFrame, batch_key: str, batch_levels: Collection[str]
) -> pd.DataFrame",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_combat.py,python,"_standardize_data(
    model: pd.DataFrame, data: pd.DataFrame, batch_key: str
) -> tuple[pd.DataFrame, pd.DataFrame, np.ndarray, np.ndarray]",function,_standardize_data,"(
    model: pd.DataFrame, data: pd.DataFrame, batch_key: str
)","tuple[pd.DataFrame, pd.DataFrame, np.ndarray, np.ndarray]","Function: _standardize_data(
    model: pd.DataFrame, data: pd.DataFrame, batch_key: str
) -> tuple[pd.DataFrame, pd.DataFrame, np.ndarray, np.ndarray]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_combat.py,python,"_it_sol(
    s_data: np.ndarray,
    g_hat: np.ndarray,
    d_hat: np.ndarray,
    *,
    g_bar: float,
    t2: float,
    a: float,
    b: float,
    conv: float = 0.0001,
) -> tuple[np.ndarray, np.ndarray]",function,_it_sol,"(
    s_data: np.ndarray,
    g_hat: np.ndarray,
    d_hat: np.ndarray,
    *,
    g_bar: float,
    t2: float,
    a: float,
    b: float,
    conv: float = 0.0001,
)","tuple[np.ndarray, np.ndarray]","Function: _it_sol(
    s_data: np.ndarray,
    g_hat: np.ndarray,
    d_hat: np.ndarray,
    *,
    g_bar: float,
    t2: float,
    a: float,
    b: float,
    conv: float = 0.0001,
) -> tuple[np.ndarray, np.ndarray]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_combat.py,python,_aprior(delta_hat),function,_aprior,(delta_hat),,Function: _aprior(delta_hat),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_combat.py,python,_bprior(delta_hat),function,_bprior,(delta_hat),,Function: _bprior(delta_hat),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_combat.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_combat.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_combat.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_combat.py,python,linalg from numpy,import,,,,Import: linalg from numpy,scverse,scanpy,1.10.1,from numpy import linalg as la,linalg,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_combat.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import issparse,issparse,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
,_combat.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_combat.py,python,,,,,,Directory: scanpy\preprocessing\_combat.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_distributed.py,python,"materialize_as_ndarray(
    a: DaskArray | ArrayLike | tuple[ArrayLike | ZappyArray | DaskArray, ...],
) -> tuple[np.ndarray] | np.ndarray",function,materialize_as_ndarray,"(
    a: DaskArray | ArrayLike | tuple[ArrayLike | ZappyArray | DaskArray, ...],
)",tuple[np.ndarray] | np.ndarray,"Function: materialize_as_ndarray(
    a: DaskArray | ArrayLike | tuple[ArrayLike | ZappyArray | DaskArray, ...],
) -> tuple[np.ndarray] | np.ndarray",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_distributed.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, overload",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_distributed.py,python,overload from typing,import,,,,Import: overload from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, overload",overload,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_distributed.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_distributed.py,python,DaskArray from scanpy._compat,local_import,,,,Import: DaskArray from scanpy._compat,scverse,scanpy,1.10.1,"from scanpy._compat import DaskArray, ZappyArray",DaskArray,scanpy._compat,scanpy._compat,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_distributed.py,python,ZappyArray from scanpy._compat,local_import,,,,Import: ZappyArray from scanpy._compat,scverse,scanpy,1.10.1,"from scanpy._compat import DaskArray, ZappyArray",ZappyArray,scanpy._compat,scanpy._compat,,,,,,,,,,,,,,
,_distributed.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_distributed.py,python,,,,,,Directory: scanpy\preprocessing\_distributed.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_adata_basic = """"""\
adata
    Annotated data matrix.\
""""""",constant,,,,"Constant: doc_adata_basic = """"""\
adata
    Annotated data matrix.\
""""""",scverse,scanpy,1.10.1,,,,,"doc_adata_basic = """"""\
adata
    Annotated data matrix.\
""""""",doc_adata_basic,"""""""\
adata
    Annotated data matrix.\
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_expr_reps = """"""\
layer
    If provided, use `adata.layers[layer]` for expression values instead
    of `adata.X`.
use_raw
    If True, use `adata.raw.X` for expression values instead of `adata.X`.\
""""""",constant,,,,"Constant: doc_expr_reps = """"""\
layer
    If provided, use `adata.layers[layer]` for expression values instead
    of `adata.X`.
use_raw
    If True, use `adata.raw.X` for expression values instead of `adata.X`.\
""""""",scverse,scanpy,1.10.1,,,,,"doc_expr_reps = """"""\
layer
    If provided, use `adata.layers[layer]` for expression values instead
    of `adata.X`.
use_raw
    If True, use `adata.raw.X` for expression values instead of `adata.X`.\
""""""",doc_expr_reps,"""""""\
layer
    If provided, use `adata.layers[layer]` for expression values instead
    of `adata.X`.
use_raw
    If True, use `adata.raw.X` for expression values instead of `adata.X`.\
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_mask_var_hvg = """"""\
mask_var
    To run only on a certain set of genes given by a boolean array
    or a string referring to an array in :attr:`~anndata.AnnData.var`.
    By default, uses `.var['highly_variable']` if available, else everything.
use_highly_variable
    Whether to use highly variable genes only, stored in
    `.var['highly_variable']`.
    By default uses them if they have been determined beforehand.

    .. deprecated:: 1.10.0
       Use `mask_var` instead
""""""",constant,,,,"Constant: doc_mask_var_hvg = """"""\
mask_var
    To run only on a certain set of genes given by a boolean array
    or a string referring to an array in :attr:`~anndata.AnnData.var`.
    By default, uses `.var['highly_variable']` if available, else everything.
use_highly_variable
    Whether to use highly variable genes only, stored in
    `.var['highly_variable']`.
    By default uses them if they have been determined beforehand.

    .. deprecated:: 1.10.0
       Use `mask_var` instead
""""""",scverse,scanpy,1.10.1,,,,,"doc_mask_var_hvg = """"""\
mask_var
    To run only on a certain set of genes given by a boolean array
    or a string referring to an array in :attr:`~anndata.AnnData.var`.
    By default, uses `.var['highly_variable']` if available, else everything.
use_highly_variable
    Whether to use highly variable genes only, stored in
    `.var['highly_variable']`.
    By default uses them if they have been determined beforehand.

    .. deprecated:: 1.10.0
       Use `mask_var` instead
""""""",doc_mask_var_hvg,"""""""\
mask_var
    To run only on a certain set of genes given by a boolean array
    or a string referring to an array in :attr:`~anndata.AnnData.var`.
    By default, uses `.var['highly_variable']` if available, else everything.
use_highly_variable
    Whether to use highly variable genes only, stored in
    `.var['highly_variable']`.
    By default uses them if they have been determined beforehand.

    .. deprecated:: 1.10.0
       Use `mask_var` instead
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_obs_qc_args = """"""\
qc_vars
    Keys for boolean columns of `.var` which identify variables you could
    want to control for (e.g. ""ERCC"" or ""mito"").
percent_top
    List of ranks (where genes are ranked by expression) at which the cumulative
    proportion of expression will be reported as a percentage. This can be used to
    assess library complexity. Ranks are considered 1-indexed, and if empty or None
    don't calculate.

    E.g. `percent_top=[50]` finds cumulative proportion to the 50th most expressed gene.
""""""",constant,,,,"Constant: doc_obs_qc_args = """"""\
qc_vars
    Keys for boolean columns of `.var` which identify variables you could
    want to control for (e.g. ""ERCC"" or ""mito"").
percent_top
    List of ranks (where genes are ranked by expression) at which the cumulative
    proportion of expression will be reported as a percentage. This can be used to
    assess library complexity. Ranks are considered 1-indexed, and if empty or None
    don't calculate.

    E.g. `percent_top=[50]` finds cumulative proportion to the 50th most expressed gene.
""""""",scverse,scanpy,1.10.1,,,,,"doc_obs_qc_args = """"""\
qc_vars
    Keys for boolean columns of `.var` which identify variables you could
    want to control for (e.g. ""ERCC"" or ""mito"").
percent_top
    List of ranks (where genes are ranked by expression) at which the cumulative
    proportion of expression will be reported as a percentage. This can be used to
    assess library complexity. Ranks are considered 1-indexed, and if empty or None
    don't calculate.

    E.g. `percent_top=[50]` finds cumulative proportion to the 50th most expressed gene.
""""""",doc_obs_qc_args,"""""""\
qc_vars
    Keys for boolean columns of `.var` which identify variables you could
    want to control for (e.g. ""ERCC"" or ""mito"").
percent_top
    List of ranks (where genes are ranked by expression) at which the cumulative
    proportion of expression will be reported as a percentage. This can be used to
    assess library complexity. Ranks are considered 1-indexed, and if empty or None
    don't calculate.

    E.g. `percent_top=[50]` finds cumulative proportion to the 50th most expressed gene.
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_qc_metric_naming = """"""\
expr_type
    Name of kind of values in X.
var_type
    The kind of thing the variables are.\
""""""",constant,,,,"Constant: doc_qc_metric_naming = """"""\
expr_type
    Name of kind of values in X.
var_type
    The kind of thing the variables are.\
""""""",scverse,scanpy,1.10.1,,,,,"doc_qc_metric_naming = """"""\
expr_type
    Name of kind of values in X.
var_type
    The kind of thing the variables are.\
""""""",doc_qc_metric_naming,"""""""\
expr_type
    Name of kind of values in X.
var_type
    The kind of thing the variables are.\
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_obs_qc_returns = """"""\
Observation level metrics include:

`total_{var_type}_by_{expr_type}`
    E.g. ""total_genes_by_counts"". Number of genes with positive counts in a cell.
`total_{expr_type}`
    E.g. ""total_counts"". Total number of counts for a cell.
`pct_{expr_type}_in_top_{n}_{var_type}` – for `n` in `percent_top`
    E.g. ""pct_counts_in_top_50_genes"". Cumulative percentage of counts
    for 50 most expressed genes in a cell.
`total_{expr_type}_{qc_var}` – for `qc_var` in `qc_vars`
    E.g. ""total_counts_mito"". Total number of counts for variables in
    `qc_vars`.
`pct_{expr_type}_{qc_var}` – for `qc_var` in `qc_vars`
    E.g. ""pct_counts_mito"". Proportion of total counts for a cell which
    are mitochondrial.\
""""""",constant,,,,"Constant: doc_obs_qc_returns = """"""\
Observation level metrics include:

`total_{var_type}_by_{expr_type}`
    E.g. ""total_genes_by_counts"". Number of genes with positive counts in a cell.
`total_{expr_type}`
    E.g. ""total_counts"". Total number of counts for a cell.
`pct_{expr_type}_in_top_{n}_{var_type}` – for `n` in `percent_top`
    E.g. ""pct_counts_in_top_50_genes"". Cumulative percentage of counts
    for 50 most expressed genes in a cell.
`total_{expr_type}_{qc_var}` – for `qc_var` in `qc_vars`
    E.g. ""total_counts_mito"". Total number of counts for variables in
    `qc_vars`.
`pct_{expr_type}_{qc_var}` – for `qc_var` in `qc_vars`
    E.g. ""pct_counts_mito"". Proportion of total counts for a cell which
    are mitochondrial.\
""""""",scverse,scanpy,1.10.1,,,,,"doc_obs_qc_returns = """"""\
Observation level metrics include:

`total_{var_type}_by_{expr_type}`
    E.g. ""total_genes_by_counts"". Number of genes with positive counts in a cell.
`total_{expr_type}`
    E.g. ""total_counts"". Total number of counts for a cell.
`pct_{expr_type}_in_top_{n}_{var_type}` – for `n` in `percent_top`
    E.g. ""pct_counts_in_top_50_genes"". Cumulative percentage of counts
    for 50 most expressed genes in a cell.
`total_{expr_type}_{qc_var}` – for `qc_var` in `qc_vars`
    E.g. ""total_counts_mito"". Total number of counts for variables in
    `qc_vars`.
`pct_{expr_type}_{qc_var}` – for `qc_var` in `qc_vars`
    E.g. ""pct_counts_mito"". Proportion of total counts for a cell which
    are mitochondrial.\
""""""",doc_obs_qc_returns,"""""""\
Observation level metrics include:

`total_{var_type}_by_{expr_type}`
    E.g. ""total_genes_by_counts"". Number of genes with positive counts in a cell.
`total_{expr_type}`
    E.g. ""total_counts"". Total number of counts for a cell.
`pct_{expr_type}_in_top_{n}_{var_type}` – for `n` in `percent_top`
    E.g. ""pct_counts_in_top_50_genes"". Cumulative percentage of counts
    for 50 most expressed genes in a cell.
`total_{expr_type}_{qc_var}` – for `qc_var` in `qc_vars`
    E.g. ""total_counts_mito"". Total number of counts for variables in
    `qc_vars`.
`pct_{expr_type}_{qc_var}` – for `qc_var` in `qc_vars`
    E.g. ""pct_counts_mito"". Proportion of total counts for a cell which
    are mitochondrial.\
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_var_qc_returns = """"""\
Variable level metrics include:

`total_{expr_type}`
    E.g. ""total_counts"". Sum of counts for a gene.
`n_genes_by_{expr_type}`
    E.g. ""n_genes_by_counts"". The number of genes with at least 1 count in a cell. Calculated for all cells.
`mean_{expr_type}`
    E.g. ""mean_counts"". Mean expression over all cells.
`n_cells_by_{expr_type}`
    E.g. ""n_cells_by_counts"". Number of cells this expression is
    measured in.
`pct_dropout_by_{expr_type}`
    E.g. ""pct_dropout_by_counts"". Percentage of cells this feature does
    not appear in.\
""""""",constant,,,,"Constant: doc_var_qc_returns = """"""\
Variable level metrics include:

`total_{expr_type}`
    E.g. ""total_counts"". Sum of counts for a gene.
`n_genes_by_{expr_type}`
    E.g. ""n_genes_by_counts"". The number of genes with at least 1 count in a cell. Calculated for all cells.
`mean_{expr_type}`
    E.g. ""mean_counts"". Mean expression over all cells.
`n_cells_by_{expr_type}`
    E.g. ""n_cells_by_counts"". Number of cells this expression is
    measured in.
`pct_dropout_by_{expr_type}`
    E.g. ""pct_dropout_by_counts"". Percentage of cells this feature does
    not appear in.\
""""""",scverse,scanpy,1.10.1,,,,,"doc_var_qc_returns = """"""\
Variable level metrics include:

`total_{expr_type}`
    E.g. ""total_counts"". Sum of counts for a gene.
`n_genes_by_{expr_type}`
    E.g. ""n_genes_by_counts"". The number of genes with at least 1 count in a cell. Calculated for all cells.
`mean_{expr_type}`
    E.g. ""mean_counts"". Mean expression over all cells.
`n_cells_by_{expr_type}`
    E.g. ""n_cells_by_counts"". Number of cells this expression is
    measured in.
`pct_dropout_by_{expr_type}`
    E.g. ""pct_dropout_by_counts"". Percentage of cells this feature does
    not appear in.\
""""""",doc_var_qc_returns,"""""""\
Variable level metrics include:

`total_{expr_type}`
    E.g. ""total_counts"". Sum of counts for a gene.
`n_genes_by_{expr_type}`
    E.g. ""n_genes_by_counts"". The number of genes with at least 1 count in a cell. Calculated for all cells.
`mean_{expr_type}`
    E.g. ""mean_counts"". Mean expression over all cells.
`n_cells_by_{expr_type}`
    E.g. ""n_cells_by_counts"". Number of cells this expression is
    measured in.
`pct_dropout_by_{expr_type}`
    E.g. ""pct_dropout_by_counts"". Percentage of cells this feature does
    not appear in.\
""""""",,,,,,,,,,,
,_docs.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_docs.py,python,,,,,,Directory: scanpy\preprocessing\_docs.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,_Cutoffs.min_disp: float,class_field,,,,Class field: _Cutoffs.min_disp: float,scverse,scanpy,1.10.1,,,,,,,,,_Cutoffs,,,min_disp: float,,,,,min_disp,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,_Cutoffs.max_disp: float,class_field,,,,Class field: _Cutoffs.max_disp: float,scverse,scanpy,1.10.1,,,,,,,,,_Cutoffs,,,max_disp: float,,,,,max_disp,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,_Cutoffs.min_mean: float,class_field,,,,Class field: _Cutoffs.min_mean: float,scverse,scanpy,1.10.1,,,,,,,,,_Cutoffs,,,min_mean: float,,,,,min_mean,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,_Cutoffs.max_mean: float,class_field,,,,Class field: _Cutoffs.max_mean: float,scverse,scanpy,1.10.1,,,,,,,,,_Cutoffs,,,max_mean: float,,,,,max_mean,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"[classmethod] _Cutoffs.validate(
        cls,
        *,
        n_top_genes: int | None,
        min_disp: float,
        max_disp: float,
        min_mean: float,
        max_mean: float,
    ) -> _Cutoffs | int",class_method,,,,"Class method: [classmethod] _Cutoffs.validate(
        cls,
        *,
        n_top_genes: int | None,
        min_disp: float,
        max_disp: float,
        min_mean: float,
        max_mean: float,
    ) -> _Cutoffs | int",scverse,scanpy,1.10.1,,,,,,,,,_Cutoffs,validate,"(
        cls,
        *,
        n_top_genes: int | None,
        min_disp: float,
        max_disp: float,
        min_mean: float,
        max_mean: float,
    )",,,_Cutoffs | int,classmethod,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_Cutoffs.in_bounds(
        self,
        mean: NDArray[np.floating] | DaskArray,
        dispersion_norm: NDArray[np.floating] | DaskArray,
    ) -> NDArray[np.bool_] | DaskArray",class_method,,,,"Class method: _Cutoffs.in_bounds(
        self,
        mean: NDArray[np.floating] | DaskArray,
        dispersion_norm: NDArray[np.floating] | DaskArray,
    ) -> NDArray[np.bool_] | DaskArray",scverse,scanpy,1.10.1,,,,,,,,,_Cutoffs,in_bounds,"(
        self,
        mean: NDArray[np.floating] | DaskArray,
        dispersion_norm: NDArray[np.floating] | DaskArray,
    )",,,NDArray[np.bool_] | DaskArray,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,_Cutoffs,class,,,,Class: _Cutoffs,scverse,scanpy,1.10.1,,,,,,,,,_Cutoffs,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_highly_variable_genes_seurat_v3(
    adata: AnnData,
    *,
    flavor: str = ""seurat_v3"",
    layer: str | None = None,
    n_top_genes: int = 2000,
    batch_key: str | None = None,
    check_values: bool = True,
    span: float = 0.3,
    subset: bool = False,
    inplace: bool = True,
) -> pd.DataFrame | None",function,_highly_variable_genes_seurat_v3,"(
    adata: AnnData,
    *,
    flavor: str = ""seurat_v3"",
    layer: str | None = None,
    n_top_genes: int = 2000,
    batch_key: str | None = None,
    check_values: bool = True,
    span: float = 0.3,
    subset: bool = False,
    inplace: bool = True,
)",pd.DataFrame | None,"Function: _highly_variable_genes_seurat_v3(
    adata: AnnData,
    *,
    flavor: str = ""seurat_v3"",
    layer: str | None = None,
    n_top_genes: int = 2000,
    batch_key: str | None = None,
    check_values: bool = True,
    span: float = 0.3,
    subset: bool = False,
    inplace: bool = True,
) -> pd.DataFrame | None",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_highly_variable_genes_single_batch(
    adata: AnnData,
    *,
    layer: str | None = None,
    cutoff: _Cutoffs | int,
    n_bins: int = 20,
    flavor: Literal[""seurat"", ""cell_ranger""] = ""seurat"",
) -> pd.DataFrame",function,_highly_variable_genes_single_batch,"(
    adata: AnnData,
    *,
    layer: str | None = None,
    cutoff: _Cutoffs | int,
    n_bins: int = 20,
    flavor: Literal[""seurat"", ""cell_ranger""] = ""seurat"",
)",pd.DataFrame,"Function: _highly_variable_genes_single_batch(
    adata: AnnData,
    *,
    layer: str | None = None,
    cutoff: _Cutoffs | int,
    n_bins: int = 20,
    flavor: Literal[""seurat"", ""cell_ranger""] = ""seurat"",
) -> pd.DataFrame",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_get_mean_bins(
    means: pd.Series, flavor: Literal[""seurat"", ""cell_ranger""], n_bins: int
) -> pd.Series",function,_get_mean_bins,"(
    means: pd.Series, flavor: Literal[""seurat"", ""cell_ranger""], n_bins: int
)",pd.Series,"Function: _get_mean_bins(
    means: pd.Series, flavor: Literal[""seurat"", ""cell_ranger""], n_bins: int
) -> pd.Series",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_get_disp_stats(
    df: pd.DataFrame, flavor: Literal[""seurat"", ""cell_ranger""]
) -> pd.DataFrame",function,_get_disp_stats,"(
    df: pd.DataFrame, flavor: Literal[""seurat"", ""cell_ranger""]
)",pd.DataFrame,"Function: _get_disp_stats(
    df: pd.DataFrame, flavor: Literal[""seurat"", ""cell_ranger""]
) -> pd.DataFrame",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_postprocess_dispersions_seurat(
    disp_bin_stats: pd.DataFrame, mean_bin: pd.Series
) -> None",function,_postprocess_dispersions_seurat,"(
    disp_bin_stats: pd.DataFrame, mean_bin: pd.Series
)",None,"Function: _postprocess_dispersions_seurat(
    disp_bin_stats: pd.DataFrame, mean_bin: pd.Series
) -> None",scverse,scanpy,1.10.1,,,,,,,,"# retrieve those genes that have nan std, these are the ones where",,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_postprocess_dispersions_seurat(
    disp_bin_stats: pd.DataFrame, mean_bin: pd.Series
) -> None",function,_postprocess_dispersions_seurat,"(
    disp_bin_stats: pd.DataFrame, mean_bin: pd.Series
)",None,"Function: _postprocess_dispersions_seurat(
    disp_bin_stats: pd.DataFrame, mean_bin: pd.Series
) -> None",scverse,scanpy,1.10.1,,,,,,,,"# only a single gene fell in the bin and implicitly set them to have",,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_postprocess_dispersions_seurat(
    disp_bin_stats: pd.DataFrame, mean_bin: pd.Series
) -> None",function,_postprocess_dispersions_seurat,"(
    disp_bin_stats: pd.DataFrame, mean_bin: pd.Series
)",None,"Function: _postprocess_dispersions_seurat(
    disp_bin_stats: pd.DataFrame, mean_bin: pd.Series
) -> None",scverse,scanpy,1.10.1,,,,,,,,"# a normalized disperion of 1",,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,_mad(a),function,_mad,(a),,Function: _mad(a),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_subset_genes(
    adata: AnnData,
    *,
    mean: NDArray[np.float64] | DaskArray,
    dispersion_norm: NDArray[np.float64] | DaskArray,
    cutoff: _Cutoffs | int,
) -> NDArray[np.bool_] | DaskArray",function,_subset_genes,"(
    adata: AnnData,
    *,
    mean: NDArray[np.float64] | DaskArray,
    dispersion_norm: NDArray[np.float64] | DaskArray,
    cutoff: _Cutoffs | int,
)",NDArray[np.bool_] | DaskArray,"Function: _subset_genes(
    adata: AnnData,
    *,
    mean: NDArray[np.float64] | DaskArray,
    dispersion_norm: NDArray[np.float64] | DaskArray,
    cutoff: _Cutoffs | int,
) -> NDArray[np.bool_] | DaskArray",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_nth_highest(x: NDArray[np.float64] | DaskArray, n: int) -> float | DaskArray",function,_nth_highest,"(x: NDArray[np.float64] | DaskArray, n: int)",float | DaskArray,"Function: _nth_highest(x: NDArray[np.float64] | DaskArray, n: int) -> float | DaskArray",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_highly_variable_genes_batched(
    adata: AnnData,
    batch_key: str,
    *,
    layer: str | None,
    n_bins: int,
    flavor: Literal[""seurat"", ""cell_ranger""],
    cutoff: _Cutoffs | int,
) -> pd.DataFrame",function,_highly_variable_genes_batched,"(
    adata: AnnData,
    batch_key: str,
    *,
    layer: str | None,
    n_bins: int,
    flavor: Literal[""seurat"", ""cell_ranger""],
    cutoff: _Cutoffs | int,
)",pd.DataFrame,"Function: _highly_variable_genes_batched(
    adata: AnnData,
    batch_key: str,
    *,
    layer: str | None,
    n_bins: int,
    flavor: Literal[""seurat"", ""cell_ranger""],
    cutoff: _Cutoffs | int,
) -> pd.DataFrame",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,dataclass from dataclasses,import,,,,Import: dataclass from dataclasses,scverse,scanpy,1.10.1,from dataclasses import dataclass,dataclass,dataclasses,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,signature from inspect,import,,,,Import: signature from inspect,scverse,scanpy,1.10.1,from inspect import signature,signature,inspect,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, cast",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, cast",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,cast from typing,import,,,,Import: cast from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, cast",cast,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,scipy.sparse,import,,,,Import: scipy.sparse,scverse,scanpy,1.10.1,import scipy.sparse as sp_sparse,scipy.sparse,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
,_highly_variable_genes.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_highly_variable_genes.py,python,,,,,,Directory: scanpy\preprocessing\_highly_variable_genes.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,"_normalize_data(X, counts, after=None, copy: bool = False)",function,_normalize_data,"(X, counts, after=None, copy: bool = False)",,"Function: _normalize_data(X, counts, after=None, copy: bool = False)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,truediv from operator,import,,,,Import: truediv from operator,scverse,scanpy,1.10.1,from operator import truediv,truediv,operator,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,warn from warnings,import,,,,Import: warn from warnings,scverse,scanpy,1.10.1,from warnings import warn,warn,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import issparse,issparse,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
,_normalization.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_normalization.py,python,,,,,,Directory: scanpy\preprocessing\_normalization.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,"_handle_mask_var(
    adata: AnnData,
    mask_var: NDArray[np.bool_] | str | Empty | None,
    use_highly_variable: bool | None,
) -> tuple[np.ndarray | str | None, np.ndarray | None]",function,_handle_mask_var,"(
    adata: AnnData,
    mask_var: NDArray[np.bool_] | str | Empty | None,
    use_highly_variable: bool | None,
)","tuple[np.ndarray | str | None, np.ndarray | None]","Function: _handle_mask_var(
    adata: AnnData,
    mask_var: NDArray[np.bool_] | str | Empty | None,
    use_highly_variable: bool | None,
) -> tuple[np.ndarray | str | None, np.ndarray | None]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,"_pca_with_sparse(X, npcs, solver=""arpack"", mu=None, random_state=None)",function,_pca_with_sparse,"(X, npcs, solver=""arpack"", mu=None, random_state=None)",,"Function: _pca_with_sparse(X, npcs, solver=""arpack"", mu=None, random_state=None)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,"_handle_dask_ml_args(svd_solver: str, method: str) -> str",function,_handle_dask_ml_args,"(svd_solver: str, method: str)",str,"Function: _handle_dask_ml_args(svd_solver: str, method: str) -> str",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,"_handle_sklearn_args(svd_solver: str, method: str) -> str",function,_handle_sklearn_args,"(svd_solver: str, method: str)",str,"Function: _handle_sklearn_args(svd_solver: str, method: str) -> str",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,"_handle_x_args(lib, svd_solver, method, method2args, method2default)",function,_handle_x_args,"(lib, svd_solver, method, method2args, method2default)",,"Function: _handle_x_args(lib, svd_solver, method, method2args, method2default)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,warn from warnings,import,,,,Import: warn from warnings,scverse,scanpy,1.10.1,from warnings import warn,warn,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,anndata,import,,,,Import: anndata,scverse,scanpy,1.10.1,import anndata as ad,anndata,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,version,packaging,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import issparse, spmatrix",issparse,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,spmatrix from scipy.sparse,local_import,,,,Import: spmatrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import issparse, spmatrix",spmatrix,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,LinearOperator from scipy.sparse.linalg,local_import,,,,Import: LinearOperator from scipy.sparse.linalg,scverse,scanpy,1.10.1,"from scipy.sparse.linalg import LinearOperator, svds",LinearOperator,scipy.sparse.linalg,scipy.sparse.linalg,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,svds from scipy.sparse.linalg,local_import,,,,Import: svds from scipy.sparse.linalg,scverse,scanpy,1.10.1,"from scipy.sparse.linalg import LinearOperator, svds",svds,scipy.sparse.linalg,scipy.sparse.linalg,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,check_array from sklearn.utils,local_import,,,,Import: check_array from sklearn.utils,scverse,scanpy,1.10.1,"from sklearn.utils import check_array, check_random_state",check_array,sklearn.utils,sklearn.utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,check_random_state from sklearn.utils,local_import,,,,Import: check_random_state from sklearn.utils,scverse,scanpy,1.10.1,"from sklearn.utils import check_array, check_random_state",check_random_state,sklearn.utils,sklearn.utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,svd_flip from sklearn.utils.extmath,local_import,,,,Import: svd_flip from sklearn.utils.extmath,scverse,scanpy,1.10.1,from sklearn.utils.extmath import svd_flip,svd_flip,sklearn.utils.extmath,sklearn.utils.extmath,,,,,,,,,,,,,,
,_pca.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_pca.py,python,,,,,,Directory: scanpy\preprocessing\_pca.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,"_choose_mtx_rep(adata, use_raw: bool = False, layer: str | None = None)",function,_choose_mtx_rep,"(adata, use_raw: bool = False, layer: str | None = None)",,"Function: _choose_mtx_rep(adata, use_raw: bool = False, layer: str | None = None)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,"top_proportions(mtx: np.ndarray | spmatrix, n: int)",function,top_proportions,"(mtx: np.ndarray | spmatrix, n: int)",,"Function: top_proportions(mtx: np.ndarray | spmatrix, n: int)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,"top_proportions_dense(mtx, n)",function,top_proportions_dense,"(mtx, n)",,"Function: top_proportions_dense(mtx, n)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,"top_proportions_sparse_csr(data, indptr, n)",function,top_proportions_sparse_csr,"(data, indptr, n)",,"Function: top_proportions_sparse_csr(data, indptr, n)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,"top_segment_proportions(
    mtx: np.ndarray | spmatrix, ns: Collection[int]
) -> np.ndarray",function,top_segment_proportions,"(
    mtx: np.ndarray | spmatrix, ns: Collection[int]
)",np.ndarray,"Function: top_segment_proportions(
    mtx: np.ndarray | spmatrix, ns: Collection[int]
) -> np.ndarray",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,"top_segment_proportions_dense(
    mtx: np.ndarray | spmatrix, ns: Collection[int]
) -> np.ndarray",function,top_segment_proportions_dense,"(
    mtx: np.ndarray | spmatrix, ns: Collection[int]
)",np.ndarray,"Function: top_segment_proportions_dense(
    mtx: np.ndarray | spmatrix, ns: Collection[int]
) -> np.ndarray",scverse,scanpy,1.10.1,,,,,,,,"# Currently ns is considered to be 1 indexed",,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,warn from warnings,import,,,,Import: warn from warnings,scverse,scanpy,1.10.1,from warnings import warn,warn,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,numba,import,,,,Import: numba,scverse,scanpy,1.10.1,import numba,numba,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse, isspmatrix_coo, isspmatrix_csr, spmatrix",csr_matrix,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse, isspmatrix_coo, isspmatrix_csr, spmatrix",issparse,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,isspmatrix_coo from scipy.sparse,local_import,,,,Import: isspmatrix_coo from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse, isspmatrix_coo, isspmatrix_csr, spmatrix",isspmatrix_coo,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,isspmatrix_csr from scipy.sparse,local_import,,,,Import: isspmatrix_csr from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse, isspmatrix_coo, isspmatrix_csr, spmatrix",isspmatrix_csr,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,spmatrix from scipy.sparse,local_import,,,,Import: spmatrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse, isspmatrix_coo, isspmatrix_csr, spmatrix",spmatrix,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,mean_variance_axis from sklearn.utils.sparsefuncs,local_import,,,,Import: mean_variance_axis from sklearn.utils.sparsefuncs,scverse,scanpy,1.10.1,from sklearn.utils.sparsefuncs import mean_variance_axis,mean_variance_axis,sklearn.utils.sparsefuncs,sklearn.utils.sparsefuncs,,,,,,,,,,,,,,
,_qc.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_qc.py,python,,,,,,Directory: scanpy\preprocessing\_qc.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
,_recipes.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_recipes.py,python,,,,,,Directory: scanpy\preprocessing\_recipes.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scale.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scale.py,python,singledispatch from functools,import,,,,Import: singledispatch from functools,scverse,scanpy,1.10.1,from functools import singledispatch,singledispatch,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scale.py,python,truediv from operator,import,,,,Import: truediv from operator,scverse,scanpy,1.10.1,from operator import truediv,truediv,operator,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scale.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scale.py,python,numba,import,,,,Import: numba,scverse,scanpy,1.10.1,import numba,numba,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scale.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scale.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scale.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import issparse, isspmatrix_csc, spmatrix",issparse,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scale.py,python,isspmatrix_csc from scipy.sparse,local_import,,,,Import: isspmatrix_csc from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import issparse, isspmatrix_csc, spmatrix",isspmatrix_csc,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scale.py,python,spmatrix from scipy.sparse,local_import,,,,Import: spmatrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import issparse, isspmatrix_csc, spmatrix",spmatrix,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
,_scale.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_scale.py,python,,,,,,Directory: scanpy\preprocessing\_scale.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,"normalize_per_cell(  # noqa: PLR0917
    data: AnnData | np.ndarray | spmatrix,
    counts_per_cell_after: float | None = None,
    counts_per_cell: np.ndarray | None = None,
    key_n_counts: str = ""n_counts"",
    copy: bool = False,
    layers: Literal[""all""] | Iterable[str] = (),
    use_rep: Literal[""after"", ""X""] | None = None,
    min_counts: int = 1,
) -> AnnData | np.ndarray | spmatrix | None",function,normalize_per_cell,"(  # noqa: PLR0917
    data: AnnData | np.ndarray | spmatrix,
    counts_per_cell_after: float | None = None,
    counts_per_cell: np.ndarray | None = None,
    key_n_counts: str = ""n_counts"",
    copy: bool = False,
    layers: Literal[""all""] | Iterable[str] = (),
    use_rep: Literal[""after"", ""X""] | None = None,
    min_counts: int = 1,
)",AnnData | np.ndarray | spmatrix | None,"Function: normalize_per_cell(  # noqa: PLR0917
    data: AnnData | np.ndarray | spmatrix,
    counts_per_cell_after: float | None = None,
    counts_per_cell: np.ndarray | None = None,
    key_n_counts: str = ""n_counts"",
    copy: bool = False,
    layers: Literal[""all""] | Iterable[str] = (),
    use_rep: Literal[""after"", ""X""] | None = None,
    min_counts: int = 1,
) -> AnnData | np.ndarray | spmatrix | None",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,_regress_out_chunk(data),function,_regress_out_chunk,(data),,Function: _regress_out_chunk(data),scverse,scanpy,1.10.1,,,,,,,,"# data is a tuple containing the selected columns from adata.X",,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,_regress_out_chunk(data),function,_regress_out_chunk,(data),,Function: _regress_out_chunk(data),scverse,scanpy,1.10.1,,,,,,,,"# and the regressors dataFrame",,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,"_downsample_per_cell(X, counts_per_cell, random_state, replace)",function,_downsample_per_cell,"(X, counts_per_cell, random_state, replace)",,"Function: _downsample_per_cell(X, counts_per_cell, random_state, replace)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,"_downsample_total_counts(X, total_counts, random_state, replace)",function,_downsample_total_counts,"(X, total_counts, random_state, replace)",,"Function: _downsample_total_counts(X, total_counts, random_state, replace)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,"_pca_fallback(data, n_comps=2)",function,_pca_fallback,"(data, n_comps=2)",,"Function: _pca_fallback(data, n_comps=2)",scverse,scanpy,1.10.1,,,,,,,,"# mean center the data",,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,singledispatch from functools,import,,,,Import: singledispatch from functools,scverse,scanpy,1.10.1,from functools import singledispatch,singledispatch,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,numba,import,,,,Import: numba,scverse,scanpy,1.10.1,import numba,numba,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,scipy,import,,,,Import: scipy,scverse,scanpy,1.10.1,import scipy as sp,scipy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,CategoricalDtype from pandas.api.types,local_import,,,,Import: CategoricalDtype from pandas.api.types,scverse,scanpy,1.10.1,from pandas.api.types import CategoricalDtype,CategoricalDtype,pandas.api.types,pandas.api.types,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse, isspmatrix_csr, spmatrix",csr_matrix,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse, isspmatrix_csr, spmatrix",issparse,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,isspmatrix_csr from scipy.sparse,local_import,,,,Import: isspmatrix_csr from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse, isspmatrix_csr, spmatrix",isspmatrix_csr,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,spmatrix from scipy.sparse,local_import,,,,Import: spmatrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse, isspmatrix_csr, spmatrix",spmatrix,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,check_array from sklearn.utils,local_import,,,,Import: check_array from sklearn.utils,scverse,scanpy,1.10.1,"from sklearn.utils import check_array, sparsefuncs",check_array,sklearn.utils,sklearn.utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,sparsefuncs from sklearn.utils,local_import,,,,Import: sparsefuncs from sklearn.utils,scverse,scanpy,1.10.1,"from sklearn.utils import check_array, sparsefuncs",sparsefuncs,sklearn.utils,sklearn.utils,,,,,,,,,,,,,,
,_simple.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_simple.py,python,,,,,,Directory: scanpy\preprocessing\_simple.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_get_mean_var(
    X: _SupportedArray, *, axis: Literal[0, 1] = 0
) -> tuple[NDArray[np.float64], NDArray[np.float64]]",function,_get_mean_var,"(
    X: _SupportedArray, *, axis: Literal[0, 1] = 0
)","tuple[NDArray[np.float64], NDArray[np.float64]]","Function: _get_mean_var(
    X: _SupportedArray, *, axis: Literal[0, 1] = 0
) -> tuple[NDArray[np.float64], NDArray[np.float64]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"sparse_mean_variance_axis(mtx: sparse.spmatrix, axis: int)",function,sparse_mean_variance_axis,"(mtx: sparse.spmatrix, axis: int)",,"Function: sparse_mean_variance_axis(mtx: sparse.spmatrix, axis: int)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"sample_comb(
    dims: tuple[int, ...],
    nsamp: int,
    *,
    random_state: AnyRandom = None,
    method: Literal[
        ""auto"", ""tracking_selection"", ""reservoir_sampling"", ""pool""
    ] = ""auto"",
) -> NDArray[np.int64]",function,sample_comb,"(
    dims: tuple[int, ...],
    nsamp: int,
    *,
    random_state: AnyRandom = None,
    method: Literal[
        ""auto"", ""tracking_selection"", ""reservoir_sampling"", ""pool""
    ] = ""auto"",
)",NDArray[np.int64],"Function: sample_comb(
    dims: tuple[int, ...],
    nsamp: int,
    *,
    random_state: AnyRandom = None,
    method: Literal[
        ""auto"", ""tracking_selection"", ""reservoir_sampling"", ""pool""
    ] = ""auto"",
) -> NDArray[np.int64]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,singledispatch from functools,import,,,,Import: singledispatch from functools,scverse,scanpy,1.10.1,from functools import singledispatch,singledispatch,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,numba,import,,,,Import: numba,scverse,scanpy,1.10.1,import numba,numba,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,sample_without_replacement from sklearn.random_projection,local_import,,,,Import: sample_without_replacement from sklearn.random_projection,scverse,scanpy,1.10.1,from sklearn.random_projection import sample_without_replacement,sample_without_replacement,sklearn.random_projection,sklearn.random_projection,,,,,,,,,,,,,,
,_utils.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_utils.py,python,,,,,,Directory: scanpy\preprocessing\_utils.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""neighbors"",
    ""combat"",
    ""filter_genes_dispersion"",
    ""highly_variable_genes"",
    ""normalize_total"",
    ""pca"",
    ""calculate_qc_metrics"",
    ""recipe_seurat"",
    ""recipe_weinreb17"",
    ""recipe_zheng17"",
    ""scrublet"",
    ""scrublet_simulate_doublets"",
    ""downsample_counts"",
    ""filter_cells"",
    ""filter_genes"",
    ""log1p"",
    ""normalize_per_cell"",
    ""regress_out"",
    ""scale"",
    ""sqrt"",
    ""subsample"",
]",constant,,,,"Constant: __all__ = [
    ""neighbors"",
    ""combat"",
    ""filter_genes_dispersion"",
    ""highly_variable_genes"",
    ""normalize_total"",
    ""pca"",
    ""calculate_qc_metrics"",
    ""recipe_seurat"",
    ""recipe_weinreb17"",
    ""recipe_zheng17"",
    ""scrublet"",
    ""scrublet_simulate_doublets"",
    ""downsample_counts"",
    ""filter_cells"",
    ""filter_genes"",
    ""log1p"",
    ""normalize_per_cell"",
    ""regress_out"",
    ""scale"",
    ""sqrt"",
    ""subsample"",
]",scverse,scanpy,1.10.1,,,,,"__all__ = [
    ""neighbors"",
    ""combat"",
    ""filter_genes_dispersion"",
    ""highly_variable_genes"",
    ""normalize_total"",
    ""pca"",
    ""calculate_qc_metrics"",
    ""recipe_seurat"",
    ""recipe_weinreb17"",
    ""recipe_zheng17"",
    ""scrublet"",
    ""scrublet_simulate_doublets"",
    ""downsample_counts"",
    ""filter_cells"",
    ""filter_genes"",
    ""log1p"",
    ""normalize_per_cell"",
    ""regress_out"",
    ""scale"",
    ""sqrt"",
    ""subsample"",
]",__all__,"[
    ""neighbors"",
    ""combat"",
    ""filter_genes_dispersion"",
    ""highly_variable_genes"",
    ""normalize_total"",
    ""pca"",
    ""calculate_qc_metrics"",
    ""recipe_seurat"",
    ""recipe_weinreb17"",
    ""recipe_zheng17"",
    ""scrublet"",
    ""scrublet_simulate_doublets"",
    ""downsample_counts"",
    ""filter_cells"",
    ""filter_genes"",
    ""log1p"",
    ""normalize_per_cell"",
    ""regress_out"",
    ""scale"",
    ""sqrt"",
    ""subsample"",
]",,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\preprocessing\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,"filter_genes_dispersion(  # noqa: PLR0917
    data: AnnData | spmatrix | np.ndarray,
    flavor: Literal[""seurat"", ""cell_ranger""] = ""seurat"",
    min_disp: float | None = None,
    max_disp: float | None = None,
    min_mean: float | None = None,
    max_mean: float | None = None,
    n_bins: int = 20,
    n_top_genes: int | None = None,
    log: bool = True,
    subset: bool = True,
    copy: bool = False,
) -> AnnData | np.recarray | None",function,filter_genes_dispersion,"(  # noqa: PLR0917
    data: AnnData | spmatrix | np.ndarray,
    flavor: Literal[""seurat"", ""cell_ranger""] = ""seurat"",
    min_disp: float | None = None,
    max_disp: float | None = None,
    min_mean: float | None = None,
    max_mean: float | None = None,
    n_bins: int = 20,
    n_top_genes: int | None = None,
    log: bool = True,
    subset: bool = True,
    copy: bool = False,
)",AnnData | np.recarray | None,"Function: filter_genes_dispersion(  # noqa: PLR0917
    data: AnnData | spmatrix | np.ndarray,
    flavor: Literal[""seurat"", ""cell_ranger""] = ""seurat"",
    min_disp: float | None = None,
    max_disp: float | None = None,
    min_mean: float | None = None,
    max_mean: float | None = None,
    n_bins: int = 20,
    n_top_genes: int | None = None,
    log: bool = True,
    subset: bool = True,
    copy: bool = False,
) -> AnnData | np.recarray | None",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,"filter_genes_cv_deprecated(X, Ecutoff, cvFilter)",function,filter_genes_cv_deprecated,"(X, Ecutoff, cvFilter)",,"Function: filter_genes_cv_deprecated(X, Ecutoff, cvFilter)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,"filter_genes_fano_deprecated(X, Ecutoff, Vcutoff)",function,filter_genes_fano_deprecated,"(X, Ecutoff, Vcutoff)",,"Function: filter_genes_fano_deprecated(X, Ecutoff, Vcutoff)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,"_filter_genes(X, e_cutoff, v_cutoff, meth)",function,_filter_genes,"(X, e_cutoff, v_cutoff, meth)",,"Function: _filter_genes(X, e_cutoff, v_cutoff, meth)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import issparse,issparse,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
,highly_variable_genes.py,python,,,,,,File: scanpy\preprocessing\_deprecated,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,highly_variable_genes.py,python,,,,,,Directory: scanpy\preprocessing\_deprecated\highly_variable_genes.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"normalize_per_cell_weinreb16_deprecated(
    X: np.ndarray,
    max_fraction: float = 1,
    mult_with_mean: bool = False,
) -> np.ndarray",function,normalize_per_cell_weinreb16_deprecated,"(
    X: np.ndarray,
    max_fraction: float = 1,
    mult_with_mean: bool = False,
)",np.ndarray,"Function: normalize_per_cell_weinreb16_deprecated(
    X: np.ndarray,
    max_fraction: float = 1,
    mult_with_mean: bool = False,
) -> np.ndarray",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,zscore_deprecated(X: np.ndarray) -> np.ndarray,function,zscore_deprecated,(X: np.ndarray),np.ndarray,Function: zscore_deprecated(X: np.ndarray) -> np.ndarray,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse",csr_matrix,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse",issparse,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\preprocessing\_deprecated,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\preprocessing\_deprecated\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,"Scrublet.counts_obs: InitVar[sparse.csr_matrix | sparse.csc_matrix | NDArray[np.integer]] = (
        field(**kw_only(False))
    )",class_field,,,,"Class field: Scrublet.counts_obs: InitVar[sparse.csr_matrix | sparse.csc_matrix | NDArray[np.integer]] = (
        field(**kw_only(False))
    )",scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,"counts_obs: InitVar[sparse.csr_matrix | sparse.csc_matrix | NDArray[np.integer]] = (
        field(**kw_only(False))
    )",,,,,counts_obs,"(
        field(**kw_only(False))
    )"
scverse_scanpy_1.10.1,core.py,python,Scrublet.total_counts_obs: InitVar[NDArray[np.integer] | None] = None,class_field,,,,Class field: Scrublet.total_counts_obs: InitVar[NDArray[np.integer] | None] = None,scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,total_counts_obs: InitVar[NDArray[np.integer] | None] = None,,,,,total_counts_obs,None
scverse_scanpy_1.10.1,core.py,python,Scrublet.sim_doublet_ratio: float = 2.0,class_field,,,,Class field: Scrublet.sim_doublet_ratio: float = 2.0,scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,sim_doublet_ratio: float = 2.0,,,,,sim_doublet_ratio,2.0
scverse_scanpy_1.10.1,core.py,python,Scrublet.n_neighbors: InitVar[int | None] = None,class_field,,,,Class field: Scrublet.n_neighbors: InitVar[int | None] = None,scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,n_neighbors: InitVar[int | None] = None,,,,,n_neighbors,None
scverse_scanpy_1.10.1,core.py,python,Scrublet.expected_doublet_rate: float = 0.1,class_field,,,,Class field: Scrublet.expected_doublet_rate: float = 0.1,scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,expected_doublet_rate: float = 0.1,,,,,expected_doublet_rate,0.1
scverse_scanpy_1.10.1,core.py,python,Scrublet.stdev_doublet_rate: float = 0.02,class_field,,,,Class field: Scrublet.stdev_doublet_rate: float = 0.02,scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,stdev_doublet_rate: float = 0.02,,,,,stdev_doublet_rate,0.02
scverse_scanpy_1.10.1,core.py,python,Scrublet.random_state: InitVar[AnyRandom] = 0,class_field,,,,Class field: Scrublet.random_state: InitVar[AnyRandom] = 0,scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,random_state: InitVar[AnyRandom] = 0,,,,,random_state,0
scverse_scanpy_1.10.1,core.py,python,"Scrublet._n_neighbors: int = field(init=False, repr=False)",class_field,,,,"Class field: Scrublet._n_neighbors: int = field(init=False, repr=False)",scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,"_n_neighbors: int = field(init=False, repr=False)",,,,,_n_neighbors,"field(init=False, repr=False)"
scverse_scanpy_1.10.1,core.py,python,"Scrublet._random_state: RandomState = field(init=False, repr=False)",class_field,,,,"Class field: Scrublet._random_state: RandomState = field(init=False, repr=False)",scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,"_random_state: RandomState = field(init=False, repr=False)",,,,,_random_state,"field(init=False, repr=False)"
scverse_scanpy_1.10.1,core.py,python,"Scrublet._counts_obs: sparse.csc_matrix = field(init=False, repr=False)",class_field,,,,"Class field: Scrublet._counts_obs: sparse.csc_matrix = field(init=False, repr=False)",scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,"_counts_obs: sparse.csc_matrix = field(init=False, repr=False)",,,,,_counts_obs,"field(init=False, repr=False)"
scverse_scanpy_1.10.1,core.py,python,"Scrublet._total_counts_obs: NDArray[np.integer] = field(init=False, repr=False)",class_field,,,,"Class field: Scrublet._total_counts_obs: NDArray[np.integer] = field(init=False, repr=False)",scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,"_total_counts_obs: NDArray[np.integer] = field(init=False, repr=False)",,,,,_total_counts_obs,"field(init=False, repr=False)"
scverse_scanpy_1.10.1,core.py,python,"Scrublet._counts_obs_norm: sparse.csr_matrix | sparse.csc_matrix = field(
        init=False, repr=False
    )",class_field,,,,"Class field: Scrublet._counts_obs_norm: sparse.csr_matrix | sparse.csc_matrix = field(
        init=False, repr=False
    )",scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,"_counts_obs_norm: sparse.csr_matrix | sparse.csc_matrix = field(
        init=False, repr=False
    )",,,,,_counts_obs_norm,"field(
        init=False, repr=False
    )"
scverse_scanpy_1.10.1,core.py,python,"Scrublet._counts_sim: sparse.csr_matrix | sparse.csc_matrix = field(init=False, repr=False)",class_field,,,,"Class field: Scrublet._counts_sim: sparse.csr_matrix | sparse.csc_matrix = field(init=False, repr=False)",scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,"_counts_sim: sparse.csr_matrix | sparse.csc_matrix = field(init=False, repr=False)",,,,,_counts_sim,"field(init=False, repr=False)"
scverse_scanpy_1.10.1,core.py,python,"Scrublet._total_counts_sim: NDArray[np.integer] = field(init=False, repr=False)",class_field,,,,"Class field: Scrublet._total_counts_sim: NDArray[np.integer] = field(init=False, repr=False)",scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,"_total_counts_sim: NDArray[np.integer] = field(init=False, repr=False)",,,,,_total_counts_sim,"field(init=False, repr=False)"
scverse_scanpy_1.10.1,core.py,python,"Scrublet._counts_sim_norm: sparse.csr_matrix | sparse.csc_matrix | None = field(
        default=None, init=False, repr=False
    )",class_field,,,,"Class field: Scrublet._counts_sim_norm: sparse.csr_matrix | sparse.csc_matrix | None = field(
        default=None, init=False, repr=False
    )",scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,"_counts_sim_norm: sparse.csr_matrix | sparse.csc_matrix | None = field(
        default=None, init=False, repr=False
    )",,,,,_counts_sim_norm,"field(
        default=None, init=False, repr=False
    )"
scverse_scanpy_1.10.1,core.py,python,Scrublet.predicted_doublets_: NDArray[np.bool_] | None = field(init=False),class_field,,,,Class field: Scrublet.predicted_doublets_: NDArray[np.bool_] | None = field(init=False),scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,predicted_doublets_: NDArray[np.bool_] | None = field(init=False),,,,,predicted_doublets_,field(init=False)
scverse_scanpy_1.10.1,core.py,python,Scrublet.doublet_scores_obs_: NDArray[np.float64] = field(init=False),class_field,,,,Class field: Scrublet.doublet_scores_obs_: NDArray[np.float64] = field(init=False),scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,doublet_scores_obs_: NDArray[np.float64] = field(init=False),,,,,doublet_scores_obs_,field(init=False)
scverse_scanpy_1.10.1,core.py,python,Scrublet.doublet_scores_sim_: NDArray[np.float64] = field(init=False),class_field,,,,Class field: Scrublet.doublet_scores_sim_: NDArray[np.float64] = field(init=False),scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,doublet_scores_sim_: NDArray[np.float64] = field(init=False),,,,,doublet_scores_sim_,field(init=False)
scverse_scanpy_1.10.1,core.py,python,Scrublet.doublet_errors_obs_: NDArray[np.float64] = field(init=False),class_field,,,,Class field: Scrublet.doublet_errors_obs_: NDArray[np.float64] = field(init=False),scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,doublet_errors_obs_: NDArray[np.float64] = field(init=False),,,,,doublet_errors_obs_,field(init=False)
scverse_scanpy_1.10.1,core.py,python,Scrublet.doublet_errors_sim_: NDArray[np.float64] = field(init=False),class_field,,,,Class field: Scrublet.doublet_errors_sim_: NDArray[np.float64] = field(init=False),scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,doublet_errors_sim_: NDArray[np.float64] = field(init=False),,,,,doublet_errors_sim_,field(init=False)
scverse_scanpy_1.10.1,core.py,python,Scrublet.threshold_: float = field(init=False),class_field,,,,Class field: Scrublet.threshold_: float = field(init=False),scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,threshold_: float = field(init=False),,,,,threshold_,field(init=False)
scverse_scanpy_1.10.1,core.py,python,Scrublet.z_scores_: NDArray[np.float64] = field(init=False),class_field,,,,Class field: Scrublet.z_scores_: NDArray[np.float64] = field(init=False),scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,z_scores_: NDArray[np.float64] = field(init=False),,,,,z_scores_,field(init=False)
scverse_scanpy_1.10.1,core.py,python,Scrublet.detected_doublet_rate_: float = field(init=False),class_field,,,,Class field: Scrublet.detected_doublet_rate_: float = field(init=False),scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,detected_doublet_rate_: float = field(init=False),,,,,detected_doublet_rate_,field(init=False)
scverse_scanpy_1.10.1,core.py,python,Scrublet.detectable_doublet_fraction_: float = field(init=False),class_field,,,,Class field: Scrublet.detectable_doublet_fraction_: float = field(init=False),scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,detectable_doublet_fraction_: float = field(init=False),,,,,detectable_doublet_fraction_,field(init=False)
scverse_scanpy_1.10.1,core.py,python,Scrublet.overall_doublet_rate_: float = field(init=False),class_field,,,,Class field: Scrublet.overall_doublet_rate_: float = field(init=False),scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,overall_doublet_rate_: float = field(init=False),,,,,overall_doublet_rate_,field(init=False)
scverse_scanpy_1.10.1,core.py,python,Scrublet.manifold_obs_: NDArray[np.float64] = field(init=False),class_field,,,,Class field: Scrublet.manifold_obs_: NDArray[np.float64] = field(init=False),scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,manifold_obs_: NDArray[np.float64] = field(init=False),,,,,manifold_obs_,field(init=False)
scverse_scanpy_1.10.1,core.py,python,Scrublet.manifold_sim_: NDArray[np.float64] = field(init=False),class_field,,,,Class field: Scrublet.manifold_sim_: NDArray[np.float64] = field(init=False),scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,manifold_sim_: NDArray[np.float64] = field(init=False),,,,,manifold_sim_,field(init=False)
scverse_scanpy_1.10.1,core.py,python,Scrublet.doublet_parents_: NDArray[np.intp] = field(init=False),class_field,,,,Class field: Scrublet.doublet_parents_: NDArray[np.intp] = field(init=False),scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,doublet_parents_: NDArray[np.intp] = field(init=False),,,,,doublet_parents_,field(init=False)
scverse_scanpy_1.10.1,core.py,python,Scrublet.doublet_neighbor_parents_: list[NDArray[np.intp]] = field(init=False),class_field,,,,Class field: Scrublet.doublet_neighbor_parents_: list[NDArray[np.intp]] = field(init=False),scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,doublet_neighbor_parents_: list[NDArray[np.intp]] = field(init=False),,,,,doublet_neighbor_parents_,field(init=False)
scverse_scanpy_1.10.1,core.py,python,"Scrublet.__post_init__(
        self,
        counts_obs: sparse.csr_matrix | sparse.csc_matrix | NDArray[np.integer],
        total_counts_obs: NDArray[np.integer] | None,
        n_neighbors: int | None,
        random_state: AnyRandom,
    ) -> None",class_method,,,,"Class method: Scrublet.__post_init__(
        self,
        counts_obs: sparse.csr_matrix | sparse.csc_matrix | NDArray[np.integer],
        total_counts_obs: NDArray[np.integer] | None,
        n_neighbors: int | None,
        random_state: AnyRandom,
    ) -> None",scverse,scanpy,1.10.1,,,,,,,,,Scrublet,__post_init__,"(
        self,
        counts_obs: sparse.csr_matrix | sparse.csc_matrix | NDArray[np.integer],
        total_counts_obs: NDArray[np.integer] | None,
        n_neighbors: int | None,
        random_state: AnyRandom,
    )",,,None,,,,
scverse_scanpy_1.10.1,core.py,python,"Scrublet.simulate_doublets(
        self,
        *,
        sim_doublet_ratio: float | None = None,
        synthetic_doublet_umi_subsampling: float = 1.0,
    ) -> None",class_method,,,,"Class method: Scrublet.simulate_doublets(
        self,
        *,
        sim_doublet_ratio: float | None = None,
        synthetic_doublet_umi_subsampling: float = 1.0,
    ) -> None",scverse,scanpy,1.10.1,,,,,,,,,Scrublet,simulate_doublets,"(
        self,
        *,
        sim_doublet_ratio: float | None = None,
        synthetic_doublet_umi_subsampling: float = 1.0,
    )",,,None,,,,
scverse_scanpy_1.10.1,core.py,python,"Scrublet.set_manifold(
        self, manifold_obs: NDArray[np.float64], manifold_sim: NDArray[np.float64]
    ) -> None",class_method,,,,"Class method: Scrublet.set_manifold(
        self, manifold_obs: NDArray[np.float64], manifold_sim: NDArray[np.float64]
    ) -> None",scverse,scanpy,1.10.1,,,,,,,,,Scrublet,set_manifold,"(
        self, manifold_obs: NDArray[np.float64], manifold_sim: NDArray[np.float64]
    )",,,None,,,,
scverse_scanpy_1.10.1,core.py,python,"Scrublet.calculate_doublet_scores(
        self,
        use_approx_neighbors: bool = True,
        distance_metric: _Metric | _MetricFn = ""euclidean"",
        get_doublet_neighbor_parents: bool = False,
    ) -> NDArray[np.float64]",class_method,,,,"Class method: Scrublet.calculate_doublet_scores(
        self,
        use_approx_neighbors: bool = True,
        distance_metric: _Metric | _MetricFn = ""euclidean"",
        get_doublet_neighbor_parents: bool = False,
    ) -> NDArray[np.float64]",scverse,scanpy,1.10.1,,,,,,,,,Scrublet,calculate_doublet_scores,"(
        self,
        use_approx_neighbors: bool = True,
        distance_metric: _Metric | _MetricFn = ""euclidean"",
        get_doublet_neighbor_parents: bool = False,
    )",,,NDArray[np.float64],,,,
scverse_scanpy_1.10.1,core.py,python,"Scrublet._nearest_neighbor_classifier(
        self,
        k: int = 40,
        *,
        use_approx_nn: bool = True,
        distance_metric: _Metric | _MetricFn = ""euclidean"",
        exp_doub_rate: float = 0.1,
        stdev_doub_rate: float = 0.03,
        get_neighbor_parents: bool = False,
    ) -> None",class_method,,,,"Class method: Scrublet._nearest_neighbor_classifier(
        self,
        k: int = 40,
        *,
        use_approx_nn: bool = True,
        distance_metric: _Metric | _MetricFn = ""euclidean"",
        exp_doub_rate: float = 0.1,
        stdev_doub_rate: float = 0.03,
        get_neighbor_parents: bool = False,
    ) -> None",scverse,scanpy,1.10.1,,,,,,,,,Scrublet,_nearest_neighbor_classifier,"(
        self,
        k: int = 40,
        *,
        use_approx_nn: bool = True,
        distance_metric: _Metric | _MetricFn = ""euclidean"",
        exp_doub_rate: float = 0.1,
        stdev_doub_rate: float = 0.03,
        get_neighbor_parents: bool = False,
    )",,,None,,,,
scverse_scanpy_1.10.1,core.py,python,"Scrublet.call_doublets(
        self, *, threshold: float | None = None, verbose: bool = True
    ) -> NDArray[np.bool_] | None",class_method,,,,"Class method: Scrublet.call_doublets(
        self, *, threshold: float | None = None, verbose: bool = True
    ) -> NDArray[np.bool_] | None",scverse,scanpy,1.10.1,,,,,,,,,Scrublet,call_doublets,"(
        self, *, threshold: float | None = None, verbose: bool = True
    )",,,NDArray[np.bool_] | None,,,,
scverse_scanpy_1.10.1,core.py,python,Scrublet,class,,,,Class: Scrublet,scverse,scanpy,1.10.1,,,,,,,,,Scrublet,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,"__all__ = [""Scrublet""]",constant,,,,"Constant: __all__ = [""Scrublet""]",scverse,scanpy,1.10.1,,,,,"__all__ = [""Scrublet""]",__all__,"[""Scrublet""]",,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,sys,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,InitVar from dataclasses,import,,,,Import: InitVar from dataclasses,scverse,scanpy,1.10.1,"from dataclasses import InitVar, dataclass, field",InitVar,dataclasses,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,dataclass from dataclasses,import,,,,Import: dataclass from dataclasses,scverse,scanpy,1.10.1,"from dataclasses import InitVar, dataclass, field",dataclass,dataclasses,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,field from dataclasses,import,,,,Import: field from dataclasses,scverse,scanpy,1.10.1,"from dataclasses import InitVar, dataclass, field",field,dataclasses,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, cast",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,cast from typing,import,,,,Import: cast from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, cast",cast,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,"from anndata import AnnData, concat",AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,concat from anndata,import,,,,Import: concat from anndata,scverse,scanpy,1.10.1,"from anndata import AnnData, concat",concat,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,
,core.py,python,,,,,,File: scanpy\preprocessing\_scrublet,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,core.py,python,,,,,,Directory: scanpy\preprocessing\_scrublet\core.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pipeline.py,python,mean_center(self: Scrublet) -> None,function,mean_center,(self: Scrublet),None,Function: mean_center(self: Scrublet) -> None,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pipeline.py,python,normalize_variance(self: Scrublet) -> None,function,normalize_variance,(self: Scrublet),None,Function: normalize_variance(self: Scrublet) -> None,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pipeline.py,python,zscore(self: Scrublet) -> None,function,zscore,(self: Scrublet),None,Function: zscore(self: Scrublet) -> None,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pipeline.py,python,"truncated_svd(
    self: Scrublet,
    n_prin_comps: int = 30,
    *,
    random_state: AnyRandom = 0,
    algorithm: Literal[""arpack"", ""randomized""] = ""arpack"",
) -> None",function,truncated_svd,"(
    self: Scrublet,
    n_prin_comps: int = 30,
    *,
    random_state: AnyRandom = 0,
    algorithm: Literal[""arpack"", ""randomized""] = ""arpack"",
)",None,"Function: truncated_svd(
    self: Scrublet,
    n_prin_comps: int = 30,
    *,
    random_state: AnyRandom = 0,
    algorithm: Literal[""arpack"", ""randomized""] = ""arpack"",
) -> None",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pipeline.py,python,"pca(
    self: Scrublet,
    n_prin_comps: int = 50,
    *,
    random_state: AnyRandom = 0,
    svd_solver: Literal[""auto"", ""full"", ""arpack"", ""randomized""] = ""arpack"",
) -> None",function,pca,"(
    self: Scrublet,
    n_prin_comps: int = 50,
    *,
    random_state: AnyRandom = 0,
    svd_solver: Literal[""auto"", ""full"", ""arpack"", ""randomized""] = ""arpack"",
)",None,"Function: pca(
    self: Scrublet,
    n_prin_comps: int = 50,
    *,
    random_state: AnyRandom = 0,
    svd_solver: Literal[""auto"", ""full"", ""arpack"", ""randomized""] = ""arpack"",
) -> None",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pipeline.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pipeline.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pipeline.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pipeline.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,
,pipeline.py,python,,,,,,File: scanpy\preprocessing\_scrublet,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,pipeline.py,python,,,,,,Directory: scanpy\preprocessing\_scrublet\pipeline.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,sparse_utils.py,python,"sparse_var(
    E: sparse.csr_matrix | sparse.csc_matrix,
    *,
    axis: Literal[0, 1],
) -> NDArray[np.float64]",function,sparse_var,"(
    E: sparse.csr_matrix | sparse.csc_matrix,
    *,
    axis: Literal[0, 1],
)",NDArray[np.float64],"Function: sparse_var(
    E: sparse.csr_matrix | sparse.csc_matrix,
    *,
    axis: Literal[0, 1],
) -> NDArray[np.float64]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,sparse_utils.py,python,"sparse_multiply(
    E: sparse.csr_matrix | sparse.csc_matrix | NDArray[np.float64],
    a: float | int | NDArray[np.float64],
) -> sparse.csr_matrix | sparse.csc_matrix",function,sparse_multiply,"(
    E: sparse.csr_matrix | sparse.csc_matrix | NDArray[np.float64],
    a: float | int | NDArray[np.float64],
)",sparse.csr_matrix | sparse.csc_matrix,"Function: sparse_multiply(
    E: sparse.csr_matrix | sparse.csc_matrix | NDArray[np.float64],
    a: float | int | NDArray[np.float64],
) -> sparse.csr_matrix | sparse.csc_matrix",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,sparse_utils.py,python,"sparse_zscore(
    E: sparse.csr_matrix | sparse.csc_matrix,
    *,
    gene_mean: NDArray[np.float64] | None = None,
    gene_stdev: NDArray[np.float64] | None = None,
) -> sparse.csr_matrix | sparse.csc_matrix",function,sparse_zscore,"(
    E: sparse.csr_matrix | sparse.csc_matrix,
    *,
    gene_mean: NDArray[np.float64] | None = None,
    gene_stdev: NDArray[np.float64] | None = None,
)",sparse.csr_matrix | sparse.csc_matrix,"Function: sparse_zscore(
    E: sparse.csr_matrix | sparse.csc_matrix,
    *,
    gene_mean: NDArray[np.float64] | None = None,
    gene_stdev: NDArray[np.float64] | None = None,
) -> sparse.csr_matrix | sparse.csc_matrix",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,sparse_utils.py,python,"subsample_counts(
    E: sparse.csr_matrix | sparse.csc_matrix,
    *,
    rate: float,
    original_totals,
    random_seed: AnyRandom = 0,
) -> tuple[sparse.csr_matrix | sparse.csc_matrix, NDArray[np.int64]]",function,subsample_counts,"(
    E: sparse.csr_matrix | sparse.csc_matrix,
    *,
    rate: float,
    original_totals,
    random_seed: AnyRandom = 0,
)","tuple[sparse.csr_matrix | sparse.csc_matrix, NDArray[np.int64]]","Function: subsample_counts(
    E: sparse.csr_matrix | sparse.csc_matrix,
    *,
    rate: float,
    original_totals,
    random_seed: AnyRandom = 0,
) -> tuple[sparse.csr_matrix | sparse.csc_matrix, NDArray[np.int64]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,sparse_utils.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,sparse_utils.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,sparse_utils.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,sparse_utils.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,
,sparse_utils.py,python,,,,,,File: scanpy\preprocessing\_scrublet,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,sparse_utils.py,python,,,,,,Directory: scanpy\preprocessing\_scrublet\sparse_utils.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_scrublet_call_doublets(
    adata_obs: AnnData,
    adata_sim: AnnData,
    *,
    n_neighbors: int | None = None,
    expected_doublet_rate: float = 0.05,
    stdev_doublet_rate: float = 0.02,
    mean_center: bool = True,
    normalize_variance: bool = True,
    n_prin_comps: int = 30,
    use_approx_neighbors: bool = True,
    knn_dist_metric: _Metric | _MetricFn = ""euclidean"",
    get_doublet_neighbor_parents: bool = False,
    threshold: float | None = None,
    random_state: AnyRandom = 0,
    verbose: bool = True,
) -> AnnData",function,_scrublet_call_doublets,"(
    adata_obs: AnnData,
    adata_sim: AnnData,
    *,
    n_neighbors: int | None = None,
    expected_doublet_rate: float = 0.05,
    stdev_doublet_rate: float = 0.02,
    mean_center: bool = True,
    normalize_variance: bool = True,
    n_prin_comps: int = 30,
    use_approx_neighbors: bool = True,
    knn_dist_metric: _Metric | _MetricFn = ""euclidean"",
    get_doublet_neighbor_parents: bool = False,
    threshold: float | None = None,
    random_state: AnyRandom = 0,
    verbose: bool = True,
)",AnnData,"Function: _scrublet_call_doublets(
    adata_obs: AnnData,
    adata_sim: AnnData,
    *,
    n_neighbors: int | None = None,
    expected_doublet_rate: float = 0.05,
    stdev_doublet_rate: float = 0.02,
    mean_center: bool = True,
    normalize_variance: bool = True,
    n_prin_comps: int = 30,
    use_approx_neighbors: bool = True,
    knn_dist_metric: _Metric | _MetricFn = ""euclidean"",
    get_doublet_neighbor_parents: bool = False,
    threshold: float | None = None,
    random_state: AnyRandom = 0,
    verbose: bool = True,
) -> AnnData",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\preprocessing\_scrublet,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\preprocessing\_scrublet\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_queries.py,python,"_doc_org = """"""\
org
    Organism to query. Must be an organism in ensembl biomart. ""hsapiens"",
    ""mmusculus"", ""drerio"", etc.\
""""""",constant,,,,"Constant: _doc_org = """"""\
org
    Organism to query. Must be an organism in ensembl biomart. ""hsapiens"",
    ""mmusculus"", ""drerio"", etc.\
""""""",scverse,scanpy,1.10.1,,,,,"_doc_org = """"""\
org
    Organism to query. Must be an organism in ensembl biomart. ""hsapiens"",
    ""mmusculus"", ""drerio"", etc.\
""""""",_doc_org,"""""""\
org
    Organism to query. Must be an organism in ensembl biomart. ""hsapiens"",
    ""mmusculus"", ""drerio"", etc.\
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_queries.py,python,"_doc_host = """"""\
host
    A valid BioMart host URL. Alternative values include archive urls (like
    ""grch37.ensembl.org"") or regional mirrors (like ""useast.ensembl.org"").\
""""""",constant,,,,"Constant: _doc_host = """"""\
host
    A valid BioMart host URL. Alternative values include archive urls (like
    ""grch37.ensembl.org"") or regional mirrors (like ""useast.ensembl.org"").\
""""""",scverse,scanpy,1.10.1,,,,,"_doc_host = """"""\
host
    A valid BioMart host URL. Alternative values include archive urls (like
    ""grch37.ensembl.org"") or regional mirrors (like ""useast.ensembl.org"").\
""""""",_doc_host,"""""""\
host
    A valid BioMart host URL. Alternative values include archive urls (like
    ""grch37.ensembl.org"") or regional mirrors (like ""useast.ensembl.org"").\
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_queries.py,python,"_doc_use_cache = """"""\
use_cache
    Whether pybiomart should use a cache for requests. Will create a
    `.pybiomart.sqlite` file in current directory if used.\
""""""",constant,,,,"Constant: _doc_use_cache = """"""\
use_cache
    Whether pybiomart should use a cache for requests. Will create a
    `.pybiomart.sqlite` file in current directory if used.\
""""""",scverse,scanpy,1.10.1,,,,,"_doc_use_cache = """"""\
use_cache
    Whether pybiomart should use a cache for requests. Will create a
    `.pybiomart.sqlite` file in current directory if used.\
""""""",_doc_use_cache,"""""""\
use_cache
    Whether pybiomart should use a cache for requests. Will create a
    `.pybiomart.sqlite` file in current directory if used.\
""""""",,,,,,,,,,,
scverse_scanpy_1.10.1,_queries.py,python,collections.abc,import,,,,Import: collections.abc,scverse,scanpy,1.10.1,import collections.abc as cabc,collections.abc,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_queries.py,python,singledispatch from functools,import,,,,Import: singledispatch from functools,scverse,scanpy,1.10.1,from functools import singledispatch,singledispatch,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_queries.py,python,MappingProxyType from types,import,,,,Import: MappingProxyType from types,scverse,scanpy,1.10.1,from types import MappingProxyType,MappingProxyType,types,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_queries.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_queries.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",Any,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_queries.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
,_queries.py,python,,,,,,File: scanpy\queries,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_queries.py,python,,,,,,Directory: scanpy\queries\_queries.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""biomart_annotations"",
    ""enrich"",
    ""gene_coordinates"",
    ""mitochondrial_genes"",
]",constant,,,,"Constant: __all__ = [
    ""biomart_annotations"",
    ""enrich"",
    ""gene_coordinates"",
    ""mitochondrial_genes"",
]",scverse,scanpy,1.10.1,,,,,"__all__ = [
    ""biomart_annotations"",
    ""enrich"",
    ""gene_coordinates"",
    ""mitochondrial_genes"",
]",__all__,"[
    ""biomart_annotations"",
    ""enrich"",
    ""gene_coordinates"",
    ""mitochondrial_genes"",
]",,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\queries,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\queries\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\sim_models,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\sim_models\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_doctests.py,python,"doctest_needs(mod: str) -> Callable[[F], F]",function,doctest_needs,(mod: str),"Callable[[F], F]","Function: doctest_needs(mod: str) -> Callable[[F], F]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_doctests.py,python,"doctest_skip(reason: str) -> Callable[[F], F]",function,doctest_skip,(reason: str),"Callable[[F], F]","Function: doctest_skip(reason: str) -> Callable[[F], F]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_doctests.py,python,"F = TypeVar(""F"", bound=Callable)",constant,,,,"Constant: F = TypeVar(""F"", bound=Callable)",scverse,scanpy,1.10.1,,,,,"F = TypeVar(""F"", bound=Callable)",F,"TypeVar(""F"", bound=Callable)",,,,,,,,,,,
scverse_scanpy_1.10.1,_doctests.py,python,TypeVar from typing,import,,,,Import: TypeVar from typing,scverse,scanpy,1.10.1,from typing import TypeVar,TypeVar,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_doctests.py,python,Callable from collections.abc,local_import,,,,Import: Callable from collections.abc,scverse,scanpy,1.10.1,from collections.abc import Callable,Callable,collections.abc,collections.abc,,,,,,,,,,,,,,
,_doctests.py,python,,,,,,File: scanpy\testing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_doctests.py,python,,,,,,Directory: scanpy\testing\_doctests.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\testing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\testing\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,pbmc3k() -> AnnData,function,pbmc3k,(),AnnData,Function: pbmc3k() -> AnnData,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,pbmc3k_processed() -> AnnData,function,pbmc3k_processed,(),AnnData,Function: pbmc3k_processed() -> AnnData,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,pbmc68k_reduced() -> AnnData,function,pbmc68k_reduced,(),AnnData,Function: pbmc68k_reduced() -> AnnData,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,krumsiek11() -> AnnData,function,krumsiek11,(),AnnData,Function: krumsiek11() -> AnnData,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,paul15() -> AnnData,function,paul15,(),AnnData,Function: paul15() -> AnnData,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,pbmc3k_normalized() -> AnnData,function,pbmc3k_normalized,(),AnnData,Function: pbmc3k_normalized() -> AnnData,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,_pbmc3k = cache(sc.datasets.pbmc3k),constant,,,,Constant: _pbmc3k = cache(sc.datasets.pbmc3k),scverse,scanpy,1.10.1,,,,,_pbmc3k = cache(sc.datasets.pbmc3k),_pbmc3k,cache(sc.datasets.pbmc3k),,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,_pbmc3k_processed = cache(sc.datasets.pbmc3k_processed),constant,,,,Constant: _pbmc3k_processed = cache(sc.datasets.pbmc3k_processed),scverse,scanpy,1.10.1,,,,,_pbmc3k_processed = cache(sc.datasets.pbmc3k_processed),_pbmc3k_processed,cache(sc.datasets.pbmc3k_processed),,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,_pbmc68k_reduced = cache(sc.datasets.pbmc68k_reduced),constant,,,,Constant: _pbmc68k_reduced = cache(sc.datasets.pbmc68k_reduced),scverse,scanpy,1.10.1,,,,,_pbmc68k_reduced = cache(sc.datasets.pbmc68k_reduced),_pbmc68k_reduced,cache(sc.datasets.pbmc68k_reduced),,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,_krumsiek11 = cache(sc.datasets.krumsiek11),constant,,,,Constant: _krumsiek11 = cache(sc.datasets.krumsiek11),scverse,scanpy,1.10.1,,,,,_krumsiek11 = cache(sc.datasets.krumsiek11),_krumsiek11,cache(sc.datasets.krumsiek11),,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,_paul15 = cache(sc.datasets.paul15),constant,,,,Constant: _paul15 = cache(sc.datasets.paul15),scverse,scanpy,1.10.1,,,,,_paul15 = cache(sc.datasets.paul15),_paul15,cache(sc.datasets.paul15),,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
,data.py,python,,,,,,File: scanpy\testing\_helpers,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,data.py,python,,,,,,Directory: scanpy\testing\_helpers\data.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"anndata_v0_8_constructor_compat(X, *args, **kwargs)",function,anndata_v0_8_constructor_compat,"(X, *args, **kwargs)",,"Function: anndata_v0_8_constructor_compat(X, *args, **kwargs)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"check_rep_mutation(func, X, *, fields=(""layer"", ""obsm""), **kwargs)",function,check_rep_mutation,"(func, X, *, fields=(""layer"", ""obsm""), **kwargs)",,"Function: check_rep_mutation(func, X, *, fields=(""layer"", ""obsm""), **kwargs)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"check_rep_results(func, X, *, fields=[""layer"", ""obsm""], **kwargs)",function,check_rep_results,"(func, X, *, fields=[""layer"", ""obsm""], **kwargs)",,"Function: check_rep_results(func, X, *, fields=[""layer"", ""obsm""], **kwargs)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_check_check_values_warnings(function, adata, expected_warning, kwargs={})",function,_check_check_values_warnings,"(function, adata, expected_warning, kwargs={})",,"Function: _check_check_values_warnings(function, adata, expected_warning, kwargs={})",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"as_dense_dask_array(*args, **kwargs)",function,as_dense_dask_array,"(*args, **kwargs)",,"Function: as_dense_dask_array(*args, **kwargs)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"as_sparse_dask_array(*args, **kwargs)",function,as_sparse_dask_array,"(*args, **kwargs)",,"Function: as_sparse_dask_array(*args, **kwargs)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,permutations from itertools,import,,,,Import: permutations from itertools,scverse,scanpy,1.10.1,from itertools import permutations,permutations,itertools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,asarray from anndata.tests.helpers,local_import,,,,Import: asarray from anndata.tests.helpers,scverse,scanpy,1.10.1,"from anndata.tests.helpers import asarray, assert_equal",asarray,anndata.tests.helpers,anndata.tests.helpers,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,assert_equal from anndata.tests.helpers,local_import,,,,Import: assert_equal from anndata.tests.helpers,scverse,scanpy,1.10.1,"from anndata.tests.helpers import asarray, assert_equal",assert_equal,anndata.tests.helpers,anndata.tests.helpers,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\testing\_helpers,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\testing\_helpers\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,marks.py,python,"needs._generate_next_value_ = (
        staticmethod(_next_val) if sys.version_info >= (3, 10) else _next_val
    )",class_field,,,,"Class field: needs._generate_next_value_ = (
        staticmethod(_next_val) if sys.version_info >= (3, 10) else _next_val
    )",scverse,scanpy,1.10.1,,,,,,,,,needs,,,"_generate_next_value_ = (
        staticmethod(_next_val) if sys.version_info >= (3, 10) else _next_val
    )",,,,,_generate_next_value_,"(
        staticmethod(_next_val) if sys.version_info >= (3, 10) else _next_val
    )"
scverse_scanpy_1.10.1,marks.py,python,needs.dask = auto(),class_field,,,,Class field: needs.dask = auto(),scverse,scanpy,1.10.1,,,,,,,,,needs,,,dask = auto(),,,,,dask,auto()
scverse_scanpy_1.10.1,marks.py,python,needs.dask_ml = auto(),class_field,,,,Class field: needs.dask_ml = auto(),scverse,scanpy,1.10.1,,,,,,,,,needs,,,dask_ml = auto(),,,,,dask_ml,auto()
scverse_scanpy_1.10.1,marks.py,python,needs.fa2 = auto(),class_field,,,,Class field: needs.fa2 = auto(),scverse,scanpy,1.10.1,,,,,,,,,needs,,,fa2 = auto(),,,,,fa2,auto()
scverse_scanpy_1.10.1,marks.py,python,"needs.gprofiler = ""gprofiler-official""",class_field,,,,"Class field: needs.gprofiler = ""gprofiler-official""",scverse,scanpy,1.10.1,,,,,,,,,needs,,,"gprofiler = ""gprofiler-official""",,,,,gprofiler,"""gprofiler-official"""
scverse_scanpy_1.10.1,marks.py,python,needs.leidenalg = auto(),class_field,,,,Class field: needs.leidenalg = auto(),scverse,scanpy,1.10.1,,,,,,,,,needs,,,leidenalg = auto(),,,,,leidenalg,auto()
scverse_scanpy_1.10.1,marks.py,python,needs.louvain = auto(),class_field,,,,Class field: needs.louvain = auto(),scverse,scanpy,1.10.1,,,,,,,,,needs,,,louvain = auto(),,,,,louvain,auto()
scverse_scanpy_1.10.1,marks.py,python,needs.igraph = auto(),class_field,,,,Class field: needs.igraph = auto(),scverse,scanpy,1.10.1,,,,,,,,,needs,,,igraph = auto(),,,,,igraph,auto()
scverse_scanpy_1.10.1,marks.py,python,needs.pybiomart = auto(),class_field,,,,Class field: needs.pybiomart = auto(),scverse,scanpy,1.10.1,,,,,,,,,needs,,,pybiomart = auto(),,,,,pybiomart,auto()
scverse_scanpy_1.10.1,marks.py,python,"needs.skimage = ""scikit-image""",class_field,,,,"Class field: needs.skimage = ""scikit-image""",scverse,scanpy,1.10.1,,,,,,,,,needs,,,"skimage = ""scikit-image""",,,,,skimage,"""scikit-image"""
scverse_scanpy_1.10.1,marks.py,python,"needs.skmisc = ""scikit-misc""",class_field,,,,"Class field: needs.skmisc = ""scikit-misc""",scverse,scanpy,1.10.1,,,,,,,,,needs,,,"skmisc = ""scikit-misc""",,,,,skmisc,"""scikit-misc"""
scverse_scanpy_1.10.1,marks.py,python,needs.zarr = auto(),class_field,,,,Class field: needs.zarr = auto(),scverse,scanpy,1.10.1,,,,,,,,,needs,,,zarr = auto(),,,,,zarr,auto()
scverse_scanpy_1.10.1,marks.py,python,needs.zappy = auto(),class_field,,,,Class field: needs.zappy = auto(),scverse,scanpy,1.10.1,,,,,,,,,needs,,,zappy = auto(),,,,,zappy,auto()
scverse_scanpy_1.10.1,marks.py,python,needs.bbknn = auto(),class_field,,,,Class field: needs.bbknn = auto(),scverse,scanpy,1.10.1,,,,,,,,,needs,,,bbknn = auto(),,,,,bbknn,auto()
scverse_scanpy_1.10.1,marks.py,python,"needs.harmony = ""harmonyTS""",class_field,,,,"Class field: needs.harmony = ""harmonyTS""",scverse,scanpy,1.10.1,,,,,,,,,needs,,,"harmony = ""harmonyTS""",,,,,harmony,"""harmonyTS"""
scverse_scanpy_1.10.1,marks.py,python,needs.harmonypy = auto(),class_field,,,,Class field: needs.harmonypy = auto(),scverse,scanpy,1.10.1,,,,,,,,,needs,,,harmonypy = auto(),,,,,harmonypy,auto()
scverse_scanpy_1.10.1,marks.py,python,"needs.magic = ""magic-impute""",class_field,,,,"Class field: needs.magic = ""magic-impute""",scverse,scanpy,1.10.1,,,,,,,,,needs,,,"magic = ""magic-impute""",,,,,magic,"""magic-impute"""
scverse_scanpy_1.10.1,marks.py,python,needs.palantir = auto(),class_field,,,,Class field: needs.palantir = auto(),scverse,scanpy,1.10.1,,,,,,,,,needs,,,palantir = auto(),,,,,palantir,auto()
scverse_scanpy_1.10.1,marks.py,python,needs.phate = auto(),class_field,,,,Class field: needs.phate = auto(),scverse,scanpy,1.10.1,,,,,,,,,needs,,,phate = auto(),,,,,phate,auto()
scverse_scanpy_1.10.1,marks.py,python,needs.phenograph = auto(),class_field,,,,Class field: needs.phenograph = auto(),scverse,scanpy,1.10.1,,,,,,,,,needs,,,phenograph = auto(),,,,,phenograph,auto()
scverse_scanpy_1.10.1,marks.py,python,needs.pypairs = auto(),class_field,,,,Class field: needs.pypairs = auto(),scverse,scanpy,1.10.1,,,,,,,,,needs,,,pypairs = auto(),,,,,pypairs,auto()
scverse_scanpy_1.10.1,marks.py,python,"needs.samalg = ""sam-algorithm""",class_field,,,,"Class field: needs.samalg = ""sam-algorithm""",scverse,scanpy,1.10.1,,,,,,,,,needs,,,"samalg = ""sam-algorithm""",,,,,samalg,"""sam-algorithm"""
scverse_scanpy_1.10.1,marks.py,python,needs.scanorama = auto(),class_field,,,,Class field: needs.scanorama = auto(),scverse,scanpy,1.10.1,,,,,,,,,needs,,,scanorama = auto(),,,,,scanorama,auto()
scverse_scanpy_1.10.1,marks.py,python,needs.trimap = auto(),class_field,,,,Class field: needs.trimap = auto(),scverse,scanpy,1.10.1,,,,,,,,,needs,,,trimap = auto(),,,,,trimap,auto()
scverse_scanpy_1.10.1,marks.py,python,"needs.wishbone = ""wishbone-dev""",class_field,,,,"Class field: needs.wishbone = ""wishbone-dev""",scverse,scanpy,1.10.1,,,,,,,,,needs,,,"wishbone = ""wishbone-dev""",,,,,wishbone,"""wishbone-dev"""
scverse_scanpy_1.10.1,marks.py,python,"needs.__init__(self, mod: str) -> None",class_method,,,,"Class method: needs.__init__(self, mod: str) -> None",scverse,scanpy,1.10.1,,,,,,,,,needs,__init__,"(self, mod: str)",,,None,,,,
scverse_scanpy_1.10.1,marks.py,python,"needs(pytest.MarkDecorator, Enum)",class,,,,"Class: needs(pytest.MarkDecorator, Enum)",scverse,scanpy,1.10.1,,,,,,,,,needs,,,,,,,"(pytest.MarkDecorator, Enum)",,
scverse_scanpy_1.10.1,marks.py,python,"_next_val(name: str, start: int, count: int, last_values: list[str]) -> str",function,_next_val,"(name: str, start: int, count: int, last_values: list[str])",str,"Function: _next_val(name: str, start: int, count: int, last_values: list[str]) -> str",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,marks.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,sys,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,marks.py,python,Enum from enum,import,,,,Import: Enum from enum,scverse,scanpy,1.10.1,"from enum import Enum, auto",Enum,enum,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,marks.py,python,auto from enum,import,,,,Import: auto from enum,scverse,scanpy,1.10.1,"from enum import Enum, auto",auto,enum,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,marks.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,marks.py,python,find_spec from importlib.util,local_import,,,,Import: find_spec from importlib.util,scverse,scanpy,1.10.1,from importlib.util import find_spec,find_spec,importlib.util,importlib.util,,,,,,,,,,,,,,
,marks.py,python,,,,,,File: scanpy\testing\_pytest,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,marks.py,python,,,,,,Directory: scanpy\testing\_pytest\marks.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,"param_with(
    at: ParameterSet,
    *,
    marks: Iterable[pytest.Mark | pytest.MarkDecorator] = (),
    id: str | None = None,
) -> ParameterSet",function,param_with,"(
    at: ParameterSet,
    *,
    marks: Iterable[pytest.Mark | pytest.MarkDecorator] = (),
    id: str | None = None,
)",ParameterSet,"Function: param_with(
    at: ParameterSet,
    *,
    marks: Iterable[pytest.Mark | pytest.MarkDecorator] = (),
    id: str | None = None,
) -> ParameterSet",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,"MAP_ARRAY_TYPES: dict[
    tuple[Literal[""mem"", ""dask""], Literal[""dense"", ""sparse""]],
    tuple[ParameterSet, ...],
] = {
    (""mem"", ""dense""): (pytest.param(asarray, id=""numpy_ndarray""),),
    (""mem"", ""sparse""): (
        pytest.param(sparse.csr_matrix, id=""scipy_csr""),
        pytest.param(sparse.csc_matrix, id=""scipy_csc""),
    ),
    (""dask"", ""dense""): (
        pytest.param(
            as_dense_dask_array,
            marks=[needs.dask, pytest.mark.anndata_dask_support],
            id=""dask_array_dense"",
        ),
    ),
    (""dask"", ""sparse""): (
        pytest.param(
            as_sparse_dask_array,
            marks=[needs.dask, pytest.mark.anndata_dask_support],
            id=""dask_array_sparse"",
        ),
        # probably not necessary to also do csc
    ),
}",constant,,,,"Constant: MAP_ARRAY_TYPES: dict[
    tuple[Literal[""mem"", ""dask""], Literal[""dense"", ""sparse""]],
    tuple[ParameterSet, ...],
] = {
    (""mem"", ""dense""): (pytest.param(asarray, id=""numpy_ndarray""),),
    (""mem"", ""sparse""): (
        pytest.param(sparse.csr_matrix, id=""scipy_csr""),
        pytest.param(sparse.csc_matrix, id=""scipy_csc""),
    ),
    (""dask"", ""dense""): (
        pytest.param(
            as_dense_dask_array,
            marks=[needs.dask, pytest.mark.anndata_dask_support],
            id=""dask_array_dense"",
        ),
    ),
    (""dask"", ""sparse""): (
        pytest.param(
            as_sparse_dask_array,
            marks=[needs.dask, pytest.mark.anndata_dask_support],
            id=""dask_array_sparse"",
        ),
        # probably not necessary to also do csc
    ),
}",scverse,scanpy,1.10.1,,,,,"MAP_ARRAY_TYPES: dict[
    tuple[Literal[""mem"", ""dask""], Literal[""dense"", ""sparse""]],
    tuple[ParameterSet, ...],
] = {
    (""mem"", ""dense""): (pytest.param(asarray, id=""numpy_ndarray""),),
    (""mem"", ""sparse""): (
        pytest.param(sparse.csr_matrix, id=""scipy_csr""),
        pytest.param(sparse.csc_matrix, id=""scipy_csc""),
    ),
    (""dask"", ""dense""): (
        pytest.param(
            as_dense_dask_array,
            marks=[needs.dask, pytest.mark.anndata_dask_support],
            id=""dask_array_dense"",
        ),
    ),
    (""dask"", ""sparse""): (
        pytest.param(
            as_sparse_dask_array,
            marks=[needs.dask, pytest.mark.anndata_dask_support],
            id=""dask_array_sparse"",
        ),
        # probably not necessary to also do csc
    ),
}",MAP_ARRAY_TYPES,"{
    (""mem"", ""dense""): (pytest.param(asarray, id=""numpy_ndarray""),),
    (""mem"", ""sparse""): (
        pytest.param(sparse.csr_matrix, id=""scipy_csr""),
        pytest.param(sparse.csc_matrix, id=""scipy_csc""),
    ),
    (""dask"", ""dense""): (
        pytest.param(
            as_dense_dask_array,
            marks=[needs.dask, pytest.mark.anndata_dask_support],
            id=""dask_array_dense"",
        ),
    ),
    (""dask"", ""sparse""): (
        pytest.param(
            as_sparse_dask_array,
            marks=[needs.dask, pytest.mark.anndata_dask_support],
            id=""dask_array_sparse"",
        ),
        # probably not necessary to also do csc
    ),
}",,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,"ARRAY_TYPES_MEM = tuple(
    at for (strg, _), ats in MAP_ARRAY_TYPES.items() if strg == ""mem"" for at in ats
)",constant,,,,"Constant: ARRAY_TYPES_MEM = tuple(
    at for (strg, _), ats in MAP_ARRAY_TYPES.items() if strg == ""mem"" for at in ats
)",scverse,scanpy,1.10.1,,,,,"ARRAY_TYPES_MEM = tuple(
    at for (strg, _), ats in MAP_ARRAY_TYPES.items() if strg == ""mem"" for at in ats
)",ARRAY_TYPES_MEM,"tuple(
    at for (strg, _), ats in MAP_ARRAY_TYPES.items() if strg == ""mem"" for at in ats
)",,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,"ARRAY_TYPES_DASK = tuple(
    at for (strg, _), ats in MAP_ARRAY_TYPES.items() if strg == ""dask"" for at in ats
)",constant,,,,"Constant: ARRAY_TYPES_DASK = tuple(
    at for (strg, _), ats in MAP_ARRAY_TYPES.items() if strg == ""dask"" for at in ats
)",scverse,scanpy,1.10.1,,,,,"ARRAY_TYPES_DASK = tuple(
    at for (strg, _), ats in MAP_ARRAY_TYPES.items() if strg == ""dask"" for at in ats
)",ARRAY_TYPES_DASK,"tuple(
    at for (strg, _), ats in MAP_ARRAY_TYPES.items() if strg == ""dask"" for at in ats
)",,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,"ARRAY_TYPES_DENSE = tuple(
    at for (_, spsty), ats in MAP_ARRAY_TYPES.items() if spsty == ""dense"" for at in ats
)",constant,,,,"Constant: ARRAY_TYPES_DENSE = tuple(
    at for (_, spsty), ats in MAP_ARRAY_TYPES.items() if spsty == ""dense"" for at in ats
)",scverse,scanpy,1.10.1,,,,,"ARRAY_TYPES_DENSE = tuple(
    at for (_, spsty), ats in MAP_ARRAY_TYPES.items() if spsty == ""dense"" for at in ats
)",ARRAY_TYPES_DENSE,"tuple(
    at for (_, spsty), ats in MAP_ARRAY_TYPES.items() if spsty == ""dense"" for at in ats
)",,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,"ARRAY_TYPES_SPARSE = tuple(
    at for (_, spsty), ats in MAP_ARRAY_TYPES.items() if ""sparse"" in spsty for at in ats
)",constant,,,,"Constant: ARRAY_TYPES_SPARSE = tuple(
    at for (_, spsty), ats in MAP_ARRAY_TYPES.items() if ""sparse"" in spsty for at in ats
)",scverse,scanpy,1.10.1,,,,,"ARRAY_TYPES_SPARSE = tuple(
    at for (_, spsty), ats in MAP_ARRAY_TYPES.items() if ""sparse"" in spsty for at in ats
)",ARRAY_TYPES_SPARSE,"tuple(
    at for (_, spsty), ats in MAP_ARRAY_TYPES.items() if ""sparse"" in spsty for at in ats
)",,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,"ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED = tuple(
    (
        param_with(at, marks=[pytest.mark.xfail(reason=""sparse-in-dask not supported"")])
        if attrs[0] == ""dask"" and ""sparse"" in attrs[1]
        else at
    )
    for attrs, ats in MAP_ARRAY_TYPES.items()
    for at in ats
)",constant,,,,"Constant: ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED = tuple(
    (
        param_with(at, marks=[pytest.mark.xfail(reason=""sparse-in-dask not supported"")])
        if attrs[0] == ""dask"" and ""sparse"" in attrs[1]
        else at
    )
    for attrs, ats in MAP_ARRAY_TYPES.items()
    for at in ats
)",scverse,scanpy,1.10.1,,,,,"ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED = tuple(
    (
        param_with(at, marks=[pytest.mark.xfail(reason=""sparse-in-dask not supported"")])
        if attrs[0] == ""dask"" and ""sparse"" in attrs[1]
        else at
    )
    for attrs, ats in MAP_ARRAY_TYPES.items()
    for at in ats
)",ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED,"tuple(
    (
        param_with(at, marks=[pytest.mark.xfail(reason=""sparse-in-dask not supported"")])
        if attrs[0] == ""dask"" and ""sparse"" in attrs[1]
        else at
    )
    for attrs, ats in MAP_ARRAY_TYPES.items()
    for at in ats
)",,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,ARRAY_TYPES = tuple(at for ats in MAP_ARRAY_TYPES.values() for at in ats),constant,,,,Constant: ARRAY_TYPES = tuple(at for ats in MAP_ARRAY_TYPES.values() for at in ats),scverse,scanpy,1.10.1,,,,,ARRAY_TYPES = tuple(at for ats in MAP_ARRAY_TYPES.values() for at in ats),ARRAY_TYPES,tuple(at for ats in MAP_ARRAY_TYPES.values() for at in ats),,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,asarray from anndata.tests.helpers,local_import,,,,Import: asarray from anndata.tests.helpers,scverse,scanpy,1.10.1,from anndata.tests.helpers import asarray,asarray,anndata.tests.helpers,anndata.tests.helpers,,,,,,,,,,,,,,
,params.py,python,,,,,,File: scanpy\testing\_pytest,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,params.py,python,,,,,,Directory: scanpy\testing\_pytest\params.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,pytest_addoption(parser: pytest.Parser) -> None,function,pytest_addoption,(parser: pytest.Parser),None,Function: pytest_addoption(parser: pytest.Parser) -> None,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"pytest_collection_modifyitems(
    config: pytest.Config, items: Iterable[pytest.Item]
) -> None",function,pytest_collection_modifyitems,"(
    config: pytest.Config, items: Iterable[pytest.Item]
)",None,"Function: pytest_collection_modifyitems(
    config: pytest.Config, items: Iterable[pytest.Item]
) -> None",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,_modify_doctests(request: pytest.FixtureRequest) -> None,function,_modify_doctests,(request: pytest.FixtureRequest),None,Function: _modify_doctests(request: pytest.FixtureRequest) -> None,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,pytest_itemcollected(item: pytest.Item) -> None,function,pytest_itemcollected,(item: pytest.Item),None,Function: pytest_itemcollected(item: pytest.Item) -> None,scverse,scanpy,1.10.1,,,,,,,,"# Dask AnnData tests require anndata > 0.10",,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,os,import,,,,Import: os,scverse,scanpy,1.10.1,import os,os,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,sys,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\testing\_pytest,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\testing\_pytest\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,"_prepare_pbmc_testdata(
    adata: AnnData,
    sparsity_func: Callable[
        [np.ndarray | sparse.spmatrix], np.ndarray | sparse.spmatrix
    ],
    dtype: str | np.dtype,
    *,
    small: bool,
) -> AnnData",function,_prepare_pbmc_testdata,"(
    adata: AnnData,
    sparsity_func: Callable[
        [np.ndarray | sparse.spmatrix], np.ndarray | sparse.spmatrix
    ],
    dtype: str | np.dtype,
    *,
    small: bool,
)",AnnData,"Function: _prepare_pbmc_testdata(
    adata: AnnData,
    sparsity_func: Callable[
        [np.ndarray | sparse.spmatrix], np.ndarray | sparse.spmatrix
    ],
    dtype: str | np.dtype,
    *,
    small: bool,
) -> AnnData",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,product from itertools,import,,,,Import: product from itertools,scverse,scanpy,1.10.1,from itertools import product,product,itertools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,
,data.py,python,,,,,,File: scanpy\testing\_pytest\fixtures,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,data.py,python,,,,,,Directory: scanpy\testing\_pytest\fixtures\data.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""float_dtype"",
    ""_doctest_env"",
    ""_pbmc3ks_parametrized_session"",
    ""pbmc3k_parametrized"",
    ""pbmc3k_parametrized_small"",
]",constant,,,,"Constant: __all__ = [
    ""float_dtype"",
    ""_doctest_env"",
    ""_pbmc3ks_parametrized_session"",
    ""pbmc3k_parametrized"",
    ""pbmc3k_parametrized_small"",
]",scverse,scanpy,1.10.1,,,,,"__all__ = [
    ""float_dtype"",
    ""_doctest_env"",
    ""_pbmc3ks_parametrized_session"",
    ""pbmc3k_parametrized"",
    ""pbmc3k_parametrized_small"",
]",__all__,"[
    ""float_dtype"",
    ""_doctest_env"",
    ""_pbmc3ks_parametrized_session"",
    ""pbmc3k_parametrized"",
    ""pbmc3k_parametrized_small"",
]",,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\testing\_pytest\fixtures,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\testing\_pytest\fixtures\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,CompareResult.rms: float,class_field,,,,Class field: CompareResult.rms: float,scverse,scanpy,1.10.1,,,,,,,,,CompareResult,,,rms: float,,,,,rms,
scverse_scanpy_1.10.1,conftest.py,python,CompareResult.expected: str,class_field,,,,Class field: CompareResult.expected: str,scverse,scanpy,1.10.1,,,,,,,,,CompareResult,,,expected: str,,,,,expected,
scverse_scanpy_1.10.1,conftest.py,python,CompareResult.actual: str,class_field,,,,Class field: CompareResult.actual: str,scverse,scanpy,1.10.1,,,,,,,,,CompareResult,,,actual: str,,,,,actual,
scverse_scanpy_1.10.1,conftest.py,python,CompareResult.diff: str,class_field,,,,Class field: CompareResult.diff: str,scverse,scanpy,1.10.1,,,,,,,,,CompareResult,,,diff: str,,,,,diff,
scverse_scanpy_1.10.1,conftest.py,python,CompareResult.tol: int,class_field,,,,Class field: CompareResult.tol: int,scverse,scanpy,1.10.1,,,,,,,,,CompareResult,,,tol: int,,,,,tol,
scverse_scanpy_1.10.1,conftest.py,python,CompareResult(TypedDict),class,,,,Class: CompareResult(TypedDict),scverse,scanpy,1.10.1,,,,,,,,,CompareResult,,,,,,,(TypedDict),,
scverse_scanpy_1.10.1,conftest.py,python,"pytest_plugins = [""scanpy.testing._pytest""]",constant,,,,"Constant: pytest_plugins = [""scanpy.testing._pytest""]",scverse,scanpy,1.10.1,,,,,"pytest_plugins = [""scanpy.testing._pytest""]",pytest_plugins,"[""scanpy.testing._pytest""]",,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,IMPORTED = frozenset(sys.modules.keys()),constant,,,,Constant: IMPORTED = frozenset(sys.modules.keys()),scverse,scanpy,1.10.1,,,,,IMPORTED = frozenset(sys.modules.keys()),IMPORTED,frozenset(sys.modules.keys()),,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,sys,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,dedent from textwrap,import,,,,Import: dedent from textwrap,scverse,scanpy,1.10.1,from textwrap import dedent,dedent,textwrap,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, TypedDict, Union, cast",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,TypedDict from typing,import,,,,Import: TypedDict from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, TypedDict, Union, cast",TypedDict,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,Union from typing,import,,,,Import: Union from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, TypedDict, Union, cast",Union,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,cast from typing,import,,,,Import: cast from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, TypedDict, Union, cast",cast,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as _sc,scanpy,,,,,,,,,,,,,,,,
,conftest.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,conftest.py,python,,,,,,Directory: scanpy\tests\conftest.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,"gen_adata(data_key, dim, df_base, df_groupby, X)",function,gen_adata,"(data_key, dim, df_base, df_groupby, X)",,"Function: gen_adata(data_key, dim, df_base, df_groupby, X)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,test_aggregate_entry(),function,test_aggregate_entry,(),,Function: test_aggregate_entry(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,test_aggregate_incorrect_dim(),function,test_aggregate_incorrect_dim,(),,Function: test_aggregate_incorrect_dim(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,test_aggregate_obsm_varm(),function,test_aggregate_obsm_varm,(),,Function: test_aggregate_obsm_varm(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,test_aggregate_obsm_labels(),function,test_aggregate_obsm_labels,(),,Function: test_aggregate_obsm_labels(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,test_dispatch_not_implemented(),function,test_dispatch_not_implemented,(),,Function: test_dispatch_not_implemented(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,test_factors(),function,test_factors,(),,Function: test_factors(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,anndata,import,,,,Import: anndata,scverse,scanpy,1.10.1,import anndata as ad,anndata,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,Version from packaging.version,local_import,,,,Import: Version from packaging.version,scverse,scanpy,1.10.1,from packaging.version import Version,Version,packaging.version,packaging.version,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,_resolve_axis from scanpy._utils,local_import,,,,Import: _resolve_axis from scanpy._utils,scverse,scanpy,1.10.1,from scanpy._utils import _resolve_axis,_resolve_axis,scanpy._utils,scanpy._utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,assert_equal from scanpy.testing._helpers,local_import,,,,Import: assert_equal from scanpy.testing._helpers,scverse,scanpy,1.10.1,from scanpy.testing._helpers import assert_equal,assert_equal,scanpy.testing._helpers,scanpy.testing._helpers,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,pbmc3k_processed from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k_processed from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc3k_processed,pbmc3k_processed,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,ARRAY_TYPES_MEM from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES_MEM from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,from scanpy.testing._pytest.params import ARRAY_TYPES_MEM,ARRAY_TYPES_MEM,scanpy.testing._pytest.params,scanpy.testing._pytest.params,,,,,,,,,,,,,,
,test_aggregated.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_aggregated.py,python,,,,,,Directory: scanpy\tests\test_aggregated.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,test_builtin_settings(capsys: CaptureFixture),function,test_builtin_settings,(capsys: CaptureFixture),,Function: test_builtin_settings(capsys: CaptureFixture),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,"test_help_output(set_path: None, capsys: CaptureFixture)",function,test_help_output,"(set_path: None, capsys: CaptureFixture)",,"Function: test_help_output(set_path: None, capsys: CaptureFixture)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,test_external(set_path: None),function,test_external,(set_path: None),,Function: test_external(set_path: None),scverse,scanpy,1.10.1,,,,,,,,"# We need to capture the output manually, since subprocesses don’t write to sys.stderr",,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,test_error_wrong_command(capsys: CaptureFixture),function,test_error_wrong_command,(capsys: CaptureFixture),,Function: test_error_wrong_command(capsys: CaptureFixture),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,HERE = Path(__file__).parent,constant,,,,Constant: HERE = Path(__file__).parent,scverse,scanpy,1.10.1,,,,,HERE = Path(__file__).parent,HERE,Path(__file__).parent,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,os,import,,,,Import: os,scverse,scanpy,1.10.1,import os,os,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,re,import,,,,Import: re,scverse,scanpy,1.10.1,import re,re,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,PIPE from subprocess,import,,,,Import: PIPE from subprocess,scverse,scanpy,1.10.1,from subprocess import PIPE,PIPE,subprocess,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,main from scanpy.cli,local_import,,,,Import: main from scanpy.cli,scverse,scanpy,1.10.1,from scanpy.cli import main,main,scanpy.cli,scanpy.cli,,,,,,,,,,,,,,
,test_binary.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_binary.py,python,,,,,,Directory: scanpy\tests\test_binary.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_clustering.py,python,"FLAVORS = [
    pytest.param(""igraph"", marks=needs.igraph),
    pytest.param(""leidenalg"", marks=needs.leidenalg),
]",constant,,,,"Constant: FLAVORS = [
    pytest.param(""igraph"", marks=needs.igraph),
    pytest.param(""leidenalg"", marks=needs.leidenalg),
]",scverse,scanpy,1.10.1,,,,,"FLAVORS = [
    pytest.param(""igraph"", marks=needs.igraph),
    pytest.param(""leidenalg"", marks=needs.leidenalg),
]",FLAVORS,"[
    pytest.param(""igraph"", marks=needs.igraph),
    pytest.param(""leidenalg"", marks=needs.leidenalg),
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_clustering.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_clustering.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_clustering.py,python,normalized_mutual_info_score from sklearn.metrics.cluster,local_import,,,,Import: normalized_mutual_info_score from sklearn.metrics.cluster,scverse,scanpy,1.10.1,from sklearn.metrics.cluster import normalized_mutual_info_score,normalized_mutual_info_score,sklearn.metrics.cluster,sklearn.metrics.cluster,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_clustering.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,pbmc68k_reduced,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_clustering.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,needs,scanpy.testing._pytest.marks,scanpy.testing._pytest.marks,,,,,,,,,,,,,,
,test_clustering.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_clustering.py,python,,,,,,Directory: scanpy\tests\test_clustering.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,test_norm(),function,test_norm,(),,Function: test_norm(),scverse,scanpy,1.10.1,,,,,,,,"# this test trivially checks whether mean normalisation worked",,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,test_norm(),function,test_norm,(),,Function: test_norm(),scverse,scanpy,1.10.1,,,,,,,,"# load in data",,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,test_covariates(),function,test_covariates,(),,Function: test_covariates(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,test_combat_obs_names(),function,test_combat_obs_names,(),,Function: test_combat_obs_names(),scverse,scanpy,1.10.1,,,,,,,,"# Test for fix to #1170",,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,test_silhouette(),function,test_silhouette,(),,Function: test_silhouette(),scverse,scanpy,1.10.1,,,,,,,,"# this test checks wether combat can align data from several gaussians",,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,test_silhouette(),function,test_silhouette,(),,Function: test_silhouette(),scverse,scanpy,1.10.1,,,,,,,,"# it checks this by computing the silhouette coefficient in a pca embedding",,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,test_silhouette(),function,test_silhouette,(),,Function: test_silhouette(),scverse,scanpy,1.10.1,,,,,,,,"# load in data",,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,assert_equal from anndata.tests.helpers,local_import,,,,Import: assert_equal from anndata.tests.helpers,scverse,scanpy,1.10.1,from anndata.tests.helpers import assert_equal,assert_equal,anndata.tests.helpers,anndata.tests.helpers,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,silhouette_score from sklearn.metrics,local_import,,,,Import: silhouette_score from sklearn.metrics,scverse,scanpy,1.10.1,from sklearn.metrics import silhouette_score,silhouette_score,sklearn.metrics,sklearn.metrics,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,_design_matrix from scanpy.preprocessing._combat,local_import,,,,Import: _design_matrix from scanpy.preprocessing._combat,scverse,scanpy,1.10.1,"from scanpy.preprocessing._combat import _design_matrix, _standardize_data",_design_matrix,scanpy.preprocessing._combat,scanpy.preprocessing._combat,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,_standardize_data from scanpy.preprocessing._combat,local_import,,,,Import: _standardize_data from scanpy.preprocessing._combat,scverse,scanpy,1.10.1,"from scanpy.preprocessing._combat import _design_matrix, _standardize_data",_standardize_data,scanpy.preprocessing._combat,scanpy.preprocessing._combat,,,,,,,,,,,,,,
,test_combat.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_combat.py,python,,,,,,Directory: scanpy\tests\test_combat.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,test_krumsiek11(tmp_dataset_dir),function,test_krumsiek11,(tmp_dataset_dir),,Function: test_krumsiek11(tmp_dataset_dir),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,test_blobs(),function,test_blobs,(),,Function: test_blobs(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,test_toggleswitch(),function,test_toggleswitch,(),,Function: test_toggleswitch(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,test_pbmc68k_reduced(),function,test_pbmc68k_reduced,(),,Function: test_pbmc68k_reduced(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,test_download_failure(),function,test_download_failure,(),,Function: test_download_failure(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,subprocess,import,,,,Import: subprocess,scverse,scanpy,1.10.1,import subprocess,subprocess,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,assert_adata_equal from anndata.tests.helpers,local_import,,,,Import: assert_adata_equal from anndata.tests.helpers,scverse,scanpy,1.10.1,from anndata.tests.helpers import assert_adata_equal,assert_adata_equal,anndata.tests.helpers,anndata.tests.helpers,,,,,,,,,,,,,,
,test_datasets.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_datasets.py,python,,,,,,Directory: scanpy\tests\test_datasets.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,test_dendrogram_cor(),function,test_dendrogram_cor,(),,Function: test_dendrogram_cor(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,n_neighbors = 5,constant,,,,Constant: n_neighbors = 5,scverse,scanpy,1.10.1,,,,,n_neighbors = 5,n_neighbors,5,,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,"key = ""test""",constant,,,,"Constant: key = ""test""",scverse,scanpy,1.10.1,,,,,"key = ""test""",key,"""test""",,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,"REP_PCA_0 = [
    *(1.50808525e00, -1.67258829e-01, -7.12063432e-01, -2.07935140e-01),
    *(-3.55730444e-01, -2.24421427e-01, -1.46907698e-02, -7.01090470e-02),
    *(-1.31467551e-01, -3.75757217e-02, -1.07698059e-02, -4.37555499e-02),
    *(1.06897885e-02, 1.10454357e-03, -5.37674241e-02, -4.94170748e-03),
    *(1.11988001e-02, -4.48330259e-03, -2.56892946e-02, -3.50749046e-02),
    *(-3.15931924e-02, 2.84416862e-02, -3.70664597e-02, -2.38820408e-02),
    *(-4.57040370e-02, 2.99325008e-02, 9.56365839e-03, -4.28026691e-02),
    *(5.36734704e-03, -3.08445804e-02, -1.16719725e-02, -2.35078149e-02),
    *(2.87542702e-04, -1.70532353e-02, -1.79676879e-02, -3.09410989e-02),
    *(-1.09178647e-02, -1.60753895e-02, -1.04769412e-02, -1.36501975e-02),
    *(-6.83976896e-03, -1.17562497e-02, -4.65345643e-02, 1.91588048e-02),
    *(-1.38043752e-02, 4.75460896e-03, -1.41307563e-02, -1.03387292e-02),
    *(-1.68043356e-02, 1.33516011e-03),
]",constant,,,,"Constant: REP_PCA_0 = [
    *(1.50808525e00, -1.67258829e-01, -7.12063432e-01, -2.07935140e-01),
    *(-3.55730444e-01, -2.24421427e-01, -1.46907698e-02, -7.01090470e-02),
    *(-1.31467551e-01, -3.75757217e-02, -1.07698059e-02, -4.37555499e-02),
    *(1.06897885e-02, 1.10454357e-03, -5.37674241e-02, -4.94170748e-03),
    *(1.11988001e-02, -4.48330259e-03, -2.56892946e-02, -3.50749046e-02),
    *(-3.15931924e-02, 2.84416862e-02, -3.70664597e-02, -2.38820408e-02),
    *(-4.57040370e-02, 2.99325008e-02, 9.56365839e-03, -4.28026691e-02),
    *(5.36734704e-03, -3.08445804e-02, -1.16719725e-02, -2.35078149e-02),
    *(2.87542702e-04, -1.70532353e-02, -1.79676879e-02, -3.09410989e-02),
    *(-1.09178647e-02, -1.60753895e-02, -1.04769412e-02, -1.36501975e-02),
    *(-6.83976896e-03, -1.17562497e-02, -4.65345643e-02, 1.91588048e-02),
    *(-1.38043752e-02, 4.75460896e-03, -1.41307563e-02, -1.03387292e-02),
    *(-1.68043356e-02, 1.33516011e-03),
]",scverse,scanpy,1.10.1,,,,,"REP_PCA_0 = [
    *(1.50808525e00, -1.67258829e-01, -7.12063432e-01, -2.07935140e-01),
    *(-3.55730444e-01, -2.24421427e-01, -1.46907698e-02, -7.01090470e-02),
    *(-1.31467551e-01, -3.75757217e-02, -1.07698059e-02, -4.37555499e-02),
    *(1.06897885e-02, 1.10454357e-03, -5.37674241e-02, -4.94170748e-03),
    *(1.11988001e-02, -4.48330259e-03, -2.56892946e-02, -3.50749046e-02),
    *(-3.15931924e-02, 2.84416862e-02, -3.70664597e-02, -2.38820408e-02),
    *(-4.57040370e-02, 2.99325008e-02, 9.56365839e-03, -4.28026691e-02),
    *(5.36734704e-03, -3.08445804e-02, -1.16719725e-02, -2.35078149e-02),
    *(2.87542702e-04, -1.70532353e-02, -1.79676879e-02, -3.09410989e-02),
    *(-1.09178647e-02, -1.60753895e-02, -1.04769412e-02, -1.36501975e-02),
    *(-6.83976896e-03, -1.17562497e-02, -4.65345643e-02, 1.91588048e-02),
    *(-1.38043752e-02, 4.75460896e-03, -1.41307563e-02, -1.03387292e-02),
    *(-1.68043356e-02, 1.33516011e-03),
]",REP_PCA_0,"[
    *(1.50808525e00, -1.67258829e-01, -7.12063432e-01, -2.07935140e-01),
    *(-3.55730444e-01, -2.24421427e-01, -1.46907698e-02, -7.01090470e-02),
    *(-1.31467551e-01, -3.75757217e-02, -1.07698059e-02, -4.37555499e-02),
    *(1.06897885e-02, 1.10454357e-03, -5.37674241e-02, -4.94170748e-03),
    *(1.11988001e-02, -4.48330259e-03, -2.56892946e-02, -3.50749046e-02),
    *(-3.15931924e-02, 2.84416862e-02, -3.70664597e-02, -2.38820408e-02),
    *(-4.57040370e-02, 2.99325008e-02, 9.56365839e-03, -4.28026691e-02),
    *(5.36734704e-03, -3.08445804e-02, -1.16719725e-02, -2.35078149e-02),
    *(2.87542702e-04, -1.70532353e-02, -1.79676879e-02, -3.09410989e-02),
    *(-1.09178647e-02, -1.60753895e-02, -1.04769412e-02, -1.36501975e-02),
    *(-6.83976896e-03, -1.17562497e-02, -4.65345643e-02, 1.91588048e-02),
    *(-1.38043752e-02, 4.75460896e-03, -1.41307563e-02, -1.03387292e-02),
    *(-1.68043356e-02, 1.33516011e-03),
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,"REP_PCA_1_6 = [
    *(-2.70745814e-01, -3.45929652e-01, 6.27844110e-02, -8.34012777e-02),
    *(-1.08290315e-01, -1.38125733e-01, -2.57148240e-02, -2.73127705e-02),
    *(-1.45030200e-01, -6.88858554e-02, -4.28490154e-02, -1.88931823e-02),
    *(-2.56232135e-02, -7.66322482e-03, -5.49384989e-02, -1.43514248e-02),
    *(2.42769364e-02, -3.01547404e-02, -3.37253511e-02, -3.81337740e-02),
    *(-3.42049589e-03, -4.34436463e-03, -4.15385924e-02, -2.66448390e-02),
    *(-2.74285320e-02, 1.47806173e-02, 1.19129466e-02, -6.70884028e-02),
    *(2.58150720e-03, -1.64280720e-02, -1.07431635e-02, -3.04328315e-02),
    *(-3.82748269e-03, -2.95090005e-02, -3.10521629e-02, -3.43420058e-02),
    *(-4.49432433e-03, -2.15906072e-02, -1.23507539e-02, -2.88041346e-02),
    *(-7.31994957e-03, -7.28111062e-03, -7.61008039e-02, 2.40524579e-02),
    *(-1.20806806e-02, 5.05997473e-03, -2.53410172e-02, -1.83318909e-02),
    *(-1.81263424e-02, -3.35110351e-03),
]",constant,,,,"Constant: REP_PCA_1_6 = [
    *(-2.70745814e-01, -3.45929652e-01, 6.27844110e-02, -8.34012777e-02),
    *(-1.08290315e-01, -1.38125733e-01, -2.57148240e-02, -2.73127705e-02),
    *(-1.45030200e-01, -6.88858554e-02, -4.28490154e-02, -1.88931823e-02),
    *(-2.56232135e-02, -7.66322482e-03, -5.49384989e-02, -1.43514248e-02),
    *(2.42769364e-02, -3.01547404e-02, -3.37253511e-02, -3.81337740e-02),
    *(-3.42049589e-03, -4.34436463e-03, -4.15385924e-02, -2.66448390e-02),
    *(-2.74285320e-02, 1.47806173e-02, 1.19129466e-02, -6.70884028e-02),
    *(2.58150720e-03, -1.64280720e-02, -1.07431635e-02, -3.04328315e-02),
    *(-3.82748269e-03, -2.95090005e-02, -3.10521629e-02, -3.43420058e-02),
    *(-4.49432433e-03, -2.15906072e-02, -1.23507539e-02, -2.88041346e-02),
    *(-7.31994957e-03, -7.28111062e-03, -7.61008039e-02, 2.40524579e-02),
    *(-1.20806806e-02, 5.05997473e-03, -2.53410172e-02, -1.83318909e-02),
    *(-1.81263424e-02, -3.35110351e-03),
]",scverse,scanpy,1.10.1,,,,,"REP_PCA_1_6 = [
    *(-2.70745814e-01, -3.45929652e-01, 6.27844110e-02, -8.34012777e-02),
    *(-1.08290315e-01, -1.38125733e-01, -2.57148240e-02, -2.73127705e-02),
    *(-1.45030200e-01, -6.88858554e-02, -4.28490154e-02, -1.88931823e-02),
    *(-2.56232135e-02, -7.66322482e-03, -5.49384989e-02, -1.43514248e-02),
    *(2.42769364e-02, -3.01547404e-02, -3.37253511e-02, -3.81337740e-02),
    *(-3.42049589e-03, -4.34436463e-03, -4.15385924e-02, -2.66448390e-02),
    *(-2.74285320e-02, 1.47806173e-02, 1.19129466e-02, -6.70884028e-02),
    *(2.58150720e-03, -1.64280720e-02, -1.07431635e-02, -3.04328315e-02),
    *(-3.82748269e-03, -2.95090005e-02, -3.10521629e-02, -3.43420058e-02),
    *(-4.49432433e-03, -2.15906072e-02, -1.23507539e-02, -2.88041346e-02),
    *(-7.31994957e-03, -7.28111062e-03, -7.61008039e-02, 2.40524579e-02),
    *(-1.20806806e-02, 5.05997473e-03, -2.53410172e-02, -1.83318909e-02),
    *(-1.81263424e-02, -3.35110351e-03),
]",REP_PCA_1_6,"[
    *(-2.70745814e-01, -3.45929652e-01, 6.27844110e-02, -8.34012777e-02),
    *(-1.08290315e-01, -1.38125733e-01, -2.57148240e-02, -2.73127705e-02),
    *(-1.45030200e-01, -6.88858554e-02, -4.28490154e-02, -1.88931823e-02),
    *(-2.56232135e-02, -7.66322482e-03, -5.49384989e-02, -1.43514248e-02),
    *(2.42769364e-02, -3.01547404e-02, -3.37253511e-02, -3.81337740e-02),
    *(-3.42049589e-03, -4.34436463e-03, -4.15385924e-02, -2.66448390e-02),
    *(-2.74285320e-02, 1.47806173e-02, 1.19129466e-02, -6.70884028e-02),
    *(2.58150720e-03, -1.64280720e-02, -1.07431635e-02, -3.04328315e-02),
    *(-3.82748269e-03, -2.95090005e-02, -3.10521629e-02, -3.43420058e-02),
    *(-4.49432433e-03, -2.15906072e-02, -1.23507539e-02, -2.88041346e-02),
    *(-7.31994957e-03, -7.28111062e-03, -7.61008039e-02, 2.40524579e-02),
    *(-1.20806806e-02, 5.05997473e-03, -2.53410172e-02, -1.83318909e-02),
    *(-1.81263424e-02, -3.35110351e-03),
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,"REP_PCA = np.array([REP_PCA_0, *([REP_PCA_1_6] * 6)], dtype=np.float32)",constant,,,,"Constant: REP_PCA = np.array([REP_PCA_0, *([REP_PCA_1_6] * 6)], dtype=np.float32)",scverse,scanpy,1.10.1,,,,,"REP_PCA = np.array([REP_PCA_0, *([REP_PCA_1_6] * 6)], dtype=np.float32)",REP_PCA,"np.array([REP_PCA_0, *([REP_PCA_1_6] * 6)], dtype=np.float32)",,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,scipy.sparse,import,,,,Import: scipy.sparse,scverse,scanpy,1.10.1,import scipy.sparse as sp,scipy.sparse,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,pbmc68k_reduced,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
,test_dendrogram.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_dendrogram.py,python,,,,,,Directory: scanpy\tests\test_dendrogram.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_deprecations.py,python,test_deprecate_multicore_tsne(),function,test_deprecate_multicore_tsne,(),,Function: test_deprecate_multicore_tsne(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_deprecations.py,python,test_deprecate_use_highly_variable_genes(),function,test_deprecate_use_highly_variable_genes,(),,Function: test_deprecate_use_highly_variable_genes(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_deprecations.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_deprecations.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_deprecations.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,pbmc68k_reduced,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
,test_deprecations.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_deprecations.py,python,,,,,,Directory: scanpy\tests\test_deprecations.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,test_tsne(),function,test_tsne,(),,Function: test_tsne(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,test_umap_init_dtype(),function,test_umap_init_dtype,(),,Function: test_umap_init_dtype(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,test_diffmap(),function,test_diffmap,(),,Function: test_diffmap(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,assert_array_almost_equal from numpy.testing,local_import,,,,Import: assert_array_almost_equal from numpy.testing,scverse,scanpy,1.10.1,"from numpy.testing import assert_array_almost_equal, assert_array_equal, assert_raises",assert_array_almost_equal,numpy.testing,numpy.testing,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,assert_array_equal from numpy.testing,local_import,,,,Import: assert_array_equal from numpy.testing,scverse,scanpy,1.10.1,"from numpy.testing import assert_array_almost_equal, assert_array_equal, assert_raises",assert_array_equal,numpy.testing,numpy.testing,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,assert_raises from numpy.testing,local_import,,,,Import: assert_raises from numpy.testing,scverse,scanpy,1.10.1,"from numpy.testing import assert_array_almost_equal, assert_array_equal, assert_raises",assert_raises,numpy.testing,numpy.testing,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,pbmc68k_reduced,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,needs,scanpy.testing._pytest.marks,scanpy.testing._pytest.marks,,,,,,,,,,,,,,
,test_embedding.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_embedding.py,python,,,,,,Directory: scanpy\tests\test_embedding.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_density.py,python,test_embedding_density(),function,test_embedding_density,(),,Function: test_embedding_density(),scverse,scanpy,1.10.1,,,,,,,,"# Test that density values are scaled",,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_density.py,python,test_embedding_density(),function,test_embedding_density,(),,Function: test_embedding_density(),scverse,scanpy,1.10.1,,,,,,,,"# Test that the highest value is in the middle for a grid layout",,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_density.py,python,test_embedding_density_plot(),function,test_embedding_density_plot,(),,Function: test_embedding_density_plot(),scverse,scanpy,1.10.1,,,,,,,,"# Test that sc.pl.embedding_density() runs without error",,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_density.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_density.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_density.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_density.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,pbmc68k_reduced,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
,test_embedding_density.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_embedding_density.py,python,,,,,,Directory: scanpy\tests\test_embedding_density.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"check_images(pth1, pth2, *, tol)",function,check_images,"(pth1, pth2, *, tol)",,"Function: check_images(pth1, pth2, *, tol)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"test_missing_values_categorical(
    *,
    fixture_request,
    image_comparer,
    adata,
    plotfunc,
    na_color,
    na_in_legend,
    legend_loc,
    groupsfunc,
)",function,test_missing_values_categorical,"(
    *,
    fixture_request,
    image_comparer,
    adata,
    plotfunc,
    na_color,
    na_in_legend,
    legend_loc,
    groupsfunc,
)",,"Function: test_missing_values_categorical(
    *,
    fixture_request,
    image_comparer,
    adata,
    plotfunc,
    na_color,
    na_in_legend,
    legend_loc,
    groupsfunc,
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"test_missing_values_continuous(
    *, fixture_request, image_comparer, adata, plotfunc, na_color, legend_loc, vbounds
)",function,test_missing_values_continuous,"(
    *, fixture_request, image_comparer, adata, plotfunc, na_color, legend_loc, vbounds
)",,"Function: test_missing_values_continuous(
    *, fixture_request, image_comparer, adata, plotfunc, na_color, legend_loc, vbounds
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"test_enumerated_palettes(fixture_request, adata, tmpdir, plotfunc)",function,test_enumerated_palettes,"(fixture_request, adata, tmpdir, plotfunc)",,"Function: test_enumerated_palettes(fixture_request, adata, tmpdir, plotfunc)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"test_dimension_broadcasting(adata, tmpdir, check_same_image)",function,test_dimension_broadcasting,"(adata, tmpdir, check_same_image)",,"Function: test_dimension_broadcasting(adata, tmpdir, check_same_image)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"test_marker_broadcasting(adata, tmpdir, check_same_image)",function,test_marker_broadcasting,"(adata, tmpdir, check_same_image)",,"Function: test_marker_broadcasting(adata, tmpdir, check_same_image)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"test_dimensions_same_as_components(adata, tmpdir, check_same_image)",function,test_dimensions_same_as_components,"(adata, tmpdir, check_same_image)",,"Function: test_dimensions_same_as_components(adata, tmpdir, check_same_image)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,test_embedding_colorbar_location(image_comparer),function,test_embedding_colorbar_location,(image_comparer),,Function: test_embedding_colorbar_location(image_comparer),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,test_visium_circles(image_comparer),function,test_visium_circles,(image_comparer),,Function: test_visium_circles(image_comparer),scverse,scanpy,1.10.1,,,,,,,,"# standard visium data",,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,test_visium_default(image_comparer),function,test_visium_default,(image_comparer),,Function: test_visium_default(image_comparer),scverse,scanpy,1.10.1,,,,,,,,"# default values",,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,test_visium_empty_img_key(image_comparer),function,test_visium_empty_img_key,(image_comparer),,Function: test_visium_empty_img_key(image_comparer),scverse,scanpy,1.10.1,,,,,,,,"# visium coordinates but image empty",,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,test_spatial_general(image_comparer),function,test_spatial_general,(image_comparer),,Function: test_spatial_general(image_comparer),scverse,scanpy,1.10.1,,,,,,,,"# general coordinates",,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,test_spatial_external_img(image_comparer),function,test_spatial_external_img,(image_comparer),,Function: test_spatial_external_img(image_comparer),scverse,scanpy,1.10.1,,,,,,,,"# external image",,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"test_manual_equivalency(equivalent_spatial_plotters, tmpdir, spatial_kwargs)",function,test_manual_equivalency,"(equivalent_spatial_plotters, tmpdir, spatial_kwargs)",,"Function: test_manual_equivalency(equivalent_spatial_plotters, tmpdir, spatial_kwargs)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"test_manual_equivalency_no_img(
    equivalent_spatial_plotters_no_img, tmpdir, spatial_kwargs
)",function,test_manual_equivalency_no_img,"(
    equivalent_spatial_plotters_no_img, tmpdir, spatial_kwargs
)",,"Function: test_manual_equivalency_no_img(
    equivalent_spatial_plotters_no_img, tmpdir, spatial_kwargs
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"test_white_background_vs_no_img(adata, tmpdir, spatial_kwargs)",function,test_white_background_vs_no_img,"(adata, tmpdir, spatial_kwargs)",,"Function: test_white_background_vs_no_img(adata, tmpdir, spatial_kwargs)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"test_spatial_na_color(adata, tmpdir)",function,test_spatial_na_color,"(adata, tmpdir)",,"Function: test_spatial_na_color(adata, tmpdir)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,HERE: Path = Path(__file__).parent,constant,,,,Constant: HERE: Path = Path(__file__).parent,scverse,scanpy,1.10.1,,,,,HERE: Path = Path(__file__).parent,HERE,Path(__file__).parent,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"ROOT = HERE / ""_images""",constant,,,,"Constant: ROOT = HERE / ""_images""",scverse,scanpy,1.10.1,,,,,"ROOT = HERE / ""_images""",ROOT,"HERE / ""_images""",,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"MISSING_VALUES_ROOT = ROOT / ""embedding-missing-values""",constant,,,,"Constant: MISSING_VALUES_ROOT = ROOT / ""embedding-missing-values""",scverse,scanpy,1.10.1,,,,,"MISSING_VALUES_ROOT = ROOT / ""embedding-missing-values""",MISSING_VALUES_ROOT,"ROOT / ""embedding-missing-values""",,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,partial,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,matplotlib,import,,,,Import: matplotlib,scverse,scanpy,1.10.1,import matplotlib as mpl,matplotlib,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,matplotlib.pyplot,import,,,,Import: matplotlib.pyplot,scverse,scanpy,1.10.1,import matplotlib.pyplot as plt,matplotlib.pyplot,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,seaborn,import,,,,Import: seaborn,scverse,scanpy,1.10.1,import seaborn as sns,seaborn,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,Normalize from matplotlib.colors,local_import,,,,Import: Normalize from matplotlib.colors,scverse,scanpy,1.10.1,from matplotlib.colors import Normalize,Normalize,matplotlib.colors,matplotlib.colors,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,compare_images from matplotlib.testing.compare,local_import,,,,Import: compare_images from matplotlib.testing.compare,scverse,scanpy,1.10.1,from matplotlib.testing.compare import compare_images,compare_images,matplotlib.testing.compare,matplotlib.testing.compare,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,pbmc3k_processed from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k_processed from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc3k_processed,pbmc3k_processed,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
,test_embedding_plots.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_embedding_plots.py,python,,,,,,Directory: scanpy\tests\test_embedding_plots.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_filter_rank_genes_groups.py,python,test_filter_rank_genes_groups(),function,test_filter_rank_genes_groups,(),,Function: test_filter_rank_genes_groups(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_filter_rank_genes_groups.py,python,"names_no_reference = np.array(
    [
        [""CD3D"", ""ITM2A"", ""CD3D"", ""CCL5"", ""CD7"", ""nan"", ""CD79A"", ""nan"", ""NKG7"", ""LYZ""],
        [""CD3E"", ""CD3D"", ""nan"", ""NKG7"", ""CD3D"", ""AIF1"", ""CD79B"", ""nan"", ""GNLY"", ""CST3""],
        [""IL32"", ""RPL39"", ""nan"", ""CST7"", ""nan"", ""nan"", ""nan"", ""SNHG7"", ""CD7"", ""nan""],
        [""nan"", ""SRSF7"", ""IL32"", ""GZMA"", ""nan"", ""LST1"", ""IGJ"", ""nan"", ""CTSW"", ""nan""],
        [
            ""nan"",
            ""nan"",
            ""CD2"",
            ""CTSW"",
            ""CD8B"",
            ""TYROBP"",
            ""ISG20"",
            ""SNHG8"",
            ""GZMB"",
            ""nan"",
        ],
    ]
)",constant,,,,"Constant: names_no_reference = np.array(
    [
        [""CD3D"", ""ITM2A"", ""CD3D"", ""CCL5"", ""CD7"", ""nan"", ""CD79A"", ""nan"", ""NKG7"", ""LYZ""],
        [""CD3E"", ""CD3D"", ""nan"", ""NKG7"", ""CD3D"", ""AIF1"", ""CD79B"", ""nan"", ""GNLY"", ""CST3""],
        [""IL32"", ""RPL39"", ""nan"", ""CST7"", ""nan"", ""nan"", ""nan"", ""SNHG7"", ""CD7"", ""nan""],
        [""nan"", ""SRSF7"", ""IL32"", ""GZMA"", ""nan"", ""LST1"", ""IGJ"", ""nan"", ""CTSW"", ""nan""],
        [
            ""nan"",
            ""nan"",
            ""CD2"",
            ""CTSW"",
            ""CD8B"",
            ""TYROBP"",
            ""ISG20"",
            ""SNHG8"",
            ""GZMB"",
            ""nan"",
        ],
    ]
)",scverse,scanpy,1.10.1,,,,,"names_no_reference = np.array(
    [
        [""CD3D"", ""ITM2A"", ""CD3D"", ""CCL5"", ""CD7"", ""nan"", ""CD79A"", ""nan"", ""NKG7"", ""LYZ""],
        [""CD3E"", ""CD3D"", ""nan"", ""NKG7"", ""CD3D"", ""AIF1"", ""CD79B"", ""nan"", ""GNLY"", ""CST3""],
        [""IL32"", ""RPL39"", ""nan"", ""CST7"", ""nan"", ""nan"", ""nan"", ""SNHG7"", ""CD7"", ""nan""],
        [""nan"", ""SRSF7"", ""IL32"", ""GZMA"", ""nan"", ""LST1"", ""IGJ"", ""nan"", ""CTSW"", ""nan""],
        [
            ""nan"",
            ""nan"",
            ""CD2"",
            ""CTSW"",
            ""CD8B"",
            ""TYROBP"",
            ""ISG20"",
            ""SNHG8"",
            ""GZMB"",
            ""nan"",
        ],
    ]
)",names_no_reference,"np.array(
    [
        [""CD3D"", ""ITM2A"", ""CD3D"", ""CCL5"", ""CD7"", ""nan"", ""CD79A"", ""nan"", ""NKG7"", ""LYZ""],
        [""CD3E"", ""CD3D"", ""nan"", ""NKG7"", ""CD3D"", ""AIF1"", ""CD79B"", ""nan"", ""GNLY"", ""CST3""],
        [""IL32"", ""RPL39"", ""nan"", ""CST7"", ""nan"", ""nan"", ""nan"", ""SNHG7"", ""CD7"", ""nan""],
        [""nan"", ""SRSF7"", ""IL32"", ""GZMA"", ""nan"", ""LST1"", ""IGJ"", ""nan"", ""CTSW"", ""nan""],
        [
            ""nan"",
            ""nan"",
            ""CD2"",
            ""CTSW"",
            ""CD8B"",
            ""TYROBP"",
            ""ISG20"",
            ""SNHG8"",
            ""GZMB"",
            ""nan"",
        ],
    ]
)",,,,,,,,,,,
scverse_scanpy_1.10.1,test_filter_rank_genes_groups.py,python,"names_reference = np.array(
    [
        [""CD3D"", ""ITM2A"", ""CD3D"", ""nan"", ""CD3D"", ""nan"", ""CD79A"", ""nan"", ""CD7""],
        [""nan"", ""nan"", ""nan"", ""CD3D"", ""nan"", ""AIF1"", ""nan"", ""nan"", ""NKG7""],
        [""nan"", ""nan"", ""nan"", ""NKG7"", ""nan"", ""FCGR3A"", ""ISG20"", ""SNHG7"", ""CTSW""],
        [""nan"", ""CD3D"", ""nan"", ""CCL5"", ""CD7"", ""nan"", ""CD79B"", ""nan"", ""GNLY""],
        [""CD3E"", ""IL32"", ""nan"", ""IL32"", ""CD27"", ""FCER1G"", ""nan"", ""nan"", ""nan""],
    ]
)",constant,,,,"Constant: names_reference = np.array(
    [
        [""CD3D"", ""ITM2A"", ""CD3D"", ""nan"", ""CD3D"", ""nan"", ""CD79A"", ""nan"", ""CD7""],
        [""nan"", ""nan"", ""nan"", ""CD3D"", ""nan"", ""AIF1"", ""nan"", ""nan"", ""NKG7""],
        [""nan"", ""nan"", ""nan"", ""NKG7"", ""nan"", ""FCGR3A"", ""ISG20"", ""SNHG7"", ""CTSW""],
        [""nan"", ""CD3D"", ""nan"", ""CCL5"", ""CD7"", ""nan"", ""CD79B"", ""nan"", ""GNLY""],
        [""CD3E"", ""IL32"", ""nan"", ""IL32"", ""CD27"", ""FCER1G"", ""nan"", ""nan"", ""nan""],
    ]
)",scverse,scanpy,1.10.1,,,,,"names_reference = np.array(
    [
        [""CD3D"", ""ITM2A"", ""CD3D"", ""nan"", ""CD3D"", ""nan"", ""CD79A"", ""nan"", ""CD7""],
        [""nan"", ""nan"", ""nan"", ""CD3D"", ""nan"", ""AIF1"", ""nan"", ""nan"", ""NKG7""],
        [""nan"", ""nan"", ""nan"", ""NKG7"", ""nan"", ""FCGR3A"", ""ISG20"", ""SNHG7"", ""CTSW""],
        [""nan"", ""CD3D"", ""nan"", ""CCL5"", ""CD7"", ""nan"", ""CD79B"", ""nan"", ""GNLY""],
        [""CD3E"", ""IL32"", ""nan"", ""IL32"", ""CD27"", ""FCER1G"", ""nan"", ""nan"", ""nan""],
    ]
)",names_reference,"np.array(
    [
        [""CD3D"", ""ITM2A"", ""CD3D"", ""nan"", ""CD3D"", ""nan"", ""CD79A"", ""nan"", ""CD7""],
        [""nan"", ""nan"", ""nan"", ""CD3D"", ""nan"", ""AIF1"", ""nan"", ""nan"", ""NKG7""],
        [""nan"", ""nan"", ""nan"", ""NKG7"", ""nan"", ""FCGR3A"", ""ISG20"", ""SNHG7"", ""CTSW""],
        [""nan"", ""CD3D"", ""nan"", ""CCL5"", ""CD7"", ""nan"", ""CD79B"", ""nan"", ""GNLY""],
        [""CD3E"", ""IL32"", ""nan"", ""IL32"", ""CD27"", ""FCER1G"", ""nan"", ""nan"", ""nan""],
    ]
)",,,,,,,,,,,
scverse_scanpy_1.10.1,test_filter_rank_genes_groups.py,python,"names_compare_abs = np.array(
    [
        [
            ""CD3D"",
            ""ITM2A"",
            ""HLA-DRB1"",
            ""CCL5"",
            ""HLA-DPA1"",
            ""nan"",
            ""CD79A"",
            ""nan"",
            ""NKG7"",
            ""LYZ"",
        ],
        [
            ""HLA-DPA1"",
            ""nan"",
            ""CD3D"",
            ""NKG7"",
            ""HLA-DRB1"",
            ""AIF1"",
            ""CD79B"",
            ""nan"",
            ""GNLY"",
            ""CST3"",
        ],
        [
            ""nan"",
            ""PSAP"",
            ""CD74"",
            ""CST7"",
            ""CD74"",
            ""PSAP"",
            ""FCER1G"",
            ""SNHG7"",
            ""CD7"",
            ""HLA-DRA"",
        ],
        [
            ""IL32"",
            ""nan"",
            ""HLA-DRB5"",
            ""GZMA"",
            ""HLA-DRB5"",
            ""LST1"",
            ""nan"",
            ""nan"",
            ""CTSW"",
            ""HLA-DRB1"",
        ],
        [
            ""nan"",
            ""FCER1G"",
            ""HLA-DPB1"",
            ""CTSW"",
            ""HLA-DPB1"",
            ""TYROBP"",
            ""TYROBP"",
            ""S100A10"",
            ""GZMB"",
            ""HLA-DPA1"",
        ],
    ]
)",constant,,,,"Constant: names_compare_abs = np.array(
    [
        [
            ""CD3D"",
            ""ITM2A"",
            ""HLA-DRB1"",
            ""CCL5"",
            ""HLA-DPA1"",
            ""nan"",
            ""CD79A"",
            ""nan"",
            ""NKG7"",
            ""LYZ"",
        ],
        [
            ""HLA-DPA1"",
            ""nan"",
            ""CD3D"",
            ""NKG7"",
            ""HLA-DRB1"",
            ""AIF1"",
            ""CD79B"",
            ""nan"",
            ""GNLY"",
            ""CST3"",
        ],
        [
            ""nan"",
            ""PSAP"",
            ""CD74"",
            ""CST7"",
            ""CD74"",
            ""PSAP"",
            ""FCER1G"",
            ""SNHG7"",
            ""CD7"",
            ""HLA-DRA"",
        ],
        [
            ""IL32"",
            ""nan"",
            ""HLA-DRB5"",
            ""GZMA"",
            ""HLA-DRB5"",
            ""LST1"",
            ""nan"",
            ""nan"",
            ""CTSW"",
            ""HLA-DRB1"",
        ],
        [
            ""nan"",
            ""FCER1G"",
            ""HLA-DPB1"",
            ""CTSW"",
            ""HLA-DPB1"",
            ""TYROBP"",
            ""TYROBP"",
            ""S100A10"",
            ""GZMB"",
            ""HLA-DPA1"",
        ],
    ]
)",scverse,scanpy,1.10.1,,,,,"names_compare_abs = np.array(
    [
        [
            ""CD3D"",
            ""ITM2A"",
            ""HLA-DRB1"",
            ""CCL5"",
            ""HLA-DPA1"",
            ""nan"",
            ""CD79A"",
            ""nan"",
            ""NKG7"",
            ""LYZ"",
        ],
        [
            ""HLA-DPA1"",
            ""nan"",
            ""CD3D"",
            ""NKG7"",
            ""HLA-DRB1"",
            ""AIF1"",
            ""CD79B"",
            ""nan"",
            ""GNLY"",
            ""CST3"",
        ],
        [
            ""nan"",
            ""PSAP"",
            ""CD74"",
            ""CST7"",
            ""CD74"",
            ""PSAP"",
            ""FCER1G"",
            ""SNHG7"",
            ""CD7"",
            ""HLA-DRA"",
        ],
        [
            ""IL32"",
            ""nan"",
            ""HLA-DRB5"",
            ""GZMA"",
            ""HLA-DRB5"",
            ""LST1"",
            ""nan"",
            ""nan"",
            ""CTSW"",
            ""HLA-DRB1"",
        ],
        [
            ""nan"",
            ""FCER1G"",
            ""HLA-DPB1"",
            ""CTSW"",
            ""HLA-DPB1"",
            ""TYROBP"",
            ""TYROBP"",
            ""S100A10"",
            ""GZMB"",
            ""HLA-DPA1"",
        ],
    ]
)",names_compare_abs,"np.array(
    [
        [
            ""CD3D"",
            ""ITM2A"",
            ""HLA-DRB1"",
            ""CCL5"",
            ""HLA-DPA1"",
            ""nan"",
            ""CD79A"",
            ""nan"",
            ""NKG7"",
            ""LYZ"",
        ],
        [
            ""HLA-DPA1"",
            ""nan"",
            ""CD3D"",
            ""NKG7"",
            ""HLA-DRB1"",
            ""AIF1"",
            ""CD79B"",
            ""nan"",
            ""GNLY"",
            ""CST3"",
        ],
        [
            ""nan"",
            ""PSAP"",
            ""CD74"",
            ""CST7"",
            ""CD74"",
            ""PSAP"",
            ""FCER1G"",
            ""SNHG7"",
            ""CD7"",
            ""HLA-DRA"",
        ],
        [
            ""IL32"",
            ""nan"",
            ""HLA-DRB5"",
            ""GZMA"",
            ""HLA-DRB5"",
            ""LST1"",
            ""nan"",
            ""nan"",
            ""CTSW"",
            ""HLA-DRB1"",
        ],
        [
            ""nan"",
            ""FCER1G"",
            ""HLA-DPB1"",
            ""CTSW"",
            ""HLA-DPB1"",
            ""TYROBP"",
            ""TYROBP"",
            ""S100A10"",
            ""GZMB"",
            ""HLA-DPA1"",
        ],
    ]
)",,,,,,,,,,,
scverse_scanpy_1.10.1,test_filter_rank_genes_groups.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_filter_rank_genes_groups.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,pbmc68k_reduced,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_filter_rank_genes_groups.py,python,filter_rank_genes_groups from scanpy.tools,local_import,,,,Import: filter_rank_genes_groups from scanpy.tools,scverse,scanpy,1.10.1,"from scanpy.tools import filter_rank_genes_groups, rank_genes_groups",filter_rank_genes_groups,scanpy.tools,scanpy.tools,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_filter_rank_genes_groups.py,python,rank_genes_groups from scanpy.tools,local_import,,,,Import: rank_genes_groups from scanpy.tools,scverse,scanpy,1.10.1,"from scanpy.tools import filter_rank_genes_groups, rank_genes_groups",rank_genes_groups,scanpy.tools,scanpy.tools,,,,,,,,,,,,,,
,test_filter_rank_genes_groups.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_filter_rank_genes_groups.py,python,,,,,,Directory: scanpy\tests\test_filter_rank_genes_groups.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,"transpose_adata(adata: AnnData, *, expect_duplicates: bool = False) -> AnnData",function,transpose_adata,"(adata: AnnData, *, expect_duplicates: bool = False)",AnnData,"Function: transpose_adata(adata: AnnData, *, expect_duplicates: bool = False) -> AnnData",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,test_obs_df(adata),function,test_obs_df,(adata),,Function: test_obs_df(adata),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,test_repeated_gene_symbols(),function,test_repeated_gene_symbols,(),,Function: test_repeated_gene_symbols(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,test_column_content(),function,test_column_content,(),,Function: test_column_content(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,test_var_df(adata),function,test_var_df,(adata),,Function: test_var_df(adata),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,test_non_unique_cols_value_error(),function,test_non_unique_cols_value_error,(),,Function: test_non_unique_cols_value_error(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,test_non_unique_var_index_value_error(),function,test_non_unique_var_index_value_error,(),,Function: test_non_unique_var_index_value_error(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,test_keys_in_both_obs_and_var_index_value_error(),function,test_keys_in_both_obs_and_var_index_value_error,(),,Function: test_keys_in_both_obs_and_var_index_value_error(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,test_shared_key_errors(shared_key_adata),function,test_shared_key_errors,(shared_key_adata),,Function: test_shared_key_errors(shared_key_adata),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,test_rank_genes_groups_df(),function,test_rank_genes_groups_df,(),,Function: test_rank_genes_groups_df(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,"TRANSPOSE_PARAMS = pytest.mark.parametrize(
    ""dim,transform,func"",
    [
        (""obs"", lambda x, expect_duplicates=False: x, sc.get.obs_df),
        (""var"", transpose_adata, sc.get.var_df),
    ],
    ids=[""obs_df"", ""var_df""],
)",constant,,,,"Constant: TRANSPOSE_PARAMS = pytest.mark.parametrize(
    ""dim,transform,func"",
    [
        (""obs"", lambda x, expect_duplicates=False: x, sc.get.obs_df),
        (""var"", transpose_adata, sc.get.var_df),
    ],
    ids=[""obs_df"", ""var_df""],
)",scverse,scanpy,1.10.1,,,,,"TRANSPOSE_PARAMS = pytest.mark.parametrize(
    ""dim,transform,func"",
    [
        (""obs"", lambda x, expect_duplicates=False: x, sc.get.obs_df),
        (""var"", transpose_adata, sc.get.var_df),
    ],
    ids=[""obs_df"", ""var_df""],
)",TRANSPOSE_PARAMS,"pytest.mark.parametrize(
    ""dim,transform,func"",
    [
        (""obs"", lambda x, expect_duplicates=False: x, sc.get.obs_df),
        (""var"", transpose_adata, sc.get.var_df),
    ],
    ids=[""obs_df"", ""var_df""],
)",,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,partial,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,chain from itertools,import,,,,Import: chain from itertools,scverse,scanpy,1.10.1,"from itertools import chain, repeat",chain,itertools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,repeat from itertools,import,,,,Import: repeat from itertools,scverse,scanpy,1.10.1,"from itertools import chain, repeat",repeat,itertools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,filter_oldformatwarning from scanpy.datasets._utils,local_import,,,,Import: filter_oldformatwarning from scanpy.datasets._utils,scverse,scanpy,1.10.1,from scanpy.datasets._utils import filter_oldformatwarning,filter_oldformatwarning,scanpy.datasets._utils,scanpy.datasets._utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,anndata_v0_8_constructor_compat from scanpy.testing._helpers,local_import,,,,Import: anndata_v0_8_constructor_compat from scanpy.testing._helpers,scverse,scanpy,1.10.1,from scanpy.testing._helpers import anndata_v0_8_constructor_compat,anndata_v0_8_constructor_compat,scanpy.testing._helpers,scanpy.testing._helpers,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,pbmc68k_reduced,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
,test_get.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_get.py,python,,,,,,Directory: scanpy\tests\test_get.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,test_runs(adata),function,test_runs,(adata),,Function: test_runs(adata),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,test_supports_batch(adata),function,test_supports_batch,(adata),,Function: test_supports_batch(adata),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,test_supports_layers(adata_sess),function,test_supports_layers,(adata_sess),,Function: test_supports_layers(adata_sess),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,test_no_batch_matches_batch(adata),function,test_no_batch_matches_batch,(adata),,Function: test_no_batch_matches_batch(adata),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,"_check_pearson_hvg_columns(output_df: pd.DataFrame, n_top_genes: int)",function,_check_pearson_hvg_columns,"(output_df: pd.DataFrame, n_top_genes: int)",,"Function: _check_pearson_hvg_columns(output_df: pd.DataFrame, n_top_genes: int)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,test_pearson_residuals_inputchecks(pbmc3k_parametrized_small),function,test_pearson_residuals_inputchecks,(pbmc3k_parametrized_small),,Function: test_pearson_residuals_inputchecks(pbmc3k_parametrized_small),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,test_batches(),function,test_batches,(),,Function: test_batches(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,test_cellranger_n_top_genes_warning(),function,test_cellranger_n_top_genes_warning,(),,Function: test_cellranger_n_top_genes_warning(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,test_cutoff_info(),function,test_cutoff_info,(),,Function: test_cutoff_info(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,"FILE = Path(__file__).parent / Path(""_scripts/seurat_hvg.csv"")",constant,,,,"Constant: FILE = Path(__file__).parent / Path(""_scripts/seurat_hvg.csv"")",scverse,scanpy,1.10.1,,,,,"FILE = Path(__file__).parent / Path(""_scripts/seurat_hvg.csv"")",FILE,"Path(__file__).parent / Path(""_scripts/seurat_hvg.csv"")",,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,"FILE_V3 = Path(__file__).parent / Path(""_scripts/seurat_hvg_v3.csv.gz"")",constant,,,,"Constant: FILE_V3 = Path(__file__).parent / Path(""_scripts/seurat_hvg_v3.csv.gz"")",scverse,scanpy,1.10.1,,,,,"FILE_V3 = Path(__file__).parent / Path(""_scripts/seurat_hvg_v3.csv.gz"")",FILE_V3,"Path(__file__).parent / Path(""_scripts/seurat_hvg_v3.csv.gz"")",,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,"FILE_V3_BATCH = Path(__file__).parent / Path(""_scripts/seurat_hvg_v3_batch.csv"")",constant,,,,"Constant: FILE_V3_BATCH = Path(__file__).parent / Path(""_scripts/seurat_hvg_v3_batch.csv"")",scverse,scanpy,1.10.1,,,,,"FILE_V3_BATCH = Path(__file__).parent / Path(""_scripts/seurat_hvg_v3_batch.csv"")",FILE_V3_BATCH,"Path(__file__).parent / Path(""_scripts/seurat_hvg_v3_batch.csv"")",,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,"FILE_CELL_RANGER = Path(__file__).parent / ""_scripts/cell_ranger_hvg.csv""",constant,,,,"Constant: FILE_CELL_RANGER = Path(__file__).parent / ""_scripts/cell_ranger_hvg.csv""",scverse,scanpy,1.10.1,,,,,"FILE_CELL_RANGER = Path(__file__).parent / ""_scripts/cell_ranger_hvg.csv""",FILE_CELL_RANGER,"Path(__file__).parent / ""_scripts/cell_ranger_hvg.csv""",,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,ascii_letters from string,import,,,,Import: ascii_letters from string,scverse,scanpy,1.10.1,from string import ascii_letters,ascii_letters,string,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,Callable from typing,import,,,,Import: Callable from typing,scverse,scanpy,1.10.1,"from typing import Callable, Literal",Callable,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import Callable, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,assert_frame_equal from pandas.testing,local_import,,,,Import: assert_frame_equal from pandas.testing,scverse,scanpy,1.10.1,"from pandas.testing import assert_frame_equal, assert_index_equal",assert_frame_equal,pandas.testing,pandas.testing,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,assert_index_equal from pandas.testing,local_import,,,,Import: assert_index_equal from pandas.testing,scverse,scanpy,1.10.1,"from pandas.testing import assert_frame_equal, assert_index_equal",assert_index_equal,pandas.testing,pandas.testing,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,_check_check_values_warnings from scanpy.testing._helpers,local_import,,,,Import: _check_check_values_warnings from scanpy.testing._helpers,scverse,scanpy,1.10.1,from scanpy.testing._helpers import _check_check_values_warnings,_check_check_values_warnings,scanpy.testing._helpers,scanpy.testing._helpers,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,pbmc3k from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,"from scanpy.testing._helpers.data import pbmc3k, pbmc68k_reduced",pbmc3k,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,"from scanpy.testing._helpers.data import pbmc3k, pbmc68k_reduced",pbmc68k_reduced,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,needs,scanpy.testing._pytest.marks,scanpy.testing._pytest.marks,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,ARRAY_TYPES from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,from scanpy.testing._pytest.params import ARRAY_TYPES,ARRAY_TYPES,scanpy.testing._pytest.params,scanpy.testing._pytest.params,,,,,,,,,,,,,,
,test_highly_variable_genes.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_highly_variable_genes.py,python,,,,,,Directory: scanpy\tests\test_highly_variable_genes.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,test_representation(adatas),function,test_representation,(adatas),,Function: test_representation(adatas),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,test_neighbors(adatas),function,test_neighbors,(adatas),,Function: test_neighbors(adatas),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,test_ingest_map_embedding_umap(),function,test_ingest_map_embedding_umap,(),,Function: test_ingest_map_embedding_umap(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,"X = np.array(
    [
        [1.0, 2.5, 3.0, 5.0, 8.7],
        [4.2, 7.0, 9.0, 11.0, 7.0],
        [5.1, 2.0, 9.0, 4.0, 9.0],
        [7.0, 9.4, 6.8, 9.1, 8.0],
        [8.9, 8.6, 9.6, 1.0, 2.0],
        [6.5, 8.9, 2.2, 4.5, 8.9],
    ],
    dtype=np.float32,
)",constant,,,,"Constant: X = np.array(
    [
        [1.0, 2.5, 3.0, 5.0, 8.7],
        [4.2, 7.0, 9.0, 11.0, 7.0],
        [5.1, 2.0, 9.0, 4.0, 9.0],
        [7.0, 9.4, 6.8, 9.1, 8.0],
        [8.9, 8.6, 9.6, 1.0, 2.0],
        [6.5, 8.9, 2.2, 4.5, 8.9],
    ],
    dtype=np.float32,
)",scverse,scanpy,1.10.1,,,,,"X = np.array(
    [
        [1.0, 2.5, 3.0, 5.0, 8.7],
        [4.2, 7.0, 9.0, 11.0, 7.0],
        [5.1, 2.0, 9.0, 4.0, 9.0],
        [7.0, 9.4, 6.8, 9.1, 8.0],
        [8.9, 8.6, 9.6, 1.0, 2.0],
        [6.5, 8.9, 2.2, 4.5, 8.9],
    ],
    dtype=np.float32,
)",X,"np.array(
    [
        [1.0, 2.5, 3.0, 5.0, 8.7],
        [4.2, 7.0, 9.0, 11.0, 7.0],
        [5.1, 2.0, 9.0, 4.0, 9.0],
        [7.0, 9.4, 6.8, 9.1, 8.0],
        [8.9, 8.6, 9.6, 1.0, 2.0],
        [6.5, 8.9, 2.2, 4.5, 8.9],
    ],
    dtype=np.float32,
)",,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,"T = np.array([[2.0, 3.5, 4.0, 1.0, 4.7], [3.2, 2.0, 5.0, 5.0, 8.0]], dtype=np.float32)",constant,,,,"Constant: T = np.array([[2.0, 3.5, 4.0, 1.0, 4.7], [3.2, 2.0, 5.0, 5.0, 8.0]], dtype=np.float32)",scverse,scanpy,1.10.1,,,,,"T = np.array([[2.0, 3.5, 4.0, 1.0, 4.7], [3.2, 2.0, 5.0, 5.0, 8.0]], dtype=np.float32)",T,"np.array([[2.0, 3.5, 4.0, 1.0, 4.7], [3.2, 2.0, 5.0, 5.0, 8.0]], dtype=np.float32)",,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,UMAP from umap,import,,,,Import: UMAP from umap,scverse,scanpy,1.10.1,from umap import UMAP,UMAP,umap,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,settings from scanpy,import,,,,Import: settings from scanpy,scverse,scanpy,1.10.1,from scanpy import settings,settings,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,KDTree from sklearn.neighbors,local_import,,,,Import: KDTree from sklearn.neighbors,scverse,scanpy,1.10.1,from sklearn.neighbors import KDTree,KDTree,sklearn.neighbors,sklearn.neighbors,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,pkg_version from scanpy._compat,local_import,,,,Import: pkg_version from scanpy._compat,scverse,scanpy,1.10.1,from scanpy._compat import pkg_version,pkg_version,scanpy._compat,scanpy._compat,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,pbmc68k_reduced,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
,test_ingest.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_ingest.py,python,,,,,,Directory: scanpy\tests\test_ingest.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,[staticmethod] IncTime.now(tz),class_method,,,,Class method: [staticmethod] IncTime.now(tz),scverse,scanpy,1.10.1,,,,,,,,,IncTime,now,(tz),,,,staticmethod,,,
scverse_scanpy_1.10.1,test_logging.py,python,IncTime,class,,,,Class: IncTime,scverse,scanpy,1.10.1,,,,,,,,,IncTime,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,test_defaults(),function,test_defaults,(),,Function: test_defaults(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,test_records(caplog: pytest.LogCaptureFixture),function,test_records,(caplog: pytest.LogCaptureFixture),,Function: test_records(caplog: pytest.LogCaptureFixture),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,test_formats(capsys: pytest.CaptureFixture),function,test_formats,(capsys: pytest.CaptureFixture),,Function: test_formats(capsys: pytest.CaptureFixture),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,test_deep(capsys: pytest.CaptureFixture),function,test_deep,(capsys: pytest.CaptureFixture),,Function: test_deep(capsys: pytest.CaptureFixture),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,"test_logfile(tmp_path: Path, caplog: pytest.LogCaptureFixture)",function,test_logfile,"(tmp_path: Path, caplog: pytest.LogCaptureFixture)",,"Function: test_logfile(tmp_path: Path, caplog: pytest.LogCaptureFixture)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,"test_timing(monkeypatch, capsys: pytest.CaptureFixture)",function,test_timing,"(monkeypatch, capsys: pytest.CaptureFixture)",,"Function: test_timing(monkeypatch, capsys: pytest.CaptureFixture)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,sys,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,redirect_stdout from contextlib,import,,,,Import: redirect_stdout from contextlib,scverse,scanpy,1.10.1,from contextlib import redirect_stdout,redirect_stdout,contextlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,datetime from datetime,import,,,,Import: datetime from datetime,scverse,scanpy,1.10.1,from datetime import datetime,datetime,datetime,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,StringIO from io,import,,,,Import: StringIO from io,scverse,scanpy,1.10.1,from io import StringIO,StringIO,io,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,Verbosity from scanpy,import,,,,Import: Verbosity from scanpy,scverse,scanpy,1.10.1,from scanpy import Verbosity,Verbosity,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,logging from scanpy,import,,,,Import: logging from scanpy,scverse,scanpy,1.10.1,from scanpy import logging as log,logging,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,settings from scanpy,import,,,,Import: settings from scanpy,scverse,scanpy,1.10.1,from scanpy import settings as s,settings,scanpy,,,,,,,,,,,,,,,
,test_logging.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_logging.py,python,,,,,,Directory: scanpy\tests\test_logging.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_marker_gene_overlap.py,python,generate_test_data(),function,generate_test_data,(),,Function: generate_test_data(),scverse,scanpy,1.10.1,,,,,,,,"# Create an artificial data set",,,,,,,,,,
scverse_scanpy_1.10.1,test_marker_gene_overlap.py,python,test_marker_overlap_base(),function,test_marker_overlap_base,(),,Function: test_marker_overlap_base(),scverse,scanpy,1.10.1,,,,,,,,"# Test all overlap calculations on artificial data",,,,,,,,,,
scverse_scanpy_1.10.1,test_marker_gene_overlap.py,python,test_marker_overlap_normalization(),function,test_marker_overlap_normalization,(),,Function: test_marker_overlap_normalization(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_marker_gene_overlap.py,python,test_marker_overlap_methods(),function,test_marker_overlap_methods,(),,Function: test_marker_overlap_methods(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_marker_gene_overlap.py,python,test_marker_overlap_subsetting(),function,test_marker_overlap_subsetting,(),,Function: test_marker_overlap_subsetting(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_marker_gene_overlap.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_marker_gene_overlap.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_marker_gene_overlap.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
,test_marker_gene_overlap.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_marker_gene_overlap.py,python,,,,,,Directory: scanpy\tests\test_marker_gene_overlap.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,"test_consistency(metric, threading)",function,test_consistency,"(metric, threading)",,"Function: test_consistency(metric, threading)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,test_confusion_matrix(),function,test_confusion_matrix,(),,Function: test_confusion_matrix(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,test_confusion_matrix_randomized(),function,test_confusion_matrix_randomized,(),,Function: test_confusion_matrix_randomized(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,test_confusion_matrix_api(),function,test_confusion_matrix_api,(),,Function: test_confusion_matrix_api(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,"mark_flaky = pytest.mark.xfail(
    strict=False,
    reason=""This used to work reliably, but doesn’t anymore"",
)",constant,,,,"Constant: mark_flaky = pytest.mark.xfail(
    strict=False,
    reason=""This used to work reliably, but doesn’t anymore"",
)",scverse,scanpy,1.10.1,,,,,"mark_flaky = pytest.mark.xfail(
    strict=False,
    reason=""This used to work reliably, but doesn’t anymore"",
)",mark_flaky,"pytest.mark.xfail(
    strict=False,
    reason=""This used to work reliably, but doesn’t anymore"",
)",,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,partial,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,eq from operator,import,,,,Import: eq from operator,scverse,scanpy,1.10.1,from operator import eq,eq,operator,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,ascii_letters from string,import,,,,Import: ascii_letters from string,scverse,scanpy,1.10.1,from string import ascii_letters,ascii_letters,string,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,numba,import,,,,Import: numba,scverse,scanpy,1.10.1,import numba,numba,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,threadpoolctl,import,,,,Import: threadpoolctl,scverse,scanpy,1.10.1,import threadpoolctl,threadpoolctl,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,Version from packaging.version,local_import,,,,Import: Version from packaging.version,scverse,scanpy,1.10.1,from packaging.version import Version,Version,packaging.version,packaging.version,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,DaskArray from scanpy._compat,local_import,,,,Import: DaskArray from scanpy._compat,scverse,scanpy,1.10.1,from scanpy._compat import DaskArray,DaskArray,scanpy._compat,scanpy._compat,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,pbmc68k_reduced,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,ARRAY_TYPES from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,from scanpy.testing._pytest.params import ARRAY_TYPES,ARRAY_TYPES,scanpy.testing._pytest.params,scanpy.testing._pytest.params,,,,,,,,,,,,,,
,test_metrics.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_metrics.py,python,,,,,,Directory: scanpy\tests\test_metrics.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,get_neighbors() -> Neighbors,function,get_neighbors,(),Neighbors,Function: get_neighbors() -> Neighbors,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,test_gauss_noknn_connectivities_euclidean(neigh),function,test_gauss_noknn_connectivities_euclidean,(neigh),,Function: test_gauss_noknn_connectivities_euclidean(neigh),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,test_metrics_argument(),function,test_metrics_argument,(),,Function: test_metrics_argument(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,test_use_rep_argument(),function,test_use_rep_argument,(),,Function: test_use_rep_argument(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"X = [[1, 0], [3, 0], [5, 6], [0, 4]]",constant,,,,"Constant: X = [[1, 0], [3, 0], [5, 6], [0, 4]]",scverse,scanpy,1.10.1,,,,,"X = [[1, 0], [3, 0], [5, 6], [0, 4]]",X,"[[1, 0], [3, 0], [5, 6], [0, 4]]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,n_neighbors = 3,constant,,,,Constant: n_neighbors = 3,scverse,scanpy,1.10.1,,,,,n_neighbors = 3,n_neighbors,3,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"distances_euclidean = [
    [0.0, 2.0, 0.0, 4.123105525970459],
    [2.0, 0.0, 0.0, 5.0],
    [0.0, 6.324555397033691, 0.0, 5.385164737701416],
    [4.123105525970459, 5.0, 0.0, 0.0],
]",constant,,,,"Constant: distances_euclidean = [
    [0.0, 2.0, 0.0, 4.123105525970459],
    [2.0, 0.0, 0.0, 5.0],
    [0.0, 6.324555397033691, 0.0, 5.385164737701416],
    [4.123105525970459, 5.0, 0.0, 0.0],
]",scverse,scanpy,1.10.1,,,,,"distances_euclidean = [
    [0.0, 2.0, 0.0, 4.123105525970459],
    [2.0, 0.0, 0.0, 5.0],
    [0.0, 6.324555397033691, 0.0, 5.385164737701416],
    [4.123105525970459, 5.0, 0.0, 0.0],
]",distances_euclidean,"[
    [0.0, 2.0, 0.0, 4.123105525970459],
    [2.0, 0.0, 0.0, 5.0],
    [0.0, 6.324555397033691, 0.0, 5.385164737701416],
    [4.123105525970459, 5.0, 0.0, 0.0],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"distances_euclidean_all = [
    [0.0, 2.0, 7.211102485656738, 4.123105525970459],
    [2.0, 0.0, 6.324555397033691, 5.0],
    [7.211102485656738, 6.324555397033691, 0.0, 5.385164737701416],
    [4.123105525970459, 5.0, 5.385164737701416, 0.0],
]",constant,,,,"Constant: distances_euclidean_all = [
    [0.0, 2.0, 7.211102485656738, 4.123105525970459],
    [2.0, 0.0, 6.324555397033691, 5.0],
    [7.211102485656738, 6.324555397033691, 0.0, 5.385164737701416],
    [4.123105525970459, 5.0, 5.385164737701416, 0.0],
]",scverse,scanpy,1.10.1,,,,,"distances_euclidean_all = [
    [0.0, 2.0, 7.211102485656738, 4.123105525970459],
    [2.0, 0.0, 6.324555397033691, 5.0],
    [7.211102485656738, 6.324555397033691, 0.0, 5.385164737701416],
    [4.123105525970459, 5.0, 5.385164737701416, 0.0],
]",distances_euclidean_all,"[
    [0.0, 2.0, 7.211102485656738, 4.123105525970459],
    [2.0, 0.0, 6.324555397033691, 5.0],
    [7.211102485656738, 6.324555397033691, 0.0, 5.385164737701416],
    [4.123105525970459, 5.0, 5.385164737701416, 0.0],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"connectivities_umap = [
    [0.0, 1.0, 0.0, 1.0],
    [1.0, 0.0, 0.5849691143165735, 0.8277419907567016],
    [0.0, 0.5849691143165735, 0.0, 1.0],
    [1.0, 0.8277419907567016, 1.0, 0.0],
]",constant,,,,"Constant: connectivities_umap = [
    [0.0, 1.0, 0.0, 1.0],
    [1.0, 0.0, 0.5849691143165735, 0.8277419907567016],
    [0.0, 0.5849691143165735, 0.0, 1.0],
    [1.0, 0.8277419907567016, 1.0, 0.0],
]",scverse,scanpy,1.10.1,,,,,"connectivities_umap = [
    [0.0, 1.0, 0.0, 1.0],
    [1.0, 0.0, 0.5849691143165735, 0.8277419907567016],
    [0.0, 0.5849691143165735, 0.0, 1.0],
    [1.0, 0.8277419907567016, 1.0, 0.0],
]",connectivities_umap,"[
    [0.0, 1.0, 0.0, 1.0],
    [1.0, 0.0, 0.5849691143165735, 0.8277419907567016],
    [0.0, 0.5849691143165735, 0.0, 1.0],
    [1.0, 0.8277419907567016, 1.0, 0.0],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"transitions_sym_umap = [
    [0.0, 0.4818987107873648, 0.0, 0.3951883393150153],
    [0.48189871078736474, 0.0, 0.3594582764005241, 0.24216345431293487],
    [0.0, 0.3594582764005241, 0.0, 0.5039226836320637],
    [0.39518833931501524, 0.24216345431293487, 0.5039226836320637, 0.0],
]",constant,,,,"Constant: transitions_sym_umap = [
    [0.0, 0.4818987107873648, 0.0, 0.3951883393150153],
    [0.48189871078736474, 0.0, 0.3594582764005241, 0.24216345431293487],
    [0.0, 0.3594582764005241, 0.0, 0.5039226836320637],
    [0.39518833931501524, 0.24216345431293487, 0.5039226836320637, 0.0],
]",scverse,scanpy,1.10.1,,,,,"transitions_sym_umap = [
    [0.0, 0.4818987107873648, 0.0, 0.3951883393150153],
    [0.48189871078736474, 0.0, 0.3594582764005241, 0.24216345431293487],
    [0.0, 0.3594582764005241, 0.0, 0.5039226836320637],
    [0.39518833931501524, 0.24216345431293487, 0.5039226836320637, 0.0],
]",transitions_sym_umap,"[
    [0.0, 0.4818987107873648, 0.0, 0.3951883393150153],
    [0.48189871078736474, 0.0, 0.3594582764005241, 0.24216345431293487],
    [0.0, 0.3594582764005241, 0.0, 0.5039226836320637],
    [0.39518833931501524, 0.24216345431293487, 0.5039226836320637, 0.0],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"transitions_umap = [
    [0.0, 0.5395987596963403, 0.0, 0.4604012403036599],
    [0.430368608684738, 0.0, 0.3176747629691457, 0.2519566283461165],
    [0.0, 0.40673754271561435, 0.0, 0.5932624572843856],
    [0.33921243006981133, 0.23275092618009624, 0.42803664375009237, 0.0],
]",constant,,,,"Constant: transitions_umap = [
    [0.0, 0.5395987596963403, 0.0, 0.4604012403036599],
    [0.430368608684738, 0.0, 0.3176747629691457, 0.2519566283461165],
    [0.0, 0.40673754271561435, 0.0, 0.5932624572843856],
    [0.33921243006981133, 0.23275092618009624, 0.42803664375009237, 0.0],
]",scverse,scanpy,1.10.1,,,,,"transitions_umap = [
    [0.0, 0.5395987596963403, 0.0, 0.4604012403036599],
    [0.430368608684738, 0.0, 0.3176747629691457, 0.2519566283461165],
    [0.0, 0.40673754271561435, 0.0, 0.5932624572843856],
    [0.33921243006981133, 0.23275092618009624, 0.42803664375009237, 0.0],
]",transitions_umap,"[
    [0.0, 0.5395987596963403, 0.0, 0.4604012403036599],
    [0.430368608684738, 0.0, 0.3176747629691457, 0.2519566283461165],
    [0.0, 0.40673754271561435, 0.0, 0.5932624572843856],
    [0.33921243006981133, 0.23275092618009624, 0.42803664375009237, 0.0],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"connectivities_gauss_knn = [
    [0.0, 0.8466368913650513, 0.0, 0.5660185813903809],
    [0.8466368913650513, 0.0, 0.4223647117614746, 0.4902938902378082],
    [0.0, 0.4223647117614746, 0.0, 0.5840492248535156],
    [0.5660185813903809, 0.4902938902378082, 0.5840492248535156, 0.0],
]",constant,,,,"Constant: connectivities_gauss_knn = [
    [0.0, 0.8466368913650513, 0.0, 0.5660185813903809],
    [0.8466368913650513, 0.0, 0.4223647117614746, 0.4902938902378082],
    [0.0, 0.4223647117614746, 0.0, 0.5840492248535156],
    [0.5660185813903809, 0.4902938902378082, 0.5840492248535156, 0.0],
]",scverse,scanpy,1.10.1,,,,,"connectivities_gauss_knn = [
    [0.0, 0.8466368913650513, 0.0, 0.5660185813903809],
    [0.8466368913650513, 0.0, 0.4223647117614746, 0.4902938902378082],
    [0.0, 0.4223647117614746, 0.0, 0.5840492248535156],
    [0.5660185813903809, 0.4902938902378082, 0.5840492248535156, 0.0],
]",connectivities_gauss_knn,"[
    [0.0, 0.8466368913650513, 0.0, 0.5660185813903809],
    [0.8466368913650513, 0.0, 0.4223647117614746, 0.4902938902378082],
    [0.0, 0.4223647117614746, 0.0, 0.5840492248535156],
    [0.5660185813903809, 0.4902938902378082, 0.5840492248535156, 0.0],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"connectivities_gauss_noknn = [
    [1.0, 0.676927387714386, 0.024883469566702843, 0.1962655782699585],
    [0.676927387714386, 1.0, 0.08414449542760849, 0.1353352814912796],
    [0.024883469566702843, 0.08414449542760849, 1.0, 0.16558068990707397],
    [0.1962655782699585, 0.1353352814912796, 0.16558068990707397, 1.0],
]",constant,,,,"Constant: connectivities_gauss_noknn = [
    [1.0, 0.676927387714386, 0.024883469566702843, 0.1962655782699585],
    [0.676927387714386, 1.0, 0.08414449542760849, 0.1353352814912796],
    [0.024883469566702843, 0.08414449542760849, 1.0, 0.16558068990707397],
    [0.1962655782699585, 0.1353352814912796, 0.16558068990707397, 1.0],
]",scverse,scanpy,1.10.1,,,,,"connectivities_gauss_noknn = [
    [1.0, 0.676927387714386, 0.024883469566702843, 0.1962655782699585],
    [0.676927387714386, 1.0, 0.08414449542760849, 0.1353352814912796],
    [0.024883469566702843, 0.08414449542760849, 1.0, 0.16558068990707397],
    [0.1962655782699585, 0.1353352814912796, 0.16558068990707397, 1.0],
]",connectivities_gauss_noknn,"[
    [1.0, 0.676927387714386, 0.024883469566702843, 0.1962655782699585],
    [0.676927387714386, 1.0, 0.08414449542760849, 0.1353352814912796],
    [0.024883469566702843, 0.08414449542760849, 1.0, 0.16558068990707397],
    [0.1962655782699585, 0.1353352814912796, 0.16558068990707397, 1.0],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"transitions_sym_gauss_knn = [
    [0.0, 0.5146393179893494, 0.0, 0.36445462703704834],
    [0.5146393179893494, 0.0, 0.3581143319606781, 0.2239987552165985],
    [0.0, 0.3581143319606781, 0.0, 0.5245543718338013],
    [0.36445462703704834, 0.2239987552165985, 0.5245543718338013, 0.0],
]",constant,,,,"Constant: transitions_sym_gauss_knn = [
    [0.0, 0.5146393179893494, 0.0, 0.36445462703704834],
    [0.5146393179893494, 0.0, 0.3581143319606781, 0.2239987552165985],
    [0.0, 0.3581143319606781, 0.0, 0.5245543718338013],
    [0.36445462703704834, 0.2239987552165985, 0.5245543718338013, 0.0],
]",scverse,scanpy,1.10.1,,,,,"transitions_sym_gauss_knn = [
    [0.0, 0.5146393179893494, 0.0, 0.36445462703704834],
    [0.5146393179893494, 0.0, 0.3581143319606781, 0.2239987552165985],
    [0.0, 0.3581143319606781, 0.0, 0.5245543718338013],
    [0.36445462703704834, 0.2239987552165985, 0.5245543718338013, 0.0],
]",transitions_sym_gauss_knn,"[
    [0.0, 0.5146393179893494, 0.0, 0.36445462703704834],
    [0.5146393179893494, 0.0, 0.3581143319606781, 0.2239987552165985],
    [0.0, 0.3581143319606781, 0.0, 0.5245543718338013],
    [0.36445462703704834, 0.2239987552165985, 0.5245543718338013, 0.0],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"transitions_sym_gauss_noknn = [
    [
        0.5093212127685547,
        0.34393802285194397,
        0.016115963459014893,
        0.11607448011636734,
    ],
    [0.34393805265426636, 0.506855845451355, 0.054364752024412155, 0.07984541356563568],
    [
        0.016115965321660042,
        0.054364752024412155,
        0.8235670328140259,
        0.12452481687068939,
    ],
    [0.11607448011636734, 0.07984541356563568, 0.1245248094201088, 0.6867417693138123],
]",constant,,,,"Constant: transitions_sym_gauss_noknn = [
    [
        0.5093212127685547,
        0.34393802285194397,
        0.016115963459014893,
        0.11607448011636734,
    ],
    [0.34393805265426636, 0.506855845451355, 0.054364752024412155, 0.07984541356563568],
    [
        0.016115965321660042,
        0.054364752024412155,
        0.8235670328140259,
        0.12452481687068939,
    ],
    [0.11607448011636734, 0.07984541356563568, 0.1245248094201088, 0.6867417693138123],
]",scverse,scanpy,1.10.1,,,,,"transitions_sym_gauss_noknn = [
    [
        0.5093212127685547,
        0.34393802285194397,
        0.016115963459014893,
        0.11607448011636734,
    ],
    [0.34393805265426636, 0.506855845451355, 0.054364752024412155, 0.07984541356563568],
    [
        0.016115965321660042,
        0.054364752024412155,
        0.8235670328140259,
        0.12452481687068939,
    ],
    [0.11607448011636734, 0.07984541356563568, 0.1245248094201088, 0.6867417693138123],
]",transitions_sym_gauss_noknn,"[
    [
        0.5093212127685547,
        0.34393802285194397,
        0.016115963459014893,
        0.11607448011636734,
    ],
    [0.34393805265426636, 0.506855845451355, 0.054364752024412155, 0.07984541356563568],
    [
        0.016115965321660042,
        0.054364752024412155,
        0.8235670328140259,
        0.12452481687068939,
    ],
    [0.11607448011636734, 0.07984541356563568, 0.1245248094201088, 0.6867417693138123],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"transitions_gauss_knn = [
    [0.0, 0.5824036598205566, 0.0, 0.4175964295864105],
    [0.4547595679759979, 0.0, 0.3184431493282318, 0.22679725289344788],
    [0.0, 0.4027276933193207, 0.0, 0.5972723364830017],
    [0.3180755078792572, 0.22123482823371887, 0.46068981289863586, 0.0],
]",constant,,,,"Constant: transitions_gauss_knn = [
    [0.0, 0.5824036598205566, 0.0, 0.4175964295864105],
    [0.4547595679759979, 0.0, 0.3184431493282318, 0.22679725289344788],
    [0.0, 0.4027276933193207, 0.0, 0.5972723364830017],
    [0.3180755078792572, 0.22123482823371887, 0.46068981289863586, 0.0],
]",scverse,scanpy,1.10.1,,,,,"transitions_gauss_knn = [
    [0.0, 0.5824036598205566, 0.0, 0.4175964295864105],
    [0.4547595679759979, 0.0, 0.3184431493282318, 0.22679725289344788],
    [0.0, 0.4027276933193207, 0.0, 0.5972723364830017],
    [0.3180755078792572, 0.22123482823371887, 0.46068981289863586, 0.0],
]",transitions_gauss_knn,"[
    [0.0, 0.5824036598205566, 0.0, 0.4175964295864105],
    [0.4547595679759979, 0.0, 0.3184431493282318, 0.22679725289344788],
    [0.0, 0.4027276933193207, 0.0, 0.5972723364830017],
    [0.3180755078792572, 0.22123482823371887, 0.46068981289863586, 0.0],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"transitions_gauss_noknn = [
    [0.5093212127685547, 0.3450769782066345, 0.01887294091284275, 0.12672874331474304],
    [0.34280285239219666, 0.506855845451355, 0.06345486640930176, 0.08688655495643616],
    [0.01376173086464405, 0.04657683148980141, 0.8235670328140259, 0.11609435081481934],
    [0.10631592571735382, 0.07337487488985062, 0.13356748223304749, 0.6867417693138123],
]",constant,,,,"Constant: transitions_gauss_noknn = [
    [0.5093212127685547, 0.3450769782066345, 0.01887294091284275, 0.12672874331474304],
    [0.34280285239219666, 0.506855845451355, 0.06345486640930176, 0.08688655495643616],
    [0.01376173086464405, 0.04657683148980141, 0.8235670328140259, 0.11609435081481934],
    [0.10631592571735382, 0.07337487488985062, 0.13356748223304749, 0.6867417693138123],
]",scverse,scanpy,1.10.1,,,,,"transitions_gauss_noknn = [
    [0.5093212127685547, 0.3450769782066345, 0.01887294091284275, 0.12672874331474304],
    [0.34280285239219666, 0.506855845451355, 0.06345486640930176, 0.08688655495643616],
    [0.01376173086464405, 0.04657683148980141, 0.8235670328140259, 0.11609435081481934],
    [0.10631592571735382, 0.07337487488985062, 0.13356748223304749, 0.6867417693138123],
]",transitions_gauss_noknn,"[
    [0.5093212127685547, 0.3450769782066345, 0.01887294091284275, 0.12672874331474304],
    [0.34280285239219666, 0.506855845451355, 0.06345486640930176, 0.08688655495643616],
    [0.01376173086464405, 0.04657683148980141, 0.8235670328140259, 0.11609435081481934],
    [0.10631592571735382, 0.07337487488985062, 0.13356748223304749, 0.6867417693138123],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,Neighbors from scanpy,import,,,,Import: Neighbors from scanpy,scverse,scanpy,1.10.1,from scanpy import Neighbors,Neighbors,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse",csr_matrix,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse",issparse,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,KNeighborsTransformer from sklearn.neighbors,local_import,,,,Import: KNeighborsTransformer from sklearn.neighbors,scverse,scanpy,1.10.1,from sklearn.neighbors import KNeighborsTransformer,KNeighborsTransformer,sklearn.neighbors,sklearn.neighbors,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,anndata_v0_8_constructor_compat from scanpy.testing._helpers,local_import,,,,Import: anndata_v0_8_constructor_compat from scanpy.testing._helpers,scverse,scanpy,1.10.1,from scanpy.testing._helpers import anndata_v0_8_constructor_compat,anndata_v0_8_constructor_compat,scanpy.testing._helpers,scanpy.testing._helpers,,,,,,,,,,,,,,
,test_neighbors.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_neighbors.py,python,,,,,,Directory: scanpy\tests\test_neighbors.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_common.py,python,"mk_knn_matrix(
    n_obs: int,
    n_neighbors: int,
    *,
    style: Literal[""basic"", ""rapids"", ""sklearn""],
    duplicates: bool = False,
) -> sparse.csr_matrix",function,mk_knn_matrix,"(
    n_obs: int,
    n_neighbors: int,
    *,
    style: Literal[""basic"", ""rapids"", ""sklearn""],
    duplicates: bool = False,
)",sparse.csr_matrix,"Function: mk_knn_matrix(
    n_obs: int,
    n_neighbors: int,
    *,
    style: Literal[""basic"", ""rapids"", ""sklearn""],
    duplicates: bool = False,
) -> sparse.csr_matrix",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_common.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_common.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_common.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_common.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_common.py,python,KNeighborsTransformer from sklearn.neighbors,local_import,,,,Import: KNeighborsTransformer from sklearn.neighbors,scverse,scanpy,1.10.1,from sklearn.neighbors import KNeighborsTransformer,KNeighborsTransformer,sklearn.neighbors,sklearn.neighbors,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_common.py,python,is_constant from scanpy._utils.compute.is_constant,local_import,,,,Import: is_constant from scanpy._utils.compute.is_constant,scverse,scanpy,1.10.1,from scanpy._utils.compute.is_constant import is_constant,is_constant,scanpy._utils.compute.is_constant,scanpy._utils.compute.is_constant,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_common.py,python,_get_sparse_matrix_from_indices_distances from scanpy.neighbors._common,local_import,,,,Import: _get_sparse_matrix_from_indices_distances from scanpy.neighbors._common,scverse,scanpy,1.10.1,"from scanpy.neighbors._common import (
    _get_sparse_matrix_from_indices_distances,
    _has_self_column,
    _ind_dist_shortcut,
)",_get_sparse_matrix_from_indices_distances,scanpy.neighbors._common,scanpy.neighbors._common,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_common.py,python,_has_self_column from scanpy.neighbors._common,local_import,,,,Import: _has_self_column from scanpy.neighbors._common,scverse,scanpy,1.10.1,"from scanpy.neighbors._common import (
    _get_sparse_matrix_from_indices_distances,
    _has_self_column,
    _ind_dist_shortcut,
)",_has_self_column,scanpy.neighbors._common,scanpy.neighbors._common,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_common.py,python,_ind_dist_shortcut from scanpy.neighbors._common,local_import,,,,Import: _ind_dist_shortcut from scanpy.neighbors._common,scverse,scanpy,1.10.1,"from scanpy.neighbors._common import (
    _get_sparse_matrix_from_indices_distances,
    _has_self_column,
    _ind_dist_shortcut,
)",_ind_dist_shortcut,scanpy.neighbors._common,scanpy.neighbors._common,,,,,,,,,,,,,,
,test_neighbors_common.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_neighbors_common.py,python,,,,,,Directory: scanpy\tests\test_neighbors_common.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_key_added.py,python,test_neighbors_key_added(adata),function,test_neighbors_key_added,(adata),,Function: test_neighbors_key_added(adata),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_key_added.py,python,n_neighbors = 5,constant,,,,Constant: n_neighbors = 5,scverse,scanpy,1.10.1,,,,,n_neighbors = 5,n_neighbors,5,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_key_added.py,python,"key = ""test""",constant,,,,"Constant: key = ""test""",scverse,scanpy,1.10.1,,,,,"key = ""test""",key,"""test""",,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_key_added.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_key_added.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_key_added.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_key_added.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,pbmc68k_reduced,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_key_added.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,needs,scanpy.testing._pytest.marks,scanpy.testing._pytest.marks,,,,,,,,,,,,,,
,test_neighbors_key_added.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_neighbors_key_added.py,python,,,,,,Directory: scanpy\tests\test_neighbors_key_added.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,test_normalize_pearson_residuals_warnings(pbmc3k_parametrized),function,test_normalize_pearson_residuals_warnings,(pbmc3k_parametrized),,Function: test_normalize_pearson_residuals_warnings(pbmc3k_parametrized),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,"_check_pearson_pca_fields(ad, n_cells, n_comps)",function,_check_pearson_pca_fields,"(ad, n_cells, n_comps)",,"Function: _check_pearson_pca_fields(ad, n_cells, n_comps)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,"X_total = np.array([[1, 0], [3, 0], [5, 6]])",constant,,,,"Constant: X_total = np.array([[1, 0], [3, 0], [5, 6]])",scverse,scanpy,1.10.1,,,,,"X_total = np.array([[1, 0], [3, 0], [5, 6]])",X_total,"np.array([[1, 0], [3, 0], [5, 6]])",,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,"X_frac = np.array([[1, 0, 1], [3, 0, 1], [5, 6, 1]])",constant,,,,"Constant: X_frac = np.array([[1, 0, 1], [3, 0, 1], [5, 6, 1]])",scverse,scanpy,1.10.1,,,,,"X_frac = np.array([[1, 0, 1], [3, 0, 1], [5, 6, 1]])",X_frac,"np.array([[1, 0, 1], [3, 0, 1], [5, 6, 1]])",,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",Any,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,assert_equal from anndata.tests.helpers,local_import,,,,Import: assert_equal from anndata.tests.helpers,scverse,scanpy,1.10.1,from anndata.tests.helpers import assert_equal,assert_equal,anndata.tests.helpers,anndata.tests.helpers,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import csr_matrix,csr_matrix,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,issparse from sklearn.utils,local_import,,,,Import: issparse from sklearn.utils,scverse,scanpy,1.10.1,from sklearn.utils import issparse,issparse,sklearn.utils,sklearn.utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,axis_sum from scanpy._utils,local_import,,,,Import: axis_sum from scanpy._utils,scverse,scanpy,1.10.1,from scanpy._utils import axis_sum,axis_sum,scanpy._utils,scanpy._utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,_check_check_values_warnings from scanpy.testing._helpers,local_import,,,,Import: _check_check_values_warnings from scanpy.testing._helpers,scverse,scanpy,1.10.1,"from scanpy.testing._helpers import (
    _check_check_values_warnings,
    check_rep_mutation,
    check_rep_results,
)",_check_check_values_warnings,scanpy.testing._helpers,scanpy.testing._helpers,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,check_rep_mutation from scanpy.testing._helpers,local_import,,,,Import: check_rep_mutation from scanpy.testing._helpers,scverse,scanpy,1.10.1,"from scanpy.testing._helpers import (
    _check_check_values_warnings,
    check_rep_mutation,
    check_rep_results,
)",check_rep_mutation,scanpy.testing._helpers,scanpy.testing._helpers,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,check_rep_results from scanpy.testing._helpers,local_import,,,,Import: check_rep_results from scanpy.testing._helpers,scverse,scanpy,1.10.1,"from scanpy.testing._helpers import (
    _check_check_values_warnings,
    check_rep_mutation,
    check_rep_results,
)",check_rep_results,scanpy.testing._helpers,scanpy.testing._helpers,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,ARRAY_TYPES from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,from scanpy.testing._pytest.params import ARRAY_TYPES,ARRAY_TYPES,scanpy.testing._pytest.params,scanpy.testing._pytest.params,,,,,,,,,,,,,,
,test_normalization.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_normalization.py,python,,,,,,Directory: scanpy\tests\test_normalization.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,ExpectedSig.first_name: str,class_field,,,,Class field: ExpectedSig.first_name: str,scverse,scanpy,1.10.1,,,,,,,,,ExpectedSig,,,first_name: str,,,,,first_name,
scverse_scanpy_1.10.1,test_package_structure.py,python,ExpectedSig.copy_default: Any,class_field,,,,Class field: ExpectedSig.copy_default: Any,scverse,scanpy,1.10.1,,,,,,,,,ExpectedSig,,,copy_default: Any,,,,,copy_default,
scverse_scanpy_1.10.1,test_package_structure.py,python,ExpectedSig.return_ann: str | None,class_field,,,,Class field: ExpectedSig.return_ann: str | None,scverse,scanpy,1.10.1,,,,,,,,,ExpectedSig,,,return_ann: str | None,,,,,return_ann,
scverse_scanpy_1.10.1,test_package_structure.py,python,ExpectedSig(TypedDict),class,,,,Class: ExpectedSig(TypedDict),scverse,scanpy,1.10.1,,,,,,,,,ExpectedSig,,,,,,,(TypedDict),,
scverse_scanpy_1.10.1,test_package_structure.py,python,param_is_pos(p: Parameter) -> bool,function,param_is_pos,(p: Parameter),bool,Function: param_is_pos(p: Parameter) -> bool,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,is_deprecated(f: FunctionType) -> bool,function,is_deprecated,(f: FunctionType),bool,Function: is_deprecated(f: FunctionType) -> bool,scverse,scanpy,1.10.1,,,,,,,,"# TODO: use deprecated decorator instead",,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,is_deprecated(f: FunctionType) -> bool,function,is_deprecated,(f: FunctionType),bool,Function: is_deprecated(f: FunctionType) -> bool,scverse,scanpy,1.10.1,,,,,,,,"# https://github.com/scverse/scanpy/issues/2505",,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,getsourcefile(obj),function,getsourcefile,(obj),,Function: getsourcefile(obj),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,getsourcelines(obj),function,getsourcelines,(obj),,Function: getsourcelines(obj),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,mod_dir = Path(scanpy.__file__).parent,constant,,,,Constant: mod_dir = Path(scanpy.__file__).parent,scverse,scanpy,1.10.1,,,,,mod_dir = Path(scanpy.__file__).parent,mod_dir,Path(scanpy.__file__).parent,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,proj_dir = mod_dir.parent,constant,,,,Constant: proj_dir = mod_dir.parent,scverse,scanpy,1.10.1,,,,,proj_dir = mod_dir.parent,proj_dir,mod_dir.parent,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,"api_module_names = [
    ""sc"",
    ""sc.pp"",
    ""sc.tl"",
    ""sc.pl"",
    ""sc.experimental.pp"",
    ""sc.external.pp"",
    ""sc.external.tl"",
    ""sc.external.pl"",
    ""sc.external.exporting"",
    ""sc.get"",
    ""sc.logging"",
    # ""sc.neighbors"",  # Not documented
    ""sc.datasets"",
    ""sc.queries"",
    ""sc.metrics"",
]",constant,,,,"Constant: api_module_names = [
    ""sc"",
    ""sc.pp"",
    ""sc.tl"",
    ""sc.pl"",
    ""sc.experimental.pp"",
    ""sc.external.pp"",
    ""sc.external.tl"",
    ""sc.external.pl"",
    ""sc.external.exporting"",
    ""sc.get"",
    ""sc.logging"",
    # ""sc.neighbors"",  # Not documented
    ""sc.datasets"",
    ""sc.queries"",
    ""sc.metrics"",
]",scverse,scanpy,1.10.1,,,,,"api_module_names = [
    ""sc"",
    ""sc.pp"",
    ""sc.tl"",
    ""sc.pl"",
    ""sc.experimental.pp"",
    ""sc.external.pp"",
    ""sc.external.tl"",
    ""sc.external.pl"",
    ""sc.external.exporting"",
    ""sc.get"",
    ""sc.logging"",
    # ""sc.neighbors"",  # Not documented
    ""sc.datasets"",
    ""sc.queries"",
    ""sc.metrics"",
]",api_module_names,"[
    ""sc"",
    ""sc.pp"",
    ""sc.tl"",
    ""sc.pl"",
    ""sc.experimental.pp"",
    ""sc.external.pp"",
    ""sc.external.tl"",
    ""sc.external.pl"",
    ""sc.external.exporting"",
    ""sc.get"",
    ""sc.logging"",
    # ""sc.neighbors"",  # Not documented
    ""sc.datasets"",
    ""sc.queries"",
    ""sc.metrics"",
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,"api_modules = {
    mod_name: _import_name(f""scanpy{mod_name.removeprefix('sc')}"")
    for mod_name in api_module_names
}",constant,,,,"Constant: api_modules = {
    mod_name: _import_name(f""scanpy{mod_name.removeprefix('sc')}"")
    for mod_name in api_module_names
}",scverse,scanpy,1.10.1,,,,,"api_modules = {
    mod_name: _import_name(f""scanpy{mod_name.removeprefix('sc')}"")
    for mod_name in api_module_names
}",api_modules,"{
    mod_name: _import_name(f""scanpy{mod_name.removeprefix('sc')}"")
    for mod_name in api_module_names
}",,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,"api_functions = [
    pytest.param(func, f""{mod_name}.{name}"", id=f""{mod_name}.{name}"")
    for mod_name, mod in api_modules.items()
    for name in sorted(mod.__all__)
    if callable(func := getattr(mod, name)) and func.__module__.startswith(""scanpy."")
]",constant,,,,"Constant: api_functions = [
    pytest.param(func, f""{mod_name}.{name}"", id=f""{mod_name}.{name}"")
    for mod_name, mod in api_modules.items()
    for name in sorted(mod.__all__)
    if callable(func := getattr(mod, name)) and func.__module__.startswith(""scanpy."")
]",scverse,scanpy,1.10.1,,,,,"api_functions = [
    pytest.param(func, f""{mod_name}.{name}"", id=f""{mod_name}.{name}"")
    for mod_name, mod in api_modules.items()
    for name in sorted(mod.__all__)
    if callable(func := getattr(mod, name)) and func.__module__.startswith(""scanpy."")
]",api_functions,"[
    pytest.param(func, f""{mod_name}.{name}"", id=f""{mod_name}.{name}"")
    for mod_name, mod in api_modules.items()
    for name in sorted(mod.__all__)
    if callable(func := getattr(mod, name)) and func.__module__.startswith(""scanpy."")
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,"copy_sigs: defaultdict[str, ExpectedSig | None] = defaultdict(
    lambda: ExpectedSig(first_name=""adata"", copy_default=False, return_ann=None)
)",constant,,,,"Constant: copy_sigs: defaultdict[str, ExpectedSig | None] = defaultdict(
    lambda: ExpectedSig(first_name=""adata"", copy_default=False, return_ann=None)
)",scverse,scanpy,1.10.1,,,,,"copy_sigs: defaultdict[str, ExpectedSig | None] = defaultdict(
    lambda: ExpectedSig(first_name=""adata"", copy_default=False, return_ann=None)
)",copy_sigs,"defaultdict(
    lambda: ExpectedSig(first_name=""adata"", copy_default=False, return_ann=None)
)",,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,os,import,,,,Import: os,scverse,scanpy,1.10.1,import os,os,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,defaultdict from collections,import,,,,Import: defaultdict from collections,scverse,scanpy,1.10.1,from collections import defaultdict,defaultdict,collections,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,Parameter from inspect,import,,,,Import: Parameter from inspect,scverse,scanpy,1.10.1,"from inspect import Parameter, signature",Parameter,inspect,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,signature from inspect,import,,,,Import: signature from inspect,scverse,scanpy,1.10.1,"from inspect import Parameter, signature",signature,inspect,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, TypedDict",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, TypedDict",Any,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,TypedDict from typing,import,,,,Import: TypedDict from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, TypedDict",TypedDict,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,scanpy.cli,import,,,,Import: scanpy.cli,scverse,scanpy,1.10.1,import scanpy.cli,scanpy.cli,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,_import_name from scanpy._utils,local_import,,,,Import: _import_name from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import _import_name, descend_classes_and_funcs",_import_name,scanpy._utils,scanpy._utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,descend_classes_and_funcs from scanpy._utils,local_import,,,,Import: descend_classes_and_funcs from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import _import_name, descend_classes_and_funcs",descend_classes_and_funcs,scanpy._utils,scanpy._utils,,,,,,,,,,,,,,
,test_package_structure.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_package_structure.py,python,,,,,,Directory: scanpy\tests\test_package_structure.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,"test_paga_pie(image_comparer, pbmc)",function,test_paga_pie,"(image_comparer, pbmc)",,"Function: test_paga_pie(image_comparer, pbmc)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,"test_paga_path(image_comparer, pbmc)",function,test_paga_path,"(image_comparer, pbmc)",,"Function: test_paga_path(image_comparer, pbmc)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,test_paga_compare(image_comparer),function,test_paga_compare,(image_comparer),,Function: test_paga_compare(image_comparer),scverse,scanpy,1.10.1,,,,,,,,"# Tests that https://github.com/scverse/scanpy/issues/1887 is fixed",,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,test_paga_positions_reproducible(),function,test_paga_positions_reproducible,(),,Function: test_paga_positions_reproducible(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,HERE: Path = Path(__file__).parent,constant,,,,Constant: HERE: Path = Path(__file__).parent,scverse,scanpy,1.10.1,,,,,HERE: Path = Path(__file__).parent,HERE,Path(__file__).parent,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,"ROOT = HERE / ""_images""",constant,,,,"Constant: ROOT = HERE / ""_images""",scverse,scanpy,1.10.1,,,,,"ROOT = HERE / ""_images""",ROOT,"HERE / ""_images""",,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,pytestmark = [needs.igraph],constant,,,,Constant: pytestmark = [needs.igraph],scverse,scanpy,1.10.1,,,,,pytestmark = [needs.igraph],pytestmark,[needs.igraph],,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,partial,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,cm from matplotlib,import,,,,Import: cm from matplotlib,scverse,scanpy,1.10.1,from matplotlib import cm,cm,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,pbmc3k_processed from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k_processed from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,"from scanpy.testing._helpers.data import pbmc3k_processed, pbmc68k_reduced",pbmc3k_processed,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,"from scanpy.testing._helpers.data import pbmc3k_processed, pbmc68k_reduced",pbmc68k_reduced,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,needs,scanpy.testing._pytest.marks,scanpy.testing._pytest.marks,,,,,,,,,,,,,,
,test_paga.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_paga.py,python,,,,,,Directory: scanpy\tests\test_paga.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,"test_pca_warnings(array_type, zero_center, pca_params)",function,test_pca_warnings,"(array_type, zero_center, pca_params)",,"Function: test_pca_warnings(array_type, zero_center, pca_params)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,test_pca_warnings_sparse(),function,test_pca_warnings_sparse,(),,Function: test_pca_warnings_sparse(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,test_pca_transform(array_type),function,test_pca_transform,(array_type),,Function: test_pca_transform(array_type),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,test_pca_shapes(),function,test_pca_shapes,(),,Function: test_pca_shapes(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,test_pca_sparse(),function,test_pca_sparse,(),,Function: test_pca_sparse(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,test_pca_reproducible(array_type),function,test_pca_reproducible,(array_type),,Function: test_pca_reproducible(array_type),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,test_pca_chunked(),function,test_pca_chunked,(),,Function: test_pca_chunked(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,test_pca_n_pcs(),function,test_pca_n_pcs,(),,Function: test_pca_n_pcs(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,test_mask_length_error(),function,test_mask_length_error,(),,Function: test_mask_length_error(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,"test_mask_var_argument_equivalence(float_dtype, array_type)",function,test_mask_var_argument_equivalence,"(float_dtype, array_type)",,"Function: test_mask_var_argument_equivalence(float_dtype, array_type)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,"test_mask(array_type, request)",function,test_mask,"(array_type, request)",,"Function: test_mask(array_type, request)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,test_mask_order_warning(request),function,test_mask_order_warning,(request),,Function: test_mask_order_warning(request),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,"test_mask_defaults(array_type, float_dtype)",function,test_mask_defaults,"(array_type, float_dtype)",,"Function: test_mask_defaults(array_type, float_dtype)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,test_pca_layer(),function,test_pca_layer,(),,Function: test_pca_layer(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,"A_list = np.array(
    [
        [0, 0, 7, 0, 0],
        [8, 5, 0, 2, 0],
        [6, 0, 0, 2, 5],
        [0, 0, 0, 1, 0],
        [8, 8, 2, 1, 0],
        [0, 0, 0, 4, 5],
    ]
)",constant,,,,"Constant: A_list = np.array(
    [
        [0, 0, 7, 0, 0],
        [8, 5, 0, 2, 0],
        [6, 0, 0, 2, 5],
        [0, 0, 0, 1, 0],
        [8, 8, 2, 1, 0],
        [0, 0, 0, 4, 5],
    ]
)",scverse,scanpy,1.10.1,,,,,"A_list = np.array(
    [
        [0, 0, 7, 0, 0],
        [8, 5, 0, 2, 0],
        [6, 0, 0, 2, 5],
        [0, 0, 0, 1, 0],
        [8, 8, 2, 1, 0],
        [0, 0, 0, 4, 5],
    ]
)",A_list,"np.array(
    [
        [0, 0, 7, 0, 0],
        [8, 5, 0, 2, 0],
        [6, 0, 0, 2, 5],
        [0, 0, 0, 1, 0],
        [8, 8, 2, 1, 0],
        [0, 0, 0, 4, 5],
    ]
)",,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,"A_pca = np.array(
    [
        [-4.4783009, 5.55508466, 1.73111572, -0.06029139, 0.17292555],
        [5.4855141, -0.42651191, -0.74776055, -0.74532146, 0.74633582],
        [0.01161428, -4.0156662, 2.37252748, -1.33122372, -0.29044446],
        [-3.61934397, 0.48525412, -2.96861931, -1.16312545, -0.33230607],
        [7.14050048, 1.86330409, -0.05786325, 1.25045782, -0.50213107],
        [-4.53998399, -3.46146476, -0.32940009, 2.04950419, 0.20562023],
    ]
)",constant,,,,"Constant: A_pca = np.array(
    [
        [-4.4783009, 5.55508466, 1.73111572, -0.06029139, 0.17292555],
        [5.4855141, -0.42651191, -0.74776055, -0.74532146, 0.74633582],
        [0.01161428, -4.0156662, 2.37252748, -1.33122372, -0.29044446],
        [-3.61934397, 0.48525412, -2.96861931, -1.16312545, -0.33230607],
        [7.14050048, 1.86330409, -0.05786325, 1.25045782, -0.50213107],
        [-4.53998399, -3.46146476, -0.32940009, 2.04950419, 0.20562023],
    ]
)",scverse,scanpy,1.10.1,,,,,"A_pca = np.array(
    [
        [-4.4783009, 5.55508466, 1.73111572, -0.06029139, 0.17292555],
        [5.4855141, -0.42651191, -0.74776055, -0.74532146, 0.74633582],
        [0.01161428, -4.0156662, 2.37252748, -1.33122372, -0.29044446],
        [-3.61934397, 0.48525412, -2.96861931, -1.16312545, -0.33230607],
        [7.14050048, 1.86330409, -0.05786325, 1.25045782, -0.50213107],
        [-4.53998399, -3.46146476, -0.32940009, 2.04950419, 0.20562023],
    ]
)",A_pca,"np.array(
    [
        [-4.4783009, 5.55508466, 1.73111572, -0.06029139, 0.17292555],
        [5.4855141, -0.42651191, -0.74776055, -0.74532146, 0.74633582],
        [0.01161428, -4.0156662, 2.37252748, -1.33122372, -0.29044446],
        [-3.61934397, 0.48525412, -2.96861931, -1.16312545, -0.33230607],
        [7.14050048, 1.86330409, -0.05786325, 1.25045782, -0.50213107],
        [-4.53998399, -3.46146476, -0.32940009, 2.04950419, 0.20562023],
    ]
)",,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,"A_svd = np.array(
    [
        [-0.77034038, -2.00750922, 6.64603489, -0.39669256, -0.22212097],
        [-9.47135856, -0.6326006, -1.33787112, -0.24894361, -1.02044665],
        [-5.90007339, 4.99658727, 0.70712592, -2.15188849, 0.30430008],
        [-0.19132409, 0.42172251, 0.11169531, 0.50977966, -0.71637566],
        [-11.1286238, -2.73045559, 0.08040596, 1.06850585, 0.74173764],
        [-1.50180389, 5.56886849, 1.64034442, 2.24476032, -0.05109001],
    ]
)",constant,,,,"Constant: A_svd = np.array(
    [
        [-0.77034038, -2.00750922, 6.64603489, -0.39669256, -0.22212097],
        [-9.47135856, -0.6326006, -1.33787112, -0.24894361, -1.02044665],
        [-5.90007339, 4.99658727, 0.70712592, -2.15188849, 0.30430008],
        [-0.19132409, 0.42172251, 0.11169531, 0.50977966, -0.71637566],
        [-11.1286238, -2.73045559, 0.08040596, 1.06850585, 0.74173764],
        [-1.50180389, 5.56886849, 1.64034442, 2.24476032, -0.05109001],
    ]
)",scverse,scanpy,1.10.1,,,,,"A_svd = np.array(
    [
        [-0.77034038, -2.00750922, 6.64603489, -0.39669256, -0.22212097],
        [-9.47135856, -0.6326006, -1.33787112, -0.24894361, -1.02044665],
        [-5.90007339, 4.99658727, 0.70712592, -2.15188849, 0.30430008],
        [-0.19132409, 0.42172251, 0.11169531, 0.50977966, -0.71637566],
        [-11.1286238, -2.73045559, 0.08040596, 1.06850585, 0.74173764],
        [-1.50180389, 5.56886849, 1.64034442, 2.24476032, -0.05109001],
    ]
)",A_svd,"np.array(
    [
        [-0.77034038, -2.00750922, 6.64603489, -0.39669256, -0.22212097],
        [-9.47135856, -0.6326006, -1.33787112, -0.24894361, -1.02044665],
        [-5.90007339, 4.99658727, 0.70712592, -2.15188849, 0.30430008],
        [-0.19132409, 0.42172251, 0.11169531, 0.50977966, -0.71637566],
        [-11.1286238, -2.73045559, 0.08040596, 1.06850585, 0.74173764],
        [-1.50180389, 5.56886849, 1.64034442, 2.24476032, -0.05109001],
    ]
)",,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,from typing import Literal,Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,anndata,import,,,,Import: anndata,scverse,scanpy,1.10.1,import anndata as ad,anndata,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,asarray from anndata.tests.helpers,local_import,,,,Import: asarray from anndata.tests.helpers,scverse,scanpy,1.10.1,"from anndata.tests.helpers import (
    asarray,
    assert_equal,
)",asarray,anndata.tests.helpers,anndata.tests.helpers,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,assert_equal from anndata.tests.helpers,local_import,,,,Import: assert_equal from anndata.tests.helpers,scverse,scanpy,1.10.1,"from anndata.tests.helpers import (
    asarray,
    assert_equal,
)",assert_equal,anndata.tests.helpers,anndata.tests.helpers,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,Version from packaging.version,local_import,,,,Import: Version from packaging.version,scverse,scanpy,1.10.1,from packaging.version import Version,Version,packaging.version,packaging.version,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,issparse from sklearn.utils,local_import,,,,Import: issparse from sklearn.utils,scverse,scanpy,1.10.1,from sklearn.utils import issparse,issparse,sklearn.utils,sklearn.utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,as_dense_dask_array from scanpy.testing._helpers,local_import,,,,Import: as_dense_dask_array from scanpy.testing._helpers,scverse,scanpy,1.10.1,"from scanpy.testing._helpers import as_dense_dask_array, as_sparse_dask_array",as_dense_dask_array,scanpy.testing._helpers,scanpy.testing._helpers,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,as_sparse_dask_array from scanpy.testing._helpers,local_import,,,,Import: as_sparse_dask_array from scanpy.testing._helpers,scverse,scanpy,1.10.1,"from scanpy.testing._helpers import as_dense_dask_array, as_sparse_dask_array",as_sparse_dask_array,scanpy.testing._helpers,scanpy.testing._helpers,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,pbmc3k_normalized from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k_normalized from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc3k_normalized,pbmc3k_normalized,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,needs,scanpy.testing._pytest.marks,scanpy.testing._pytest.marks,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,ARRAY_TYPES from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,"from scanpy.testing._pytest.params import (
    ARRAY_TYPES,
    ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED,
    param_with,
)",ARRAY_TYPES,scanpy.testing._pytest.params,scanpy.testing._pytest.params,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,"from scanpy.testing._pytest.params import (
    ARRAY_TYPES,
    ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED,
    param_with,
)",ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED,scanpy.testing._pytest.params,scanpy.testing._pytest.params,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,param_with from scanpy.testing._pytest.params,local_import,,,,Import: param_with from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,"from scanpy.testing._pytest.params import (
    ARRAY_TYPES,
    ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED,
    param_with,
)",param_with,scanpy.testing._pytest.params,scanpy.testing._pytest.params,,,,,,,,,,,,,,
,test_pca.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_pca.py,python,,,,,,Directory: scanpy\tests\test_pca.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_performance.py,python,"descend(profimp_data, modules, path)",function,descend,"(profimp_data, modules, path)",,"Function: descend(profimp_data, modules, path)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_performance.py,python,get_import_paths(modules),function,get_import_paths,(modules),,Function: get_import_paths(modules),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_performance.py,python,test_deferred_imports(imported_modules),function,test_deferred_imports,(imported_modules),,Function: test_deferred_imports(imported_modules),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_performance.py,python,json,import,,,,Import: json,scverse,scanpy,1.10.1,import json,json,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_performance.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,sys,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_performance.py,python,run from subprocess,import,,,,Import: run from subprocess,scverse,scanpy,1.10.1,from subprocess import run,run,subprocess,,,,,,,,,,,,,,,
,test_performance.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_performance.py,python,,,,,,Directory: scanpy\tests\test_performance.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_dotplot_obj(image_comparer),function,test_dotplot_obj,(image_comparer),,Function: test_dotplot_obj(image_comparer),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_matrixplot_obj(image_comparer),function,test_matrixplot_obj,(image_comparer),,Function: test_matrixplot_obj(image_comparer),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,"test_stacked_violin_obj(image_comparer, plt)",function,test_stacked_violin_obj,"(image_comparer, plt)",,"Function: test_stacked_violin_obj(image_comparer, plt)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_tracksplot(image_comparer),function,test_tracksplot,(image_comparer),,Function: test_tracksplot(image_comparer),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_multiple_plots(image_comparer),function,test_multiple_plots,(image_comparer),,Function: test_multiple_plots(image_comparer),scverse,scanpy,1.10.1,,,,,,,,"# only testing stacked_violin, matrixplot and dotplot",,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_violin(image_comparer),function,test_violin,(image_comparer),,Function: test_violin(image_comparer),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_violin_without_raw(tmp_path),function,test_violin_without_raw,(tmp_path),,Function: test_violin_without_raw(tmp_path),scverse,scanpy,1.10.1,,,,,,,,"# https://github.com/scverse/scanpy/issues/1546",,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_dendrogram(image_comparer),function,test_dendrogram,(image_comparer),,Function: test_dendrogram(image_comparer),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_correlation(image_comparer),function,test_correlation,(image_comparer),,Function: test_correlation(image_comparer),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_scatter_embedding_groups_and_size(image_comparer),function,test_scatter_embedding_groups_and_size,(image_comparer),,Function: test_scatter_embedding_groups_and_size(image_comparer),scverse,scanpy,1.10.1,,,,,,,,"# test that the 'groups' parameter sorts",,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_scatter_embedding_groups_and_size(image_comparer),function,test_scatter_embedding_groups_and_size,(image_comparer),,Function: test_scatter_embedding_groups_and_size(image_comparer),scverse,scanpy,1.10.1,,,,,,,,"# cells, such that the cells belonging to the groups are",,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_scatter_embedding_groups_and_size(image_comparer),function,test_scatter_embedding_groups_and_size,(image_comparer),,Function: test_scatter_embedding_groups_and_size(image_comparer),scverse,scanpy,1.10.1,,,,,,,,"# plotted on top. This new ordering requires that the size",,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_scatter_embedding_groups_and_size(image_comparer),function,test_scatter_embedding_groups_and_size,(image_comparer),,Function: test_scatter_embedding_groups_and_size(image_comparer),scverse,scanpy,1.10.1,,,,,,,,"# vector is also ordered (if given).",,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,"test_scatter_embedding_add_outline_vmin_vmax_norm(image_comparer, check_same_image)",function,test_scatter_embedding_add_outline_vmin_vmax_norm,"(image_comparer, check_same_image)",,"Function: test_scatter_embedding_add_outline_vmin_vmax_norm(image_comparer, check_same_image)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,"test_scatter_embedding_add_outline_vmin_vmax_norm_ref(tmp_path, check_same_image)",function,test_scatter_embedding_add_outline_vmin_vmax_norm_ref,"(tmp_path, check_same_image)",,"Function: test_scatter_embedding_add_outline_vmin_vmax_norm_ref(tmp_path, check_same_image)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_timeseries(),function,test_timeseries,(),,Function: test_timeseries(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_scatter_raw(tmp_path),function,test_scatter_raw,(tmp_path),,Function: test_scatter_raw(tmp_path),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_binary_scatter(image_comparer),function,test_binary_scatter,(image_comparer),,Function: test_binary_scatter(image_comparer),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_scatter_specify_layer_and_raw(),function,test_scatter_specify_layer_and_raw,(),,Function: test_scatter_specify_layer_and_raw(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_scatter_no_basis_per_var(image_comparer),function,test_scatter_no_basis_per_var,(image_comparer),,Function: test_scatter_no_basis_per_var(image_comparer),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,"test_scatter_no_basis_raw(check_same_image, pbmc_filtered, tmpdir)",function,test_scatter_no_basis_raw,"(check_same_image, pbmc_filtered, tmpdir)",,"Function: test_scatter_no_basis_raw(check_same_image, pbmc_filtered, tmpdir)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_rankings(image_comparer),function,test_rankings,(image_comparer),,Function: test_rankings(image_comparer),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_scatter_rep(tmpdir),function,test_scatter_rep,(tmpdir),,Function: test_scatter_rep(tmpdir),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_no_copy(),function,test_no_copy,(),,Function: test_no_copy(),scverse,scanpy,1.10.1,,,,,,,,"# https://github.com/scverse/scanpy/issues/1000",,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_no_copy(),function,test_no_copy,(),,Function: test_no_copy(),scverse,scanpy,1.10.1,,,,,,,,"# Tests that plotting functions don't make a copy from a view unless they",,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_no_copy(),function,test_no_copy,(),,Function: test_no_copy(),scverse,scanpy,1.10.1,,,,,,,,"# actually have to",,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_groupby_index(image_comparer),function,test_groupby_index,(image_comparer),,Function: test_groupby_index(image_comparer),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_groupby_list(image_comparer),function,test_groupby_list,(image_comparer),,Function: test_groupby_list(image_comparer),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_color_cycler(caplog),function,test_color_cycler,(caplog),,Function: test_color_cycler(caplog),scverse,scanpy,1.10.1,,,,,,,,"# https://github.com/scverse/scanpy/issues/1885",,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_repeated_colors_w_missing_value(),function,test_repeated_colors_w_missing_value,(),,Function: test_repeated_colors_w_missing_value(),scverse,scanpy,1.10.1,,,,,,,,"# https://github.com/scverse/scanpy/issues/2133",,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,"test_umap_mask_equal(tmp_path, check_same_image)",function,test_umap_mask_equal,"(tmp_path, check_same_image)",,"Function: test_umap_mask_equal(tmp_path, check_same_image)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_umap_mask_mult_plots(),function,test_umap_mask_mult_plots,(),,Function: test_umap_mask_mult_plots(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,"test_string_mask(tmp_path, check_same_image)",function,test_string_mask,"(tmp_path, check_same_image)",,"Function: test_string_mask(tmp_path, check_same_image)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_violin_scale_warning(monkeypatch),function,test_violin_scale_warning,(monkeypatch),,Function: test_violin_scale_warning(monkeypatch),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,HERE: Path = Path(__file__).parent,constant,,,,Constant: HERE: Path = Path(__file__).parent,scverse,scanpy,1.10.1,,,,,HERE: Path = Path(__file__).parent,HERE,Path(__file__).parent,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,"ROOT = HERE / ""_images""",constant,,,,"Constant: ROOT = HERE / ""_images""",scverse,scanpy,1.10.1,,,,,"ROOT = HERE / ""_images""",ROOT,"HERE / ""_images""",,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,partial,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,chain from itertools,import,,,,Import: chain from itertools,scverse,scanpy,1.10.1,"from itertools import chain, combinations, repeat",chain,itertools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,combinations from itertools,import,,,,Import: combinations from itertools,scverse,scanpy,1.10.1,"from itertools import chain, combinations, repeat",combinations,itertools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,repeat from itertools,import,,,,Import: repeat from itertools,scverse,scanpy,1.10.1,"from itertools import chain, combinations, repeat",repeat,itertools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,matplotlib,import,,,,Import: matplotlib,scverse,scanpy,1.10.1,import matplotlib as mpl,matplotlib,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,matplotlib.pyplot,import,,,,Import: matplotlib.pyplot,scverse,scanpy,1.10.1,import matplotlib.pyplot as plt,matplotlib.pyplot,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,seaborn,import,,,,Import: seaborn,scverse,scanpy,1.10.1,import seaborn as sns,seaborn,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,version,packaging,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,compare_images from matplotlib.testing.compare,local_import,,,,Import: compare_images from matplotlib.testing.compare,scverse,scanpy,1.10.1,from matplotlib.testing.compare import compare_images,compare_images,matplotlib.testing.compare,matplotlib.testing.compare,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,pkg_version from scanpy._compat,local_import,,,,Import: pkg_version from scanpy._compat,scverse,scanpy,1.10.1,from scanpy._compat import pkg_version,pkg_version,scanpy._compat,scanpy._compat,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,krumsiek11 from scanpy.testing._helpers.data,local_import,,,,Import: krumsiek11 from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,"from scanpy.testing._helpers.data import (
    krumsiek11,
    pbmc3k,
    pbmc3k_processed,
    pbmc68k_reduced,
)",krumsiek11,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,pbmc3k from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,"from scanpy.testing._helpers.data import (
    krumsiek11,
    pbmc3k,
    pbmc3k_processed,
    pbmc68k_reduced,
)",pbmc3k,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,pbmc3k_processed from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k_processed from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,"from scanpy.testing._helpers.data import (
    krumsiek11,
    pbmc3k,
    pbmc3k_processed,
    pbmc68k_reduced,
)",pbmc3k_processed,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,"from scanpy.testing._helpers.data import (
    krumsiek11,
    pbmc3k,
    pbmc3k_processed,
    pbmc68k_reduced,
)",pbmc68k_reduced,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,needs,scanpy.testing._pytest.marks,scanpy.testing._pytest.marks,,,,,,,,,,,,,,
,test_plotting.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_plotting.py,python,,,,,,Directory: scanpy\tests\test_plotting.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting_utils.py,python,"viridis = cast(ListedColormap, colormaps[""viridis""])",constant,,,,"Constant: viridis = cast(ListedColormap, colormaps[""viridis""])",scverse,scanpy,1.10.1,,,,,"viridis = cast(ListedColormap, colormaps[""viridis""])",viridis,"cast(ListedColormap, colormaps[""viridis""])",,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting_utils.py,python,cast from typing,import,,,,Import: cast from typing,scverse,scanpy,1.10.1,from typing import cast,cast,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting_utils.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting_utils.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting_utils.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting_utils.py,python,colormaps from matplotlib,import,,,,Import: colormaps from matplotlib,scverse,scanpy,1.10.1,from matplotlib import colormaps,colormaps,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting_utils.py,python,ListedColormap from matplotlib.colors,local_import,,,,Import: ListedColormap from matplotlib.colors,scverse,scanpy,1.10.1,from matplotlib.colors import ListedColormap,ListedColormap,matplotlib.colors,matplotlib.colors,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting_utils.py,python,_validate_palette from scanpy.plotting._utils,local_import,,,,Import: _validate_palette from scanpy.plotting._utils,scverse,scanpy,1.10.1,from scanpy.plotting._utils import _validate_palette,_validate_palette,scanpy.plotting._utils,scanpy.plotting._utils,,,,,,,,,,,,,,
,test_plotting_utils.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_plotting_utils.py,python,,,,,,Directory: scanpy\tests\test_plotting_utils.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_log1p(tmp_path),function,test_log1p,(tmp_path),,Function: test_log1p(tmp_path),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_log1p_deprecated_arg(),function,test_log1p_deprecated_arg,(),,Function: test_log1p_deprecated_arg(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,"test_log1p_rep(count_matrix_format, base, dtype)",function,test_log1p_rep,"(count_matrix_format, base, dtype)",,"Function: test_log1p_rep(count_matrix_format, base, dtype)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_mean_var_sparse(),function,test_mean_var_sparse,(),,Function: test_mean_var_sparse(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_normalize_per_cell(),function,test_normalize_per_cell,(),,Function: test_normalize_per_cell(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_subsample(),function,test_subsample,(),,Function: test_subsample(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_subsample_copy(),function,test_subsample_copy,(),,Function: test_subsample_copy(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_subsample_copy_backed(tmp_path),function,test_subsample_copy_backed,(tmp_path),,Function: test_subsample_copy_backed(tmp_path),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_scale(),function,test_scale,(),,Function: test_scale(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,"test_scale_rep(count_matrix_format, zero_center)",function,test_scale_rep,"(count_matrix_format, zero_center)",,"Function: test_scale_rep(count_matrix_format, zero_center)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,"test_scale_array(count_matrix_format, zero_center)",function,test_scale_array,"(count_matrix_format, zero_center)",,"Function: test_scale_array(count_matrix_format, zero_center)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_recipe_plotting(),function,test_recipe_plotting,(),,Function: test_recipe_plotting(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_regress_out_ordinal(),function,test_regress_out_ordinal,(),,Function: test_regress_out_ordinal(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_regress_out_layer(),function,test_regress_out_layer,(),,Function: test_regress_out_layer(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_regress_out_view(),function,test_regress_out_view,(),,Function: test_regress_out_view(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_regress_out_categorical(),function,test_regress_out_categorical,(),,Function: test_regress_out_categorical(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_regress_out_constants(),function,test_regress_out_constants,(),,Function: test_regress_out_constants(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_regress_out_constants_equivalent(),function,test_regress_out_constants_equivalent,(),,Function: test_regress_out_constants_equivalent(),scverse,scanpy,1.10.1,,,,,,,,"# Tests that constant values don't change results",,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_regress_out_constants_equivalent(),function,test_regress_out_constants_equivalent,(),,Function: test_regress_out_constants_equivalent(),scverse,scanpy,1.10.1,,,,,,,,"# (since support for constant values is implemented by us)",,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,"test_downsample_counts_per_cell(count_matrix_format, replace, dtype)",function,test_downsample_counts_per_cell,"(count_matrix_format, replace, dtype)",,"Function: test_downsample_counts_per_cell(count_matrix_format, replace, dtype)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,"test_downsample_counts_per_cell_multiple_targets(
    count_matrix_format, replace, dtype
)",function,test_downsample_counts_per_cell_multiple_targets,"(
    count_matrix_format, replace, dtype
)",,"Function: test_downsample_counts_per_cell_multiple_targets(
    count_matrix_format, replace, dtype
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,"test_downsample_total_counts(count_matrix_format, replace, dtype)",function,test_downsample_total_counts,"(count_matrix_format, replace, dtype)",,"Function: test_downsample_total_counts(count_matrix_format, replace, dtype)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_recipe_weinreb(),function,test_recipe_weinreb,(),,Function: test_recipe_weinreb(),scverse,scanpy,1.10.1,,,,,,,,"# Just tests for failure for now",,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,"ARRAY_TYPES_DASK_SPARSE = [
    a for a in ARRAY_TYPES if ""sparse"" in a.id and ""dask"" in a.id
]",constant,,,,"Constant: ARRAY_TYPES_DASK_SPARSE = [
    a for a in ARRAY_TYPES if ""sparse"" in a.id and ""dask"" in a.id
]",scverse,scanpy,1.10.1,,,,,"ARRAY_TYPES_DASK_SPARSE = [
    a for a in ARRAY_TYPES if ""sparse"" in a.id and ""dask"" in a.id
]",ARRAY_TYPES_DASK_SPARSE,"[
    a for a in ARRAY_TYPES if ""sparse"" in a.id and ""dask"" in a.id
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,product from itertools,import,,,,Import: product from itertools,scverse,scanpy,1.10.1,from itertools import product,product,itertools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse as sp,sparse,scipy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,asarray from anndata.tests.helpers,local_import,,,,Import: asarray from anndata.tests.helpers,scverse,scanpy,1.10.1,"from anndata.tests.helpers import asarray, assert_equal",asarray,anndata.tests.helpers,anndata.tests.helpers,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,assert_equal from anndata.tests.helpers,local_import,,,,Import: assert_equal from anndata.tests.helpers,scverse,scanpy,1.10.1,"from anndata.tests.helpers import asarray, assert_equal",assert_equal,anndata.tests.helpers,anndata.tests.helpers,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,assert_allclose from numpy.testing,local_import,,,,Import: assert_allclose from numpy.testing,scverse,scanpy,1.10.1,from numpy.testing import assert_allclose,assert_allclose,numpy.testing,numpy.testing,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,issparse from sklearn.utils,local_import,,,,Import: issparse from sklearn.utils,scverse,scanpy,1.10.1,from sklearn.utils import issparse,issparse,sklearn.utils,sklearn.utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,anndata_v0_8_constructor_compat from scanpy.testing._helpers,local_import,,,,Import: anndata_v0_8_constructor_compat from scanpy.testing._helpers,scverse,scanpy,1.10.1,"from scanpy.testing._helpers import (
    anndata_v0_8_constructor_compat,
    check_rep_mutation,
    check_rep_results,
)",anndata_v0_8_constructor_compat,scanpy.testing._helpers,scanpy.testing._helpers,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,check_rep_mutation from scanpy.testing._helpers,local_import,,,,Import: check_rep_mutation from scanpy.testing._helpers,scverse,scanpy,1.10.1,"from scanpy.testing._helpers import (
    anndata_v0_8_constructor_compat,
    check_rep_mutation,
    check_rep_results,
)",check_rep_mutation,scanpy.testing._helpers,scanpy.testing._helpers,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,check_rep_results from scanpy.testing._helpers,local_import,,,,Import: check_rep_results from scanpy.testing._helpers,scverse,scanpy,1.10.1,"from scanpy.testing._helpers import (
    anndata_v0_8_constructor_compat,
    check_rep_mutation,
    check_rep_results,
)",check_rep_results,scanpy.testing._helpers,scanpy.testing._helpers,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,pbmc3k from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,"from scanpy.testing._helpers.data import pbmc3k, pbmc68k_reduced",pbmc3k,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,"from scanpy.testing._helpers.data import pbmc3k, pbmc68k_reduced",pbmc68k_reduced,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,ARRAY_TYPES from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,from scanpy.testing._pytest.params import ARRAY_TYPES,ARRAY_TYPES,scanpy.testing._pytest.params,scanpy.testing._pytest.params,,,,,,,,,,,,,,
,test_preprocessing.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_preprocessing.py,python,,,,,,Directory: scanpy\tests\test_preprocessing.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,"test_log1p(adata: AnnData, adata_dist: AnnData)",function,test_log1p,"(adata: AnnData, adata_dist: AnnData)",,"Function: test_log1p(adata: AnnData, adata_dist: AnnData)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,"test_normalize_per_cell(
    request: pytest.FixtureRequest, adata: AnnData, adata_dist: AnnData
)",function,test_normalize_per_cell,"(
    request: pytest.FixtureRequest, adata: AnnData, adata_dist: AnnData
)",,"Function: test_normalize_per_cell(
    request: pytest.FixtureRequest, adata: AnnData, adata_dist: AnnData
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,"test_normalize_total(adata: AnnData, adata_dist: AnnData)",function,test_normalize_total,"(adata: AnnData, adata_dist: AnnData)",,"Function: test_normalize_total(adata: AnnData, adata_dist: AnnData)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,"test_filter_cells_array(adata: AnnData, adata_dist: AnnData)",function,test_filter_cells_array,"(adata: AnnData, adata_dist: AnnData)",,"Function: test_filter_cells_array(adata: AnnData, adata_dist: AnnData)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,"test_filter_cells(adata: AnnData, adata_dist: AnnData)",function,test_filter_cells,"(adata: AnnData, adata_dist: AnnData)",,"Function: test_filter_cells(adata: AnnData, adata_dist: AnnData)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,"test_filter_genes_array(adata: AnnData, adata_dist: AnnData)",function,test_filter_genes_array,"(adata: AnnData, adata_dist: AnnData)",,"Function: test_filter_genes_array(adata: AnnData, adata_dist: AnnData)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,"test_filter_genes(adata: AnnData, adata_dist: AnnData)",function,test_filter_genes,"(adata: AnnData, adata_dist: AnnData)",,"Function: test_filter_genes(adata: AnnData, adata_dist: AnnData)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,"HERE = Path(__file__).parent / Path(""_data/"")",constant,,,,"Constant: HERE = Path(__file__).parent / Path(""_data/"")",scverse,scanpy,1.10.1,,,,,"HERE = Path(__file__).parent / Path(""_data/"")",HERE,"Path(__file__).parent / Path(""_data/"")",,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,"input_file = Path(HERE, ""10x-10k-subset.zarr"")",constant,,,,"Constant: input_file = Path(HERE, ""10x-10k-subset.zarr"")",scverse,scanpy,1.10.1,,,,,"input_file = Path(HERE, ""10x-10k-subset.zarr"")",input_file,"Path(HERE, ""10x-10k-subset.zarr"")",,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,"DIST_TYPES = (DaskArray, ZappyArray)",constant,,,,"Constant: DIST_TYPES = (DaskArray, ZappyArray)",scverse,scanpy,1.10.1,,,,,"DIST_TYPES = (DaskArray, ZappyArray)",DIST_TYPES,"(DaskArray, ZappyArray)",,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,pytestmark = [needs.zarr],constant,,,,Constant: pytestmark = [needs.zarr],scverse,scanpy,1.10.1,,,,,pytestmark = [needs.zarr],pytestmark,[needs.zarr],,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,numpy.testing,import,,,,Import: numpy.testing,scverse,scanpy,1.10.1,import numpy.testing as npt,numpy.testing,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,"from anndata import AnnData, read_zarr",AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,read_zarr from anndata,import,,,,Import: read_zarr from anndata,scverse,scanpy,1.10.1,"from anndata import AnnData, read_zarr",read_zarr,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,DaskArray from scanpy._compat,local_import,,,,Import: DaskArray from scanpy._compat,scverse,scanpy,1.10.1,"from scanpy._compat import DaskArray, ZappyArray",DaskArray,scanpy._compat,scanpy._compat,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,ZappyArray from scanpy._compat,local_import,,,,Import: ZappyArray from scanpy._compat,scverse,scanpy,1.10.1,"from scanpy._compat import DaskArray, ZappyArray",ZappyArray,scanpy._compat,scanpy._compat,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,filter_oldformatwarning from scanpy.datasets._utils,local_import,,,,Import: filter_oldformatwarning from scanpy.datasets._utils,scverse,scanpy,1.10.1,from scanpy.datasets._utils import filter_oldformatwarning,filter_oldformatwarning,scanpy.datasets._utils,scanpy.datasets._utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,filter_cells from scanpy.preprocessing,local_import,,,,Import: filter_cells from scanpy.preprocessing,scverse,scanpy,1.10.1,"from scanpy.preprocessing import (
    filter_cells,
    filter_genes,
    log1p,
    normalize_per_cell,
    normalize_total,
)",filter_cells,scanpy.preprocessing,scanpy.preprocessing,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,filter_genes from scanpy.preprocessing,local_import,,,,Import: filter_genes from scanpy.preprocessing,scverse,scanpy,1.10.1,"from scanpy.preprocessing import (
    filter_cells,
    filter_genes,
    log1p,
    normalize_per_cell,
    normalize_total,
)",filter_genes,scanpy.preprocessing,scanpy.preprocessing,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,log1p from scanpy.preprocessing,local_import,,,,Import: log1p from scanpy.preprocessing,scverse,scanpy,1.10.1,"from scanpy.preprocessing import (
    filter_cells,
    filter_genes,
    log1p,
    normalize_per_cell,
    normalize_total,
)",log1p,scanpy.preprocessing,scanpy.preprocessing,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,normalize_per_cell from scanpy.preprocessing,local_import,,,,Import: normalize_per_cell from scanpy.preprocessing,scverse,scanpy,1.10.1,"from scanpy.preprocessing import (
    filter_cells,
    filter_genes,
    log1p,
    normalize_per_cell,
    normalize_total,
)",normalize_per_cell,scanpy.preprocessing,scanpy.preprocessing,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,normalize_total from scanpy.preprocessing,local_import,,,,Import: normalize_total from scanpy.preprocessing,scverse,scanpy,1.10.1,"from scanpy.preprocessing import (
    filter_cells,
    filter_genes,
    log1p,
    normalize_per_cell,
    normalize_total,
)",normalize_total,scanpy.preprocessing,scanpy.preprocessing,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,materialize_as_ndarray from scanpy.preprocessing._distributed,local_import,,,,Import: materialize_as_ndarray from scanpy.preprocessing._distributed,scverse,scanpy,1.10.1,from scanpy.preprocessing._distributed import materialize_as_ndarray,materialize_as_ndarray,scanpy.preprocessing._distributed,scanpy.preprocessing._distributed,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,needs,scanpy.testing._pytest.marks,scanpy.testing._pytest.marks,,,,,,,,,,,,,,
,test_preprocessing_distributed.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_preprocessing_distributed.py,python,,,,,,Directory: scanpy\tests\test_preprocessing_distributed.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,test_segments_binary(),function,test_segments_binary,(),,Function: test_segments_binary(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,test_qc_metrics(),function,test_qc_metrics,(),,Function: test_qc_metrics(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,adata_mito(),function,adata_mito,(),,Function: adata_mito(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,test_qc_metrics_format_str_qc_vars(),function,test_qc_metrics_format_str_qc_vars,(),,Function: test_qc_metrics_format_str_qc_vars(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,test_qc_metrics_percentage(),function,test_qc_metrics_percentage,(),,Function: test_qc_metrics_percentage(),scverse,scanpy,1.10.1,,,,,,,,"# In response to #421",,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,test_layer_raw(anndata),function,test_layer_raw,(anndata),,Function: test_layer_raw(anndata),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,test_inner_methods(anndata),function,test_inner_methods,(anndata),,Function: test_inner_methods(anndata),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,describe_obs from scanpy.preprocessing._qc,local_import,,,,Import: describe_obs from scanpy.preprocessing._qc,scverse,scanpy,1.10.1,"from scanpy.preprocessing._qc import (
    describe_obs,
    describe_var,
    top_proportions,
    top_segment_proportions,
)",describe_obs,scanpy.preprocessing._qc,scanpy.preprocessing._qc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,describe_var from scanpy.preprocessing._qc,local_import,,,,Import: describe_var from scanpy.preprocessing._qc,scverse,scanpy,1.10.1,"from scanpy.preprocessing._qc import (
    describe_obs,
    describe_var,
    top_proportions,
    top_segment_proportions,
)",describe_var,scanpy.preprocessing._qc,scanpy.preprocessing._qc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,top_proportions from scanpy.preprocessing._qc,local_import,,,,Import: top_proportions from scanpy.preprocessing._qc,scverse,scanpy,1.10.1,"from scanpy.preprocessing._qc import (
    describe_obs,
    describe_var,
    top_proportions,
    top_segment_proportions,
)",top_proportions,scanpy.preprocessing._qc,scanpy.preprocessing._qc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,top_segment_proportions from scanpy.preprocessing._qc,local_import,,,,Import: top_segment_proportions from scanpy.preprocessing._qc,scverse,scanpy,1.10.1,"from scanpy.preprocessing._qc import (
    describe_obs,
    describe_var,
    top_proportions,
    top_segment_proportions,
)",top_segment_proportions,scanpy.preprocessing._qc,scanpy.preprocessing._qc,,,,,,,,,,,,,,
,test_qc_metrics.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_qc_metrics.py,python,,,,,,Directory: scanpy\tests\test_qc_metrics.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_queries.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_queries.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_queries.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_queries.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,pbmc68k_reduced,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
,test_queries.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_queries.py,python,,,,,,Directory: scanpy\tests\test_queries.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,"get_true_scores() -> (
    tuple[
        NDArray[np.object_],
        NDArray[np.object_],
        NDArray[np.floating],
        NDArray[np.floating],
    ]
)",function,get_true_scores,(),"(
    tuple[
        NDArray[np.object_],
        NDArray[np.object_],
        NDArray[np.floating],
        NDArray[np.floating],
    ]
)","Function: get_true_scores() -> (
    tuple[
        NDArray[np.object_],
        NDArray[np.object_],
        NDArray[np.floating],
        NDArray[np.floating],
    ]
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,test_rank_genes_groups_use_raw(),function,test_rank_genes_groups_use_raw,(),,Function: test_rank_genes_groups_use_raw(),scverse,scanpy,1.10.1,,,,,,,,"# https://github.com/scverse/scanpy/issues/1929",,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,test_singlets(),function,test_singlets,(),,Function: test_singlets(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,test_emptycat(),function,test_emptycat,(),,Function: test_emptycat(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,test_log1p_save_restore(tmp_path),function,test_log1p_save_restore,(tmp_path),,Function: test_log1p_save_restore(tmp_path),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,test_wilcoxon_symmetry(),function,test_wilcoxon_symmetry,(),,Function: test_wilcoxon_symmetry(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,test_mask_not_equal(),function,test_mask_not_equal,(),,Function: test_mask_not_equal(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,HERE = Path(__file__).parent,constant,,,,Constant: HERE = Path(__file__).parent,scverse,scanpy,1.10.1,,,,,HERE = Path(__file__).parent,HERE,Path(__file__).parent,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,"DATA_PATH = HERE / ""_data""",constant,,,,"Constant: DATA_PATH = HERE / ""_data""",scverse,scanpy,1.10.1,,,,,"DATA_PATH = HERE / ""_data""",DATA_PATH,"HERE / ""_data""",,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,pickle,import,,,,Import: pickle,scverse,scanpy,1.10.1,import pickle,pickle,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,partial,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",Any,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,scipy,import,,,,Import: scipy,scverse,scanpy,1.10.1,import scipy,scipy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,version,packaging,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,binomial from numpy.random,local_import,,,,Import: binomial from numpy.random,scverse,scanpy,1.10.1,"from numpy.random import binomial, negative_binomial, seed",binomial,numpy.random,numpy.random,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,negative_binomial from numpy.random,local_import,,,,Import: negative_binomial from numpy.random,scverse,scanpy,1.10.1,"from numpy.random import binomial, negative_binomial, seed",negative_binomial,numpy.random,numpy.random,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,seed from numpy.random,local_import,,,,Import: seed from numpy.random,scverse,scanpy,1.10.1,"from numpy.random import binomial, negative_binomial, seed",seed,numpy.random,numpy.random,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,mannwhitneyu from scipy.stats,local_import,,,,Import: mannwhitneyu from scipy.stats,scverse,scanpy,1.10.1,from scipy.stats import mannwhitneyu,mannwhitneyu,scipy.stats,scipy.stats,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,elem_mul from scanpy._utils,local_import,,,,Import: elem_mul from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import elem_mul, select_groups",elem_mul,scanpy._utils,scanpy._utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,select_groups from scanpy._utils,local_import,,,,Import: select_groups from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import elem_mul, select_groups",select_groups,scanpy._utils,scanpy._utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,rank_genes_groups_df from scanpy.get,local_import,,,,Import: rank_genes_groups_df from scanpy.get,scverse,scanpy,1.10.1,from scanpy.get import rank_genes_groups_df,rank_genes_groups_df,scanpy.get,scanpy.get,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,pbmc68k_reduced,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,ARRAY_TYPES from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,"from scanpy.testing._pytest.params import ARRAY_TYPES, ARRAY_TYPES_MEM",ARRAY_TYPES,scanpy.testing._pytest.params,scanpy.testing._pytest.params,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,ARRAY_TYPES_MEM from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES_MEM from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,"from scanpy.testing._pytest.params import ARRAY_TYPES, ARRAY_TYPES_MEM",ARRAY_TYPES_MEM,scanpy.testing._pytest.params,scanpy.testing._pytest.params,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,rank_genes_groups from scanpy.tools,local_import,,,,Import: rank_genes_groups from scanpy.tools,scverse,scanpy,1.10.1,from scanpy.tools import rank_genes_groups,rank_genes_groups,scanpy.tools,scanpy.tools,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,_RankGenes from scanpy.tools._rank_genes_groups,local_import,,,,Import: _RankGenes from scanpy.tools._rank_genes_groups,scverse,scanpy,1.10.1,from scanpy.tools._rank_genes_groups import _RankGenes,_RankGenes,scanpy.tools._rank_genes_groups,scanpy.tools._rank_genes_groups,,,,,,,,,,,,,,
,test_rank_genes_groups.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_rank_genes_groups.py,python,,,,,,Directory: scanpy\tests\test_rank_genes_groups.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups_logreg.py,python,test_rank_genes_groups_with_renamed_categories_use_rep(),function,test_rank_genes_groups_with_renamed_categories_use_rep,(),,Function: test_rank_genes_groups_with_renamed_categories_use_rep(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups_logreg.py,python,test_rank_genes_groups_with_unsorted_groups(),function,test_rank_genes_groups_with_unsorted_groups,(),,Function: test_rank_genes_groups_with_unsorted_groups(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups_logreg.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups_logreg.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups_logreg.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups_logreg.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
,test_rank_genes_groups_logreg.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_rank_genes_groups_logreg.py,python,,,,,,Directory: scanpy\tests\test_rank_genes_groups_logreg.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_readwrite.py,python,PurePosixPath from pathlib,import,,,,Import: PurePosixPath from pathlib,scverse,scanpy,1.10.1,"from pathlib import PurePosixPath, PureWindowsPath",PurePosixPath,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_readwrite.py,python,PureWindowsPath from pathlib,import,,,,Import: PureWindowsPath from pathlib,scverse,scanpy,1.10.1,"from pathlib import PurePosixPath, PureWindowsPath",PureWindowsPath,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_readwrite.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_readwrite.py,python,_slugify from scanpy.readwrite,local_import,,,,Import: _slugify from scanpy.readwrite,scverse,scanpy,1.10.1,from scanpy.readwrite import _slugify,_slugify,scanpy.readwrite,scanpy.readwrite,,,,,,,,,,,,,,
,test_readwrite.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_readwrite.py,python,,,,,,Directory: scanpy\tests\test_readwrite.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,"assert_anndata_equal(a1, a2)",function,assert_anndata_equal,"(a1, a2)",,"Function: assert_anndata_equal(a1, a2)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,test_read_10x_h5_v1(),function,test_read_10x_h5_v1,(),,Function: test_read_10x_h5_v1(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,test_read_10x_h5_v2_multiple_genomes(),function,test_read_10x_h5_v2_multiple_genomes,(),,Function: test_read_10x_h5_v2_multiple_genomes(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,test_read_10x_h5(),function,test_read_10x_h5,(),,Function: test_read_10x_h5(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,test_error_10x_h5_legacy(tmp_path),function,test_error_10x_h5_legacy,(tmp_path),,Function: test_error_10x_h5_legacy(tmp_path),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,test_error_missing_genome(),function,test_error_missing_genome,(),,Function: test_error_missing_genome(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,test_read_visium_counts(visium_pth),function,test_read_visium_counts,(visium_pth),,Function: test_read_visium_counts(visium_pth),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,test_10x_h5_gex(),function,test_10x_h5_gex,(),,Function: test_10x_h5_gex(),scverse,scanpy,1.10.1,,,,,,,,"# Tests that gex option doesn't, say, make the function return None",,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,test_10x_probe_barcode_read(),function,test_10x_probe_barcode_read,(),,Function: test_10x_probe_barcode_read(),scverse,scanpy,1.10.1,,,,,,,,"# Tests the 10x probe barcode matrix is read correctly",,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,ROOT = Path(__file__).parent,constant,,,,Constant: ROOT = Path(__file__).parent,scverse,scanpy,1.10.1,,,,,ROOT = Path(__file__).parent,ROOT,Path(__file__).parent,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,"ROOT = ROOT / ""_data"" / ""10x_data""",constant,,,,"Constant: ROOT = ROOT / ""_data"" / ""10x_data""",scverse,scanpy,1.10.1,,,,,"ROOT = ROOT / ""_data"" / ""10x_data""",ROOT,"ROOT / ""_data"" / ""10x_data""",,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,"VISIUM_ROOT = Path(__file__).parent / ""_data"" / ""visium_data""",constant,,,,"Constant: VISIUM_ROOT = Path(__file__).parent / ""_data"" / ""visium_data""",scverse,scanpy,1.10.1,,,,,"VISIUM_ROOT = Path(__file__).parent / ""_data"" / ""visium_data""",VISIUM_ROOT,"Path(__file__).parent / ""_data"" / ""visium_data""",,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,shutil,import,,,,Import: shutil,scverse,scanpy,1.10.1,import shutil,shutil,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,h5py,import,,,,Import: h5py,scverse,scanpy,1.10.1,import h5py,h5py,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,patch from unittest.mock,local_import,,,,Import: patch from unittest.mock,scverse,scanpy,1.10.1,from unittest.mock import patch,patch,unittest.mock,unittest.mock,,,,,,,,,,,,,,
,test_read_10x.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_read_10x.py,python,,,,,,Directory: scanpy\tests\test_read_10x.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,test_mask_string(),function,test_mask_string,(),,Function: test_mask_string(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,"X_original = [
    [-1, 2, 0, 0],
    [1, 2, 4, 0],
    [0, 2, 2, 0],
]",constant,,,,"Constant: X_original = [
    [-1, 2, 0, 0],
    [1, 2, 4, 0],
    [0, 2, 2, 0],
]",scverse,scanpy,1.10.1,,,,,"X_original = [
    [-1, 2, 0, 0],
    [1, 2, 4, 0],
    [0, 2, 2, 0],
]",X_original,"[
    [-1, 2, 0, 0],
    [1, 2, 4, 0],
    [0, 2, 2, 0],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,"X_scaled_original = [
    [-1, 2, 0, 0],
    [1, 2, 2, 0],
    [0, 2, 1, 0],
]",constant,,,,"Constant: X_scaled_original = [
    [-1, 2, 0, 0],
    [1, 2, 2, 0],
    [0, 2, 1, 0],
]",scverse,scanpy,1.10.1,,,,,"X_scaled_original = [
    [-1, 2, 0, 0],
    [1, 2, 2, 0],
    [0, 2, 1, 0],
]",X_scaled_original,"[
    [-1, 2, 0, 0],
    [1, 2, 2, 0],
    [0, 2, 1, 0],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,"X_centered_original = [
    [-1, 0, -1, 0],
    [1, 0, 1, 0],
    [0, 0, 0, 0],
]",constant,,,,"Constant: X_centered_original = [
    [-1, 0, -1, 0],
    [1, 0, 1, 0],
    [0, 0, 0, 0],
]",scverse,scanpy,1.10.1,,,,,"X_centered_original = [
    [-1, 0, -1, 0],
    [1, 0, 1, 0],
    [0, 0, 0, 0],
]",X_centered_original,"[
    [-1, 0, -1, 0],
    [1, 0, 1, 0],
    [0, 0, 0, 0],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,"X_scaled_original_clipped = [
    [-1, 1, 0, 0],
    [1, 1, 1, 0],
    [0, 1, 1, 0],
]",constant,,,,"Constant: X_scaled_original_clipped = [
    [-1, 1, 0, 0],
    [1, 1, 1, 0],
    [0, 1, 1, 0],
]",scverse,scanpy,1.10.1,,,,,"X_scaled_original_clipped = [
    [-1, 1, 0, 0],
    [1, 1, 1, 0],
    [0, 1, 1, 0],
]",X_scaled_original_clipped,"[
    [-1, 1, 0, 0],
    [1, 1, 1, 0],
    [0, 1, 1, 0],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,"X_for_mask = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 2, 0, 0],
    [1, 2, 4, 0],
    [0, 2, 2, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",constant,,,,"Constant: X_for_mask = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 2, 0, 0],
    [1, 2, 4, 0],
    [0, 2, 2, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",scverse,scanpy,1.10.1,,,,,"X_for_mask = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 2, 0, 0],
    [1, 2, 4, 0],
    [0, 2, 2, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",X_for_mask,"[
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 2, 0, 0],
    [1, 2, 4, 0],
    [0, 2, 2, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,"X_scaled_for_mask = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 2, 0, 0],
    [1, 2, 2, 0],
    [0, 2, 1, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",constant,,,,"Constant: X_scaled_for_mask = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 2, 0, 0],
    [1, 2, 2, 0],
    [0, 2, 1, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",scverse,scanpy,1.10.1,,,,,"X_scaled_for_mask = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 2, 0, 0],
    [1, 2, 2, 0],
    [0, 2, 1, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",X_scaled_for_mask,"[
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 2, 0, 0],
    [1, 2, 2, 0],
    [0, 2, 1, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,"X_centered_for_mask = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 0, -1, 0],
    [1, 0, 1, 0],
    [0, 0, 0, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",constant,,,,"Constant: X_centered_for_mask = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 0, -1, 0],
    [1, 0, 1, 0],
    [0, 0, 0, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",scverse,scanpy,1.10.1,,,,,"X_centered_for_mask = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 0, -1, 0],
    [1, 0, 1, 0],
    [0, 0, 0, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",X_centered_for_mask,"[
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 0, -1, 0],
    [1, 0, 1, 0],
    [0, 0, 0, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,"X_scaled_for_mask_clipped = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 1, 0, 0],
    [1, 1, 1, 0],
    [0, 1, 1, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",constant,,,,"Constant: X_scaled_for_mask_clipped = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 1, 0, 0],
    [1, 1, 1, 0],
    [0, 1, 1, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",scverse,scanpy,1.10.1,,,,,"X_scaled_for_mask_clipped = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 1, 0, 0],
    [1, 1, 1, 0],
    [0, 1, 1, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",X_scaled_for_mask_clipped,"[
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 1, 0, 0],
    [1, 1, 1, 0],
    [0, 1, 1, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,csc_matrix from scipy.sparse,local_import,,,,Import: csc_matrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csc_matrix, csr_matrix",csc_matrix,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csc_matrix, csr_matrix",csr_matrix,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
,test_scaling.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_scaling.py,python,,,,,,Directory: scanpy\tests\test_scaling.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,"_create_random_gene_names(n_genes, name_length)",function,_create_random_gene_names,"(n_genes, name_length)",,"Function: _create_random_gene_names(n_genes, name_length)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,"_create_sparse_nan_matrix(rows, cols, percent_zero, percent_nan)",function,_create_sparse_nan_matrix,"(rows, cols, percent_zero, percent_nan)",,"Function: _create_sparse_nan_matrix(rows, cols, percent_zero, percent_nan)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,"_create_adata(n_obs, n_var, p_zero, p_nan)",function,_create_adata,"(n_obs, n_var, p_zero, p_nan)",,"Function: _create_adata(n_obs, n_var, p_zero, p_nan)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,test_score_with_reference(),function,test_score_with_reference,(),,Function: test_score_with_reference(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,test_add_score(),function,test_add_score,(),,Function: test_add_score(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,test_sparse_nanmean(),function,test_sparse_nanmean,(),,Function: test_sparse_nanmean(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,test_sparse_nanmean_on_dense_matrix(),function,test_sparse_nanmean_on_dense_matrix,(),,Function: test_sparse_nanmean_on_dense_matrix(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,test_score_genes_sparse_vs_dense(),function,test_score_genes_sparse_vs_dense,(),,Function: test_score_genes_sparse_vs_dense(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,test_score_genes_deplete(),function,test_score_genes_deplete,(),,Function: test_score_genes_deplete(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,test_npnanmean_vs_sparsemean(monkeypatch),function,test_npnanmean_vs_sparsemean,(monkeypatch),,Function: test_npnanmean_vs_sparsemean(monkeypatch),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,test_missing_genes(),function,test_missing_genes,(),,Function: test_missing_genes(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,test_one_gene(),function,test_one_gene,(),,Function: test_one_gene(),scverse,scanpy,1.10.1,,,,,,,,"# https://github.com/scverse/scanpy/issues/1395",,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,test_use_raw_None(),function,test_use_raw_None,(),,Function: test_use_raw_None(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,"HERE = Path(__file__).parent / Path(""_data/"")",constant,,,,"Constant: HERE = Path(__file__).parent / Path(""_data/"")",scverse,scanpy,1.10.1,,,,,"HERE = Path(__file__).parent / Path(""_data/"")",HERE,"Path(__file__).parent / Path(""_data/"")",,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,pickle,import,,,,Import: pickle,scverse,scanpy,1.10.1,import pickle,pickle,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import csr_matrix,csr_matrix,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,paul15 from scanpy.testing._helpers.data,local_import,,,,Import: paul15 from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import paul15,paul15,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
,test_score_genes.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_score_genes.py,python,,,,,,Directory: scanpy\tests\test_score_genes.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,pbmc200() -> AnnData,function,pbmc200,(),AnnData,Function: pbmc200() -> AnnData,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,paul500() -> AnnData,function,paul500,(),AnnData,Function: paul500() -> AnnData,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,test_scrublet_batched(),function,test_scrublet_batched,(),,Function: test_scrublet_batched(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,_preprocess_for_scrublet(adata: AnnData) -> AnnData,function,_preprocess_for_scrublet,(adata: AnnData),AnnData,Function: _preprocess_for_scrublet(adata: AnnData) -> AnnData,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,"_create_sim_from_parents(adata: AnnData, parents: np.ndarray) -> AnnData",function,_create_sim_from_parents,"(adata: AnnData, parents: np.ndarray)",AnnData,"Function: _create_sim_from_parents(adata: AnnData, parents: np.ndarray) -> AnnData",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,test_scrublet_data(),function,test_scrublet_data,(),,Function: test_scrublet_data(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,test_scrublet_simulate_doublets(),function,test_scrublet_simulate_doublets,(),,Function: test_scrublet_simulate_doublets(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,pytestmark = [needs.skimage],constant,,,,Constant: pytestmark = [needs.skimage],scverse,scanpy,1.10.1,,,,,pytestmark = [needs.skimage],pytestmark,[needs.skimage],,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,"test_params = {
    ""expected_doublet_rate"": 0.1,
    ""synthetic_doublet_umi_subsampling"": 0.8,
    ""knn_dist_metric"": ""manhattan"",
    ""normalize_variance"": False,
    ""log_transform"": True,
    ""mean_center"": False,
    ""n_prin_comps"": 10,
    ""n_neighbors"": 2,
    ""threshold"": 0.1,
}",constant,,,,"Constant: test_params = {
    ""expected_doublet_rate"": 0.1,
    ""synthetic_doublet_umi_subsampling"": 0.8,
    ""knn_dist_metric"": ""manhattan"",
    ""normalize_variance"": False,
    ""log_transform"": True,
    ""mean_center"": False,
    ""n_prin_comps"": 10,
    ""n_neighbors"": 2,
    ""threshold"": 0.1,
}",scverse,scanpy,1.10.1,,,,,"test_params = {
    ""expected_doublet_rate"": 0.1,
    ""synthetic_doublet_umi_subsampling"": 0.8,
    ""knn_dist_metric"": ""manhattan"",
    ""normalize_variance"": False,
    ""log_transform"": True,
    ""mean_center"": False,
    ""n_prin_comps"": 10,
    ""n_neighbors"": 2,
    ""threshold"": 0.1,
}",test_params,"{
    ""expected_doublet_rate"": 0.1,
    ""synthetic_doublet_umi_subsampling"": 0.8,
    ""knn_dist_metric"": ""manhattan"",
    ""normalize_variance"": False,
    ""log_transform"": True,
    ""mean_center"": False,
    ""n_prin_comps"": 10,
    ""n_neighbors"": 2,
    ""threshold"": 0.1,
}",,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",Any,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,scipy.sparse,import,,,,Import: scipy.sparse,scverse,scanpy,1.10.1,import scipy.sparse as sparse,scipy.sparse,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,"from anndata import AnnData, concat",AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,concat from anndata,import,,,,Import: concat from anndata,scverse,scanpy,1.10.1,"from anndata import AnnData, concat",concat,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,assert_equal from anndata.tests.helpers,local_import,,,,Import: assert_equal from anndata.tests.helpers,scverse,scanpy,1.10.1,from anndata.tests.helpers import assert_equal,assert_equal,anndata.tests.helpers,anndata.tests.helpers,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,assert_allclose from numpy.testing,local_import,,,,Import: assert_allclose from numpy.testing,scverse,scanpy,1.10.1,"from numpy.testing import assert_allclose, assert_array_equal",assert_allclose,numpy.testing,numpy.testing,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,assert_array_equal from numpy.testing,local_import,,,,Import: assert_array_equal from numpy.testing,scverse,scanpy,1.10.1,"from numpy.testing import assert_allclose, assert_array_equal",assert_array_equal,numpy.testing,numpy.testing,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,needs,scanpy.testing._pytest.marks,scanpy.testing._pytest.marks,,,,,,,,,,,,,,
,test_scrublet.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_scrublet.py,python,,,,,,Directory: scanpy\tests\test_scrublet.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_sim.py,python,test_sim_toggleswitch(tmp_write_dir),function,test_sim_toggleswitch,(tmp_write_dir),,Function: test_sim_toggleswitch(tmp_write_dir),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_sim.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_sim.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_sim.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
,test_sim.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_sim.py,python,,,,,,Directory: scanpy\tests\test_sim.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,test_descend_classes_and_funcs(),function,test_descend_classes_and_funcs,(),,Function: test_descend_classes_and_funcs(),scverse,scanpy,1.10.1,,,,,,,,"# create module hierarchy",,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,test_axis_mul_or_truediv_badop(),function,test_axis_mul_or_truediv_badop,(),,Function: test_axis_mul_or_truediv_badop(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,test_axis_mul_or_truediv_bad_out(),function,test_axis_mul_or_truediv_bad_out,(),,Function: test_axis_mul_or_truediv_bad_out(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,mul from operator,import,,,,Import: mul from operator,scverse,scanpy,1.10.1,"from operator import mul, truediv",mul,operator,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,truediv from operator,import,,,,Import: truediv from operator,scverse,scanpy,1.10.1,"from operator import mul, truediv",truediv,operator,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,ModuleType from types,import,,,,Import: ModuleType from types,scverse,scanpy,1.10.1,from types import ModuleType,ModuleType,types,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,asarray from anndata.tests.helpers,local_import,,,,Import: asarray from anndata.tests.helpers,scverse,scanpy,1.10.1,from anndata.tests.helpers import asarray,asarray,anndata.tests.helpers,anndata.tests.helpers,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse",csr_matrix,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse",issparse,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,DaskArray from scanpy._compat,local_import,,,,Import: DaskArray from scanpy._compat,scverse,scanpy,1.10.1,from scanpy._compat import DaskArray,DaskArray,scanpy._compat,scanpy._compat,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,axis_mul_or_truediv from scanpy._utils,local_import,,,,Import: axis_mul_or_truediv from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import (
    axis_mul_or_truediv,
    axis_sum,
    check_nonnegative_integers,
    descend_classes_and_funcs,
    elem_mul,
    is_constant,
)",axis_mul_or_truediv,scanpy._utils,scanpy._utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,axis_sum from scanpy._utils,local_import,,,,Import: axis_sum from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import (
    axis_mul_or_truediv,
    axis_sum,
    check_nonnegative_integers,
    descend_classes_and_funcs,
    elem_mul,
    is_constant,
)",axis_sum,scanpy._utils,scanpy._utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,check_nonnegative_integers from scanpy._utils,local_import,,,,Import: check_nonnegative_integers from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import (
    axis_mul_or_truediv,
    axis_sum,
    check_nonnegative_integers,
    descend_classes_and_funcs,
    elem_mul,
    is_constant,
)",check_nonnegative_integers,scanpy._utils,scanpy._utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,descend_classes_and_funcs from scanpy._utils,local_import,,,,Import: descend_classes_and_funcs from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import (
    axis_mul_or_truediv,
    axis_sum,
    check_nonnegative_integers,
    descend_classes_and_funcs,
    elem_mul,
    is_constant,
)",descend_classes_and_funcs,scanpy._utils,scanpy._utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,elem_mul from scanpy._utils,local_import,,,,Import: elem_mul from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import (
    axis_mul_or_truediv,
    axis_sum,
    check_nonnegative_integers,
    descend_classes_and_funcs,
    elem_mul,
    is_constant,
)",elem_mul,scanpy._utils,scanpy._utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,is_constant from scanpy._utils,local_import,,,,Import: is_constant from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import (
    axis_mul_or_truediv,
    axis_sum,
    check_nonnegative_integers,
    descend_classes_and_funcs,
    elem_mul,
    is_constant,
)",is_constant,scanpy._utils,scanpy._utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,needs,scanpy.testing._pytest.marks,scanpy.testing._pytest.marks,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,ARRAY_TYPES from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,"from scanpy.testing._pytest.params import (
    ARRAY_TYPES,
    ARRAY_TYPES_DASK,
    ARRAY_TYPES_SPARSE,
    ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED,
)",ARRAY_TYPES,scanpy.testing._pytest.params,scanpy.testing._pytest.params,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,ARRAY_TYPES_DASK from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES_DASK from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,"from scanpy.testing._pytest.params import (
    ARRAY_TYPES,
    ARRAY_TYPES_DASK,
    ARRAY_TYPES_SPARSE,
    ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED,
)",ARRAY_TYPES_DASK,scanpy.testing._pytest.params,scanpy.testing._pytest.params,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,ARRAY_TYPES_SPARSE from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES_SPARSE from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,"from scanpy.testing._pytest.params import (
    ARRAY_TYPES,
    ARRAY_TYPES_DASK,
    ARRAY_TYPES_SPARSE,
    ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED,
)",ARRAY_TYPES_SPARSE,scanpy.testing._pytest.params,scanpy.testing._pytest.params,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,"from scanpy.testing._pytest.params import (
    ARRAY_TYPES,
    ARRAY_TYPES_DASK,
    ARRAY_TYPES_SPARSE,
    ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED,
)",ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED,scanpy.testing._pytest.params,scanpy.testing._pytest.params,,,,,,,,,,,,,,
,test_utils.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_utils.py,python,,,,,,Directory: scanpy\tests\test_utils.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_integrate.py,python,test_harmony_integrate(),function,test_harmony_integrate,(),,Function: test_harmony_integrate(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_integrate.py,python,pytestmark = [needs.harmonypy],constant,,,,Constant: pytestmark = [needs.harmonypy],scverse,scanpy,1.10.1,,,,,pytestmark = [needs.harmonypy],pytestmark,[needs.harmonypy],,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_integrate.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_integrate.py,python,scanpy.external,import,,,,Import: scanpy.external,scverse,scanpy,1.10.1,import scanpy.external as sce,scanpy.external,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_integrate.py,python,pbmc3k from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc3k,pbmc3k,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_integrate.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,needs,scanpy.testing._pytest.marks,scanpy.testing._pytest.marks,,,,,,,,,,,,,,
,test_harmony_integrate.py,python,,,,,,File: scanpy\tests\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_harmony_integrate.py,python,,,,,,Directory: scanpy\tests\external\test_harmony_integrate.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_timeseries.py,python,test_load_timepoints_from_anndata_list(),function,test_load_timepoints_from_anndata_list,(),,Function: test_load_timepoints_from_anndata_list(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_timeseries.py,python,pytestmark = [needs.harmony],constant,,,,Constant: pytestmark = [needs.harmony],scverse,scanpy,1.10.1,,,,,pytestmark = [needs.harmony],pytestmark,[needs.harmony],,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_timeseries.py,python,product from itertools,import,,,,Import: product from itertools,scverse,scanpy,1.10.1,from itertools import product,product,itertools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_timeseries.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_timeseries.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_timeseries.py,python,scanpy.external,import,,,,Import: scanpy.external,scverse,scanpy,1.10.1,import scanpy.external as sce,scanpy.external,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_timeseries.py,python,pbmc3k from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc3k,pbmc3k,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_timeseries.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,needs,scanpy.testing._pytest.marks,scanpy.testing._pytest.marks,,,,,,,,,,,,,,
,test_harmony_timeseries.py,python,,,,,,File: scanpy\tests\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_harmony_timeseries.py,python,,,,,,Directory: scanpy\tests\external\test_harmony_timeseries.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_hashsolo.py,python,test_cell_demultiplexing(),function,test_cell_demultiplexing,(),,Function: test_cell_demultiplexing(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_hashsolo.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_hashsolo.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_hashsolo.py,python,scanpy.external,import,,,,Import: scanpy.external,scverse,scanpy,1.10.1,import scanpy.external as sce,scanpy.external,,,,,,,,,,,,,,,,
,test_hashsolo.py,python,,,,,,File: scanpy\tests\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_hashsolo.py,python,,,,,,Directory: scanpy\tests\external\test_hashsolo.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_magic.py,python,test_magic_default(),function,test_magic_default,(),,Function: test_magic_default(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_magic.py,python,test_magic_pca_only(),function,test_magic_pca_only,(),,Function: test_magic_pca_only(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_magic.py,python,test_magic_copy(),function,test_magic_copy,(),,Function: test_magic_copy(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_magic.py,python,pytestmark = [needs.magic],constant,,,,Constant: pytestmark = [needs.magic],scverse,scanpy,1.10.1,,,,,pytestmark = [needs.magic],pytestmark,[needs.magic],,,,,,,,,,,
scverse_scanpy_1.10.1,test_magic.py,python,"A_list = [
    [0, 0, 7, 0, 0],
    [8, 5, 0, 2, 0],
    [6, 0, 0, 2, 5],
    [0, 0, 0, 1, 0],
    [8, 8, 2, 1, 0],
    [0, 0, 0, 4, 5],
]",constant,,,,"Constant: A_list = [
    [0, 0, 7, 0, 0],
    [8, 5, 0, 2, 0],
    [6, 0, 0, 2, 5],
    [0, 0, 0, 1, 0],
    [8, 8, 2, 1, 0],
    [0, 0, 0, 4, 5],
]",scverse,scanpy,1.10.1,,,,,"A_list = [
    [0, 0, 7, 0, 0],
    [8, 5, 0, 2, 0],
    [6, 0, 0, 2, 5],
    [0, 0, 0, 1, 0],
    [8, 8, 2, 1, 0],
    [0, 0, 0, 4, 5],
]",A_list,"[
    [0, 0, 7, 0, 0],
    [8, 5, 0, 2, 0],
    [6, 0, 0, 2, 5],
    [0, 0, 0, 1, 0],
    [8, 8, 2, 1, 0],
    [0, 0, 0, 4, 5],
]",,,,,,,,,,,
scverse_scanpy_1.10.1,test_magic.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_magic.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_magic.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_magic.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,needs,scanpy.testing._pytest.marks,scanpy.testing._pytest.marks,,,,,,,,,,,,,,
,test_magic.py,python,,,,,,File: scanpy\tests\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_magic.py,python,,,,,,Directory: scanpy\tests\external\test_magic.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_palantir.py,python,test_palantir_core(),function,test_palantir_core,(),,Function: test_palantir_core(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_palantir.py,python,pytestmark = [needs.palantir],constant,,,,Constant: pytestmark = [needs.palantir],scverse,scanpy,1.10.1,,,,,pytestmark = [needs.palantir],pytestmark,[needs.palantir],,,,,,,,,,,
scverse_scanpy_1.10.1,test_palantir.py,python,scanpy.external,import,,,,Import: scanpy.external,scverse,scanpy,1.10.1,import scanpy.external as sce,scanpy.external,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_palantir.py,python,pbmc3k_processed from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k_processed from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc3k_processed,pbmc3k_processed,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_palantir.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,needs,scanpy.testing._pytest.marks,scanpy.testing._pytest.marks,,,,,,,,,,,,,,
,test_palantir.py,python,,,,,,File: scanpy\tests\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_palantir.py,python,,,,,,Directory: scanpy\tests\external\test_palantir.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_phenograph.py,python,test_phenograph(),function,test_phenograph,(),,Function: test_phenograph(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_phenograph.py,python,pytestmark = [needs.phenograph],constant,,,,Constant: pytestmark = [needs.phenograph],scverse,scanpy,1.10.1,,,,,pytestmark = [needs.phenograph],pytestmark,[needs.phenograph],,,,,,,,,,,
scverse_scanpy_1.10.1,test_phenograph.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_phenograph.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_phenograph.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_phenograph.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_phenograph.py,python,scanpy.external,import,,,,Import: scanpy.external,scverse,scanpy,1.10.1,import scanpy.external as sce,scanpy.external,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_phenograph.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,needs,scanpy.testing._pytest.marks,scanpy.testing._pytest.marks,,,,,,,,,,,,,,
,test_phenograph.py,python,,,,,,File: scanpy\tests\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_phenograph.py,python,,,,,,Directory: scanpy\tests\external\test_phenograph.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_sam.py,python,test_sam(),function,test_sam,(),,Function: test_sam(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_sam.py,python,pytestmark = [needs.samalg],constant,,,,Constant: pytestmark = [needs.samalg],scverse,scanpy,1.10.1,,,,,pytestmark = [needs.samalg],pytestmark,[needs.samalg],,,,,,,,,,,
scverse_scanpy_1.10.1,test_sam.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_sam.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_sam.py,python,scanpy.external,import,,,,Import: scanpy.external,scverse,scanpy,1.10.1,import scanpy.external as sce,scanpy.external,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_sam.py,python,pbmc3k from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc3k,pbmc3k,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_sam.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,needs,scanpy.testing._pytest.marks,scanpy.testing._pytest.marks,,,,,,,,,,,,,,
,test_sam.py,python,,,,,,File: scanpy\tests\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_sam.py,python,,,,,,Directory: scanpy\tests\external\test_sam.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scanorama_integrate.py,python,test_scanorama_integrate(),function,test_scanorama_integrate,(),,Function: test_scanorama_integrate(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scanorama_integrate.py,python,pytestmark = [needs.scanorama],constant,,,,Constant: pytestmark = [needs.scanorama],scverse,scanpy,1.10.1,,,,,pytestmark = [needs.scanorama],pytestmark,[needs.scanorama],,,,,,,,,,,
scverse_scanpy_1.10.1,test_scanorama_integrate.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scanorama_integrate.py,python,scanpy.external,import,,,,Import: scanpy.external,scverse,scanpy,1.10.1,import scanpy.external as sce,scanpy.external,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scanorama_integrate.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,pbmc68k_reduced,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scanorama_integrate.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,needs,scanpy.testing._pytest.marks,scanpy.testing._pytest.marks,,,,,,,,,,,,,,
,test_scanorama_integrate.py,python,,,,,,File: scanpy\tests\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_scanorama_integrate.py,python,,,,,,Directory: scanpy\tests\external\test_scanorama_integrate.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_wishbone.py,python,test_run_wishbone(),function,test_run_wishbone,(),,Function: test_run_wishbone(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_wishbone.py,python,pytestmark = [needs.wishbone],constant,,,,Constant: pytestmark = [needs.wishbone],scverse,scanpy,1.10.1,,,,,pytestmark = [needs.wishbone],pytestmark,[needs.wishbone],,,,,,,,,,,
scverse_scanpy_1.10.1,test_wishbone.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_wishbone.py,python,scanpy.external,import,,,,Import: scanpy.external,scverse,scanpy,1.10.1,import scanpy.external as sce,scanpy.external,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_wishbone.py,python,pbmc3k from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc3k,pbmc3k,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_wishbone.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,needs,scanpy.testing._pytest.marks,scanpy.testing._pytest.marks,,,,,,,,,,,,,,
,test_wishbone.py,python,,,,,,File: scanpy\tests\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_wishbone.py,python,,,,,,Directory: scanpy\tests\external\test_wishbone.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga_paul15_subsampled.py,python,HERE: Path = Path(__file__).parent,constant,,,,Constant: HERE: Path = Path(__file__).parent,scverse,scanpy,1.10.1,,,,,HERE: Path = Path(__file__).parent,HERE,Path(__file__).parent,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga_paul15_subsampled.py,python,"ROOT = HERE / ""_images_paga_paul15_subsampled""",constant,,,,"Constant: ROOT = HERE / ""_images_paga_paul15_subsampled""",scverse,scanpy,1.10.1,,,,,"ROOT = HERE / ""_images_paga_paul15_subsampled""",ROOT,"HERE / ""_images_paga_paul15_subsampled""",,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga_paul15_subsampled.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,partial,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga_paul15_subsampled.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga_paul15_subsampled.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga_paul15_subsampled.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,pytest,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga_paul15_subsampled.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga_paul15_subsampled.py,python,setup from matplotlib.testing,local_import,,,,Import: setup from matplotlib.testing,scverse,scanpy,1.10.1,from matplotlib.testing import setup,setup,matplotlib.testing,matplotlib.testing,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga_paul15_subsampled.py,python,paul15 from scanpy.testing._helpers.data,local_import,,,,Import: paul15 from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import paul15,paul15,scanpy.testing._helpers.data,scanpy.testing._helpers.data,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga_paul15_subsampled.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,needs,scanpy.testing._pytest.marks,scanpy.testing._pytest.marks,,,,,,,,,,,,,,
,test_paga_paul15_subsampled.py,python,,,,,,File: scanpy\tests\notebooks,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_paga_paul15_subsampled.py,python,,,,,,Directory: scanpy\tests\notebooks\test_paga_paul15_subsampled.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pbmc3k.py,python,HERE: Path = Path(__file__).parent,constant,,,,Constant: HERE: Path = Path(__file__).parent,scverse,scanpy,1.10.1,,,,,HERE: Path = Path(__file__).parent,HERE,Path(__file__).parent,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pbmc3k.py,python,"ROOT = HERE / ""_images_pbmc3k""",constant,,,,"Constant: ROOT = HERE / ""_images_pbmc3k""",scverse,scanpy,1.10.1,,,,,"ROOT = HERE / ""_images_pbmc3k""",ROOT,"HERE / ""_images_pbmc3k""",,,,,,,,,,,
scverse_scanpy_1.10.1,test_pbmc3k.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,partial,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pbmc3k.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pbmc3k.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pbmc3k.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,scanpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pbmc3k.py,python,setup from matplotlib.testing,local_import,,,,Import: setup from matplotlib.testing,scverse,scanpy,1.10.1,from matplotlib.testing import setup,setup,matplotlib.testing,matplotlib.testing,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pbmc3k.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,needs,scanpy.testing._pytest.marks,scanpy.testing._pytest.marks,,,,,,,,,,,,,,
,test_pbmc3k.py,python,,,,,,File: scanpy\tests\notebooks,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_pbmc3k.py,python,,,,,,Directory: scanpy\tests\notebooks\test_pbmc3k.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dendrogram.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dendrogram.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",Any,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dendrogram.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dendrogram.py,python,CategoricalDtype from pandas.api.types,local_import,,,,Import: CategoricalDtype from pandas.api.types,scverse,scanpy,1.10.1,from pandas.api.types import CategoricalDtype,CategoricalDtype,pandas.api.types,pandas.api.types,,,,,,,,,,,,,,
,_dendrogram.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_dendrogram.py,python,,,,,,Directory: scanpy\tools\_dendrogram.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_diffmap.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
,_diffmap.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_diffmap.py,python,,,,,,Directory: scanpy\tools\_diffmap.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"[instance] DPT.flavor = ""haghverdi16""",class_field,,,,"Class field: [instance] DPT.flavor = ""haghverdi16""",scverse,scanpy,1.10.1,,,,,,,,,DPT,__init__,"(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        min_group_size: float = 0.01,
        n_branchings: int = 0,
        allow_kendall_tau_shift: bool = False,
        neighbors_key: str | None = None,
    )","self.flavor = ""haghverdi16""","self.flavor = ""haghverdi16""",,,,,
scverse_scanpy_1.10.1,_dpt.py,python,[instance] DPT.n_branchings = n_branchings,class_field,,,,Class field: [instance] DPT.n_branchings = n_branchings,scverse,scanpy,1.10.1,,,,,,,,,DPT,__init__,"(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        min_group_size: float = 0.01,
        n_branchings: int = 0,
        allow_kendall_tau_shift: bool = False,
        neighbors_key: str | None = None,
    )",self.n_branchings = n_branchings,self.n_branchings = n_branchings,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"[instance] DPT.min_group_size = (
            min_group_size
            if min_group_size >= 1
            else int(min_group_size * _adata.shape[0])
        )",class_field,,,,"Class field: [instance] DPT.min_group_size = (
            min_group_size
            if min_group_size >= 1
            else int(min_group_size * _adata.shape[0])
        )",scverse,scanpy,1.10.1,,,,,,,,,DPT,__init__,"(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        min_group_size: float = 0.01,
        n_branchings: int = 0,
        allow_kendall_tau_shift: bool = False,
        neighbors_key: str | None = None,
    )","self.min_group_size = (
            min_group_size
            if min_group_size >= 1
            else int(min_group_size * self._adata.shape[0])
        )","self.min_group_size = (
            min_group_size
            if min_group_size >= 1
            else int(min_group_size * self._adata.shape[0])
        )",,,,,
scverse_scanpy_1.10.1,_dpt.py,python,[instance] DPT.passed_adata = adata,class_field,,,,Class field: [instance] DPT.passed_adata = adata,scverse,scanpy,1.10.1,,,,,,,,,DPT,__init__,"(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        min_group_size: float = 0.01,
        n_branchings: int = 0,
        allow_kendall_tau_shift: bool = False,
        neighbors_key: str | None = None,
    )",self.passed_adata = adata,self.passed_adata = adata,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,[instance] DPT.choose_largest_segment = False,class_field,,,,Class field: [instance] DPT.choose_largest_segment = False,scverse,scanpy,1.10.1,,,,,,,,,DPT,__init__,"(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        min_group_size: float = 0.01,
        n_branchings: int = 0,
        allow_kendall_tau_shift: bool = False,
        neighbors_key: str | None = None,
    )",self.choose_largest_segment = False,self.choose_largest_segment = False,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,[instance] DPT.allow_kendall_tau_shift = allow_kendall_tau_shift,class_field,,,,Class field: [instance] DPT.allow_kendall_tau_shift = allow_kendall_tau_shift,scverse,scanpy,1.10.1,,,,,,,,,DPT,__init__,"(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        min_group_size: float = 0.01,
        n_branchings: int = 0,
        allow_kendall_tau_shift: bool = False,
        neighbors_key: str | None = None,
    )",self.allow_kendall_tau_shift = allow_kendall_tau_shift,self.allow_kendall_tau_shift = allow_kendall_tau_shift,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT.__init__(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        min_group_size: float = 0.01,
        n_branchings: int = 0,
        allow_kendall_tau_shift: bool = False,
        neighbors_key: str | None = None,
    )",class_method,,,,"Class method: DPT.__init__(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        min_group_size: float = 0.01,
        n_branchings: int = 0,
        allow_kendall_tau_shift: bool = False,
        neighbors_key: str | None = None,
    )",scverse,scanpy,1.10.1,,,,,,,,,DPT,__init__,"(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        min_group_size: float = 0.01,
        n_branchings: int = 0,
        allow_kendall_tau_shift: bool = False,
        neighbors_key: str | None = None,
    )",,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,DPT.branchings_segments(self),class_method,,,,Class method: DPT.branchings_segments(self),scverse,scanpy,1.10.1,,,,,,,,,DPT,branchings_segments,(self),,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,DPT.detect_branchings(self),class_method,,,,Class method: DPT.detect_branchings(self),scverse,scanpy,1.10.1,,,,,,,,,DPT,detect_branchings,(self),,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,DPT.check_adjacency(self),class_method,,,,Class method: DPT.check_adjacency(self),scverse,scanpy,1.10.1,,,,,,,,,DPT,check_adjacency,(self),,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT.select_segment(self, segs, segs_tips, segs_undecided) -> tuple[int, int]",class_method,,,,"Class method: DPT.select_segment(self, segs, segs_tips, segs_undecided) -> tuple[int, int]",scverse,scanpy,1.10.1,,,,,,,,,DPT,select_segment,"(self, segs, segs_tips, segs_undecided)",,,"tuple[int, int]",,,,
scverse_scanpy_1.10.1,_dpt.py,python,DPT.postprocess_segments(self),class_method,,,,Class method: DPT.postprocess_segments(self),scverse,scanpy,1.10.1,,,,,,,,,DPT,postprocess_segments,(self),,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,DPT.set_segs_names(self),class_method,,,,Class method: DPT.set_segs_names(self),scverse,scanpy,1.10.1,,,,,,,,,DPT,set_segs_names,(self),,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,DPT.order_pseudotime(self),class_method,,,,Class method: DPT.order_pseudotime(self),scverse,scanpy,1.10.1,,,,,,,,,DPT,order_pseudotime,(self),,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT.detect_branching(
        self,
        *,
        segs: Sequence[np.ndarray],
        segs_tips: Sequence[np.ndarray],
        segs_connects,
        segs_undecided,
        segs_adjacency,
        iseg: int,
        tips3: np.ndarray,
    )",class_method,,,,"Class method: DPT.detect_branching(
        self,
        *,
        segs: Sequence[np.ndarray],
        segs_tips: Sequence[np.ndarray],
        segs_connects,
        segs_undecided,
        segs_adjacency,
        iseg: int,
        tips3: np.ndarray,
    )",scverse,scanpy,1.10.1,,,,,,,,,DPT,detect_branching,"(
        self,
        *,
        segs: Sequence[np.ndarray],
        segs_tips: Sequence[np.ndarray],
        segs_connects,
        segs_undecided,
        segs_adjacency,
        iseg: int,
        tips3: np.ndarray,
    )",,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT._detect_branching(
        self,
        Dseg: np.ndarray,
        tips: np.ndarray,
        seg_reference=None,
    ) -> tuple[
        list[np.ndarray],
        list[np.ndarray],
        list[list[int]],
        list[list[int]],
        int,
    ]",class_method,,,,"Class method: DPT._detect_branching(
        self,
        Dseg: np.ndarray,
        tips: np.ndarray,
        seg_reference=None,
    ) -> tuple[
        list[np.ndarray],
        list[np.ndarray],
        list[list[int]],
        list[list[int]],
        int,
    ]",scverse,scanpy,1.10.1,,,,,,,,,DPT,_detect_branching,"(
        self,
        Dseg: np.ndarray,
        tips: np.ndarray,
        seg_reference=None,
    )",,,"tuple[
        list[np.ndarray],
        list[np.ndarray],
        list[list[int]],
        list[list[int]],
        int,
    ]",,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT._detect_branching_single_haghverdi16(self, Dseg, tips)",class_method,,,,"Class method: DPT._detect_branching_single_haghverdi16(self, Dseg, tips)",scverse,scanpy,1.10.1,,,,,,,,,DPT,_detect_branching_single_haghverdi16,"(self, Dseg, tips)",,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT._detect_branching_single_wolf17_tri(self, Dseg, tips)",class_method,,,,"Class method: DPT._detect_branching_single_wolf17_tri(self, Dseg, tips)",scverse,scanpy,1.10.1,,,,,,,,,DPT,_detect_branching_single_wolf17_tri,"(self, Dseg, tips)",,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT._detect_branching_single_wolf17_bi(self, Dseg, tips)",class_method,,,,"Class method: DPT._detect_branching_single_wolf17_bi(self, Dseg, tips)",scverse,scanpy,1.10.1,,,,,,,,,DPT,_detect_branching_single_wolf17_bi,"(self, Dseg, tips)",,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT.__detect_branching_haghverdi16(
        self, Dseg: np.ndarray, tips: np.ndarray
    ) -> np.ndarray",class_method,,,,"Class method: DPT.__detect_branching_haghverdi16(
        self, Dseg: np.ndarray, tips: np.ndarray
    ) -> np.ndarray",scverse,scanpy,1.10.1,,,,,,,,,DPT,__detect_branching_haghverdi16,"(
        self, Dseg: np.ndarray, tips: np.ndarray
    )",,,np.ndarray,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT.kendall_tau_split(self, a: np.ndarray, b: np.ndarray) -> int",class_method,,,,"Class method: DPT.kendall_tau_split(self, a: np.ndarray, b: np.ndarray) -> int",scverse,scanpy,1.10.1,,,,,,,,,DPT,kendall_tau_split,"(self, a: np.ndarray, b: np.ndarray)",,,int,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT._kendall_tau_add(self, len_old: int, diff_pos: int, tau_old: float)",class_method,,,,"Class method: DPT._kendall_tau_add(self, len_old: int, diff_pos: int, tau_old: float)",scverse,scanpy,1.10.1,,,,,,,,,DPT,_kendall_tau_add,"(self, len_old: int, diff_pos: int, tau_old: float)",,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT._kendall_tau_subtract(self, len_old: int, diff_neg: int, tau_old: float)",class_method,,,,"Class method: DPT._kendall_tau_subtract(self, len_old: int, diff_neg: int, tau_old: float)",scverse,scanpy,1.10.1,,,,,,,,,DPT,_kendall_tau_subtract,"(self, len_old: int, diff_neg: int, tau_old: float)",,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT._kendall_tau_diff(self, a: np.ndarray, b: np.ndarray, i) -> tuple[int, int]",class_method,,,,"Class method: DPT._kendall_tau_diff(self, a: np.ndarray, b: np.ndarray, i) -> tuple[int, int]",scverse,scanpy,1.10.1,,,,,,,,,DPT,_kendall_tau_diff,"(self, a: np.ndarray, b: np.ndarray, i)",,,"tuple[int, int]",,,,
scverse_scanpy_1.10.1,_dpt.py,python,DPT(Neighbors),class,,,,Class: DPT(Neighbors),scverse,scanpy,1.10.1,,,,,,,,,DPT,,,,,,,(Neighbors),,
scverse_scanpy_1.10.1,_dpt.py,python,"_diffmap(adata, n_comps=15, neighbors_key=None, random_state=0)",function,_diffmap,"(adata, n_comps=15, neighbors_key=None, random_state=0)",,"Function: _diffmap(adata, n_comps=15, neighbors_key=None, random_state=0)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,scipy,import,,,,Import: scipy,scverse,scanpy,1.10.1,import scipy as sp,scipy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,natsorted from natsort,import,,,,Import: natsorted from natsort,scverse,scanpy,1.10.1,from natsort import natsorted,natsorted,natsort,,,,,,,,,,,,,,,
,_dpt.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_dpt.py,python,,,,,,Directory: scanpy\tools\_dpt.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_draw_graph.py,python,"_LAYOUTS = (""fr"", ""drl"", ""kk"", ""grid_fr"", ""lgl"", ""rt"", ""rt_circular"", ""fa"")",constant,,,,"Constant: _LAYOUTS = (""fr"", ""drl"", ""kk"", ""grid_fr"", ""lgl"", ""rt"", ""rt_circular"", ""fa"")",scverse,scanpy,1.10.1,,,,,"_LAYOUTS = (""fr"", ""drl"", ""kk"", ""grid_fr"", ""lgl"", ""rt"", ""rt_circular"", ""fa"")",_LAYOUTS,"(""fr"", ""drl"", ""kk"", ""grid_fr"", ""lgl"", ""rt"", ""rt_circular"", ""fa"")",,,,,,,,,,,
scverse_scanpy_1.10.1,_draw_graph.py,python,_Layout = Literal[_LAYOUTS],constant,,,,Constant: _Layout = Literal[_LAYOUTS],scverse,scanpy,1.10.1,,,,,_Layout = Literal[_LAYOUTS],_Layout,Literal[_LAYOUTS],,,,,,,,,,,
scverse_scanpy_1.10.1,_draw_graph.py,python,random,import,,,,Import: random,scverse,scanpy,1.10.1,import random,random,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_draw_graph.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_draw_graph.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_draw_graph.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
,_draw_graph.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_draw_graph.py,python,,,,,,Directory: scanpy\tools\_draw_graph.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_embedding_density.py,python,"_calc_density(x: np.ndarray, y: np.ndarray)",function,_calc_density,"(x: np.ndarray, y: np.ndarray)",,"Function: _calc_density(x: np.ndarray, y: np.ndarray)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_embedding_density.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_embedding_density.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
,_embedding_density.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_embedding_density.py,python,,,,,,Directory: scanpy\tools\_embedding_density.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] _DimDict._data = {},class_field,,,,Class field: [instance] _DimDict._data = {},scverse,scanpy,1.10.1,,,,,,,,,_DimDict,__init__,"(self, dim, axis=0, vals=None)",self._data = {},self._data = {},,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] _DimDict._dim = dim,class_field,,,,Class field: [instance] _DimDict._dim = dim,scverse,scanpy,1.10.1,,,,,,,,,_DimDict,__init__,"(self, dim, axis=0, vals=None)",self._dim = dim,self._dim = dim,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] _DimDict._axis = axis,class_field,,,,Class field: [instance] _DimDict._axis = axis,scverse,scanpy,1.10.1,,,,,,,,,_DimDict,__init__,"(self, dim, axis=0, vals=None)",self._axis = axis,self._axis = axis,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] Ingest._rep = adata.X,class_field,,,,Class field: [instance] Ingest._rep = adata.X,scverse,scanpy,1.10.1,,,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)",self._rep = adata.X,self._rep = adata.X,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"[instance] Ingest._use_rep = ""X""",class_field,,,,"Class field: [instance] Ingest._use_rep = ""X""",scverse,scanpy,1.10.1,,,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)","self._use_rep = ""X""","self._use_rep = ""X""",,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] Ingest._n_pcs = None,class_field,,,,Class field: [instance] Ingest._n_pcs = None,scverse,scanpy,1.10.1,,,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)",self._n_pcs = None,self._n_pcs = None,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] Ingest._adata_ref = adata,class_field,,,,Class field: [instance] Ingest._adata_ref = adata,scverse,scanpy,1.10.1,,,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)",self._adata_ref = adata,self._adata_ref = adata,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] Ingest._adata_new = None,class_field,,,,Class field: [instance] Ingest._adata_new = None,scverse,scanpy,1.10.1,,,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)",self._adata_new = None,self._adata_new = None,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] Ingest._obsm = None,class_field,,,,Class field: [instance] Ingest._obsm = None,scverse,scanpy,1.10.1,,,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)",self._obsm = None,self._obsm = None,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] Ingest._obs = None,class_field,,,,Class field: [instance] Ingest._obs = None,scverse,scanpy,1.10.1,,,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)",self._obs = None,self._obs = None,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] Ingest._labels = None,class_field,,,,Class field: [instance] Ingest._labels = None,scverse,scanpy,1.10.1,,,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)",self._labels = None,self._labels = None,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] Ingest._indices = None,class_field,,,,Class field: [instance] Ingest._indices = None,scverse,scanpy,1.10.1,,,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)",self._indices = None,self._indices = None,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] Ingest._distances = None,class_field,,,,Class field: [instance] Ingest._distances = None,scverse,scanpy,1.10.1,,,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)",self._distances = None,self._distances = None,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"_DimDict.__init__(self, dim, axis=0, vals=None)",class_method,,,,"Class method: _DimDict.__init__(self, dim, axis=0, vals=None)",scverse,scanpy,1.10.1,,,,,,,,,_DimDict,__init__,"(self, dim, axis=0, vals=None)",,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"_DimDict.__setitem__(self, key, value)",class_method,,,,"Class method: _DimDict.__setitem__(self, key, value)",scverse,scanpy,1.10.1,,,,,,,,,_DimDict,__setitem__,"(self, key, value)",,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"_DimDict.__getitem__(self, key)",class_method,,,,"Class method: _DimDict.__getitem__(self, key)",scverse,scanpy,1.10.1,,,,,,,,,_DimDict,__getitem__,"(self, key)",,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"_DimDict.__delitem__(self, key)",class_method,,,,"Class method: _DimDict.__delitem__(self, key)",scverse,scanpy,1.10.1,,,,,,,,,_DimDict,__delitem__,"(self, key)",,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,_DimDict.__iter__(self),class_method,,,,Class method: _DimDict.__iter__(self),scverse,scanpy,1.10.1,,,,,,,,,_DimDict,__iter__,(self),,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,_DimDict.__len__(self),class_method,,,,Class method: _DimDict.__len__(self),scverse,scanpy,1.10.1,,,,,,,,,_DimDict,__len__,(self),,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,_DimDict.__repr__(self),class_method,,,,Class method: _DimDict.__repr__(self),scverse,scanpy,1.10.1,,,,,,,,,_DimDict,__repr__,(self),,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest._init_umap(self, adata)",class_method,,,,"Class method: Ingest._init_umap(self, adata)",scverse,scanpy,1.10.1,,,,,,,,,Ingest,_init_umap,"(self, adata)",,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest._init_pynndescent(self, distances)",class_method,,,,"Class method: Ingest._init_pynndescent(self, distances)",scverse,scanpy,1.10.1,,,,,,,,,Ingest,_init_pynndescent,"(self, distances)",,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest._init_neighbors(self, adata, neighbors_key)",class_method,,,,"Class method: Ingest._init_neighbors(self, adata, neighbors_key)",scverse,scanpy,1.10.1,,,,,,,,,Ingest,_init_neighbors,"(self, adata, neighbors_key)",,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest._init_pca(self, adata)",class_method,,,,"Class method: Ingest._init_pca(self, adata)",scverse,scanpy,1.10.1,,,,,,,,,Ingest,_init_pca,"(self, adata)",,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest.__init__(self, adata: AnnData, neighbors_key: str | None = None)",class_method,,,,"Class method: Ingest.__init__(self, adata: AnnData, neighbors_key: str | None = None)",scverse,scanpy,1.10.1,,,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)",,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest._pca(self, n_pcs=None)",class_method,,,,"Class method: Ingest._pca(self, n_pcs=None)",scverse,scanpy,1.10.1,,,,,,,,,Ingest,_pca,"(self, n_pcs=None)",,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,Ingest._same_rep(self),class_method,,,,Class method: Ingest._same_rep(self),scverse,scanpy,1.10.1,,,,,,,,,Ingest,_same_rep,(self),,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest.fit(self, adata_new)",class_method,,,,"Class method: Ingest.fit(self, adata_new)",scverse,scanpy,1.10.1,,,,,,,,,Ingest,fit,"(self, adata_new)",,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest.neighbors(self, k=None, queue_size=5, epsilon=0.1, random_state=0)",class_method,,,,"Class method: Ingest.neighbors(self, k=None, queue_size=5, epsilon=0.1, random_state=0)",scverse,scanpy,1.10.1,,,,,,,,,Ingest,neighbors,"(self, k=None, queue_size=5, epsilon=0.1, random_state=0)",,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,Ingest._umap_transform(self),class_method,,,,Class method: Ingest._umap_transform(self),scverse,scanpy,1.10.1,,,,,,,,,Ingest,_umap_transform,(self),,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest.map_embedding(self, method)",class_method,,,,"Class method: Ingest.map_embedding(self, method)",scverse,scanpy,1.10.1,,,,,,,,,Ingest,map_embedding,"(self, method)",,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest._knn_classify(self, labels)",class_method,,,,"Class method: Ingest._knn_classify(self, labels)",scverse,scanpy,1.10.1,,,,,,,,,Ingest,_knn_classify,"(self, labels)",,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest.map_labels(self, labels, method)",class_method,,,,"Class method: Ingest.map_labels(self, labels, method)",scverse,scanpy,1.10.1,,,,,,,,,Ingest,map_labels,"(self, labels, method)",,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest.to_adata(self, inplace=False)",class_method,,,,"Class method: Ingest.to_adata(self, inplace=False)",scverse,scanpy,1.10.1,,,,,,,,,Ingest,to_adata,"(self, inplace=False)",,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest.to_adata_joint(
        self, batch_key=""batch"", batch_categories=None, index_unique=""-""
    )",class_method,,,,"Class method: Ingest.to_adata_joint(
        self, batch_key=""batch"", batch_categories=None, index_unique=""-""
    )",scverse,scanpy,1.10.1,,,,,,,,,Ingest,to_adata_joint,"(
        self, batch_key=""batch"", batch_categories=None, index_unique=""-""
    )",,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,_DimDict(MutableMapping),class,,,,Class: _DimDict(MutableMapping),scverse,scanpy,1.10.1,,,,,,,,,_DimDict,,,,,,,(MutableMapping),,
scverse_scanpy_1.10.1,_ingest.py,python,Ingest,class,,,,Class: Ingest,scverse,scanpy,1.10.1,,,,,,,,,Ingest,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"_rp_forest_generate(
    rp_forest_dict: RPForestDict,
) -> Generator[FlatTree, None, None]",function,_rp_forest_generate,"(
    rp_forest_dict: RPForestDict,
)","Generator[FlatTree, None, None]","Function: _rp_forest_generate(
    rp_forest_dict: RPForestDict,
) -> Generator[FlatTree, None, None]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"ANNDATA_MIN_VERSION = version.parse(""0.7rc1"")",constant,,,,"Constant: ANNDATA_MIN_VERSION = version.parse(""0.7rc1"")",scverse,scanpy,1.10.1,,,,,"ANNDATA_MIN_VERSION = version.parse(""0.7rc1"")",ANNDATA_MIN_VERSION,"version.parse(""0.7rc1"")",,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,version,packaging,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,Generator from collections.abc,local_import,,,,Import: Generator from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Generator, Iterable, MutableMapping",Generator,collections.abc,collections.abc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,Iterable from collections.abc,local_import,,,,Import: Iterable from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Generator, Iterable, MutableMapping",Iterable,collections.abc,collections.abc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,MutableMapping from collections.abc,local_import,,,,Import: MutableMapping from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Generator, Iterable, MutableMapping",MutableMapping,collections.abc,collections.abc,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import issparse,issparse,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,check_random_state from sklearn.utils,local_import,,,,Import: check_random_state from sklearn.utils,scverse,scanpy,1.10.1,from sklearn.utils import check_random_state,check_random_state,sklearn.utils,sklearn.utils,,,,,,,,,,,,,,
,_ingest.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_ingest.py,python,,,,,,Directory: scanpy\tools\_ingest.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_leiden.py,python,MutableVertexPartition,class,,,,Class: MutableVertexPartition,scverse,scanpy,1.10.1,,,,,,,,,MutableVertexPartition,,,,,,,,,
scverse_scanpy_1.10.1,_leiden.py,python,"leiden(
    adata: AnnData,
    resolution: float = 1,
    *,
    restrict_to: tuple[str, Sequence[str]] | None = None,
    random_state: _utils.AnyRandom = 0,
    key_added: str = ""leiden"",
    adjacency: sparse.spmatrix | None = None,
    directed: bool | None = None,
    use_weights: bool = True,
    n_iterations: int = -1,
    partition_type: type[MutableVertexPartition] | None = None,
    neighbors_key: str | None = None,
    obsp: str | None = None,
    copy: bool = False,
    flavor: Literal[""leidenalg"", ""ipgraph""] = ""leidenalg"",
    **clustering_args,
) -> AnnData | None",function,leiden,"(
    adata: AnnData,
    resolution: float = 1,
    *,
    restrict_to: tuple[str, Sequence[str]] | None = None,
    random_state: _utils.AnyRandom = 0,
    key_added: str = ""leiden"",
    adjacency: sparse.spmatrix | None = None,
    directed: bool | None = None,
    use_weights: bool = True,
    n_iterations: int = -1,
    partition_type: type[MutableVertexPartition] | None = None,
    neighbors_key: str | None = None,
    obsp: str | None = None,
    copy: bool = False,
    flavor: Literal[""leidenalg"", ""ipgraph""] = ""leidenalg"",
    **clustering_args,
)",AnnData | None,"Function: leiden(
    adata: AnnData,
    resolution: float = 1,
    *,
    restrict_to: tuple[str, Sequence[str]] | None = None,
    random_state: _utils.AnyRandom = 0,
    key_added: str = ""leiden"",
    adjacency: sparse.spmatrix | None = None,
    directed: bool | None = None,
    use_weights: bool = True,
    n_iterations: int = -1,
    partition_type: type[MutableVertexPartition] | None = None,
    neighbors_key: str | None = None,
    obsp: str | None = None,
    copy: bool = False,
    flavor: Literal[""leidenalg"", ""ipgraph""] = ""leidenalg"",
    **clustering_args,
) -> AnnData | None",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_leiden.py,python,importlib,import,,,,Import: importlib,scverse,scanpy,1.10.1,import importlib,importlib,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_leiden.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_leiden.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_leiden.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_leiden.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_leiden.py,python,natsorted from natsort,import,,,,Import: natsorted from natsort,scverse,scanpy,1.10.1,from natsort import natsorted,natsorted,natsort,,,,,,,,,,,,,,,
,_leiden.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_leiden.py,python,,,,,,Directory: scanpy\tools\_leiden.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_louvain.py,python,MutableVertexPartition,class,,,,Class: MutableVertexPartition,scverse,scanpy,1.10.1,,,,,,,,,MutableVertexPartition,,,,,,,,,
scverse_scanpy_1.10.1,_louvain.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_louvain.py,python,MappingProxyType from types,import,,,,Import: MappingProxyType from types,scverse,scanpy,1.10.1,from types import MappingProxyType,MappingProxyType,types,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_louvain.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_louvain.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",Any,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_louvain.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_louvain.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_louvain.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_louvain.py,python,natsorted from natsort,import,,,,Import: natsorted from natsort,scverse,scanpy,1.10.1,from natsort import natsorted,natsorted,natsort,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_louvain.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,version,packaging,,,,,,,,,,,,,,,
,_louvain.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_louvain.py,python,,,,,,Directory: scanpy\tools\_louvain.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_marker_gene_overlap.py,python,"_calc_overlap_count(markers1: dict, markers2: dict)",function,_calc_overlap_count,"(markers1: dict, markers2: dict)",,"Function: _calc_overlap_count(markers1: dict, markers2: dict)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_marker_gene_overlap.py,python,"_calc_overlap_coef(markers1: dict, markers2: dict)",function,_calc_overlap_coef,"(markers1: dict, markers2: dict)",,"Function: _calc_overlap_coef(markers1: dict, markers2: dict)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_marker_gene_overlap.py,python,"_calc_jaccard(markers1: dict, markers2: dict)",function,_calc_jaccard,"(markers1: dict, markers2: dict)",,"Function: _calc_jaccard(markers1: dict, markers2: dict)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_marker_gene_overlap.py,python,"_Method = Literal[""overlap_count"", ""overlap_coef"", ""jaccard""]",constant,,,,"Constant: _Method = Literal[""overlap_count"", ""overlap_coef"", ""jaccard""]",scverse,scanpy,1.10.1,,,,,"_Method = Literal[""overlap_count"", ""overlap_coef"", ""jaccard""]",_Method,"Literal[""overlap_count"", ""overlap_coef"", ""jaccard""]",,,,,,,,,,,
scverse_scanpy_1.10.1,_marker_gene_overlap.py,python,collections.abc,import,,,,Import: collections.abc,scverse,scanpy,1.10.1,import collections.abc as cabc,collections.abc,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_marker_gene_overlap.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_marker_gene_overlap.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_marker_gene_overlap.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_marker_gene_overlap.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
,_marker_gene_overlap.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_marker_gene_overlap.py,python,,,,,,Directory: scanpy\tools\_marker_gene_overlap.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,[instance] PAGA._adata = adata,class_field,,,,Class field: [instance] PAGA._adata = adata,scverse,scanpy,1.10.1,,,,,,,,,PAGA,__init__,"(self, adata, groups, model=""v1.2"", neighbors_key=None)",self._adata = adata,self._adata = adata,,,,,
scverse_scanpy_1.10.1,_paga.py,python,"[instance] PAGA._neighbors = Neighbors(adata, neighbors_key=neighbors_key)",class_field,,,,"Class field: [instance] PAGA._neighbors = Neighbors(adata, neighbors_key=neighbors_key)",scverse,scanpy,1.10.1,,,,,,,,,PAGA,__init__,"(self, adata, groups, model=""v1.2"", neighbors_key=None)","self._neighbors = Neighbors(adata, neighbors_key=neighbors_key)","self._neighbors = Neighbors(adata, neighbors_key=neighbors_key)",,,,,
scverse_scanpy_1.10.1,_paga.py,python,[instance] PAGA._model = model,class_field,,,,Class field: [instance] PAGA._model = model,scverse,scanpy,1.10.1,,,,,,,,,PAGA,__init__,"(self, adata, groups, model=""v1.2"", neighbors_key=None)",self._model = model,self._model = model,,,,,
scverse_scanpy_1.10.1,_paga.py,python,[instance] PAGA._groups_key = groups,class_field,,,,Class field: [instance] PAGA._groups_key = groups,scverse,scanpy,1.10.1,,,,,,,,,PAGA,__init__,"(self, adata, groups, model=""v1.2"", neighbors_key=None)",self._groups_key = groups,self._groups_key = groups,,,,,
scverse_scanpy_1.10.1,_paga.py,python,PAGAComparePathsResult.frac_steps: float,class_field,,,,Class field: PAGAComparePathsResult.frac_steps: float,scverse,scanpy,1.10.1,,,,,,,,,PAGAComparePathsResult,,,frac_steps: float,,,,,frac_steps,
scverse_scanpy_1.10.1,_paga.py,python,PAGAComparePathsResult.n_steps: int,class_field,,,,Class field: PAGAComparePathsResult.n_steps: int,scverse,scanpy,1.10.1,,,,,,,,,PAGAComparePathsResult,,,n_steps: int,,,,,n_steps,
scverse_scanpy_1.10.1,_paga.py,python,PAGAComparePathsResult.frac_paths: float,class_field,,,,Class field: PAGAComparePathsResult.frac_paths: float,scverse,scanpy,1.10.1,,,,,,,,,PAGAComparePathsResult,,,frac_paths: float,,,,,frac_paths,
scverse_scanpy_1.10.1,_paga.py,python,PAGAComparePathsResult.n_paths: int,class_field,,,,Class field: PAGAComparePathsResult.n_paths: int,scverse,scanpy,1.10.1,,,,,,,,,PAGAComparePathsResult,,,n_paths: int,,,,,n_paths,
scverse_scanpy_1.10.1,_paga.py,python,"PAGA.__init__(self, adata, groups, model=""v1.2"", neighbors_key=None)",class_method,,,,"Class method: PAGA.__init__(self, adata, groups, model=""v1.2"", neighbors_key=None)",scverse,scanpy,1.10.1,,,,,,,,,PAGA,__init__,"(self, adata, groups, model=""v1.2"", neighbors_key=None)",,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,PAGA.compute_connectivities(self),class_method,,,,Class method: PAGA.compute_connectivities(self),scverse,scanpy,1.10.1,,,,,,,,,PAGA,compute_connectivities,(self),,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,PAGA._compute_connectivities_v1_2(self),class_method,,,,Class method: PAGA._compute_connectivities_v1_2(self),scverse,scanpy,1.10.1,,,,,,,,,PAGA,_compute_connectivities_v1_2,(self),,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,PAGA._compute_connectivities_v1_0(self),class_method,,,,Class method: PAGA._compute_connectivities_v1_0(self),scverse,scanpy,1.10.1,,,,,,,,,PAGA,_compute_connectivities_v1_0,(self),,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,PAGA._get_connectivities_tree_v1_2(self),class_method,,,,Class method: PAGA._get_connectivities_tree_v1_2(self),scverse,scanpy,1.10.1,,,,,,,,,PAGA,_get_connectivities_tree_v1_2,(self),,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,"PAGA._get_connectivities_tree_v1_0(self, inter_es)",class_method,,,,"Class method: PAGA._get_connectivities_tree_v1_0(self, inter_es)",scverse,scanpy,1.10.1,,,,,,,,,PAGA,_get_connectivities_tree_v1_0,"(self, inter_es)",,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,PAGA.compute_transitions(self),class_method,,,,Class method: PAGA.compute_transitions(self),scverse,scanpy,1.10.1,,,,,,,,,PAGA,compute_transitions,(self),,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,PAGA.compute_transitions_old(self),class_method,,,,Class method: PAGA.compute_transitions_old(self),scverse,scanpy,1.10.1,,,,,,,,,PAGA,compute_transitions_old,(self),,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,PAGA,class,,,,Class: PAGA,scverse,scanpy,1.10.1,,,,,,,,,PAGA,,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,PAGAComparePathsResult(NamedTuple),class,,,,Class: PAGAComparePathsResult(NamedTuple),scverse,scanpy,1.10.1,,,,,,,,,PAGAComparePathsResult,,,,,,,(NamedTuple),,
scverse_scanpy_1.10.1,_paga.py,python,paga_degrees(adata: AnnData) -> list[int],function,paga_degrees,(adata: AnnData),list[int],Function: paga_degrees(adata: AnnData) -> list[int],scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,paga_expression_entropies(adata: AnnData) -> list[float],function,paga_expression_entropies,(adata: AnnData),list[float],Function: paga_expression_entropies(adata: AnnData) -> list[float],scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,"paga_compare_paths(
    adata1: AnnData,
    adata2: AnnData,
    adjacency_key: str = ""connectivities"",
    adjacency_key2: str | None = None,
) -> PAGAComparePathsResult",function,paga_compare_paths,"(
    adata1: AnnData,
    adata2: AnnData,
    adjacency_key: str = ""connectivities"",
    adjacency_key2: str | None = None,
)",PAGAComparePathsResult,"Function: paga_compare_paths(
    adata1: AnnData,
    adata2: AnnData,
    adjacency_key: str = ""connectivities"",
    adjacency_key2: str | None = None,
) -> PAGAComparePathsResult",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,"_AVAIL_MODELS = {""v1.0"", ""v1.2""}",constant,,,,"Constant: _AVAIL_MODELS = {""v1.0"", ""v1.2""}",scverse,scanpy,1.10.1,,,,,"_AVAIL_MODELS = {""v1.0"", ""v1.2""}",_AVAIL_MODELS,"{""v1.0"", ""v1.2""}",,,,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, NamedTuple",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, NamedTuple",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,NamedTuple from typing,import,,,,Import: NamedTuple from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, NamedTuple",NamedTuple,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,scipy,import,,,,Import: scipy,scverse,scanpy,1.10.1,import scipy as sp,scipy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,minimum_spanning_tree from scipy.sparse.csgraph,local_import,,,,Import: minimum_spanning_tree from scipy.sparse.csgraph,scverse,scanpy,1.10.1,from scipy.sparse.csgraph import minimum_spanning_tree,minimum_spanning_tree,scipy.sparse.csgraph,scipy.sparse.csgraph,,,,,,,,,,,,,,
,_paga.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_paga.py,python,,,,,,Directory: scanpy\tools\_paga.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.mask_var = mask_var,class_field,,,,Class field: [instance] _RankGenes.mask_var = mask_var,scverse,scanpy,1.10.1,,,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.mask_var = mask_var,self.mask_var = mask_var,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"[instance] _RankGenes.groups_order, groups_masks_obs = _utils.select_groups(
            adata, groups, groupby
        )",class_field,,,,"Class field: [instance] _RankGenes.groups_order, groups_masks_obs = _utils.select_groups(
            adata, groups, groupby
        )",scverse,scanpy,1.10.1,,,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )","self.groups_order, self.groups_masks_obs = _utils.select_groups(
            adata, groups, groupby
        )","self.groups_order, self.groups_masks_obs = _utils.select_groups(
            adata, groups, groupby
        )",,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.ireference = None,class_field,,,,Class field: [instance] _RankGenes.ireference = None,scverse,scanpy,1.10.1,,,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.ireference = None,self.ireference = None,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.means = None,class_field,,,,Class field: [instance] _RankGenes.means = None,scverse,scanpy,1.10.1,,,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.means = None,self.means = None,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.vars = None,class_field,,,,Class field: [instance] _RankGenes.vars = None,scverse,scanpy,1.10.1,,,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.vars = None,self.vars = None,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.means_rest = None,class_field,,,,Class field: [instance] _RankGenes.means_rest = None,scverse,scanpy,1.10.1,,,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.means_rest = None,self.means_rest = None,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.vars_rest = None,class_field,,,,Class field: [instance] _RankGenes.vars_rest = None,scverse,scanpy,1.10.1,,,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.vars_rest = None,self.vars_rest = None,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.comp_pts = comp_pts,class_field,,,,Class field: [instance] _RankGenes.comp_pts = comp_pts,scverse,scanpy,1.10.1,,,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.comp_pts = comp_pts,self.comp_pts = comp_pts,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.pts = None,class_field,,,,Class field: [instance] _RankGenes.pts = None,scverse,scanpy,1.10.1,,,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.pts = None,self.pts = None,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.pts_rest = None,class_field,,,,Class field: [instance] _RankGenes.pts_rest = None,scverse,scanpy,1.10.1,,,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.pts_rest = None,self.pts_rest = None,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.stats = None,class_field,,,,Class field: [instance] _RankGenes.stats = None,scverse,scanpy,1.10.1,,,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.stats = None,self.stats = None,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.grouping_mask = adata.obs[groupby].isin(groups_order),class_field,,,,Class field: [instance] _RankGenes.grouping_mask = adata.obs[groupby].isin(groups_order),scverse,scanpy,1.10.1,,,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.grouping_mask = adata.obs[groupby].isin(self.groups_order),self.grouping_mask = adata.obs[groupby].isin(self.groups_order),,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"[instance] _RankGenes.grouping = adata.obs.loc[grouping_mask, groupby]",class_field,,,,"Class field: [instance] _RankGenes.grouping = adata.obs.loc[grouping_mask, groupby]",scverse,scanpy,1.10.1,,,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )","self.grouping = adata.obs.loc[self.grouping_mask, groupby]","self.grouping = adata.obs.loc[self.grouping_mask, groupby]",,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"_RankGenes.__init__(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    ) -> None",class_method,,,,"Class method: _RankGenes.__init__(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    ) -> None",scverse,scanpy,1.10.1,,,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",,,None,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,_RankGenes._basic_stats(self) -> None,class_method,,,,Class method: _RankGenes._basic_stats(self) -> None,scverse,scanpy,1.10.1,,,,,,,,,_RankGenes,_basic_stats,(self),,,None,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"_RankGenes.t_test(
        self, method: Literal[""t-test"", ""t-test_overestim_var""]
    ) -> Generator[tuple[int, NDArray[np.floating], NDArray[np.floating]], None, None]",class_method,,,,"Class method: _RankGenes.t_test(
        self, method: Literal[""t-test"", ""t-test_overestim_var""]
    ) -> Generator[tuple[int, NDArray[np.floating], NDArray[np.floating]], None, None]",scverse,scanpy,1.10.1,,,,,,,,,_RankGenes,t_test,"(
        self, method: Literal[""t-test"", ""t-test_overestim_var""]
    )",,,"Generator[tuple[int, NDArray[np.floating], NDArray[np.floating]], None, None]",,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"_RankGenes.wilcoxon(
        self, tie_correct: bool
    ) -> Generator[tuple[int, NDArray[np.floating], NDArray[np.floating]], None, None]",class_method,,,,"Class method: _RankGenes.wilcoxon(
        self, tie_correct: bool
    ) -> Generator[tuple[int, NDArray[np.floating], NDArray[np.floating]], None, None]",scverse,scanpy,1.10.1,,,,,,,,,_RankGenes,wilcoxon,"(
        self, tie_correct: bool
    )",,,"Generator[tuple[int, NDArray[np.floating], NDArray[np.floating]], None, None]",,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"_RankGenes.logreg(
        self, **kwds
    ) -> Generator[tuple[int, NDArray[np.floating], None], None, None]",class_method,,,,"Class method: _RankGenes.logreg(
        self, **kwds
    ) -> Generator[tuple[int, NDArray[np.floating], None], None, None]",scverse,scanpy,1.10.1,,,,,,,,,_RankGenes,logreg,"(
        self, **kwds
    )",,,"Generator[tuple[int, NDArray[np.floating], None], None, None]",,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"_RankGenes.compute_statistics(
        self,
        method: _Method,
        *,
        corr_method: _CorrMethod = ""benjamini-hochberg"",
        n_genes_user: int | None = None,
        rankby_abs: bool = False,
        tie_correct: bool = False,
        **kwds,
    ) -> None",class_method,,,,"Class method: _RankGenes.compute_statistics(
        self,
        method: _Method,
        *,
        corr_method: _CorrMethod = ""benjamini-hochberg"",
        n_genes_user: int | None = None,
        rankby_abs: bool = False,
        tie_correct: bool = False,
        **kwds,
    ) -> None",scverse,scanpy,1.10.1,,,,,,,,,_RankGenes,compute_statistics,"(
        self,
        method: _Method,
        *,
        corr_method: _CorrMethod = ""benjamini-hochberg"",
        n_genes_user: int | None = None,
        rankby_abs: bool = False,
        tie_correct: bool = False,
        **kwds,
    )",,,None,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,_RankGenes,class,,,,Class: _RankGenes,scverse,scanpy,1.10.1,,,,,,,,,_RankGenes,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"_select_top_n(scores: NDArray, n_top: int)",function,_select_top_n,"(scores: NDArray, n_top: int)",,"Function: _select_top_n(scores: NDArray, n_top: int)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"_ranks(
    X: np.ndarray | sparse.csr_matrix | sparse.csc_matrix,
    mask_obs: NDArray[np.bool_] | None = None,
    mask_obs_rest: NDArray[np.bool_] | None = None,
)",function,_ranks,"(
    X: np.ndarray | sparse.csr_matrix | sparse.csc_matrix,
    mask_obs: NDArray[np.bool_] | None = None,
    mask_obs_rest: NDArray[np.bool_] | None = None,
)",,"Function: _ranks(
    X: np.ndarray | sparse.csr_matrix | sparse.csc_matrix,
    mask_obs: NDArray[np.bool_] | None = None,
    mask_obs_rest: NDArray[np.bool_] | None = None,
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,_tiecorrect(ranks),function,_tiecorrect,(ranks),,Function: _tiecorrect(ranks),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,_calc_frac(X),function,_calc_frac,(X),,Function: _calc_frac(X),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"_Method = Literal[""logreg"", ""t-test"", ""wilcoxon"", ""t-test_overestim_var""]",constant,,,,"Constant: _Method = Literal[""logreg"", ""t-test"", ""wilcoxon"", ""t-test_overestim_var""]",scverse,scanpy,1.10.1,,,,,"_Method = Literal[""logreg"", ""t-test"", ""wilcoxon"", ""t-test_overestim_var""]",_Method,"Literal[""logreg"", ""t-test"", ""wilcoxon"", ""t-test_overestim_var""]",,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"_CorrMethod = Literal[""benjamini-hochberg"", ""bonferroni""]",constant,,,,"Constant: _CorrMethod = Literal[""benjamini-hochberg"", ""bonferroni""]",scverse,scanpy,1.10.1,,,,,"_CorrMethod = Literal[""benjamini-hochberg"", ""bonferroni""]",_CorrMethod,"Literal[""benjamini-hochberg"", ""bonferroni""]",,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,floor from math,import,,,,Import: floor from math,scverse,scanpy,1.10.1,from math import floor,floor,math,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, get_args",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, get_args",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,get_args from typing,import,,,,Import: get_args from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, get_args",get_args,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import issparse, vstack",issparse,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,vstack from scipy.sparse,local_import,,,,Import: vstack from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import issparse, vstack",vstack,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
,_rank_genes_groups.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_rank_genes_groups.py,python,,,,,,Directory: scanpy\tools\_rank_genes_groups.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_score_genes.py,python,"_sparse_nanmean(X, axis)",function,_sparse_nanmean,"(X, axis)",,"Function: _sparse_nanmean(X, axis)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_score_genes.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_score_genes.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_score_genes.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_score_genes.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import issparse,issparse,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_score_genes.py,python,_check_use_raw from scanpy._utils,local_import,,,,Import: _check_use_raw from scanpy._utils,scverse,scanpy,1.10.1,from scanpy._utils import _check_use_raw,_check_use_raw,scanpy._utils,scanpy._utils,,,,,,,,,,,,,,
,_score_genes.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_score_genes.py,python,,,,,,Directory: scanpy\tools\_score_genes.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.availModels = dict(
        krumsiek11=(
            ""myeloid progenitor network, Krumsiek et al., PLOS One 6, e22649, ""
            ""\n      equations from Table 1 on page 3, ""
            ""doi:10.1371/journal.pone.0022649 \n""
        ),
        var=""vector autoregressive process \n"",
        hill=""process with hill kinetics \n"",
    )",class_field,,,,"Class field: GRNsim.availModels = dict(
        krumsiek11=(
            ""myeloid progenitor network, Krumsiek et al., PLOS One 6, e22649, ""
            ""\n      equations from Table 1 on page 3, ""
            ""doi:10.1371/journal.pone.0022649 \n""
        ),
        var=""vector autoregressive process \n"",
        hill=""process with hill kinetics \n"",
    )",scverse,scanpy,1.10.1,,,,,,,,,GRNsim,,,"availModels = dict(
        krumsiek11=(
            ""myeloid progenitor network, Krumsiek et al., PLOS One 6, e22649, ""
            ""\n      equations from Table 1 on page 3, ""
            ""doi:10.1371/journal.pone.0022649 \n""
        ),
        var=""vector autoregressive process \n"",
        hill=""process with hill kinetics \n"",
    )",,,,,availModels,"dict(
        krumsiek11=(
            ""myeloid progenitor network, Krumsiek et al., PLOS One 6, e22649, ""
            ""\n      equations from Table 1 on page 3, ""
            ""doi:10.1371/journal.pone.0022649 \n""
        ),
        var=""vector autoregressive process \n"",
        hill=""process with hill kinetics \n"",
    )"
scverse_scanpy_1.10.1,_sim.py,python,GRNsim.writeOutputOnce = True,class_field,,,,Class field: GRNsim.writeOutputOnce = True,scverse,scanpy,1.10.1,,,,,,,,,GRNsim,,,writeOutputOnce = True,,,,,writeOutputOnce,True
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.dim = dim if Coupl is None else Coupl.shape[0],class_field,,,,Class field: [instance] GRNsim.dim = dim if Coupl is None else Coupl.shape[0],scverse,scanpy,1.10.1,,,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.dim = dim if Coupl is None else Coupl.shape[0],self.dim = dim if Coupl is None else Coupl.shape[0],,,,,
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.maxnpar = 1,class_field,,,,Class field: [instance] GRNsim.maxnpar = 1,scverse,scanpy,1.10.1,,,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.maxnpar = 1,self.maxnpar = 1,,,,,
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.p_indep = 0.4,class_field,,,,Class field: [instance] GRNsim.p_indep = 0.4,scverse,scanpy,1.10.1,,,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.p_indep = 0.4,self.p_indep = 0.4,,,,,
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.model = model,class_field,,,,Class field: [instance] GRNsim.model = model,scverse,scanpy,1.10.1,,,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.model = model,self.model = model,,,,,
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.modelType = modelType,class_field,,,,Class field: [instance] GRNsim.modelType = modelType,scverse,scanpy,1.10.1,,,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.modelType = modelType,self.modelType = modelType,,,,,
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.initType = initType,class_field,,,,Class field: [instance] GRNsim.initType = initType,scverse,scanpy,1.10.1,,,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.initType = initType,self.initType = initType,,,,,
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.show = show,class_field,,,,Class field: [instance] GRNsim.show = show,scverse,scanpy,1.10.1,,,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.show = show,self.show = show,,,,,
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.verbosity = verbosity,class_field,,,,Class field: [instance] GRNsim.verbosity = verbosity,scverse,scanpy,1.10.1,,,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.verbosity = verbosity,self.verbosity = verbosity,,,,,
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.model = model,class_field,,,,Class field: [instance] GRNsim.model = model,scverse,scanpy,1.10.1,,,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.model = model,self.model = model,,,,,
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.set_coupl(Coupl=Coupl),class_field,,,,Class field: [instance] GRNsim.set_coupl(Coupl=Coupl),scverse,scanpy,1.10.1,,,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.set_coupl(Coupl=Coupl),self.set_coupl(Coupl=Coupl),,,,,
scverse_scanpy_1.10.1,_sim.py,python,"[instance] GRNsim.header = ""model = "" + model.name + "" \n""",class_field,,,,"Class field: [instance] GRNsim.header = ""model = "" + model.name + "" \n""",scverse,scanpy,1.10.1,,,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )","self.header = ""model = "" + self.model.name + "" \n""","self.header = ""model = "" + self.model.name + "" \n""",,,,,
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.params = params,class_field,,,,Class field: [instance] GRNsim.params = params,scverse,scanpy,1.10.1,,,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.params = params,self.params = params,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"StaticCauseEffect.availModels = dict(
        line=""y = αx \n"",
        noise=""y = noise \n"",
        absline=""y = |x| \n"",
        parabola=""y = αx² \n"",
        sawtooth=""y = x - |x| \n"",
        tanh=""y = tanh(x) \n"",
        combi=""combinatorial regulation \n"",
    )",class_field,,,,"Class field: StaticCauseEffect.availModels = dict(
        line=""y = αx \n"",
        noise=""y = noise \n"",
        absline=""y = |x| \n"",
        parabola=""y = αx² \n"",
        sawtooth=""y = x - |x| \n"",
        tanh=""y = tanh(x) \n"",
        combi=""combinatorial regulation \n"",
    )",scverse,scanpy,1.10.1,,,,,,,,,StaticCauseEffect,,,"availModels = dict(
        line=""y = αx \n"",
        noise=""y = noise \n"",
        absline=""y = |x| \n"",
        parabola=""y = αx² \n"",
        sawtooth=""y = x - |x| \n"",
        tanh=""y = tanh(x) \n"",
        combi=""combinatorial regulation \n"",
    )",,,,,availModels,"dict(
        line=""y = αx \n"",
        noise=""y = noise \n"",
        absline=""y = |x| \n"",
        parabola=""y = αx² \n"",
        sawtooth=""y = x - |x| \n"",
        tanh=""y = tanh(x) \n"",
        combi=""combinatorial regulation \n"",
    )"
scverse_scanpy_1.10.1,_sim.py,python,"[instance] StaticCauseEffect.funcs = dict(
            line=lambda x: x,
            noise=lambda x: 0,
            absline=np.abs,
            parabola=lambda x: x**2,
            sawtooth=lambda x: 0.5 * x - np.floor(0.5 * x),
            tanh=lambda x: np.tanh(2 * x),
        )",class_field,,,,"Class field: [instance] StaticCauseEffect.funcs = dict(
            line=lambda x: x,
            noise=lambda x: 0,
            absline=np.abs,
            parabola=lambda x: x**2,
            sawtooth=lambda x: 0.5 * x - np.floor(0.5 * x),
            tanh=lambda x: np.tanh(2 * x),
        )",scverse,scanpy,1.10.1,,,,,,,,,StaticCauseEffect,__init__,(self),"self.funcs = dict(
            line=lambda x: x,
            noise=lambda x: 0,
            absline=np.abs,
            parabola=lambda x: x**2,
            sawtooth=lambda x: 0.5 * x - np.floor(0.5 * x),
            tanh=lambda x: np.tanh(2 * x),
        )","self.funcs = dict(
            line=lambda x: x,
            noise=lambda x: 0,
            absline=np.abs,
            parabola=lambda x: x**2,
            sawtooth=lambda x: 0.5 * x - np.floor(0.5 * x),
            tanh=lambda x: np.tanh(2 * x),
        )",,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.__init__(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",class_method,,,,"Class method: GRNsim.__init__(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",scverse,scanpy,1.10.1,,,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.sim_model(self, tmax, X0, noiseDyn=0, restart=0)",class_method,,,,"Class method: GRNsim.sim_model(self, tmax, X0, noiseDyn=0, restart=0)",scverse,scanpy,1.10.1,,,,,,,,,GRNsim,sim_model,"(self, tmax, X0, noiseDyn=0, restart=0)",,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.Xdiff_hill(self, Xt)",class_method,,,,"Class method: GRNsim.Xdiff_hill(self, Xt)",scverse,scanpy,1.10.1,,,,,,,,,GRNsim,Xdiff_hill,"(self, Xt)",,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.Xdiff_var(self, Xt, verbosity=0)",class_method,,,,"Class method: GRNsim.Xdiff_var(self, Xt, verbosity=0)",scverse,scanpy,1.10.1,,,,,,,,,GRNsim,Xdiff_var,"(self, Xt, verbosity=0)",,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.hill_a(self, x, threshold=0.1, power=2)",class_method,,,,"Class method: GRNsim.hill_a(self, x, threshold=0.1, power=2)",scverse,scanpy,1.10.1,,,,,,,,,GRNsim,hill_a,"(self, x, threshold=0.1, power=2)",,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.hill_i(self, x, threshold=0.1, power=2)",class_method,,,,"Class method: GRNsim.hill_i(self, x, threshold=0.1, power=2)",scverse,scanpy,1.10.1,,,,,,,,,GRNsim,hill_i,"(self, x, threshold=0.1, power=2)",,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.nhill_a(self, x, threshold=0.1, power=2, ichild=2)",class_method,,,,"Class method: GRNsim.nhill_a(self, x, threshold=0.1, power=2, ichild=2)",scverse,scanpy,1.10.1,,,,,,,,,GRNsim,nhill_a,"(self, x, threshold=0.1, power=2, ichild=2)",,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.nhill_i(self, x, threshold=0.1, power=2)",class_method,,,,"Class method: GRNsim.nhill_i(self, x, threshold=0.1, power=2)",scverse,scanpy,1.10.1,,,,,,,,,GRNsim,nhill_i,"(self, x, threshold=0.1, power=2)",,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,GRNsim.read_model(self),class_method,,,,Class method: GRNsim.read_model(self),scverse,scanpy,1.10.1,,,,,,,,,GRNsim,read_model,(self),,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.set_coupl(self, Coupl=None)",class_method,,,,"Class method: GRNsim.set_coupl(self, Coupl=None)",scverse,scanpy,1.10.1,,,,,,,,,GRNsim,set_coupl,"(self, Coupl=None)",,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,GRNsim.set_coupl_old(self),class_method,,,,Class method: GRNsim.set_coupl_old(self),scverse,scanpy,1.10.1,,,,,,,,,GRNsim,set_coupl_old,(self),,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,GRNsim.coupl_model1(self),class_method,,,,Class method: GRNsim.coupl_model1(self),scverse,scanpy,1.10.1,,,,,,,,,GRNsim,coupl_model1,(self),,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,GRNsim.coupl_model5(self),class_method,,,,Class method: GRNsim.coupl_model5(self),scverse,scanpy,1.10.1,,,,,,,,,GRNsim,coupl_model5,(self),,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,GRNsim.coupl_model6(self),class_method,,,,Class method: GRNsim.coupl_model6(self),scverse,scanpy,1.10.1,,,,,,,,,GRNsim,coupl_model6,(self),,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,GRNsim.coupl_model8(self),class_method,,,,Class method: GRNsim.coupl_model8(self),scverse,scanpy,1.10.1,,,,,,,,,GRNsim,coupl_model8,(self),,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,GRNsim.coupl_model_krumsiek11(self),class_method,,,,Class method: GRNsim.coupl_model_krumsiek11(self),scverse,scanpy,1.10.1,,,,,,,,,GRNsim,coupl_model_krumsiek11,(self),,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.sim_model_back_help(self, Xt, Xt1)",class_method,,,,"Class method: GRNsim.sim_model_back_help(self, Xt, Xt1)",scverse,scanpy,1.10.1,,,,,,,,,GRNsim,sim_model_back_help,"(self, Xt, Xt1)",,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.sim_model_backwards(self, tmax, X0)",class_method,,,,"Class method: GRNsim.sim_model_backwards(self, tmax, X0)",scverse,scanpy,1.10.1,,,,,,,,,GRNsim,sim_model_backwards,"(self, tmax, X0)",,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.branch_init_model1(self, tmax=100)",class_method,,,,"Class method: GRNsim.branch_init_model1(self, tmax=100)",scverse,scanpy,1.10.1,,,,,,,,,GRNsim,branch_init_model1,"(self, tmax=100)",,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.parents_from_boolRule(self, rule)",class_method,,,,"Class method: GRNsim.parents_from_boolRule(self, rule)",scverse,scanpy,1.10.1,,,,,,,,,GRNsim,parents_from_boolRule,"(self, rule)",,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,GRNsim.build_boolCoeff(self),class_method,,,,Class method: GRNsim.build_boolCoeff(self),scverse,scanpy,1.10.1,,,,,,,,,GRNsim,build_boolCoeff,(self),,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.process_rule(self, rule, pa, tuple)",class_method,,,,"Class method: GRNsim.process_rule(self, rule, pa, tuple)",scverse,scanpy,1.10.1,,,,,,,,,GRNsim,process_rule,"(self, rule, pa, tuple)",,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.write_data(
        self,
        X,
        *,
        dir=Path(""sim/test""),
        noiseObs=0.0,
        append=False,
        branching=False,
        nrRealizations=1,
        seed=0,
    )",class_method,,,,"Class method: GRNsim.write_data(
        self,
        X,
        *,
        dir=Path(""sim/test""),
        noiseObs=0.0,
        append=False,
        branching=False,
        nrRealizations=1,
        seed=0,
    )",scverse,scanpy,1.10.1,,,,,,,,,GRNsim,write_data,"(
        self,
        X,
        *,
        dir=Path(""sim/test""),
        noiseObs=0.0,
        append=False,
        branching=False,
        nrRealizations=1,
        seed=0,
    )",,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,StaticCauseEffect.__init__(self),class_method,,,,Class method: StaticCauseEffect.__init__(self),scverse,scanpy,1.10.1,,,,,,,,,StaticCauseEffect,__init__,(self),,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"StaticCauseEffect.sim_givenAdj(self, Adj: np.ndarray, model=""line"")",class_method,,,,"Class method: StaticCauseEffect.sim_givenAdj(self, Adj: np.ndarray, model=""line"")",scverse,scanpy,1.10.1,,,,,,,,,StaticCauseEffect,sim_givenAdj,"(self, Adj: np.ndarray, model=""line"")",,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,StaticCauseEffect.sim_combi(self),class_method,,,,Class method: StaticCauseEffect.sim_combi(self),scverse,scanpy,1.10.1,,,,,,,,,StaticCauseEffect,sim_combi,(self),,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,GRNsim,class,,,,Class: GRNsim,scverse,scanpy,1.10.1,,,,,,,,,GRNsim,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,StaticCauseEffect,class,,,,Class: StaticCauseEffect,scverse,scanpy,1.10.1,,,,,,,,,StaticCauseEffect,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,add_args(p),function,add_args,(p),,Function: add_args(p),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,sample_dynamic_data(**params),function,sample_dynamic_data,(**params),,Function: sample_dynamic_data(**params),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"write_data(
    X,
    *,
    dir=Path(""sim/test""),
    append=False,
    header="""",
    varNames: Mapping[str, int] = MappingProxyType({}),
    Adj=np.array([]),
    Coupl=np.array([]),
    boolRules: Mapping[str, str] = MappingProxyType({}),
    model="""",
    modelType="""",
    invTimeStep=1,
)",function,write_data,"(
    X,
    *,
    dir=Path(""sim/test""),
    append=False,
    header="""",
    varNames: Mapping[str, int] = MappingProxyType({}),
    Adj=np.array([]),
    Coupl=np.array([]),
    boolRules: Mapping[str, str] = MappingProxyType({}),
    model="""",
    modelType="""",
    invTimeStep=1,
)",,"Function: write_data(
    X,
    *,
    dir=Path(""sim/test""),
    append=False,
    header="""",
    varNames: Mapping[str, int] = MappingProxyType({}),
    Adj=np.array([]),
    Coupl=np.array([]),
    boolRules: Mapping[str, str] = MappingProxyType({}),
    model="""",
    modelType="""",
    invTimeStep=1,
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"_check_branching(
    X: np.ndarray, Xsamples: np.ndarray, restart: int, threshold: float = 0.25
) -> tuple[bool, list[np.ndarray]]",function,_check_branching,"(
    X: np.ndarray, Xsamples: np.ndarray, restart: int, threshold: float = 0.25
)","tuple[bool, list[np.ndarray]]","Function: _check_branching(
    X: np.ndarray, Xsamples: np.ndarray, restart: int, threshold: float = 0.25
) -> tuple[bool, list[np.ndarray]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"check_nocycles(Adj: np.ndarray, verbosity: int = 2) -> bool",function,check_nocycles,"(Adj: np.ndarray, verbosity: int = 2)",bool,"Function: check_nocycles(Adj: np.ndarray, verbosity: int = 2) -> bool",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"sample_coupling_matrix(
    dim: int = 3, connectivity: float = 0.5
) -> tuple[np.ndarray, np.ndarray, np.ndarray, int]",function,sample_coupling_matrix,"(
    dim: int = 3, connectivity: float = 0.5
)","tuple[np.ndarray, np.ndarray, np.ndarray, int]","Function: sample_coupling_matrix(
    dim: int = 3, connectivity: float = 0.5
) -> tuple[np.ndarray, np.ndarray, np.ndarray, int]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"sample_static_data(model, dir, verbosity=0)",function,sample_static_data,"(model, dir, verbosity=0)",,"Function: sample_static_data(model, dir, verbosity=0)",scverse,scanpy,1.10.1,,,,,,,,"# fraction of connectivity as compared to fully connected",,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"sample_static_data(model, dir, verbosity=0)",function,sample_static_data,"(model, dir, verbosity=0)",,"Function: sample_static_data(model, dir, verbosity=0)",scverse,scanpy,1.10.1,,,,,,,,"# in one direction, which amounts to dim*(dim-1)/2 edges",,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,itertools,import,,,,Import: itertools,scverse,scanpy,1.10.1,import itertools,itertools,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,shutil,import,,,,Import: shutil,scverse,scanpy,1.10.1,import shutil,shutil,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,sys,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,Path,pathlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,MappingProxyType from types,import,,,,Import: MappingProxyType from types,scverse,scanpy,1.10.1,from types import MappingProxyType,MappingProxyType,types,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,scipy,import,,,,Import: scipy,scverse,scanpy,1.10.1,import scipy as sp,scipy,,,,,,,,,,,,,,,,
,_sim.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_sim.py,python,,,,,,Directory: scanpy\tools\_sim.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"ROC_AUC_analysis(
    adata: AnnData,
    groupby: str,
    group: str | None = None,
    n_genes: int = 100,
)",function,ROC_AUC_analysis,"(
    adata: AnnData,
    groupby: str,
    group: str | None = None,
    n_genes: int = 100,
)",,"Function: ROC_AUC_analysis(
    adata: AnnData,
    groupby: str,
    group: str | None = None,
    n_genes: int = 100,
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"subsampled_estimates(mask, mask_rest=None, precision=0.01, probability=0.99)",function,subsampled_estimates,"(mask, mask_rest=None, precision=0.01, probability=0.99)",,"Function: subsampled_estimates(mask, mask_rest=None, precision=0.01, probability=0.99)",scverse,scanpy,1.10.1,,,,,,,,"# Simple method that can be called by rank_gene_group. It uses masks that have been passed to the function and",,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"subsampled_estimates(mask, mask_rest=None, precision=0.01, probability=0.99)",function,subsampled_estimates,"(mask, mask_rest=None, precision=0.01, probability=0.99)",,"Function: subsampled_estimates(mask, mask_rest=None, precision=0.01, probability=0.99)",scverse,scanpy,1.10.1,,,,,,,,"# calculates how much has to be subsampled in order to reach a certain precision with a certain probability",,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"subsampled_estimates(mask, mask_rest=None, precision=0.01, probability=0.99)",function,subsampled_estimates,"(mask, mask_rest=None, precision=0.01, probability=0.99)",,"Function: subsampled_estimates(mask, mask_rest=None, precision=0.01, probability=0.99)",scverse,scanpy,1.10.1,,,,,,,,"# Then it subsamples for mask, mask rest",,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"subsampled_estimates(mask, mask_rest=None, precision=0.01, probability=0.99)",function,subsampled_estimates,"(mask, mask_rest=None, precision=0.01, probability=0.99)",,"Function: subsampled_estimates(mask, mask_rest=None, precision=0.01, probability=0.99)",scverse,scanpy,1.10.1,,,,,,,,"# Since convergence speed varies, we take the slower one, i.e. the variance. This might have future speed-up",,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"subsampled_estimates(mask, mask_rest=None, precision=0.01, probability=0.99)",function,subsampled_estimates,"(mask, mask_rest=None, precision=0.01, probability=0.99)",,"Function: subsampled_estimates(mask, mask_rest=None, precision=0.01, probability=0.99)",scverse,scanpy,1.10.1,,,,,,,,"# potential",,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"dominated_ROC_elimination(adata, grouby)",function,dominated_ROC_elimination,"(adata, grouby)",,"Function: dominated_ROC_elimination(adata, grouby)",scverse,scanpy,1.10.1,,,,,,,,"# This tool has the purpose to take a set of genes (possibly already pre-selected) and analyze AUC.",,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"dominated_ROC_elimination(adata, grouby)",function,dominated_ROC_elimination,"(adata, grouby)",,"Function: dominated_ROC_elimination(adata, grouby)",scverse,scanpy,1.10.1,,,,,,,,"# Those and only those are eliminated who are dominated completely",,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"dominated_ROC_elimination(adata, grouby)",function,dominated_ROC_elimination,"(adata, grouby)",,"Function: dominated_ROC_elimination(adata, grouby)",scverse,scanpy,1.10.1,,,,,,,,"# TODO: Potentially (But not till tomorrow), this can be adapted to only consider the AUC in the given",,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"dominated_ROC_elimination(adata, grouby)",function,dominated_ROC_elimination,"(adata, grouby)",,"Function: dominated_ROC_elimination(adata, grouby)",scverse,scanpy,1.10.1,,,,,,,,"# TODO: optimization frame",,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"_gene_preselection(adata, mask, thresholds)",function,_gene_preselection,"(adata, mask, thresholds)",,"Function: _gene_preselection(adata, mask, thresholds)",scverse,scanpy,1.10.1,,,,,,,,"# This tool serves to",,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"_gene_preselection(adata, mask, thresholds)",function,_gene_preselection,"(adata, mask, thresholds)",,"Function: _gene_preselection(adata, mask, thresholds)",scverse,scanpy,1.10.1,,,,,,,,"# It is not thought to be addressed directly but rather using rank_genes_group or ROC analysis or comparable",,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"_gene_preselection(adata, mask, thresholds)",function,_gene_preselection,"(adata, mask, thresholds)",,"Function: _gene_preselection(adata, mask, thresholds)",scverse,scanpy,1.10.1,,,,,,,,"# TODO: Pass back a truncated adata object with only those genes that fullfill thresholding criterias",,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"_gene_preselection(adata, mask, thresholds)",function,_gene_preselection,"(adata, mask, thresholds)",,"Function: _gene_preselection(adata, mask, thresholds)",scverse,scanpy,1.10.1,,,,,,,,"# This function should be accessible by both rank_genes_groups and ROC_curve analysis",,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,pandas,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,metrics from sklearn,import,,,,Import: metrics from sklearn,scverse,scanpy,1.10.1,from sklearn import metrics,metrics,sklearn,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import issparse,issparse,scipy.sparse,scipy.sparse,,,,,,,,,,,,,,
,_top_genes.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_top_genes.py,python,,,,,,Directory: scanpy\tools\_top_genes.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_tsne.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_tsne.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_tsne.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,version,packaging,,,,,,,,,,,,,,,
,_tsne.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_tsne.py,python,,,,,,Directory: scanpy\tools\_tsne.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_umap.py,python,"_InitPos = Literal[""paga"", ""spectral"", ""random""]",constant,,,,"Constant: _InitPos = Literal[""paga"", ""spectral"", ""random""]",scverse,scanpy,1.10.1,,,,,"_InitPos = Literal[""paga"", ""spectral"", ""random""]",_InitPos,"Literal[""paga"", ""spectral"", ""random""]",,,,,,,,,,,
scverse_scanpy_1.10.1,_umap.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_umap.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_umap.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_umap.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_umap.py,python,check_array from sklearn.utils,local_import,,,,Import: check_array from sklearn.utils,scverse,scanpy,1.10.1,"from sklearn.utils import check_array, check_random_state",check_array,sklearn.utils,sklearn.utils,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_umap.py,python,check_random_state from sklearn.utils,local_import,,,,Import: check_random_state from sklearn.utils,scverse,scanpy,1.10.1,"from sklearn.utils import check_array, check_random_state",check_random_state,sklearn.utils,sklearn.utils,,,,,,,,,,,,,,
,_umap.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_umap.py,python,,,,,,Directory: scanpy\tools\_umap.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_choose_representation(
    adata: AnnData,
    *,
    use_rep: str | None = None,
    n_pcs: int | None = None,
    silent: bool = False,
) -> np.ndarray | csr_matrix",function,_choose_representation,"(
    adata: AnnData,
    *,
    use_rep: str | None = None,
    n_pcs: int | None = None,
    silent: bool = False,
)",np.ndarray | csr_matrix,"Function: _choose_representation(
    adata: AnnData,
    *,
    use_rep: str | None = None,
    n_pcs: int | None = None,
    silent: bool = False,
) -> np.ndarray | csr_matrix",scverse,scanpy,1.10.1,,,,,,,,"# TODO: what else?",,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"preprocess_with_pca(adata, n_pcs: int | None = None, random_state=0)",function,preprocess_with_pca,"(adata, n_pcs: int | None = None, random_state=0)",,"Function: preprocess_with_pca(adata, n_pcs: int | None = None, random_state=0)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"get_init_pos_from_paga(
    adata, adjacency=None, random_state=0, neighbors_key=None, obsp=None
)",function,get_init_pos_from_paga,"(
    adata, adjacency=None, random_state=0, neighbors_key=None, obsp=None
)",,"Function: get_init_pos_from_paga(
    adata, adjacency=None, random_state=0, neighbors_key=None, obsp=None
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
,_utils.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_utils.py,python,,,,,,Directory: scanpy\tools\_utils.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils_clustering.py,python,"rename_groups(
    adata: AnnData,
    restrict_key: str,
    *,
    key_added: str | None,
    restrict_categories: Iterable[str],
    restrict_indices: NDArray[np.bool_],
    groups: NDArray,
) -> pd.Series[str]",function,rename_groups,"(
    adata: AnnData,
    restrict_key: str,
    *,
    key_added: str | None,
    restrict_categories: Iterable[str],
    restrict_indices: NDArray[np.bool_],
    groups: NDArray,
)",pd.Series[str],"Function: rename_groups(
    adata: AnnData,
    restrict_key: str,
    *,
    key_added: str | None,
    restrict_categories: Iterable[str],
    restrict_indices: NDArray[np.bool_],
    groups: NDArray,
) -> pd.Series[str]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils_clustering.py,python,"restrict_adjacency(
    adata: AnnData,
    restrict_key: str,
    *,
    restrict_categories: Iterable[str],
    adjacency: spmatrix,
) -> tuple[spmatrix, NDArray[np.bool_]]",function,restrict_adjacency,"(
    adata: AnnData,
    restrict_key: str,
    *,
    restrict_categories: Iterable[str],
    adjacency: spmatrix,
)","tuple[spmatrix, NDArray[np.bool_]]","Function: restrict_adjacency(
    adata: AnnData,
    restrict_key: str,
    *,
    restrict_categories: Iterable[str],
    adjacency: spmatrix,
) -> tuple[spmatrix, NDArray[np.bool_]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils_clustering.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,TYPE_CHECKING,typing,,,,,,,,,,,,,,,
,_utils_clustering.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_utils_clustering.py,python,,,,,,Directory: scanpy\tools\_utils_clustering.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,__getattr__(name: str) -> Any,function,__getattr__,(name: str),Any,Function: __getattr__(name: str) -> Any,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""dendrogram"",
    ""diffmap"",
    ""dpt"",
    ""draw_graph"",
    ""embedding_density"",
    ""ingest"",
    ""leiden"",
    ""louvain"",
    ""marker_gene_overlap"",
    ""paga"",
    ""filter_rank_genes_groups"",
    ""rank_genes_groups"",
    ""score_genes"",
    ""score_genes_cell_cycle"",
    ""sim"",
    ""tsne"",
    ""umap"",
]",constant,,,,"Constant: __all__ = [
    ""dendrogram"",
    ""diffmap"",
    ""dpt"",
    ""draw_graph"",
    ""embedding_density"",
    ""ingest"",
    ""leiden"",
    ""louvain"",
    ""marker_gene_overlap"",
    ""paga"",
    ""filter_rank_genes_groups"",
    ""rank_genes_groups"",
    ""score_genes"",
    ""score_genes_cell_cycle"",
    ""sim"",
    ""tsne"",
    ""umap"",
]",scverse,scanpy,1.10.1,,,,,"__all__ = [
    ""dendrogram"",
    ""diffmap"",
    ""dpt"",
    ""draw_graph"",
    ""embedding_density"",
    ""ingest"",
    ""leiden"",
    ""louvain"",
    ""marker_gene_overlap"",
    ""paga"",
    ""filter_rank_genes_groups"",
    ""rank_genes_groups"",
    ""score_genes"",
    ""score_genes_cell_cycle"",
    ""sim"",
    ""tsne"",
    ""umap"",
]",__all__,"[
    ""dendrogram"",
    ""diffmap"",
    ""dpt"",
    ""draw_graph"",
    ""embedding_density"",
    ""ingest"",
    ""leiden"",
    ""louvain"",
    ""marker_gene_overlap"",
    ""paga"",
    ""filter_rank_genes_groups"",
    ""rank_genes_groups"",
    ""score_genes"",
    ""score_genes_cell_cycle"",
    ""sim"",
    ""tsne"",
    ""umap"",
]",,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,from typing import Any,Any,typing,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\tools\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Empty.token = 0,class_field,,,,Class field: Empty.token = 0,scverse,scanpy,1.10.1,,,,,,,,,Empty,,,token = 0,,,,,token,0
scverse_scanpy_1.10.1,__init__.py,python,[instance] RNGIgraph._rng = check_random_state(random_state),class_field,,,,Class field: [instance] RNGIgraph._rng = check_random_state(random_state),scverse,scanpy,1.10.1,,,,,,,,,RNGIgraph,__init__,"(self, random_state: int = 0)",self._rng = check_random_state(random_state),self._rng = check_random_state(random_state),,,,,
scverse_scanpy_1.10.1,__init__.py,python,[instance] NeighborsView._connectivities = None,class_field,,,,Class field: [instance] NeighborsView._connectivities = None,scverse,scanpy,1.10.1,,,,,,,,,NeighborsView,__init__,"(self, adata, key=None)",self._connectivities = None,self._connectivities = None,,,,,
scverse_scanpy_1.10.1,__init__.py,python,[instance] NeighborsView._distances = None,class_field,,,,Class field: [instance] NeighborsView._distances = None,scverse,scanpy,1.10.1,,,,,,,,,NeighborsView,__init__,"(self, adata, key=None)",self._distances = None,self._distances = None,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"[instance] NeighborsView._connectivities, _distances = _fallback_to_uns(
            _neighbors_dict,
            _connectivities,
            _distances,
            _conns_key,
            _dists_key,
        )",class_field,,,,"Class field: [instance] NeighborsView._connectivities, _distances = _fallback_to_uns(
            _neighbors_dict,
            _connectivities,
            _distances,
            _conns_key,
            _dists_key,
        )",scverse,scanpy,1.10.1,,,,,,,,,NeighborsView,__init__,"(self, adata, key=None)","self._connectivities, self._distances = _fallback_to_uns(
            self._neighbors_dict,
            self._connectivities,
            self._distances,
            self._conns_key,
            self._dists_key,
        )","self._connectivities, self._distances = _fallback_to_uns(
            self._neighbors_dict,
            self._connectivities,
            self._distances,
            self._conns_key,
            self._dists_key,
        )",,,,,
scverse_scanpy_1.10.1,__init__.py,python,Empty.__repr__(self) -> str,class_method,,,,Class method: Empty.__repr__(self) -> str,scverse,scanpy,1.10.1,,,,,,,,,Empty,__repr__,(self),,,str,,,,
scverse_scanpy_1.10.1,__init__.py,python,"RNGIgraph.__init__(self, random_state: int = 0) -> None",class_method,,,,"Class method: RNGIgraph.__init__(self, random_state: int = 0) -> None",scverse,scanpy,1.10.1,,,,,,,,,RNGIgraph,__init__,"(self, random_state: int = 0)",,,None,,,,
scverse_scanpy_1.10.1,__init__.py,python,"RNGIgraph.__getattr__(self, attr: str)",class_method,,,,"Class method: RNGIgraph.__getattr__(self, attr: str)",scverse,scanpy,1.10.1,,,,,,,,,RNGIgraph,__getattr__,"(self, attr: str)",,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"NeighborsView.__init__(self, adata, key=None)",class_method,,,,"Class method: NeighborsView.__init__(self, adata, key=None)",scverse,scanpy,1.10.1,,,,,,,,,NeighborsView,__init__,"(self, adata, key=None)",,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"NeighborsView.__getitem__(self, key)",class_method,,,,"Class method: NeighborsView.__getitem__(self, key)",scverse,scanpy,1.10.1,,,,,,,,,NeighborsView,__getitem__,"(self, key)",,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"NeighborsView.__contains__(self, key)",class_method,,,,"Class method: NeighborsView.__contains__(self, key)",scverse,scanpy,1.10.1,,,,,,,,,NeighborsView,__contains__,"(self, key)",,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Empty(Enum),class,,,,Class: Empty(Enum),scverse,scanpy,1.10.1,,,,,,,,,Empty,,,,,,,(Enum),,
scverse_scanpy_1.10.1,__init__.py,python,RNGIgraph,class,,,,Class: RNGIgraph,scverse,scanpy,1.10.1,,,,,,,,,RNGIgraph,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,NeighborsView,class,,,,Class: NeighborsView,scverse,scanpy,1.10.1,,,,,,,,,NeighborsView,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,check_versions(),function,check_versions,(),,Function: check_versions(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,getdoc(c_or_f: Callable | type) -> str | None,function,getdoc,(c_or_f: Callable | type),str | None,Function: getdoc(c_or_f: Callable | type) -> str | None,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"renamed_arg(old_name, new_name, *, pos_0: bool = False)",function,renamed_arg,"(old_name, new_name, *, pos_0: bool = False)",,"Function: renamed_arg(old_name, new_name, *, pos_0: bool = False)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,_import_name(name: str) -> Any,function,_import_name,(name: str),Any,Function: _import_name(name: str) -> Any,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_one_of_ours(obj, root: str)",function,_one_of_ours,"(obj, root: str)",,"Function: _one_of_ours(obj, root: str)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"descend_classes_and_funcs(mod: ModuleType, root: str, encountered=None)",function,descend_classes_and_funcs,"(mod: ModuleType, root: str, encountered=None)",,"Function: descend_classes_and_funcs(mod: ModuleType, root: str, encountered=None)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"annotate_doc_types(mod: ModuleType, root: str)",function,annotate_doc_types,"(mod: ModuleType, root: str)",,"Function: annotate_doc_types(mod: ModuleType, root: str)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,_doc_params(**kwds),function,_doc_params,(**kwds),,Function: _doc_params(**kwds),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,_check_array_function_arguments(**kwargs),function,_check_array_function_arguments,(**kwargs),,Function: _check_array_function_arguments(**kwargs),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_check_use_raw(adata: AnnData, use_raw: None | bool) -> bool",function,_check_use_raw,"(adata: AnnData, use_raw: None | bool)",bool,"Function: _check_use_raw(adata: AnnData, use_raw: None | bool) -> bool",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"get_igraph_from_adjacency(adjacency, directed=None)",function,get_igraph_from_adjacency,"(adjacency, directed=None)",,"Function: get_igraph_from_adjacency(adjacency, directed=None)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"compute_association_matrix_of_groups(
    adata: AnnData,
    prediction: str,
    reference: str,
    *,
    normalization: Literal[""prediction"", ""reference""] = ""prediction"",
    threshold: float = 0.01,
    max_n_names: int | None = 2,
)",function,compute_association_matrix_of_groups,"(
    adata: AnnData,
    prediction: str,
    reference: str,
    *,
    normalization: Literal[""prediction"", ""reference""] = ""prediction"",
    threshold: float = 0.01,
    max_n_names: int | None = 2,
)",,"Function: compute_association_matrix_of_groups(
    adata: AnnData,
    prediction: str,
    reference: str,
    *,
    normalization: Literal[""prediction"", ""reference""] = ""prediction"",
    threshold: float = 0.01,
    max_n_names: int | None = 2,
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"get_associated_colors_of_groups(reference_colors, asso_matrix)",function,get_associated_colors_of_groups,"(reference_colors, asso_matrix)",,"Function: get_associated_colors_of_groups(reference_colors, asso_matrix)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"identify_groups(ref_labels, pred_labels, return_overlaps=False)",function,identify_groups,"(ref_labels, pred_labels, return_overlaps=False)",,"Function: identify_groups(ref_labels, pred_labels, return_overlaps=False)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,sanitize_anndata(adata: AnnData) -> None,function,sanitize_anndata,(adata: AnnData),None,Function: sanitize_anndata(adata: AnnData) -> None,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,view_to_actual(adata: AnnData) -> None,function,view_to_actual,(adata: AnnData),None,Function: view_to_actual(adata: AnnData) -> None,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"moving_average(a: np.ndarray, n: int)",function,moving_average,"(a: np.ndarray, n: int)",,"Function: moving_average(a: np.ndarray, n: int)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,get_random_state(seed: AnyRandom) -> np.random.RandomState,function,get_random_state,(seed: AnyRandom),np.random.RandomState,Function: get_random_state(seed: AnyRandom) -> np.random.RandomState,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"update_params(
    old_params: Mapping[str, Any],
    new_params: Mapping[str, Any],
    check=False,
) -> dict[str, Any]",function,update_params,"(
    old_params: Mapping[str, Any],
    new_params: Mapping[str, Any],
    check=False,
)","dict[str, Any]","Function: update_params(
    old_params: Mapping[str, Any],
    new_params: Mapping[str, Any],
    check=False,
) -> dict[str, Any]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"broadcast_axis(divisor: Scaling_T, axis: Literal[0, 1]) -> Scaling_T",function,broadcast_axis,"(divisor: Scaling_T, axis: Literal[0, 1])",Scaling_T,"Function: broadcast_axis(divisor: Scaling_T, axis: Literal[0, 1]) -> Scaling_T",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,check_op(op),function,check_op,(op),,Function: check_op(op),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"make_axis_chunks(
    X: DaskArray, axis: Literal[0, 1], pad=True
) -> tuple[tuple[int], tuple[int]]",function,make_axis_chunks,"(
    X: DaskArray, axis: Literal[0, 1], pad=True
)","tuple[tuple[int], tuple[int]]","Function: make_axis_chunks(
    X: DaskArray, axis: Literal[0, 1], pad=True
) -> tuple[tuple[int], tuple[int]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"select_groups(
    adata: AnnData,
    groups_order_subset: list[str] | Literal[""all""] = ""all"",
    key: str = ""groups"",
) -> tuple[list[str], NDArray[np.bool_]]",function,select_groups,"(
    adata: AnnData,
    groups_order_subset: list[str] | Literal[""all""] = ""all"",
    key: str = ""groups"",
)","tuple[list[str], NDArray[np.bool_]]","Function: select_groups(
    adata: AnnData,
    groups_order_subset: list[str] | Literal[""all""] = ""all"",
    key: str = ""groups"",
) -> tuple[list[str], NDArray[np.bool_]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"warn_with_traceback(message, category, filename, lineno, file=None, line=None)",function,warn_with_traceback,"(message, category, filename, lineno, file=None, line=None)",,"Function: warn_with_traceback(message, category, filename, lineno, file=None, line=None)",scverse,scanpy,1.10.1,,,,,,,,"# noqa: PLR0917",,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"warn_once(msg: str, category: type[Warning], stacklevel: int = 1)",function,warn_once,"(msg: str, category: type[Warning], stacklevel: int = 1)",,"Function: warn_once(msg: str, category: type[Warning], stacklevel: int = 1)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"subsample(
    X: np.ndarray,
    subsample: int = 1,
    seed: int = 0,
) -> tuple[np.ndarray, np.ndarray]",function,subsample,"(
    X: np.ndarray,
    subsample: int = 1,
    seed: int = 0,
)","tuple[np.ndarray, np.ndarray]","Function: subsample(
    X: np.ndarray,
    subsample: int = 1,
    seed: int = 0,
) -> tuple[np.ndarray, np.ndarray]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"subsample_n(
    X: np.ndarray, n: int = 0, seed: int = 0
) -> tuple[np.ndarray, np.ndarray]",function,subsample_n,"(
    X: np.ndarray, n: int = 0, seed: int = 0
)","tuple[np.ndarray, np.ndarray]","Function: subsample_n(
    X: np.ndarray, n: int = 0, seed: int = 0
) -> tuple[np.ndarray, np.ndarray]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"check_presence_download(filename: Path, backup_url)",function,check_presence_download,"(filename: Path, backup_url)",,"Function: check_presence_download(filename: Path, backup_url)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,lazy_import(full_name),function,lazy_import,(full_name),,Function: lazy_import(full_name),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_fallback_to_uns(dct, conns, dists, conns_key, dists_key)",function,_fallback_to_uns,"(dct, conns, dists, conns_key, dists_key)",,"Function: _fallback_to_uns(dct, conns, dists, conns_key, dists_key)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_choose_graph(adata, obsp, neighbors_key)",function,_choose_graph,"(adata, obsp, neighbors_key)",,"Function: _choose_graph(adata, obsp, neighbors_key)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_resolve_axis(
    axis: Literal[""obs"", 0, ""var"", 1],
) -> tuple[Literal[0], Literal[""obs""]] | tuple[Literal[1], Literal[""var""]]",function,_resolve_axis,"(
    axis: Literal[""obs"", 0, ""var"", 1],
)","tuple[Literal[0], Literal[""obs""]] | tuple[Literal[1], Literal[""var""]]","Function: _resolve_axis(
    axis: Literal[""obs"", 0, ""var"", 1],
) -> tuple[Literal[0], Literal[""obs""]] | tuple[Literal[1], Literal[""var""]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,_empty = Empty.token,constant,,,,Constant: _empty = Empty.token,scverse,scanpy,1.10.1,,,,,_empty = Empty.token,_empty,Empty.token,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"AnyRandom = Union[int, np.random.RandomState, None]",constant,,,,"Constant: AnyRandom = Union[int, np.random.RandomState, None]",scverse,scanpy,1.10.1,,,,,"AnyRandom = Union[int, np.random.RandomState, None]",AnyRandom,"Union[int, np.random.RandomState, None]",,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,EPS = 1e-15,constant,,,,Constant: EPS = 1e-15,scverse,scanpy,1.10.1,,,,,EPS = 1e-15,EPS,1e-15,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_SparseMatrix = Union[sparse.csr_matrix, sparse.csc_matrix]",constant,,,,"Constant: _SparseMatrix = Union[sparse.csr_matrix, sparse.csc_matrix]",scverse,scanpy,1.10.1,,,,,"_SparseMatrix = Union[sparse.csr_matrix, sparse.csc_matrix]",_SparseMatrix,"Union[sparse.csr_matrix, sparse.csc_matrix]",,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_MemoryArray = Union[NDArray, _SparseMatrix]",constant,,,,"Constant: _MemoryArray = Union[NDArray, _SparseMatrix]",scverse,scanpy,1.10.1,,,,,"_MemoryArray = Union[NDArray, _SparseMatrix]",_MemoryArray,"Union[NDArray, _SparseMatrix]",,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_SupportedArray = Union[_MemoryArray, DaskArray]",constant,,,,"Constant: _SupportedArray = Union[_MemoryArray, DaskArray]",scverse,scanpy,1.10.1,,,,,"_SupportedArray = Union[_MemoryArray, DaskArray]",_SupportedArray,"Union[_MemoryArray, DaskArray]",,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"Scaling_T = TypeVar(""Scaling_T"", DaskArray, np.ndarray)",constant,,,,"Constant: Scaling_T = TypeVar(""Scaling_T"", DaskArray, np.ndarray)",scverse,scanpy,1.10.1,,,,,"Scaling_T = TypeVar(""Scaling_T"", DaskArray, np.ndarray)",Scaling_T,"TypeVar(""Scaling_T"", DaskArray, np.ndarray)",,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,importlib.util,import,,,,Import: importlib.util,scverse,scanpy,1.10.1,import importlib.util,importlib.util,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,inspect,import,,,,Import: inspect,scverse,scanpy,1.10.1,import inspect,inspect,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,random,import,,,,Import: random,scverse,scanpy,1.10.1,import random,random,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,re,import,,,,Import: re,scverse,scanpy,1.10.1,import re,re,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,sys,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,warnings,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,namedtuple from collections,import,,,,Import: namedtuple from collections,scverse,scanpy,1.10.1,from collections import namedtuple,namedtuple,collections,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,contextmanager from contextlib,import,,,,Import: contextmanager from contextlib,scverse,scanpy,1.10.1,from contextlib import contextmanager,contextmanager,contextlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Enum from enum,import,,,,Import: Enum from enum,scverse,scanpy,1.10.1,from enum import Enum,Enum,enum,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,"from functools import partial, singledispatch, wraps",partial,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,singledispatch from functools,import,,,,Import: singledispatch from functools,scverse,scanpy,1.10.1,"from functools import partial, singledispatch, wraps",singledispatch,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,wraps from functools,import,,,,Import: wraps from functools,scverse,scanpy,1.10.1,"from functools import partial, singledispatch, wraps",wraps,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,mul from operator,import,,,,Import: mul from operator,scverse,scanpy,1.10.1,"from operator import mul, truediv",mul,operator,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,truediv from operator,import,,,,Import: truediv from operator,scverse,scanpy,1.10.1,"from operator import mul, truediv",truediv,operator,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,dedent from textwrap,import,,,,Import: dedent from textwrap,scverse,scanpy,1.10.1,from textwrap import dedent,dedent,textwrap,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,MethodType from types,import,,,,Import: MethodType from types,scverse,scanpy,1.10.1,"from types import MethodType, ModuleType",MethodType,types,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,ModuleType from types,import,,,,Import: ModuleType from types,scverse,scanpy,1.10.1,"from types import MethodType, ModuleType",ModuleType,types,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    Literal,
    TypeVar,
    Union,
    overload,
)",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    Literal,
    TypeVar,
    Union,
    overload,
)",Any,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Callable from typing,import,,,,Import: Callable from typing,scverse,scanpy,1.10.1,"from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    Literal,
    TypeVar,
    Union,
    overload,
)",Callable,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    Literal,
    TypeVar,
    Union,
    overload,
)",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,TypeVar from typing,import,,,,Import: TypeVar from typing,scverse,scanpy,1.10.1,"from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    Literal,
    TypeVar,
    Union,
    overload,
)",TypeVar,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Union from typing,import,,,,Import: Union from typing,scverse,scanpy,1.10.1,"from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    Literal,
    TypeVar,
    Union,
    overload,
)",Union,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,overload from typing,import,,,,Import: overload from typing,scverse,scanpy,1.10.1,"from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    Literal,
    TypeVar,
    Union,
    overload,
)",overload,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,WeakSet from weakref,import,,,,Import: WeakSet from weakref,scverse,scanpy,1.10.1,from weakref import WeakSet,WeakSet,weakref,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,AnnData,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,__version__ from anndata,import,,,,Import: __version__ from anndata,scverse,scanpy,1.10.1,from anndata import __version__ as anndata_version,__version__,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,version,packaging,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,NDArray from numpy.typing,local_import,,,,Import: NDArray from numpy.typing,scverse,scanpy,1.10.1,from numpy.typing import NDArray,NDArray,numpy.typing,numpy.typing,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,check_random_state from sklearn.utils,local_import,,,,Import: check_random_state from sklearn.utils,scverse,scanpy,1.10.1,from sklearn.utils import check_random_state,check_random_state,sklearn.utils,sklearn.utils,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\_utils,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\_utils\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,_check_axis_supported(wrapped: C) -> C,function,_check_axis_supported,(wrapped: C),C,Function: _check_axis_supported(wrapped: C) -> C,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,_is_constant_rows(a: NDArray) -> NDArray[np.bool_],function,_is_constant_rows,(a: NDArray),NDArray[np.bool_],Function: _is_constant_rows(a: NDArray) -> NDArray[np.bool_],scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,"C = TypeVar(""C"", bound=Callable)",constant,,,,"Constant: C = TypeVar(""C"", bound=Callable)",scverse,scanpy,1.10.1,,,,,"C = TypeVar(""C"", bound=Callable)",C,"TypeVar(""C"", bound=Callable)",,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,"from functools import partial, singledispatch, wraps",partial,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,singledispatch from functools,import,,,,Import: singledispatch from functools,scverse,scanpy,1.10.1,"from functools import partial, singledispatch, wraps",singledispatch,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,wraps from functools,import,,,,Import: wraps from functools,scverse,scanpy,1.10.1,"from functools import partial, singledispatch, wraps",wraps,functools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,Integral from numbers,import,,,,Import: Integral from numbers,scverse,scanpy,1.10.1,from numbers import Integral,Integral,numbers,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, TypeVar, overload",TYPE_CHECKING,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, TypeVar, overload",Literal,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,TypeVar from typing,import,,,,Import: TypeVar from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, TypeVar, overload",TypeVar,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,overload from typing,import,,,,Import: overload from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, TypeVar, overload",overload,typing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,numpy,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,njit from numba,import,,,,Import: njit from numba,scverse,scanpy,1.10.1,from numba import njit,njit,numba,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,sparse,scipy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,Callable from collections.abc,local_import,,,,Import: Callable from collections.abc,scverse,scanpy,1.10.1,from collections.abc import Callable,Callable,collections.abc,collections.abc,,,,,,,,,,,,,,
,is_constant.py,python,,,,,,File: scanpy\_utils\compute,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,is_constant.py,python,,,,,,Directory: scanpy\_utils\compute\is_constant.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
