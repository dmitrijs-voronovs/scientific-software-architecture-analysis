id,filename,ext,embedding_no_type,element_type,constant,constant.name,constant.value,embedding,author,repo_name,tag,import,import.from,import.name,function.name,function.parameters,import.path,class.name,method.name,method.parameters,class.field,class.instance_field,method.type,function.type,function.docstring,field.name,class.base,field.default,method.decorator
allenai_scispacy_v0.5.4,setup.py,python,VERSION = {},constant,VERSION = {},VERSION,{},Constant: VERSION = {},allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,setup.py,python,setup from setuptools,import,,,,Import: setup from setuptools,allenai,scispacy,v0.5.4,"from setuptools import setup, find_packages",setuptools,setup,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,setup.py,python,find_packages from setuptools,import,,,,Import: find_packages from setuptools,allenai,scispacy,v0.5.4,"from setuptools import setup, find_packages",setuptools,find_packages,,,,,,,,,,,,,,,
,setup.py,python,,,,,,File: .,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,setup.py,python,,,,,,Directory: setup.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,evaluate_linker.py,python,main(),function,,,,Function: main(),allenai,scispacy,v0.5.4,,,,main,(),,,,,,,,,,,,,
allenai_scispacy_v0.5.4,evaluate_linker.py,python,EVALUATION_FOLDER_PATH = os.path.dirname(os.path.abspath(__file__)),constant,EVALUATION_FOLDER_PATH = os.path.dirname(os.path.abspath(__file__)),EVALUATION_FOLDER_PATH,os.path.dirname(os.path.abspath(__file__)),Constant: EVALUATION_FOLDER_PATH = os.path.dirname(os.path.abspath(__file__)),allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,evaluate_linker.py,python,spacy,import,,,,Import: spacy,allenai,scispacy,v0.5.4,import spacy,,spacy,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,evaluate_linker.py,python,os,import,,,,Import: os,allenai,scispacy,v0.5.4,import os,,os,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,evaluate_linker.py,python,tqdm from tqdm,import,,,,Import: tqdm from tqdm,allenai,scispacy,v0.5.4,from tqdm import tqdm,tqdm,tqdm,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,evaluate_linker.py,python,EntityLinker from scispacy.linking,local_import,,,,Import: EntityLinker from scispacy.linking,allenai,scispacy,v0.5.4,from scispacy.linking import EntityLinker,scispacy.linking,EntityLinker,,,scispacy.linking,,,,,,,,,,,,
allenai_scispacy_v0.5.4,evaluate_linker.py,python,read_full_med_mentions from scispacy.data_util,local_import,,,,Import: read_full_med_mentions from scispacy.data_util,allenai,scispacy,v0.5.4,from scispacy.data_util import read_full_med_mentions,scispacy.data_util,read_full_med_mentions,,,scispacy.data_util,,,,,,,,,,,,
,evaluate_linker.py,python,,,,,,File: evaluation,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,evaluate_linker.py,python,,,,,,Directory: evaluation\evaluate_linker.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,sentence_splitting_evaluation.py,python,"evaluate_sentence_splitting(model_path: str,
                                data_directory: str,
                                rule_segmenter: bool = False,
                                custom_tokenizer: bool = False,
                                citation_data_path: str = None)",function,,,,"Function: evaluate_sentence_splitting(model_path: str,
                                data_directory: str,
                                rule_segmenter: bool = False,
                                custom_tokenizer: bool = False,
                                citation_data_path: str = None)",allenai,scispacy,v0.5.4,,,,evaluate_sentence_splitting,"(model_path: str,
                                data_directory: str,
                                rule_segmenter: bool = False,
                                custom_tokenizer: bool = False,
                                citation_data_path: str = None)",,,,,,,,,,,,,
allenai_scispacy_v0.5.4,sentence_splitting_evaluation.py,python,argparse,import,,,,Import: argparse,allenai,scispacy,v0.5.4,import argparse,,argparse,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,sentence_splitting_evaluation.py,python,os,import,,,,Import: os,allenai,scispacy,v0.5.4,import os,,os,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,sentence_splitting_evaluation.py,python,sys,import,,,,Import: sys,allenai,scispacy,v0.5.4,import sys,,sys,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,sentence_splitting_evaluation.py,python,json,import,,,,Import: json,allenai,scispacy,v0.5.4,import json,,json,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,sentence_splitting_evaluation.py,python,spacy,import,,,,Import: spacy,allenai,scispacy,v0.5.4,import spacy,,spacy,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,sentence_splitting_evaluation.py,python,combined_rule_sentence_segmenter from scispacy.custom_sentence_segmenter,local_import,,,,Import: combined_rule_sentence_segmenter from scispacy.custom_sentence_segmenter,allenai,scispacy,v0.5.4,from scispacy.custom_sentence_segmenter import combined_rule_sentence_segmenter,scispacy.custom_sentence_segmenter,combined_rule_sentence_segmenter,,,scispacy.custom_sentence_segmenter,,,,,,,,,,,,
allenai_scispacy_v0.5.4,sentence_splitting_evaluation.py,python,remove_new_lines from scispacy.custom_tokenizer,local_import,,,,Import: remove_new_lines from scispacy.custom_tokenizer,allenai,scispacy,v0.5.4,"from scispacy.custom_tokenizer import remove_new_lines, combined_rule_tokenizer",scispacy.custom_tokenizer,remove_new_lines,,,scispacy.custom_tokenizer,,,,,,,,,,,,
allenai_scispacy_v0.5.4,sentence_splitting_evaluation.py,python,combined_rule_tokenizer from scispacy.custom_tokenizer,local_import,,,,Import: combined_rule_tokenizer from scispacy.custom_tokenizer,allenai,scispacy,v0.5.4,"from scispacy.custom_tokenizer import remove_new_lines, combined_rule_tokenizer",scispacy.custom_tokenizer,combined_rule_tokenizer,,,scispacy.custom_tokenizer,,,,,,,,,,,,
,sentence_splitting_evaluation.py,python,,,,,,File: evaluation,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,sentence_splitting_evaluation.py,python,,,,,,Directory: evaluation\sentence_splitting_evaluation.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,[instance] AbbreviationDetector.matcher = Matcher(nlp.vocab),class_field,,,,Class field: [instance] AbbreviationDetector.matcher = Matcher(nlp.vocab),allenai,scispacy,v0.5.4,,,,,,,AbbreviationDetector,__init__,"(
        self,
        nlp: Language,
        name: str = ""abbreviation_detector"",
        make_serializable: bool = False,
    )",self.matcher = Matcher(nlp.vocab),self.matcher = Matcher(nlp.vocab),,,,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,"[instance] AbbreviationDetector.matcher.add(""parenthesis"", [[{""ORTH"": ""(""}, {""OP"": ""+""}, {""ORTH"": "")""}]])",class_field,,,,"Class field: [instance] AbbreviationDetector.matcher.add(""parenthesis"", [[{""ORTH"": ""(""}, {""OP"": ""+""}, {""ORTH"": "")""}]])",allenai,scispacy,v0.5.4,,,,,,,AbbreviationDetector,__init__,"(
        self,
        nlp: Language,
        name: str = ""abbreviation_detector"",
        make_serializable: bool = False,
    )","self.matcher.add(""parenthesis"", [[{""ORTH"": ""(""}, {""OP"": ""+""}, {""ORTH"": "")""}]])","self.matcher.add(""parenthesis"", [[{""ORTH"": ""(""}, {""OP"": ""+""}, {""ORTH"": "")""}]])",,,,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,[instance] AbbreviationDetector.make_serializable = make_serializable,class_field,,,,Class field: [instance] AbbreviationDetector.make_serializable = make_serializable,allenai,scispacy,v0.5.4,,,,,,,AbbreviationDetector,__init__,"(
        self,
        nlp: Language,
        name: str = ""abbreviation_detector"",
        make_serializable: bool = False,
    )",self.make_serializable = make_serializable,self.make_serializable = make_serializable,,,,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,[instance] AbbreviationDetector.global_matcher = Matcher(nlp.vocab),class_field,,,,Class field: [instance] AbbreviationDetector.global_matcher = Matcher(nlp.vocab),allenai,scispacy,v0.5.4,,,,,,,AbbreviationDetector,__init__,"(
        self,
        nlp: Language,
        name: str = ""abbreviation_detector"",
        make_serializable: bool = False,
    )",self.global_matcher = Matcher(nlp.vocab),self.global_matcher = Matcher(nlp.vocab),,,,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,"AbbreviationDetector.__init__(
        self,
        nlp: Language,
        name: str = ""abbreviation_detector"",
        make_serializable: bool = False,
    ) -> None",class_method,,,,"Class method: AbbreviationDetector.__init__(
        self,
        nlp: Language,
        name: str = ""abbreviation_detector"",
        make_serializable: bool = False,
    ) -> None",allenai,scispacy,v0.5.4,,,,,,,AbbreviationDetector,__init__,"(
        self,
        nlp: Language,
        name: str = ""abbreviation_detector"",
        make_serializable: bool = False,
    )",,,,,,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,"AbbreviationDetector.find(self, span: Span, doc: Doc) -> Tuple[Span, Set[Span]]",class_method,,,,"Class method: AbbreviationDetector.find(self, span: Span, doc: Doc) -> Tuple[Span, Set[Span]]",allenai,scispacy,v0.5.4,,,,,,,AbbreviationDetector,find,"(self, span: Span, doc: Doc)",,,"Tuple[Span, Set[Span]]",,,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,"AbbreviationDetector.__call__(self, doc: Doc) -> Doc",class_method,,,,"Class method: AbbreviationDetector.__call__(self, doc: Doc) -> Doc",allenai,scispacy,v0.5.4,,,,,,,AbbreviationDetector,__call__,"(self, doc: Doc)",,,Doc,,,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,"AbbreviationDetector.find_matches_for(
        self, filtered: List[Tuple[Span, Span]], doc: Doc
    ) -> List[Tuple[Span, Set[Span]]]",class_method,,,,"Class method: AbbreviationDetector.find_matches_for(
        self, filtered: List[Tuple[Span, Span]], doc: Doc
    ) -> List[Tuple[Span, Set[Span]]]",allenai,scispacy,v0.5.4,,,,,,,AbbreviationDetector,find_matches_for,"(
        self, filtered: List[Tuple[Span, Span]], doc: Doc
    )",,,"List[Tuple[Span, Set[Span]]]",,,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,"AbbreviationDetector.make_short_form_serializable(self, abbreviation: Span)",class_method,,,,"Class method: AbbreviationDetector.make_short_form_serializable(self, abbreviation: Span)",allenai,scispacy,v0.5.4,,,,,,,AbbreviationDetector,make_short_form_serializable,"(self, abbreviation: Span)",,,,,,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,AbbreviationDetector,class,,,,Class: AbbreviationDetector,allenai,scispacy,v0.5.4,,,,,,,AbbreviationDetector,,,,,,,,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,"find_abbreviation(
    long_form_candidate: Span, short_form_candidate: Span
) -> Tuple[Span, Optional[Span]]",function,,,,"Function: find_abbreviation(
    long_form_candidate: Span, short_form_candidate: Span
) -> Tuple[Span, Optional[Span]]",allenai,scispacy,v0.5.4,,,,find_abbreviation,"(
    long_form_candidate: Span, short_form_candidate: Span
)",,,,,,,,"Tuple[Span, Optional[Span]]",,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,span_contains_unbalanced_parentheses(span: Span) -> bool,function,,,,Function: span_contains_unbalanced_parentheses(span: Span) -> bool,allenai,scispacy,v0.5.4,,,,span_contains_unbalanced_parentheses,(span: Span),,,,,,,,bool,,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,"filter_matches(
    matcher_output: List[Tuple[int, int, int]], doc: Doc
) -> List[Tuple[Span, Span]]",function,,,,"Function: filter_matches(
    matcher_output: List[Tuple[int, int, int]], doc: Doc
) -> List[Tuple[Span, Span]]",allenai,scispacy,v0.5.4,,,,filter_matches,"(
    matcher_output: List[Tuple[int, int, int]], doc: Doc
)",,,,,,,,"List[Tuple[Span, Span]]","# Filter into two cases:",,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,"filter_matches(
    matcher_output: List[Tuple[int, int, int]], doc: Doc
) -> List[Tuple[Span, Span]]",function,,,,"Function: filter_matches(
    matcher_output: List[Tuple[int, int, int]], doc: Doc
) -> List[Tuple[Span, Span]]",allenai,scispacy,v0.5.4,,,,filter_matches,"(
    matcher_output: List[Tuple[int, int, int]], doc: Doc
)",,,,,,,,"List[Tuple[Span, Span]]","# 1. <Short Form> ( <Long Form> )",,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,"filter_matches(
    matcher_output: List[Tuple[int, int, int]], doc: Doc
) -> List[Tuple[Span, Span]]",function,,,,"Function: filter_matches(
    matcher_output: List[Tuple[int, int, int]], doc: Doc
) -> List[Tuple[Span, Span]]",allenai,scispacy,v0.5.4,,,,filter_matches,"(
    matcher_output: List[Tuple[int, int, int]], doc: Doc
)",,,,,,,,"List[Tuple[Span, Span]]","# 2. <Long Form> (<Short Form>) [this case is most common].",,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,short_form_filter(span: Span) -> bool,function,,,,Function: short_form_filter(span: Span) -> bool,allenai,scispacy,v0.5.4,,,,short_form_filter,(span: Span),,,,,,,,bool,"# All words are between length 2 and 10",,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,Tuple from typing,import,,,,Import: Tuple from typing,allenai,scispacy,v0.5.4,"from typing import Tuple, List, Optional, Set, Dict",typing,Tuple,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,List from typing,import,,,,Import: List from typing,allenai,scispacy,v0.5.4,"from typing import Tuple, List, Optional, Set, Dict",typing,List,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,Optional from typing,import,,,,Import: Optional from typing,allenai,scispacy,v0.5.4,"from typing import Tuple, List, Optional, Set, Dict",typing,Optional,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,Set from typing,import,,,,Import: Set from typing,allenai,scispacy,v0.5.4,"from typing import Tuple, List, Optional, Set, Dict",typing,Set,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,Dict from typing,import,,,,Import: Dict from typing,allenai,scispacy,v0.5.4,"from typing import Tuple, List, Optional, Set, Dict",typing,Dict,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,defaultdict from collections,import,,,,Import: defaultdict from collections,allenai,scispacy,v0.5.4,from collections import defaultdict,collections,defaultdict,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,Span from spacy.tokens,local_import,,,,Import: Span from spacy.tokens,allenai,scispacy,v0.5.4,"from spacy.tokens import Span, Doc",spacy.tokens,Span,,,spacy.tokens,,,,,,,,,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,Doc from spacy.tokens,local_import,,,,Import: Doc from spacy.tokens,allenai,scispacy,v0.5.4,"from spacy.tokens import Span, Doc",spacy.tokens,Doc,,,spacy.tokens,,,,,,,,,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,Matcher from spacy.matcher,local_import,,,,Import: Matcher from spacy.matcher,allenai,scispacy,v0.5.4,from spacy.matcher import Matcher,spacy.matcher,Matcher,,,spacy.matcher,,,,,,,,,,,,
allenai_scispacy_v0.5.4,abbreviation.py,python,Language from spacy.language,local_import,,,,Import: Language from spacy.language,allenai,scispacy,v0.5.4,from spacy.language import Language,spacy.language,Language,,,spacy.language,,,,,,,,,,,,
,abbreviation.py,python,,,,,,File: scispacy,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,abbreviation.py,python,,,,,,Directory: scispacy\abbreviation.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,base_project_code.py,python,"iter_sample(iterable: Iterable, sample_percent: float) -> Iterator",function,,,,"Function: iter_sample(iterable: Iterable, sample_percent: float) -> Iterator",allenai,scispacy,v0.5.4,,,,iter_sample,"(iterable: Iterable, sample_percent: float)",,,,,,,,Iterator,,,,,
allenai_scispacy_v0.5.4,base_project_code.py,python,Optional from typing,import,,,,Import: Optional from typing,allenai,scispacy,v0.5.4,"from typing import Optional, Callable, Iterable, Iterator",typing,Optional,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,base_project_code.py,python,Callable from typing,import,,,,Import: Callable from typing,allenai,scispacy,v0.5.4,"from typing import Optional, Callable, Iterable, Iterator",typing,Callable,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,base_project_code.py,python,Iterable from typing,import,,,,Import: Iterable from typing,allenai,scispacy,v0.5.4,"from typing import Optional, Callable, Iterable, Iterator",typing,Iterable,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,base_project_code.py,python,Iterator from typing,import,,,,Import: Iterator from typing,allenai,scispacy,v0.5.4,"from typing import Optional, Callable, Iterable, Iterator",typing,Iterator,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,base_project_code.py,python,Path from pathlib,import,,,,Import: Path from pathlib,allenai,scispacy,v0.5.4,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,base_project_code.py,python,random,import,,,,Import: random,allenai,scispacy,v0.5.4,import random,,random,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,base_project_code.py,python,itertools,import,,,,Import: itertools,allenai,scispacy,v0.5.4,import itertools,,itertools,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,base_project_code.py,python,spacy,import,,,,Import: spacy,allenai,scispacy,v0.5.4,import spacy,,spacy,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,base_project_code.py,python,warnings,import,,,,Import: warnings,allenai,scispacy,v0.5.4,import warnings,,warnings,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,base_project_code.py,python,Corpus from spacy.training,local_import,,,,Import: Corpus from spacy.training,allenai,scispacy,v0.5.4,"from spacy.training import Corpus, Example",spacy.training,Corpus,,,spacy.training,,,,,,,,,,,,
allenai_scispacy_v0.5.4,base_project_code.py,python,Example from spacy.training,local_import,,,,Import: Example from spacy.training,allenai,scispacy,v0.5.4,"from spacy.training import Corpus, Example",spacy.training,Example,,,spacy.training,,,,,,,,,,,,
allenai_scispacy_v0.5.4,base_project_code.py,python,Language from spacy.language,local_import,,,,Import: Language from spacy.language,allenai,scispacy,v0.5.4,from spacy.language import Language,spacy.language,Language,,,spacy.language,,,,,,,,,,,,
allenai_scispacy_v0.5.4,base_project_code.py,python,combined_rule_tokenizer from scispacy.custom_tokenizer,local_import,,,,Import: combined_rule_tokenizer from scispacy.custom_tokenizer,allenai,scispacy,v0.5.4,from scispacy.custom_tokenizer import combined_rule_tokenizer,scispacy.custom_tokenizer,combined_rule_tokenizer,,,scispacy.custom_tokenizer,,,,,,,,,,,,
allenai_scispacy_v0.5.4,base_project_code.py,python,read_full_med_mentions from scispacy.data_util,local_import,,,,Import: read_full_med_mentions from scispacy.data_util,allenai,scispacy,v0.5.4,"from scispacy.data_util import read_full_med_mentions, read_ner_from_tsv",scispacy.data_util,read_full_med_mentions,,,scispacy.data_util,,,,,,,,,,,,
allenai_scispacy_v0.5.4,base_project_code.py,python,read_ner_from_tsv from scispacy.data_util,local_import,,,,Import: read_ner_from_tsv from scispacy.data_util,allenai,scispacy,v0.5.4,"from scispacy.data_util import read_full_med_mentions, read_ner_from_tsv",scispacy.data_util,read_ner_from_tsv,,,scispacy.data_util,,,,,,,,,,,,
,base_project_code.py,python,,,,,,File: scispacy,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,base_project_code.py,python,,,,,,Directory: scispacy\base_project_code.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,LinkerPaths.ann_index: str,class_field,,,,Class field: LinkerPaths.ann_index: str,allenai,scispacy,v0.5.4,,,,,,,LinkerPaths,,,ann_index: str,,,,,ann_index,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,LinkerPaths.tfidf_vectorizer: str,class_field,,,,Class field: LinkerPaths.tfidf_vectorizer: str,allenai,scispacy,v0.5.4,,,,,,,LinkerPaths,,,tfidf_vectorizer: str,,,,,tfidf_vectorizer,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,LinkerPaths.tfidf_vectors: str,class_field,,,,Class field: LinkerPaths.tfidf_vectors: str,allenai,scispacy,v0.5.4,,,,,,,LinkerPaths,,,tfidf_vectors: str,,,,,tfidf_vectors,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,LinkerPaths.concept_aliases_list: str,class_field,,,,Class field: LinkerPaths.concept_aliases_list: str,allenai,scispacy,v0.5.4,,,,,,,LinkerPaths,,,concept_aliases_list: str,,,,,concept_aliases_list,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,MentionCandidate.concept_id: str,class_field,,,,Class field: MentionCandidate.concept_id: str,allenai,scispacy,v0.5.4,,,,,,,MentionCandidate,,,concept_id: str,,,,,concept_id,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,MentionCandidate.aliases: List[str],class_field,,,,Class field: MentionCandidate.aliases: List[str],allenai,scispacy,v0.5.4,,,,,,,MentionCandidate,,,aliases: List[str],,,,,aliases,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,MentionCandidate.similarities: List[float],class_field,,,,Class field: MentionCandidate.similarities: List[float],allenai,scispacy,v0.5.4,,,,,,,MentionCandidate,,,similarities: List[float],,,,,similarities,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,"[instance] CandidateGenerator.ann_index = ann_index or load_approximate_nearest_neighbours_index(
            linker_paths=linker_paths, ef_search=ef_search
        )",class_field,,,,"Class field: [instance] CandidateGenerator.ann_index = ann_index or load_approximate_nearest_neighbours_index(
            linker_paths=linker_paths, ef_search=ef_search
        )",allenai,scispacy,v0.5.4,,,,,,,CandidateGenerator,__init__,"(
        self,
        ann_index: Optional[FloatIndex] = None,
        tfidf_vectorizer: Optional[TfidfVectorizer] = None,
        ann_concept_aliases_list: Optional[List[str]] = None,
        kb: Optional[KnowledgeBase] = None,
        verbose: bool = False,
        ef_search: int = 200,
        name: Optional[str] = None,
    )","self.ann_index = ann_index or load_approximate_nearest_neighbours_index(
            linker_paths=linker_paths, ef_search=ef_search
        )","self.ann_index = ann_index or load_approximate_nearest_neighbours_index(
            linker_paths=linker_paths, ef_search=ef_search
        )",,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,"[instance] CandidateGenerator.vectorizer = tfidf_vectorizer or joblib.load(
            cached_path(linker_paths.tfidf_vectorizer)
        )",class_field,,,,"Class field: [instance] CandidateGenerator.vectorizer = tfidf_vectorizer or joblib.load(
            cached_path(linker_paths.tfidf_vectorizer)
        )",allenai,scispacy,v0.5.4,,,,,,,CandidateGenerator,__init__,"(
        self,
        ann_index: Optional[FloatIndex] = None,
        tfidf_vectorizer: Optional[TfidfVectorizer] = None,
        ann_concept_aliases_list: Optional[List[str]] = None,
        kb: Optional[KnowledgeBase] = None,
        verbose: bool = False,
        ef_search: int = 200,
        name: Optional[str] = None,
    )","self.vectorizer = tfidf_vectorizer or joblib.load(
            cached_path(linker_paths.tfidf_vectorizer)
        )","self.vectorizer = tfidf_vectorizer or joblib.load(
            cached_path(linker_paths.tfidf_vectorizer)
        )",,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,"[instance] CandidateGenerator.ann_concept_aliases_list = ann_concept_aliases_list or json.load(
            open(cached_path(linker_paths.concept_aliases_list))
        )",class_field,,,,"Class field: [instance] CandidateGenerator.ann_concept_aliases_list = ann_concept_aliases_list or json.load(
            open(cached_path(linker_paths.concept_aliases_list))
        )",allenai,scispacy,v0.5.4,,,,,,,CandidateGenerator,__init__,"(
        self,
        ann_index: Optional[FloatIndex] = None,
        tfidf_vectorizer: Optional[TfidfVectorizer] = None,
        ann_concept_aliases_list: Optional[List[str]] = None,
        kb: Optional[KnowledgeBase] = None,
        verbose: bool = False,
        ef_search: int = 200,
        name: Optional[str] = None,
    )","self.ann_concept_aliases_list = ann_concept_aliases_list or json.load(
            open(cached_path(linker_paths.concept_aliases_list))
        )","self.ann_concept_aliases_list = ann_concept_aliases_list or json.load(
            open(cached_path(linker_paths.concept_aliases_list))
        )",,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,[instance] CandidateGenerator.kb = kb or DEFAULT_KNOWLEDGE_BASES[name](),class_field,,,,Class field: [instance] CandidateGenerator.kb = kb or DEFAULT_KNOWLEDGE_BASES[name](),allenai,scispacy,v0.5.4,,,,,,,CandidateGenerator,__init__,"(
        self,
        ann_index: Optional[FloatIndex] = None,
        tfidf_vectorizer: Optional[TfidfVectorizer] = None,
        ann_concept_aliases_list: Optional[List[str]] = None,
        kb: Optional[KnowledgeBase] = None,
        verbose: bool = False,
        ef_search: int = 200,
        name: Optional[str] = None,
    )",self.kb = kb or DEFAULT_KNOWLEDGE_BASES[name](),self.kb = kb or DEFAULT_KNOWLEDGE_BASES[name](),,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,[instance] CandidateGenerator.verbose = verbose,class_field,,,,Class field: [instance] CandidateGenerator.verbose = verbose,allenai,scispacy,v0.5.4,,,,,,,CandidateGenerator,__init__,"(
        self,
        ann_index: Optional[FloatIndex] = None,
        tfidf_vectorizer: Optional[TfidfVectorizer] = None,
        ann_concept_aliases_list: Optional[List[str]] = None,
        kb: Optional[KnowledgeBase] = None,
        verbose: bool = False,
        ef_search: int = 200,
        name: Optional[str] = None,
    )",self.verbose = verbose,self.verbose = verbose,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,[instance] CandidateGenerator.umls = kb,class_field,,,,Class field: [instance] CandidateGenerator.umls = kb,allenai,scispacy,v0.5.4,,,,,,,CandidateGenerator,__init__,"(
        self,
        ann_index: Optional[FloatIndex] = None,
        tfidf_vectorizer: Optional[TfidfVectorizer] = None,
        ann_concept_aliases_list: Optional[List[str]] = None,
        kb: Optional[KnowledgeBase] = None,
        verbose: bool = False,
        ef_search: int = 200,
        name: Optional[str] = None,
    )",self.umls = self.kb,self.umls = self.kb,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,"CandidateGenerator.__init__(
        self,
        ann_index: Optional[FloatIndex] = None,
        tfidf_vectorizer: Optional[TfidfVectorizer] = None,
        ann_concept_aliases_list: Optional[List[str]] = None,
        kb: Optional[KnowledgeBase] = None,
        verbose: bool = False,
        ef_search: int = 200,
        name: Optional[str] = None,
    ) -> None",class_method,,,,"Class method: CandidateGenerator.__init__(
        self,
        ann_index: Optional[FloatIndex] = None,
        tfidf_vectorizer: Optional[TfidfVectorizer] = None,
        ann_concept_aliases_list: Optional[List[str]] = None,
        kb: Optional[KnowledgeBase] = None,
        verbose: bool = False,
        ef_search: int = 200,
        name: Optional[str] = None,
    ) -> None",allenai,scispacy,v0.5.4,,,,,,,CandidateGenerator,__init__,"(
        self,
        ann_index: Optional[FloatIndex] = None,
        tfidf_vectorizer: Optional[TfidfVectorizer] = None,
        ann_concept_aliases_list: Optional[List[str]] = None,
        kb: Optional[KnowledgeBase] = None,
        verbose: bool = False,
        ef_search: int = 200,
        name: Optional[str] = None,
    )",,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,"CandidateGenerator.nmslib_knn_with_zero_vectors(
        self, vectors: numpy.ndarray, k: int
    ) -> Tuple[numpy.ndarray, numpy.ndarray]",class_method,,,,"Class method: CandidateGenerator.nmslib_knn_with_zero_vectors(
        self, vectors: numpy.ndarray, k: int
    ) -> Tuple[numpy.ndarray, numpy.ndarray]",allenai,scispacy,v0.5.4,,,,,,,CandidateGenerator,nmslib_knn_with_zero_vectors,"(
        self, vectors: numpy.ndarray, k: int
    )",,,"Tuple[numpy.ndarray, numpy.ndarray]",,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,"CandidateGenerator.__call__(
        self, mention_texts: List[str], k: int
    ) -> List[List[MentionCandidate]]",class_method,,,,"Class method: CandidateGenerator.__call__(
        self, mention_texts: List[str], k: int
    ) -> List[List[MentionCandidate]]",allenai,scispacy,v0.5.4,,,,,,,CandidateGenerator,__call__,"(
        self, mention_texts: List[str], k: int
    )",,,List[List[MentionCandidate]],,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,LinkerPaths(NamedTuple),class,,,,Class: LinkerPaths(NamedTuple),allenai,scispacy,v0.5.4,,,,,,,LinkerPaths,,,,,,,,,(NamedTuple),,
allenai_scispacy_v0.5.4,candidate_generation.py,python,MentionCandidate(NamedTuple),class,,,,Class: MentionCandidate(NamedTuple),allenai,scispacy,v0.5.4,,,,,,,MentionCandidate,,,,,,,,,(NamedTuple),,
allenai_scispacy_v0.5.4,candidate_generation.py,python,CandidateGenerator,class,,,,Class: CandidateGenerator,allenai,scispacy,v0.5.4,,,,,,,CandidateGenerator,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,"load_approximate_nearest_neighbours_index(
    linker_paths: LinkerPaths,
    ef_search: int = 200,
) -> FloatIndex",function,,,,"Function: load_approximate_nearest_neighbours_index(
    linker_paths: LinkerPaths,
    ef_search: int = 200,
) -> FloatIndex",allenai,scispacy,v0.5.4,,,,load_approximate_nearest_neighbours_index,"(
    linker_paths: LinkerPaths,
    ef_search: int = 200,
)",,,,,,,,FloatIndex,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,"create_tfidf_ann_index(
    out_path: str, kb: Optional[KnowledgeBase] = None
) -> Tuple[List[str], TfidfVectorizer, FloatIndex]",function,,,,"Function: create_tfidf_ann_index(
    out_path: str, kb: Optional[KnowledgeBase] = None
) -> Tuple[List[str], TfidfVectorizer, FloatIndex]",allenai,scispacy,v0.5.4,,,,create_tfidf_ann_index,"(
    out_path: str, kb: Optional[KnowledgeBase] = None
)",,,,,,,,"Tuple[List[str], TfidfVectorizer, FloatIndex]",,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,"UmlsLinkerPaths = LinkerPaths(
    ann_index=""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/linkers/2023-04-23/umls/nmslib_index.bin"",  # noqa
    tfidf_vectorizer=""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/linkers/2023-04-23/umls/tfidf_vectorizer.joblib"",  # noqa
    tfidf_vectors=""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/linkers/2023-04-23/umls/tfidf_vectors_sparse.npz"",  # noqa
    concept_aliases_list=""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/linkers/2023-04-23/umls/concept_aliases.json"",  # noqa
)",constant,"UmlsLinkerPaths = LinkerPaths(
    ann_index=""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/linkers/2023-04-23/umls/nmslib_index.bin"",  # noqa
    tfidf_vectorizer=""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/linkers/2023-04-23/umls/tfidf_vectorizer.joblib"",  # noqa
    tfidf_vectors=""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/linkers/2023-04-23/umls/tfidf_vectors_sparse.npz"",  # noqa
    concept_aliases_list=""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/linkers/2023-04-23/umls/concept_aliases.json"",  # noqa
)",UmlsLinkerPaths,"LinkerPaths(
    ann_index=""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/linkers/2023-04-23/umls/nmslib_index.bin"",  # noqa
    tfidf_vectorizer=""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/linkers/2023-04-23/umls/tfidf_vectorizer.joblib"",  # noqa
    tfidf_vectors=""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/linkers/2023-04-23/umls/tfidf_vectors_sparse.npz"",  # noqa
    concept_aliases_list=""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/linkers/2023-04-23/umls/concept_aliases.json"",  # noqa
)","Constant: UmlsLinkerPaths = LinkerPaths(
    ann_index=""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/linkers/2023-04-23/umls/nmslib_index.bin"",  # noqa
    tfidf_vectorizer=""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/linkers/2023-04-23/umls/tfidf_vectorizer.joblib"",  # noqa
    tfidf_vectors=""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/linkers/2023-04-23/umls/tfidf_vectors_sparse.npz"",  # noqa
    concept_aliases_list=""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/linkers/2023-04-23/umls/concept_aliases.json"",  # noqa
)",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,"MeshLinkerPaths = LinkerPaths(
    ann_index=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/mesh/nmslib_index.bin"",  # noqa
    tfidf_vectorizer=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/mesh/tfidf_vectorizer.joblib"",  # noqa
    tfidf_vectors=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/mesh/tfidf_vectors_sparse.npz"",  # noqa
    concept_aliases_list=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/mesh/concept_aliases.json"",  # noqa
)",constant,"MeshLinkerPaths = LinkerPaths(
    ann_index=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/mesh/nmslib_index.bin"",  # noqa
    tfidf_vectorizer=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/mesh/tfidf_vectorizer.joblib"",  # noqa
    tfidf_vectors=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/mesh/tfidf_vectors_sparse.npz"",  # noqa
    concept_aliases_list=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/mesh/concept_aliases.json"",  # noqa
)",MeshLinkerPaths,"LinkerPaths(
    ann_index=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/mesh/nmslib_index.bin"",  # noqa
    tfidf_vectorizer=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/mesh/tfidf_vectorizer.joblib"",  # noqa
    tfidf_vectors=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/mesh/tfidf_vectors_sparse.npz"",  # noqa
    concept_aliases_list=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/mesh/concept_aliases.json"",  # noqa
)","Constant: MeshLinkerPaths = LinkerPaths(
    ann_index=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/mesh/nmslib_index.bin"",  # noqa
    tfidf_vectorizer=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/mesh/tfidf_vectorizer.joblib"",  # noqa
    tfidf_vectors=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/mesh/tfidf_vectors_sparse.npz"",  # noqa
    concept_aliases_list=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/mesh/concept_aliases.json"",  # noqa
)",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,"GeneOntologyLinkerPaths = LinkerPaths(
    ann_index=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/go/nmslib_index.bin"",  # noqa
    tfidf_vectorizer=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/go/tfidf_vectorizer.joblib"",  # noqa
    tfidf_vectors=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/go/tfidf_vectors_sparse.npz"",  # noqa
    concept_aliases_list=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/go/concept_aliases.json"",  # noqa
)",constant,"GeneOntologyLinkerPaths = LinkerPaths(
    ann_index=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/go/nmslib_index.bin"",  # noqa
    tfidf_vectorizer=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/go/tfidf_vectorizer.joblib"",  # noqa
    tfidf_vectors=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/go/tfidf_vectors_sparse.npz"",  # noqa
    concept_aliases_list=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/go/concept_aliases.json"",  # noqa
)",GeneOntologyLinkerPaths,"LinkerPaths(
    ann_index=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/go/nmslib_index.bin"",  # noqa
    tfidf_vectorizer=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/go/tfidf_vectorizer.joblib"",  # noqa
    tfidf_vectors=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/go/tfidf_vectors_sparse.npz"",  # noqa
    concept_aliases_list=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/go/concept_aliases.json"",  # noqa
)","Constant: GeneOntologyLinkerPaths = LinkerPaths(
    ann_index=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/go/nmslib_index.bin"",  # noqa
    tfidf_vectorizer=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/go/tfidf_vectorizer.joblib"",  # noqa
    tfidf_vectors=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/go/tfidf_vectors_sparse.npz"",  # noqa
    concept_aliases_list=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/go/concept_aliases.json"",  # noqa
)",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,"HumanPhenotypeOntologyLinkerPaths = LinkerPaths(
    ann_index=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/hpo/nmslib_index.bin"",  # noqa
    tfidf_vectorizer=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/hpo/tfidf_vectorizer.joblib"",  # noqa
    tfidf_vectors=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/hpo/tfidf_vectors_sparse.npz"",  # noqa
    concept_aliases_list=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/hpo/concept_aliases.json"",  # noqa
)",constant,"HumanPhenotypeOntologyLinkerPaths = LinkerPaths(
    ann_index=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/hpo/nmslib_index.bin"",  # noqa
    tfidf_vectorizer=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/hpo/tfidf_vectorizer.joblib"",  # noqa
    tfidf_vectors=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/hpo/tfidf_vectors_sparse.npz"",  # noqa
    concept_aliases_list=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/hpo/concept_aliases.json"",  # noqa
)",HumanPhenotypeOntologyLinkerPaths,"LinkerPaths(
    ann_index=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/hpo/nmslib_index.bin"",  # noqa
    tfidf_vectorizer=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/hpo/tfidf_vectorizer.joblib"",  # noqa
    tfidf_vectors=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/hpo/tfidf_vectors_sparse.npz"",  # noqa
    concept_aliases_list=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/hpo/concept_aliases.json"",  # noqa
)","Constant: HumanPhenotypeOntologyLinkerPaths = LinkerPaths(
    ann_index=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/hpo/nmslib_index.bin"",  # noqa
    tfidf_vectorizer=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/hpo/tfidf_vectorizer.joblib"",  # noqa
    tfidf_vectors=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/hpo/tfidf_vectors_sparse.npz"",  # noqa
    concept_aliases_list=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/hpo/concept_aliases.json"",  # noqa
)",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,"RxNormLinkerPaths = LinkerPaths(
    ann_index=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/rxnorm/nmslib_index.bin"",  # noqa
    tfidf_vectorizer=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/rxnorm/tfidf_vectorizer.joblib"",  # noqa
    tfidf_vectors=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/rxnorm/tfidf_vectors_sparse.npz"",  # noqa
    concept_aliases_list=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/rxnorm/concept_aliases.json"",  # noqa
)",constant,"RxNormLinkerPaths = LinkerPaths(
    ann_index=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/rxnorm/nmslib_index.bin"",  # noqa
    tfidf_vectorizer=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/rxnorm/tfidf_vectorizer.joblib"",  # noqa
    tfidf_vectors=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/rxnorm/tfidf_vectors_sparse.npz"",  # noqa
    concept_aliases_list=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/rxnorm/concept_aliases.json"",  # noqa
)",RxNormLinkerPaths,"LinkerPaths(
    ann_index=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/rxnorm/nmslib_index.bin"",  # noqa
    tfidf_vectorizer=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/rxnorm/tfidf_vectorizer.joblib"",  # noqa
    tfidf_vectors=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/rxnorm/tfidf_vectors_sparse.npz"",  # noqa
    concept_aliases_list=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/rxnorm/concept_aliases.json"",  # noqa
)","Constant: RxNormLinkerPaths = LinkerPaths(
    ann_index=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/rxnorm/nmslib_index.bin"",  # noqa
    tfidf_vectorizer=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/rxnorm/tfidf_vectorizer.joblib"",  # noqa
    tfidf_vectors=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/rxnorm/tfidf_vectors_sparse.npz"",  # noqa
    concept_aliases_list=""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/linkers/2023-04-23/rxnorm/concept_aliases.json"",  # noqa
)",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,"DEFAULT_PATHS: Dict[str, LinkerPaths] = {
    ""umls"": UmlsLinkerPaths,
    ""mesh"": MeshLinkerPaths,
    ""go"": GeneOntologyLinkerPaths,
    ""hpo"": HumanPhenotypeOntologyLinkerPaths,
    ""rxnorm"": RxNormLinkerPaths,
}",constant,"DEFAULT_PATHS: Dict[str, LinkerPaths] = {
    ""umls"": UmlsLinkerPaths,
    ""mesh"": MeshLinkerPaths,
    ""go"": GeneOntologyLinkerPaths,
    ""hpo"": HumanPhenotypeOntologyLinkerPaths,
    ""rxnorm"": RxNormLinkerPaths,
}",DEFAULT_PATHS,"{
    ""umls"": UmlsLinkerPaths,
    ""mesh"": MeshLinkerPaths,
    ""go"": GeneOntologyLinkerPaths,
    ""hpo"": HumanPhenotypeOntologyLinkerPaths,
    ""rxnorm"": RxNormLinkerPaths,
}","Constant: DEFAULT_PATHS: Dict[str, LinkerPaths] = {
    ""umls"": UmlsLinkerPaths,
    ""mesh"": MeshLinkerPaths,
    ""go"": GeneOntologyLinkerPaths,
    ""hpo"": HumanPhenotypeOntologyLinkerPaths,
    ""rxnorm"": RxNormLinkerPaths,
}",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,"DEFAULT_KNOWLEDGE_BASES: Dict[str, Type[KnowledgeBase]] = {
    ""umls"": UmlsKnowledgeBase,
    ""mesh"": Mesh,
    ""go"": GeneOntology,
    ""hpo"": HumanPhenotypeOntology,
    ""rxnorm"": RxNorm,
}",constant,"DEFAULT_KNOWLEDGE_BASES: Dict[str, Type[KnowledgeBase]] = {
    ""umls"": UmlsKnowledgeBase,
    ""mesh"": Mesh,
    ""go"": GeneOntology,
    ""hpo"": HumanPhenotypeOntology,
    ""rxnorm"": RxNorm,
}",DEFAULT_KNOWLEDGE_BASES,"{
    ""umls"": UmlsKnowledgeBase,
    ""mesh"": Mesh,
    ""go"": GeneOntology,
    ""hpo"": HumanPhenotypeOntology,
    ""rxnorm"": RxNorm,
}","Constant: DEFAULT_KNOWLEDGE_BASES: Dict[str, Type[KnowledgeBase]] = {
    ""umls"": UmlsKnowledgeBase,
    ""mesh"": Mesh,
    ""go"": GeneOntology,
    ""hpo"": HumanPhenotypeOntology,
    ""rxnorm"": RxNorm,
}",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,Optional from typing,import,,,,Import: Optional from typing,allenai,scispacy,v0.5.4,"from typing import Optional, List, Dict, Tuple, NamedTuple, Type",typing,Optional,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,List from typing,import,,,,Import: List from typing,allenai,scispacy,v0.5.4,"from typing import Optional, List, Dict, Tuple, NamedTuple, Type",typing,List,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,Dict from typing,import,,,,Import: Dict from typing,allenai,scispacy,v0.5.4,"from typing import Optional, List, Dict, Tuple, NamedTuple, Type",typing,Dict,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,Tuple from typing,import,,,,Import: Tuple from typing,allenai,scispacy,v0.5.4,"from typing import Optional, List, Dict, Tuple, NamedTuple, Type",typing,Tuple,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,NamedTuple from typing,import,,,,Import: NamedTuple from typing,allenai,scispacy,v0.5.4,"from typing import Optional, List, Dict, Tuple, NamedTuple, Type",typing,NamedTuple,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,Type from typing,import,,,,Import: Type from typing,allenai,scispacy,v0.5.4,"from typing import Optional, List, Dict, Tuple, NamedTuple, Type",typing,Type,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,json,import,,,,Import: json,allenai,scispacy,v0.5.4,import json,,json,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,datetime,import,,,,Import: datetime,allenai,scispacy,v0.5.4,import datetime,,datetime,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,defaultdict from collections,import,,,,Import: defaultdict from collections,allenai,scispacy,v0.5.4,from collections import defaultdict,collections,defaultdict,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,scipy,import,,,,Import: scipy,allenai,scispacy,v0.5.4,import scipy,,scipy,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,numpy,import,,,,Import: numpy,allenai,scispacy,v0.5.4,import numpy,,numpy,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,joblib,import,,,,Import: joblib,allenai,scispacy,v0.5.4,import joblib,,joblib,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,nmslib,import,,,,Import: nmslib,allenai,scispacy,v0.5.4,import nmslib,,nmslib,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,TfidfVectorizer from sklearn.feature_extraction.text,local_import,,,,Import: TfidfVectorizer from sklearn.feature_extraction.text,allenai,scispacy,v0.5.4,from sklearn.feature_extraction.text import TfidfVectorizer,sklearn.feature_extraction.text,TfidfVectorizer,,,sklearn.feature_extraction.text,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,FloatIndex from nmslib.dist,local_import,,,,Import: FloatIndex from nmslib.dist,allenai,scispacy,v0.5.4,from nmslib.dist import FloatIndex,nmslib.dist,FloatIndex,,,nmslib.dist,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,cached_path from scispacy.file_cache,local_import,,,,Import: cached_path from scispacy.file_cache,allenai,scispacy,v0.5.4,from scispacy.file_cache import cached_path,scispacy.file_cache,cached_path,,,scispacy.file_cache,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,KnowledgeBase from scispacy.linking_utils,local_import,,,,Import: KnowledgeBase from scispacy.linking_utils,allenai,scispacy,v0.5.4,"from scispacy.linking_utils import (
    KnowledgeBase,
    UmlsKnowledgeBase,
    Mesh,
    GeneOntology,
    RxNorm,
    HumanPhenotypeOntology,
)",scispacy.linking_utils,KnowledgeBase,,,scispacy.linking_utils,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,UmlsKnowledgeBase from scispacy.linking_utils,local_import,,,,Import: UmlsKnowledgeBase from scispacy.linking_utils,allenai,scispacy,v0.5.4,"from scispacy.linking_utils import (
    KnowledgeBase,
    UmlsKnowledgeBase,
    Mesh,
    GeneOntology,
    RxNorm,
    HumanPhenotypeOntology,
)",scispacy.linking_utils,UmlsKnowledgeBase,,,scispacy.linking_utils,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,Mesh from scispacy.linking_utils,local_import,,,,Import: Mesh from scispacy.linking_utils,allenai,scispacy,v0.5.4,"from scispacy.linking_utils import (
    KnowledgeBase,
    UmlsKnowledgeBase,
    Mesh,
    GeneOntology,
    RxNorm,
    HumanPhenotypeOntology,
)",scispacy.linking_utils,Mesh,,,scispacy.linking_utils,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,GeneOntology from scispacy.linking_utils,local_import,,,,Import: GeneOntology from scispacy.linking_utils,allenai,scispacy,v0.5.4,"from scispacy.linking_utils import (
    KnowledgeBase,
    UmlsKnowledgeBase,
    Mesh,
    GeneOntology,
    RxNorm,
    HumanPhenotypeOntology,
)",scispacy.linking_utils,GeneOntology,,,scispacy.linking_utils,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,RxNorm from scispacy.linking_utils,local_import,,,,Import: RxNorm from scispacy.linking_utils,allenai,scispacy,v0.5.4,"from scispacy.linking_utils import (
    KnowledgeBase,
    UmlsKnowledgeBase,
    Mesh,
    GeneOntology,
    RxNorm,
    HumanPhenotypeOntology,
)",scispacy.linking_utils,RxNorm,,,scispacy.linking_utils,,,,,,,,,,,,
allenai_scispacy_v0.5.4,candidate_generation.py,python,HumanPhenotypeOntology from scispacy.linking_utils,local_import,,,,Import: HumanPhenotypeOntology from scispacy.linking_utils,allenai,scispacy,v0.5.4,"from scispacy.linking_utils import (
    KnowledgeBase,
    UmlsKnowledgeBase,
    Mesh,
    GeneOntology,
    RxNorm,
    HumanPhenotypeOntology,
)",scispacy.linking_utils,HumanPhenotypeOntology,,,scispacy.linking_utils,,,,,,,,,,,,
,candidate_generation.py,python,,,,,,File: scispacy,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,candidate_generation.py,python,,,,,,Directory: scispacy\candidate_generation.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,consts.py,python,"ABBREVIATIONS: List[str] = [
    ""sec."",
    ""secs."",
    ""Sec."",
    ""Secs."",
    ""fig."",
    ""figs."",
    ""Fig."",
    ""Figs."",
    ""eq."",
    ""eqs."",
    ""Eq."",
    ""Eqs."",
    ""no."",
    ""nos."",
    ""No."",
    ""Nos."",
    ""al."",
    ""gen."",
    ""sp."",
    ""nov."",
]",constant,"ABBREVIATIONS: List[str] = [
    ""sec."",
    ""secs."",
    ""Sec."",
    ""Secs."",
    ""fig."",
    ""figs."",
    ""Fig."",
    ""Figs."",
    ""eq."",
    ""eqs."",
    ""Eq."",
    ""Eqs."",
    ""no."",
    ""nos."",
    ""No."",
    ""Nos."",
    ""al."",
    ""gen."",
    ""sp."",
    ""nov."",
]",ABBREVIATIONS,"[
    ""sec."",
    ""secs."",
    ""Sec."",
    ""Secs."",
    ""fig."",
    ""figs."",
    ""Fig."",
    ""Figs."",
    ""eq."",
    ""eqs."",
    ""Eq."",
    ""Eqs."",
    ""no."",
    ""nos."",
    ""No."",
    ""Nos."",
    ""al."",
    ""gen."",
    ""sp."",
    ""nov."",
]","Constant: ABBREVIATIONS: List[str] = [
    ""sec."",
    ""secs."",
    ""Sec."",
    ""Secs."",
    ""fig."",
    ""figs."",
    ""Fig."",
    ""Figs."",
    ""eq."",
    ""eqs."",
    ""Eq."",
    ""Eqs."",
    ""no."",
    ""nos."",
    ""No."",
    ""Nos."",
    ""al."",
    ""gen."",
    ""sp."",
    ""nov."",
]",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,consts.py,python,List from typing,import,,,,Import: List from typing,allenai,scispacy,v0.5.4,from typing import List,typing,List,,,,,,,,,,,,,,,
,consts.py,python,,,,,,File: scispacy,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,consts.py,python,,,,,,Directory: scispacy\consts.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,custom_sentence_segmenter.py,python,List from typing,import,,,,Import: List from typing,allenai,scispacy,v0.5.4,from typing import List,typing,List,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,custom_sentence_segmenter.py,python,pysbd,import,,,,Import: pysbd,allenai,scispacy,v0.5.4,import pysbd,,pysbd,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,custom_sentence_segmenter.py,python,Doc from spacy.tokens,local_import,,,,Import: Doc from spacy.tokens,allenai,scispacy,v0.5.4,from spacy.tokens import Doc,spacy.tokens,Doc,,,spacy.tokens,,,,,,,,,,,,
allenai_scispacy_v0.5.4,custom_sentence_segmenter.py,python,Language from spacy.language,local_import,,,,Import: Language from spacy.language,allenai,scispacy,v0.5.4,from spacy.language import Language,spacy.language,Language,,,spacy.language,,,,,,,,,,,,
allenai_scispacy_v0.5.4,custom_sentence_segmenter.py,python,TextSpan from pysbd.utils,local_import,,,,Import: TextSpan from pysbd.utils,allenai,scispacy,v0.5.4,from pysbd.utils import TextSpan,pysbd.utils,TextSpan,,,pysbd.utils,,,,,,,,,,,,
allenai_scispacy_v0.5.4,custom_sentence_segmenter.py,python,ABBREVIATIONS from scispacy.consts,local_import,,,,Import: ABBREVIATIONS from scispacy.consts,allenai,scispacy,v0.5.4,from scispacy.consts import ABBREVIATIONS,scispacy.consts,ABBREVIATIONS,,,scispacy.consts,,,,,,,,,,,,
,custom_sentence_segmenter.py,python,,,,,,File: scispacy,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,custom_sentence_segmenter.py,python,,,,,,Directory: scispacy\custom_sentence_segmenter.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,custom_tokenizer.py,python,remove_new_lines(text: str) -> str,function,,,,Function: remove_new_lines(text: str) -> str,allenai,scispacy,v0.5.4,,,,remove_new_lines,(text: str),,,,,,,,str,,,,,
allenai_scispacy_v0.5.4,custom_tokenizer.py,python,combined_rule_prefixes() -> List[str],function,,,,Function: combined_rule_prefixes() -> List[str],allenai,scispacy,v0.5.4,,,,combined_rule_prefixes,(),,,,,,,,List[str],,,,,
allenai_scispacy_v0.5.4,custom_tokenizer.py,python,combined_rule_tokenizer(nlp: Language) -> Tokenizer,function,,,,Function: combined_rule_tokenizer(nlp: Language) -> Tokenizer,allenai,scispacy,v0.5.4,,,,combined_rule_tokenizer,(nlp: Language),,,,,,,,Tokenizer,,,,,
allenai_scispacy_v0.5.4,custom_tokenizer.py,python,List from typing,import,,,,Import: List from typing,allenai,scispacy,v0.5.4,from typing import List,typing,List,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,custom_tokenizer.py,python,char_classes from spacy.lang,local_import,,,,Import: char_classes from spacy.lang,allenai,scispacy,v0.5.4,from spacy.lang import char_classes,spacy.lang,char_classes,,,spacy.lang,,,,,,,,,,,,
allenai_scispacy_v0.5.4,custom_tokenizer.py,python,ORTH from spacy.symbols,local_import,,,,Import: ORTH from spacy.symbols,allenai,scispacy,v0.5.4,from spacy.symbols import ORTH,spacy.symbols,ORTH,,,spacy.symbols,,,,,,,,,,,,
allenai_scispacy_v0.5.4,custom_tokenizer.py,python,Tokenizer from spacy.tokenizer,local_import,,,,Import: Tokenizer from spacy.tokenizer,allenai,scispacy,v0.5.4,from spacy.tokenizer import Tokenizer,spacy.tokenizer,Tokenizer,,,spacy.tokenizer,,,,,,,,,,,,
allenai_scispacy_v0.5.4,custom_tokenizer.py,python,compile_prefix_regex from spacy.util,local_import,,,,Import: compile_prefix_regex from spacy.util,allenai,scispacy,v0.5.4,"from spacy.util import compile_prefix_regex, compile_infix_regex, compile_suffix_regex",spacy.util,compile_prefix_regex,,,spacy.util,,,,,,,,,,,,
allenai_scispacy_v0.5.4,custom_tokenizer.py,python,compile_infix_regex from spacy.util,local_import,,,,Import: compile_infix_regex from spacy.util,allenai,scispacy,v0.5.4,"from spacy.util import compile_prefix_regex, compile_infix_regex, compile_suffix_regex",spacy.util,compile_infix_regex,,,spacy.util,,,,,,,,,,,,
allenai_scispacy_v0.5.4,custom_tokenizer.py,python,compile_suffix_regex from spacy.util,local_import,,,,Import: compile_suffix_regex from spacy.util,allenai,scispacy,v0.5.4,"from spacy.util import compile_prefix_regex, compile_infix_regex, compile_suffix_regex",spacy.util,compile_suffix_regex,,,spacy.util,,,,,,,,,,,,
allenai_scispacy_v0.5.4,custom_tokenizer.py,python,Language from spacy.language,local_import,,,,Import: Language from spacy.language,allenai,scispacy,v0.5.4,from spacy.language import Language,spacy.language,Language,,,spacy.language,,,,,,,,,,,,
allenai_scispacy_v0.5.4,custom_tokenizer.py,python,ABBREVIATIONS from scispacy.consts,local_import,,,,Import: ABBREVIATIONS from scispacy.consts,allenai,scispacy,v0.5.4,from scispacy.consts import ABBREVIATIONS,scispacy.consts,ABBREVIATIONS,,,scispacy.consts,,,,,,,,,,,,
,custom_tokenizer.py,python,,,,,,File: scispacy,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,custom_tokenizer.py,python,,,,,,Directory: scispacy\custom_tokenizer.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,data_util.py,python,MedMentionEntity.start: int,class_field,,,,Class field: MedMentionEntity.start: int,allenai,scispacy,v0.5.4,,,,,,,MedMentionEntity,,,start: int,,,,,start,,,
allenai_scispacy_v0.5.4,data_util.py,python,MedMentionEntity.end: int,class_field,,,,Class field: MedMentionEntity.end: int,allenai,scispacy,v0.5.4,,,,,,,MedMentionEntity,,,end: int,,,,,end,,,
allenai_scispacy_v0.5.4,data_util.py,python,MedMentionEntity.mention_text: str,class_field,,,,Class field: MedMentionEntity.mention_text: str,allenai,scispacy,v0.5.4,,,,,,,MedMentionEntity,,,mention_text: str,,,,,mention_text,,,
allenai_scispacy_v0.5.4,data_util.py,python,MedMentionEntity.mention_type: str,class_field,,,,Class field: MedMentionEntity.mention_type: str,allenai,scispacy,v0.5.4,,,,,,,MedMentionEntity,,,mention_type: str,,,,,mention_type,,,
allenai_scispacy_v0.5.4,data_util.py,python,MedMentionEntity.umls_id: str,class_field,,,,Class field: MedMentionEntity.umls_id: str,allenai,scispacy,v0.5.4,,,,,,,MedMentionEntity,,,umls_id: str,,,,,umls_id,,,
allenai_scispacy_v0.5.4,data_util.py,python,MedMentionExample.title: str,class_field,,,,Class field: MedMentionExample.title: str,allenai,scispacy,v0.5.4,,,,,,,MedMentionExample,,,title: str,,,,,title,,,
allenai_scispacy_v0.5.4,data_util.py,python,MedMentionExample.abstract: str,class_field,,,,Class field: MedMentionExample.abstract: str,allenai,scispacy,v0.5.4,,,,,,,MedMentionExample,,,abstract: str,,,,,abstract,,,
allenai_scispacy_v0.5.4,data_util.py,python,MedMentionExample.text: str,class_field,,,,Class field: MedMentionExample.text: str,allenai,scispacy,v0.5.4,,,,,,,MedMentionExample,,,text: str,,,,,text,,,
allenai_scispacy_v0.5.4,data_util.py,python,MedMentionExample.pubmed_id: str,class_field,,,,Class field: MedMentionExample.pubmed_id: str,allenai,scispacy,v0.5.4,,,,,,,MedMentionExample,,,pubmed_id: str,,,,,pubmed_id,,,
allenai_scispacy_v0.5.4,data_util.py,python,MedMentionExample.entities: List[MedMentionEntity],class_field,,,,Class field: MedMentionExample.entities: List[MedMentionEntity],allenai,scispacy,v0.5.4,,,,,,,MedMentionExample,,,entities: List[MedMentionEntity],,,,,entities,,,
allenai_scispacy_v0.5.4,data_util.py,python,MedMentionEntity(NamedTuple),class,,,,Class: MedMentionEntity(NamedTuple),allenai,scispacy,v0.5.4,,,,,,,MedMentionEntity,,,,,,,,,(NamedTuple),,
allenai_scispacy_v0.5.4,data_util.py,python,MedMentionExample(NamedTuple),class,,,,Class: MedMentionExample(NamedTuple),allenai,scispacy,v0.5.4,,,,,,,MedMentionExample,,,,,,,,,(NamedTuple),,
allenai_scispacy_v0.5.4,data_util.py,python,process_example(lines: List[str]) -> MedMentionExample,function,,,,Function: process_example(lines: List[str]) -> MedMentionExample,allenai,scispacy,v0.5.4,,,,process_example,(lines: List[str]),,,,,,,,MedMentionExample,,,,,
allenai_scispacy_v0.5.4,data_util.py,python,med_mentions_example_iterator(filename: str) -> Iterator[MedMentionExample],function,,,,Function: med_mentions_example_iterator(filename: str) -> Iterator[MedMentionExample],allenai,scispacy,v0.5.4,,,,med_mentions_example_iterator,(filename: str),,,,,,,,Iterator[MedMentionExample],,,,,
allenai_scispacy_v0.5.4,data_util.py,python,"select_subset_of_overlapping_chain(
    chain: List[Tuple[int, int, str]]
) -> List[Tuple[int, int, str]]",function,,,,"Function: select_subset_of_overlapping_chain(
    chain: List[Tuple[int, int, str]]
) -> List[Tuple[int, int, str]]",allenai,scispacy,v0.5.4,,,,select_subset_of_overlapping_chain,"(
    chain: List[Tuple[int, int, str]]
)",,,,,,,,"List[Tuple[int, int, str]]",,,,,
allenai_scispacy_v0.5.4,data_util.py,python,"remove_overlapping_entities(
    sorted_spacy_format_entities: List[Tuple[int, int, str]]
) -> List[Tuple[int, int, str]]",function,,,,"Function: remove_overlapping_entities(
    sorted_spacy_format_entities: List[Tuple[int, int, str]]
) -> List[Tuple[int, int, str]]",allenai,scispacy,v0.5.4,,,,remove_overlapping_entities,"(
    sorted_spacy_format_entities: List[Tuple[int, int, str]]
)",,,,,,,,"List[Tuple[int, int, str]]",,,,,
allenai_scispacy_v0.5.4,data_util.py,python,"read_full_med_mentions(
    directory_path: str,
    label_mapping: Optional[Dict[str, str]] = None,
    span_only: bool = False,
    spacy_format: bool = True,
    use_umls_ids: bool = False,
)",function,,,,"Function: read_full_med_mentions(
    directory_path: str,
    label_mapping: Optional[Dict[str, str]] = None,
    span_only: bool = False,
    spacy_format: bool = True,
    use_umls_ids: bool = False,
)",allenai,scispacy,v0.5.4,,,,read_full_med_mentions,"(
    directory_path: str,
    label_mapping: Optional[Dict[str, str]] = None,
    span_only: bool = False,
    spacy_format: bool = True,
    use_umls_ids: bool = False,
)",,,,,,,,,,,,,
allenai_scispacy_v0.5.4,data_util.py,python,"_handle_sentence(examples: List[Tuple[str, str]]) -> SpacyNerExample",function,,,,"Function: _handle_sentence(examples: List[Tuple[str, str]]) -> SpacyNerExample",allenai,scispacy,v0.5.4,,,,_handle_sentence,"(examples: List[Tuple[str, str]])",,,,,,,,SpacyNerExample,,,,,
allenai_scispacy_v0.5.4,data_util.py,python,read_ner_from_tsv(filename: str) -> List[SpacyNerExample],function,,,,Function: read_ner_from_tsv(filename: str) -> List[SpacyNerExample],allenai,scispacy,v0.5.4,,,,read_ner_from_tsv,(filename: str),,,,,,,,List[SpacyNerExample],,,,,
allenai_scispacy_v0.5.4,data_util.py,python,"SpacyNerExample = Tuple[str, Dict[str, List[Tuple[int, int, str]]]]",constant,"SpacyNerExample = Tuple[str, Dict[str, List[Tuple[int, int, str]]]]",SpacyNerExample,"Tuple[str, Dict[str, List[Tuple[int, int, str]]]]","Constant: SpacyNerExample = Tuple[str, Dict[str, List[Tuple[int, int, str]]]]",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,data_util.py,python,Optional from typing,import,,,,Import: Optional from typing,allenai,scispacy,v0.5.4,"from typing import Optional, NamedTuple, List, Iterator, Dict, Tuple",typing,Optional,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,data_util.py,python,NamedTuple from typing,import,,,,Import: NamedTuple from typing,allenai,scispacy,v0.5.4,"from typing import Optional, NamedTuple, List, Iterator, Dict, Tuple",typing,NamedTuple,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,data_util.py,python,List from typing,import,,,,Import: List from typing,allenai,scispacy,v0.5.4,"from typing import Optional, NamedTuple, List, Iterator, Dict, Tuple",typing,List,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,data_util.py,python,Iterator from typing,import,,,,Import: Iterator from typing,allenai,scispacy,v0.5.4,"from typing import Optional, NamedTuple, List, Iterator, Dict, Tuple",typing,Iterator,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,data_util.py,python,Dict from typing,import,,,,Import: Dict from typing,allenai,scispacy,v0.5.4,"from typing import Optional, NamedTuple, List, Iterator, Dict, Tuple",typing,Dict,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,data_util.py,python,Tuple from typing,import,,,,Import: Tuple from typing,allenai,scispacy,v0.5.4,"from typing import Optional, NamedTuple, List, Iterator, Dict, Tuple",typing,Tuple,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,data_util.py,python,tarfile,import,,,,Import: tarfile,allenai,scispacy,v0.5.4,import tarfile,,tarfile,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,data_util.py,python,atexit,import,,,,Import: atexit,allenai,scispacy,v0.5.4,import atexit,,atexit,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,data_util.py,python,os,import,,,,Import: os,allenai,scispacy,v0.5.4,import os,,os,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,data_util.py,python,shutil,import,,,,Import: shutil,allenai,scispacy,v0.5.4,import shutil,,shutil,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,data_util.py,python,tempfile,import,,,,Import: tempfile,allenai,scispacy,v0.5.4,import tempfile,,tempfile,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,data_util.py,python,cached_path from scispacy.file_cache,local_import,,,,Import: cached_path from scispacy.file_cache,allenai,scispacy,v0.5.4,from scispacy.file_cache import cached_path,scispacy.file_cache,cached_path,,,scispacy.file_cache,,,,,,,,,,,,
,data_util.py,python,,,,,,File: scispacy,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,data_util.py,python,,,,,,Directory: scispacy\data_util.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,file_cache.py,python,"cached_path(
    url_or_filename: Union[str, Path], cache_dir: Optional[str] = None
) -> str",function,,,,"Function: cached_path(
    url_or_filename: Union[str, Path], cache_dir: Optional[str] = None
) -> str",allenai,scispacy,v0.5.4,,,,cached_path,"(
    url_or_filename: Union[str, Path], cache_dir: Optional[str] = None
)",,,,,,,,str,,,,,
allenai_scispacy_v0.5.4,file_cache.py,python,"url_to_filename(url: str, etag: Optional[str] = None) -> str",function,,,,"Function: url_to_filename(url: str, etag: Optional[str] = None) -> str",allenai,scispacy,v0.5.4,,,,url_to_filename,"(url: str, etag: Optional[str] = None)",,,,,,,,str,,,,,
allenai_scispacy_v0.5.4,file_cache.py,python,"filename_to_url(filename: str, cache_dir: Optional[str] = None) -> Tuple[str, str]",function,,,,"Function: filename_to_url(filename: str, cache_dir: Optional[str] = None) -> Tuple[str, str]",allenai,scispacy,v0.5.4,,,,filename_to_url,"(filename: str, cache_dir: Optional[str] = None)",,,,,,,,"Tuple[str, str]",,,,,
allenai_scispacy_v0.5.4,file_cache.py,python,"http_get(url: str, temp_file: IO) -> None",function,,,,"Function: http_get(url: str, temp_file: IO) -> None",allenai,scispacy,v0.5.4,,,,http_get,"(url: str, temp_file: IO)",,,,,,,,,,,,,
allenai_scispacy_v0.5.4,file_cache.py,python,"get_from_cache(url: str, cache_dir: Optional[str] = None) -> str",function,,,,"Function: get_from_cache(url: str, cache_dir: Optional[str] = None) -> str",allenai,scispacy,v0.5.4,,,,get_from_cache,"(url: str, cache_dir: Optional[str] = None)",,,,,,,,str,,,,,
allenai_scispacy_v0.5.4,file_cache.py,python,"CACHE_ROOT = Path(os.getenv(""SCISPACY_CACHE"", str(Path.home() / "".scispacy"")))",constant,"CACHE_ROOT = Path(os.getenv(""SCISPACY_CACHE"", str(Path.home() / "".scispacy"")))",CACHE_ROOT,"Path(os.getenv(""SCISPACY_CACHE"", str(Path.home() / "".scispacy"")))","Constant: CACHE_ROOT = Path(os.getenv(""SCISPACY_CACHE"", str(Path.home() / "".scispacy"")))",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,file_cache.py,python,"DATASET_CACHE = str(CACHE_ROOT / ""datasets"")",constant,"DATASET_CACHE = str(CACHE_ROOT / ""datasets"")",DATASET_CACHE,"str(CACHE_ROOT / ""datasets"")","Constant: DATASET_CACHE = str(CACHE_ROOT / ""datasets"")",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,file_cache.py,python,os,import,,,,Import: os,allenai,scispacy,v0.5.4,import os,,os,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,file_cache.py,python,shutil,import,,,,Import: shutil,allenai,scispacy,v0.5.4,import shutil,,shutil,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,file_cache.py,python,tempfile,import,,,,Import: tempfile,allenai,scispacy,v0.5.4,import tempfile,,tempfile,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,file_cache.py,python,json,import,,,,Import: json,allenai,scispacy,v0.5.4,import json,,json,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,file_cache.py,python,Path from pathlib,import,,,,Import: Path from pathlib,allenai,scispacy,v0.5.4,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,file_cache.py,python,Optional from typing,import,,,,Import: Optional from typing,allenai,scispacy,v0.5.4,"from typing import Optional, Tuple, Union, IO",typing,Optional,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,file_cache.py,python,Tuple from typing,import,,,,Import: Tuple from typing,allenai,scispacy,v0.5.4,"from typing import Optional, Tuple, Union, IO",typing,Tuple,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,file_cache.py,python,Union from typing,import,,,,Import: Union from typing,allenai,scispacy,v0.5.4,"from typing import Optional, Tuple, Union, IO",typing,Union,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,file_cache.py,python,IO from typing,import,,,,Import: IO from typing,allenai,scispacy,v0.5.4,"from typing import Optional, Tuple, Union, IO",typing,IO,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,file_cache.py,python,sha256 from hashlib,import,,,,Import: sha256 from hashlib,allenai,scispacy,v0.5.4,from hashlib import sha256,hashlib,sha256,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,file_cache.py,python,requests,import,,,,Import: requests,allenai,scispacy,v0.5.4,import requests,,requests,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,file_cache.py,python,tqdm from tqdm,import,,,,Import: tqdm from tqdm,allenai,scispacy,v0.5.4,from tqdm import tqdm,tqdm,tqdm,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,file_cache.py,python,urlparse from urllib.parse,local_import,,,,Import: urlparse from urllib.parse,allenai,scispacy,v0.5.4,from urllib.parse import urlparse,urllib.parse,urlparse,,,urllib.parse,,,,,,,,,,,,
,file_cache.py,python,,,,,,File: scispacy,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,file_cache.py,python,,,,,,Directory: scispacy\file_cache.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,hearst_patterns.py,python,"hypernym = {""POS"": {""IN"": [""NOUN"", ""PROPN"", ""PRON""]}}",constant,"hypernym = {""POS"": {""IN"": [""NOUN"", ""PROPN"", ""PRON""]}}",hypernym,"{""POS"": {""IN"": [""NOUN"", ""PROPN"", ""PRON""]}}","Constant: hypernym = {""POS"": {""IN"": [""NOUN"", ""PROPN"", ""PRON""]}}",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,hearst_patterns.py,python,"hyponym = {""POS"": {""IN"": [""NOUN"", ""PROPN"", ""PRON""]}}",constant,"hyponym = {""POS"": {""IN"": [""NOUN"", ""PROPN"", ""PRON""]}}",hyponym,"{""POS"": {""IN"": [""NOUN"", ""PROPN"", ""PRON""]}}","Constant: hyponym = {""POS"": {""IN"": [""NOUN"", ""PROPN"", ""PRON""]}}",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,hearst_patterns.py,python,"punct = {""IS_PUNCT"": True, ""OP"": ""?""}",constant,"punct = {""IS_PUNCT"": True, ""OP"": ""?""}",punct,"{""IS_PUNCT"": True, ""OP"": ""?""}","Constant: punct = {""IS_PUNCT"": True, ""OP"": ""?""}",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,hearst_patterns.py,python,"det = {""ORTH"": ""*"", ""OP"": ""*""}",constant,"det = {""ORTH"": ""*"", ""OP"": ""*""}",det,"{""ORTH"": ""*"", ""OP"": ""*""}","Constant: det = {""ORTH"": ""*"", ""OP"": ""*""}",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,hearst_patterns.py,python,"BASE_PATTERNS: List[Dict[str, Any]] = [
    # '(NP_\\w+ (, )?such as (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""such_as"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""such""}, {""LEMMA"": ""as""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?include (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""include"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""include""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?especially (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""especially"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""especially""}, det, hyponym],
        ""position"": ""first"",
    },
    # '((NP_\\w+ ?(, )?)+(and |or )?other NP_\\w+)', 'last'
    {
        ""label"": ""other"",
        ""pattern"": [
            hyponym,
            punct,
            {""LEMMA"": {""IN"": [""and"", ""or""]}},
            {""LEMMA"": {""IN"": [""other"", ""oth""]}},
            hypernym,
        ],
        ""position"": ""last"",
    },
]",constant,"BASE_PATTERNS: List[Dict[str, Any]] = [
    # '(NP_\\w+ (, )?such as (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""such_as"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""such""}, {""LEMMA"": ""as""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?include (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""include"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""include""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?especially (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""especially"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""especially""}, det, hyponym],
        ""position"": ""first"",
    },
    # '((NP_\\w+ ?(, )?)+(and |or )?other NP_\\w+)', 'last'
    {
        ""label"": ""other"",
        ""pattern"": [
            hyponym,
            punct,
            {""LEMMA"": {""IN"": [""and"", ""or""]}},
            {""LEMMA"": {""IN"": [""other"", ""oth""]}},
            hypernym,
        ],
        ""position"": ""last"",
    },
]",BASE_PATTERNS,"[
    # '(NP_\\w+ (, )?such as (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""such_as"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""such""}, {""LEMMA"": ""as""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?include (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""include"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""include""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?especially (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""especially"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""especially""}, det, hyponym],
        ""position"": ""first"",
    },
    # '((NP_\\w+ ?(, )?)+(and |or )?other NP_\\w+)', 'last'
    {
        ""label"": ""other"",
        ""pattern"": [
            hyponym,
            punct,
            {""LEMMA"": {""IN"": [""and"", ""or""]}},
            {""LEMMA"": {""IN"": [""other"", ""oth""]}},
            hypernym,
        ],
        ""position"": ""last"",
    },
]","Constant: BASE_PATTERNS: List[Dict[str, Any]] = [
    # '(NP_\\w+ (, )?such as (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""such_as"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""such""}, {""LEMMA"": ""as""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?include (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""include"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""include""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?especially (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""especially"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""especially""}, det, hyponym],
        ""position"": ""first"",
    },
    # '((NP_\\w+ ?(, )?)+(and |or )?other NP_\\w+)', 'last'
    {
        ""label"": ""other"",
        ""pattern"": [
            hyponym,
            punct,
            {""LEMMA"": {""IN"": [""and"", ""or""]}},
            {""LEMMA"": {""IN"": [""other"", ""oth""]}},
            hypernym,
        ],
        ""position"": ""last"",
    },
]",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,hearst_patterns.py,python,"EXTENDED_PATTERNS = [
    # '(NP_\\w+ (, )?which may include (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""which_may_include"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""may""},
            {""LEMMA"": ""include""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?which be similar to (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""which_be_similar_to"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""be""},
            {""LEMMA"": ""similar""},
            {""LEMMA"": ""to""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?example of this be (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""example_of_this_be"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""example""},
            {""LEMMA"": ""of""},
            {""LEMMA"": ""this""},
            {""LEMMA"": ""be""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?type (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""type"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""type""}, punct, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?mainly (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""mainly"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""mainly""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?mostly (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""mostly"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""mostly""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?notably (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""notably"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""notably""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?particularly (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""particularly"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""particularly""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?principally (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""principally"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""principally""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?in particular (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""in_particular"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""in""},
            {""LEMMA"": ""particular""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?except (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""except"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""except""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?other than (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""other_than"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": {""IN"": [""other"", ""oth""]}},
            {""LEMMA"": ""than""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?e.g. (, )?(NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""eg"",
        ""pattern"": [hypernym, punct, {""LEMMA"": {""IN"": [""e.g."", ""eg""]}}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?i.e. (, )?(NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""ie"",
        ""pattern"": [hypernym, punct, {""LEMMA"": {""IN"": [""i.e."", ""ie""]}}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?for example (, )?(NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""for_example"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""for""},
            {""LEMMA"": ""example""},
            punct,
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # 'example of (NP_\\w+ (, )?be (NP_\\w+ ? '(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""example_of_be"",
        ""pattern"": [
            {""LEMMA"": ""example""},
            {""LEMMA"": ""of""},
            hypernym,
            punct,
            {""LEMMA"": ""be""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?like (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""like"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""like""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # 'such (NP_\\w+ (, )?as (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""such_NOUN_as"",
        ""pattern"": [
            {""LEMMA"": ""such""},
            hypernym,
            punct,
            {""LEMMA"": ""as""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?whether (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""whether"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""whether""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?compare to (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""compare_to"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""compare""},
            {""LEMMA"": ""to""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?among -PRON- (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""among_-PRON-"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""among""},
            {""LEMMA"": ""-PRON-""},
            det,
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )? (NP_\\w+ ? (, )?(and |or )?)+ for instance)', 'first'
    {
        ""label"": ""for_instance"",
        ""pattern"": [
            hypernym,
            punct,
            det,
            hyponym,
            {""LEMMA"": ""for""},
            {""LEMMA"": ""instance""},
        ],
        ""position"": ""first"",
    },
    # '((NP_\\w+ ?(, )?)+(and |or )?any other NP_\\w+)', 'last'
    {
        ""label"": ""and-or_any_other"",
        ""pattern"": [
            det,
            hyponym,
            punct,
            {""DEP"": ""cc""},
            {""LEMMA"": ""any""},
            {""LEMMA"": {""IN"": [""other"", ""oth""]}},
            hypernym,
        ],
        ""position"": ""last"",
    },
    # '((NP_\\w+ ?(, )?)+(and |or )?some other NP_\\w+)', 'last'
    {
        ""label"": ""some_other"",
        ""pattern"": [
            det,
            hyponym,
            punct,
            {""DEP"": ""cc"", ""OP"": ""?""},
            {""LEMMA"": ""some""},
            {""LEMMA"": {""IN"": [""other"", ""oth""]}},
            hypernym,
        ],
        ""position"": ""last"",
    },
    # '((NP_\\w+ ?(, )?)+(and |or )?be a NP_\\w+)', 'last'
    {
        ""label"": ""be_a"",
        ""pattern"": [
            det,
            hyponym,
            punct,
            {""LEMMA"": ""be""},
            {""LEMMA"": ""a""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""like_other"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?like other NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""like""},
            {""LEMMA"": {""IN"": [""other"", ""oth""]}},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""one_of_the"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?one of the NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""one""},
            {""LEMMA"": ""of""},
            {""LEMMA"": ""the""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""one_of_these"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?one of these NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""one""},
            {""LEMMA"": ""of""},
            {""LEMMA"": ""these""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""one_of_those"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?one of those NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""DEP"": ""cc"", ""OP"": ""?""},
            {""LEMMA"": ""one""},
            {""LEMMA"": ""of""},
            {""LEMMA"": ""those""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""be_example_of"",
        ""pattern"": [
            # '((NP_\\w+ ?(, )?)+(and |or )?be example of NP_\\w+)',
            # added optional ""an"" to spaCy pattern for singular vs. plural
            # 'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""be""},
            {""LEMMA"": ""an"", ""OP"": ""?""},
            {""LEMMA"": ""example""},
            {""LEMMA"": ""of""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""which_be_call"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?which be call NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""be""},
            {""LEMMA"": ""call""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    #
    {
        ""label"": ""which_be_name"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?which be name NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""be""},
            {""LEMMA"": ""name""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""a_kind_of"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and|or)? a kind of NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""a""},
            {""LEMMA"": ""kind""},
            {""LEMMA"": ""of""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    #                     '((NP_\\w+ ?(, )?)+(and|or)? kind of NP_\\w+)', - combined with above
    #                     'last'
    {
        ""label"": ""form_of"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and|or)? form of NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""a"", ""OP"": ""?""},
            {""LEMMA"": ""form""},
            {""LEMMA"": ""of""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""which_look_like"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?which look like NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""look""},
            {""LEMMA"": ""like""},
            hyponym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""which_sound_like"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?which sound like NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""sound""},
            {""LEMMA"": ""like""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""type"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )? NP_\\w+ type)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""type""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""compare_with"",
        ""pattern"": [
            #                     '(compare (NP_\\w+ ?(, )?)+(and |or )?with NP_\\w+)',
            #                     'last'
            {""LEMMA"": ""compare""},
            det,
            hyponym,
            punct,
            {""LEMMA"": ""with""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    #             {""label"" : ""as"", ""pattern"" : [
    # #                     '((NP_\\w+ ?(, )?)+(and |or )?as NP_\\w+)',
    # #                     'last'
    #                 hyponym, punct, {""LEMMA"" : ""as""}, hypernym
    #             ], ""position"" : ""last""},
    {
        ""label"": ""sort_of"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and|or)? sort of NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""sort""},
            {""LEMMA"": ""of""},
            hypernym,
        ],
        ""position"": ""last"",
    },
]",constant,"EXTENDED_PATTERNS = [
    # '(NP_\\w+ (, )?which may include (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""which_may_include"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""may""},
            {""LEMMA"": ""include""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?which be similar to (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""which_be_similar_to"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""be""},
            {""LEMMA"": ""similar""},
            {""LEMMA"": ""to""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?example of this be (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""example_of_this_be"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""example""},
            {""LEMMA"": ""of""},
            {""LEMMA"": ""this""},
            {""LEMMA"": ""be""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?type (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""type"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""type""}, punct, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?mainly (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""mainly"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""mainly""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?mostly (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""mostly"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""mostly""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?notably (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""notably"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""notably""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?particularly (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""particularly"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""particularly""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?principally (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""principally"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""principally""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?in particular (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""in_particular"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""in""},
            {""LEMMA"": ""particular""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?except (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""except"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""except""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?other than (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""other_than"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": {""IN"": [""other"", ""oth""]}},
            {""LEMMA"": ""than""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?e.g. (, )?(NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""eg"",
        ""pattern"": [hypernym, punct, {""LEMMA"": {""IN"": [""e.g."", ""eg""]}}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?i.e. (, )?(NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""ie"",
        ""pattern"": [hypernym, punct, {""LEMMA"": {""IN"": [""i.e."", ""ie""]}}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?for example (, )?(NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""for_example"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""for""},
            {""LEMMA"": ""example""},
            punct,
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # 'example of (NP_\\w+ (, )?be (NP_\\w+ ? '(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""example_of_be"",
        ""pattern"": [
            {""LEMMA"": ""example""},
            {""LEMMA"": ""of""},
            hypernym,
            punct,
            {""LEMMA"": ""be""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?like (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""like"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""like""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # 'such (NP_\\w+ (, )?as (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""such_NOUN_as"",
        ""pattern"": [
            {""LEMMA"": ""such""},
            hypernym,
            punct,
            {""LEMMA"": ""as""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?whether (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""whether"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""whether""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?compare to (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""compare_to"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""compare""},
            {""LEMMA"": ""to""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?among -PRON- (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""among_-PRON-"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""among""},
            {""LEMMA"": ""-PRON-""},
            det,
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )? (NP_\\w+ ? (, )?(and |or )?)+ for instance)', 'first'
    {
        ""label"": ""for_instance"",
        ""pattern"": [
            hypernym,
            punct,
            det,
            hyponym,
            {""LEMMA"": ""for""},
            {""LEMMA"": ""instance""},
        ],
        ""position"": ""first"",
    },
    # '((NP_\\w+ ?(, )?)+(and |or )?any other NP_\\w+)', 'last'
    {
        ""label"": ""and-or_any_other"",
        ""pattern"": [
            det,
            hyponym,
            punct,
            {""DEP"": ""cc""},
            {""LEMMA"": ""any""},
            {""LEMMA"": {""IN"": [""other"", ""oth""]}},
            hypernym,
        ],
        ""position"": ""last"",
    },
    # '((NP_\\w+ ?(, )?)+(and |or )?some other NP_\\w+)', 'last'
    {
        ""label"": ""some_other"",
        ""pattern"": [
            det,
            hyponym,
            punct,
            {""DEP"": ""cc"", ""OP"": ""?""},
            {""LEMMA"": ""some""},
            {""LEMMA"": {""IN"": [""other"", ""oth""]}},
            hypernym,
        ],
        ""position"": ""last"",
    },
    # '((NP_\\w+ ?(, )?)+(and |or )?be a NP_\\w+)', 'last'
    {
        ""label"": ""be_a"",
        ""pattern"": [
            det,
            hyponym,
            punct,
            {""LEMMA"": ""be""},
            {""LEMMA"": ""a""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""like_other"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?like other NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""like""},
            {""LEMMA"": {""IN"": [""other"", ""oth""]}},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""one_of_the"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?one of the NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""one""},
            {""LEMMA"": ""of""},
            {""LEMMA"": ""the""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""one_of_these"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?one of these NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""one""},
            {""LEMMA"": ""of""},
            {""LEMMA"": ""these""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""one_of_those"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?one of those NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""DEP"": ""cc"", ""OP"": ""?""},
            {""LEMMA"": ""one""},
            {""LEMMA"": ""of""},
            {""LEMMA"": ""those""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""be_example_of"",
        ""pattern"": [
            # '((NP_\\w+ ?(, )?)+(and |or )?be example of NP_\\w+)',
            # added optional ""an"" to spaCy pattern for singular vs. plural
            # 'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""be""},
            {""LEMMA"": ""an"", ""OP"": ""?""},
            {""LEMMA"": ""example""},
            {""LEMMA"": ""of""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""which_be_call"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?which be call NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""be""},
            {""LEMMA"": ""call""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    #
    {
        ""label"": ""which_be_name"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?which be name NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""be""},
            {""LEMMA"": ""name""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""a_kind_of"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and|or)? a kind of NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""a""},
            {""LEMMA"": ""kind""},
            {""LEMMA"": ""of""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    #                     '((NP_\\w+ ?(, )?)+(and|or)? kind of NP_\\w+)', - combined with above
    #                     'last'
    {
        ""label"": ""form_of"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and|or)? form of NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""a"", ""OP"": ""?""},
            {""LEMMA"": ""form""},
            {""LEMMA"": ""of""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""which_look_like"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?which look like NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""look""},
            {""LEMMA"": ""like""},
            hyponym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""which_sound_like"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?which sound like NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""sound""},
            {""LEMMA"": ""like""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""type"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )? NP_\\w+ type)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""type""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""compare_with"",
        ""pattern"": [
            #                     '(compare (NP_\\w+ ?(, )?)+(and |or )?with NP_\\w+)',
            #                     'last'
            {""LEMMA"": ""compare""},
            det,
            hyponym,
            punct,
            {""LEMMA"": ""with""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    #             {""label"" : ""as"", ""pattern"" : [
    # #                     '((NP_\\w+ ?(, )?)+(and |or )?as NP_\\w+)',
    # #                     'last'
    #                 hyponym, punct, {""LEMMA"" : ""as""}, hypernym
    #             ], ""position"" : ""last""},
    {
        ""label"": ""sort_of"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and|or)? sort of NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""sort""},
            {""LEMMA"": ""of""},
            hypernym,
        ],
        ""position"": ""last"",
    },
]",EXTENDED_PATTERNS,"[
    # '(NP_\\w+ (, )?which may include (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""which_may_include"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""may""},
            {""LEMMA"": ""include""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?which be similar to (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""which_be_similar_to"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""be""},
            {""LEMMA"": ""similar""},
            {""LEMMA"": ""to""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?example of this be (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""example_of_this_be"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""example""},
            {""LEMMA"": ""of""},
            {""LEMMA"": ""this""},
            {""LEMMA"": ""be""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?type (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""type"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""type""}, punct, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?mainly (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""mainly"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""mainly""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?mostly (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""mostly"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""mostly""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?notably (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""notably"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""notably""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?particularly (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""particularly"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""particularly""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?principally (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""principally"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""principally""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?in particular (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""in_particular"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""in""},
            {""LEMMA"": ""particular""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?except (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""except"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""except""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?other than (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""other_than"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": {""IN"": [""other"", ""oth""]}},
            {""LEMMA"": ""than""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?e.g. (, )?(NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""eg"",
        ""pattern"": [hypernym, punct, {""LEMMA"": {""IN"": [""e.g."", ""eg""]}}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?i.e. (, )?(NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""ie"",
        ""pattern"": [hypernym, punct, {""LEMMA"": {""IN"": [""i.e."", ""ie""]}}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?for example (, )?(NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""for_example"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""for""},
            {""LEMMA"": ""example""},
            punct,
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # 'example of (NP_\\w+ (, )?be (NP_\\w+ ? '(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""example_of_be"",
        ""pattern"": [
            {""LEMMA"": ""example""},
            {""LEMMA"": ""of""},
            hypernym,
            punct,
            {""LEMMA"": ""be""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?like (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""like"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""like""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # 'such (NP_\\w+ (, )?as (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""such_NOUN_as"",
        ""pattern"": [
            {""LEMMA"": ""such""},
            hypernym,
            punct,
            {""LEMMA"": ""as""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?whether (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""whether"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""whether""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?compare to (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""compare_to"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""compare""},
            {""LEMMA"": ""to""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?among -PRON- (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""among_-PRON-"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""among""},
            {""LEMMA"": ""-PRON-""},
            det,
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )? (NP_\\w+ ? (, )?(and |or )?)+ for instance)', 'first'
    {
        ""label"": ""for_instance"",
        ""pattern"": [
            hypernym,
            punct,
            det,
            hyponym,
            {""LEMMA"": ""for""},
            {""LEMMA"": ""instance""},
        ],
        ""position"": ""first"",
    },
    # '((NP_\\w+ ?(, )?)+(and |or )?any other NP_\\w+)', 'last'
    {
        ""label"": ""and-or_any_other"",
        ""pattern"": [
            det,
            hyponym,
            punct,
            {""DEP"": ""cc""},
            {""LEMMA"": ""any""},
            {""LEMMA"": {""IN"": [""other"", ""oth""]}},
            hypernym,
        ],
        ""position"": ""last"",
    },
    # '((NP_\\w+ ?(, )?)+(and |or )?some other NP_\\w+)', 'last'
    {
        ""label"": ""some_other"",
        ""pattern"": [
            det,
            hyponym,
            punct,
            {""DEP"": ""cc"", ""OP"": ""?""},
            {""LEMMA"": ""some""},
            {""LEMMA"": {""IN"": [""other"", ""oth""]}},
            hypernym,
        ],
        ""position"": ""last"",
    },
    # '((NP_\\w+ ?(, )?)+(and |or )?be a NP_\\w+)', 'last'
    {
        ""label"": ""be_a"",
        ""pattern"": [
            det,
            hyponym,
            punct,
            {""LEMMA"": ""be""},
            {""LEMMA"": ""a""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""like_other"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?like other NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""like""},
            {""LEMMA"": {""IN"": [""other"", ""oth""]}},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""one_of_the"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?one of the NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""one""},
            {""LEMMA"": ""of""},
            {""LEMMA"": ""the""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""one_of_these"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?one of these NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""one""},
            {""LEMMA"": ""of""},
            {""LEMMA"": ""these""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""one_of_those"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?one of those NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""DEP"": ""cc"", ""OP"": ""?""},
            {""LEMMA"": ""one""},
            {""LEMMA"": ""of""},
            {""LEMMA"": ""those""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""be_example_of"",
        ""pattern"": [
            # '((NP_\\w+ ?(, )?)+(and |or )?be example of NP_\\w+)',
            # added optional ""an"" to spaCy pattern for singular vs. plural
            # 'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""be""},
            {""LEMMA"": ""an"", ""OP"": ""?""},
            {""LEMMA"": ""example""},
            {""LEMMA"": ""of""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""which_be_call"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?which be call NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""be""},
            {""LEMMA"": ""call""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    #
    {
        ""label"": ""which_be_name"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?which be name NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""be""},
            {""LEMMA"": ""name""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""a_kind_of"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and|or)? a kind of NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""a""},
            {""LEMMA"": ""kind""},
            {""LEMMA"": ""of""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    #                     '((NP_\\w+ ?(, )?)+(and|or)? kind of NP_\\w+)', - combined with above
    #                     'last'
    {
        ""label"": ""form_of"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and|or)? form of NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""a"", ""OP"": ""?""},
            {""LEMMA"": ""form""},
            {""LEMMA"": ""of""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""which_look_like"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?which look like NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""look""},
            {""LEMMA"": ""like""},
            hyponym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""which_sound_like"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?which sound like NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""sound""},
            {""LEMMA"": ""like""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""type"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )? NP_\\w+ type)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""type""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""compare_with"",
        ""pattern"": [
            #                     '(compare (NP_\\w+ ?(, )?)+(and |or )?with NP_\\w+)',
            #                     'last'
            {""LEMMA"": ""compare""},
            det,
            hyponym,
            punct,
            {""LEMMA"": ""with""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    #             {""label"" : ""as"", ""pattern"" : [
    # #                     '((NP_\\w+ ?(, )?)+(and |or )?as NP_\\w+)',
    # #                     'last'
    #                 hyponym, punct, {""LEMMA"" : ""as""}, hypernym
    #             ], ""position"" : ""last""},
    {
        ""label"": ""sort_of"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and|or)? sort of NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""sort""},
            {""LEMMA"": ""of""},
            hypernym,
        ],
        ""position"": ""last"",
    },
]","Constant: EXTENDED_PATTERNS = [
    # '(NP_\\w+ (, )?which may include (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""which_may_include"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""may""},
            {""LEMMA"": ""include""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?which be similar to (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""which_be_similar_to"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""be""},
            {""LEMMA"": ""similar""},
            {""LEMMA"": ""to""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?example of this be (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""example_of_this_be"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""example""},
            {""LEMMA"": ""of""},
            {""LEMMA"": ""this""},
            {""LEMMA"": ""be""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?type (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""type"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""type""}, punct, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?mainly (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""mainly"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""mainly""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?mostly (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""mostly"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""mostly""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?notably (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""notably"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""notably""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?particularly (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""particularly"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""particularly""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?principally (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""principally"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""principally""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?in particular (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""in_particular"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""in""},
            {""LEMMA"": ""particular""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?except (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""except"",
        ""pattern"": [hypernym, punct, {""LEMMA"": ""except""}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?other than (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""other_than"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": {""IN"": [""other"", ""oth""]}},
            {""LEMMA"": ""than""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?e.g. (, )?(NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""eg"",
        ""pattern"": [hypernym, punct, {""LEMMA"": {""IN"": [""e.g."", ""eg""]}}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?i.e. (, )?(NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""ie"",
        ""pattern"": [hypernym, punct, {""LEMMA"": {""IN"": [""i.e."", ""ie""]}}, det, hyponym],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?for example (, )?(NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""for_example"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""for""},
            {""LEMMA"": ""example""},
            punct,
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # 'example of (NP_\\w+ (, )?be (NP_\\w+ ? '(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""example_of_be"",
        ""pattern"": [
            {""LEMMA"": ""example""},
            {""LEMMA"": ""of""},
            hypernym,
            punct,
            {""LEMMA"": ""be""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?like (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""like"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""like""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # 'such (NP_\\w+ (, )?as (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""such_NOUN_as"",
        ""pattern"": [
            {""LEMMA"": ""such""},
            hypernym,
            punct,
            {""LEMMA"": ""as""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?whether (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""whether"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""whether""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?compare to (NP_\\w+ ? (, )?(and |or )?)+)', 'first'
    {
        ""label"": ""compare_to"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""compare""},
            {""LEMMA"": ""to""},
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )?among -PRON- (NP_\\w+ ?(, )?(and |or )?)+)', 'first'
    {
        ""label"": ""among_-PRON-"",
        ""pattern"": [
            hypernym,
            punct,
            {""LEMMA"": ""among""},
            {""LEMMA"": ""-PRON-""},
            det,
            det,
            hyponym,
        ],
        ""position"": ""first"",
    },
    # '(NP_\\w+ (, )? (NP_\\w+ ? (, )?(and |or )?)+ for instance)', 'first'
    {
        ""label"": ""for_instance"",
        ""pattern"": [
            hypernym,
            punct,
            det,
            hyponym,
            {""LEMMA"": ""for""},
            {""LEMMA"": ""instance""},
        ],
        ""position"": ""first"",
    },
    # '((NP_\\w+ ?(, )?)+(and |or )?any other NP_\\w+)', 'last'
    {
        ""label"": ""and-or_any_other"",
        ""pattern"": [
            det,
            hyponym,
            punct,
            {""DEP"": ""cc""},
            {""LEMMA"": ""any""},
            {""LEMMA"": {""IN"": [""other"", ""oth""]}},
            hypernym,
        ],
        ""position"": ""last"",
    },
    # '((NP_\\w+ ?(, )?)+(and |or )?some other NP_\\w+)', 'last'
    {
        ""label"": ""some_other"",
        ""pattern"": [
            det,
            hyponym,
            punct,
            {""DEP"": ""cc"", ""OP"": ""?""},
            {""LEMMA"": ""some""},
            {""LEMMA"": {""IN"": [""other"", ""oth""]}},
            hypernym,
        ],
        ""position"": ""last"",
    },
    # '((NP_\\w+ ?(, )?)+(and |or )?be a NP_\\w+)', 'last'
    {
        ""label"": ""be_a"",
        ""pattern"": [
            det,
            hyponym,
            punct,
            {""LEMMA"": ""be""},
            {""LEMMA"": ""a""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""like_other"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?like other NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""like""},
            {""LEMMA"": {""IN"": [""other"", ""oth""]}},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""one_of_the"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?one of the NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""one""},
            {""LEMMA"": ""of""},
            {""LEMMA"": ""the""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""one_of_these"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?one of these NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""one""},
            {""LEMMA"": ""of""},
            {""LEMMA"": ""these""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""one_of_those"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?one of those NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""DEP"": ""cc"", ""OP"": ""?""},
            {""LEMMA"": ""one""},
            {""LEMMA"": ""of""},
            {""LEMMA"": ""those""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""be_example_of"",
        ""pattern"": [
            # '((NP_\\w+ ?(, )?)+(and |or )?be example of NP_\\w+)',
            # added optional ""an"" to spaCy pattern for singular vs. plural
            # 'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""be""},
            {""LEMMA"": ""an"", ""OP"": ""?""},
            {""LEMMA"": ""example""},
            {""LEMMA"": ""of""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""which_be_call"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?which be call NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""be""},
            {""LEMMA"": ""call""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    #
    {
        ""label"": ""which_be_name"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?which be name NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""be""},
            {""LEMMA"": ""name""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""a_kind_of"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and|or)? a kind of NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""a""},
            {""LEMMA"": ""kind""},
            {""LEMMA"": ""of""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    #                     '((NP_\\w+ ?(, )?)+(and|or)? kind of NP_\\w+)', - combined with above
    #                     'last'
    {
        ""label"": ""form_of"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and|or)? form of NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""a"", ""OP"": ""?""},
            {""LEMMA"": ""form""},
            {""LEMMA"": ""of""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""which_look_like"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?which look like NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""look""},
            {""LEMMA"": ""like""},
            hyponym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""which_sound_like"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )?which sound like NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""which""},
            {""LEMMA"": ""sound""},
            {""LEMMA"": ""like""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""type"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and |or )? NP_\\w+ type)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""type""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    {
        ""label"": ""compare_with"",
        ""pattern"": [
            #                     '(compare (NP_\\w+ ?(, )?)+(and |or )?with NP_\\w+)',
            #                     'last'
            {""LEMMA"": ""compare""},
            det,
            hyponym,
            punct,
            {""LEMMA"": ""with""},
            hypernym,
        ],
        ""position"": ""last"",
    },
    #             {""label"" : ""as"", ""pattern"" : [
    # #                     '((NP_\\w+ ?(, )?)+(and |or )?as NP_\\w+)',
    # #                     'last'
    #                 hyponym, punct, {""LEMMA"" : ""as""}, hypernym
    #             ], ""position"" : ""last""},
    {
        ""label"": ""sort_of"",
        ""pattern"": [
            #                     '((NP_\\w+ ?(, )?)+(and|or)? sort of NP_\\w+)',
            #                     'last'
            det,
            hyponym,
            punct,
            {""LEMMA"": ""sort""},
            {""LEMMA"": ""of""},
            hypernym,
        ],
        ""position"": ""last"",
    },
]",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,hearst_patterns.py,python,List from typing,import,,,,Import: List from typing,allenai,scispacy,v0.5.4,"from typing import List, Dict, Any",typing,List,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,hearst_patterns.py,python,Dict from typing,import,,,,Import: Dict from typing,allenai,scispacy,v0.5.4,"from typing import List, Dict, Any",typing,Dict,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,hearst_patterns.py,python,Any from typing,import,,,,Import: Any from typing,allenai,scispacy,v0.5.4,"from typing import List, Dict, Any",typing,Any,,,,,,,,,,,,,,,
,hearst_patterns.py,python,,,,,,File: scispacy,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,hearst_patterns.py,python,,,,,,Directory: scispacy\hearst_patterns.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,hyponym_detector.py,python,[instance] HyponymDetector.nlp = nlp,class_field,,,,Class field: [instance] HyponymDetector.nlp = nlp,allenai,scispacy,v0.5.4,,,,,,,HyponymDetector,__init__,"(
        self, nlp: Language, name: str = ""hyponym_detector"", extended: bool = False
    )",self.nlp = nlp,self.nlp = nlp,,,,,,,
allenai_scispacy_v0.5.4,hyponym_detector.py,python,[instance] HyponymDetector.patterns = BASE_PATTERNS,class_field,,,,Class field: [instance] HyponymDetector.patterns = BASE_PATTERNS,allenai,scispacy,v0.5.4,,,,,,,HyponymDetector,__init__,"(
        self, nlp: Language, name: str = ""hyponym_detector"", extended: bool = False
    )",self.patterns = BASE_PATTERNS,self.patterns = BASE_PATTERNS,,,,,,,
allenai_scispacy_v0.5.4,hyponym_detector.py,python,[instance] HyponymDetector.matcher = Matcher(nlp.vocab),class_field,,,,Class field: [instance] HyponymDetector.matcher = Matcher(nlp.vocab),allenai,scispacy,v0.5.4,,,,,,,HyponymDetector,__init__,"(
        self, nlp: Language, name: str = ""hyponym_detector"", extended: bool = False
    )",self.matcher = Matcher(self.nlp.vocab),self.matcher = Matcher(self.nlp.vocab),,,,,,,
allenai_scispacy_v0.5.4,hyponym_detector.py,python,[instance] HyponymDetector.first = set(),class_field,,,,Class field: [instance] HyponymDetector.first = set(),allenai,scispacy,v0.5.4,,,,,,,HyponymDetector,__init__,"(
        self, nlp: Language, name: str = ""hyponym_detector"", extended: bool = False
    )",self.first = set(),self.first = set(),,,,,,,
allenai_scispacy_v0.5.4,hyponym_detector.py,python,[instance] HyponymDetector.last = set(),class_field,,,,Class field: [instance] HyponymDetector.last = set(),allenai,scispacy,v0.5.4,,,,,,,HyponymDetector,__init__,"(
        self, nlp: Language, name: str = ""hyponym_detector"", extended: bool = False
    )",self.last = set(),self.last = set(),,,,,,,
allenai_scispacy_v0.5.4,hyponym_detector.py,python,"HyponymDetector.__init__(
        self, nlp: Language, name: str = ""hyponym_detector"", extended: bool = False
    )",class_method,,,,"Class method: HyponymDetector.__init__(
        self, nlp: Language, name: str = ""hyponym_detector"", extended: bool = False
    )",allenai,scispacy,v0.5.4,,,,,,,HyponymDetector,__init__,"(
        self, nlp: Language, name: str = ""hyponym_detector"", extended: bool = False
    )",,,,,,,,,
allenai_scispacy_v0.5.4,hyponym_detector.py,python,"HyponymDetector.expand_to_noun_compound(self, token: Token, doc: Doc)",class_method,,,,"Class method: HyponymDetector.expand_to_noun_compound(self, token: Token, doc: Doc)",allenai,scispacy,v0.5.4,,,,,,,HyponymDetector,expand_to_noun_compound,"(self, token: Token, doc: Doc)",,,,,,,,,
allenai_scispacy_v0.5.4,hyponym_detector.py,python,"HyponymDetector.find_noun_compound_head(self, token: Token)",class_method,,,,"Class method: HyponymDetector.find_noun_compound_head(self, token: Token)",allenai,scispacy,v0.5.4,,,,,,,HyponymDetector,find_noun_compound_head,"(self, token: Token)",,,,,,,,,
allenai_scispacy_v0.5.4,hyponym_detector.py,python,"HyponymDetector.__call__(self, doc: Doc)",class_method,,,,"Class method: HyponymDetector.__call__(self, doc: Doc)",allenai,scispacy,v0.5.4,,,,,,,HyponymDetector,__call__,"(self, doc: Doc)",,,,,,,,,
allenai_scispacy_v0.5.4,hyponym_detector.py,python,HyponymDetector,class,,,,Class: HyponymDetector,allenai,scispacy,v0.5.4,,,,,,,HyponymDetector,,,,,,,,,,,
allenai_scispacy_v0.5.4,hyponym_detector.py,python,Matcher from spacy.matcher,local_import,,,,Import: Matcher from spacy.matcher,allenai,scispacy,v0.5.4,from spacy.matcher import Matcher,spacy.matcher,Matcher,,,spacy.matcher,,,,,,,,,,,,
allenai_scispacy_v0.5.4,hyponym_detector.py,python,Token from spacy.tokens,local_import,,,,Import: Token from spacy.tokens,allenai,scispacy,v0.5.4,"from spacy.tokens import Token, Doc",spacy.tokens,Token,,,spacy.tokens,,,,,,,,,,,,
allenai_scispacy_v0.5.4,hyponym_detector.py,python,Doc from spacy.tokens,local_import,,,,Import: Doc from spacy.tokens,allenai,scispacy,v0.5.4,"from spacy.tokens import Token, Doc",spacy.tokens,Doc,,,spacy.tokens,,,,,,,,,,,,
allenai_scispacy_v0.5.4,hyponym_detector.py,python,Language from spacy.language,local_import,,,,Import: Language from spacy.language,allenai,scispacy,v0.5.4,from spacy.language import Language,spacy.language,Language,,,spacy.language,,,,,,,,,,,,
allenai_scispacy_v0.5.4,hyponym_detector.py,python,BASE_PATTERNS from scispacy.hearst_patterns,local_import,,,,Import: BASE_PATTERNS from scispacy.hearst_patterns,allenai,scispacy,v0.5.4,"from scispacy.hearst_patterns import BASE_PATTERNS, EXTENDED_PATTERNS",scispacy.hearst_patterns,BASE_PATTERNS,,,scispacy.hearst_patterns,,,,,,,,,,,,
allenai_scispacy_v0.5.4,hyponym_detector.py,python,EXTENDED_PATTERNS from scispacy.hearst_patterns,local_import,,,,Import: EXTENDED_PATTERNS from scispacy.hearst_patterns,allenai,scispacy,v0.5.4,"from scispacy.hearst_patterns import BASE_PATTERNS, EXTENDED_PATTERNS",scispacy.hearst_patterns,EXTENDED_PATTERNS,,,scispacy.hearst_patterns,,,,,,,,,,,,
,hyponym_detector.py,python,,,,,,File: scispacy,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,hyponym_detector.py,python,,,,,,Directory: scispacy\hyponym_detector.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,linking.py,python,"[instance] EntityLinker.candidate_generator = candidate_generator or CandidateGenerator(
            name=linker_name
        )",class_field,,,,"Class field: [instance] EntityLinker.candidate_generator = candidate_generator or CandidateGenerator(
            name=linker_name
        )",allenai,scispacy,v0.5.4,,,,,,,EntityLinker,__init__,"(
        self,
        nlp: Optional[Language] = None,
        name: str = ""scispacy_linker"",
        candidate_generator: Optional[CandidateGenerator] = None,
        resolve_abbreviations: bool = True,
        k: int = 30,
        threshold: float = 0.7,
        no_definition_threshold: float = 0.95,
        filter_for_definitions: bool = True,
        max_entities_per_mention: int = 5,
        linker_name: Optional[str] = None,
    )","self.candidate_generator = candidate_generator or CandidateGenerator(
            name=linker_name
        )","self.candidate_generator = candidate_generator or CandidateGenerator(
            name=linker_name
        )",,,,,,,
allenai_scispacy_v0.5.4,linking.py,python,[instance] EntityLinker.resolve_abbreviations = resolve_abbreviations,class_field,,,,Class field: [instance] EntityLinker.resolve_abbreviations = resolve_abbreviations,allenai,scispacy,v0.5.4,,,,,,,EntityLinker,__init__,"(
        self,
        nlp: Optional[Language] = None,
        name: str = ""scispacy_linker"",
        candidate_generator: Optional[CandidateGenerator] = None,
        resolve_abbreviations: bool = True,
        k: int = 30,
        threshold: float = 0.7,
        no_definition_threshold: float = 0.95,
        filter_for_definitions: bool = True,
        max_entities_per_mention: int = 5,
        linker_name: Optional[str] = None,
    )",self.resolve_abbreviations = resolve_abbreviations,self.resolve_abbreviations = resolve_abbreviations,,,,,,,
allenai_scispacy_v0.5.4,linking.py,python,[instance] EntityLinker.k = k,class_field,,,,Class field: [instance] EntityLinker.k = k,allenai,scispacy,v0.5.4,,,,,,,EntityLinker,__init__,"(
        self,
        nlp: Optional[Language] = None,
        name: str = ""scispacy_linker"",
        candidate_generator: Optional[CandidateGenerator] = None,
        resolve_abbreviations: bool = True,
        k: int = 30,
        threshold: float = 0.7,
        no_definition_threshold: float = 0.95,
        filter_for_definitions: bool = True,
        max_entities_per_mention: int = 5,
        linker_name: Optional[str] = None,
    )",self.k = k,self.k = k,,,,,,,
allenai_scispacy_v0.5.4,linking.py,python,[instance] EntityLinker.threshold = threshold,class_field,,,,Class field: [instance] EntityLinker.threshold = threshold,allenai,scispacy,v0.5.4,,,,,,,EntityLinker,__init__,"(
        self,
        nlp: Optional[Language] = None,
        name: str = ""scispacy_linker"",
        candidate_generator: Optional[CandidateGenerator] = None,
        resolve_abbreviations: bool = True,
        k: int = 30,
        threshold: float = 0.7,
        no_definition_threshold: float = 0.95,
        filter_for_definitions: bool = True,
        max_entities_per_mention: int = 5,
        linker_name: Optional[str] = None,
    )",self.threshold = threshold,self.threshold = threshold,,,,,,,
allenai_scispacy_v0.5.4,linking.py,python,[instance] EntityLinker.no_definition_threshold = no_definition_threshold,class_field,,,,Class field: [instance] EntityLinker.no_definition_threshold = no_definition_threshold,allenai,scispacy,v0.5.4,,,,,,,EntityLinker,__init__,"(
        self,
        nlp: Optional[Language] = None,
        name: str = ""scispacy_linker"",
        candidate_generator: Optional[CandidateGenerator] = None,
        resolve_abbreviations: bool = True,
        k: int = 30,
        threshold: float = 0.7,
        no_definition_threshold: float = 0.95,
        filter_for_definitions: bool = True,
        max_entities_per_mention: int = 5,
        linker_name: Optional[str] = None,
    )",self.no_definition_threshold = no_definition_threshold,self.no_definition_threshold = no_definition_threshold,,,,,,,
allenai_scispacy_v0.5.4,linking.py,python,[instance] EntityLinker.kb = candidate_generator.kb,class_field,,,,Class field: [instance] EntityLinker.kb = candidate_generator.kb,allenai,scispacy,v0.5.4,,,,,,,EntityLinker,__init__,"(
        self,
        nlp: Optional[Language] = None,
        name: str = ""scispacy_linker"",
        candidate_generator: Optional[CandidateGenerator] = None,
        resolve_abbreviations: bool = True,
        k: int = 30,
        threshold: float = 0.7,
        no_definition_threshold: float = 0.95,
        filter_for_definitions: bool = True,
        max_entities_per_mention: int = 5,
        linker_name: Optional[str] = None,
    )",self.kb = self.candidate_generator.kb,self.kb = self.candidate_generator.kb,,,,,,,
allenai_scispacy_v0.5.4,linking.py,python,[instance] EntityLinker.filter_for_definitions = filter_for_definitions,class_field,,,,Class field: [instance] EntityLinker.filter_for_definitions = filter_for_definitions,allenai,scispacy,v0.5.4,,,,,,,EntityLinker,__init__,"(
        self,
        nlp: Optional[Language] = None,
        name: str = ""scispacy_linker"",
        candidate_generator: Optional[CandidateGenerator] = None,
        resolve_abbreviations: bool = True,
        k: int = 30,
        threshold: float = 0.7,
        no_definition_threshold: float = 0.95,
        filter_for_definitions: bool = True,
        max_entities_per_mention: int = 5,
        linker_name: Optional[str] = None,
    )",self.filter_for_definitions = filter_for_definitions,self.filter_for_definitions = filter_for_definitions,,,,,,,
allenai_scispacy_v0.5.4,linking.py,python,[instance] EntityLinker.max_entities_per_mention = max_entities_per_mention,class_field,,,,Class field: [instance] EntityLinker.max_entities_per_mention = max_entities_per_mention,allenai,scispacy,v0.5.4,,,,,,,EntityLinker,__init__,"(
        self,
        nlp: Optional[Language] = None,
        name: str = ""scispacy_linker"",
        candidate_generator: Optional[CandidateGenerator] = None,
        resolve_abbreviations: bool = True,
        k: int = 30,
        threshold: float = 0.7,
        no_definition_threshold: float = 0.95,
        filter_for_definitions: bool = True,
        max_entities_per_mention: int = 5,
        linker_name: Optional[str] = None,
    )",self.max_entities_per_mention = max_entities_per_mention,self.max_entities_per_mention = max_entities_per_mention,,,,,,,
allenai_scispacy_v0.5.4,linking.py,python,"EntityLinker.__init__(
        self,
        nlp: Optional[Language] = None,
        name: str = ""scispacy_linker"",
        candidate_generator: Optional[CandidateGenerator] = None,
        resolve_abbreviations: bool = True,
        k: int = 30,
        threshold: float = 0.7,
        no_definition_threshold: float = 0.95,
        filter_for_definitions: bool = True,
        max_entities_per_mention: int = 5,
        linker_name: Optional[str] = None,
    )",class_method,,,,"Class method: EntityLinker.__init__(
        self,
        nlp: Optional[Language] = None,
        name: str = ""scispacy_linker"",
        candidate_generator: Optional[CandidateGenerator] = None,
        resolve_abbreviations: bool = True,
        k: int = 30,
        threshold: float = 0.7,
        no_definition_threshold: float = 0.95,
        filter_for_definitions: bool = True,
        max_entities_per_mention: int = 5,
        linker_name: Optional[str] = None,
    )",allenai,scispacy,v0.5.4,,,,,,,EntityLinker,__init__,"(
        self,
        nlp: Optional[Language] = None,
        name: str = ""scispacy_linker"",
        candidate_generator: Optional[CandidateGenerator] = None,
        resolve_abbreviations: bool = True,
        k: int = 30,
        threshold: float = 0.7,
        no_definition_threshold: float = 0.95,
        filter_for_definitions: bool = True,
        max_entities_per_mention: int = 5,
        linker_name: Optional[str] = None,
    )",,,,,,,,,
allenai_scispacy_v0.5.4,linking.py,python,"EntityLinker.__call__(self, doc: Doc) -> Doc",class_method,,,,"Class method: EntityLinker.__call__(self, doc: Doc) -> Doc",allenai,scispacy,v0.5.4,,,,,,,EntityLinker,__call__,"(self, doc: Doc)",,,Doc,,,,,,
allenai_scispacy_v0.5.4,linking.py,python,EntityLinker,class,,,,Class: EntityLinker,allenai,scispacy,v0.5.4,,,,,,,EntityLinker,,,,,,,,,,,
allenai_scispacy_v0.5.4,linking.py,python,Optional from typing,import,,,,Import: Optional from typing,allenai,scispacy,v0.5.4,from typing import Optional,typing,Optional,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,linking.py,python,Doc from spacy.tokens,local_import,,,,Import: Doc from spacy.tokens,allenai,scispacy,v0.5.4,from spacy.tokens import Doc,spacy.tokens,Doc,,,spacy.tokens,,,,,,,,,,,,
allenai_scispacy_v0.5.4,linking.py,python,Span from spacy.tokens,local_import,,,,Import: Span from spacy.tokens,allenai,scispacy,v0.5.4,from spacy.tokens import Span,spacy.tokens,Span,,,spacy.tokens,,,,,,,,,,,,
allenai_scispacy_v0.5.4,linking.py,python,Language from spacy.language,local_import,,,,Import: Language from spacy.language,allenai,scispacy,v0.5.4,from spacy.language import Language,spacy.language,Language,,,spacy.language,,,,,,,,,,,,
allenai_scispacy_v0.5.4,linking.py,python,CandidateGenerator from scispacy.candidate_generation,local_import,,,,Import: CandidateGenerator from scispacy.candidate_generation,allenai,scispacy,v0.5.4,from scispacy.candidate_generation import CandidateGenerator,scispacy.candidate_generation,CandidateGenerator,,,scispacy.candidate_generation,,,,,,,,,,,,
,linking.py,python,,,,,,File: scispacy,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,linking.py,python,,,,,,Directory: scispacy\linking.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,Entity.concept_id: str,class_field,,,,Class field: Entity.concept_id: str,allenai,scispacy,v0.5.4,,,,,,,Entity,,,concept_id: str,,,,,concept_id,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,Entity.canonical_name: str,class_field,,,,Class field: Entity.canonical_name: str,allenai,scispacy,v0.5.4,,,,,,,Entity,,,canonical_name: str,,,,,canonical_name,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,Entity.aliases: List[str],class_field,,,,Class field: Entity.aliases: List[str],allenai,scispacy,v0.5.4,,,,,,,Entity,,,aliases: List[str],,,,,aliases,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,Entity.types: List[str] = [],class_field,,,,Class field: Entity.types: List[str] = [],allenai,scispacy,v0.5.4,,,,,,,Entity,,,types: List[str] = [],,,,,types,,[],
allenai_scispacy_v0.5.4,linking_utils.py,python,Entity.definition: Optional[str] = None,class_field,,,,Class field: Entity.definition: Optional[str] = None,allenai,scispacy,v0.5.4,,,,,,,Entity,,,definition: Optional[str] = None,,,,,definition,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,"[instance] KnowledgeBase.cui_to_entity: Dict[str, Entity] = {}",class_field,,,,"Class field: [instance] KnowledgeBase.cui_to_entity: Dict[str, Entity] = {}",allenai,scispacy,v0.5.4,,,,,,,KnowledgeBase,__init__,"(
        self,
        file_path: Optional[str] = None,
    )","self.cui_to_entity: Dict[str, Entity] = {}","self.cui_to_entity: Dict[str, Entity] = {}",,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,"[instance] KnowledgeBase.alias_to_cuis: Dict[str, Set[str]] = {**alias_to_cuis}",class_field,,,,"Class field: [instance] KnowledgeBase.alias_to_cuis: Dict[str, Set[str]] = {**alias_to_cuis}",allenai,scispacy,v0.5.4,,,,,,,KnowledgeBase,__init__,"(
        self,
        file_path: Optional[str] = None,
    )","self.alias_to_cuis: Dict[str, Set[str]] = {**alias_to_cuis}","self.alias_to_cuis: Dict[str, Set[str]] = {**alias_to_cuis}",,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,"[instance] UmlsKnowledgeBase.semantic_type_tree: UmlsSemanticTypeTree = construct_umls_tree_from_tsv(
            types_file_path
        )",class_field,,,,"Class field: [instance] UmlsKnowledgeBase.semantic_type_tree: UmlsSemanticTypeTree = construct_umls_tree_from_tsv(
            types_file_path
        )",allenai,scispacy,v0.5.4,,,,,,,UmlsKnowledgeBase,__init__,"(
        self,
        file_path: str = DEFAULT_UMLS_PATH,
        types_file_path: str = DEFAULT_UMLS_TYPES_PATH,
    )","self.semantic_type_tree: UmlsSemanticTypeTree = construct_umls_tree_from_tsv(
            types_file_path
        )","self.semantic_type_tree: UmlsSemanticTypeTree = construct_umls_tree_from_tsv(
            types_file_path
        )",,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,Entity.__repr__(self),class_method,,,,Class method: Entity.__repr__(self),allenai,scispacy,v0.5.4,,,,,,,Entity,__repr__,(self),,,,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,"KnowledgeBase.__init__(
        self,
        file_path: Optional[str] = None,
    )",class_method,,,,"Class method: KnowledgeBase.__init__(
        self,
        file_path: Optional[str] = None,
    )",allenai,scispacy,v0.5.4,,,,,,,KnowledgeBase,__init__,"(
        self,
        file_path: Optional[str] = None,
    )",,,,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,"UmlsKnowledgeBase.__init__(
        self,
        file_path: str = DEFAULT_UMLS_PATH,
        types_file_path: str = DEFAULT_UMLS_TYPES_PATH,
    )",class_method,,,,"Class method: UmlsKnowledgeBase.__init__(
        self,
        file_path: str = DEFAULT_UMLS_PATH,
        types_file_path: str = DEFAULT_UMLS_TYPES_PATH,
    )",allenai,scispacy,v0.5.4,,,,,,,UmlsKnowledgeBase,__init__,"(
        self,
        file_path: str = DEFAULT_UMLS_PATH,
        types_file_path: str = DEFAULT_UMLS_TYPES_PATH,
    )",,,,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,"Mesh.__init__(
        self,
        file_path: str = ""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/kbs/2023-04-23/umls_mesh_2022.jsonl"",  # noqa
    )",class_method,,,,"Class method: Mesh.__init__(
        self,
        file_path: str = ""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/kbs/2023-04-23/umls_mesh_2022.jsonl"",  # noqa
    )",allenai,scispacy,v0.5.4,,,,,,,Mesh,__init__,"(
        self,
        file_path: str = ""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/kbs/2023-04-23/umls_mesh_2022.jsonl"",  # noqa
    )",,,,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,"GeneOntology.__init__(
        self,
        file_path: str = ""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/kbs/2023-04-23/umls_go_2022.jsonl"",  # noqa
    )",class_method,,,,"Class method: GeneOntology.__init__(
        self,
        file_path: str = ""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/kbs/2023-04-23/umls_go_2022.jsonl"",  # noqa
    )",allenai,scispacy,v0.5.4,,,,,,,GeneOntology,__init__,"(
        self,
        file_path: str = ""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/kbs/2023-04-23/umls_go_2022.jsonl"",  # noqa
    )",,,,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,"HumanPhenotypeOntology.__init__(
        self,
        file_path: str = ""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/kbs/2023-04-23/umls_hpo_2022.jsonl"",  # noqa
    )",class_method,,,,"Class method: HumanPhenotypeOntology.__init__(
        self,
        file_path: str = ""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/kbs/2023-04-23/umls_hpo_2022.jsonl"",  # noqa
    )",allenai,scispacy,v0.5.4,,,,,,,HumanPhenotypeOntology,__init__,"(
        self,
        file_path: str = ""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/kbs/2023-04-23/umls_hpo_2022.jsonl"",  # noqa
    )",,,,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,"RxNorm.__init__(
        self,
        file_path: str = ""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/kbs/2023-04-23/umls_rxnorm_2022.jsonl"",  # noqa
    )",class_method,,,,"Class method: RxNorm.__init__(
        self,
        file_path: str = ""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/kbs/2023-04-23/umls_rxnorm_2022.jsonl"",  # noqa
    )",allenai,scispacy,v0.5.4,,,,,,,RxNorm,__init__,"(
        self,
        file_path: str = ""https://ai2-s2-scispacy.s3-us-west-2.amazonaws.com/data/kbs/2023-04-23/umls_rxnorm_2022.jsonl"",  # noqa
    )",,,,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,Entity(NamedTuple),class,,,,Class: Entity(NamedTuple),allenai,scispacy,v0.5.4,,,,,,,Entity,,,,,,,,,(NamedTuple),,
allenai_scispacy_v0.5.4,linking_utils.py,python,KnowledgeBase,class,,,,Class: KnowledgeBase,allenai,scispacy,v0.5.4,,,,,,,KnowledgeBase,,,,,,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,UmlsKnowledgeBase(KnowledgeBase),class,,,,Class: UmlsKnowledgeBase(KnowledgeBase),allenai,scispacy,v0.5.4,,,,,,,UmlsKnowledgeBase,,,,,,,,,(KnowledgeBase),,
allenai_scispacy_v0.5.4,linking_utils.py,python,Mesh(KnowledgeBase),class,,,,Class: Mesh(KnowledgeBase),allenai,scispacy,v0.5.4,,,,,,,Mesh,,,,,,,,,(KnowledgeBase),,
allenai_scispacy_v0.5.4,linking_utils.py,python,GeneOntology(KnowledgeBase),class,,,,Class: GeneOntology(KnowledgeBase),allenai,scispacy,v0.5.4,,,,,,,GeneOntology,,,,,,,,,(KnowledgeBase),,
allenai_scispacy_v0.5.4,linking_utils.py,python,HumanPhenotypeOntology(KnowledgeBase),class,,,,Class: HumanPhenotypeOntology(KnowledgeBase),allenai,scispacy,v0.5.4,,,,,,,HumanPhenotypeOntology,,,,,,,,,(KnowledgeBase),,
allenai_scispacy_v0.5.4,linking_utils.py,python,RxNorm(KnowledgeBase),class,,,,Class: RxNorm(KnowledgeBase),allenai,scispacy,v0.5.4,,,,,,,RxNorm,,,,,,,,,(KnowledgeBase),,
allenai_scispacy_v0.5.4,linking_utils.py,python,"DEFAULT_UMLS_PATH = ""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/kbs/2023-04-23/umls_2022_ab_cat0129.jsonl""",constant,"DEFAULT_UMLS_PATH = ""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/kbs/2023-04-23/umls_2022_ab_cat0129.jsonl""",DEFAULT_UMLS_PATH,"""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/kbs/2023-04-23/umls_2022_ab_cat0129.jsonl""","Constant: DEFAULT_UMLS_PATH = ""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/kbs/2023-04-23/umls_2022_ab_cat0129.jsonl""",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,"DEFAULT_UMLS_TYPES_PATH = ""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/umls_semantic_type_tree.tsv""",constant,"DEFAULT_UMLS_TYPES_PATH = ""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/umls_semantic_type_tree.tsv""",DEFAULT_UMLS_TYPES_PATH,"""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/umls_semantic_type_tree.tsv""","Constant: DEFAULT_UMLS_TYPES_PATH = ""https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/data/umls_semantic_type_tree.tsv""",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,List from typing,import,,,,Import: List from typing,allenai,scispacy,v0.5.4,"from typing import List, Dict, NamedTuple, Optional, Set",typing,List,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,Dict from typing,import,,,,Import: Dict from typing,allenai,scispacy,v0.5.4,"from typing import List, Dict, NamedTuple, Optional, Set",typing,Dict,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,NamedTuple from typing,import,,,,Import: NamedTuple from typing,allenai,scispacy,v0.5.4,"from typing import List, Dict, NamedTuple, Optional, Set",typing,NamedTuple,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,Optional from typing,import,,,,Import: Optional from typing,allenai,scispacy,v0.5.4,"from typing import List, Dict, NamedTuple, Optional, Set",typing,Optional,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,Set from typing,import,,,,Import: Set from typing,allenai,scispacy,v0.5.4,"from typing import List, Dict, NamedTuple, Optional, Set",typing,Set,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,json,import,,,,Import: json,allenai,scispacy,v0.5.4,import json,,json,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,defaultdict from collections,import,,,,Import: defaultdict from collections,allenai,scispacy,v0.5.4,from collections import defaultdict,collections,defaultdict,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,cached_path from scispacy.file_cache,local_import,,,,Import: cached_path from scispacy.file_cache,allenai,scispacy,v0.5.4,from scispacy.file_cache import cached_path,scispacy.file_cache,cached_path,,,scispacy.file_cache,,,,,,,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,UmlsSemanticTypeTree from scispacy.umls_semantic_type_tree,local_import,,,,Import: UmlsSemanticTypeTree from scispacy.umls_semantic_type_tree,allenai,scispacy,v0.5.4,"from scispacy.umls_semantic_type_tree import (
    UmlsSemanticTypeTree,
    construct_umls_tree_from_tsv,
)",scispacy.umls_semantic_type_tree,UmlsSemanticTypeTree,,,scispacy.umls_semantic_type_tree,,,,,,,,,,,,
allenai_scispacy_v0.5.4,linking_utils.py,python,construct_umls_tree_from_tsv from scispacy.umls_semantic_type_tree,local_import,,,,Import: construct_umls_tree_from_tsv from scispacy.umls_semantic_type_tree,allenai,scispacy,v0.5.4,"from scispacy.umls_semantic_type_tree import (
    UmlsSemanticTypeTree,
    construct_umls_tree_from_tsv,
)",scispacy.umls_semantic_type_tree,construct_umls_tree_from_tsv,,,scispacy.umls_semantic_type_tree,,,,,,,,,,,,
,linking_utils.py,python,,,,,,File: scispacy,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,linking_utils.py,python,,,,,,Directory: scispacy\linking_utils.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,per_class_scorer.py,python,"[instance] PerClassScorer._true_positives: Dict[str, int] = defaultdict(int)",class_field,,,,"Class field: [instance] PerClassScorer._true_positives: Dict[str, int] = defaultdict(int)",allenai,scispacy,v0.5.4,,,,,,,PerClassScorer,__init__,(self),"self._true_positives: Dict[str, int] = defaultdict(int)","self._true_positives: Dict[str, int] = defaultdict(int)",,,,,,,
allenai_scispacy_v0.5.4,per_class_scorer.py,python,"[instance] PerClassScorer._false_positives: Dict[str, int] = defaultdict(int)",class_field,,,,"Class field: [instance] PerClassScorer._false_positives: Dict[str, int] = defaultdict(int)",allenai,scispacy,v0.5.4,,,,,,,PerClassScorer,__init__,(self),"self._false_positives: Dict[str, int] = defaultdict(int)","self._false_positives: Dict[str, int] = defaultdict(int)",,,,,,,
allenai_scispacy_v0.5.4,per_class_scorer.py,python,"[instance] PerClassScorer._false_negatives: Dict[str, int] = defaultdict(int)",class_field,,,,"Class field: [instance] PerClassScorer._false_negatives: Dict[str, int] = defaultdict(int)",allenai,scispacy,v0.5.4,,,,,,,PerClassScorer,__init__,(self),"self._false_negatives: Dict[str, int] = defaultdict(int)","self._false_negatives: Dict[str, int] = defaultdict(int)",,,,,,,
allenai_scispacy_v0.5.4,per_class_scorer.py,python,PerClassScorer.__init__(self),class_method,,,,Class method: PerClassScorer.__init__(self),allenai,scispacy,v0.5.4,,,,,,,PerClassScorer,__init__,(self),,,,,,,,,
allenai_scispacy_v0.5.4,per_class_scorer.py,python,"PerClassScorer.__call__(
        self,
        predicted_spans: List[Tuple[int, int, str]],
        gold_spans: List[Tuple[int, int, str]],
    ) -> None",class_method,,,,"Class method: PerClassScorer.__call__(
        self,
        predicted_spans: List[Tuple[int, int, str]],
        gold_spans: List[Tuple[int, int, str]],
    ) -> None",allenai,scispacy,v0.5.4,,,,,,,PerClassScorer,__call__,"(
        self,
        predicted_spans: List[Tuple[int, int, str]],
        gold_spans: List[Tuple[int, int, str]],
    )",,,,,,,,,
allenai_scispacy_v0.5.4,per_class_scorer.py,python,"PerClassScorer.get_metric(self, reset: bool = False)",class_method,,,,"Class method: PerClassScorer.get_metric(self, reset: bool = False)",allenai,scispacy,v0.5.4,,,,,,,PerClassScorer,get_metric,"(self, reset: bool = False)",,,,,,,,,
allenai_scispacy_v0.5.4,per_class_scorer.py,python,"[staticmethod] PerClassScorer._compute_metrics(
        true_positives: int, false_positives: int, false_negatives: int
    )",class_method,,,,"Class method: [staticmethod] PerClassScorer._compute_metrics(
        true_positives: int, false_positives: int, false_negatives: int
    )",allenai,scispacy,v0.5.4,,,,,,,PerClassScorer,_compute_metrics,"(
        true_positives: int, false_positives: int, false_negatives: int
    )",,,,,,,,,staticmethod
allenai_scispacy_v0.5.4,per_class_scorer.py,python,PerClassScorer.reset(self),class_method,,,,Class method: PerClassScorer.reset(self),allenai,scispacy,v0.5.4,,,,,,,PerClassScorer,reset,(self),,,,,,,,,
allenai_scispacy_v0.5.4,per_class_scorer.py,python,PerClassScorer,class,,,,Class: PerClassScorer,allenai,scispacy,v0.5.4,,,,,,,PerClassScorer,,,,,,,,,,,
allenai_scispacy_v0.5.4,per_class_scorer.py,python,Dict from typing,import,,,,Import: Dict from typing,allenai,scispacy,v0.5.4,"from typing import Dict, List, Tuple, Set",typing,Dict,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,per_class_scorer.py,python,List from typing,import,,,,Import: List from typing,allenai,scispacy,v0.5.4,"from typing import Dict, List, Tuple, Set",typing,List,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,per_class_scorer.py,python,Tuple from typing,import,,,,Import: Tuple from typing,allenai,scispacy,v0.5.4,"from typing import Dict, List, Tuple, Set",typing,Tuple,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,per_class_scorer.py,python,Set from typing,import,,,,Import: Set from typing,allenai,scispacy,v0.5.4,"from typing import Dict, List, Tuple, Set",typing,Set,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,per_class_scorer.py,python,defaultdict from collections,import,,,,Import: defaultdict from collections,allenai,scispacy,v0.5.4,from collections import defaultdict,collections,defaultdict,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,per_class_scorer.py,python,copy,import,,,,Import: copy,allenai,scispacy,v0.5.4,import copy,,copy,,,,,,,,,,,,,,,
,per_class_scorer.py,python,,,,,,File: scispacy,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,per_class_scorer.py,python,,,,,,Directory: scispacy\per_class_scorer.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,train_utils.py,python,"evaluate_ner(
    nlp: Language, eval_data, dump_path: Optional[str] = None, verbose: bool = False
) -> PerClassScorer",function,,,,"Function: evaluate_ner(
    nlp: Language, eval_data, dump_path: Optional[str] = None, verbose: bool = False
) -> PerClassScorer",allenai,scispacy,v0.5.4,,,,evaluate_ner,"(
    nlp: Language, eval_data, dump_path: Optional[str] = None, verbose: bool = False
)",,,,,,,,PerClassScorer,,,,,
allenai_scispacy_v0.5.4,train_utils.py,python,json,import,,,,Import: json,allenai,scispacy,v0.5.4,import json,,json,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,train_utils.py,python,tqdm,import,,,,Import: tqdm,allenai,scispacy,v0.5.4,import tqdm,,tqdm,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,train_utils.py,python,Optional from typing,import,,,,Import: Optional from typing,allenai,scispacy,v0.5.4,from typing import Optional,typing,Optional,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,train_utils.py,python,Language from spacy.language,local_import,,,,Import: Language from spacy.language,allenai,scispacy,v0.5.4,from spacy.language import Language,spacy.language,Language,,,spacy.language,,,,,,,,,,,,
allenai_scispacy_v0.5.4,train_utils.py,python,PerClassScorer from scispacy.per_class_scorer,local_import,,,,Import: PerClassScorer from scispacy.per_class_scorer,allenai,scispacy,v0.5.4,from scispacy.per_class_scorer import PerClassScorer,scispacy.per_class_scorer,PerClassScorer,,,scispacy.per_class_scorer,,,,,,,,,,,,
,train_utils.py,python,,,,,,File: scispacy,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,train_utils.py,python,,,,,,Directory: scispacy\train_utils.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,umls_linking.py,python,EntityLinker from scispacy.linking,local_import,,,,Import: EntityLinker from scispacy.linking,allenai,scispacy,v0.5.4,from scispacy.linking import EntityLinker as UmlsEntityLinker,scispacy.linking,EntityLinker,,,scispacy.linking,,,,,,,,,,,,
,umls_linking.py,python,,,,,,File: scispacy,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,umls_linking.py,python,,,,,,Directory: scispacy\umls_linking.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,SemanticTypeNode.type_id: str,class_field,,,,Class field: SemanticTypeNode.type_id: str,allenai,scispacy,v0.5.4,,,,,,,SemanticTypeNode,,,type_id: str,,,,,type_id,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,SemanticTypeNode.full_name: str,class_field,,,,Class field: SemanticTypeNode.full_name: str,allenai,scispacy,v0.5.4,,,,,,,SemanticTypeNode,,,full_name: str,,,,,full_name,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,SemanticTypeNode.children: List[Any],class_field,,,,Class field: SemanticTypeNode.children: List[Any],allenai,scispacy,v0.5.4,,,,,,,SemanticTypeNode,,,children: List[Any],,,,,children,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,SemanticTypeNode.level: int,class_field,,,,Class field: SemanticTypeNode.level: int,allenai,scispacy,v0.5.4,,,,,,,SemanticTypeNode,,,level: int,,,,,level,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,[instance] UmlsSemanticTypeTree.flat_nodes: List[SemanticTypeNode] = children,class_field,,,,Class field: [instance] UmlsSemanticTypeTree.flat_nodes: List[SemanticTypeNode] = children,allenai,scispacy,v0.5.4,,,,,,,UmlsSemanticTypeTree,__init__,"(self, root: SemanticTypeNode)",self.flat_nodes: List[SemanticTypeNode] = children,self.flat_nodes: List[SemanticTypeNode] = children,,,,,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,[instance] UmlsSemanticTypeTree.type_id_to_node = {node.type_id: node for node in flat_nodes},class_field,,,,Class field: [instance] UmlsSemanticTypeTree.type_id_to_node = {node.type_id: node for node in flat_nodes},allenai,scispacy,v0.5.4,,,,,,,UmlsSemanticTypeTree,__init__,"(self, root: SemanticTypeNode)",self.type_id_to_node = {node.type_id: node for node in self.flat_nodes},self.type_id_to_node = {node.type_id: node for node in self.flat_nodes},,,,,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,[instance] UmlsSemanticTypeTree.depth = max([node.level for node in flat_nodes]),class_field,,,,Class field: [instance] UmlsSemanticTypeTree.depth = max([node.level for node in flat_nodes]),allenai,scispacy,v0.5.4,,,,,,,UmlsSemanticTypeTree,__init__,"(self, root: SemanticTypeNode)",self.depth = max([node.level for node in self.flat_nodes]),self.depth = max([node.level for node in self.flat_nodes]),,,,,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,"UmlsSemanticTypeTree.__init__(self, root: SemanticTypeNode) -> None",class_method,,,,"Class method: UmlsSemanticTypeTree.__init__(self, root: SemanticTypeNode) -> None",allenai,scispacy,v0.5.4,,,,,,,UmlsSemanticTypeTree,__init__,"(self, root: SemanticTypeNode)",,,,,,,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,"UmlsSemanticTypeTree.get_node_from_id(self, type_id: str) -> SemanticTypeNode",class_method,,,,"Class method: UmlsSemanticTypeTree.get_node_from_id(self, type_id: str) -> SemanticTypeNode",allenai,scispacy,v0.5.4,,,,,,,UmlsSemanticTypeTree,get_node_from_id,"(self, type_id: str)",,,SemanticTypeNode,,,,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,"UmlsSemanticTypeTree.get_canonical_name(self, type_id: str) -> str",class_method,,,,"Class method: UmlsSemanticTypeTree.get_canonical_name(self, type_id: str) -> str",allenai,scispacy,v0.5.4,,,,,,,UmlsSemanticTypeTree,get_canonical_name,"(self, type_id: str)",,,str,,,,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,"UmlsSemanticTypeTree.get_nodes_at_depth(self, level: int) -> List[SemanticTypeNode]",class_method,,,,"Class method: UmlsSemanticTypeTree.get_nodes_at_depth(self, level: int) -> List[SemanticTypeNode]",allenai,scispacy,v0.5.4,,,,,,,UmlsSemanticTypeTree,get_nodes_at_depth,"(self, level: int)",,,List[SemanticTypeNode],,,,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,"UmlsSemanticTypeTree.get_children(self, node: SemanticTypeNode) -> List[SemanticTypeNode]",class_method,,,,"Class method: UmlsSemanticTypeTree.get_children(self, node: SemanticTypeNode) -> List[SemanticTypeNode]",allenai,scispacy,v0.5.4,,,,,,,UmlsSemanticTypeTree,get_children,"(self, node: SemanticTypeNode)",,,List[SemanticTypeNode],,,,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,"UmlsSemanticTypeTree.get_parent(self, node: SemanticTypeNode) -> Optional[SemanticTypeNode]",class_method,,,,"Class method: UmlsSemanticTypeTree.get_parent(self, node: SemanticTypeNode) -> Optional[SemanticTypeNode]",allenai,scispacy,v0.5.4,,,,,,,UmlsSemanticTypeTree,get_parent,"(self, node: SemanticTypeNode)",,,Optional[SemanticTypeNode],,,,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,"UmlsSemanticTypeTree.get_collapsed_type_id_map_at_level(self, level: int) -> Dict[str, str]",class_method,,,,"Class method: UmlsSemanticTypeTree.get_collapsed_type_id_map_at_level(self, level: int) -> Dict[str, str]",allenai,scispacy,v0.5.4,,,,,,,UmlsSemanticTypeTree,get_collapsed_type_id_map_at_level,"(self, level: int)",,,"Dict[str, str]",,,,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,SemanticTypeNode(NamedTuple),class,,,,Class: SemanticTypeNode(NamedTuple),allenai,scispacy,v0.5.4,,,,,,,SemanticTypeNode,,,,,,,,,(NamedTuple),,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,UmlsSemanticTypeTree,class,,,,Class: UmlsSemanticTypeTree,allenai,scispacy,v0.5.4,,,,,,,UmlsSemanticTypeTree,,,,,,,,,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,construct_umls_tree_from_tsv(filepath: str) -> UmlsSemanticTypeTree,function,,,,Function: construct_umls_tree_from_tsv(filepath: str) -> UmlsSemanticTypeTree,allenai,scispacy,v0.5.4,,,,construct_umls_tree_from_tsv,(filepath: str),,,,,,,,UmlsSemanticTypeTree,,,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,NamedTuple from typing,import,,,,Import: NamedTuple from typing,allenai,scispacy,v0.5.4,"from typing import NamedTuple, List, Dict, Deque, Any, Optional",typing,NamedTuple,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,List from typing,import,,,,Import: List from typing,allenai,scispacy,v0.5.4,"from typing import NamedTuple, List, Dict, Deque, Any, Optional",typing,List,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,Dict from typing,import,,,,Import: Dict from typing,allenai,scispacy,v0.5.4,"from typing import NamedTuple, List, Dict, Deque, Any, Optional",typing,Dict,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,Deque from typing,import,,,,Import: Deque from typing,allenai,scispacy,v0.5.4,"from typing import NamedTuple, List, Dict, Deque, Any, Optional",typing,Deque,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,Any from typing,import,,,,Import: Any from typing,allenai,scispacy,v0.5.4,"from typing import NamedTuple, List, Dict, Deque, Any, Optional",typing,Any,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,Optional from typing,import,,,,Import: Optional from typing,allenai,scispacy,v0.5.4,"from typing import NamedTuple, List, Dict, Deque, Any, Optional",typing,Optional,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,deque from collections,import,,,,Import: deque from collections,allenai,scispacy,v0.5.4,from collections import deque,collections,deque,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,umls_semantic_type_tree.py,python,cached_path from scispacy.file_cache,local_import,,,,Import: cached_path from scispacy.file_cache,allenai,scispacy,v0.5.4,from scispacy.file_cache import cached_path,scispacy.file_cache,cached_path,,,scispacy.file_cache,,,,,,,,,,,,
,umls_semantic_type_tree.py,python,,,,,,File: scispacy,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,umls_semantic_type_tree.py,python,,,,,,Directory: scispacy\umls_semantic_type_tree.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,umls_utils.py,python,"read_umls_file_headers(meta_path: str, filename: str) -> List[str]",function,,,,"Function: read_umls_file_headers(meta_path: str, filename: str) -> List[str]",allenai,scispacy,v0.5.4,,,,read_umls_file_headers,"(meta_path: str, filename: str)",,,,,,,,List[str],,,,,
allenai_scispacy_v0.5.4,umls_utils.py,python,"read_umls_concepts(
    meta_path: str,
    concept_details: Dict,
    source: Optional[str] = None,
    lang: str = ""ENG"",
    non_suppressed: bool = True,
)",function,,,,"Function: read_umls_concepts(
    meta_path: str,
    concept_details: Dict,
    source: Optional[str] = None,
    lang: str = ""ENG"",
    non_suppressed: bool = True,
)",allenai,scispacy,v0.5.4,,,,read_umls_concepts,"(
    meta_path: str,
    concept_details: Dict,
    source: Optional[str] = None,
    lang: str = ""ENG"",
    non_suppressed: bool = True,
)",,,,,,,,,,,,,
allenai_scispacy_v0.5.4,umls_utils.py,python,"read_umls_types(meta_path: str, concept_details: Dict)",function,,,,"Function: read_umls_types(meta_path: str, concept_details: Dict)",allenai,scispacy,v0.5.4,,,,read_umls_types,"(meta_path: str, concept_details: Dict)",,,,,,,,,,,,,
allenai_scispacy_v0.5.4,umls_utils.py,python,"read_umls_definitions(meta_path: str, concept_details: Dict)",function,,,,"Function: read_umls_definitions(meta_path: str, concept_details: Dict)",allenai,scispacy,v0.5.4,,,,read_umls_definitions,"(meta_path: str, concept_details: Dict)",,,,,,,,,,,,,
allenai_scispacy_v0.5.4,umls_utils.py,python,"DEF_SOURCES_PREFERRED = {""NCI_BRIDG"", ""NCI_NCI-GLOSS"", ""NCI"", ""GO"", ""MSH"", ""NCI_FDA""}",constant,"DEF_SOURCES_PREFERRED = {""NCI_BRIDG"", ""NCI_NCI-GLOSS"", ""NCI"", ""GO"", ""MSH"", ""NCI_FDA""}",DEF_SOURCES_PREFERRED,"{""NCI_BRIDG"", ""NCI_NCI-GLOSS"", ""NCI"", ""GO"", ""MSH"", ""NCI_FDA""}","Constant: DEF_SOURCES_PREFERRED = {""NCI_BRIDG"", ""NCI_NCI-GLOSS"", ""NCI"", ""GO"", ""MSH"", ""NCI_FDA""}",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,umls_utils.py,python,Optional from typing,import,,,,Import: Optional from typing,allenai,scispacy,v0.5.4,"from typing import Optional, List, Dict",typing,Optional,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,umls_utils.py,python,List from typing,import,,,,Import: List from typing,allenai,scispacy,v0.5.4,"from typing import Optional, List, Dict",typing,List,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,umls_utils.py,python,Dict from typing,import,,,,Import: Dict from typing,allenai,scispacy,v0.5.4,"from typing import Optional, List, Dict",typing,Dict,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,umls_utils.py,python,Entity from scispacy.linking_utils,local_import,,,,Import: Entity from scispacy.linking_utils,allenai,scispacy,v0.5.4,"from scispacy.linking_utils import Entity as UmlsEntity, UmlsKnowledgeBase",scispacy.linking_utils,Entity,,,scispacy.linking_utils,,,,,,,,,,,,
allenai_scispacy_v0.5.4,umls_utils.py,python,UmlsKnowledgeBase from scispacy.linking_utils,local_import,,,,Import: UmlsKnowledgeBase from scispacy.linking_utils,allenai,scispacy,v0.5.4,"from scispacy.linking_utils import Entity as UmlsEntity, UmlsKnowledgeBase",scispacy.linking_utils,UmlsKnowledgeBase,,,scispacy.linking_utils,,,,,,,,,,,,
,umls_utils.py,python,,,,,,File: scispacy,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,umls_utils.py,python,,,,,,Directory: scispacy\umls_utils.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,util.py,python,[instance] WhitespaceTokenizer.vocab = vocab,class_field,,,,Class field: [instance] WhitespaceTokenizer.vocab = vocab,allenai,scispacy,v0.5.4,,,,,,,WhitespaceTokenizer,__init__,"(self, vocab)",self.vocab = vocab,self.vocab = vocab,,,,,,,
allenai_scispacy_v0.5.4,util.py,python,"WhitespaceTokenizer.__init__(self, vocab)",class_method,,,,"Class method: WhitespaceTokenizer.__init__(self, vocab)",allenai,scispacy,v0.5.4,,,,,,,WhitespaceTokenizer,__init__,"(self, vocab)",,,,,,,,,
allenai_scispacy_v0.5.4,util.py,python,"WhitespaceTokenizer.__call__(self, text)",class_method,,,,"Class method: WhitespaceTokenizer.__call__(self, text)",allenai,scispacy,v0.5.4,,,,,,,WhitespaceTokenizer,__call__,"(self, text)",,,,,,,,,
allenai_scispacy_v0.5.4,util.py,python,WhitespaceTokenizer,class,,,,Class: WhitespaceTokenizer,allenai,scispacy,v0.5.4,,,,,,,WhitespaceTokenizer,,,,,,,,,,,
allenai_scispacy_v0.5.4,util.py,python,"save_model(nlp: Language, output_path: str)",function,,,,"Function: save_model(nlp: Language, output_path: str)",allenai,scispacy,v0.5.4,,,,save_model,"(nlp: Language, output_path: str)",,,,,,,,,,,,,
allenai_scispacy_v0.5.4,util.py,python,create_combined_rule_model() -> Language,function,,,,Function: create_combined_rule_model() -> Language,allenai,scispacy,v0.5.4,,,,create_combined_rule_model,(),,,,,,,,Language,,,,,
allenai_scispacy_v0.5.4,util.py,python,spacy,import,,,,Import: spacy,allenai,scispacy,v0.5.4,import spacy,,spacy,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,util.py,python,Language from spacy.language,local_import,,,,Import: Language from spacy.language,allenai,scispacy,v0.5.4,from spacy.language import Language,spacy.language,Language,,,spacy.language,,,,,,,,,,,,
allenai_scispacy_v0.5.4,util.py,python,Doc from spacy.tokens,local_import,,,,Import: Doc from spacy.tokens,allenai,scispacy,v0.5.4,from spacy.tokens import Doc,spacy.tokens,Doc,,,spacy.tokens,,,,,,,,,,,,
allenai_scispacy_v0.5.4,util.py,python,pysbd_sentencizer from scispacy.custom_sentence_segmenter,local_import,,,,Import: pysbd_sentencizer from scispacy.custom_sentence_segmenter,allenai,scispacy,v0.5.4,from scispacy.custom_sentence_segmenter import pysbd_sentencizer,scispacy.custom_sentence_segmenter,pysbd_sentencizer,,,scispacy.custom_sentence_segmenter,,,,,,,,,,,,
allenai_scispacy_v0.5.4,util.py,python,combined_rule_tokenizer from scispacy.custom_tokenizer,local_import,,,,Import: combined_rule_tokenizer from scispacy.custom_tokenizer,allenai,scispacy,v0.5.4,from scispacy.custom_tokenizer import combined_rule_tokenizer,scispacy.custom_tokenizer,combined_rule_tokenizer,,,scispacy.custom_tokenizer,,,,,,,,,,,,
,util.py,python,,,,,,File: scispacy,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,util.py,python,,,,,,Directory: scispacy\util.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,version.py,python,"_MAJOR = ""0""",constant,"_MAJOR = ""0""",_MAJOR,"""0""","Constant: _MAJOR = ""0""",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,version.py,python,"_MINOR = ""5""",constant,"_MINOR = ""5""",_MINOR,"""5""","Constant: _MINOR = ""5""",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,version.py,python,"_REVISION = ""4""",constant,"_REVISION = ""4""",_REVISION,"""4""","Constant: _REVISION = ""4""",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,version.py,python,"VERSION_SHORT = ""{0}.{1}"".format(_MAJOR, _MINOR)",constant,"VERSION_SHORT = ""{0}.{1}"".format(_MAJOR, _MINOR)",VERSION_SHORT,"""{0}.{1}"".format(_MAJOR, _MINOR)","Constant: VERSION_SHORT = ""{0}.{1}"".format(_MAJOR, _MINOR)",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,version.py,python,"VERSION = ""{0}.{1}.{2}"".format(_MAJOR, _MINOR, _REVISION)",constant,"VERSION = ""{0}.{1}.{2}"".format(_MAJOR, _MINOR, _REVISION)",VERSION,"""{0}.{1}.{2}"".format(_MAJOR, _MINOR, _REVISION)","Constant: VERSION = ""{0}.{1}.{2}"".format(_MAJOR, _MINOR, _REVISION)",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,version.py,python,,,,,,File: scispacy,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,version.py,python,,,,,,Directory: scispacy\version.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,__init__.py,python,VERSION from scispacy.version,local_import,,,,Import: VERSION from scispacy.version,allenai,scispacy,v0.5.4,from scispacy.version import VERSION as __version__,scispacy.version,VERSION,,,scispacy.version,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scispacy,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scispacy\__init__.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,convert_freqs.py,python,"read_freqs(freqs_loc, max_length=100, min_doc_freq=5, min_freq=50)",function,,,,"Function: read_freqs(freqs_loc, max_length=100, min_doc_freq=5, min_freq=50)",allenai,scispacy,v0.5.4,,,,read_freqs,"(freqs_loc, max_length=100, min_doc_freq=5, min_freq=50)",,,,,,,,,,,,,
allenai_scispacy_v0.5.4,convert_freqs.py,python,"main(input_path: str, output_path: str, min_word_frequency: int)",function,,,,"Function: main(input_path: str, output_path: str, min_word_frequency: int)",allenai,scispacy,v0.5.4,,,,main,"(input_path: str, output_path: str, min_word_frequency: int)",,,,,,,,,,,,,
allenai_scispacy_v0.5.4,convert_freqs.py,python,argparse,import,,,,Import: argparse,allenai,scispacy,v0.5.4,import argparse,,argparse,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,convert_freqs.py,python,math,import,,,,Import: math,allenai,scispacy,v0.5.4,import math,,math,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,convert_freqs.py,python,json,import,,,,Import: json,allenai,scispacy,v0.5.4,import json,,json,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,convert_freqs.py,python,literal_eval from ast,import,,,,Import: literal_eval from ast,allenai,scispacy,v0.5.4,from ast import literal_eval,ast,literal_eval,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,convert_freqs.py,python,tqdm from tqdm,import,,,,Import: tqdm from tqdm,allenai,scispacy,v0.5.4,from tqdm import tqdm,tqdm,tqdm,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,convert_freqs.py,python,PreshCounter from preshed.counter,local_import,,,,Import: PreshCounter from preshed.counter,allenai,scispacy,v0.5.4,from preshed.counter import PreshCounter,preshed.counter,PreshCounter,,,preshed.counter,,,,,,,,,,,,
allenai_scispacy_v0.5.4,convert_freqs.py,python,ensure_path from spacy.util,local_import,,,,Import: ensure_path from spacy.util,allenai,scispacy,v0.5.4,from spacy.util import ensure_path,spacy.util,ensure_path,,,spacy.util,,,,,,,,,,,,
allenai_scispacy_v0.5.4,convert_freqs.py,python,cached_path from scispacy.file_cache,local_import,,,,Import: cached_path from scispacy.file_cache,allenai,scispacy,v0.5.4,from scispacy.file_cache import cached_path,scispacy.file_cache,cached_path,,,scispacy.file_cache,,,,,,,,,,,,
,convert_freqs.py,python,,,,,,File: scripts,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,convert_freqs.py,python,,,,,,Directory: scripts\convert_freqs.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,count_word_frequencies.py,python,"count_frequencies(language_class: Language, input_path: Path)",function,,,,"Function: count_frequencies(language_class: Language, input_path: Path)",allenai,scispacy,v0.5.4,,,,count_frequencies,"(language_class: Language, input_path: Path)",,,,,,,,,,,,,
allenai_scispacy_v0.5.4,count_word_frequencies.py,python,"parallelize(func, iterator, n_jobs)",function,,,,"Function: parallelize(func, iterator, n_jobs)",allenai,scispacy,v0.5.4,,,,parallelize,"(func, iterator, n_jobs)",,,,,,,,,,,,,
allenai_scispacy_v0.5.4,count_word_frequencies.py,python,"merge_counts(frequencies: List[Tuple[Counter, Counter]], output_path: str)",function,,,,"Function: merge_counts(frequencies: List[Tuple[Counter, Counter]], output_path: str)",allenai,scispacy,v0.5.4,,,,merge_counts,"(frequencies: List[Tuple[Counter, Counter]], output_path: str)",,,,,,,,,,,,,
allenai_scispacy_v0.5.4,count_word_frequencies.py,python,List from typing,import,,,,Import: List from typing,allenai,scispacy,v0.5.4,"from typing import List, Tuple",typing,List,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,count_word_frequencies.py,python,Tuple from typing,import,,,,Import: Tuple from typing,allenai,scispacy,v0.5.4,"from typing import List, Tuple",typing,Tuple,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,count_word_frequencies.py,python,os,import,,,,Import: os,allenai,scispacy,v0.5.4,import os,,os,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,count_word_frequencies.py,python,io,import,,,,Import: io,allenai,scispacy,v0.5.4,import io,,io,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,count_word_frequencies.py,python,sys,import,,,,Import: sys,allenai,scispacy,v0.5.4,import sys,,sys,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,count_word_frequencies.py,python,tempfile,import,,,,Import: tempfile,allenai,scispacy,v0.5.4,import tempfile,,tempfile,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,count_word_frequencies.py,python,shutil,import,,,,Import: shutil,allenai,scispacy,v0.5.4,import shutil,,shutil,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,count_word_frequencies.py,python,Counter from collections,import,,,,Import: Counter from collections,allenai,scispacy,v0.5.4,from collections import Counter,collections,Counter,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,count_word_frequencies.py,python,Path from pathlib,import,,,,Import: Path from pathlib,allenai,scispacy,v0.5.4,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,count_word_frequencies.py,python,Pool from multiprocessing,import,,,,Import: Pool from multiprocessing,allenai,scispacy,v0.5.4,from multiprocessing import Pool,multiprocessing,Pool,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,count_word_frequencies.py,python,plac,import,,,,Import: plac,allenai,scispacy,v0.5.4,import plac,,plac,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,count_word_frequencies.py,python,spacy.util,import,,,,Import: spacy.util,allenai,scispacy,v0.5.4,import spacy.util,,spacy.util,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,count_word_frequencies.py,python,Language from spacy.language,local_import,,,,Import: Language from spacy.language,allenai,scispacy,v0.5.4,from spacy.language import Language,spacy.language,Language,,,spacy.language,,,,,,,,,,,,
allenai_scispacy_v0.5.4,count_word_frequencies.py,python,combined_rule_tokenizer from scispacy.custom_tokenizer,local_import,,,,Import: combined_rule_tokenizer from scispacy.custom_tokenizer,allenai,scispacy,v0.5.4,from scispacy.custom_tokenizer import combined_rule_tokenizer,scispacy.custom_tokenizer,combined_rule_tokenizer,,,scispacy.custom_tokenizer,,,,,,,,,,,,
,count_word_frequencies.py,python,,,,,,File: scripts,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,count_word_frequencies.py,python,,,,,,Directory: scripts\count_word_frequencies.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,create_linker.py,python,"main(kb_path: str, output_path: str)",function,,,,"Function: main(kb_path: str, output_path: str)",allenai,scispacy,v0.5.4,,,,main,"(kb_path: str, output_path: str)",,,,,,,,,,,,,
allenai_scispacy_v0.5.4,create_linker.py,python,argparse,import,,,,Import: argparse,allenai,scispacy,v0.5.4,import argparse,,argparse,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,create_linker.py,python,os,import,,,,Import: os,allenai,scispacy,v0.5.4,import os,,os,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,create_linker.py,python,create_tfidf_ann_index from scispacy.candidate_generation,local_import,,,,Import: create_tfidf_ann_index from scispacy.candidate_generation,allenai,scispacy,v0.5.4,from scispacy.candidate_generation import create_tfidf_ann_index,scispacy.candidate_generation,create_tfidf_ann_index,,,scispacy.candidate_generation,,,,,,,,,,,,
allenai_scispacy_v0.5.4,create_linker.py,python,KnowledgeBase from scispacy.linking_utils,local_import,,,,Import: KnowledgeBase from scispacy.linking_utils,allenai,scispacy,v0.5.4,from scispacy.linking_utils import KnowledgeBase,scispacy.linking_utils,KnowledgeBase,,,scispacy.linking_utils,,,,,,,,,,,,
,create_linker.py,python,,,,,,File: scripts,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,create_linker.py,python,,,,,,Directory: scripts\create_linker.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,evaluate_ner.py,python,"main(model_path: str, dataset: str, output_path: str, code: Optional[str], med_mentions_folder_path: Optional[str], gpu_id: Optional[int])",function,,,,"Function: main(model_path: str, dataset: str, output_path: str, code: Optional[str], med_mentions_folder_path: Optional[str], gpu_id: Optional[int])",allenai,scispacy,v0.5.4,,,,main,"(model_path: str, dataset: str, output_path: str, code: Optional[str], med_mentions_folder_path: Optional[str], gpu_id: Optional[int])",,,,,,,,,,,,,
allenai_scispacy_v0.5.4,evaluate_ner.py,python,Optional from typing,import,,,,Import: Optional from typing,allenai,scispacy,v0.5.4,from typing import Optional,typing,Optional,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,evaluate_ner.py,python,argparse,import,,,,Import: argparse,allenai,scispacy,v0.5.4,import argparse,,argparse,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,evaluate_ner.py,python,spacy,import,,,,Import: spacy,allenai,scispacy,v0.5.4,import spacy,,spacy,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,evaluate_ner.py,python,importlib,import,,,,Import: importlib,allenai,scispacy,v0.5.4,import importlib,,importlib,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,evaluate_ner.py,python,require_gpu from thinc.api,local_import,,,,Import: require_gpu from thinc.api,allenai,scispacy,v0.5.4,from thinc.api import require_gpu,thinc.api,require_gpu,,,thinc.api,,,,,,,,,,,,
allenai_scispacy_v0.5.4,evaluate_ner.py,python,read_full_med_mentions from scispacy.data_util,local_import,,,,Import: read_full_med_mentions from scispacy.data_util,allenai,scispacy,v0.5.4,"from scispacy.data_util import read_full_med_mentions, read_ner_from_tsv",scispacy.data_util,read_full_med_mentions,,,scispacy.data_util,,,,,,,,,,,,
allenai_scispacy_v0.5.4,evaluate_ner.py,python,read_ner_from_tsv from scispacy.data_util,local_import,,,,Import: read_ner_from_tsv from scispacy.data_util,allenai,scispacy,v0.5.4,"from scispacy.data_util import read_full_med_mentions, read_ner_from_tsv",scispacy.data_util,read_ner_from_tsv,,,scispacy.data_util,,,,,,,,,,,,
allenai_scispacy_v0.5.4,evaluate_ner.py,python,evaluate_ner from scispacy.train_utils,local_import,,,,Import: evaluate_ner from scispacy.train_utils,allenai,scispacy,v0.5.4,from scispacy.train_utils import evaluate_ner,scispacy.train_utils,evaluate_ner,,,scispacy.train_utils,,,,,,,,,,,,
,evaluate_ner.py,python,,,,,,File: scripts,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,evaluate_ner.py,python,,,,,,Directory: scripts\evaluate_ner.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,export_umls_json.py,python,"main(meta_path: str, output_path: str, lang: str = None, source: str = None)",function,,,,"Function: main(meta_path: str, output_path: str, lang: str = None, source: str = None)",allenai,scispacy,v0.5.4,,,,main,"(meta_path: str, output_path: str, lang: str = None, source: str = None)",,,,,,,,,,,,,
allenai_scispacy_v0.5.4,export_umls_json.py,python,json,import,,,,Import: json,allenai,scispacy,v0.5.4,import json,,json,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,export_umls_json.py,python,argparse,import,,,,Import: argparse,allenai,scispacy,v0.5.4,import argparse,,argparse,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,export_umls_json.py,python,umls_utils from scispacy,import,,,,Import: umls_utils from scispacy,allenai,scispacy,v0.5.4,from scispacy import umls_utils,scispacy,umls_utils,,,,,,,,,,,,,,,
,export_umls_json.py,python,,,,,,File: scripts,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,export_umls_json.py,python,,,,,,Directory: scripts\export_umls_json.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,install_local_packages.py,python,main(),function,,,,Function: main(),allenai,scispacy,v0.5.4,,,,main,(),,,,,,,,,,,,,
allenai_scispacy_v0.5.4,install_local_packages.py,python,os,import,,,,Import: os,allenai,scispacy,v0.5.4,import os,,os,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,install_local_packages.py,python,VERSION from scispacy.version,local_import,,,,Import: VERSION from scispacy.version,allenai,scispacy,v0.5.4,from scispacy.version import VERSION,scispacy.version,VERSION,,,scispacy.version,,,,,,,,,,,,
,install_local_packages.py,python,,,,,,File: scripts,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,install_local_packages.py,python,,,,,,Directory: scripts\install_local_packages.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,install_remote_packages.py,python,main(),function,,,,Function: main(),allenai,scispacy,v0.5.4,,,,main,(),,,,,,,,,,,,,
allenai_scispacy_v0.5.4,install_remote_packages.py,python,os,import,,,,Import: os,allenai,scispacy,v0.5.4,import os,,os,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,install_remote_packages.py,python,VERSION from scispacy.version,local_import,,,,Import: VERSION from scispacy.version,allenai,scispacy,v0.5.4,from scispacy.version import VERSION,scispacy.version,VERSION,,,scispacy.version,,,,,,,,,,,,
,install_remote_packages.py,python,,,,,,File: scripts,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,install_remote_packages.py,python,,,,,,Directory: scripts\install_remote_packages.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,print_out_metrics.py,python,main(),function,,,,Function: main(),allenai,scispacy,v0.5.4,,,,main,(),,,,,,,,,,,,,
allenai_scispacy_v0.5.4,print_out_metrics.py,python,os,import,,,,Import: os,allenai,scispacy,v0.5.4,import os,,os,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,print_out_metrics.py,python,json,import,,,,Import: json,allenai,scispacy,v0.5.4,import json,,json,,,,,,,,,,,,,,,
,print_out_metrics.py,python,,,,,,File: scripts,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,print_out_metrics.py,python,,,,,,Directory: scripts\print_out_metrics.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,smoke_test.py,python,main(),function,,,,Function: main(),allenai,scispacy,v0.5.4,,,,main,(),,,,,,,,,,,,,
allenai_scispacy_v0.5.4,smoke_test.py,python,spacy,import,,,,Import: spacy,allenai,scispacy,v0.5.4,import spacy,,spacy,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,smoke_test.py,python,tqdm from tqdm,import,,,,Import: tqdm from tqdm,allenai,scispacy,v0.5.4,from tqdm import tqdm,tqdm,tqdm,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,smoke_test.py,python,AbbreviationDetector from scispacy.abbreviation,local_import,,,,Import: AbbreviationDetector from scispacy.abbreviation,allenai,scispacy,v0.5.4,from scispacy.abbreviation import AbbreviationDetector,scispacy.abbreviation,AbbreviationDetector,,,scispacy.abbreviation,,,,,,,,,,,,
allenai_scispacy_v0.5.4,smoke_test.py,python,EntityLinker from scispacy.linking,local_import,,,,Import: EntityLinker from scispacy.linking,allenai,scispacy,v0.5.4,from scispacy.linking import EntityLinker,scispacy.linking,EntityLinker,,,scispacy.linking,,,,,,,,,,,,
,smoke_test.py,python,,,,,,File: scripts,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,smoke_test.py,python,,,,,,Directory: scripts\smoke_test.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,uninstall_local_packages.py,python,main(),function,,,,Function: main(),allenai,scispacy,v0.5.4,,,,main,(),,,,,,,,,,,,,
allenai_scispacy_v0.5.4,uninstall_local_packages.py,python,os,import,,,,Import: os,allenai,scispacy,v0.5.4,import os,,os,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,uninstall_local_packages.py,python,VERSION from scispacy.version,local_import,,,,Import: VERSION from scispacy.version,allenai,scispacy,v0.5.4,from scispacy.version import VERSION,scispacy.version,VERSION,,,scispacy.version,,,,,,,,,,,,
,uninstall_local_packages.py,python,,,,,,File: scripts,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,uninstall_local_packages.py,python,,,,,,Directory: scripts\uninstall_local_packages.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,conftest.py,python,"get_spacy_model(
    spacy_model_name: str,
    pos_tags: bool,
    parse: bool,
    ner: bool,
    with_custom_tokenizer: bool = False,
    with_sentence_segmenter: bool = False,
    with_serializable_abbreviation_detector: Optional[bool] = None,
) -> SpacyModelType",function,,,,"Function: get_spacy_model(
    spacy_model_name: str,
    pos_tags: bool,
    parse: bool,
    ner: bool,
    with_custom_tokenizer: bool = False,
    with_sentence_segmenter: bool = False,
    with_serializable_abbreviation_detector: Optional[bool] = None,
) -> SpacyModelType",allenai,scispacy,v0.5.4,,,,get_spacy_model,"(
    spacy_model_name: str,
    pos_tags: bool,
    parse: bool,
    ner: bool,
    with_custom_tokenizer: bool = False,
    with_sentence_segmenter: bool = False,
    with_serializable_abbreviation_detector: Optional[bool] = None,
)",,,,,,,,SpacyModelType,,,,,
allenai_scispacy_v0.5.4,conftest.py,python,"LOADED_SPACY_MODELS: Dict[Tuple[str, bool, bool, bool], SpacyModelType] = {}",constant,"LOADED_SPACY_MODELS: Dict[Tuple[str, bool, bool, bool], SpacyModelType] = {}",LOADED_SPACY_MODELS,{},"Constant: LOADED_SPACY_MODELS: Dict[Tuple[str, bool, bool, bool], SpacyModelType] = {}",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,conftest.py,python,Dict from typing,import,,,,Import: Dict from typing,allenai,scispacy,v0.5.4,"from typing import Dict, Tuple, Optional",typing,Dict,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,conftest.py,python,Tuple from typing,import,,,,Import: Tuple from typing,allenai,scispacy,v0.5.4,"from typing import Dict, Tuple, Optional",typing,Tuple,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,conftest.py,python,Optional from typing,import,,,,Import: Optional from typing,allenai,scispacy,v0.5.4,"from typing import Dict, Tuple, Optional",typing,Optional,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,conftest.py,python,os,import,,,,Import: os,allenai,scispacy,v0.5.4,import os,,os,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,conftest.py,python,pytest,import,,,,Import: pytest,allenai,scispacy,v0.5.4,import pytest,,pytest,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,conftest.py,python,spacy,import,,,,Import: spacy,allenai,scispacy,v0.5.4,import spacy,,spacy,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,conftest.py,python,Language from spacy.language,local_import,,,,Import: Language from spacy.language,allenai,scispacy,v0.5.4,from spacy.language import Language as SpacyModelType,spacy.language,Language,,,spacy.language,,,,,,,,,,,,
allenai_scispacy_v0.5.4,conftest.py,python,download from spacy.cli.download,local_import,,,,Import: download from spacy.cli.download,allenai,scispacy,v0.5.4,from spacy.cli.download import download as spacy_download,spacy.cli.download,download,,,spacy.cli.download,,,,,,,,,,,,
allenai_scispacy_v0.5.4,conftest.py,python,pysbd_sentencizer from scispacy.custom_sentence_segmenter,local_import,,,,Import: pysbd_sentencizer from scispacy.custom_sentence_segmenter,allenai,scispacy,v0.5.4,from scispacy.custom_sentence_segmenter import pysbd_sentencizer,scispacy.custom_sentence_segmenter,pysbd_sentencizer,,,scispacy.custom_sentence_segmenter,,,,,,,,,,,,
allenai_scispacy_v0.5.4,conftest.py,python,combined_rule_tokenizer from scispacy.custom_tokenizer,local_import,,,,Import: combined_rule_tokenizer from scispacy.custom_tokenizer,allenai,scispacy,v0.5.4,"from scispacy.custom_tokenizer import combined_rule_tokenizer, combined_rule_prefixes, remove_new_lines",scispacy.custom_tokenizer,combined_rule_tokenizer,,,scispacy.custom_tokenizer,,,,,,,,,,,,
allenai_scispacy_v0.5.4,conftest.py,python,combined_rule_prefixes from scispacy.custom_tokenizer,local_import,,,,Import: combined_rule_prefixes from scispacy.custom_tokenizer,allenai,scispacy,v0.5.4,"from scispacy.custom_tokenizer import combined_rule_tokenizer, combined_rule_prefixes, remove_new_lines",scispacy.custom_tokenizer,combined_rule_prefixes,,,scispacy.custom_tokenizer,,,,,,,,,,,,
allenai_scispacy_v0.5.4,conftest.py,python,remove_new_lines from scispacy.custom_tokenizer,local_import,,,,Import: remove_new_lines from scispacy.custom_tokenizer,allenai,scispacy,v0.5.4,"from scispacy.custom_tokenizer import combined_rule_tokenizer, combined_rule_prefixes, remove_new_lines",scispacy.custom_tokenizer,remove_new_lines,,,scispacy.custom_tokenizer,,,,,,,,,,,,
allenai_scispacy_v0.5.4,conftest.py,python,AbbreviationDetector from scispacy.abbreviation,local_import,,,,Import: AbbreviationDetector from scispacy.abbreviation,allenai,scispacy,v0.5.4,from scispacy.abbreviation import AbbreviationDetector,scispacy.abbreviation,AbbreviationDetector,,,scispacy.abbreviation,,,,,,,,,,,,
,conftest.py,python,,,,,,File: tests,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,conftest.py,python,,,,,,Directory: tests\conftest.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_abbreviation_detection.py,python,TestAbbreviationDetector.setUp(self),class_method,,,,Class method: TestAbbreviationDetector.setUp(self),allenai,scispacy,v0.5.4,,,,,,,TestAbbreviationDetector,setUp,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_abbreviation_detection.py,python,TestAbbreviationDetector.test_find_abbreviation(self),class_method,,,,Class method: TestAbbreviationDetector.test_find_abbreviation(self),allenai,scispacy,v0.5.4,,,,,,,TestAbbreviationDetector,test_find_abbreviation,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_abbreviation_detection.py,python,TestAbbreviationDetector.test_filter_matches(self),class_method,,,,Class method: TestAbbreviationDetector.test_filter_matches(self),allenai,scispacy,v0.5.4,,,,,,,TestAbbreviationDetector,test_filter_matches,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_abbreviation_detection.py,python,TestAbbreviationDetector.test_abbreviation_detection(self),class_method,,,,Class method: TestAbbreviationDetector.test_abbreviation_detection(self),allenai,scispacy,v0.5.4,,,,,,,TestAbbreviationDetector,test_abbreviation_detection,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_abbreviation_detection.py,python,TestAbbreviationDetector.test_find(self),class_method,,,,Class method: TestAbbreviationDetector.test_find(self),allenai,scispacy,v0.5.4,,,,,,,TestAbbreviationDetector,test_find,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_abbreviation_detection.py,python,TestAbbreviationDetector.test_issue_158(self),class_method,,,,Class method: TestAbbreviationDetector.test_issue_158(self),allenai,scispacy,v0.5.4,,,,,,,TestAbbreviationDetector,test_issue_158,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_abbreviation_detection.py,python,TestAbbreviationDetector.test_issue_192(self),class_method,,,,Class method: TestAbbreviationDetector.test_issue_192(self),allenai,scispacy,v0.5.4,,,,,,,TestAbbreviationDetector,test_issue_192,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_abbreviation_detection.py,python,TestAbbreviationDetector.test_issue_161(self),class_method,,,,Class method: TestAbbreviationDetector.test_issue_161(self),allenai,scispacy,v0.5.4,,,,,,,TestAbbreviationDetector,test_issue_161,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_abbreviation_detection.py,python,TestAbbreviationDetector.test_empty_span(self),class_method,,,,Class method: TestAbbreviationDetector.test_empty_span(self),allenai,scispacy,v0.5.4,,,,,,,TestAbbreviationDetector,test_empty_span,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_abbreviation_detection.py,python,TestAbbreviationDetector.test_space_issue(self),class_method,,,,Class method: TestAbbreviationDetector.test_space_issue(self),allenai,scispacy,v0.5.4,,,,,,,TestAbbreviationDetector,test_space_issue,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_abbreviation_detection.py,python,TestAbbreviationDetector.test_multiple_spaces(self),class_method,,,,Class method: TestAbbreviationDetector.test_multiple_spaces(self),allenai,scispacy,v0.5.4,,,,,,,TestAbbreviationDetector,test_multiple_spaces,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_abbreviation_detection.py,python,TestAbbreviationDetector.test_issue_441(self),class_method,,,,Class method: TestAbbreviationDetector.test_issue_441(self),allenai,scispacy,v0.5.4,,,,,,,TestAbbreviationDetector,test_issue_441,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_abbreviation_detection.py,python,[pytest.mark.xfail] TestAbbreviationDetector.test_difficult_cases(self),class_method,,,,Class method: [pytest.mark.xfail] TestAbbreviationDetector.test_difficult_cases(self),allenai,scispacy,v0.5.4,,,,,,,TestAbbreviationDetector,test_difficult_cases,(self),,,,,,,,,pytest.mark.xfail
allenai_scispacy_v0.5.4,test_abbreviation_detection.py,python,TestAbbreviationDetector(unittest.TestCase),class,,,,Class: TestAbbreviationDetector(unittest.TestCase),allenai,scispacy,v0.5.4,,,,,,,TestAbbreviationDetector,,,,,,,,,(unittest.TestCase),,
allenai_scispacy_v0.5.4,test_abbreviation_detection.py,python,unittest,import,,,,Import: unittest,allenai,scispacy,v0.5.4,import unittest,,unittest,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_abbreviation_detection.py,python,spacy,import,,,,Import: spacy,allenai,scispacy,v0.5.4,import spacy,,spacy,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_abbreviation_detection.py,python,pytest,import,,,,Import: pytest,allenai,scispacy,v0.5.4,import pytest,,pytest,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_abbreviation_detection.py,python,AbbreviationDetector from scispacy.abbreviation,local_import,,,,Import: AbbreviationDetector from scispacy.abbreviation,allenai,scispacy,v0.5.4,"from scispacy.abbreviation import (
    AbbreviationDetector,
    find_abbreviation,
    filter_matches,
)",scispacy.abbreviation,AbbreviationDetector,,,scispacy.abbreviation,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_abbreviation_detection.py,python,find_abbreviation from scispacy.abbreviation,local_import,,,,Import: find_abbreviation from scispacy.abbreviation,allenai,scispacy,v0.5.4,"from scispacy.abbreviation import (
    AbbreviationDetector,
    find_abbreviation,
    filter_matches,
)",scispacy.abbreviation,find_abbreviation,,,scispacy.abbreviation,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_abbreviation_detection.py,python,filter_matches from scispacy.abbreviation,local_import,,,,Import: filter_matches from scispacy.abbreviation,allenai,scispacy,v0.5.4,"from scispacy.abbreviation import (
    AbbreviationDetector,
    find_abbreviation,
    filter_matches,
)",scispacy.abbreviation,filter_matches,,,scispacy.abbreviation,,,,,,,,,,,,
,test_abbreviation_detection.py,python,,,,,,File: tests,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,test_abbreviation_detection.py,python,,,,,,Directory: tests\test_abbreviation_detection.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_candidate_generation.py,python,TestCandidateGeneration.test_create_index(self),class_method,,,,Class method: TestCandidateGeneration.test_create_index(self),allenai,scispacy,v0.5.4,,,,,,,TestCandidateGeneration,test_create_index,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_candidate_generation.py,python,TestCandidateGeneration.test_candidate_generation(self),class_method,,,,Class method: TestCandidateGeneration.test_candidate_generation(self),allenai,scispacy,v0.5.4,,,,,,,TestCandidateGeneration,test_candidate_generation,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_candidate_generation.py,python,TestCandidateGeneration.test_empty_list(self),class_method,,,,Class method: TestCandidateGeneration.test_empty_list(self),allenai,scispacy,v0.5.4,,,,,,,TestCandidateGeneration,test_empty_list,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_candidate_generation.py,python,TestCandidateGeneration(unittest.TestCase),class,,,,Class: TestCandidateGeneration(unittest.TestCase),allenai,scispacy,v0.5.4,,,,,,,TestCandidateGeneration,,,,,,,,,(unittest.TestCase),,
allenai_scispacy_v0.5.4,test_candidate_generation.py,python,unittest,import,,,,Import: unittest,allenai,scispacy,v0.5.4,import unittest,,unittest,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_candidate_generation.py,python,tempfile,import,,,,Import: tempfile,allenai,scispacy,v0.5.4,import tempfile,,tempfile,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_candidate_generation.py,python,CandidateGenerator from scispacy.candidate_generation,local_import,,,,Import: CandidateGenerator from scispacy.candidate_generation,allenai,scispacy,v0.5.4,"from scispacy.candidate_generation import CandidateGenerator, create_tfidf_ann_index, MentionCandidate",scispacy.candidate_generation,CandidateGenerator,,,scispacy.candidate_generation,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_candidate_generation.py,python,create_tfidf_ann_index from scispacy.candidate_generation,local_import,,,,Import: create_tfidf_ann_index from scispacy.candidate_generation,allenai,scispacy,v0.5.4,"from scispacy.candidate_generation import CandidateGenerator, create_tfidf_ann_index, MentionCandidate",scispacy.candidate_generation,create_tfidf_ann_index,,,scispacy.candidate_generation,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_candidate_generation.py,python,MentionCandidate from scispacy.candidate_generation,local_import,,,,Import: MentionCandidate from scispacy.candidate_generation,allenai,scispacy,v0.5.4,"from scispacy.candidate_generation import CandidateGenerator, create_tfidf_ann_index, MentionCandidate",scispacy.candidate_generation,MentionCandidate,,,scispacy.candidate_generation,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_candidate_generation.py,python,UmlsKnowledgeBase from scispacy.umls_utils,local_import,,,,Import: UmlsKnowledgeBase from scispacy.umls_utils,allenai,scispacy,v0.5.4,from scispacy.umls_utils import UmlsKnowledgeBase,scispacy.umls_utils,UmlsKnowledgeBase,,,scispacy.umls_utils,,,,,,,,,,,,
,test_candidate_generation.py,python,,,,,,File: tests,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,test_candidate_generation.py,python,,,,,,Directory: tests\test_candidate_generation.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_data_util.py,python,TestDataUtil.setUp(self),class_method,,,,Class method: TestDataUtil.setUp(self),allenai,scispacy,v0.5.4,,,,,,,TestDataUtil,setUp,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_data_util.py,python,TestDataUtil.tearDown(self),class_method,,,,Class method: TestDataUtil.tearDown(self),allenai,scispacy,v0.5.4,,,,,,,TestDataUtil,tearDown,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_data_util.py,python,TestDataUtil.test_example_iterator(self),class_method,,,,Class method: TestDataUtil.test_example_iterator(self),allenai,scispacy,v0.5.4,,,,,,,TestDataUtil,test_example_iterator,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_data_util.py,python,TestDataUtil.test_remove_overlaps(self),class_method,,,,Class method: TestDataUtil.test_remove_overlaps(self),allenai,scispacy,v0.5.4,,,,,,,TestDataUtil,test_remove_overlaps,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_data_util.py,python,TestDataUtil.test_read_ner_from_tsv(self),class_method,,,,Class method: TestDataUtil.test_read_ner_from_tsv(self),allenai,scispacy,v0.5.4,,,,,,,TestDataUtil,test_read_ner_from_tsv,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_data_util.py,python,TestDataUtil(unittest.TestCase),class,,,,Class: TestDataUtil(unittest.TestCase),allenai,scispacy,v0.5.4,,,,,,,TestDataUtil,,,,,,,,,(unittest.TestCase),,
allenai_scispacy_v0.5.4,test_data_util.py,python,os,import,,,,Import: os,allenai,scispacy,v0.5.4,import os,,os,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_data_util.py,python,unittest,import,,,,Import: unittest,allenai,scispacy,v0.5.4,import unittest,,unittest,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_data_util.py,python,shutil,import,,,,Import: shutil,allenai,scispacy,v0.5.4,import shutil,,shutil,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_data_util.py,python,read_full_med_mentions from scispacy.data_util,local_import,,,,Import: read_full_med_mentions from scispacy.data_util,allenai,scispacy,v0.5.4,"from scispacy.data_util import read_full_med_mentions, med_mentions_example_iterator, remove_overlapping_entities",scispacy.data_util,read_full_med_mentions,,,scispacy.data_util,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_data_util.py,python,med_mentions_example_iterator from scispacy.data_util,local_import,,,,Import: med_mentions_example_iterator from scispacy.data_util,allenai,scispacy,v0.5.4,"from scispacy.data_util import read_full_med_mentions, med_mentions_example_iterator, remove_overlapping_entities",scispacy.data_util,med_mentions_example_iterator,,,scispacy.data_util,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_data_util.py,python,remove_overlapping_entities from scispacy.data_util,local_import,,,,Import: remove_overlapping_entities from scispacy.data_util,allenai,scispacy,v0.5.4,"from scispacy.data_util import read_full_med_mentions, med_mentions_example_iterator, remove_overlapping_entities",scispacy.data_util,remove_overlapping_entities,,,scispacy.data_util,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_data_util.py,python,read_ner_from_tsv from scispacy.data_util,local_import,,,,Import: read_ner_from_tsv from scispacy.data_util,allenai,scispacy,v0.5.4,from scispacy.data_util import read_ner_from_tsv,scispacy.data_util,read_ner_from_tsv,,,scispacy.data_util,,,,,,,,,,,,
,test_data_util.py,python,,,,,,File: tests,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,test_data_util.py,python,,,,,,Directory: tests\test_data_util.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_file_cache.py,python,TestFileUtils.setUp(self),class_method,,,,Class method: TestFileUtils.setUp(self),allenai,scispacy,v0.5.4,,,,,,,TestFileUtils,setUp,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_file_cache.py,python,TestFileUtils.tearDown(self),class_method,,,,Class method: TestFileUtils.tearDown(self),allenai,scispacy,v0.5.4,,,,,,,TestFileUtils,tearDown,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_file_cache.py,python,TestFileUtils.test_url_to_filename(self),class_method,,,,Class method: TestFileUtils.test_url_to_filename(self),allenai,scispacy,v0.5.4,,,,,,,TestFileUtils,test_url_to_filename,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_file_cache.py,python,TestFileUtils.test_url_to_filename_with_etags(self),class_method,,,,Class method: TestFileUtils.test_url_to_filename_with_etags(self),allenai,scispacy,v0.5.4,,,,,,,TestFileUtils,test_url_to_filename_with_etags,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_file_cache.py,python,TestFileUtils.test_url_to_filename_with_etags_eliminates_quotes(self),class_method,,,,Class method: TestFileUtils.test_url_to_filename_with_etags_eliminates_quotes(self),allenai,scispacy,v0.5.4,,,,,,,TestFileUtils,test_url_to_filename_with_etags_eliminates_quotes,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_file_cache.py,python,TestFileUtils(unittest.TestCase),class,,,,Class: TestFileUtils(unittest.TestCase),allenai,scispacy,v0.5.4,,,,,,,TestFileUtils,,,,,,,,,(unittest.TestCase),,
allenai_scispacy_v0.5.4,test_file_cache.py,python,os,import,,,,Import: os,allenai,scispacy,v0.5.4,import os,,os,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_file_cache.py,python,pathlib,import,,,,Import: pathlib,allenai,scispacy,v0.5.4,import pathlib,,pathlib,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_file_cache.py,python,json,import,,,,Import: json,allenai,scispacy,v0.5.4,import json,,json,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_file_cache.py,python,unittest,import,,,,Import: unittest,allenai,scispacy,v0.5.4,import unittest,,unittest,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_file_cache.py,python,shutil,import,,,,Import: shutil,allenai,scispacy,v0.5.4,import shutil,,shutil,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_file_cache.py,python,pytest,import,,,,Import: pytest,allenai,scispacy,v0.5.4,import pytest,,pytest,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_file_cache.py,python,filename_to_url from scispacy.file_cache,local_import,,,,Import: filename_to_url from scispacy.file_cache,allenai,scispacy,v0.5.4,"from scispacy.file_cache import filename_to_url, url_to_filename",scispacy.file_cache,filename_to_url,,,scispacy.file_cache,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_file_cache.py,python,url_to_filename from scispacy.file_cache,local_import,,,,Import: url_to_filename from scispacy.file_cache,allenai,scispacy,v0.5.4,"from scispacy.file_cache import filename_to_url, url_to_filename",scispacy.file_cache,url_to_filename,,,scispacy.file_cache,,,,,,,,,,,,
,test_file_cache.py,python,,,,,,File: tests,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,test_file_cache.py,python,,,,,,Directory: tests\test_file_cache.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_hyponym_detector.py,python,TestHyponymDetector.setUp(self),class_method,,,,Class method: TestHyponymDetector.setUp(self),allenai,scispacy,v0.5.4,,,,,,,TestHyponymDetector,setUp,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_hyponym_detector.py,python,TestHyponymDetector.test_sentences(self),class_method,,,,Class method: TestHyponymDetector.test_sentences(self),allenai,scispacy,v0.5.4,,,,,,,TestHyponymDetector,test_sentences,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_hyponym_detector.py,python,TestHyponymDetector.test_find_noun_compound_head(self),class_method,,,,Class method: TestHyponymDetector.test_find_noun_compound_head(self),allenai,scispacy,v0.5.4,,,,,,,TestHyponymDetector,test_find_noun_compound_head,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_hyponym_detector.py,python,TestHyponymDetector.test_expand_noun_phrase(self),class_method,,,,Class method: TestHyponymDetector.test_expand_noun_phrase(self),allenai,scispacy,v0.5.4,,,,,,,TestHyponymDetector,test_expand_noun_phrase,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_hyponym_detector.py,python,TestHyponymDetector(unittest.TestCase),class,,,,Class: TestHyponymDetector(unittest.TestCase),allenai,scispacy,v0.5.4,,,,,,,TestHyponymDetector,,,,,,,,,(unittest.TestCase),,
allenai_scispacy_v0.5.4,test_hyponym_detector.py,python,unittest,import,,,,Import: unittest,allenai,scispacy,v0.5.4,import unittest,,unittest,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_hyponym_detector.py,python,spacy,import,,,,Import: spacy,allenai,scispacy,v0.5.4,import spacy,,spacy,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_hyponym_detector.py,python,HyponymDetector from scispacy.hyponym_detector,local_import,,,,Import: HyponymDetector from scispacy.hyponym_detector,allenai,scispacy,v0.5.4,from scispacy.hyponym_detector import HyponymDetector,scispacy.hyponym_detector,HyponymDetector,,,scispacy.hyponym_detector,,,,,,,,,,,,
,test_hyponym_detector.py,python,,,,,,File: tests,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,test_hyponym_detector.py,python,,,,,,Directory: tests\test_hyponym_detector.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_linking.py,python,TestLinker.setUp(self),class_method,,,,Class method: TestLinker.setUp(self),allenai,scispacy,v0.5.4,,,,,,,TestLinker,setUp,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_linking.py,python,TestLinker.test_naive_entity_linking(self),class_method,,,,Class method: TestLinker.test_naive_entity_linking(self),allenai,scispacy,v0.5.4,,,,,,,TestLinker,test_naive_entity_linking,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_linking.py,python,TestLinker.test_linker_resolves_abbreviations(self),class_method,,,,Class method: TestLinker.test_linker_resolves_abbreviations(self),allenai,scispacy,v0.5.4,,,,,,,TestLinker,test_linker_resolves_abbreviations,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_linking.py,python,TestLinker.test_linker_has_types(self),class_method,,,,Class method: TestLinker.test_linker_has_types(self),allenai,scispacy,v0.5.4,,,,,,,TestLinker,test_linker_has_types,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_linking.py,python,TestLinker(unittest.TestCase),class,,,,Class: TestLinker(unittest.TestCase),allenai,scispacy,v0.5.4,,,,,,,TestLinker,,,,,,,,,(unittest.TestCase),,
allenai_scispacy_v0.5.4,test_linking.py,python,unittest,import,,,,Import: unittest,allenai,scispacy,v0.5.4,import unittest,,unittest,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_linking.py,python,tempfile,import,,,,Import: tempfile,allenai,scispacy,v0.5.4,import tempfile,,tempfile,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_linking.py,python,spacy,import,,,,Import: spacy,allenai,scispacy,v0.5.4,import spacy,,spacy,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_linking.py,python,CandidateGenerator from scispacy.candidate_generation,local_import,,,,Import: CandidateGenerator from scispacy.candidate_generation,allenai,scispacy,v0.5.4,"from scispacy.candidate_generation import CandidateGenerator, create_tfidf_ann_index",scispacy.candidate_generation,CandidateGenerator,,,scispacy.candidate_generation,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_linking.py,python,create_tfidf_ann_index from scispacy.candidate_generation,local_import,,,,Import: create_tfidf_ann_index from scispacy.candidate_generation,allenai,scispacy,v0.5.4,"from scispacy.candidate_generation import CandidateGenerator, create_tfidf_ann_index",scispacy.candidate_generation,create_tfidf_ann_index,,,scispacy.candidate_generation,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_linking.py,python,EntityLinker from scispacy.linking,local_import,,,,Import: EntityLinker from scispacy.linking,allenai,scispacy,v0.5.4,from scispacy.linking import EntityLinker,scispacy.linking,EntityLinker,,,scispacy.linking,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_linking.py,python,UmlsKnowledgeBase from scispacy.umls_utils,local_import,,,,Import: UmlsKnowledgeBase from scispacy.umls_utils,allenai,scispacy,v0.5.4,from scispacy.umls_utils import UmlsKnowledgeBase,scispacy.umls_utils,UmlsKnowledgeBase,,,scispacy.umls_utils,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_linking.py,python,AbbreviationDetector from scispacy.abbreviation,local_import,,,,Import: AbbreviationDetector from scispacy.abbreviation,allenai,scispacy,v0.5.4,from scispacy.abbreviation import AbbreviationDetector,scispacy.abbreviation,AbbreviationDetector,,,scispacy.abbreviation,,,,,,,,,,,,
,test_linking.py,python,,,,,,File: tests,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,test_linking.py,python,,,,,,Directory: tests\test_linking.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_per_class_scorer.py,python,TestPerClassScorer.test_per_class_scorer_counts_correctly(self),class_method,,,,Class method: TestPerClassScorer.test_per_class_scorer_counts_correctly(self),allenai,scispacy,v0.5.4,,,,,,,TestPerClassScorer,test_per_class_scorer_counts_correctly,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_per_class_scorer.py,python,TestPerClassScorer(unittest.TestCase),class,,,,Class: TestPerClassScorer(unittest.TestCase),allenai,scispacy,v0.5.4,,,,,,,TestPerClassScorer,,,,,,,,,(unittest.TestCase),,
allenai_scispacy_v0.5.4,test_per_class_scorer.py,python,unittest,import,,,,Import: unittest,allenai,scispacy,v0.5.4,import unittest,,unittest,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_per_class_scorer.py,python,PerClassScorer from scispacy.per_class_scorer,local_import,,,,Import: PerClassScorer from scispacy.per_class_scorer,allenai,scispacy,v0.5.4,from scispacy.per_class_scorer import PerClassScorer,scispacy.per_class_scorer,PerClassScorer,,,scispacy.per_class_scorer,,,,,,,,,,,,
,test_per_class_scorer.py,python,,,,,,File: tests,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,test_per_class_scorer.py,python,,,,,,Directory: tests\test_per_class_scorer.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_umls_semantic_type_tree.py,python,TestUmlsSemanticTypeTree.setUp(self),class_method,,,,Class method: TestUmlsSemanticTypeTree.setUp(self),allenai,scispacy,v0.5.4,,,,,,,TestUmlsSemanticTypeTree,setUp,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_umls_semantic_type_tree.py,python,TestUmlsSemanticTypeTree.test_tree_can_be_read_from_file(self),class_method,,,,Class method: TestUmlsSemanticTypeTree.test_tree_can_be_read_from_file(self),allenai,scispacy,v0.5.4,,,,,,,TestUmlsSemanticTypeTree,test_tree_can_be_read_from_file,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_umls_semantic_type_tree.py,python,TestUmlsSemanticTypeTree.test_tree_can_collapse_nodes(self),class_method,,,,Class method: TestUmlsSemanticTypeTree.test_tree_can_collapse_nodes(self),allenai,scispacy,v0.5.4,,,,,,,TestUmlsSemanticTypeTree,test_tree_can_collapse_nodes,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_umls_semantic_type_tree.py,python,TestUmlsSemanticTypeTree.test_get_parent_root(self),class_method,,,,Class method: TestUmlsSemanticTypeTree.test_get_parent_root(self),allenai,scispacy,v0.5.4,,,,,,,TestUmlsSemanticTypeTree,test_get_parent_root,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_umls_semantic_type_tree.py,python,TestUmlsSemanticTypeTree.test_get_parent(self),class_method,,,,Class method: TestUmlsSemanticTypeTree.test_get_parent(self),allenai,scispacy,v0.5.4,,,,,,,TestUmlsSemanticTypeTree,test_get_parent,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_umls_semantic_type_tree.py,python,TestUmlsSemanticTypeTree(unittest.TestCase),class,,,,Class: TestUmlsSemanticTypeTree(unittest.TestCase),allenai,scispacy,v0.5.4,,,,,,,TestUmlsSemanticTypeTree,,,,,,,,,(unittest.TestCase),,
allenai_scispacy_v0.5.4,test_umls_semantic_type_tree.py,python,unittest,import,,,,Import: unittest,allenai,scispacy,v0.5.4,import unittest,,unittest,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_umls_semantic_type_tree.py,python,construct_umls_tree_from_tsv from scispacy.umls_semantic_type_tree,local_import,,,,Import: construct_umls_tree_from_tsv from scispacy.umls_semantic_type_tree,allenai,scispacy,v0.5.4,from scispacy.umls_semantic_type_tree import construct_umls_tree_from_tsv,scispacy.umls_semantic_type_tree,construct_umls_tree_from_tsv,,,scispacy.umls_semantic_type_tree,,,,,,,,,,,,
,test_umls_semantic_type_tree.py,python,,,,,,File: tests,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,test_umls_semantic_type_tree.py,python,,,,,,Directory: tests\test_umls_semantic_type_tree.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_umls_utils.py,python,"TestUtil.expected_concepts = [
            {'concept_id': 'C0000005', 'canonical_name': '(131)I-Macroaggregated Albumin',
             'types': ['T116'], 'aliases': ['(131)I-MAA']},
            {'concept_id': 'C0000039', 'aliases': ['1,2-Dipalmitoylphosphatidylcholine'],
             'types': ['T109', 'T121'], 'definition':
             'Synthetic phospholipid used in liposomes and lipid bilayers to study biological membranes.'}
    ]",class_field,,,,"Class field: TestUtil.expected_concepts = [
            {'concept_id': 'C0000005', 'canonical_name': '(131)I-Macroaggregated Albumin',
             'types': ['T116'], 'aliases': ['(131)I-MAA']},
            {'concept_id': 'C0000039', 'aliases': ['1,2-Dipalmitoylphosphatidylcholine'],
             'types': ['T109', 'T121'], 'definition':
             'Synthetic phospholipid used in liposomes and lipid bilayers to study biological membranes.'}
    ]",allenai,scispacy,v0.5.4,,,,,,,TestUtil,,,"expected_concepts = [
            {'concept_id': 'C0000005', 'canonical_name': '(131)I-Macroaggregated Albumin',
             'types': ['T116'], 'aliases': ['(131)I-MAA']},
            {'concept_id': 'C0000039', 'aliases': ['1,2-Dipalmitoylphosphatidylcholine'],
             'types': ['T109', 'T121'], 'definition':
             'Synthetic phospholipid used in liposomes and lipid bilayers to study biological membranes.'}
    ]",,,,,expected_concepts,,"[
            {'concept_id': 'C0000005', 'canonical_name': '(131)I-Macroaggregated Albumin',
             'types': ['T116'], 'aliases': ['(131)I-MAA']},
            {'concept_id': 'C0000039', 'aliases': ['1,2-Dipalmitoylphosphatidylcholine'],
             'types': ['T109', 'T121'], 'definition':
             'Synthetic phospholipid used in liposomes and lipid bilayers to study biological membranes.'}
    ]",
allenai_scispacy_v0.5.4,test_umls_utils.py,python,TestUtil.test_read_umls_concepts(self),class_method,,,,Class method: TestUtil.test_read_umls_concepts(self),allenai,scispacy,v0.5.4,,,,,,,TestUtil,test_read_umls_concepts,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_umls_utils.py,python,TestUtil.test_read_umls_types(self),class_method,,,,Class method: TestUtil.test_read_umls_types(self),allenai,scispacy,v0.5.4,,,,,,,TestUtil,test_read_umls_types,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_umls_utils.py,python,TestUtil.test_read_umls_definitions(self),class_method,,,,Class method: TestUtil.test_read_umls_definitions(self),allenai,scispacy,v0.5.4,,,,,,,TestUtil,test_read_umls_definitions,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_umls_utils.py,python,TestUtil(unittest.TestCase),class,,,,Class: TestUtil(unittest.TestCase),allenai,scispacy,v0.5.4,,,,,,,TestUtil,,,,,,,,,(unittest.TestCase),,
allenai_scispacy_v0.5.4,test_umls_utils.py,python,unittest,import,,,,Import: unittest,allenai,scispacy,v0.5.4,import unittest,,unittest,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_umls_utils.py,python,umls_utils from scispacy,import,,,,Import: umls_utils from scispacy,allenai,scispacy,v0.5.4,from scispacy import umls_utils,scispacy,umls_utils,,,,,,,,,,,,,,,
,test_umls_utils.py,python,,,,,,File: tests,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,test_umls_utils.py,python,,,,,,Directory: tests\test_umls_utils.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_util.py,python,TestUtil.setUp(self),class_method,,,,Class method: TestUtil.setUp(self),allenai,scispacy,v0.5.4,,,,,,,TestUtil,setUp,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_util.py,python,TestUtil.test_whitespace_tokenizer(self),class_method,,,,Class method: TestUtil.test_whitespace_tokenizer(self),allenai,scispacy,v0.5.4,,,,,,,TestUtil,test_whitespace_tokenizer,(self),,,,,,,,,
allenai_scispacy_v0.5.4,test_util.py,python,TestUtil(unittest.TestCase),class,,,,Class: TestUtil(unittest.TestCase),allenai,scispacy,v0.5.4,,,,,,,TestUtil,,,,,,,,,(unittest.TestCase),,
allenai_scispacy_v0.5.4,test_util.py,python,unittest,import,,,,Import: unittest,allenai,scispacy,v0.5.4,import unittest,,unittest,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_util.py,python,spacy,import,,,,Import: spacy,allenai,scispacy,v0.5.4,import spacy,,spacy,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_util.py,python,WhitespaceTokenizer from scispacy.util,local_import,,,,Import: WhitespaceTokenizer from scispacy.util,allenai,scispacy,v0.5.4,from scispacy.util import WhitespaceTokenizer,scispacy.util,WhitespaceTokenizer,,,scispacy.util,,,,,,,,,,,,
,test_util.py,python,,,,,,File: tests,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,test_util.py,python,,,,,,Directory: tests\test_util.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: tests,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: tests\__init__.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_all_model.py,python,test_custom_segmentation(combined_all_model_fixture),function,,,,Function: test_custom_segmentation(combined_all_model_fixture),allenai,scispacy,v0.5.4,,,,test_custom_segmentation,(combined_all_model_fixture),,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_all_model.py,python,test_full_pipe_serializable(combined_all_model_fixture),function,,,,Function: test_full_pipe_serializable(combined_all_model_fixture),allenai,scispacy,v0.5.4,,,,test_full_pipe_serializable,(combined_all_model_fixture),,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_all_model.py,python,test_full_pipe_not_serializable(combined_all_model_fixture_non_serializable_abbrev),function,,,,Function: test_full_pipe_not_serializable(combined_all_model_fixture_non_serializable_abbrev),allenai,scispacy,v0.5.4,,,,test_full_pipe_not_serializable,(combined_all_model_fixture_non_serializable_abbrev),,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_all_model.py,python,os,import,,,,Import: os,allenai,scispacy,v0.5.4,import os,,os,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_all_model.py,python,sys,import,,,,Import: sys,allenai,scispacy,v0.5.4,import sys,,sys,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_all_model.py,python,spacy,import,,,,Import: spacy,allenai,scispacy,v0.5.4,import spacy,,spacy,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_all_model.py,python,shutil,import,,,,Import: shutil,allenai,scispacy,v0.5.4,import shutil,,shutil,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_all_model.py,python,pytest,import,,,,Import: pytest,allenai,scispacy,v0.5.4,import pytest,,pytest,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_all_model.py,python,Vocab from spacy.vocab,local_import,,,,Import: Vocab from spacy.vocab,allenai,scispacy,v0.5.4,from spacy.vocab import Vocab,spacy.vocab,Vocab,,,spacy.vocab,,,,,,,,,,,,
,test_all_model.py,python,,,,,,File: tests\custom_tests,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,test_all_model.py,python,,,,,,Directory: tests\custom_tests\test_all_model.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_custom_segmentation.py,python,test_segmenter(en_with_combined_rule_tokenizer_and_segmenter_fixture),function,,,,Function: test_segmenter(en_with_combined_rule_tokenizer_and_segmenter_fixture),allenai,scispacy,v0.5.4,,,,test_segmenter,(en_with_combined_rule_tokenizer_and_segmenter_fixture),,,,,,,,,"# this text used to crash pysbd",,,,
allenai_scispacy_v0.5.4,test_custom_segmentation.py,python,"TEST_CASES = [
    (
        ""LSTM networks, which we preview in Sec. 2, have been successfully"",
        [""LSTM networks, which we preview in Sec. 2, have been successfully""],
    ),
    (
        ""When the tree is simply a chain, both Eqs. 2–8 and Eqs. 9–14 reduce to the standard LSTM transitions, Eqs. 1."",
        [
            ""When the tree is simply a chain, both Eqs. 2–8 and Eqs. 9–14 reduce to the standard LSTM transitions, Eqs. 1.""
        ],
    ),
    (
        ""We used fluorescence time-lapse microscopy (Fig. 1D; fig. S1 and movies S1 and S2) and computational"",
        [
            ""We used fluorescence time-lapse microscopy (Fig. 1D; fig. S1 and movies S1 and S2) and computational""
        ],
    ),
    (
        ""Hill functions indeed fit the data well (Fig. 3A and Table 1)."",
        [""Hill functions indeed fit the data well (Fig. 3A and Table 1).""],
    ),
    (
        ""In order to produce sentence representations that fully capture the semantics of natural language, order-insensitive models are insufficient due to their inability to account for differences in meaning as a result of differences in word order or syntactic structure (e.g., “cats climb trees” vs. “trees climb cats”)."",
        [
            ""In order to produce sentence representations that fully capture the semantics of natural language, order-insensitive models are insufficient due to their inability to account for differences in meaning as a result of differences in word order or syntactic structure (e.g., “cats climb trees” vs. “trees climb cats”).""
        ],
    ),
    (
        ""There is an average exact sparsity (fraction of zeros) of the hidden layers of 83.40% on MNIST and 72.00% on CIFAR10. Figure 3 (left) provides a better understanding of the influence of sparsity."",
        [
            ""There is an average exact sparsity (fraction of zeros) of the hidden layers of 83.40% on MNIST and 72.00% on CIFAR10."",
            ""Figure 3 (left) provides a better understanding of the influence of sparsity."",
        ],
    ),
    (
        ""Sparsity has become a concept of interest, not only in computational neuroscience and machine learning but also in statistics and signal processing (Candes and Tao, 2005). It was first introduced in computational neuroscience in the context of sparse coding in the visual system (Olshausen and Field, 1997)."",
        [
            ""Sparsity has become a concept of interest, not only in computational neuroscience and machine learning but also in statistics and signal processing (Candes and Tao, 2005)."",
            ""It was first introduced in computational neuroscience in the context of sparse coding in the visual system (Olshausen and Field, 1997)."",
        ],
    ),
    (
        ""1) The first item. 2) The second item."",
        [""1) The first item."", ""2) The second item.""],
    ),
    (
        ""two of these stages (in areas V1 and V2 of visual cortex) (Lee et al., 2008), and that they"",
        [
            ""two of these stages (in areas V1 and V2 of visual cortex) (Lee et al., 2008), and that they""
        ],
    ),
    pytest.param(
        ""all neu-\nrons fire at"", [""all neu-\nrons fire at""], marks=pytest.mark.xfail
    ),
    (
        ""the support of the Defense Advanced Resarch Projects Agency (DARPA) Deep Exploration and Filtering of Text (DEFT) Program under Air Force Research Laboratory (AFRL) contract"",
        [
            ""the support of the Defense Advanced Resarch Projects Agency (DARPA) Deep Exploration and Filtering of Text (DEFT) Program under Air Force Research Laboratory (AFRL) contract""
        ],
    ),
    (
        ""While proprietary environments such as Microsoft Robotics Studio [9] and Webots [10] have many commendable attributes, we feel there is no substitute for a fully open platform."",
        [
            ""While proprietary environments such as Microsoft Robotics Studio [9] and Webots [10] have many commendable attributes, we feel there is no substitute for a fully open platform.""
        ],
    ),
    (
        ""We first produce sentence representations hL and hR for each sentence in the pair using a Tree-LSTM model over each sentence’s parse tree."",
        [
            ""We first produce sentence representations hL and hR for each sentence in the pair using a Tree-LSTM model over each sentence’s parse tree.""
        ],
    ),
    (
        ""LSTM networks, which we review in Sec. 2, have been successfully applied to a variety of sequence modeling and prediction tasks, notably machine translation (Bahdanau et al., 2014; Sutskever et al., 2014), speech recognition (Graves et al., 2013), image caption generation (Vinyals et al., 2014), and program execution (Zaremba and Sutskever, 2014)."",
        [
            ""LSTM networks, which we review in Sec. 2, have been successfully applied to a variety of sequence modeling and prediction tasks, notably machine translation (Bahdanau et al., 2014; Sutskever et al., 2014), speech recognition (Graves et al., 2013), image caption generation (Vinyals et al., 2014), and program execution (Zaremba and Sutskever, 2014).""
        ],
    ),
    (
        ""1 Introduction\n\nMost models for distributed representations of phrases and sentences—that is, models where realvalued vectors are used to represent meaning—fall into one of three classes: bag-of-words models, sequence models, and tree-structured models."",
        [
            ""1 Introduction\n\n"",
            ""Most models for distributed representations of phrases and sentences—that is, models where realvalued vectors are used to represent meaning—fall into one of three classes: bag-of-words models, sequence models, and tree-structured models."",
        ],
    ),
    (
        ""In this section, we will elaborate these philosophies and shows how they influenced the design and implementation of ROS.\n\nA. Peer-to-Peer\n\nA system built using ROS consists of a number of processes, potentially on a number of different"",
        [
            ""In this section, we will elaborate these philosophies and shows how they influenced the design and implementation of ROS.\n\n"",
            ""A. Peer-to-Peer\n\n"",
            ""A system built using ROS consists of a number of processes, potentially on a number of different"",
        ],
    ),
    (
        ""\n\n2 Long Short-Term Memory Networks\n\n\n\n2.1 Overview\n\nRecurrent neural networks (RNNs) are able to process input sequences of arbitrary length via the recursive application of a transition function on a hidden state vector ht."",
        [
            ""\n\n2 Long Short-Term Memory Networks\n\n\n\n"",
            ""2.1 Overview\n\n"",
            ""Recurrent neural networks (RNNs) are able to process input sequences of arbitrary length via the recursive application of a transition function on a hidden state vector ht."",
        ],
    ),
    (
        ""In order to address all three aspects, it is necessary to observe gene regulation in individual cells over time. Therefore, we built Bl-cascade[ strains of Escherichia coli, containing the l repressor and a downstream gene, such that both the amount of the repressor protein and the rate of expression of its target gene could be monitored simultaneously in individual cells (Fig. 1B). These strains incorporate a yellow fluorescent repressor fusion protein (cI-yfp) and a chromosomally integrated target promoter (P R ) controlling cyan fluorescent protein (cfp)."",
        [
            ""In order to address all three aspects, it is necessary to observe gene regulation in individual cells over time."",
            ""Therefore, we built Bl-cascade[ strains of Escherichia coli, containing the l repressor and a downstream gene, such that both the amount of the repressor protein and the rate of expression of its target gene could be monitored simultaneously in individual cells (Fig. 1B)."",
            ""These strains incorporate a yellow fluorescent repressor fusion protein (cI-yfp) and a chromosomally integrated target promoter (P R ) controlling cyan fluorescent protein (cfp)."",
        ],
    ),
    (
        ""This is a sentence. (This is an interjected sentence.) This is also a sentence."",
        [
            ""This is a sentence."",
            ""(This is an interjected sentence.)"",
            ""This is also a sentence."",
        ],
    ),
    (
        ""Thus, we first compute EMC 3 's response time-i.e., the duration from the initial of a call (from/to a participant in the target region) to the time when the decision of task assignment is made; and then, based on the computed response time, we estimate EMC 3 maximum throughput [28]-i.e., the maximum number of mobile users allowed in the MCS system. EMC 3 algorithm is implemented with the Java SE platform and is running on a Java HotSpot(TM) 64-Bit Server VM; and the implementation details are given in Appendix, available in the online supplemental material."",
        [
            ""Thus, we first compute EMC 3 's response time-i.e., the duration from the initial of a call (from/to a participant in the target region) to the time when the decision of task assignment is made; and then, based on the computed response time, we estimate EMC 3 maximum throughput [28]-i.e., the maximum number of mobile users allowed in the MCS system."",
            ""EMC 3 algorithm is implemented with the Java SE platform and is running on a Java HotSpot(TM) 64-Bit Server VM; and the implementation details are given in Appendix, available in the online supplemental material."",
        ],
    ),
    (
        ""Random walk models (Skellam, 1951;Turchin, 1998) received a lot of attention and were then extended to several more mathematically and statistically sophisticated approaches to interpret movement data such as State-Space Models (SSM) (Jonsen et al., 2003(Jonsen et al., , 2005 and Brownian Bridge Movement Model (BBMM) (Horne et al., 2007). Nevertheless, these models require heavy computational resources (Patterson et al., 2008) and unrealistic structural a priori hypotheses about movement, such as homogeneous movement behavior. A fundamental property of animal movements is behavioral heterogeneity (Gurarie et al., 2009) and these models poorly performed in highlighting behavioral changes in animal movements through space and time (Kranstauber et al., 2012)."",
        [
            ""Random walk models (Skellam, 1951;Turchin, 1998) received a lot of attention and were then extended to several more mathematically and statistically sophisticated approaches to interpret movement data such as State-Space Models (SSM) (Jonsen et al., 2003(Jonsen et al., , 2005 and Brownian Bridge Movement Model (BBMM) (Horne et al., 2007)."",
            ""Nevertheless, these models require heavy computational resources (Patterson et al., 2008) and unrealistic structural a priori hypotheses about movement, such as homogeneous movement behavior."",
            ""A fundamental property of animal movements is behavioral heterogeneity (Gurarie et al., 2009) and these models poorly performed in highlighting behavioral changes in animal movements through space and time (Kranstauber et al., 2012)."",
        ],
    ),
    ("". . ."", ["". . .""]),
    (
        ""IF condition and goalCondition THEN action condition relates to the current state and goalCondition to the goal state. If variable bindings exist such that predicates in condition match with the current state, and predicates in goalCondition match with the goal state then the action may be performed. Note that the action's precondition as specified in the domain model must also be satisfied. Figure 5 presents an outline of the system. Each iteration starts with a population of policies (line(2)). Current L2Plan settings are such that the individuals comprising the (1) Create initial population (2) WHILE termination criterion false (3) Determine n% fittest polices (4) Perform local search on policies (5) Insert improved policies in new generation (6) WHILE new generation not full (7) SET Pol to empty policy (8) Select two parents (9) IF crossover (10) Perform crossover (11) Pol := fittest of parents & offspring (12) ELSE (13) Pol := fittest of parents (14) ENDIF (15) IF mutation (16) Perform mutation on Pol (17) ENDIF (18) Perform local search on Pol (19) Insert Pol in new generation (20) ENDWHILE (21) (5)). Note that the evaluation of policies is implied when the fittest policy or policies is/are required."",
        [
            ""IF condition and goalCondition THEN action condition relates to the current state and goalCondition to the goal state."",
            ""If variable bindings exist such that predicates in condition match with the current state, and predicates in goalCondition match with the goal state then the action may be performed."",
            ""Note that the action's precondition as specified in the domain model must also be satisfied."",
            ""Figure 5 presents an outline of the system."",
            ""Each iteration starts with a population of policies (line(2))."",
            ""Current L2Plan settings are such that the individuals comprising the (1) Create initial population (2) WHILE termination criterion false (3) Determine n% fittest polices (4) Perform local search on policies (5) Insert improved policies in new generation (6) WHILE new generation not full (7) SET Pol to empty policy (8) Select two parents (9) IF crossover (10) Perform crossover (11) Pol := fittest of parents & offspring (12) ELSE (13) Pol := fittest of parents (14) ENDIF (15) IF mutation (16) Perform mutation on Pol (17) ENDIF (18) Perform local search on Pol (19) Insert Pol in new generation (20) ENDWHILE (21) (5))."",
            ""Note that the evaluation of policies is implied when the fittest policy or policies is/are required."",
        ],
    ),
    (
        ""MCC summarizes these four quantities into one score and is regarded as a balanced measure; it takes values between -1 and 1, with higher values indicating better performance (see e.g. Baldi et al. (2000) for further details). Since the convergence threshold in the glasso algorithm is 10 −4 , we take entriesω ij in estimated precision matrices to be non-zero if |ω ij | > 10 −3 . Since cluster assignments can only be identified up to permutation, in all cases labels were permuted to maximize agreement with true cluster assignments before calculating these quantities. Figure 2 shows MCC plotted against per-cluster sample size n k and Supplementary Figure S1 shows corresponding plots for TPR and FPR. Due to selection of smaller tuning parameter values, BIC discovers fewer non-zeroes in the precision matrices than train/test, resulting in both fewer true positives and false positives. Under MCC, BIC, with either the γ = 1 mixture model (B1) or the non-mixture approach (Bh), leads to the best network reconstruction (except at small sample sizes with p = 25) and outperforms all other regimes at larger sample sizes."",
        [
            ""MCC summarizes these four quantities into one score and is regarded as a balanced measure; it takes values between -1 and 1, with higher values indicating better performance (see e.g. Baldi et al. (2000) for further details)."",
            ""Since the convergence threshold in the glasso algorithm is 10 −4 , we take entriesω ij in estimated precision matrices to be non-zero if |ω ij | > 10 −3 ."",
            ""Since cluster assignments can only be identified up to permutation, in all cases labels were permuted to maximize agreement with true cluster assignments before calculating these quantities."",
            ""Figure 2 shows MCC plotted against per-cluster sample size n k and Supplementary Figure S1 shows corresponding plots for TPR and FPR."",
            ""Due to selection of smaller tuning parameter values, BIC discovers fewer non-zeroes in the precision matrices than train/test, resulting in both fewer true positives and false positives."",
            ""Under MCC, BIC, with either the γ = 1 mixture model (B1) or the non-mixture approach (Bh), leads to the best network reconstruction (except at small sample sizes with p = 25) and outperforms all other regimes at larger sample sizes."",
        ],
    ),
    (
        'Societal impact measurements are mostly commissioned by governments which argue that measuring the impact on science little says about real-world benefits of research (Cohen et al., 2015). Nightingale and Scott (2007) summarize this argumentation in the following pointedly sentence: ""Research that is highly cited or published in top journals may be good for the academic discipline but not for society"" (p. 547). Governments are interested to know the importance of public-funded research (1) for the private and public sectors (e.g. health care), (2) to tackle societal challenges (e.g. climate change), and (3) for education and training of the next generations (ERiC, 2010;Grimson, 2014). The impact model of Cleary, Siegfried, Jackson, and Hunt (2013) additionally highlights the policy enactment of research, in which the impact on policies, laws, and regulations is of special interest. The current study seizes upon this additional issue by investigating a possible source for measuring policy enactment of research.',
        [
            ""Societal impact measurements are mostly commissioned by governments which argue that measuring the impact on science little says about real-world benefits of research (Cohen et al., 2015)."",
            'Nightingale and Scott (2007) summarize this argumentation in the following pointedly sentence: ""Research that is highly cited or published in top journals may be good for the academic discipline but not for society"" (p. 547).',
            ""Governments are interested to know the importance of public-funded research (1) for the private and public sectors (e.g. health care), (2) to tackle societal challenges (e.g. climate change), and (3) for education and training of the next generations (ERiC, 2010;Grimson, 2014)."",
            ""The impact model of Cleary, Siegfried, Jackson, and Hunt (2013) additionally highlights the policy enactment of research, in which the impact on policies, laws, and regulations is of special interest."",
            ""The current study seizes upon this additional issue by investigating a possible source for measuring policy enactment of research."",
        ],
    ),
    (
        ""CONCLUSIONS: This study demonstrates that TF activation, occurring in mononuclear cells of cardiac transplant recipients, is inhibited by treatment with CsA. Inhibition of monocyte TF induction by CsA may contribute to its successful use in cardiac transplant medicine and might be useful in managing further settings of vascular pathology also known to involve TF expression and NF-kappaB activation."",
        [
            ""CONCLUSIONS: This study demonstrates that TF activation, occurring in mononuclear cells of cardiac transplant recipients, is inhibited by treatment with CsA."",
            ""Inhibition of monocyte TF induction by CsA may contribute to its successful use in cardiac transplant medicine and might be useful in managing further settings of vascular pathology also known to involve TF expression and NF-kappaB activation."",
        ],
    ),
    (
        ""In contrast, anti-AIM mAb did not induce any change in the binding activity of NF-kappa B, a transcription factor whose activity is also regulated by protein kinase C. The increase in AP-1-binding activity was accompanied by the marked stimulation of the transcription of c-fos but not that of c-jun."",
        [
            ""In contrast, anti-AIM mAb did not induce any change in the binding activity of NF-kappa B, a transcription factor whose activity is also regulated by protein kinase C. The increase in AP-1-binding activity was accompanied by the marked stimulation of the transcription of c-fos but not that of c-jun.""
        ],
    ),
    (
        ""A mutant Tax protein deficient in transactivation of genes by the nuclear factor (NF)-kappaB pathway was unable to induce transcriptional activity of IL-1alpha promoter-CAT constructs, but was rescued by exogenous provision of p65/p50 NF-kappaB. We found that two IL-1alpha kappaB-like sites (positions -1,065 to -1,056 and +646 to +655) specifically formed a complex with NF-kappaB-containing nuclear extract from MT-2 cells and that NF-kappaB bound with higher affinity to the 3' NF-kappaB binding site than to the 5' NF-kappaB site."",
        [
            ""A mutant Tax protein deficient in transactivation of genes by the nuclear factor (NF)-kappaB pathway was unable to induce transcriptional activity of IL-1alpha promoter-CAT constructs, but was rescued by exogenous provision of p65/p50 NF-kappaB."",
            ""We found that two IL-1alpha kappaB-like sites (positions -1,065 to -1,056 and +646 to +655) specifically formed a complex with NF-kappaB-containing nuclear extract from MT-2 cells and that NF-kappaB bound with higher affinity to the 3' NF-kappaB binding site than to the 5' NF-kappaB site."",
        ],
    ),
    pytest.param(
        ""Protein kinase C inhibitor staurosporine, but not cyclic nucleotide-dependent protein kinase inhibitor HA-1004, also dramatically reduced constitutive levels of nuclear NF kappa B. Finally, TPA addition to monocytes infected with HIV-1 inhibited HIV-1 replication, as determined by reverse transcriptase assays, in a concentration-dependent manner."",
        [
            ""Protein kinase C inhibitor staurosporine, but not cyclic nucleotide-dependent protein kinase inhibitor HA-1004, also dramatically reduced constitutive levels of nuclear NF kappa B."",
            ""Finally, TPA addition to monocytes infected with HIV-1 inhibited HIV-1 replication, as determined by reverse transcriptase assays, in a concentration-dependent manner."",
        ],
        marks=pytest.mark.xfail,
    ),
    (
        ""There are p50.c-rel heterodimers were also detected bound to this sequence at early time points (7-16 h; early), and both remained active at later time points (40 h; late) after activation."",
        [
            ""There are p50.c-rel heterodimers were also detected bound to this sequence at early time points (7-16 h; early), and both remained active at later time points (40 h; late) after activation.""
        ],
    ),
    (
        ""This sentence mentions Eqs. 1-4 and should not be split."",
        [""This sentence mentions Eqs. 1-4 and should not be split.""],
    ),
    (
        ""This sentence ends with part an abbreviation that is part of a word material. It also has another sentence after it."",
        [
            ""This sentence ends with part an abbreviation that is part of a word material."",
            ""It also has another sentence after it."",
        ],
    ),
    (
        ""It also has a sentence before it. This sentence mentions Eqs. 1-4 and should not be split. It also has another sentence after it."",
        [
            ""It also has a sentence before it."",
            ""This sentence mentions Eqs. 1-4 and should not be split."",
            ""It also has another sentence after it."",
        ],
    ),
    (
        ""This sentence is the last segment and ends with an abbreviation that is part of a word material."",
        [
            ""This sentence is the last segment and ends with an abbreviation that is part of a word material.""
        ],
    ),
    (
        ""PDBu + iono induced equally high IL-2 levels in both groups and, when stimulated with plate-bound anti-CD3 monoclonal antibody (mAb), the IL-2 secretion by neonatal cells was undetectable and adult cells produced low amounts of IL-2 (mean 331 +/- 86 pg/ml)."",
        [
            ""PDBu + iono induced equally high IL-2 levels in both groups and, when stimulated with plate-bound anti-CD3 monoclonal antibody (mAb), the IL-2 secretion by neonatal cells was undetectable and adult cells produced low amounts of IL-2 (mean 331 +/- 86 pg/ml).""
        ],
    ),
    (
        ""    This document starts with whitespaces. Next sentence."",
        [""    "", ""This document starts with whitespaces."", ""Next sentence.""],
    ),
    pytest.param(
        ""How about tomorrow?We can meet at eden garden."",
        [""How about tomorrow?"", ""We can meet at eden garden.""],
        marks=pytest.mark.xfail,
    ),
]",constant,"TEST_CASES = [
    (
        ""LSTM networks, which we preview in Sec. 2, have been successfully"",
        [""LSTM networks, which we preview in Sec. 2, have been successfully""],
    ),
    (
        ""When the tree is simply a chain, both Eqs. 2–8 and Eqs. 9–14 reduce to the standard LSTM transitions, Eqs. 1."",
        [
            ""When the tree is simply a chain, both Eqs. 2–8 and Eqs. 9–14 reduce to the standard LSTM transitions, Eqs. 1.""
        ],
    ),
    (
        ""We used fluorescence time-lapse microscopy (Fig. 1D; fig. S1 and movies S1 and S2) and computational"",
        [
            ""We used fluorescence time-lapse microscopy (Fig. 1D; fig. S1 and movies S1 and S2) and computational""
        ],
    ),
    (
        ""Hill functions indeed fit the data well (Fig. 3A and Table 1)."",
        [""Hill functions indeed fit the data well (Fig. 3A and Table 1).""],
    ),
    (
        ""In order to produce sentence representations that fully capture the semantics of natural language, order-insensitive models are insufficient due to their inability to account for differences in meaning as a result of differences in word order or syntactic structure (e.g., “cats climb trees” vs. “trees climb cats”)."",
        [
            ""In order to produce sentence representations that fully capture the semantics of natural language, order-insensitive models are insufficient due to their inability to account for differences in meaning as a result of differences in word order or syntactic structure (e.g., “cats climb trees” vs. “trees climb cats”).""
        ],
    ),
    (
        ""There is an average exact sparsity (fraction of zeros) of the hidden layers of 83.40% on MNIST and 72.00% on CIFAR10. Figure 3 (left) provides a better understanding of the influence of sparsity."",
        [
            ""There is an average exact sparsity (fraction of zeros) of the hidden layers of 83.40% on MNIST and 72.00% on CIFAR10."",
            ""Figure 3 (left) provides a better understanding of the influence of sparsity."",
        ],
    ),
    (
        ""Sparsity has become a concept of interest, not only in computational neuroscience and machine learning but also in statistics and signal processing (Candes and Tao, 2005). It was first introduced in computational neuroscience in the context of sparse coding in the visual system (Olshausen and Field, 1997)."",
        [
            ""Sparsity has become a concept of interest, not only in computational neuroscience and machine learning but also in statistics and signal processing (Candes and Tao, 2005)."",
            ""It was first introduced in computational neuroscience in the context of sparse coding in the visual system (Olshausen and Field, 1997)."",
        ],
    ),
    (
        ""1) The first item. 2) The second item."",
        [""1) The first item."", ""2) The second item.""],
    ),
    (
        ""two of these stages (in areas V1 and V2 of visual cortex) (Lee et al., 2008), and that they"",
        [
            ""two of these stages (in areas V1 and V2 of visual cortex) (Lee et al., 2008), and that they""
        ],
    ),
    pytest.param(
        ""all neu-\nrons fire at"", [""all neu-\nrons fire at""], marks=pytest.mark.xfail
    ),
    (
        ""the support of the Defense Advanced Resarch Projects Agency (DARPA) Deep Exploration and Filtering of Text (DEFT) Program under Air Force Research Laboratory (AFRL) contract"",
        [
            ""the support of the Defense Advanced Resarch Projects Agency (DARPA) Deep Exploration and Filtering of Text (DEFT) Program under Air Force Research Laboratory (AFRL) contract""
        ],
    ),
    (
        ""While proprietary environments such as Microsoft Robotics Studio [9] and Webots [10] have many commendable attributes, we feel there is no substitute for a fully open platform."",
        [
            ""While proprietary environments such as Microsoft Robotics Studio [9] and Webots [10] have many commendable attributes, we feel there is no substitute for a fully open platform.""
        ],
    ),
    (
        ""We first produce sentence representations hL and hR for each sentence in the pair using a Tree-LSTM model over each sentence’s parse tree."",
        [
            ""We first produce sentence representations hL and hR for each sentence in the pair using a Tree-LSTM model over each sentence’s parse tree.""
        ],
    ),
    (
        ""LSTM networks, which we review in Sec. 2, have been successfully applied to a variety of sequence modeling and prediction tasks, notably machine translation (Bahdanau et al., 2014; Sutskever et al., 2014), speech recognition (Graves et al., 2013), image caption generation (Vinyals et al., 2014), and program execution (Zaremba and Sutskever, 2014)."",
        [
            ""LSTM networks, which we review in Sec. 2, have been successfully applied to a variety of sequence modeling and prediction tasks, notably machine translation (Bahdanau et al., 2014; Sutskever et al., 2014), speech recognition (Graves et al., 2013), image caption generation (Vinyals et al., 2014), and program execution (Zaremba and Sutskever, 2014).""
        ],
    ),
    (
        ""1 Introduction\n\nMost models for distributed representations of phrases and sentences—that is, models where realvalued vectors are used to represent meaning—fall into one of three classes: bag-of-words models, sequence models, and tree-structured models."",
        [
            ""1 Introduction\n\n"",
            ""Most models for distributed representations of phrases and sentences—that is, models where realvalued vectors are used to represent meaning—fall into one of three classes: bag-of-words models, sequence models, and tree-structured models."",
        ],
    ),
    (
        ""In this section, we will elaborate these philosophies and shows how they influenced the design and implementation of ROS.\n\nA. Peer-to-Peer\n\nA system built using ROS consists of a number of processes, potentially on a number of different"",
        [
            ""In this section, we will elaborate these philosophies and shows how they influenced the design and implementation of ROS.\n\n"",
            ""A. Peer-to-Peer\n\n"",
            ""A system built using ROS consists of a number of processes, potentially on a number of different"",
        ],
    ),
    (
        ""\n\n2 Long Short-Term Memory Networks\n\n\n\n2.1 Overview\n\nRecurrent neural networks (RNNs) are able to process input sequences of arbitrary length via the recursive application of a transition function on a hidden state vector ht."",
        [
            ""\n\n2 Long Short-Term Memory Networks\n\n\n\n"",
            ""2.1 Overview\n\n"",
            ""Recurrent neural networks (RNNs) are able to process input sequences of arbitrary length via the recursive application of a transition function on a hidden state vector ht."",
        ],
    ),
    (
        ""In order to address all three aspects, it is necessary to observe gene regulation in individual cells over time. Therefore, we built Bl-cascade[ strains of Escherichia coli, containing the l repressor and a downstream gene, such that both the amount of the repressor protein and the rate of expression of its target gene could be monitored simultaneously in individual cells (Fig. 1B). These strains incorporate a yellow fluorescent repressor fusion protein (cI-yfp) and a chromosomally integrated target promoter (P R ) controlling cyan fluorescent protein (cfp)."",
        [
            ""In order to address all three aspects, it is necessary to observe gene regulation in individual cells over time."",
            ""Therefore, we built Bl-cascade[ strains of Escherichia coli, containing the l repressor and a downstream gene, such that both the amount of the repressor protein and the rate of expression of its target gene could be monitored simultaneously in individual cells (Fig. 1B)."",
            ""These strains incorporate a yellow fluorescent repressor fusion protein (cI-yfp) and a chromosomally integrated target promoter (P R ) controlling cyan fluorescent protein (cfp)."",
        ],
    ),
    (
        ""This is a sentence. (This is an interjected sentence.) This is also a sentence."",
        [
            ""This is a sentence."",
            ""(This is an interjected sentence.)"",
            ""This is also a sentence."",
        ],
    ),
    (
        ""Thus, we first compute EMC 3 's response time-i.e., the duration from the initial of a call (from/to a participant in the target region) to the time when the decision of task assignment is made; and then, based on the computed response time, we estimate EMC 3 maximum throughput [28]-i.e., the maximum number of mobile users allowed in the MCS system. EMC 3 algorithm is implemented with the Java SE platform and is running on a Java HotSpot(TM) 64-Bit Server VM; and the implementation details are given in Appendix, available in the online supplemental material."",
        [
            ""Thus, we first compute EMC 3 's response time-i.e., the duration from the initial of a call (from/to a participant in the target region) to the time when the decision of task assignment is made; and then, based on the computed response time, we estimate EMC 3 maximum throughput [28]-i.e., the maximum number of mobile users allowed in the MCS system."",
            ""EMC 3 algorithm is implemented with the Java SE platform and is running on a Java HotSpot(TM) 64-Bit Server VM; and the implementation details are given in Appendix, available in the online supplemental material."",
        ],
    ),
    (
        ""Random walk models (Skellam, 1951;Turchin, 1998) received a lot of attention and were then extended to several more mathematically and statistically sophisticated approaches to interpret movement data such as State-Space Models (SSM) (Jonsen et al., 2003(Jonsen et al., , 2005 and Brownian Bridge Movement Model (BBMM) (Horne et al., 2007). Nevertheless, these models require heavy computational resources (Patterson et al., 2008) and unrealistic structural a priori hypotheses about movement, such as homogeneous movement behavior. A fundamental property of animal movements is behavioral heterogeneity (Gurarie et al., 2009) and these models poorly performed in highlighting behavioral changes in animal movements through space and time (Kranstauber et al., 2012)."",
        [
            ""Random walk models (Skellam, 1951;Turchin, 1998) received a lot of attention and were then extended to several more mathematically and statistically sophisticated approaches to interpret movement data such as State-Space Models (SSM) (Jonsen et al., 2003(Jonsen et al., , 2005 and Brownian Bridge Movement Model (BBMM) (Horne et al., 2007)."",
            ""Nevertheless, these models require heavy computational resources (Patterson et al., 2008) and unrealistic structural a priori hypotheses about movement, such as homogeneous movement behavior."",
            ""A fundamental property of animal movements is behavioral heterogeneity (Gurarie et al., 2009) and these models poorly performed in highlighting behavioral changes in animal movements through space and time (Kranstauber et al., 2012)."",
        ],
    ),
    ("". . ."", ["". . .""]),
    (
        ""IF condition and goalCondition THEN action condition relates to the current state and goalCondition to the goal state. If variable bindings exist such that predicates in condition match with the current state, and predicates in goalCondition match with the goal state then the action may be performed. Note that the action's precondition as specified in the domain model must also be satisfied. Figure 5 presents an outline of the system. Each iteration starts with a population of policies (line(2)). Current L2Plan settings are such that the individuals comprising the (1) Create initial population (2) WHILE termination criterion false (3) Determine n% fittest polices (4) Perform local search on policies (5) Insert improved policies in new generation (6) WHILE new generation not full (7) SET Pol to empty policy (8) Select two parents (9) IF crossover (10) Perform crossover (11) Pol := fittest of parents & offspring (12) ELSE (13) Pol := fittest of parents (14) ENDIF (15) IF mutation (16) Perform mutation on Pol (17) ENDIF (18) Perform local search on Pol (19) Insert Pol in new generation (20) ENDWHILE (21) (5)). Note that the evaluation of policies is implied when the fittest policy or policies is/are required."",
        [
            ""IF condition and goalCondition THEN action condition relates to the current state and goalCondition to the goal state."",
            ""If variable bindings exist such that predicates in condition match with the current state, and predicates in goalCondition match with the goal state then the action may be performed."",
            ""Note that the action's precondition as specified in the domain model must also be satisfied."",
            ""Figure 5 presents an outline of the system."",
            ""Each iteration starts with a population of policies (line(2))."",
            ""Current L2Plan settings are such that the individuals comprising the (1) Create initial population (2) WHILE termination criterion false (3) Determine n% fittest polices (4) Perform local search on policies (5) Insert improved policies in new generation (6) WHILE new generation not full (7) SET Pol to empty policy (8) Select two parents (9) IF crossover (10) Perform crossover (11) Pol := fittest of parents & offspring (12) ELSE (13) Pol := fittest of parents (14) ENDIF (15) IF mutation (16) Perform mutation on Pol (17) ENDIF (18) Perform local search on Pol (19) Insert Pol in new generation (20) ENDWHILE (21) (5))."",
            ""Note that the evaluation of policies is implied when the fittest policy or policies is/are required."",
        ],
    ),
    (
        ""MCC summarizes these four quantities into one score and is regarded as a balanced measure; it takes values between -1 and 1, with higher values indicating better performance (see e.g. Baldi et al. (2000) for further details). Since the convergence threshold in the glasso algorithm is 10 −4 , we take entriesω ij in estimated precision matrices to be non-zero if |ω ij | > 10 −3 . Since cluster assignments can only be identified up to permutation, in all cases labels were permuted to maximize agreement with true cluster assignments before calculating these quantities. Figure 2 shows MCC plotted against per-cluster sample size n k and Supplementary Figure S1 shows corresponding plots for TPR and FPR. Due to selection of smaller tuning parameter values, BIC discovers fewer non-zeroes in the precision matrices than train/test, resulting in both fewer true positives and false positives. Under MCC, BIC, with either the γ = 1 mixture model (B1) or the non-mixture approach (Bh), leads to the best network reconstruction (except at small sample sizes with p = 25) and outperforms all other regimes at larger sample sizes."",
        [
            ""MCC summarizes these four quantities into one score and is regarded as a balanced measure; it takes values between -1 and 1, with higher values indicating better performance (see e.g. Baldi et al. (2000) for further details)."",
            ""Since the convergence threshold in the glasso algorithm is 10 −4 , we take entriesω ij in estimated precision matrices to be non-zero if |ω ij | > 10 −3 ."",
            ""Since cluster assignments can only be identified up to permutation, in all cases labels were permuted to maximize agreement with true cluster assignments before calculating these quantities."",
            ""Figure 2 shows MCC plotted against per-cluster sample size n k and Supplementary Figure S1 shows corresponding plots for TPR and FPR."",
            ""Due to selection of smaller tuning parameter values, BIC discovers fewer non-zeroes in the precision matrices than train/test, resulting in both fewer true positives and false positives."",
            ""Under MCC, BIC, with either the γ = 1 mixture model (B1) or the non-mixture approach (Bh), leads to the best network reconstruction (except at small sample sizes with p = 25) and outperforms all other regimes at larger sample sizes."",
        ],
    ),
    (
        'Societal impact measurements are mostly commissioned by governments which argue that measuring the impact on science little says about real-world benefits of research (Cohen et al., 2015). Nightingale and Scott (2007) summarize this argumentation in the following pointedly sentence: ""Research that is highly cited or published in top journals may be good for the academic discipline but not for society"" (p. 547). Governments are interested to know the importance of public-funded research (1) for the private and public sectors (e.g. health care), (2) to tackle societal challenges (e.g. climate change), and (3) for education and training of the next generations (ERiC, 2010;Grimson, 2014). The impact model of Cleary, Siegfried, Jackson, and Hunt (2013) additionally highlights the policy enactment of research, in which the impact on policies, laws, and regulations is of special interest. The current study seizes upon this additional issue by investigating a possible source for measuring policy enactment of research.',
        [
            ""Societal impact measurements are mostly commissioned by governments which argue that measuring the impact on science little says about real-world benefits of research (Cohen et al., 2015)."",
            'Nightingale and Scott (2007) summarize this argumentation in the following pointedly sentence: ""Research that is highly cited or published in top journals may be good for the academic discipline but not for society"" (p. 547).',
            ""Governments are interested to know the importance of public-funded research (1) for the private and public sectors (e.g. health care), (2) to tackle societal challenges (e.g. climate change), and (3) for education and training of the next generations (ERiC, 2010;Grimson, 2014)."",
            ""The impact model of Cleary, Siegfried, Jackson, and Hunt (2013) additionally highlights the policy enactment of research, in which the impact on policies, laws, and regulations is of special interest."",
            ""The current study seizes upon this additional issue by investigating a possible source for measuring policy enactment of research."",
        ],
    ),
    (
        ""CONCLUSIONS: This study demonstrates that TF activation, occurring in mononuclear cells of cardiac transplant recipients, is inhibited by treatment with CsA. Inhibition of monocyte TF induction by CsA may contribute to its successful use in cardiac transplant medicine and might be useful in managing further settings of vascular pathology also known to involve TF expression and NF-kappaB activation."",
        [
            ""CONCLUSIONS: This study demonstrates that TF activation, occurring in mononuclear cells of cardiac transplant recipients, is inhibited by treatment with CsA."",
            ""Inhibition of monocyte TF induction by CsA may contribute to its successful use in cardiac transplant medicine and might be useful in managing further settings of vascular pathology also known to involve TF expression and NF-kappaB activation."",
        ],
    ),
    (
        ""In contrast, anti-AIM mAb did not induce any change in the binding activity of NF-kappa B, a transcription factor whose activity is also regulated by protein kinase C. The increase in AP-1-binding activity was accompanied by the marked stimulation of the transcription of c-fos but not that of c-jun."",
        [
            ""In contrast, anti-AIM mAb did not induce any change in the binding activity of NF-kappa B, a transcription factor whose activity is also regulated by protein kinase C. The increase in AP-1-binding activity was accompanied by the marked stimulation of the transcription of c-fos but not that of c-jun.""
        ],
    ),
    (
        ""A mutant Tax protein deficient in transactivation of genes by the nuclear factor (NF)-kappaB pathway was unable to induce transcriptional activity of IL-1alpha promoter-CAT constructs, but was rescued by exogenous provision of p65/p50 NF-kappaB. We found that two IL-1alpha kappaB-like sites (positions -1,065 to -1,056 and +646 to +655) specifically formed a complex with NF-kappaB-containing nuclear extract from MT-2 cells and that NF-kappaB bound with higher affinity to the 3' NF-kappaB binding site than to the 5' NF-kappaB site."",
        [
            ""A mutant Tax protein deficient in transactivation of genes by the nuclear factor (NF)-kappaB pathway was unable to induce transcriptional activity of IL-1alpha promoter-CAT constructs, but was rescued by exogenous provision of p65/p50 NF-kappaB."",
            ""We found that two IL-1alpha kappaB-like sites (positions -1,065 to -1,056 and +646 to +655) specifically formed a complex with NF-kappaB-containing nuclear extract from MT-2 cells and that NF-kappaB bound with higher affinity to the 3' NF-kappaB binding site than to the 5' NF-kappaB site."",
        ],
    ),
    pytest.param(
        ""Protein kinase C inhibitor staurosporine, but not cyclic nucleotide-dependent protein kinase inhibitor HA-1004, also dramatically reduced constitutive levels of nuclear NF kappa B. Finally, TPA addition to monocytes infected with HIV-1 inhibited HIV-1 replication, as determined by reverse transcriptase assays, in a concentration-dependent manner."",
        [
            ""Protein kinase C inhibitor staurosporine, but not cyclic nucleotide-dependent protein kinase inhibitor HA-1004, also dramatically reduced constitutive levels of nuclear NF kappa B."",
            ""Finally, TPA addition to monocytes infected with HIV-1 inhibited HIV-1 replication, as determined by reverse transcriptase assays, in a concentration-dependent manner."",
        ],
        marks=pytest.mark.xfail,
    ),
    (
        ""There are p50.c-rel heterodimers were also detected bound to this sequence at early time points (7-16 h; early), and both remained active at later time points (40 h; late) after activation."",
        [
            ""There are p50.c-rel heterodimers were also detected bound to this sequence at early time points (7-16 h; early), and both remained active at later time points (40 h; late) after activation.""
        ],
    ),
    (
        ""This sentence mentions Eqs. 1-4 and should not be split."",
        [""This sentence mentions Eqs. 1-4 and should not be split.""],
    ),
    (
        ""This sentence ends with part an abbreviation that is part of a word material. It also has another sentence after it."",
        [
            ""This sentence ends with part an abbreviation that is part of a word material."",
            ""It also has another sentence after it."",
        ],
    ),
    (
        ""It also has a sentence before it. This sentence mentions Eqs. 1-4 and should not be split. It also has another sentence after it."",
        [
            ""It also has a sentence before it."",
            ""This sentence mentions Eqs. 1-4 and should not be split."",
            ""It also has another sentence after it."",
        ],
    ),
    (
        ""This sentence is the last segment and ends with an abbreviation that is part of a word material."",
        [
            ""This sentence is the last segment and ends with an abbreviation that is part of a word material.""
        ],
    ),
    (
        ""PDBu + iono induced equally high IL-2 levels in both groups and, when stimulated with plate-bound anti-CD3 monoclonal antibody (mAb), the IL-2 secretion by neonatal cells was undetectable and adult cells produced low amounts of IL-2 (mean 331 +/- 86 pg/ml)."",
        [
            ""PDBu + iono induced equally high IL-2 levels in both groups and, when stimulated with plate-bound anti-CD3 monoclonal antibody (mAb), the IL-2 secretion by neonatal cells was undetectable and adult cells produced low amounts of IL-2 (mean 331 +/- 86 pg/ml).""
        ],
    ),
    (
        ""    This document starts with whitespaces. Next sentence."",
        [""    "", ""This document starts with whitespaces."", ""Next sentence.""],
    ),
    pytest.param(
        ""How about tomorrow?We can meet at eden garden."",
        [""How about tomorrow?"", ""We can meet at eden garden.""],
        marks=pytest.mark.xfail,
    ),
]",TEST_CASES,"[
    (
        ""LSTM networks, which we preview in Sec. 2, have been successfully"",
        [""LSTM networks, which we preview in Sec. 2, have been successfully""],
    ),
    (
        ""When the tree is simply a chain, both Eqs. 2–8 and Eqs. 9–14 reduce to the standard LSTM transitions, Eqs. 1."",
        [
            ""When the tree is simply a chain, both Eqs. 2–8 and Eqs. 9–14 reduce to the standard LSTM transitions, Eqs. 1.""
        ],
    ),
    (
        ""We used fluorescence time-lapse microscopy (Fig. 1D; fig. S1 and movies S1 and S2) and computational"",
        [
            ""We used fluorescence time-lapse microscopy (Fig. 1D; fig. S1 and movies S1 and S2) and computational""
        ],
    ),
    (
        ""Hill functions indeed fit the data well (Fig. 3A and Table 1)."",
        [""Hill functions indeed fit the data well (Fig. 3A and Table 1).""],
    ),
    (
        ""In order to produce sentence representations that fully capture the semantics of natural language, order-insensitive models are insufficient due to their inability to account for differences in meaning as a result of differences in word order or syntactic structure (e.g., “cats climb trees” vs. “trees climb cats”)."",
        [
            ""In order to produce sentence representations that fully capture the semantics of natural language, order-insensitive models are insufficient due to their inability to account for differences in meaning as a result of differences in word order or syntactic structure (e.g., “cats climb trees” vs. “trees climb cats”).""
        ],
    ),
    (
        ""There is an average exact sparsity (fraction of zeros) of the hidden layers of 83.40% on MNIST and 72.00% on CIFAR10. Figure 3 (left) provides a better understanding of the influence of sparsity."",
        [
            ""There is an average exact sparsity (fraction of zeros) of the hidden layers of 83.40% on MNIST and 72.00% on CIFAR10."",
            ""Figure 3 (left) provides a better understanding of the influence of sparsity."",
        ],
    ),
    (
        ""Sparsity has become a concept of interest, not only in computational neuroscience and machine learning but also in statistics and signal processing (Candes and Tao, 2005). It was first introduced in computational neuroscience in the context of sparse coding in the visual system (Olshausen and Field, 1997)."",
        [
            ""Sparsity has become a concept of interest, not only in computational neuroscience and machine learning but also in statistics and signal processing (Candes and Tao, 2005)."",
            ""It was first introduced in computational neuroscience in the context of sparse coding in the visual system (Olshausen and Field, 1997)."",
        ],
    ),
    (
        ""1) The first item. 2) The second item."",
        [""1) The first item."", ""2) The second item.""],
    ),
    (
        ""two of these stages (in areas V1 and V2 of visual cortex) (Lee et al., 2008), and that they"",
        [
            ""two of these stages (in areas V1 and V2 of visual cortex) (Lee et al., 2008), and that they""
        ],
    ),
    pytest.param(
        ""all neu-\nrons fire at"", [""all neu-\nrons fire at""], marks=pytest.mark.xfail
    ),
    (
        ""the support of the Defense Advanced Resarch Projects Agency (DARPA) Deep Exploration and Filtering of Text (DEFT) Program under Air Force Research Laboratory (AFRL) contract"",
        [
            ""the support of the Defense Advanced Resarch Projects Agency (DARPA) Deep Exploration and Filtering of Text (DEFT) Program under Air Force Research Laboratory (AFRL) contract""
        ],
    ),
    (
        ""While proprietary environments such as Microsoft Robotics Studio [9] and Webots [10] have many commendable attributes, we feel there is no substitute for a fully open platform."",
        [
            ""While proprietary environments such as Microsoft Robotics Studio [9] and Webots [10] have many commendable attributes, we feel there is no substitute for a fully open platform.""
        ],
    ),
    (
        ""We first produce sentence representations hL and hR for each sentence in the pair using a Tree-LSTM model over each sentence’s parse tree."",
        [
            ""We first produce sentence representations hL and hR for each sentence in the pair using a Tree-LSTM model over each sentence’s parse tree.""
        ],
    ),
    (
        ""LSTM networks, which we review in Sec. 2, have been successfully applied to a variety of sequence modeling and prediction tasks, notably machine translation (Bahdanau et al., 2014; Sutskever et al., 2014), speech recognition (Graves et al., 2013), image caption generation (Vinyals et al., 2014), and program execution (Zaremba and Sutskever, 2014)."",
        [
            ""LSTM networks, which we review in Sec. 2, have been successfully applied to a variety of sequence modeling and prediction tasks, notably machine translation (Bahdanau et al., 2014; Sutskever et al., 2014), speech recognition (Graves et al., 2013), image caption generation (Vinyals et al., 2014), and program execution (Zaremba and Sutskever, 2014).""
        ],
    ),
    (
        ""1 Introduction\n\nMost models for distributed representations of phrases and sentences—that is, models where realvalued vectors are used to represent meaning—fall into one of three classes: bag-of-words models, sequence models, and tree-structured models."",
        [
            ""1 Introduction\n\n"",
            ""Most models for distributed representations of phrases and sentences—that is, models where realvalued vectors are used to represent meaning—fall into one of three classes: bag-of-words models, sequence models, and tree-structured models."",
        ],
    ),
    (
        ""In this section, we will elaborate these philosophies and shows how they influenced the design and implementation of ROS.\n\nA. Peer-to-Peer\n\nA system built using ROS consists of a number of processes, potentially on a number of different"",
        [
            ""In this section, we will elaborate these philosophies and shows how they influenced the design and implementation of ROS.\n\n"",
            ""A. Peer-to-Peer\n\n"",
            ""A system built using ROS consists of a number of processes, potentially on a number of different"",
        ],
    ),
    (
        ""\n\n2 Long Short-Term Memory Networks\n\n\n\n2.1 Overview\n\nRecurrent neural networks (RNNs) are able to process input sequences of arbitrary length via the recursive application of a transition function on a hidden state vector ht."",
        [
            ""\n\n2 Long Short-Term Memory Networks\n\n\n\n"",
            ""2.1 Overview\n\n"",
            ""Recurrent neural networks (RNNs) are able to process input sequences of arbitrary length via the recursive application of a transition function on a hidden state vector ht."",
        ],
    ),
    (
        ""In order to address all three aspects, it is necessary to observe gene regulation in individual cells over time. Therefore, we built Bl-cascade[ strains of Escherichia coli, containing the l repressor and a downstream gene, such that both the amount of the repressor protein and the rate of expression of its target gene could be monitored simultaneously in individual cells (Fig. 1B). These strains incorporate a yellow fluorescent repressor fusion protein (cI-yfp) and a chromosomally integrated target promoter (P R ) controlling cyan fluorescent protein (cfp)."",
        [
            ""In order to address all three aspects, it is necessary to observe gene regulation in individual cells over time."",
            ""Therefore, we built Bl-cascade[ strains of Escherichia coli, containing the l repressor and a downstream gene, such that both the amount of the repressor protein and the rate of expression of its target gene could be monitored simultaneously in individual cells (Fig. 1B)."",
            ""These strains incorporate a yellow fluorescent repressor fusion protein (cI-yfp) and a chromosomally integrated target promoter (P R ) controlling cyan fluorescent protein (cfp)."",
        ],
    ),
    (
        ""This is a sentence. (This is an interjected sentence.) This is also a sentence."",
        [
            ""This is a sentence."",
            ""(This is an interjected sentence.)"",
            ""This is also a sentence."",
        ],
    ),
    (
        ""Thus, we first compute EMC 3 's response time-i.e., the duration from the initial of a call (from/to a participant in the target region) to the time when the decision of task assignment is made; and then, based on the computed response time, we estimate EMC 3 maximum throughput [28]-i.e., the maximum number of mobile users allowed in the MCS system. EMC 3 algorithm is implemented with the Java SE platform and is running on a Java HotSpot(TM) 64-Bit Server VM; and the implementation details are given in Appendix, available in the online supplemental material."",
        [
            ""Thus, we first compute EMC 3 's response time-i.e., the duration from the initial of a call (from/to a participant in the target region) to the time when the decision of task assignment is made; and then, based on the computed response time, we estimate EMC 3 maximum throughput [28]-i.e., the maximum number of mobile users allowed in the MCS system."",
            ""EMC 3 algorithm is implemented with the Java SE platform and is running on a Java HotSpot(TM) 64-Bit Server VM; and the implementation details are given in Appendix, available in the online supplemental material."",
        ],
    ),
    (
        ""Random walk models (Skellam, 1951;Turchin, 1998) received a lot of attention and were then extended to several more mathematically and statistically sophisticated approaches to interpret movement data such as State-Space Models (SSM) (Jonsen et al., 2003(Jonsen et al., , 2005 and Brownian Bridge Movement Model (BBMM) (Horne et al., 2007). Nevertheless, these models require heavy computational resources (Patterson et al., 2008) and unrealistic structural a priori hypotheses about movement, such as homogeneous movement behavior. A fundamental property of animal movements is behavioral heterogeneity (Gurarie et al., 2009) and these models poorly performed in highlighting behavioral changes in animal movements through space and time (Kranstauber et al., 2012)."",
        [
            ""Random walk models (Skellam, 1951;Turchin, 1998) received a lot of attention and were then extended to several more mathematically and statistically sophisticated approaches to interpret movement data such as State-Space Models (SSM) (Jonsen et al., 2003(Jonsen et al., , 2005 and Brownian Bridge Movement Model (BBMM) (Horne et al., 2007)."",
            ""Nevertheless, these models require heavy computational resources (Patterson et al., 2008) and unrealistic structural a priori hypotheses about movement, such as homogeneous movement behavior."",
            ""A fundamental property of animal movements is behavioral heterogeneity (Gurarie et al., 2009) and these models poorly performed in highlighting behavioral changes in animal movements through space and time (Kranstauber et al., 2012)."",
        ],
    ),
    ("". . ."", ["". . .""]),
    (
        ""IF condition and goalCondition THEN action condition relates to the current state and goalCondition to the goal state. If variable bindings exist such that predicates in condition match with the current state, and predicates in goalCondition match with the goal state then the action may be performed. Note that the action's precondition as specified in the domain model must also be satisfied. Figure 5 presents an outline of the system. Each iteration starts with a population of policies (line(2)). Current L2Plan settings are such that the individuals comprising the (1) Create initial population (2) WHILE termination criterion false (3) Determine n% fittest polices (4) Perform local search on policies (5) Insert improved policies in new generation (6) WHILE new generation not full (7) SET Pol to empty policy (8) Select two parents (9) IF crossover (10) Perform crossover (11) Pol := fittest of parents & offspring (12) ELSE (13) Pol := fittest of parents (14) ENDIF (15) IF mutation (16) Perform mutation on Pol (17) ENDIF (18) Perform local search on Pol (19) Insert Pol in new generation (20) ENDWHILE (21) (5)). Note that the evaluation of policies is implied when the fittest policy or policies is/are required."",
        [
            ""IF condition and goalCondition THEN action condition relates to the current state and goalCondition to the goal state."",
            ""If variable bindings exist such that predicates in condition match with the current state, and predicates in goalCondition match with the goal state then the action may be performed."",
            ""Note that the action's precondition as specified in the domain model must also be satisfied."",
            ""Figure 5 presents an outline of the system."",
            ""Each iteration starts with a population of policies (line(2))."",
            ""Current L2Plan settings are such that the individuals comprising the (1) Create initial population (2) WHILE termination criterion false (3) Determine n% fittest polices (4) Perform local search on policies (5) Insert improved policies in new generation (6) WHILE new generation not full (7) SET Pol to empty policy (8) Select two parents (9) IF crossover (10) Perform crossover (11) Pol := fittest of parents & offspring (12) ELSE (13) Pol := fittest of parents (14) ENDIF (15) IF mutation (16) Perform mutation on Pol (17) ENDIF (18) Perform local search on Pol (19) Insert Pol in new generation (20) ENDWHILE (21) (5))."",
            ""Note that the evaluation of policies is implied when the fittest policy or policies is/are required."",
        ],
    ),
    (
        ""MCC summarizes these four quantities into one score and is regarded as a balanced measure; it takes values between -1 and 1, with higher values indicating better performance (see e.g. Baldi et al. (2000) for further details). Since the convergence threshold in the glasso algorithm is 10 −4 , we take entriesω ij in estimated precision matrices to be non-zero if |ω ij | > 10 −3 . Since cluster assignments can only be identified up to permutation, in all cases labels were permuted to maximize agreement with true cluster assignments before calculating these quantities. Figure 2 shows MCC plotted against per-cluster sample size n k and Supplementary Figure S1 shows corresponding plots for TPR and FPR. Due to selection of smaller tuning parameter values, BIC discovers fewer non-zeroes in the precision matrices than train/test, resulting in both fewer true positives and false positives. Under MCC, BIC, with either the γ = 1 mixture model (B1) or the non-mixture approach (Bh), leads to the best network reconstruction (except at small sample sizes with p = 25) and outperforms all other regimes at larger sample sizes."",
        [
            ""MCC summarizes these four quantities into one score and is regarded as a balanced measure; it takes values between -1 and 1, with higher values indicating better performance (see e.g. Baldi et al. (2000) for further details)."",
            ""Since the convergence threshold in the glasso algorithm is 10 −4 , we take entriesω ij in estimated precision matrices to be non-zero if |ω ij | > 10 −3 ."",
            ""Since cluster assignments can only be identified up to permutation, in all cases labels were permuted to maximize agreement with true cluster assignments before calculating these quantities."",
            ""Figure 2 shows MCC plotted against per-cluster sample size n k and Supplementary Figure S1 shows corresponding plots for TPR and FPR."",
            ""Due to selection of smaller tuning parameter values, BIC discovers fewer non-zeroes in the precision matrices than train/test, resulting in both fewer true positives and false positives."",
            ""Under MCC, BIC, with either the γ = 1 mixture model (B1) or the non-mixture approach (Bh), leads to the best network reconstruction (except at small sample sizes with p = 25) and outperforms all other regimes at larger sample sizes."",
        ],
    ),
    (
        'Societal impact measurements are mostly commissioned by governments which argue that measuring the impact on science little says about real-world benefits of research (Cohen et al., 2015). Nightingale and Scott (2007) summarize this argumentation in the following pointedly sentence: ""Research that is highly cited or published in top journals may be good for the academic discipline but not for society"" (p. 547). Governments are interested to know the importance of public-funded research (1) for the private and public sectors (e.g. health care), (2) to tackle societal challenges (e.g. climate change), and (3) for education and training of the next generations (ERiC, 2010;Grimson, 2014). The impact model of Cleary, Siegfried, Jackson, and Hunt (2013) additionally highlights the policy enactment of research, in which the impact on policies, laws, and regulations is of special interest. The current study seizes upon this additional issue by investigating a possible source for measuring policy enactment of research.',
        [
            ""Societal impact measurements are mostly commissioned by governments which argue that measuring the impact on science little says about real-world benefits of research (Cohen et al., 2015)."",
            'Nightingale and Scott (2007) summarize this argumentation in the following pointedly sentence: ""Research that is highly cited or published in top journals may be good for the academic discipline but not for society"" (p. 547).',
            ""Governments are interested to know the importance of public-funded research (1) for the private and public sectors (e.g. health care), (2) to tackle societal challenges (e.g. climate change), and (3) for education and training of the next generations (ERiC, 2010;Grimson, 2014)."",
            ""The impact model of Cleary, Siegfried, Jackson, and Hunt (2013) additionally highlights the policy enactment of research, in which the impact on policies, laws, and regulations is of special interest."",
            ""The current study seizes upon this additional issue by investigating a possible source for measuring policy enactment of research."",
        ],
    ),
    (
        ""CONCLUSIONS: This study demonstrates that TF activation, occurring in mononuclear cells of cardiac transplant recipients, is inhibited by treatment with CsA. Inhibition of monocyte TF induction by CsA may contribute to its successful use in cardiac transplant medicine and might be useful in managing further settings of vascular pathology also known to involve TF expression and NF-kappaB activation."",
        [
            ""CONCLUSIONS: This study demonstrates that TF activation, occurring in mononuclear cells of cardiac transplant recipients, is inhibited by treatment with CsA."",
            ""Inhibition of monocyte TF induction by CsA may contribute to its successful use in cardiac transplant medicine and might be useful in managing further settings of vascular pathology also known to involve TF expression and NF-kappaB activation."",
        ],
    ),
    (
        ""In contrast, anti-AIM mAb did not induce any change in the binding activity of NF-kappa B, a transcription factor whose activity is also regulated by protein kinase C. The increase in AP-1-binding activity was accompanied by the marked stimulation of the transcription of c-fos but not that of c-jun."",
        [
            ""In contrast, anti-AIM mAb did not induce any change in the binding activity of NF-kappa B, a transcription factor whose activity is also regulated by protein kinase C. The increase in AP-1-binding activity was accompanied by the marked stimulation of the transcription of c-fos but not that of c-jun.""
        ],
    ),
    (
        ""A mutant Tax protein deficient in transactivation of genes by the nuclear factor (NF)-kappaB pathway was unable to induce transcriptional activity of IL-1alpha promoter-CAT constructs, but was rescued by exogenous provision of p65/p50 NF-kappaB. We found that two IL-1alpha kappaB-like sites (positions -1,065 to -1,056 and +646 to +655) specifically formed a complex with NF-kappaB-containing nuclear extract from MT-2 cells and that NF-kappaB bound with higher affinity to the 3' NF-kappaB binding site than to the 5' NF-kappaB site."",
        [
            ""A mutant Tax protein deficient in transactivation of genes by the nuclear factor (NF)-kappaB pathway was unable to induce transcriptional activity of IL-1alpha promoter-CAT constructs, but was rescued by exogenous provision of p65/p50 NF-kappaB."",
            ""We found that two IL-1alpha kappaB-like sites (positions -1,065 to -1,056 and +646 to +655) specifically formed a complex with NF-kappaB-containing nuclear extract from MT-2 cells and that NF-kappaB bound with higher affinity to the 3' NF-kappaB binding site than to the 5' NF-kappaB site."",
        ],
    ),
    pytest.param(
        ""Protein kinase C inhibitor staurosporine, but not cyclic nucleotide-dependent protein kinase inhibitor HA-1004, also dramatically reduced constitutive levels of nuclear NF kappa B. Finally, TPA addition to monocytes infected with HIV-1 inhibited HIV-1 replication, as determined by reverse transcriptase assays, in a concentration-dependent manner."",
        [
            ""Protein kinase C inhibitor staurosporine, but not cyclic nucleotide-dependent protein kinase inhibitor HA-1004, also dramatically reduced constitutive levels of nuclear NF kappa B."",
            ""Finally, TPA addition to monocytes infected with HIV-1 inhibited HIV-1 replication, as determined by reverse transcriptase assays, in a concentration-dependent manner."",
        ],
        marks=pytest.mark.xfail,
    ),
    (
        ""There are p50.c-rel heterodimers were also detected bound to this sequence at early time points (7-16 h; early), and both remained active at later time points (40 h; late) after activation."",
        [
            ""There are p50.c-rel heterodimers were also detected bound to this sequence at early time points (7-16 h; early), and both remained active at later time points (40 h; late) after activation.""
        ],
    ),
    (
        ""This sentence mentions Eqs. 1-4 and should not be split."",
        [""This sentence mentions Eqs. 1-4 and should not be split.""],
    ),
    (
        ""This sentence ends with part an abbreviation that is part of a word material. It also has another sentence after it."",
        [
            ""This sentence ends with part an abbreviation that is part of a word material."",
            ""It also has another sentence after it."",
        ],
    ),
    (
        ""It also has a sentence before it. This sentence mentions Eqs. 1-4 and should not be split. It also has another sentence after it."",
        [
            ""It also has a sentence before it."",
            ""This sentence mentions Eqs. 1-4 and should not be split."",
            ""It also has another sentence after it."",
        ],
    ),
    (
        ""This sentence is the last segment and ends with an abbreviation that is part of a word material."",
        [
            ""This sentence is the last segment and ends with an abbreviation that is part of a word material.""
        ],
    ),
    (
        ""PDBu + iono induced equally high IL-2 levels in both groups and, when stimulated with plate-bound anti-CD3 monoclonal antibody (mAb), the IL-2 secretion by neonatal cells was undetectable and adult cells produced low amounts of IL-2 (mean 331 +/- 86 pg/ml)."",
        [
            ""PDBu + iono induced equally high IL-2 levels in both groups and, when stimulated with plate-bound anti-CD3 monoclonal antibody (mAb), the IL-2 secretion by neonatal cells was undetectable and adult cells produced low amounts of IL-2 (mean 331 +/- 86 pg/ml).""
        ],
    ),
    (
        ""    This document starts with whitespaces. Next sentence."",
        [""    "", ""This document starts with whitespaces."", ""Next sentence.""],
    ),
    pytest.param(
        ""How about tomorrow?We can meet at eden garden."",
        [""How about tomorrow?"", ""We can meet at eden garden.""],
        marks=pytest.mark.xfail,
    ),
]","Constant: TEST_CASES = [
    (
        ""LSTM networks, which we preview in Sec. 2, have been successfully"",
        [""LSTM networks, which we preview in Sec. 2, have been successfully""],
    ),
    (
        ""When the tree is simply a chain, both Eqs. 2–8 and Eqs. 9–14 reduce to the standard LSTM transitions, Eqs. 1."",
        [
            ""When the tree is simply a chain, both Eqs. 2–8 and Eqs. 9–14 reduce to the standard LSTM transitions, Eqs. 1.""
        ],
    ),
    (
        ""We used fluorescence time-lapse microscopy (Fig. 1D; fig. S1 and movies S1 and S2) and computational"",
        [
            ""We used fluorescence time-lapse microscopy (Fig. 1D; fig. S1 and movies S1 and S2) and computational""
        ],
    ),
    (
        ""Hill functions indeed fit the data well (Fig. 3A and Table 1)."",
        [""Hill functions indeed fit the data well (Fig. 3A and Table 1).""],
    ),
    (
        ""In order to produce sentence representations that fully capture the semantics of natural language, order-insensitive models are insufficient due to their inability to account for differences in meaning as a result of differences in word order or syntactic structure (e.g., “cats climb trees” vs. “trees climb cats”)."",
        [
            ""In order to produce sentence representations that fully capture the semantics of natural language, order-insensitive models are insufficient due to their inability to account for differences in meaning as a result of differences in word order or syntactic structure (e.g., “cats climb trees” vs. “trees climb cats”).""
        ],
    ),
    (
        ""There is an average exact sparsity (fraction of zeros) of the hidden layers of 83.40% on MNIST and 72.00% on CIFAR10. Figure 3 (left) provides a better understanding of the influence of sparsity."",
        [
            ""There is an average exact sparsity (fraction of zeros) of the hidden layers of 83.40% on MNIST and 72.00% on CIFAR10."",
            ""Figure 3 (left) provides a better understanding of the influence of sparsity."",
        ],
    ),
    (
        ""Sparsity has become a concept of interest, not only in computational neuroscience and machine learning but also in statistics and signal processing (Candes and Tao, 2005). It was first introduced in computational neuroscience in the context of sparse coding in the visual system (Olshausen and Field, 1997)."",
        [
            ""Sparsity has become a concept of interest, not only in computational neuroscience and machine learning but also in statistics and signal processing (Candes and Tao, 2005)."",
            ""It was first introduced in computational neuroscience in the context of sparse coding in the visual system (Olshausen and Field, 1997)."",
        ],
    ),
    (
        ""1) The first item. 2) The second item."",
        [""1) The first item."", ""2) The second item.""],
    ),
    (
        ""two of these stages (in areas V1 and V2 of visual cortex) (Lee et al., 2008), and that they"",
        [
            ""two of these stages (in areas V1 and V2 of visual cortex) (Lee et al., 2008), and that they""
        ],
    ),
    pytest.param(
        ""all neu-\nrons fire at"", [""all neu-\nrons fire at""], marks=pytest.mark.xfail
    ),
    (
        ""the support of the Defense Advanced Resarch Projects Agency (DARPA) Deep Exploration and Filtering of Text (DEFT) Program under Air Force Research Laboratory (AFRL) contract"",
        [
            ""the support of the Defense Advanced Resarch Projects Agency (DARPA) Deep Exploration and Filtering of Text (DEFT) Program under Air Force Research Laboratory (AFRL) contract""
        ],
    ),
    (
        ""While proprietary environments such as Microsoft Robotics Studio [9] and Webots [10] have many commendable attributes, we feel there is no substitute for a fully open platform."",
        [
            ""While proprietary environments such as Microsoft Robotics Studio [9] and Webots [10] have many commendable attributes, we feel there is no substitute for a fully open platform.""
        ],
    ),
    (
        ""We first produce sentence representations hL and hR for each sentence in the pair using a Tree-LSTM model over each sentence’s parse tree."",
        [
            ""We first produce sentence representations hL and hR for each sentence in the pair using a Tree-LSTM model over each sentence’s parse tree.""
        ],
    ),
    (
        ""LSTM networks, which we review in Sec. 2, have been successfully applied to a variety of sequence modeling and prediction tasks, notably machine translation (Bahdanau et al., 2014; Sutskever et al., 2014), speech recognition (Graves et al., 2013), image caption generation (Vinyals et al., 2014), and program execution (Zaremba and Sutskever, 2014)."",
        [
            ""LSTM networks, which we review in Sec. 2, have been successfully applied to a variety of sequence modeling and prediction tasks, notably machine translation (Bahdanau et al., 2014; Sutskever et al., 2014), speech recognition (Graves et al., 2013), image caption generation (Vinyals et al., 2014), and program execution (Zaremba and Sutskever, 2014).""
        ],
    ),
    (
        ""1 Introduction\n\nMost models for distributed representations of phrases and sentences—that is, models where realvalued vectors are used to represent meaning—fall into one of three classes: bag-of-words models, sequence models, and tree-structured models."",
        [
            ""1 Introduction\n\n"",
            ""Most models for distributed representations of phrases and sentences—that is, models where realvalued vectors are used to represent meaning—fall into one of three classes: bag-of-words models, sequence models, and tree-structured models."",
        ],
    ),
    (
        ""In this section, we will elaborate these philosophies and shows how they influenced the design and implementation of ROS.\n\nA. Peer-to-Peer\n\nA system built using ROS consists of a number of processes, potentially on a number of different"",
        [
            ""In this section, we will elaborate these philosophies and shows how they influenced the design and implementation of ROS.\n\n"",
            ""A. Peer-to-Peer\n\n"",
            ""A system built using ROS consists of a number of processes, potentially on a number of different"",
        ],
    ),
    (
        ""\n\n2 Long Short-Term Memory Networks\n\n\n\n2.1 Overview\n\nRecurrent neural networks (RNNs) are able to process input sequences of arbitrary length via the recursive application of a transition function on a hidden state vector ht."",
        [
            ""\n\n2 Long Short-Term Memory Networks\n\n\n\n"",
            ""2.1 Overview\n\n"",
            ""Recurrent neural networks (RNNs) are able to process input sequences of arbitrary length via the recursive application of a transition function on a hidden state vector ht."",
        ],
    ),
    (
        ""In order to address all three aspects, it is necessary to observe gene regulation in individual cells over time. Therefore, we built Bl-cascade[ strains of Escherichia coli, containing the l repressor and a downstream gene, such that both the amount of the repressor protein and the rate of expression of its target gene could be monitored simultaneously in individual cells (Fig. 1B). These strains incorporate a yellow fluorescent repressor fusion protein (cI-yfp) and a chromosomally integrated target promoter (P R ) controlling cyan fluorescent protein (cfp)."",
        [
            ""In order to address all three aspects, it is necessary to observe gene regulation in individual cells over time."",
            ""Therefore, we built Bl-cascade[ strains of Escherichia coli, containing the l repressor and a downstream gene, such that both the amount of the repressor protein and the rate of expression of its target gene could be monitored simultaneously in individual cells (Fig. 1B)."",
            ""These strains incorporate a yellow fluorescent repressor fusion protein (cI-yfp) and a chromosomally integrated target promoter (P R ) controlling cyan fluorescent protein (cfp)."",
        ],
    ),
    (
        ""This is a sentence. (This is an interjected sentence.) This is also a sentence."",
        [
            ""This is a sentence."",
            ""(This is an interjected sentence.)"",
            ""This is also a sentence."",
        ],
    ),
    (
        ""Thus, we first compute EMC 3 's response time-i.e., the duration from the initial of a call (from/to a participant in the target region) to the time when the decision of task assignment is made; and then, based on the computed response time, we estimate EMC 3 maximum throughput [28]-i.e., the maximum number of mobile users allowed in the MCS system. EMC 3 algorithm is implemented with the Java SE platform and is running on a Java HotSpot(TM) 64-Bit Server VM; and the implementation details are given in Appendix, available in the online supplemental material."",
        [
            ""Thus, we first compute EMC 3 's response time-i.e., the duration from the initial of a call (from/to a participant in the target region) to the time when the decision of task assignment is made; and then, based on the computed response time, we estimate EMC 3 maximum throughput [28]-i.e., the maximum number of mobile users allowed in the MCS system."",
            ""EMC 3 algorithm is implemented with the Java SE platform and is running on a Java HotSpot(TM) 64-Bit Server VM; and the implementation details are given in Appendix, available in the online supplemental material."",
        ],
    ),
    (
        ""Random walk models (Skellam, 1951;Turchin, 1998) received a lot of attention and were then extended to several more mathematically and statistically sophisticated approaches to interpret movement data such as State-Space Models (SSM) (Jonsen et al., 2003(Jonsen et al., , 2005 and Brownian Bridge Movement Model (BBMM) (Horne et al., 2007). Nevertheless, these models require heavy computational resources (Patterson et al., 2008) and unrealistic structural a priori hypotheses about movement, such as homogeneous movement behavior. A fundamental property of animal movements is behavioral heterogeneity (Gurarie et al., 2009) and these models poorly performed in highlighting behavioral changes in animal movements through space and time (Kranstauber et al., 2012)."",
        [
            ""Random walk models (Skellam, 1951;Turchin, 1998) received a lot of attention and were then extended to several more mathematically and statistically sophisticated approaches to interpret movement data such as State-Space Models (SSM) (Jonsen et al., 2003(Jonsen et al., , 2005 and Brownian Bridge Movement Model (BBMM) (Horne et al., 2007)."",
            ""Nevertheless, these models require heavy computational resources (Patterson et al., 2008) and unrealistic structural a priori hypotheses about movement, such as homogeneous movement behavior."",
            ""A fundamental property of animal movements is behavioral heterogeneity (Gurarie et al., 2009) and these models poorly performed in highlighting behavioral changes in animal movements through space and time (Kranstauber et al., 2012)."",
        ],
    ),
    ("". . ."", ["". . .""]),
    (
        ""IF condition and goalCondition THEN action condition relates to the current state and goalCondition to the goal state. If variable bindings exist such that predicates in condition match with the current state, and predicates in goalCondition match with the goal state then the action may be performed. Note that the action's precondition as specified in the domain model must also be satisfied. Figure 5 presents an outline of the system. Each iteration starts with a population of policies (line(2)). Current L2Plan settings are such that the individuals comprising the (1) Create initial population (2) WHILE termination criterion false (3) Determine n% fittest polices (4) Perform local search on policies (5) Insert improved policies in new generation (6) WHILE new generation not full (7) SET Pol to empty policy (8) Select two parents (9) IF crossover (10) Perform crossover (11) Pol := fittest of parents & offspring (12) ELSE (13) Pol := fittest of parents (14) ENDIF (15) IF mutation (16) Perform mutation on Pol (17) ENDIF (18) Perform local search on Pol (19) Insert Pol in new generation (20) ENDWHILE (21) (5)). Note that the evaluation of policies is implied when the fittest policy or policies is/are required."",
        [
            ""IF condition and goalCondition THEN action condition relates to the current state and goalCondition to the goal state."",
            ""If variable bindings exist such that predicates in condition match with the current state, and predicates in goalCondition match with the goal state then the action may be performed."",
            ""Note that the action's precondition as specified in the domain model must also be satisfied."",
            ""Figure 5 presents an outline of the system."",
            ""Each iteration starts with a population of policies (line(2))."",
            ""Current L2Plan settings are such that the individuals comprising the (1) Create initial population (2) WHILE termination criterion false (3) Determine n% fittest polices (4) Perform local search on policies (5) Insert improved policies in new generation (6) WHILE new generation not full (7) SET Pol to empty policy (8) Select two parents (9) IF crossover (10) Perform crossover (11) Pol := fittest of parents & offspring (12) ELSE (13) Pol := fittest of parents (14) ENDIF (15) IF mutation (16) Perform mutation on Pol (17) ENDIF (18) Perform local search on Pol (19) Insert Pol in new generation (20) ENDWHILE (21) (5))."",
            ""Note that the evaluation of policies is implied when the fittest policy or policies is/are required."",
        ],
    ),
    (
        ""MCC summarizes these four quantities into one score and is regarded as a balanced measure; it takes values between -1 and 1, with higher values indicating better performance (see e.g. Baldi et al. (2000) for further details). Since the convergence threshold in the glasso algorithm is 10 −4 , we take entriesω ij in estimated precision matrices to be non-zero if |ω ij | > 10 −3 . Since cluster assignments can only be identified up to permutation, in all cases labels were permuted to maximize agreement with true cluster assignments before calculating these quantities. Figure 2 shows MCC plotted against per-cluster sample size n k and Supplementary Figure S1 shows corresponding plots for TPR and FPR. Due to selection of smaller tuning parameter values, BIC discovers fewer non-zeroes in the precision matrices than train/test, resulting in both fewer true positives and false positives. Under MCC, BIC, with either the γ = 1 mixture model (B1) or the non-mixture approach (Bh), leads to the best network reconstruction (except at small sample sizes with p = 25) and outperforms all other regimes at larger sample sizes."",
        [
            ""MCC summarizes these four quantities into one score and is regarded as a balanced measure; it takes values between -1 and 1, with higher values indicating better performance (see e.g. Baldi et al. (2000) for further details)."",
            ""Since the convergence threshold in the glasso algorithm is 10 −4 , we take entriesω ij in estimated precision matrices to be non-zero if |ω ij | > 10 −3 ."",
            ""Since cluster assignments can only be identified up to permutation, in all cases labels were permuted to maximize agreement with true cluster assignments before calculating these quantities."",
            ""Figure 2 shows MCC plotted against per-cluster sample size n k and Supplementary Figure S1 shows corresponding plots for TPR and FPR."",
            ""Due to selection of smaller tuning parameter values, BIC discovers fewer non-zeroes in the precision matrices than train/test, resulting in both fewer true positives and false positives."",
            ""Under MCC, BIC, with either the γ = 1 mixture model (B1) or the non-mixture approach (Bh), leads to the best network reconstruction (except at small sample sizes with p = 25) and outperforms all other regimes at larger sample sizes."",
        ],
    ),
    (
        'Societal impact measurements are mostly commissioned by governments which argue that measuring the impact on science little says about real-world benefits of research (Cohen et al., 2015). Nightingale and Scott (2007) summarize this argumentation in the following pointedly sentence: ""Research that is highly cited or published in top journals may be good for the academic discipline but not for society"" (p. 547). Governments are interested to know the importance of public-funded research (1) for the private and public sectors (e.g. health care), (2) to tackle societal challenges (e.g. climate change), and (3) for education and training of the next generations (ERiC, 2010;Grimson, 2014). The impact model of Cleary, Siegfried, Jackson, and Hunt (2013) additionally highlights the policy enactment of research, in which the impact on policies, laws, and regulations is of special interest. The current study seizes upon this additional issue by investigating a possible source for measuring policy enactment of research.',
        [
            ""Societal impact measurements are mostly commissioned by governments which argue that measuring the impact on science little says about real-world benefits of research (Cohen et al., 2015)."",
            'Nightingale and Scott (2007) summarize this argumentation in the following pointedly sentence: ""Research that is highly cited or published in top journals may be good for the academic discipline but not for society"" (p. 547).',
            ""Governments are interested to know the importance of public-funded research (1) for the private and public sectors (e.g. health care), (2) to tackle societal challenges (e.g. climate change), and (3) for education and training of the next generations (ERiC, 2010;Grimson, 2014)."",
            ""The impact model of Cleary, Siegfried, Jackson, and Hunt (2013) additionally highlights the policy enactment of research, in which the impact on policies, laws, and regulations is of special interest."",
            ""The current study seizes upon this additional issue by investigating a possible source for measuring policy enactment of research."",
        ],
    ),
    (
        ""CONCLUSIONS: This study demonstrates that TF activation, occurring in mononuclear cells of cardiac transplant recipients, is inhibited by treatment with CsA. Inhibition of monocyte TF induction by CsA may contribute to its successful use in cardiac transplant medicine and might be useful in managing further settings of vascular pathology also known to involve TF expression and NF-kappaB activation."",
        [
            ""CONCLUSIONS: This study demonstrates that TF activation, occurring in mononuclear cells of cardiac transplant recipients, is inhibited by treatment with CsA."",
            ""Inhibition of monocyte TF induction by CsA may contribute to its successful use in cardiac transplant medicine and might be useful in managing further settings of vascular pathology also known to involve TF expression and NF-kappaB activation."",
        ],
    ),
    (
        ""In contrast, anti-AIM mAb did not induce any change in the binding activity of NF-kappa B, a transcription factor whose activity is also regulated by protein kinase C. The increase in AP-1-binding activity was accompanied by the marked stimulation of the transcription of c-fos but not that of c-jun."",
        [
            ""In contrast, anti-AIM mAb did not induce any change in the binding activity of NF-kappa B, a transcription factor whose activity is also regulated by protein kinase C. The increase in AP-1-binding activity was accompanied by the marked stimulation of the transcription of c-fos but not that of c-jun.""
        ],
    ),
    (
        ""A mutant Tax protein deficient in transactivation of genes by the nuclear factor (NF)-kappaB pathway was unable to induce transcriptional activity of IL-1alpha promoter-CAT constructs, but was rescued by exogenous provision of p65/p50 NF-kappaB. We found that two IL-1alpha kappaB-like sites (positions -1,065 to -1,056 and +646 to +655) specifically formed a complex with NF-kappaB-containing nuclear extract from MT-2 cells and that NF-kappaB bound with higher affinity to the 3' NF-kappaB binding site than to the 5' NF-kappaB site."",
        [
            ""A mutant Tax protein deficient in transactivation of genes by the nuclear factor (NF)-kappaB pathway was unable to induce transcriptional activity of IL-1alpha promoter-CAT constructs, but was rescued by exogenous provision of p65/p50 NF-kappaB."",
            ""We found that two IL-1alpha kappaB-like sites (positions -1,065 to -1,056 and +646 to +655) specifically formed a complex with NF-kappaB-containing nuclear extract from MT-2 cells and that NF-kappaB bound with higher affinity to the 3' NF-kappaB binding site than to the 5' NF-kappaB site."",
        ],
    ),
    pytest.param(
        ""Protein kinase C inhibitor staurosporine, but not cyclic nucleotide-dependent protein kinase inhibitor HA-1004, also dramatically reduced constitutive levels of nuclear NF kappa B. Finally, TPA addition to monocytes infected with HIV-1 inhibited HIV-1 replication, as determined by reverse transcriptase assays, in a concentration-dependent manner."",
        [
            ""Protein kinase C inhibitor staurosporine, but not cyclic nucleotide-dependent protein kinase inhibitor HA-1004, also dramatically reduced constitutive levels of nuclear NF kappa B."",
            ""Finally, TPA addition to monocytes infected with HIV-1 inhibited HIV-1 replication, as determined by reverse transcriptase assays, in a concentration-dependent manner."",
        ],
        marks=pytest.mark.xfail,
    ),
    (
        ""There are p50.c-rel heterodimers were also detected bound to this sequence at early time points (7-16 h; early), and both remained active at later time points (40 h; late) after activation."",
        [
            ""There are p50.c-rel heterodimers were also detected bound to this sequence at early time points (7-16 h; early), and both remained active at later time points (40 h; late) after activation.""
        ],
    ),
    (
        ""This sentence mentions Eqs. 1-4 and should not be split."",
        [""This sentence mentions Eqs. 1-4 and should not be split.""],
    ),
    (
        ""This sentence ends with part an abbreviation that is part of a word material. It also has another sentence after it."",
        [
            ""This sentence ends with part an abbreviation that is part of a word material."",
            ""It also has another sentence after it."",
        ],
    ),
    (
        ""It also has a sentence before it. This sentence mentions Eqs. 1-4 and should not be split. It also has another sentence after it."",
        [
            ""It also has a sentence before it."",
            ""This sentence mentions Eqs. 1-4 and should not be split."",
            ""It also has another sentence after it."",
        ],
    ),
    (
        ""This sentence is the last segment and ends with an abbreviation that is part of a word material."",
        [
            ""This sentence is the last segment and ends with an abbreviation that is part of a word material.""
        ],
    ),
    (
        ""PDBu + iono induced equally high IL-2 levels in both groups and, when stimulated with plate-bound anti-CD3 monoclonal antibody (mAb), the IL-2 secretion by neonatal cells was undetectable and adult cells produced low amounts of IL-2 (mean 331 +/- 86 pg/ml)."",
        [
            ""PDBu + iono induced equally high IL-2 levels in both groups and, when stimulated with plate-bound anti-CD3 monoclonal antibody (mAb), the IL-2 secretion by neonatal cells was undetectable and adult cells produced low amounts of IL-2 (mean 331 +/- 86 pg/ml).""
        ],
    ),
    (
        ""    This document starts with whitespaces. Next sentence."",
        [""    "", ""This document starts with whitespaces."", ""Next sentence.""],
    ),
    pytest.param(
        ""How about tomorrow?We can meet at eden garden."",
        [""How about tomorrow?"", ""We can meet at eden garden.""],
        marks=pytest.mark.xfail,
    ),
]",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_custom_segmentation.py,python,pytest,import,,,,Import: pytest,allenai,scispacy,v0.5.4,import pytest,,pytest,,,,,,,,,,,,,,,
,test_custom_segmentation.py,python,,,,,,File: tests\custom_tests,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,test_custom_segmentation.py,python,,,,,,Directory: tests\custom_tests\test_custom_segmentation.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_custom_tokenizer.py,python,"TEST_CASES = [(""using a bag-of-words model"", [""using"", ""a"", ""bag-of-words"", ""model""]),
              (""activators of cAMP- and cGMP-dependent protein"", [""activators"", ""of"", ""cAMP-"", ""and"", ""cGMP-dependent"", ""protein""]),
              (""phorbol 12-myristate 13-acetate, caused almost"", [""phorbol"", ""12-myristate"", ""13-acetate"", "","", ""caused"", ""almost""]),
              pytest.param(""let C(j) denote"", [""let"", ""C(j)"", ""denote""], marks=pytest.mark.xfail),
              pytest.param(""let (C(j)) denote"", [""let"", ""("", ""C(j)"", "")"", ""denote""], marks=pytest.mark.xfail),
              pytest.param(""let C{j} denote"", [""let"", ""C{j}"", ""denote""], marks=pytest.mark.xfail),
              pytest.param(""for the camera(s) and manipulator(s)"", [""for"", ""the"", ""camera(s)"", ""and"", ""manipulator(s)""], marks=pytest.mark.xfail),
              (""the (TRAP)-positive genes"", [""the"", ""(TRAP)-positive"", ""genes""]),
              (""the {TRAP}-positive genes"", [""the"", ""{TRAP}-positive"", ""genes""]),
              (""for [Ca2+]i protein"", [""for"", ""[Ca2+]i"", ""protein""]),
              pytest.param(""for pyrilamine[3H] protein"", [""for"", ""pyrilamine[3H]"", ""protein""], marks=pytest.mark.xfail),
              (""this is (normal) parens"", [""this"", ""is"", ""("", ""normal"", "")"", ""parens""]),
              (""this is [normal] brackets"", [""this"", ""is"", ""["", ""normal"", ""]"", ""brackets""]),
              (""this is {normal} braces"", [""this"", ""is"", ""{"", ""normal"", ""}"", ""braces""]),
              (""in the lan-\nguage of the"", [""in"", ""the"", ""language"", ""of"", ""the""]),
              (""in the lan-\n\nguage of the"", [""in"", ""the"", ""language"", ""of"", ""the""]),
              (""in the lan- \nguage of the"", [""in"", ""the"", ""language"", ""of"", ""the""]),
              (""in the lan- \n\nguage of the"", [""in"", ""the"", ""language"", ""of"", ""the""]),
              (""a 28× 28 image"", [""a"", ""28"", ""×"", ""28"", ""image""]),
              (""a 28×28 image"", [""a"", ""28"", ""×"", ""28"", ""image""]),
              (""a 28 × 28 image"", [""a"", ""28"", ""×"", ""28"", ""image""]),
              (""the neurons’ activation"", [""the"", ""neurons"", ""’"", ""activation""]),
              (""the neurons' activation"", [""the"", ""neurons"", ""'"", ""activation""]),
              pytest.param(""H3G 1Y6"", [""H3G"", ""1Y6""], marks=pytest.mark.xfail),
              (""HFG 1Y6"", [""HFG"", ""1Y6""]),
              pytest.param(""H3g 1Y6"", [""H3g"", ""1Y6""], marks=pytest.mark.xfail),
              pytest.param(""h3g 1Y6"", [""h3g"", ""1Y6""], marks=pytest.mark.xfail),
              pytest.param(""h36g 1Y6"", [""h36g"", ""1Y6""], marks=pytest.mark.xfail),
              (""h3gh 1Y6"", [""h3gh"", ""1Y6""]),
              (""h3g3 1Y6"", [""h3g3"", ""1Y6""]),
              (""3g"", [""3"", ""g""]),
              (""(3g)"", [""("", ""3"", ""g"", "")""]),
              (""This can be seen in Figure 1D. Therefore"", [""This"", ""can"", ""be"", ""seen"", ""in"", ""Figure"", ""1D"", ""."", ""Therefore""]),
              (""This can be seen in Figure 1d. Therefore"", [""This"", ""can"", ""be"", ""seen"", ""in"", ""Figure"", ""1d"", ""."", ""Therefore""]),
              (""This is a sentence."", [""This"", ""is"", ""a"", ""sentence"", "".""]),
              (""result of 1.345 is good"", [""result"", ""of"", ""1.345"", ""is"", ""good""]),
              (""This sentence ends with a single 1."", [""This"", ""sentence"", ""ends"", ""with"", ""a"", ""single"", ""1"", "".""]),
              (""This sentence ends with a single 1. This is the next sentence."", [""This"", ""sentence"", ""ends"", ""with"", ""a"", ""single"", ""1"", ""."", ""This"", ""is"", ""the"", ""next"", ""sentence"", "".""]),
              (""sec. secs. Sec. Secs. fig. figs. Fig. Figs. eq. eqs. Eq. Eqs. no. nos. No. Nos. al."", [""sec."", ""secs."", ""Sec."", ""Secs."", ""fig."", ""figs."", ""Fig."", ""Figs."", ""eq."", ""eqs."", ""Eq."", ""Eqs."", ""no."", ""nos."", ""No."", ""Nos."", ""al.""]),
              (""in the Gq/G11 protein"", [""in"", ""the"", ""Gq/G11"", ""protein""]),
              (""in the G1/G11 protein"", [""in"", ""the"", ""G1/G11"", ""protein""]),
              (""in the G1/11 protein"", [""in"", ""the"", ""G1/11"", ""protein""]),
              (""in the Gq/11 protein"", [""in"", ""the"", ""Gq/11"", ""protein""]),
              (""This is a sentence.This is another."", [""This"", ""is"", ""a"", ""sentence"", ""."", ""This"", ""is"", ""another"", "".""]),
              (""This number 1.456 should not be tokenized."", [""This"", ""number"", ""1.456"", ""should"", ""not"", ""be"", ""tokenized"", "".""]),
             ]",constant,"TEST_CASES = [(""using a bag-of-words model"", [""using"", ""a"", ""bag-of-words"", ""model""]),
              (""activators of cAMP- and cGMP-dependent protein"", [""activators"", ""of"", ""cAMP-"", ""and"", ""cGMP-dependent"", ""protein""]),
              (""phorbol 12-myristate 13-acetate, caused almost"", [""phorbol"", ""12-myristate"", ""13-acetate"", "","", ""caused"", ""almost""]),
              pytest.param(""let C(j) denote"", [""let"", ""C(j)"", ""denote""], marks=pytest.mark.xfail),
              pytest.param(""let (C(j)) denote"", [""let"", ""("", ""C(j)"", "")"", ""denote""], marks=pytest.mark.xfail),
              pytest.param(""let C{j} denote"", [""let"", ""C{j}"", ""denote""], marks=pytest.mark.xfail),
              pytest.param(""for the camera(s) and manipulator(s)"", [""for"", ""the"", ""camera(s)"", ""and"", ""manipulator(s)""], marks=pytest.mark.xfail),
              (""the (TRAP)-positive genes"", [""the"", ""(TRAP)-positive"", ""genes""]),
              (""the {TRAP}-positive genes"", [""the"", ""{TRAP}-positive"", ""genes""]),
              (""for [Ca2+]i protein"", [""for"", ""[Ca2+]i"", ""protein""]),
              pytest.param(""for pyrilamine[3H] protein"", [""for"", ""pyrilamine[3H]"", ""protein""], marks=pytest.mark.xfail),
              (""this is (normal) parens"", [""this"", ""is"", ""("", ""normal"", "")"", ""parens""]),
              (""this is [normal] brackets"", [""this"", ""is"", ""["", ""normal"", ""]"", ""brackets""]),
              (""this is {normal} braces"", [""this"", ""is"", ""{"", ""normal"", ""}"", ""braces""]),
              (""in the lan-\nguage of the"", [""in"", ""the"", ""language"", ""of"", ""the""]),
              (""in the lan-\n\nguage of the"", [""in"", ""the"", ""language"", ""of"", ""the""]),
              (""in the lan- \nguage of the"", [""in"", ""the"", ""language"", ""of"", ""the""]),
              (""in the lan- \n\nguage of the"", [""in"", ""the"", ""language"", ""of"", ""the""]),
              (""a 28× 28 image"", [""a"", ""28"", ""×"", ""28"", ""image""]),
              (""a 28×28 image"", [""a"", ""28"", ""×"", ""28"", ""image""]),
              (""a 28 × 28 image"", [""a"", ""28"", ""×"", ""28"", ""image""]),
              (""the neurons’ activation"", [""the"", ""neurons"", ""’"", ""activation""]),
              (""the neurons' activation"", [""the"", ""neurons"", ""'"", ""activation""]),
              pytest.param(""H3G 1Y6"", [""H3G"", ""1Y6""], marks=pytest.mark.xfail),
              (""HFG 1Y6"", [""HFG"", ""1Y6""]),
              pytest.param(""H3g 1Y6"", [""H3g"", ""1Y6""], marks=pytest.mark.xfail),
              pytest.param(""h3g 1Y6"", [""h3g"", ""1Y6""], marks=pytest.mark.xfail),
              pytest.param(""h36g 1Y6"", [""h36g"", ""1Y6""], marks=pytest.mark.xfail),
              (""h3gh 1Y6"", [""h3gh"", ""1Y6""]),
              (""h3g3 1Y6"", [""h3g3"", ""1Y6""]),
              (""3g"", [""3"", ""g""]),
              (""(3g)"", [""("", ""3"", ""g"", "")""]),
              (""This can be seen in Figure 1D. Therefore"", [""This"", ""can"", ""be"", ""seen"", ""in"", ""Figure"", ""1D"", ""."", ""Therefore""]),
              (""This can be seen in Figure 1d. Therefore"", [""This"", ""can"", ""be"", ""seen"", ""in"", ""Figure"", ""1d"", ""."", ""Therefore""]),
              (""This is a sentence."", [""This"", ""is"", ""a"", ""sentence"", "".""]),
              (""result of 1.345 is good"", [""result"", ""of"", ""1.345"", ""is"", ""good""]),
              (""This sentence ends with a single 1."", [""This"", ""sentence"", ""ends"", ""with"", ""a"", ""single"", ""1"", "".""]),
              (""This sentence ends with a single 1. This is the next sentence."", [""This"", ""sentence"", ""ends"", ""with"", ""a"", ""single"", ""1"", ""."", ""This"", ""is"", ""the"", ""next"", ""sentence"", "".""]),
              (""sec. secs. Sec. Secs. fig. figs. Fig. Figs. eq. eqs. Eq. Eqs. no. nos. No. Nos. al."", [""sec."", ""secs."", ""Sec."", ""Secs."", ""fig."", ""figs."", ""Fig."", ""Figs."", ""eq."", ""eqs."", ""Eq."", ""Eqs."", ""no."", ""nos."", ""No."", ""Nos."", ""al.""]),
              (""in the Gq/G11 protein"", [""in"", ""the"", ""Gq/G11"", ""protein""]),
              (""in the G1/G11 protein"", [""in"", ""the"", ""G1/G11"", ""protein""]),
              (""in the G1/11 protein"", [""in"", ""the"", ""G1/11"", ""protein""]),
              (""in the Gq/11 protein"", [""in"", ""the"", ""Gq/11"", ""protein""]),
              (""This is a sentence.This is another."", [""This"", ""is"", ""a"", ""sentence"", ""."", ""This"", ""is"", ""another"", "".""]),
              (""This number 1.456 should not be tokenized."", [""This"", ""number"", ""1.456"", ""should"", ""not"", ""be"", ""tokenized"", "".""]),
             ]",TEST_CASES,"[(""using a bag-of-words model"", [""using"", ""a"", ""bag-of-words"", ""model""]),
              (""activators of cAMP- and cGMP-dependent protein"", [""activators"", ""of"", ""cAMP-"", ""and"", ""cGMP-dependent"", ""protein""]),
              (""phorbol 12-myristate 13-acetate, caused almost"", [""phorbol"", ""12-myristate"", ""13-acetate"", "","", ""caused"", ""almost""]),
              pytest.param(""let C(j) denote"", [""let"", ""C(j)"", ""denote""], marks=pytest.mark.xfail),
              pytest.param(""let (C(j)) denote"", [""let"", ""("", ""C(j)"", "")"", ""denote""], marks=pytest.mark.xfail),
              pytest.param(""let C{j} denote"", [""let"", ""C{j}"", ""denote""], marks=pytest.mark.xfail),
              pytest.param(""for the camera(s) and manipulator(s)"", [""for"", ""the"", ""camera(s)"", ""and"", ""manipulator(s)""], marks=pytest.mark.xfail),
              (""the (TRAP)-positive genes"", [""the"", ""(TRAP)-positive"", ""genes""]),
              (""the {TRAP}-positive genes"", [""the"", ""{TRAP}-positive"", ""genes""]),
              (""for [Ca2+]i protein"", [""for"", ""[Ca2+]i"", ""protein""]),
              pytest.param(""for pyrilamine[3H] protein"", [""for"", ""pyrilamine[3H]"", ""protein""], marks=pytest.mark.xfail),
              (""this is (normal) parens"", [""this"", ""is"", ""("", ""normal"", "")"", ""parens""]),
              (""this is [normal] brackets"", [""this"", ""is"", ""["", ""normal"", ""]"", ""brackets""]),
              (""this is {normal} braces"", [""this"", ""is"", ""{"", ""normal"", ""}"", ""braces""]),
              (""in the lan-\nguage of the"", [""in"", ""the"", ""language"", ""of"", ""the""]),
              (""in the lan-\n\nguage of the"", [""in"", ""the"", ""language"", ""of"", ""the""]),
              (""in the lan- \nguage of the"", [""in"", ""the"", ""language"", ""of"", ""the""]),
              (""in the lan- \n\nguage of the"", [""in"", ""the"", ""language"", ""of"", ""the""]),
              (""a 28× 28 image"", [""a"", ""28"", ""×"", ""28"", ""image""]),
              (""a 28×28 image"", [""a"", ""28"", ""×"", ""28"", ""image""]),
              (""a 28 × 28 image"", [""a"", ""28"", ""×"", ""28"", ""image""]),
              (""the neurons’ activation"", [""the"", ""neurons"", ""’"", ""activation""]),
              (""the neurons' activation"", [""the"", ""neurons"", ""'"", ""activation""]),
              pytest.param(""H3G 1Y6"", [""H3G"", ""1Y6""], marks=pytest.mark.xfail),
              (""HFG 1Y6"", [""HFG"", ""1Y6""]),
              pytest.param(""H3g 1Y6"", [""H3g"", ""1Y6""], marks=pytest.mark.xfail),
              pytest.param(""h3g 1Y6"", [""h3g"", ""1Y6""], marks=pytest.mark.xfail),
              pytest.param(""h36g 1Y6"", [""h36g"", ""1Y6""], marks=pytest.mark.xfail),
              (""h3gh 1Y6"", [""h3gh"", ""1Y6""]),
              (""h3g3 1Y6"", [""h3g3"", ""1Y6""]),
              (""3g"", [""3"", ""g""]),
              (""(3g)"", [""("", ""3"", ""g"", "")""]),
              (""This can be seen in Figure 1D. Therefore"", [""This"", ""can"", ""be"", ""seen"", ""in"", ""Figure"", ""1D"", ""."", ""Therefore""]),
              (""This can be seen in Figure 1d. Therefore"", [""This"", ""can"", ""be"", ""seen"", ""in"", ""Figure"", ""1d"", ""."", ""Therefore""]),
              (""This is a sentence."", [""This"", ""is"", ""a"", ""sentence"", "".""]),
              (""result of 1.345 is good"", [""result"", ""of"", ""1.345"", ""is"", ""good""]),
              (""This sentence ends with a single 1."", [""This"", ""sentence"", ""ends"", ""with"", ""a"", ""single"", ""1"", "".""]),
              (""This sentence ends with a single 1. This is the next sentence."", [""This"", ""sentence"", ""ends"", ""with"", ""a"", ""single"", ""1"", ""."", ""This"", ""is"", ""the"", ""next"", ""sentence"", "".""]),
              (""sec. secs. Sec. Secs. fig. figs. Fig. Figs. eq. eqs. Eq. Eqs. no. nos. No. Nos. al."", [""sec."", ""secs."", ""Sec."", ""Secs."", ""fig."", ""figs."", ""Fig."", ""Figs."", ""eq."", ""eqs."", ""Eq."", ""Eqs."", ""no."", ""nos."", ""No."", ""Nos."", ""al.""]),
              (""in the Gq/G11 protein"", [""in"", ""the"", ""Gq/G11"", ""protein""]),
              (""in the G1/G11 protein"", [""in"", ""the"", ""G1/G11"", ""protein""]),
              (""in the G1/11 protein"", [""in"", ""the"", ""G1/11"", ""protein""]),
              (""in the Gq/11 protein"", [""in"", ""the"", ""Gq/11"", ""protein""]),
              (""This is a sentence.This is another."", [""This"", ""is"", ""a"", ""sentence"", ""."", ""This"", ""is"", ""another"", "".""]),
              (""This number 1.456 should not be tokenized."", [""This"", ""number"", ""1.456"", ""should"", ""not"", ""be"", ""tokenized"", "".""]),
             ]","Constant: TEST_CASES = [(""using a bag-of-words model"", [""using"", ""a"", ""bag-of-words"", ""model""]),
              (""activators of cAMP- and cGMP-dependent protein"", [""activators"", ""of"", ""cAMP-"", ""and"", ""cGMP-dependent"", ""protein""]),
              (""phorbol 12-myristate 13-acetate, caused almost"", [""phorbol"", ""12-myristate"", ""13-acetate"", "","", ""caused"", ""almost""]),
              pytest.param(""let C(j) denote"", [""let"", ""C(j)"", ""denote""], marks=pytest.mark.xfail),
              pytest.param(""let (C(j)) denote"", [""let"", ""("", ""C(j)"", "")"", ""denote""], marks=pytest.mark.xfail),
              pytest.param(""let C{j} denote"", [""let"", ""C{j}"", ""denote""], marks=pytest.mark.xfail),
              pytest.param(""for the camera(s) and manipulator(s)"", [""for"", ""the"", ""camera(s)"", ""and"", ""manipulator(s)""], marks=pytest.mark.xfail),
              (""the (TRAP)-positive genes"", [""the"", ""(TRAP)-positive"", ""genes""]),
              (""the {TRAP}-positive genes"", [""the"", ""{TRAP}-positive"", ""genes""]),
              (""for [Ca2+]i protein"", [""for"", ""[Ca2+]i"", ""protein""]),
              pytest.param(""for pyrilamine[3H] protein"", [""for"", ""pyrilamine[3H]"", ""protein""], marks=pytest.mark.xfail),
              (""this is (normal) parens"", [""this"", ""is"", ""("", ""normal"", "")"", ""parens""]),
              (""this is [normal] brackets"", [""this"", ""is"", ""["", ""normal"", ""]"", ""brackets""]),
              (""this is {normal} braces"", [""this"", ""is"", ""{"", ""normal"", ""}"", ""braces""]),
              (""in the lan-\nguage of the"", [""in"", ""the"", ""language"", ""of"", ""the""]),
              (""in the lan-\n\nguage of the"", [""in"", ""the"", ""language"", ""of"", ""the""]),
              (""in the lan- \nguage of the"", [""in"", ""the"", ""language"", ""of"", ""the""]),
              (""in the lan- \n\nguage of the"", [""in"", ""the"", ""language"", ""of"", ""the""]),
              (""a 28× 28 image"", [""a"", ""28"", ""×"", ""28"", ""image""]),
              (""a 28×28 image"", [""a"", ""28"", ""×"", ""28"", ""image""]),
              (""a 28 × 28 image"", [""a"", ""28"", ""×"", ""28"", ""image""]),
              (""the neurons’ activation"", [""the"", ""neurons"", ""’"", ""activation""]),
              (""the neurons' activation"", [""the"", ""neurons"", ""'"", ""activation""]),
              pytest.param(""H3G 1Y6"", [""H3G"", ""1Y6""], marks=pytest.mark.xfail),
              (""HFG 1Y6"", [""HFG"", ""1Y6""]),
              pytest.param(""H3g 1Y6"", [""H3g"", ""1Y6""], marks=pytest.mark.xfail),
              pytest.param(""h3g 1Y6"", [""h3g"", ""1Y6""], marks=pytest.mark.xfail),
              pytest.param(""h36g 1Y6"", [""h36g"", ""1Y6""], marks=pytest.mark.xfail),
              (""h3gh 1Y6"", [""h3gh"", ""1Y6""]),
              (""h3g3 1Y6"", [""h3g3"", ""1Y6""]),
              (""3g"", [""3"", ""g""]),
              (""(3g)"", [""("", ""3"", ""g"", "")""]),
              (""This can be seen in Figure 1D. Therefore"", [""This"", ""can"", ""be"", ""seen"", ""in"", ""Figure"", ""1D"", ""."", ""Therefore""]),
              (""This can be seen in Figure 1d. Therefore"", [""This"", ""can"", ""be"", ""seen"", ""in"", ""Figure"", ""1d"", ""."", ""Therefore""]),
              (""This is a sentence."", [""This"", ""is"", ""a"", ""sentence"", "".""]),
              (""result of 1.345 is good"", [""result"", ""of"", ""1.345"", ""is"", ""good""]),
              (""This sentence ends with a single 1."", [""This"", ""sentence"", ""ends"", ""with"", ""a"", ""single"", ""1"", "".""]),
              (""This sentence ends with a single 1. This is the next sentence."", [""This"", ""sentence"", ""ends"", ""with"", ""a"", ""single"", ""1"", ""."", ""This"", ""is"", ""the"", ""next"", ""sentence"", "".""]),
              (""sec. secs. Sec. Secs. fig. figs. Fig. Figs. eq. eqs. Eq. Eqs. no. nos. No. Nos. al."", [""sec."", ""secs."", ""Sec."", ""Secs."", ""fig."", ""figs."", ""Fig."", ""Figs."", ""eq."", ""eqs."", ""Eq."", ""Eqs."", ""no."", ""nos."", ""No."", ""Nos."", ""al.""]),
              (""in the Gq/G11 protein"", [""in"", ""the"", ""Gq/G11"", ""protein""]),
              (""in the G1/G11 protein"", [""in"", ""the"", ""G1/G11"", ""protein""]),
              (""in the G1/11 protein"", [""in"", ""the"", ""G1/11"", ""protein""]),
              (""in the Gq/11 protein"", [""in"", ""the"", ""Gq/11"", ""protein""]),
              (""This is a sentence.This is another."", [""This"", ""is"", ""a"", ""sentence"", ""."", ""This"", ""is"", ""another"", "".""]),
              (""This number 1.456 should not be tokenized."", [""This"", ""number"", ""1.456"", ""should"", ""not"", ""be"", ""tokenized"", "".""]),
             ]",allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_custom_tokenizer.py,python,pytest,import,,,,Import: pytest,allenai,scispacy,v0.5.4,import pytest,,pytest,,,,,,,,,,,,,,,
,test_custom_tokenizer.py,python,,,,,,File: tests\custom_tests,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,test_custom_tokenizer.py,python,,,,,,Directory: tests\custom_tests\test_custom_tokenizer.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_whitespace.py,python,"TestWhitespace.nlp = spacy.load(""en_core_sci_sm"")",class_field,,,,"Class field: TestWhitespace.nlp = spacy.load(""en_core_sci_sm"")",allenai,scispacy,v0.5.4,,,,,,,TestWhitespace,,,"nlp = spacy.load(""en_core_sci_sm"")",,,,,nlp,,"spacy.load(""en_core_sci_sm"")",
allenai_scispacy_v0.5.4,test_whitespace.py,python,"[pytest.mark.parametrize(""text"", [""lorem ipsum""])] TestWhitespace.test_tokenizer_splits_single_space(self, text)",class_method,,,,"Class method: [pytest.mark.parametrize(""text"", [""lorem ipsum""])] TestWhitespace.test_tokenizer_splits_single_space(self, text)",allenai,scispacy,v0.5.4,,,,,,,TestWhitespace,test_tokenizer_splits_single_space,"(self, text)",,,,,,,,,"pytest.mark.parametrize(""text"", [""lorem ipsum""])"
allenai_scispacy_v0.5.4,test_whitespace.py,python,"[pytest.mark.parametrize(""text"", [""lorem  ipsum""])] TestWhitespace.test_tokenizer_splits_double_space(self, text)",class_method,,,,"Class method: [pytest.mark.parametrize(""text"", [""lorem  ipsum""])] TestWhitespace.test_tokenizer_splits_double_space(self, text)",allenai,scispacy,v0.5.4,,,,,,,TestWhitespace,test_tokenizer_splits_double_space,"(self, text)",,,,,,,,,"pytest.mark.parametrize(""text"", [""lorem  ipsum""])"
allenai_scispacy_v0.5.4,test_whitespace.py,python,"[pytest.mark.parametrize(""text"", [""lorem ipsum  ""])] TestWhitespace.test_tokenizer_handles_double_trainling_ws(self, text)",class_method,,,,"Class method: [pytest.mark.parametrize(""text"", [""lorem ipsum  ""])] TestWhitespace.test_tokenizer_handles_double_trainling_ws(self, text)",allenai,scispacy,v0.5.4,,,,,,,TestWhitespace,test_tokenizer_handles_double_trainling_ws,"(self, text)",,,,,,,,,"pytest.mark.parametrize(""text"", [""lorem ipsum  ""])"
allenai_scispacy_v0.5.4,test_whitespace.py,python,"[pytest.mark.parametrize(""text"", [""lorem\nipsum""])] TestWhitespace.test_tokenizer_splits_newline(self, text)",class_method,,,,"Class method: [pytest.mark.parametrize(""text"", [""lorem\nipsum""])] TestWhitespace.test_tokenizer_splits_newline(self, text)",allenai,scispacy,v0.5.4,,,,,,,TestWhitespace,test_tokenizer_splits_newline,"(self, text)",,,,,,,,,"pytest.mark.parametrize(""text"", [""lorem\nipsum""])"
allenai_scispacy_v0.5.4,test_whitespace.py,python,"[pytest.mark.parametrize(""text"", [""lorem \nipsum""])] TestWhitespace.test_tokenizer_splits_newline_space(self, text)",class_method,,,,"Class method: [pytest.mark.parametrize(""text"", [""lorem \nipsum""])] TestWhitespace.test_tokenizer_splits_newline_space(self, text)",allenai,scispacy,v0.5.4,,,,,,,TestWhitespace,test_tokenizer_splits_newline_space,"(self, text)",,,,,,,,,"pytest.mark.parametrize(""text"", [""lorem \nipsum""])"
allenai_scispacy_v0.5.4,test_whitespace.py,python,"[pytest.mark.parametrize(""text"", [""lorem  \nipsum""])] TestWhitespace.test_tokenizer_splits_newline_double_space(self, text)",class_method,,,,"Class method: [pytest.mark.parametrize(""text"", [""lorem  \nipsum""])] TestWhitespace.test_tokenizer_splits_newline_double_space(self, text)",allenai,scispacy,v0.5.4,,,,,,,TestWhitespace,test_tokenizer_splits_newline_double_space,"(self, text)",,,,,,,,,"pytest.mark.parametrize(""text"", [""lorem  \nipsum""])"
allenai_scispacy_v0.5.4,test_whitespace.py,python,"[pytest.mark.parametrize(""text"", [""lorem \n ipsum""])] TestWhitespace.test_tokenizer_splits_newline_space_wrap(self, text)",class_method,,,,"Class method: [pytest.mark.parametrize(""text"", [""lorem \n ipsum""])] TestWhitespace.test_tokenizer_splits_newline_space_wrap(self, text)",allenai,scispacy,v0.5.4,,,,,,,TestWhitespace,test_tokenizer_splits_newline_space_wrap,"(self, text)",,,,,,,,,"pytest.mark.parametrize(""text"", [""lorem \n ipsum""])"
allenai_scispacy_v0.5.4,test_whitespace.py,python,TestWhitespace,class,,,,Class: TestWhitespace,allenai,scispacy,v0.5.4,,,,,,,TestWhitespace,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_whitespace.py,python,pytest,import,,,,Import: pytest,allenai,scispacy,v0.5.4,import pytest,,pytest,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_whitespace.py,python,spacy,import,,,,Import: spacy,allenai,scispacy,v0.5.4,import spacy,,spacy,,,,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_whitespace.py,python,Language from spacy.language,local_import,,,,Import: Language from spacy.language,allenai,scispacy,v0.5.4,from spacy.language import Language as SpacyModelType,spacy.language,Language,,,spacy.language,,,,,,,,,,,,
allenai_scispacy_v0.5.4,test_whitespace.py,python,pysbd_sentencizer from scispacy.custom_sentence_segmenter,local_import,,,,Import: pysbd_sentencizer from scispacy.custom_sentence_segmenter,allenai,scispacy,v0.5.4,from scispacy.custom_sentence_segmenter import pysbd_sentencizer,scispacy.custom_sentence_segmenter,pysbd_sentencizer,,,scispacy.custom_sentence_segmenter,,,,,,,,,,,,
,test_whitespace.py,python,,,,,,File: tests\custom_tests,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
,test_whitespace.py,python,,,,,,Directory: tests\custom_tests\test_whitespace.py,allenai,scispacy,v0.5.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,process_options(),function,,,,Function: process_options(),qutip,qutip,v5.0.4,,,,process_options,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,"_get_environment_bool(var, default=False)",function,,,,"Function: _get_environment_bool(var, default=False)",qutip,qutip,v5.0.4,,,,_get_environment_bool,"(var, default=False)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,"_parse_bool_user_argument(options, name)",function,,,,"Function: _parse_bool_user_argument(options, name)",qutip,qutip,v5.0.4,,,,_parse_bool_user_argument,"(options, name)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,_determine_user_arguments(options),function,,,,Function: _determine_user_arguments(options),qutip,qutip,v5.0.4,,,,_determine_user_arguments,(options),,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,_determine_compilation_options(options),function,,,,Function: _determine_compilation_options(options),qutip,qutip,v5.0.4,,,,_determine_compilation_options,(options),,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,_determine_cythonize_options(options),function,,,,Function: _determine_cythonize_options(options),qutip,qutip,v5.0.4,,,,_determine_cythonize_options,(options),,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,_determine_version(options),function,,,,Function: _determine_version(options),qutip,qutip,v5.0.4,,,,_determine_version,(options),,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,create_version_py_file(options),function,,,,Function: create_version_py_file(options),qutip,qutip,v5.0.4,,,,create_version_py_file,(options),,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,_extension_extra_sources(),function,,,,Function: _extension_extra_sources(),qutip,qutip,v5.0.4,,,,_extension_extra_sources,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,_create_int_type_file(options),function,,,,Function: _create_int_type_file(options),qutip,qutip,v5.0.4,,,,_create_int_type_file,(options),,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,create_extension_modules(options),function,,,,Function: create_extension_modules(options),qutip,qutip,v5.0.4,,,,create_extension_modules,(options),,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,print_epilogue(),function,,,,Function: print_epilogue(),qutip,qutip,v5.0.4,,,,print_epilogue,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,collections,import,,,,Import: collections,qutip,qutip,v5.0.4,import collections,,collections,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,os,import,,,,Import: os,qutip,qutip,v5.0.4,import os,,os,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,pathlib,import,,,,Import: pathlib,qutip,qutip,v5.0.4,import pathlib,,pathlib,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,subprocess,import,,,,Import: subprocess,qutip,qutip,v5.0.4,import subprocess,,subprocess,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,sys,import,,,,Import: sys,qutip,qutip,v5.0.4,import sys,,sys,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,sysconfig,import,,,,Import: sysconfig,qutip,qutip,v5.0.4,import sysconfig,,sysconfig,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,warnings,import,,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,,warnings,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,packaging.version,import,,,,Import: packaging.version,qutip,qutip,v5.0.4,import packaging.version,,packaging.version,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,setup from setuptools,import,,,,Import: setup from setuptools,qutip,qutip,v5.0.4,"from setuptools import setup, Extension",setuptools,setup,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,Extension from setuptools,import,,,,Import: Extension from setuptools,qutip,qutip,v5.0.4,"from setuptools import setup, Extension",setuptools,Extension,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,distutils.sysconfig,import,,,,Import: distutils.sysconfig,qutip,qutip,v5.0.4,import distutils.sysconfig,,distutils.sysconfig,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,cythonize from Cython.Build,local_import,,,,Import: cythonize from Cython.Build,qutip,qutip,v5.0.4,from Cython.Build import cythonize,Cython.Build,cythonize,,,Cython.Build,,,,,,,,,,,,
qutip_qutip_v5.0.4,setup.py,python,build_ext from Cython.Distutils,local_import,,,,Import: build_ext from Cython.Distutils,qutip,qutip,v5.0.4,from Cython.Distutils import build_ext,Cython.Distutils,build_ext,,,Cython.Distutils,,,,,,,,,,,,
,setup.py,python,,,,,,File: .,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,setup.py,python,,,,,,Directory: setup.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,_check_source_folder_and_imported_qutip_match(),function,,,,Function: _check_source_folder_and_imported_qutip_match(),qutip,qutip,v5.0.4,,,,_check_source_folder_and_imported_qutip_match,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,qutip_version(),function,,,,Function: qutip_version(),qutip,qutip,v5.0.4,,,,qutip_version,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,needs_sphinx = '1.8.3',constant,needs_sphinx = '1.8.3',needs_sphinx,'1.8.3',Constant: needs_sphinx = '1.8.3',qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,"extensions = ['sphinx.ext.mathjax',
              'matplotlib.sphinxext.plot_directive',
              'sphinx.ext.autodoc',
              'sphinx.ext.todo',
              'sphinx.ext.doctest',
              'sphinx.ext.autosummary',
              'numpydoc',
              'sphinx.ext.extlinks',
              'sphinx.ext.viewcode',
              'sphinx.ext.ifconfig',
              'sphinx.ext.napoleon',
              'sphinx_gallery.gen_gallery',
              'sphinxcontrib.bibtex']",constant,"extensions = ['sphinx.ext.mathjax',
              'matplotlib.sphinxext.plot_directive',
              'sphinx.ext.autodoc',
              'sphinx.ext.todo',
              'sphinx.ext.doctest',
              'sphinx.ext.autosummary',
              'numpydoc',
              'sphinx.ext.extlinks',
              'sphinx.ext.viewcode',
              'sphinx.ext.ifconfig',
              'sphinx.ext.napoleon',
              'sphinx_gallery.gen_gallery',
              'sphinxcontrib.bibtex']",extensions,"['sphinx.ext.mathjax',
              'matplotlib.sphinxext.plot_directive',
              'sphinx.ext.autodoc',
              'sphinx.ext.todo',
              'sphinx.ext.doctest',
              'sphinx.ext.autosummary',
              'numpydoc',
              'sphinx.ext.extlinks',
              'sphinx.ext.viewcode',
              'sphinx.ext.ifconfig',
              'sphinx.ext.napoleon',
              'sphinx_gallery.gen_gallery',
              'sphinxcontrib.bibtex']","Constant: extensions = ['sphinx.ext.mathjax',
              'matplotlib.sphinxext.plot_directive',
              'sphinx.ext.autodoc',
              'sphinx.ext.todo',
              'sphinx.ext.doctest',
              'sphinx.ext.autosummary',
              'numpydoc',
              'sphinx.ext.extlinks',
              'sphinx.ext.viewcode',
              'sphinx.ext.ifconfig',
              'sphinx.ext.napoleon',
              'sphinx_gallery.gen_gallery',
              'sphinxcontrib.bibtex']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,templates_path = ['templates'],constant,templates_path = ['templates'],templates_path,['templates'],Constant: templates_path = ['templates'],qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,savefig_dir = '_images',constant,savefig_dir = '_images',savefig_dir,'_images',Constant: savefig_dir = '_images',qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,source_suffix = '.rst',constant,source_suffix = '.rst',source_suffix,'.rst',Constant: source_suffix = '.rst',qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,master_doc = 'index',constant,master_doc = 'index',master_doc,'index',Constant: master_doc = 'index',qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,project = 'QuTiP: Quantum Toolbox in Python',constant,project = 'QuTiP: Quantum Toolbox in Python',project,'QuTiP: Quantum Toolbox in Python',Constant: project = 'QuTiP: Quantum Toolbox in Python',qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,"author = ', '.join([
    'P.D. Nation',
    'J.R. Johansson',
    'A.J.G. Pitchford',
    'C. Granade',
    'A.L. Grimsmo',
    'N. Shammah',
    'S. Ahmed',
    'N. Lambert',
    'B. Li',
    'J. Lishman',
    'S. Cross',
    'A. Galicia',
    'P. Menczel',
    'P. Hopf',
    'and E. Giguère'
])",constant,"author = ', '.join([
    'P.D. Nation',
    'J.R. Johansson',
    'A.J.G. Pitchford',
    'C. Granade',
    'A.L. Grimsmo',
    'N. Shammah',
    'S. Ahmed',
    'N. Lambert',
    'B. Li',
    'J. Lishman',
    'S. Cross',
    'A. Galicia',
    'P. Menczel',
    'P. Hopf',
    'and E. Giguère'
])",author,"', '.join([
    'P.D. Nation',
    'J.R. Johansson',
    'A.J.G. Pitchford',
    'C. Granade',
    'A.L. Grimsmo',
    'N. Shammah',
    'S. Ahmed',
    'N. Lambert',
    'B. Li',
    'J. Lishman',
    'S. Cross',
    'A. Galicia',
    'P. Menczel',
    'P. Hopf',
    'and E. Giguère'
])","Constant: author = ', '.join([
    'P.D. Nation',
    'J.R. Johansson',
    'A.J.G. Pitchford',
    'C. Granade',
    'A.L. Grimsmo',
    'N. Shammah',
    'S. Ahmed',
    'N. Lambert',
    'B. Li',
    'J. Lishman',
    'S. Cross',
    'A. Galicia',
    'P. Menczel',
    'P. Hopf',
    'and E. Giguère'
])",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,"copyright = '2011 to 2024 inclusive, QuTiP developers and contributors'",constant,"copyright = '2011 to 2024 inclusive, QuTiP developers and contributors'",copyright,"'2011 to 2024 inclusive, QuTiP developers and contributors'","Constant: copyright = '2011 to 2024 inclusive, QuTiP developers and contributors'",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,release = qutip_version(),constant,release = qutip_version(),release,qutip_version(),Constant: release = qutip_version(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,"version = ""."".join(release.split(""."")[:2])",constant,"version = ""."".join(release.split(""."")[:2])",version,"""."".join(release.split(""."")[:2])","Constant: version = ""."".join(release.split(""."")[:2])",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,"language = ""en""",constant,"language = ""en""",language,"""en""","Constant: language = ""en""",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,"exclude_patterns = [
    '_build',
    'Thumbs.db',
    '.DS_Store',
    'gallery/src',  # handled by sphinx-gallery instead.
]",constant,"exclude_patterns = [
    '_build',
    'Thumbs.db',
    '.DS_Store',
    'gallery/src',  # handled by sphinx-gallery instead.
]",exclude_patterns,"[
    '_build',
    'Thumbs.db',
    '.DS_Store',
    'gallery/src',  # handled by sphinx-gallery instead.
]","Constant: exclude_patterns = [
    '_build',
    'Thumbs.db',
    '.DS_Store',
    'gallery/src',  # handled by sphinx-gallery instead.
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,pygments_style = 'sphinx',constant,pygments_style = 'sphinx',pygments_style,'sphinx',Constant: pygments_style = 'sphinx',qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,add_function_parentheses = False,constant,add_function_parentheses = False,add_function_parentheses,False,Constant: add_function_parentheses = False,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,add_module_names = False,constant,add_module_names = False,add_module_names,False,Constant: add_module_names = False,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,show_authors = True,constant,show_authors = True,show_authors,True,Constant: show_authors = True,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,pygments_style = 'sphinx',constant,pygments_style = 'sphinx',pygments_style,'sphinx',Constant: pygments_style = 'sphinx',qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,todo_include_todos = True,constant,todo_include_todos = True,todo_include_todos,True,Constant: todo_include_todos = True,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,numpydoc_show_class_members = False,constant,numpydoc_show_class_members = False,numpydoc_show_class_members,False,Constant: numpydoc_show_class_members = False,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,napoleon_numpy_docstring = True,constant,napoleon_numpy_docstring = True,napoleon_numpy_docstring,True,Constant: napoleon_numpy_docstring = True,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,napoleon_use_admonition_for_notes = True,constant,napoleon_use_admonition_for_notes = True,napoleon_use_admonition_for_notes,True,Constant: napoleon_use_admonition_for_notes = True,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,"bibtex_bibfiles = [
    ""guide/heom/heom.bib"",
]",constant,"bibtex_bibfiles = [
    ""guide/heom/heom.bib"",
]",bibtex_bibfiles,"[
    ""guide/heom/heom.bib"",
]","Constant: bibtex_bibfiles = [
    ""guide/heom/heom.bib"",
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,html_theme = 'sphinx_rtd_theme',constant,html_theme = 'sphinx_rtd_theme',html_theme,'sphinx_rtd_theme',Constant: html_theme = 'sphinx_rtd_theme',qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,full_logo= True,constant,full_logo= True,full_logo,True,Constant: full_logo= True,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,"html_theme_options = {
}",constant,"html_theme_options = {
}",html_theme_options,"{
}","Constant: html_theme_options = {
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,html_title = 'QuTiP {} Documentation'.format(version),constant,html_title = 'QuTiP {} Documentation'.format(version),html_title,'QuTiP {} Documentation'.format(version),Constant: html_title = 'QuTiP {} Documentation'.format(version),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,html_short_title = 'QuTiP',constant,html_short_title = 'QuTiP',html_short_title,'QuTiP',Constant: html_short_title = 'QuTiP',qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,html_favicon = 'figures/favicon.ico',constant,html_favicon = 'figures/favicon.ico',html_favicon,'figures/favicon.ico',Constant: html_favicon = 'figures/favicon.ico',qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,html_static_path = ['static'],constant,html_static_path = ['static'],html_static_path,['static'],Constant: html_static_path = ['static'],qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,"html_last_updated_fmt = '%b %d, %Y'",constant,"html_last_updated_fmt = '%b %d, %Y'",html_last_updated_fmt,"'%b %d, %Y'","Constant: html_last_updated_fmt = '%b %d, %Y'",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,"html_sidebars = {'sidebar': ['localtoc.html', 'sourcelink.html', 'searchbox.html']}",constant,"html_sidebars = {'sidebar': ['localtoc.html', 'sourcelink.html', 'searchbox.html']}",html_sidebars,"{'sidebar': ['localtoc.html', 'sourcelink.html', 'searchbox.html']}","Constant: html_sidebars = {'sidebar': ['localtoc.html', 'sourcelink.html', 'searchbox.html']}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,html_show_sourcelink = False,constant,html_show_sourcelink = False,html_show_sourcelink,False,Constant: html_show_sourcelink = False,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,html_show_sphinx = True,constant,html_show_sphinx = True,html_show_sphinx,True,Constant: html_show_sphinx = True,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,html_show_copyright = True,constant,html_show_copyright = True,html_show_copyright,True,Constant: html_show_copyright = True,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,"html_css_files = [
    'site.css',
]",constant,"html_css_files = [
    'site.css',
]",html_css_files,"[
    'site.css',
]","Constant: html_css_files = [
    'site.css',
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,htmlhelp_basename = 'QuTiPdoc',constant,htmlhelp_basename = 'QuTiPdoc',htmlhelp_basename,'QuTiPdoc',Constant: htmlhelp_basename = 'QuTiPdoc',qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,"mathjax3_config = {
    'TeX': {
        'Macros': {
            'bra': [r'\left\langle{#1}\right\rvert', 1],
            'ket': [r'\left\lvert{#1}\right\rangle', 1],
            'tr': r'\operatorname{tr}',
        },
    },
}",constant,"mathjax3_config = {
    'TeX': {
        'Macros': {
            'bra': [r'\left\langle{#1}\right\rvert', 1],
            'ket': [r'\left\lvert{#1}\right\rangle', 1],
            'tr': r'\operatorname{tr}',
        },
    },
}",mathjax3_config,"{
    'TeX': {
        'Macros': {
            'bra': [r'\left\langle{#1}\right\rvert', 1],
            'ket': [r'\left\lvert{#1}\right\rangle', 1],
            'tr': r'\operatorname{tr}',
        },
    },
}","Constant: mathjax3_config = {
    'TeX': {
        'Macros': {
            'bra': [r'\left\langle{#1}\right\rvert', 1],
            'ket': [r'\left\lvert{#1}\right\rangle', 1],
            'tr': r'\operatorname{tr}',
        },
    },
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,"latex_elements = {
    'papersize': 'a4paper',
    'pointsize': '10pt',
    'classoptions': '',
    'babel': '\\usepackage[english]{babel}',
    'fncychap': '',
    'figure_align': 'H',
    # This preamble is inserted into the build tools for the latex make targets
    # but not any others.  Be sure to change mathjax_config too if you need to
    # define more commands.
    'preamble': r""\usepackage{physics}"",
}",constant,"latex_elements = {
    'papersize': 'a4paper',
    'pointsize': '10pt',
    'classoptions': '',
    'babel': '\\usepackage[english]{babel}',
    'fncychap': '',
    'figure_align': 'H',
    # This preamble is inserted into the build tools for the latex make targets
    # but not any others.  Be sure to change mathjax_config too if you need to
    # define more commands.
    'preamble': r""\usepackage{physics}"",
}",latex_elements,"{
    'papersize': 'a4paper',
    'pointsize': '10pt',
    'classoptions': '',
    'babel': '\\usepackage[english]{babel}',
    'fncychap': '',
    'figure_align': 'H',
    # This preamble is inserted into the build tools for the latex make targets
    # but not any others.  Be sure to change mathjax_config too if you need to
    # define more commands.
    'preamble': r""\usepackage{physics}"",
}","Constant: latex_elements = {
    'papersize': 'a4paper',
    'pointsize': '10pt',
    'classoptions': '',
    'babel': '\\usepackage[english]{babel}',
    'fncychap': '',
    'figure_align': 'H',
    # This preamble is inserted into the build tools for the latex make targets
    # but not any others.  Be sure to change mathjax_config too if you need to
    # define more commands.
    'preamble': r""\usepackage{physics}"",
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,"latex_documents = [
  ('index', 'qutip.tex', project, author, 'manual'),
]",constant,"latex_documents = [
  ('index', 'qutip.tex', project, author, 'manual'),
]",latex_documents,"[
  ('index', 'qutip.tex', project, author, 'manual'),
]","Constant: latex_documents = [
  ('index', 'qutip.tex', project, author, 'manual'),
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,latex_logo = 'figures/logo.png',constant,latex_logo = 'figures/logo.png',latex_logo,'figures/logo.png',Constant: latex_logo = 'figures/logo.png',qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,latex_keep_old_macro_names=True,constant,latex_keep_old_macro_names=True,latex_keep_old_macro_names,True,Constant: latex_keep_old_macro_names=True,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,"man_pages = [
    (master_doc, 'qutip', project, [author], 1)
]",constant,"man_pages = [
    (master_doc, 'qutip', project, [author], 1)
]",man_pages,"[
    (master_doc, 'qutip', project, [author], 1)
]","Constant: man_pages = [
    (master_doc, 'qutip', project, [author], 1)
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,os_nt = False,constant,os_nt = False,os_nt,False,Constant: os_nt = False,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,"doctest_global_setup = '''
import matplotlib.pyplot as plt
import numpy as np
import os
import warnings
warnings.filterwarnings(""ignore"")
from qutip import *
os_nt = {}
'''.format(os_nt)",constant,"doctest_global_setup = '''
import matplotlib.pyplot as plt
import numpy as np
import os
import warnings
warnings.filterwarnings(""ignore"")
from qutip import *
os_nt = {}
'''.format(os_nt)",doctest_global_setup,"'''
import matplotlib.pyplot as plt
import numpy as np
import os
import warnings
warnings.filterwarnings(""ignore"")
from qutip import *
os_nt = {}
'''.format(os_nt)","Constant: doctest_global_setup = '''
import matplotlib.pyplot as plt
import numpy as np
import os
import warnings
warnings.filterwarnings(""ignore"")
from qutip import *
os_nt = {}
'''.format(os_nt)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,"plot_working_directory = ""./""",constant,"plot_working_directory = ""./""",plot_working_directory,"""./""","Constant: plot_working_directory = ""./""",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,"plot_pre_code = """"""
import numpy as np
import matplotlib.pyplot as plt
from qutip import *
plt.close(""all"")
""""""",constant,"plot_pre_code = """"""
import numpy as np
import matplotlib.pyplot as plt
from qutip import *
plt.close(""all"")
""""""",plot_pre_code,"""""""
import numpy as np
import matplotlib.pyplot as plt
from qutip import *
plt.close(""all"")
""""""","Constant: plot_pre_code = """"""
import numpy as np
import matplotlib.pyplot as plt
from qutip import *
plt.close(""all"")
""""""",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,plot_include_source = True,constant,plot_include_source = True,plot_include_source,True,Constant: plot_include_source = True,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,plot_html_show_source_link = False,constant,plot_html_show_source_link = False,plot_html_show_source_link,False,Constant: plot_html_show_source_link = False,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,plot_html_show_formats = False,constant,plot_html_show_formats = False,plot_html_show_formats,False,Constant: plot_html_show_formats = False,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,"texinfo_documents = [
    (master_doc, 'qutip', project,
     author, 'QuTiP',
     'Quantum Toolbox in Python',
     'Miscellaneous'),
]",constant,"texinfo_documents = [
    (master_doc, 'qutip', project,
     author, 'QuTiP',
     'Quantum Toolbox in Python',
     'Miscellaneous'),
]",texinfo_documents,"[
    (master_doc, 'qutip', project,
     author, 'QuTiP',
     'Quantum Toolbox in Python',
     'Miscellaneous'),
]","Constant: texinfo_documents = [
    (master_doc, 'qutip', project,
     author, 'QuTiP',
     'Quantum Toolbox in Python',
     'Miscellaneous'),
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,autodoc_member_order = 'alphabetical',constant,autodoc_member_order = 'alphabetical',autodoc_member_order,'alphabetical',Constant: autodoc_member_order = 'alphabetical',qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,"extlinks = {
    'arxiv': ('https://arxiv.org/abs/%s', 'arXiv:%s'),
    'doi': ('https://dx.doi.org/%s', 'doi:%s'),
}",constant,"extlinks = {
    'arxiv': ('https://arxiv.org/abs/%s', 'arXiv:%s'),
    'doi': ('https://dx.doi.org/%s', 'doi:%s'),
}",extlinks,"{
    'arxiv': ('https://arxiv.org/abs/%s', 'arXiv:%s'),
    'doi': ('https://dx.doi.org/%s', 'doi:%s'),
}","Constant: extlinks = {
    'arxiv': ('https://arxiv.org/abs/%s', 'arXiv:%s'),
    'doi': ('https://dx.doi.org/%s', 'doi:%s'),
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,"sphinx_gallery_conf = {
     'examples_dirs': 'gallery/src',   # path to your example scripts
     'gallery_dirs': 'gallery/build',  # save generated examples
     'abort_on_example_error': True  # abort if exception occurs
}",constant,"sphinx_gallery_conf = {
     'examples_dirs': 'gallery/src',   # path to your example scripts
     'gallery_dirs': 'gallery/build',  # save generated examples
     'abort_on_example_error': True  # abort if exception occurs
}",sphinx_gallery_conf,"{
     'examples_dirs': 'gallery/src',   # path to your example scripts
     'gallery_dirs': 'gallery/build',  # save generated examples
     'abort_on_example_error': True  # abort if exception occurs
}","Constant: sphinx_gallery_conf = {
     'examples_dirs': 'gallery/src',   # path to your example scripts
     'gallery_dirs': 'gallery/build',  # save generated examples
     'abort_on_example_error': True  # abort if exception occurs
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,ipython_strict_fail = False,constant,ipython_strict_fail = False,ipython_strict_fail,False,Constant: ipython_strict_fail = False,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,os,import,,,,Import: os,qutip,qutip,v5.0.4,import os,,os,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,pathlib,import,,,,Import: pathlib,qutip,qutip,v5.0.4,import pathlib,,pathlib,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conf.py,python,warnings,import,,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,,warnings,,,,,,,,,,,,,,,
,conf.py,python,,,,,,File: doc,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,conf.py,python,,,,,,Directory: doc\conf.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bloch_ex1.py,python,b = qutip.Bloch(),constant,b = qutip.Bloch(),b,qutip.Bloch(),Constant: b = qutip.Bloch(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bloch_ex1.py,python,"th = np.linspace(0, 2*np.pi, 20)",constant,"th = np.linspace(0, 2*np.pi, 20)",th,"np.linspace(0, 2*np.pi, 20)","Constant: th = np.linspace(0, 2*np.pi, 20)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bloch_ex1.py,python,xp = np.cos(th),constant,xp = np.cos(th),xp,np.cos(th),Constant: xp = np.cos(th),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bloch_ex1.py,python,yp = np.sin(th),constant,yp = np.sin(th),yp,np.sin(th),Constant: yp = np.sin(th),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bloch_ex1.py,python,zp = np.zeros(20),constant,zp = np.zeros(20),zp,np.zeros(20),Constant: zp = np.zeros(20),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bloch_ex1.py,python,xz = np.zeros(20),constant,xz = np.zeros(20),xz,np.zeros(20),Constant: xz = np.zeros(20),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bloch_ex1.py,python,yz = np.sin(th),constant,yz = np.sin(th),yz,np.sin(th),Constant: yz = np.sin(th),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bloch_ex1.py,python,zz = np.cos(th),constant,zz = np.cos(th),zz,np.cos(th),Constant: zz = np.cos(th),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bloch_ex1.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bloch_ex1.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
,bloch_ex1.py,python,,,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,bloch_ex1.py,python,,,,,,Directory: doc\guide\scripts\bloch_ex1.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex1.py,python,"times = np.linspace(0, 10, 200)",constant,"times = np.linspace(0, 10, 200)",times,"np.linspace(0, 10, 200)","Constant: times = np.linspace(0, 10, 200)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex1.py,python,a = qutip.destroy(10),constant,a = qutip.destroy(10),a,qutip.destroy(10),Constant: a = qutip.destroy(10),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex1.py,python,x = a.dag() + a,constant,x = a.dag() + a,x,a.dag() + a,Constant: x = a.dag() + a,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex1.py,python,H = a.dag() * a,constant,H = a.dag() * a,H,a.dag() * a,Constant: H = a.dag() * a,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex1.py,python,"corr1 = qutip.correlation_2op_1t(H, None, times, [np.sqrt(0.5) * a], x, x)",constant,"corr1 = qutip.correlation_2op_1t(H, None, times, [np.sqrt(0.5) * a], x, x)",corr1,"qutip.correlation_2op_1t(H, None, times, [np.sqrt(0.5) * a], x, x)","Constant: corr1 = qutip.correlation_2op_1t(H, None, times, [np.sqrt(0.5) * a], x, x)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex1.py,python,"corr2 = qutip.correlation_2op_1t(H, None, times, [np.sqrt(1.0) * a], x, x)",constant,"corr2 = qutip.correlation_2op_1t(H, None, times, [np.sqrt(1.0) * a], x, x)",corr2,"qutip.correlation_2op_1t(H, None, times, [np.sqrt(1.0) * a], x, x)","Constant: corr2 = qutip.correlation_2op_1t(H, None, times, [np.sqrt(1.0) * a], x, x)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex1.py,python,"corr3 = qutip.correlation_2op_1t(H, None, times, [np.sqrt(2.0) * a], x, x)",constant,"corr3 = qutip.correlation_2op_1t(H, None, times, [np.sqrt(2.0) * a], x, x)",corr3,"qutip.correlation_2op_1t(H, None, times, [np.sqrt(2.0) * a], x, x)","Constant: corr3 = qutip.correlation_2op_1t(H, None, times, [np.sqrt(2.0) * a], x, x)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex1.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex1.py,python,matplotlib.pyplot,import,,,,Import: matplotlib.pyplot,qutip,qutip,v5.0.4,import matplotlib.pyplot as plt,,matplotlib.pyplot,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex1.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
,correlation_ex1.py,python,,,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,correlation_ex1.py,python,,,,,,Directory: doc\guide\scripts\correlation_ex1.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex2.py,python,"times = np.linspace(0, 10.0, 200)",constant,"times = np.linspace(0, 10.0, 200)",times,"np.linspace(0, 10.0, 200)","Constant: times = np.linspace(0, 10.0, 200)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex2.py,python,a = qutip.destroy(10),constant,a = qutip.destroy(10),a,qutip.destroy(10),Constant: a = qutip.destroy(10),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex2.py,python,x = a.dag() + a,constant,x = a.dag() + a,x,a.dag() + a,Constant: x = a.dag() + a,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex2.py,python,H = a.dag() * a,constant,H = a.dag() * a,H,a.dag() * a,Constant: H = a.dag() * a,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex2.py,python,alpha = 2.5,constant,alpha = 2.5,alpha,2.5,Constant: alpha = 2.5,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex2.py,python,"rho0 = qutip.coherent_dm(10, alpha)",constant,"rho0 = qutip.coherent_dm(10, alpha)",rho0,"qutip.coherent_dm(10, alpha)","Constant: rho0 = qutip.coherent_dm(10, alpha)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex2.py,python,"corr = qutip.correlation_2op_2t(H, rho0, times, times, [np.sqrt(0.25) * a], x, x)",constant,"corr = qutip.correlation_2op_2t(H, rho0, times, times, [np.sqrt(0.25) * a], x, x)",corr,"qutip.correlation_2op_2t(H, rho0, times, times, [np.sqrt(0.25) * a], x, x)","Constant: corr = qutip.correlation_2op_2t(H, rho0, times, times, [np.sqrt(0.25) * a], x, x)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex2.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex2.py,python,matplotlib.pyplot,import,,,,Import: matplotlib.pyplot,qutip,qutip,v5.0.4,import matplotlib.pyplot as plt,,matplotlib.pyplot,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex2.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
,correlation_ex2.py,python,,,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,correlation_ex2.py,python,,,,,,Directory: doc\guide\scripts\correlation_ex2.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex3.py,python,N = 15,constant,N = 15,N,15,Constant: N = 15,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex3.py,python,"taus = np.linspace(0,10.0,200)",constant,"taus = np.linspace(0,10.0,200)",taus,"np.linspace(0,10.0,200)","Constant: taus = np.linspace(0,10.0,200)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex3.py,python,a = qutip.destroy(N),constant,a = qutip.destroy(N),a,qutip.destroy(N),Constant: a = qutip.destroy(N),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex3.py,python,H = 2 * np.pi * a.dag() * a,constant,H = 2 * np.pi * a.dag() * a,H,2 * np.pi * a.dag() * a,Constant: H = 2 * np.pi * a.dag() * a,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex3.py,python,G1 = 0.75,constant,G1 = 0.75,G1,0.75,Constant: G1 = 0.75,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex3.py,python,n_th = 2.00,constant,n_th = 2.00,n_th,2.00,Constant: n_th = 2.00,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex3.py,python,"c_ops = [np.sqrt(G1 * (1 + n_th)) * a, np.sqrt(G1 * n_th) * a.dag()]",constant,"c_ops = [np.sqrt(G1 * (1 + n_th)) * a, np.sqrt(G1 * n_th) * a.dag()]",c_ops,"[np.sqrt(G1 * (1 + n_th)) * a, np.sqrt(G1 * n_th) * a.dag()]","Constant: c_ops = [np.sqrt(G1 * (1 + n_th)) * a, np.sqrt(G1 * n_th) * a.dag()]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex3.py,python,"rho0 = qutip.coherent_dm(N, 2.0)",constant,"rho0 = qutip.coherent_dm(N, 2.0)",rho0,"qutip.coherent_dm(N, 2.0)","Constant: rho0 = qutip.coherent_dm(N, 2.0)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex3.py,python,"n = qutip.mesolve(H, rho0, taus, c_ops, [a.dag() * a]).expect[0]",constant,"n = qutip.mesolve(H, rho0, taus, c_ops, [a.dag() * a]).expect[0]",n,"qutip.mesolve(H, rho0, taus, c_ops, [a.dag() * a]).expect[0]","Constant: n = qutip.mesolve(H, rho0, taus, c_ops, [a.dag() * a]).expect[0]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex3.py,python,"G1 = qutip.correlation_2op_1t(H, rho0, taus, c_ops, a.dag(), a)",constant,"G1 = qutip.correlation_2op_1t(H, rho0, taus, c_ops, a.dag(), a)",G1,"qutip.correlation_2op_1t(H, rho0, taus, c_ops, a.dag(), a)","Constant: G1 = qutip.correlation_2op_1t(H, rho0, taus, c_ops, a.dag(), a)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex3.py,python,g1 = np.array(G1) / np.sqrt(n[0] * np.array(n)),constant,g1 = np.array(G1) / np.sqrt(n[0] * np.array(n)),g1,np.array(G1) / np.sqrt(n[0] * np.array(n)),Constant: g1 = np.array(G1) / np.sqrt(n[0] * np.array(n)),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex3.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex3.py,python,matplotlib.pyplot,import,,,,Import: matplotlib.pyplot,qutip,qutip,v5.0.4,import matplotlib.pyplot as plt,,matplotlib.pyplot,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex3.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
,correlation_ex3.py,python,,,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,correlation_ex3.py,python,,,,,,Directory: doc\guide\scripts\correlation_ex3.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex4.py,python,N = 25,constant,N = 25,N,25,Constant: N = 25,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex4.py,python,"taus = np.linspace(0, 25.0, 200)",constant,"taus = np.linspace(0, 25.0, 200)",taus,"np.linspace(0, 25.0, 200)","Constant: taus = np.linspace(0, 25.0, 200)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex4.py,python,a = qutip.destroy(N),constant,a = qutip.destroy(N),a,qutip.destroy(N),Constant: a = qutip.destroy(N),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex4.py,python,H = 2 * np.pi * a.dag() * a,constant,H = 2 * np.pi * a.dag() * a,H,2 * np.pi * a.dag() * a,Constant: H = 2 * np.pi * a.dag() * a,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex4.py,python,kappa = 0.25,constant,kappa = 0.25,kappa,0.25,Constant: kappa = 0.25,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex4.py,python,n_th = 2.0,constant,n_th = 2.0,n_th,2.0,Constant: n_th = 2.0,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex4.py,python,"c_ops = [np.sqrt(kappa * (1 + n_th)) * a, np.sqrt(kappa * n_th) * a.dag()]",constant,"c_ops = [np.sqrt(kappa * (1 + n_th)) * a, np.sqrt(kappa * n_th) * a.dag()]",c_ops,"[np.sqrt(kappa * (1 + n_th)) * a, np.sqrt(kappa * n_th) * a.dag()]","Constant: c_ops = [np.sqrt(kappa * (1 + n_th)) * a, np.sqrt(kappa * n_th) * a.dag()]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex4.py,python,"states = [
    {'state': qutip.coherent_dm(N, np.sqrt(2)), 'label': ""coherent state""},
    {'state': qutip.thermal_dm(N, 2), 'label': ""thermal state""},
    {'state': qutip.fock_dm(N, 2), 'label': ""Fock state""},
]",constant,"states = [
    {'state': qutip.coherent_dm(N, np.sqrt(2)), 'label': ""coherent state""},
    {'state': qutip.thermal_dm(N, 2), 'label': ""thermal state""},
    {'state': qutip.fock_dm(N, 2), 'label': ""Fock state""},
]",states,"[
    {'state': qutip.coherent_dm(N, np.sqrt(2)), 'label': ""coherent state""},
    {'state': qutip.thermal_dm(N, 2), 'label': ""thermal state""},
    {'state': qutip.fock_dm(N, 2), 'label': ""Fock state""},
]","Constant: states = [
    {'state': qutip.coherent_dm(N, np.sqrt(2)), 'label': ""coherent state""},
    {'state': qutip.thermal_dm(N, 2), 'label': ""thermal state""},
    {'state': qutip.fock_dm(N, 2), 'label': ""Fock state""},
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex4.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex4.py,python,matplotlib.pyplot,import,,,,Import: matplotlib.pyplot,qutip,qutip,v5.0.4,import matplotlib.pyplot as plt,,matplotlib.pyplot,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation_ex4.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
,correlation_ex4.py,python,,,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,correlation_ex4.py,python,,,,,,Directory: doc\guide\scripts\correlation_ex4.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_bloch_animation.py,python,"qubit_integrate(w, theta, gamma1, gamma2, psi0, tlist)",function,,,,"Function: qubit_integrate(w, theta, gamma1, gamma2, psi0, tlist)",qutip,qutip,v5.0.4,,,,qubit_integrate,"(w, theta, gamma1, gamma2, psi0, tlist)",,,,,,,,,"# operators and the hamiltonian",,,,
qutip_qutip_v5.0.4,ex_bloch_animation.py,python,w     = 1.0 * 2 * np.pi,constant,w     = 1.0 * 2 * np.pi,w,1.0 * 2 * np.pi,Constant: w     = 1.0 * 2 * np.pi,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_bloch_animation.py,python,theta = 0.2 * np.pi,constant,theta = 0.2 * np.pi,theta,0.2 * np.pi,Constant: theta = 0.2 * np.pi,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_bloch_animation.py,python,gamma1 = 0.5,constant,gamma1 = 0.5,gamma1,0.5,Constant: gamma1 = 0.5,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_bloch_animation.py,python,gamma2 = 0.2,constant,gamma2 = 0.2,gamma2,0.2,Constant: gamma2 = 0.2,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_bloch_animation.py,python,a = 1.0,constant,a = 1.0,a,1.0,Constant: a = 1.0,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_bloch_animation.py,python,"psi0 = (a*qutip.basis(2, 0) + (1-a)*qutip.basis(2, 1))/np.sqrt(a**2 + (1-a)**2)",constant,"psi0 = (a*qutip.basis(2, 0) + (1-a)*qutip.basis(2, 1))/np.sqrt(a**2 + (1-a)**2)",psi0,"(a*qutip.basis(2, 0) + (1-a)*qutip.basis(2, 1))/np.sqrt(a**2 + (1-a)**2)","Constant: psi0 = (a*qutip.basis(2, 0) + (1-a)*qutip.basis(2, 1))/np.sqrt(a**2 + (1-a)**2)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_bloch_animation.py,python,"tlist = np.linspace(0, 4, 250)",constant,"tlist = np.linspace(0, 4, 250)",tlist,"np.linspace(0, 4, 250)","Constant: tlist = np.linspace(0, 4, 250)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_bloch_animation.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_bloch_animation.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
,ex_bloch_animation.py,python,,,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,ex_bloch_animation.py,python,,,,,,Directory: doc\guide\scripts\ex_bloch_animation.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_steady.py,python,N = 20,constant,N = 20,N,20,Constant: N = 20,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_steady.py,python,a = qutip.destroy(N),constant,a = qutip.destroy(N),a,qutip.destroy(N),Constant: a = qutip.destroy(N),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_steady.py,python,H = a.dag() * a,constant,H = a.dag() * a,H,a.dag() * a,Constant: H = a.dag() * a,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_steady.py,python,"psi0 = qutip.basis(N, 10)",constant,"psi0 = qutip.basis(N, 10)",psi0,"qutip.basis(N, 10)","Constant: psi0 = qutip.basis(N, 10)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_steady.py,python,kappa = 0.1,constant,kappa = 0.1,kappa,0.1,Constant: kappa = 0.1,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_steady.py,python,c_op_list = [],constant,c_op_list = [],c_op_list,[],Constant: c_op_list = [],qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_steady.py,python,n_th_a = 2,constant,n_th_a = 2,n_th_a,2,Constant: n_th_a = 2,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_steady.py,python,rate = kappa * (1 + n_th_a),constant,rate = kappa * (1 + n_th_a),rate,kappa * (1 + n_th_a),Constant: rate = kappa * (1 + n_th_a),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_steady.py,python,rate = kappa * n_th_a,constant,rate = kappa * n_th_a,rate,kappa * n_th_a,Constant: rate = kappa * n_th_a,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_steady.py,python,"final_state = qutip.steadystate(H, c_op_list)",constant,"final_state = qutip.steadystate(H, c_op_list)",final_state,"qutip.steadystate(H, c_op_list)","Constant: final_state = qutip.steadystate(H, c_op_list)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_steady.py,python,"fexpt = qutip.expect(a.dag() * a, final_state)",constant,"fexpt = qutip.expect(a.dag() * a, final_state)",fexpt,"qutip.expect(a.dag() * a, final_state)","Constant: fexpt = qutip.expect(a.dag() * a, final_state)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_steady.py,python,"tlist = np.linspace(0, 50, 100)",constant,"tlist = np.linspace(0, 50, 100)",tlist,"np.linspace(0, 50, 100)","Constant: tlist = np.linspace(0, 50, 100)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_steady.py,python,"mcdata = qutip.mcsolve(H, psi0, tlist, c_op_list, [a.dag() * a], ntraj=100)",constant,"mcdata = qutip.mcsolve(H, psi0, tlist, c_op_list, [a.dag() * a], ntraj=100)",mcdata,"qutip.mcsolve(H, psi0, tlist, c_op_list, [a.dag() * a], ntraj=100)","Constant: mcdata = qutip.mcsolve(H, psi0, tlist, c_op_list, [a.dag() * a], ntraj=100)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_steady.py,python,"medata = qutip.mesolve(H, psi0, tlist, c_op_list, [a.dag() * a])",constant,"medata = qutip.mesolve(H, psi0, tlist, c_op_list, [a.dag() * a])",medata,"qutip.mesolve(H, psi0, tlist, c_op_list, [a.dag() * a])","Constant: medata = qutip.mesolve(H, psi0, tlist, c_op_list, [a.dag() * a])",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_steady.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_steady.py,python,matplotlib.pyplot,import,,,,Import: matplotlib.pyplot,qutip,qutip,v5.0.4,import matplotlib.pyplot as plt,,matplotlib.pyplot,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ex_steady.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
,ex_steady.py,python,,,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,ex_steady.py,python,,,,,,Directory: doc\guide\scripts\ex_steady.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex1.py,python,delta = 0.2 * 2*np.pi,constant,delta = 0.2 * 2*np.pi,delta,0.2 * 2*np.pi,Constant: delta = 0.2 * 2*np.pi,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex1.py,python,eps0  = 1.0 * 2*np.pi,constant,eps0  = 1.0 * 2*np.pi,eps0,1.0 * 2*np.pi,Constant: eps0  = 1.0 * 2*np.pi,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex1.py,python,A     = 0.5 * 2*np.pi,constant,A     = 0.5 * 2*np.pi,A,0.5 * 2*np.pi,Constant: A     = 0.5 * 2*np.pi,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex1.py,python,omega = 1.0 * 2*np.pi,constant,omega = 1.0 * 2*np.pi,omega,1.0 * 2*np.pi,Constant: omega = 1.0 * 2*np.pi,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex1.py,python,T      = (2*np.pi)/omega,constant,T      = (2*np.pi)/omega,T,(2*np.pi)/omega,Constant: T      = (2*np.pi)/omega,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex1.py,python,"tlist  = np.linspace(0.0, 10 * T, 101)",constant,"tlist  = np.linspace(0.0, 10 * T, 101)",tlist,"np.linspace(0.0, 10 * T, 101)","Constant: tlist  = np.linspace(0.0, 10 * T, 101)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex1.py,python,"psi0   = qutip.basis(2, 0)",constant,"psi0   = qutip.basis(2, 0)",psi0,"qutip.basis(2, 0)","Constant: psi0   = qutip.basis(2, 0)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex1.py,python,H0 = - delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(),constant,H0 = - delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(),H0,- delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(),Constant: H0 = - delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex1.py,python,H1 = A/2.0 * qutip.sigmaz(),constant,H1 = A/2.0 * qutip.sigmaz(),H1,A/2.0 * qutip.sigmaz(),Constant: H1 = A/2.0 * qutip.sigmaz(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex1.py,python,args = {'w': omega},constant,args = {'w': omega},args,{'w': omega},Constant: args = {'w': omega},qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex1.py,python,"H = [H0, [H1, lambda t, w: np.sin(w * t)]]",constant,"H = [H0, [H1, lambda t, w: np.sin(w * t)]]",H,"[H0, [H1, lambda t, w: np.sin(w * t)]]","Constant: H = [H0, [H1, lambda t, w: np.sin(w * t)]]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex1.py,python,"floquetbasis = qutip.FloquetBasis(H, T, args)",constant,"floquetbasis = qutip.FloquetBasis(H, T, args)",floquetbasis,"qutip.FloquetBasis(H, T, args)","Constant: floquetbasis = qutip.FloquetBasis(H, T, args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex1.py,python,f_coeff = floquetbasis.to_floquet_basis(psi0),constant,f_coeff = floquetbasis.to_floquet_basis(psi0),f_coeff,floquetbasis.to_floquet_basis(psi0),Constant: f_coeff = floquetbasis.to_floquet_basis(psi0),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex1.py,python,p_ex = np.zeros(len(tlist)),constant,p_ex = np.zeros(len(tlist)),p_ex,np.zeros(len(tlist)),Constant: p_ex = np.zeros(len(tlist)),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex1.py,python,"p_ex_ref = qutip.mesolve(H, psi0, tlist, [], [qutip.num(2)], args).expect[0]",constant,"p_ex_ref = qutip.mesolve(H, psi0, tlist, [], [qutip.num(2)], args).expect[0]",p_ex_ref,"qutip.mesolve(H, psi0, tlist, [], [qutip.num(2)], args).expect[0]","Constant: p_ex_ref = qutip.mesolve(H, psi0, tlist, [], [qutip.num(2)], args).expect[0]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex1.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex1.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,qutip,qutip,v5.0.4,from matplotlib import pyplot,matplotlib,pyplot,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex1.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
,floquet_ex1.py,python,,,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,floquet_ex1.py,python,,,,,,Directory: doc\guide\scripts\floquet_ex1.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex2.py,python,delta = 0.0  * 2*np.pi,constant,delta = 0.0  * 2*np.pi,delta,0.0  * 2*np.pi,Constant: delta = 0.0  * 2*np.pi,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex2.py,python,eps0  = 1.0 * 2*np.pi,constant,eps0  = 1.0 * 2*np.pi,eps0,1.0 * 2*np.pi,Constant: eps0  = 1.0 * 2*np.pi,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex2.py,python,A     = 0.25 * 2*np.pi,constant,A     = 0.25 * 2*np.pi,A,0.25 * 2*np.pi,Constant: A     = 0.25 * 2*np.pi,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex2.py,python,omega = 1.0 * 2*np.pi,constant,omega = 1.0 * 2*np.pi,omega,1.0 * 2*np.pi,Constant: omega = 1.0 * 2*np.pi,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex2.py,python,T      = 2*np.pi / omega,constant,T      = 2*np.pi / omega,T,2*np.pi / omega,Constant: T      = 2*np.pi / omega,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex2.py,python,"tlist  = np.linspace(0.0, 10 * T, 101)",constant,"tlist  = np.linspace(0.0, 10 * T, 101)",tlist,"np.linspace(0.0, 10 * T, 101)","Constant: tlist  = np.linspace(0.0, 10 * T, 101)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex2.py,python,"psi0   = qutip.basis(2,0)",constant,"psi0   = qutip.basis(2,0)",psi0,"qutip.basis(2,0)","Constant: psi0   = qutip.basis(2,0)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex2.py,python,H0 = - delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(),constant,H0 = - delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(),H0,- delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(),Constant: H0 = - delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex2.py,python,H1 = A/2.0 * qutip.sigmax(),constant,H1 = A/2.0 * qutip.sigmax(),H1,A/2.0 * qutip.sigmax(),Constant: H1 = A/2.0 * qutip.sigmax(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex2.py,python,args = {'w': omega},constant,args = {'w': omega},args,{'w': omega},Constant: args = {'w': omega},qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex2.py,python,"H = [H0, [H1, lambda t, w: np.sin(w * t)]]",constant,"H = [H0, [H1, lambda t, w: np.sin(w * t)]]",H,"[H0, [H1, lambda t, w: np.sin(w * t)]]","Constant: H = [H0, [H1, lambda t, w: np.sin(w * t)]]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex2.py,python,"floquetbasis = qutip.FloquetBasis(H, T, args, precompute=tlist)",constant,"floquetbasis = qutip.FloquetBasis(H, T, args, precompute=tlist)",floquetbasis,"qutip.FloquetBasis(H, T, args, precompute=tlist)","Constant: floquetbasis = qutip.FloquetBasis(H, T, args, precompute=tlist)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex2.py,python,f_coeff = floquetbasis.to_floquet_basis(psi0),constant,f_coeff = floquetbasis.to_floquet_basis(psi0),f_coeff,floquetbasis.to_floquet_basis(psi0),Constant: f_coeff = floquetbasis.to_floquet_basis(psi0),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex2.py,python,p_ex = np.zeros(len(tlist)),constant,p_ex = np.zeros(len(tlist)),p_ex,np.zeros(len(tlist)),Constant: p_ex = np.zeros(len(tlist)),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex2.py,python,"p_ex_ref = qutip.mesolve(H, psi0, tlist, [], [qutip.num(2)], args).expect[0]",constant,"p_ex_ref = qutip.mesolve(H, psi0, tlist, [], [qutip.num(2)], args).expect[0]",p_ex_ref,"qutip.mesolve(H, psi0, tlist, [], [qutip.num(2)], args).expect[0]","Constant: p_ex_ref = qutip.mesolve(H, psi0, tlist, [], [qutip.num(2)], args).expect[0]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex2.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex2.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,qutip,qutip,v5.0.4,from matplotlib import pyplot,matplotlib,pyplot,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex2.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
,floquet_ex2.py,python,,,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,floquet_ex2.py,python,,,,,,Directory: doc\guide\scripts\floquet_ex2.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex3.py,python,noise_spectrum(omega),function,,,,Function: noise_spectrum(omega),qutip,qutip,v5.0.4,,,,noise_spectrum,(omega),,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex3.py,python,delta = 0.0  * 2*np.pi,constant,delta = 0.0  * 2*np.pi,delta,0.0  * 2*np.pi,Constant: delta = 0.0  * 2*np.pi,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex3.py,python,eps0  = 1.0 * 2*np.pi,constant,eps0  = 1.0 * 2*np.pi,eps0,1.0 * 2*np.pi,Constant: eps0  = 1.0 * 2*np.pi,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex3.py,python,A     = 0.25 * 2*np.pi,constant,A     = 0.25 * 2*np.pi,A,0.25 * 2*np.pi,Constant: A     = 0.25 * 2*np.pi,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex3.py,python,omega = 1.0 * 2*np.pi,constant,omega = 1.0 * 2*np.pi,omega,1.0 * 2*np.pi,Constant: omega = 1.0 * 2*np.pi,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex3.py,python,T      = 2*np.pi / omega,constant,T      = 2*np.pi / omega,T,2*np.pi / omega,Constant: T      = 2*np.pi / omega,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex3.py,python,"tlist  = np.linspace(0.0, 20 * T, 301)",constant,"tlist  = np.linspace(0.0, 20 * T, 301)",tlist,"np.linspace(0.0, 20 * T, 301)","Constant: tlist  = np.linspace(0.0, 20 * T, 301)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex3.py,python,"psi0   = qutip.basis(2,0)",constant,"psi0   = qutip.basis(2,0)",psi0,"qutip.basis(2,0)","Constant: psi0   = qutip.basis(2,0)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex3.py,python,H0 = - delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(),constant,H0 = - delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(),H0,- delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(),Constant: H0 = - delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex3.py,python,H1 = A/2.0 * qutip.sigmax(),constant,H1 = A/2.0 * qutip.sigmax(),H1,A/2.0 * qutip.sigmax(),Constant: H1 = A/2.0 * qutip.sigmax(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex3.py,python,args = {'w': omega},constant,args = {'w': omega},args,{'w': omega},Constant: args = {'w': omega},qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex3.py,python,"H = [H0, [H1, lambda t, w: np.sin(w * t)]]",constant,"H = [H0, [H1, lambda t, w: np.sin(w * t)]]",H,"[H0, [H1, lambda t, w: np.sin(w * t)]]","Constant: H = [H0, [H1, lambda t, w: np.sin(w * t)]]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex3.py,python,gamma1 = 0.1,constant,gamma1 = 0.1,gamma1,0.1,Constant: gamma1 = 0.1,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex3.py,python,"output = qutip.fmmesolve(
    H, psi0, tlist, [qutip.sigmax()],
    spectra_cb=[noise_spectrum], T=T,
    args=args, options={""store_floquet_states"": True}
)",constant,"output = qutip.fmmesolve(
    H, psi0, tlist, [qutip.sigmax()],
    spectra_cb=[noise_spectrum], T=T,
    args=args, options={""store_floquet_states"": True}
)",output,"qutip.fmmesolve(
    H, psi0, tlist, [qutip.sigmax()],
    spectra_cb=[noise_spectrum], T=T,
    args=args, options={""store_floquet_states"": True}
)","Constant: output = qutip.fmmesolve(
    H, psi0, tlist, [qutip.sigmax()],
    spectra_cb=[noise_spectrum], T=T,
    args=args, options={""store_floquet_states"": True}
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex3.py,python,"p_ex = np.zeros(tlist.shape, dtype=np.complex128)",constant,"p_ex = np.zeros(tlist.shape, dtype=np.complex128)",p_ex,"np.zeros(tlist.shape, dtype=np.complex128)","Constant: p_ex = np.zeros(tlist.shape, dtype=np.complex128)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex3.py,python,"output = qutip.mesolve(H, psi0, tlist,
                       [np.sqrt(gamma1) * qutip.sigmax()], [qutip.num(2)],
                       args)",constant,"output = qutip.mesolve(H, psi0, tlist,
                       [np.sqrt(gamma1) * qutip.sigmax()], [qutip.num(2)],
                       args)",output,"qutip.mesolve(H, psi0, tlist,
                       [np.sqrt(gamma1) * qutip.sigmax()], [qutip.num(2)],
                       args)","Constant: output = qutip.mesolve(H, psi0, tlist,
                       [np.sqrt(gamma1) * qutip.sigmax()], [qutip.num(2)],
                       args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex3.py,python,p_ex_ref = output.expect[0],constant,p_ex_ref = output.expect[0],p_ex_ref,output.expect[0],Constant: p_ex_ref = output.expect[0],qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex3.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex3.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,qutip,qutip,v5.0.4,from matplotlib import pyplot,matplotlib,pyplot,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_ex3.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
,floquet_ex3.py,python,,,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,floquet_ex3.py,python,,,,,,Directory: doc\guide\scripts\floquet_ex3.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum_ex1.py,python,N = 4,constant,N = 4,N,4,Constant: N = 4,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum_ex1.py,python,wc = wa = 1.0 * 2 * np.pi,constant,wc = wa = 1.0 * 2 * np.pi,wc,wa = 1.0 * 2 * np.pi,Constant: wc = wa = 1.0 * 2 * np.pi,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum_ex1.py,python,g  = 0.1 * 2 * np.pi,constant,g  = 0.1 * 2 * np.pi,g,0.1 * 2 * np.pi,Constant: g  = 0.1 * 2 * np.pi,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum_ex1.py,python,kappa = 0.75,constant,kappa = 0.75,kappa,0.75,Constant: kappa = 0.75,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum_ex1.py,python,gamma = 0.25,constant,gamma = 0.25,gamma,0.25,Constant: gamma = 0.25,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum_ex1.py,python,"a  = qutip.tensor(qutip.destroy(N), qutip.qeye(2))",constant,"a  = qutip.tensor(qutip.destroy(N), qutip.qeye(2))",a,"qutip.tensor(qutip.destroy(N), qutip.qeye(2))","Constant: a  = qutip.tensor(qutip.destroy(N), qutip.qeye(2))",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum_ex1.py,python,"sm = qutip.tensor(qutip.qeye(N), qutip.destroy(2))",constant,"sm = qutip.tensor(qutip.qeye(N), qutip.destroy(2))",sm,"qutip.tensor(qutip.qeye(N), qutip.destroy(2))","Constant: sm = qutip.tensor(qutip.qeye(N), qutip.destroy(2))",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum_ex1.py,python,H = wc*a.dag()*a + wa*sm.dag()*sm + g*(a.dag()*sm + a*sm.dag()),constant,H = wc*a.dag()*a + wa*sm.dag()*sm + g*(a.dag()*sm + a*sm.dag()),H,wc*a.dag()*a + wa*sm.dag()*sm + g*(a.dag()*sm + a*sm.dag()),Constant: H = wc*a.dag()*a + wa*sm.dag()*sm + g*(a.dag()*sm + a*sm.dag()),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum_ex1.py,python,n_th = 0.25,constant,n_th = 0.25,n_th,0.25,Constant: n_th = 0.25,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum_ex1.py,python,"c_ops = [
    np.sqrt(kappa * (1 + n_th)) * a,
    np.sqrt(kappa * n_th) * a.dag(),
    np.sqrt(gamma) * sm,
]",constant,"c_ops = [
    np.sqrt(kappa * (1 + n_th)) * a,
    np.sqrt(kappa * n_th) * a.dag(),
    np.sqrt(gamma) * sm,
]",c_ops,"[
    np.sqrt(kappa * (1 + n_th)) * a,
    np.sqrt(kappa * n_th) * a.dag(),
    np.sqrt(gamma) * sm,
]","Constant: c_ops = [
    np.sqrt(kappa * (1 + n_th)) * a,
    np.sqrt(kappa * n_th) * a.dag(),
    np.sqrt(gamma) * sm,
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum_ex1.py,python,"tlist = np.linspace(0, 100, 5000)",constant,"tlist = np.linspace(0, 100, 5000)",tlist,"np.linspace(0, 100, 5000)","Constant: tlist = np.linspace(0, 100, 5000)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum_ex1.py,python,"corr = qutip.correlation_2op_1t(H, None, tlist, c_ops, a.dag(), a)",constant,"corr = qutip.correlation_2op_1t(H, None, tlist, c_ops, a.dag(), a)",corr,"qutip.correlation_2op_1t(H, None, tlist, c_ops, a.dag(), a)","Constant: corr = qutip.correlation_2op_1t(H, None, tlist, c_ops, a.dag(), a)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum_ex1.py,python,"wlist2 = np.linspace(0.25, 1.75, 200) * 2 * np.pi",constant,"wlist2 = np.linspace(0.25, 1.75, 200) * 2 * np.pi",wlist2,"np.linspace(0.25, 1.75, 200) * 2 * np.pi","Constant: wlist2 = np.linspace(0.25, 1.75, 200) * 2 * np.pi",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum_ex1.py,python,"spec2 = qutip.spectrum(H, wlist2, c_ops, a.dag(), a)",constant,"spec2 = qutip.spectrum(H, wlist2, c_ops, a.dag(), a)",spec2,"qutip.spectrum(H, wlist2, c_ops, a.dag(), a)","Constant: spec2 = qutip.spectrum(H, wlist2, c_ops, a.dag(), a)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum_ex1.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum_ex1.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,qutip,qutip,v5.0.4,from matplotlib import pyplot,matplotlib,pyplot,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum_ex1.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
,spectrum_ex1.py,python,,,,,,File: doc\guide\scripts,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,spectrum_ex1.py,python,,,,,,Directory: doc\guide\scripts\spectrum_ex1.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qutip-structure.py,python,"_our_tree(module, tree)",function,,,,"Function: _our_tree(module, tree)",qutip,qutip,v5.0.4,,,,_our_tree,"(module, tree)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,qutip-structure.py,python,"_ignore(module, root)",function,,,,"Function: _ignore(module, root)",qutip,qutip,v5.0.4,,,,_ignore,"(module, root)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,qutip-structure.py,python,"python_object_tree(module, tree=None, seen=None, root=None, nobjects=0)",function,,,,"Function: python_object_tree(module, tree=None, seen=None, root=None, nobjects=0)",qutip,qutip,v5.0.4,,,,python_object_tree,"(module, tree=None, seen=None, root=None, nobjects=0)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,qutip-structure.py,python,"_lookup_color(basename, index, color)",function,,,,"Function: _lookup_color(basename, index, color)",qutip,qutip,v5.0.4,,,,_lookup_color,"(basename, index, color)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,qutip-structure.py,python,"convert_to_d3_struct(in_tree, name, index=-1, color=None, basename=None)",function,,,,"Function: convert_to_d3_struct(in_tree, name, index=-1, color=None, basename=None)",qutip,qutip,v5.0.4,,,,convert_to_d3_struct,"(in_tree, name, index=-1, color=None, basename=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,qutip-structure.py,python,root_directory = pathlib.Path(qutip.__file__).parent,constant,root_directory = pathlib.Path(qutip.__file__).parent,root_directory,pathlib.Path(qutip.__file__).parent,Constant: root_directory = pathlib.Path(qutip.__file__).parent,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qutip-structure.py,python,"module_groups = [
    # Solvers
    (""#0b5fa5"", {
        ""mesolve"", ""mcsolve"", ""sesolve"", ""stochastic"", ""bloch_redfield"",
        ""nonmarkov"", ""floquet"", ""essolve"", ""correlation"", ""steadystate"",
        ""rhs_generate"", ""propagator"", ""eseries"", ""hsolve"", ""rcsolve"",
        ""scattering"", ""piqs"", ""pdpsolve"",
    }),
    # Options and settings
    (""#043c6b"", {""settings"", ""configrc"", ""solver""}),
    # Visualisation
    (""#3f8fd2"", {
        ""bloch"", ""sphereplot"", ""orbital"", ""visualization"", ""wigner"",
        ""distributions"", ""tomography"", ""topology"",
    }),
    # Operators
    (""#00ae68"", {
        ""operators"", ""superoperator"", ""superop_reps"", ""subsystem_apply"",
    }),
    # States
    (""#007143"", {
        ""states"", ""continuous_variables"", ""qstate"", ""random_objects"",
    }),
    # QIP
    (""#36d695"", {""measurement""}),
    # Metrics and distance measures
    (""#ff4500"", {""entropy"", ""metrics"", ""countstat"", ""semidefinite""}),
    # Core
    (""#692102"", {
        ""qobj"", ""qobjevo"", ""expect"", ""tensor"", ""partial_transpose"", ""ptrace"",
        ""cy"", ""fastsparse"", ""interpolate"",
    }),
    # Utilities
    (""#bf5730"", {
        ""fileio"", ""utilities"", ""ipynbtools"", ""sparse"", ""graph"", ""simdiag"",
        ""permute"", ""demos"", ""about"", ""parallel"", ""version"", ""testing"",
        ""hardware_info"", ""ui"", ""cite"",
    }),
]",constant,"module_groups = [
    # Solvers
    (""#0b5fa5"", {
        ""mesolve"", ""mcsolve"", ""sesolve"", ""stochastic"", ""bloch_redfield"",
        ""nonmarkov"", ""floquet"", ""essolve"", ""correlation"", ""steadystate"",
        ""rhs_generate"", ""propagator"", ""eseries"", ""hsolve"", ""rcsolve"",
        ""scattering"", ""piqs"", ""pdpsolve"",
    }),
    # Options and settings
    (""#043c6b"", {""settings"", ""configrc"", ""solver""}),
    # Visualisation
    (""#3f8fd2"", {
        ""bloch"", ""sphereplot"", ""orbital"", ""visualization"", ""wigner"",
        ""distributions"", ""tomography"", ""topology"",
    }),
    # Operators
    (""#00ae68"", {
        ""operators"", ""superoperator"", ""superop_reps"", ""subsystem_apply"",
    }),
    # States
    (""#007143"", {
        ""states"", ""continuous_variables"", ""qstate"", ""random_objects"",
    }),
    # QIP
    (""#36d695"", {""measurement""}),
    # Metrics and distance measures
    (""#ff4500"", {""entropy"", ""metrics"", ""countstat"", ""semidefinite""}),
    # Core
    (""#692102"", {
        ""qobj"", ""qobjevo"", ""expect"", ""tensor"", ""partial_transpose"", ""ptrace"",
        ""cy"", ""fastsparse"", ""interpolate"",
    }),
    # Utilities
    (""#bf5730"", {
        ""fileio"", ""utilities"", ""ipynbtools"", ""sparse"", ""graph"", ""simdiag"",
        ""permute"", ""demos"", ""about"", ""parallel"", ""version"", ""testing"",
        ""hardware_info"", ""ui"", ""cite"",
    }),
]",module_groups,"[
    # Solvers
    (""#0b5fa5"", {
        ""mesolve"", ""mcsolve"", ""sesolve"", ""stochastic"", ""bloch_redfield"",
        ""nonmarkov"", ""floquet"", ""essolve"", ""correlation"", ""steadystate"",
        ""rhs_generate"", ""propagator"", ""eseries"", ""hsolve"", ""rcsolve"",
        ""scattering"", ""piqs"", ""pdpsolve"",
    }),
    # Options and settings
    (""#043c6b"", {""settings"", ""configrc"", ""solver""}),
    # Visualisation
    (""#3f8fd2"", {
        ""bloch"", ""sphereplot"", ""orbital"", ""visualization"", ""wigner"",
        ""distributions"", ""tomography"", ""topology"",
    }),
    # Operators
    (""#00ae68"", {
        ""operators"", ""superoperator"", ""superop_reps"", ""subsystem_apply"",
    }),
    # States
    (""#007143"", {
        ""states"", ""continuous_variables"", ""qstate"", ""random_objects"",
    }),
    # QIP
    (""#36d695"", {""measurement""}),
    # Metrics and distance measures
    (""#ff4500"", {""entropy"", ""metrics"", ""countstat"", ""semidefinite""}),
    # Core
    (""#692102"", {
        ""qobj"", ""qobjevo"", ""expect"", ""tensor"", ""partial_transpose"", ""ptrace"",
        ""cy"", ""fastsparse"", ""interpolate"",
    }),
    # Utilities
    (""#bf5730"", {
        ""fileio"", ""utilities"", ""ipynbtools"", ""sparse"", ""graph"", ""simdiag"",
        ""permute"", ""demos"", ""about"", ""parallel"", ""version"", ""testing"",
        ""hardware_info"", ""ui"", ""cite"",
    }),
]","Constant: module_groups = [
    # Solvers
    (""#0b5fa5"", {
        ""mesolve"", ""mcsolve"", ""sesolve"", ""stochastic"", ""bloch_redfield"",
        ""nonmarkov"", ""floquet"", ""essolve"", ""correlation"", ""steadystate"",
        ""rhs_generate"", ""propagator"", ""eseries"", ""hsolve"", ""rcsolve"",
        ""scattering"", ""piqs"", ""pdpsolve"",
    }),
    # Options and settings
    (""#043c6b"", {""settings"", ""configrc"", ""solver""}),
    # Visualisation
    (""#3f8fd2"", {
        ""bloch"", ""sphereplot"", ""orbital"", ""visualization"", ""wigner"",
        ""distributions"", ""tomography"", ""topology"",
    }),
    # Operators
    (""#00ae68"", {
        ""operators"", ""superoperator"", ""superop_reps"", ""subsystem_apply"",
    }),
    # States
    (""#007143"", {
        ""states"", ""continuous_variables"", ""qstate"", ""random_objects"",
    }),
    # QIP
    (""#36d695"", {""measurement""}),
    # Metrics and distance measures
    (""#ff4500"", {""entropy"", ""metrics"", ""countstat"", ""semidefinite""}),
    # Core
    (""#692102"", {
        ""qobj"", ""qobjevo"", ""expect"", ""tensor"", ""partial_transpose"", ""ptrace"",
        ""cy"", ""fastsparse"", ""interpolate"",
    }),
    # Utilities
    (""#bf5730"", {
        ""fileio"", ""utilities"", ""ipynbtools"", ""sparse"", ""graph"", ""simdiag"",
        ""permute"", ""demos"", ""about"", ""parallel"", ""version"", ""testing"",
        ""hardware_info"", ""ui"", ""cite"",
    }),
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qutip-structure.py,python,"modules_ignored = {
    ""dimensions"",
    ""logging_utils"",
    ""matplotlib_utilities"",
    ""legacy"",
    ""qobjevo_codegen"",
    ""_mkl"",
    ""cy.pyxbuilder"",
    ""cy.openmp"",
    ""cy.graph_utils"",
    ""cy.inter"",
    ""cy.cqobjevo"",
    ""cy.cqobjevo_factor"",
    ""cy.codegen"",
    ""cy.br_codegen"",
    ""cy.ptrace"",
}",constant,"modules_ignored = {
    ""dimensions"",
    ""logging_utils"",
    ""matplotlib_utilities"",
    ""legacy"",
    ""qobjevo_codegen"",
    ""_mkl"",
    ""cy.pyxbuilder"",
    ""cy.openmp"",
    ""cy.graph_utils"",
    ""cy.inter"",
    ""cy.cqobjevo"",
    ""cy.cqobjevo_factor"",
    ""cy.codegen"",
    ""cy.br_codegen"",
    ""cy.ptrace"",
}",modules_ignored,"{
    ""dimensions"",
    ""logging_utils"",
    ""matplotlib_utilities"",
    ""legacy"",
    ""qobjevo_codegen"",
    ""_mkl"",
    ""cy.pyxbuilder"",
    ""cy.openmp"",
    ""cy.graph_utils"",
    ""cy.inter"",
    ""cy.cqobjevo"",
    ""cy.cqobjevo_factor"",
    ""cy.codegen"",
    ""cy.br_codegen"",
    ""cy.ptrace"",
}","Constant: modules_ignored = {
    ""dimensions"",
    ""logging_utils"",
    ""matplotlib_utilities"",
    ""legacy"",
    ""qobjevo_codegen"",
    ""_mkl"",
    ""cy.pyxbuilder"",
    ""cy.openmp"",
    ""cy.graph_utils"",
    ""cy.inter"",
    ""cy.cqobjevo"",
    ""cy.cqobjevo_factor"",
    ""cy.codegen"",
    ""cy.br_codegen"",
    ""cy.ptrace"",
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qutip-structure.py,python,inspect,import,,,,Import: inspect,qutip,qutip,v5.0.4,import inspect,,inspect,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qutip-structure.py,python,pathlib,import,,,,Import: pathlib,qutip,qutip,v5.0.4,import pathlib,,pathlib,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qutip-structure.py,python,warnings,import,,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,,warnings,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qutip-structure.py,python,sys,import,,,,Import: sys,qutip,qutip,v5.0.4,import sys,,sys,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qutip-structure.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
,qutip-structure.py,python,,,,,,File: doc\QuTiP_tree_plot,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,qutip-structure.py,python,,,,,,Directory: doc\QuTiP_tree_plot\qutip-structure.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,about.py,python,about(),function,,,,Function: about(),qutip,qutip,v5.0.4,,,,about,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,about.py,python,__all__ = ['about'],constant,__all__ = ['about'],__all__,['about'],Constant: __all__ = ['about'],qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,about.py,python,sys,import,,,,Import: sys,qutip,qutip,v5.0.4,import sys,,sys,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,about.py,python,os,import,,,,Import: os,qutip,qutip,v5.0.4,import os,,os,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,about.py,python,platform,import,,,,Import: platform,qutip,qutip,v5.0.4,import platform,,platform,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,about.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,about.py,python,scipy,import,,,,Import: scipy,qutip,qutip,v5.0.4,import scipy,,scipy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,about.py,python,inspect,import,,,,Import: inspect,qutip,qutip,v5.0.4,import inspect,,inspect,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,about.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,about.py,python,_blas_info from qutip.settings,local_import,,,,Import: _blas_info from qutip.settings,qutip,qutip,v5.0.4,"from qutip.settings import _blas_info, settings",qutip.settings,_blas_info,,,qutip.settings,,,,,,,,,,,,
qutip_qutip_v5.0.4,about.py,python,settings from qutip.settings,local_import,,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,"from qutip.settings import _blas_info, settings",qutip.settings,settings,,,qutip.settings,,,,,,,,,,,,
,about.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,about.py,python,,,,,,Directory: qutip\about.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,animation.py,python,_result_state(obj),function,,,,Function: _result_state(obj),qutip,qutip,v5.0.4,,,,_result_state,(obj),,,,,,,,,,,,,
qutip_qutip_v5.0.4,animation.py,python,"anim_wigner_sphere(wigners, reflections=False, *, cmap=None,
                       colorbar=True, fig=None, ax=None)",function,,,,"Function: anim_wigner_sphere(wigners, reflections=False, *, cmap=None,
                       colorbar=True, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,anim_wigner_sphere,"(wigners, reflections=False, *, cmap=None,
                       colorbar=True, fig=None, ax=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,animation.py,python,"anim_hinton(rhos, x_basis=None, y_basis=None, color_style=""scaled"",
                label_top=True, *, cmap=None, colorbar=True,
                fig=None, ax=None)",function,,,,"Function: anim_hinton(rhos, x_basis=None, y_basis=None, color_style=""scaled"",
                label_top=True, *, cmap=None, colorbar=True,
                fig=None, ax=None)",qutip,qutip,v5.0.4,,,,anim_hinton,"(rhos, x_basis=None, y_basis=None, color_style=""scaled"",
                label_top=True, *, cmap=None, colorbar=True,
                fig=None, ax=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,animation.py,python,"anim_sphereplot(V, theta, phi, *, cmap=None,
                    colorbar=True, fig=None, ax=None)",function,,,,"Function: anim_sphereplot(V, theta, phi, *, cmap=None,
                    colorbar=True, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,anim_sphereplot,"(V, theta, phi, *, cmap=None,
                    colorbar=True, fig=None, ax=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,animation.py,python,"anim_matrix_histogram(Ms, x_basis=None, y_basis=None, limits=None,
                          bar_style='real', color_limits=None,
                          color_style='real', options=None, *, cmap=None,
                          colorbar=True, fig=None, ax=None)",function,,,,"Function: anim_matrix_histogram(Ms, x_basis=None, y_basis=None, limits=None,
                          bar_style='real', color_limits=None,
                          color_style='real', options=None, *, cmap=None,
                          colorbar=True, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,anim_matrix_histogram,"(Ms, x_basis=None, y_basis=None, limits=None,
                          bar_style='real', color_limits=None,
                          color_style='real', options=None, *, cmap=None,
                          colorbar=True, fig=None, ax=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,animation.py,python,"anim_fock_distribution(rhos, fock_numbers=None, color=""green"",
                           unit_y_range=True, *, fig=None, ax=None)",function,,,,"Function: anim_fock_distribution(rhos, fock_numbers=None, color=""green"",
                           unit_y_range=True, *, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,anim_fock_distribution,"(rhos, fock_numbers=None, color=""green"",
                           unit_y_range=True, *, fig=None, ax=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,animation.py,python,"anim_wigner(rhos, xvec=None, yvec=None, method='clenshaw', projection='2d',
                g=sqrt(2), sparse=False, parfor=False, *,
                cmap=None, colorbar=False, fig=None, ax=None)",function,,,,"Function: anim_wigner(rhos, xvec=None, yvec=None, method='clenshaw', projection='2d',
                g=sqrt(2), sparse=False, parfor=False, *,
                cmap=None, colorbar=False, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,anim_wigner,"(rhos, xvec=None, yvec=None, method='clenshaw', projection='2d',
                g=sqrt(2), sparse=False, parfor=False, *,
                cmap=None, colorbar=False, fig=None, ax=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,animation.py,python,"anim_spin_distribution(Ps, THETA, PHI, projection='2d', *,
                           cmap=None, colorbar=False, fig=None, ax=None)",function,,,,"Function: anim_spin_distribution(Ps, THETA, PHI, projection='2d', *,
                           cmap=None, colorbar=False, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,anim_spin_distribution,"(Ps, THETA, PHI, projection='2d', *,
                           cmap=None, colorbar=False, fig=None, ax=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,animation.py,python,"anim_qubism(kets, theme='light', how='pairs', grid_iteration=1,
                legend_iteration=0, *, fig=None, ax=None)",function,,,,"Function: anim_qubism(kets, theme='light', how='pairs', grid_iteration=1,
                legend_iteration=0, *, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,anim_qubism,"(kets, theme='light', how='pairs', grid_iteration=1,
                legend_iteration=0, *, fig=None, ax=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,animation.py,python,"anim_schmidt(kets, theme='light', splitting=None,
                 labels_iteration=(3, 2), *, fig=None, ax=None)",function,,,,"Function: anim_schmidt(kets, theme='light', splitting=None,
                 labels_iteration=(3, 2), *, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,anim_schmidt,"(kets, theme='light', splitting=None,
                 labels_iteration=(3, 2), *, fig=None, ax=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,animation.py,python,"__all__ = ['anim_wigner_sphere', 'anim_hinton', 'anim_sphereplot',
           'anim_matrix_histogram', 'anim_fock_distribution', 'anim_wigner',
           'anim_spin_distribution', 'anim_qubism', 'anim_schmidt']",constant,"__all__ = ['anim_wigner_sphere', 'anim_hinton', 'anim_sphereplot',
           'anim_matrix_histogram', 'anim_fock_distribution', 'anim_wigner',
           'anim_spin_distribution', 'anim_qubism', 'anim_schmidt']",__all__,"['anim_wigner_sphere', 'anim_hinton', 'anim_sphereplot',
           'anim_matrix_histogram', 'anim_fock_distribution', 'anim_wigner',
           'anim_spin_distribution', 'anim_qubism', 'anim_schmidt']","Constant: __all__ = ['anim_wigner_sphere', 'anim_hinton', 'anim_sphereplot',
           'anim_matrix_histogram', 'anim_fock_distribution', 'anim_wigner',
           'anim_spin_distribution', 'anim_qubism', 'anim_schmidt']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,animation.py,python,sqrt from numpy,import,,,,Import: sqrt from numpy,qutip,qutip,v5.0.4,from numpy import sqrt,numpy,sqrt,,,,,,,,,,,,,,,
,animation.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,animation.py,python,,,,,,Directory: qutip\animation.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"[instance] Arrow3D._verts3d = xs, ys, zs",class_field,,,,"Class field: [instance] Arrow3D._verts3d = xs, ys, zs",qutip,qutip,v5.0.4,,,,,,,Arrow3D,__init__,"(self, xs, ys, zs, *args, **kwargs)","self._verts3d = xs, ys, zs","self._verts3d = xs, ys, zs",,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.fig = fig,class_field,,,,Class field: [instance] Bloch.fig = fig,qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.fig = fig,self.fig = fig,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch._ext_fig = fig is not None,class_field,,,,Class field: [instance] Bloch._ext_fig = fig is not None,qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self._ext_fig = fig is not None,self._ext_fig = fig is not None,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.axes = axes,class_field,,,,Class field: [instance] Bloch.axes = axes,qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.axes = axes,self.axes = axes,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.background = background,class_field,,,,Class field: [instance] Bloch.background = background,qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.background = background,self.background = background,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"[instance] Bloch.figsize = figsize if figsize else [5, 5]",class_field,,,,"Class field: [instance] Bloch.figsize = figsize if figsize else [5, 5]",qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.figsize = figsize if figsize else [5, 5]","self.figsize = figsize if figsize else [5, 5]",,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"[instance] Bloch.view = view if view else [-60, 30]",class_field,,,,"Class field: [instance] Bloch.view = view if view else [-60, 30]",qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.view = view if view else [-60, 30]","self.view = view if view else [-60, 30]",,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.sphere_color = '#FFDDDD',class_field,,,,Class field: [instance] Bloch.sphere_color = '#FFDDDD',qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.sphere_color = '#FFDDDD',self.sphere_color = '#FFDDDD',,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.sphere_alpha = 0.2,class_field,,,,Class field: [instance] Bloch.sphere_alpha = 0.2,qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.sphere_alpha = 0.2,self.sphere_alpha = 0.2,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.frame_color = 'gray',class_field,,,,Class field: [instance] Bloch.frame_color = 'gray',qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.frame_color = 'gray',self.frame_color = 'gray',,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.frame_width = 1,class_field,,,,Class field: [instance] Bloch.frame_width = 1,qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.frame_width = 1,self.frame_width = 1,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.frame_alpha = 0.2,class_field,,,,Class field: [instance] Bloch.frame_alpha = 0.2,qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.frame_alpha = 0.2,self.frame_alpha = 0.2,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"[instance] Bloch.xlabel = ['$x$', '']",class_field,,,,"Class field: [instance] Bloch.xlabel = ['$x$', '']",qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.xlabel = ['$x$', '']","self.xlabel = ['$x$', '']",,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"[instance] Bloch.xlpos = [1.2, -1.2]",class_field,,,,"Class field: [instance] Bloch.xlpos = [1.2, -1.2]",qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.xlpos = [1.2, -1.2]","self.xlpos = [1.2, -1.2]",,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"[instance] Bloch.ylabel = ['$y$', '']",class_field,,,,"Class field: [instance] Bloch.ylabel = ['$y$', '']",qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.ylabel = ['$y$', '']","self.ylabel = ['$y$', '']",,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"[instance] Bloch.ylpos = [1.2, -1.2]",class_field,,,,"Class field: [instance] Bloch.ylpos = [1.2, -1.2]",qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.ylpos = [1.2, -1.2]","self.ylpos = [1.2, -1.2]",,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"[instance] Bloch.zlabel = [r'$\left|0\right>$', r'$\left|1\right>$']",class_field,,,,"Class field: [instance] Bloch.zlabel = [r'$\left|0\right>$', r'$\left|1\right>$']",qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.zlabel = [r'$\left|0\right>$', r'$\left|1\right>$']","self.zlabel = [r'$\left|0\right>$', r'$\left|1\right>$']",,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"[instance] Bloch.zlpos = [1.2, -1.2]",class_field,,,,"Class field: [instance] Bloch.zlpos = [1.2, -1.2]",qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.zlpos = [1.2, -1.2]","self.zlpos = [1.2, -1.2]",,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.font_color = 'black',class_field,,,,Class field: [instance] Bloch.font_color = 'black',qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.font_color = 'black',self.font_color = 'black',,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.font_size = 20,class_field,,,,Class field: [instance] Bloch.font_size = 20,qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.font_size = 20,self.font_size = 20,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"[instance] Bloch.vector_default_color = ['g', '#CC6600', 'b', 'r']",class_field,,,,"Class field: [instance] Bloch.vector_default_color = ['g', '#CC6600', 'b', 'r']",qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.vector_default_color = ['g', '#CC6600', 'b', 'r']","self.vector_default_color = ['g', '#CC6600', 'b', 'r']",,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.vector_color = [],class_field,,,,Class field: [instance] Bloch.vector_color = [],qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.vector_color = [],self.vector_color = [],,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.vector_width = 3,class_field,,,,Class field: [instance] Bloch.vector_width = 3,qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.vector_width = 3,self.vector_width = 3,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.vector_style = '-|>',class_field,,,,Class field: [instance] Bloch.vector_style = '-|>',qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.vector_style = '-|>',self.vector_style = '-|>',,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.vector_mutation = 20,class_field,,,,Class field: [instance] Bloch.vector_mutation = 20,qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.vector_mutation = 20,self.vector_mutation = 20,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"[instance] Bloch.point_default_color = ['b', 'r', 'g', '#CC6600']",class_field,,,,"Class field: [instance] Bloch.point_default_color = ['b', 'r', 'g', '#CC6600']",qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.point_default_color = ['b', 'r', 'g', '#CC6600']","self.point_default_color = ['b', 'r', 'g', '#CC6600']",,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.point_color = None,class_field,,,,Class field: [instance] Bloch.point_color = None,qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.point_color = None,self.point_color = None,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch._inner_point_color = [],class_field,,,,Class field: [instance] Bloch._inner_point_color = [],qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self._inner_point_color = [],self._inner_point_color = [],,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"[instance] Bloch.point_size = [25, 32, 35, 45]",class_field,,,,"Class field: [instance] Bloch.point_size = [25, 32, 35, 45]",qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.point_size = [25, 32, 35, 45]","self.point_size = [25, 32, 35, 45]",,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"[instance] Bloch.point_marker = ['o', 's', 'd', '^']",class_field,,,,"Class field: [instance] Bloch.point_marker = ['o', 's', 'd', '^']",qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)","self.point_marker = ['o', 's', 'd', '^']","self.point_marker = ['o', 's', 'd', '^']",,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.points = [],class_field,,,,Class field: [instance] Bloch.points = [],qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.points = [],self.points = [],,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.vectors = [],class_field,,,,Class field: [instance] Bloch.vectors = [],qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.vectors = [],self.vectors = [],,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.vector_alpha = [],class_field,,,,Class field: [instance] Bloch.vector_alpha = [],qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.vector_alpha = [],self.vector_alpha = [],,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.annotations = [],class_field,,,,Class field: [instance] Bloch.annotations = [],qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.annotations = [],self.annotations = [],,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.savenum = 0,class_field,,,,Class field: [instance] Bloch.savenum = 0,qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.savenum = 0,self.savenum = 0,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.point_style = [],class_field,,,,Class field: [instance] Bloch.point_style = [],qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.point_style = [],self.point_style = [],,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch.point_alpha = [],class_field,,,,Class field: [instance] Bloch.point_alpha = [],qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self.point_alpha = [],self.point_alpha = [],,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch._lines = [],class_field,,,,Class field: [instance] Bloch._lines = [],qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self._lines = [],self._lines = [],,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,[instance] Bloch._arcs = [],class_field,,,,Class field: [instance] Bloch._arcs = [],qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",self._arcs = [],self._arcs = [],,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"Arrow3D.__init__(self, xs, ys, zs, *args, **kwargs)",class_method,,,,"Class method: Arrow3D.__init__(self, xs, ys, zs, *args, **kwargs)",qutip,qutip,v5.0.4,,,,,,,Arrow3D,__init__,"(self, xs, ys, zs, *args, **kwargs)",,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"Arrow3D.draw(self, renderer)",class_method,,,,"Class method: Arrow3D.draw(self, renderer)",qutip,qutip,v5.0.4,,,,,,,Arrow3D,draw,"(self, renderer)",,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"Arrow3D.do_3d_projection(self, renderer=None)",class_method,,,,"Class method: Arrow3D.do_3d_projection(self, renderer=None)",qutip,qutip,v5.0.4,,,,,,,Arrow3D,do_3d_projection,"(self, renderer=None)",,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"Bloch.__init__(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",class_method,,,,"Class method: Bloch.__init__(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",qutip,qutip,v5.0.4,,,,,,,Bloch,__init__,"(self, fig=None, axes=None, view=None, figsize=None,
                 background=False)",,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"Bloch.set_label_convention(self, convention)",class_method,,,,"Class method: Bloch.set_label_convention(self, convention)",qutip,qutip,v5.0.4,,,,,,,Bloch,set_label_convention,"(self, convention)",,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,Bloch.__str__(self),class_method,,,,Class method: Bloch.__str__(self),qutip,qutip,v5.0.4,,,,,,,Bloch,__str__,(self),,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,Bloch._repr_png_(self),class_method,,,,Class method: Bloch._repr_png_(self),qutip,qutip,v5.0.4,,,,,,,Bloch,_repr_png_,(self),,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,Bloch._repr_svg_(self),class_method,,,,Class method: Bloch._repr_svg_(self),qutip,qutip,v5.0.4,,,,,,,Bloch,_repr_svg_,(self),,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,Bloch.clear(self),class_method,,,,Class method: Bloch.clear(self),qutip,qutip,v5.0.4,,,,,,,Bloch,clear,(self),,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"Bloch.add_points(self, points, meth='s', colors=None, alpha=1.0)",class_method,,,,"Class method: Bloch.add_points(self, points, meth='s', colors=None, alpha=1.0)",qutip,qutip,v5.0.4,,,,,,,Bloch,add_points,"(self, points, meth='s', colors=None, alpha=1.0)",,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"Bloch.add_states(self, state, kind='vector', colors=None, alpha=1.0)",class_method,,,,"Class method: Bloch.add_states(self, state, kind='vector', colors=None, alpha=1.0)",qutip,qutip,v5.0.4,,,,,,,Bloch,add_states,"(self, state, kind='vector', colors=None, alpha=1.0)",,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"Bloch.add_vectors(self, vectors, colors=None, alpha=1.0)",class_method,,,,"Class method: Bloch.add_vectors(self, vectors, colors=None, alpha=1.0)",qutip,qutip,v5.0.4,,,,,,,Bloch,add_vectors,"(self, vectors, colors=None, alpha=1.0)",,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"Bloch.add_annotation(self, state_or_vector, text, **kwargs)",class_method,,,,"Class method: Bloch.add_annotation(self, state_or_vector, text, **kwargs)",qutip,qutip,v5.0.4,,,,,,,Bloch,add_annotation,"(self, state_or_vector, text, **kwargs)",,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"Bloch.add_arc(self, start, end, fmt=""b"", steps=None, **kwargs)",class_method,,,,"Class method: Bloch.add_arc(self, start, end, fmt=""b"", steps=None, **kwargs)",qutip,qutip,v5.0.4,,,,,,,Bloch,add_arc,"(self, start, end, fmt=""b"", steps=None, **kwargs)",,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"Bloch.add_line(self, start, end, fmt=""k"", **kwargs)",class_method,,,,"Class method: Bloch.add_line(self, start, end, fmt=""k"", **kwargs)",qutip,qutip,v5.0.4,,,,,,,Bloch,add_line,"(self, start, end, fmt=""k"", **kwargs)",,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,Bloch.make_sphere(self),class_method,,,,Class method: Bloch.make_sphere(self),qutip,qutip,v5.0.4,,,,,,,Bloch,make_sphere,(self),,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,Bloch.run_from_ipython(self),class_method,,,,Class method: Bloch.run_from_ipython(self),qutip,qutip,v5.0.4,,,,,,,Bloch,run_from_ipython,(self),,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,Bloch._is_inline_backend(self),class_method,,,,Class method: Bloch._is_inline_backend(self),qutip,qutip,v5.0.4,,,,,,,Bloch,_is_inline_backend,(self),,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,Bloch.render(self),class_method,,,,Class method: Bloch.render(self),qutip,qutip,v5.0.4,,,,,,,Bloch,render,(self),,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,Bloch.plot_back(self),class_method,,,,Class method: Bloch.plot_back(self),qutip,qutip,v5.0.4,,,,,,,Bloch,plot_back,(self),,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,Bloch.plot_front(self),class_method,,,,Class method: Bloch.plot_front(self),qutip,qutip,v5.0.4,,,,,,,Bloch,plot_front,(self),,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,Bloch.plot_axes(self),class_method,,,,Class method: Bloch.plot_axes(self),qutip,qutip,v5.0.4,,,,,,,Bloch,plot_axes,(self),,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,Bloch.plot_axes_labels(self),class_method,,,,Class method: Bloch.plot_axes_labels(self),qutip,qutip,v5.0.4,,,,,,,Bloch,plot_axes_labels,(self),,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,Bloch.plot_vectors(self),class_method,,,,Class method: Bloch.plot_vectors(self),qutip,qutip,v5.0.4,,,,,,,Bloch,plot_vectors,(self),,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,Bloch.plot_points(self),class_method,,,,Class method: Bloch.plot_points(self),qutip,qutip,v5.0.4,,,,,,,Bloch,plot_points,(self),,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,Bloch.plot_annotations(self),class_method,,,,Class method: Bloch.plot_annotations(self),qutip,qutip,v5.0.4,,,,,,,Bloch,plot_annotations,(self),,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,Bloch.plot_lines(self),class_method,,,,Class method: Bloch.plot_lines(self),qutip,qutip,v5.0.4,,,,,,,Bloch,plot_lines,(self),,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,Bloch.plot_arcs(self),class_method,,,,Class method: Bloch.plot_arcs(self),qutip,qutip,v5.0.4,,,,,,,Bloch,plot_arcs,(self),,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,Bloch.show(self),class_method,,,,Class method: Bloch.show(self),qutip,qutip,v5.0.4,,,,,,,Bloch,show,(self),,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,"Bloch.save(self, name=None, format='png', dirc=None, dpin=None)",class_method,,,,"Class method: Bloch.save(self, name=None, format='png', dirc=None, dpin=None)",qutip,qutip,v5.0.4,,,,,,,Bloch,save,"(self, name=None, format='png', dirc=None, dpin=None)",,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,Arrow3D(FancyArrowPatch),class,,,,Class: Arrow3D(FancyArrowPatch),qutip,qutip,v5.0.4,,,,,,,Arrow3D,,,,,,,,,(FancyArrowPatch),,
qutip_qutip_v5.0.4,bloch.py,python,Bloch,class,,,,Class: Bloch,qutip,qutip,v5.0.4,,,,,,,Bloch,,,,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,_hide_tick_lines_and_labels(axis),function,,,,Function: _hide_tick_lines_and_labels(axis),qutip,qutip,v5.0.4,,,,_hide_tick_lines_and_labels,(axis),,,,,,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,__all__ = ['Bloch'],constant,__all__ = ['Bloch'],__all__,['Bloch'],Constant: __all__ = ['Bloch'],qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,os,import,,,,Import: os,qutip,qutip,v5.0.4,import os,,os,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,outer from numpy,import,,,,Import: outer from numpy,qutip,qutip,v5.0.4,"from numpy import (outer, cos, sin, ones)",numpy,outer,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,cos from numpy,import,,,,Import: cos from numpy,qutip,qutip,v5.0.4,"from numpy import (outer, cos, sin, ones)",numpy,cos,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,sin from numpy,import,,,,Import: sin from numpy,qutip,qutip,v5.0.4,"from numpy import (outer, cos, sin, ones)",numpy,sin,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,ones from numpy,import,,,,Import: ones from numpy,qutip,qutip,v5.0.4,"from numpy import (outer, cos, sin, ones)",numpy,ones,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bloch.py,python,parse from packaging.version,local_import,,,,Import: parse from packaging.version,qutip,qutip,v5.0.4,from packaging.version import parse as parse_version,packaging.version,parse,,,packaging.version,,,,,,,,,,,,
,bloch.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,bloch.py,python,,,,,,Directory: qutip\bloch.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,cite.py,python,"cite(save=False, path=None)",function,,,,"Function: cite(save=False, path=None)",qutip,qutip,v5.0.4,,,,cite,"(save=False, path=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,cite.py,python,__all__ = ['cite'],constant,__all__ = ['cite'],__all__,['cite'],Constant: __all__ = ['cite'],qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,cite.py,python,os,import,,,,Import: os,qutip,qutip,v5.0.4,import os,,os,,,,,,,,,,,,,,,
,cite.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,cite.py,python,,,,,,Directory: qutip\cite.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,continuous_variables.py,python,"correlation_matrix(basis, rho=None)",function,,,,"Function: correlation_matrix(basis, rho=None)",qutip,qutip,v5.0.4,,,,correlation_matrix,"(basis, rho=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,continuous_variables.py,python,"covariance_matrix(basis, rho, symmetrized=True)",function,,,,"Function: covariance_matrix(basis, rho, symmetrized=True)",qutip,qutip,v5.0.4,,,,covariance_matrix,"(basis, rho, symmetrized=True)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,continuous_variables.py,python,"correlation_matrix_field(a1, a2, rho=None)",function,,,,"Function: correlation_matrix_field(a1, a2, rho=None)",qutip,qutip,v5.0.4,,,,correlation_matrix_field,"(a1, a2, rho=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,continuous_variables.py,python,"correlation_matrix_quadrature(a1, a2, rho=None, g=np.sqrt(2))",function,,,,"Function: correlation_matrix_quadrature(a1, a2, rho=None, g=np.sqrt(2))",qutip,qutip,v5.0.4,,,,correlation_matrix_quadrature,"(a1, a2, rho=None, g=np.sqrt(2))",,,,,,,,,,,,,
qutip_qutip_v5.0.4,continuous_variables.py,python,"wigner_covariance_matrix(a1=None, a2=None, R=None, rho=None, g=np.sqrt(2))",function,,,,"Function: wigner_covariance_matrix(a1=None, a2=None, R=None, rho=None, g=np.sqrt(2))",qutip,qutip,v5.0.4,,,,wigner_covariance_matrix,"(a1=None, a2=None, R=None, rho=None, g=np.sqrt(2))",,,,,,,,,,,,,
qutip_qutip_v5.0.4,continuous_variables.py,python,"logarithmic_negativity(V, g=np.sqrt(2))",function,,,,"Function: logarithmic_negativity(V, g=np.sqrt(2))",qutip,qutip,v5.0.4,,,,logarithmic_negativity,"(V, g=np.sqrt(2))",,,,,,,,,,,,,
qutip_qutip_v5.0.4,continuous_variables.py,python,"__all__ = ['correlation_matrix', 'covariance_matrix',
           'correlation_matrix_field', 'correlation_matrix_quadrature',
           'wigner_covariance_matrix', 'logarithmic_negativity']",constant,"__all__ = ['correlation_matrix', 'covariance_matrix',
           'correlation_matrix_field', 'correlation_matrix_quadrature',
           'wigner_covariance_matrix', 'logarithmic_negativity']",__all__,"['correlation_matrix', 'covariance_matrix',
           'correlation_matrix_field', 'correlation_matrix_quadrature',
           'wigner_covariance_matrix', 'logarithmic_negativity']","Constant: __all__ = ['correlation_matrix', 'covariance_matrix',
           'correlation_matrix_field', 'correlation_matrix_quadrature',
           'wigner_covariance_matrix', 'logarithmic_negativity']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,continuous_variables.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
,continuous_variables.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,continuous_variables.py,python,,,,,,Directory: qutip\continuous_variables.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,control.py,python,sys,import,,,,Import: sys,qutip,qutip,v5.0.4,import sys,,sys,,,,,,,,,,,,,,,
,control.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,control.py,python,,,,,,Directory: qutip\control.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,[instance] Distribution.data = data,class_field,,,,Class field: [instance] Distribution.data = data,qutip,qutip,v5.0.4,,,,,,,Distribution,__init__,"(self, data=None, xvecs=[], xlabels=[])",self.data = data,self.data = data,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,[instance] Distribution.xvecs = xvecs,class_field,,,,Class field: [instance] Distribution.xvecs = xvecs,qutip,qutip,v5.0.4,,,,,,,Distribution,__init__,"(self, data=None, xvecs=[], xlabels=[])",self.xvecs = xvecs,self.xvecs = xvecs,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,[instance] Distribution.xlabels = xlabels,class_field,,,,Class field: [instance] Distribution.xlabels = xlabels,qutip,qutip,v5.0.4,,,,,,,Distribution,__init__,"(self, data=None, xvecs=[], xlabels=[])",self.xlabels = xlabels,self.xlabels = xlabels,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"[instance] WignerDistribution.xvecs = [np.linspace(extent[0][0], extent[0][1], steps),
                      np.linspace(extent[1][0], extent[1][1], steps)]",class_field,,,,"Class field: [instance] WignerDistribution.xvecs = [np.linspace(extent[0][0], extent[0][1], steps),
                      np.linspace(extent[1][0], extent[1][1], steps)]",qutip,qutip,v5.0.4,,,,,,,WignerDistribution,__init__,"(self, rho=None, extent=[[-5, 5], [-5, 5]], steps=250)","self.xvecs = [np.linspace(extent[0][0], extent[0][1], steps),
                      np.linspace(extent[1][0], extent[1][1], steps)]","self.xvecs = [np.linspace(extent[0][0], extent[0][1], steps),
                      np.linspace(extent[1][0], extent[1][1], steps)]",,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"[instance] WignerDistribution.xlabels = [r'$\rm{Re}(\alpha)$', r'$\rm{Im}(\alpha)$']",class_field,,,,"Class field: [instance] WignerDistribution.xlabels = [r'$\rm{Re}(\alpha)$', r'$\rm{Im}(\alpha)$']",qutip,qutip,v5.0.4,,,,,,,WignerDistribution,__init__,"(self, rho=None, extent=[[-5, 5], [-5, 5]], steps=250)","self.xlabels = [r'$\rm{Re}(\alpha)$', r'$\rm{Im}(\alpha)$']","self.xlabels = [r'$\rm{Re}(\alpha)$', r'$\rm{Im}(\alpha)$']",,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"[instance] QDistribution.xvecs = [np.linspace(extent[0][0], extent[0][1], steps),
                      np.linspace(extent[1][0], extent[1][1], steps)]",class_field,,,,"Class field: [instance] QDistribution.xvecs = [np.linspace(extent[0][0], extent[0][1], steps),
                      np.linspace(extent[1][0], extent[1][1], steps)]",qutip,qutip,v5.0.4,,,,,,,QDistribution,__init__,"(self, rho=None, extent=[[-5, 5], [-5, 5]], steps=250)","self.xvecs = [np.linspace(extent[0][0], extent[0][1], steps),
                      np.linspace(extent[1][0], extent[1][1], steps)]","self.xvecs = [np.linspace(extent[0][0], extent[0][1], steps),
                      np.linspace(extent[1][0], extent[1][1], steps)]",,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"[instance] QDistribution.xlabels = [r'$\rm{Re}(\alpha)$', r'$\rm{Im}(\alpha)$']",class_field,,,,"Class field: [instance] QDistribution.xlabels = [r'$\rm{Re}(\alpha)$', r'$\rm{Im}(\alpha)$']",qutip,qutip,v5.0.4,,,,,,,QDistribution,__init__,"(self, rho=None, extent=[[-5, 5], [-5, 5]], steps=250)","self.xlabels = [r'$\rm{Re}(\alpha)$', r'$\rm{Im}(\alpha)$']","self.xlabels = [r'$\rm{Re}(\alpha)$', r'$\rm{Im}(\alpha)$']",,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"[instance] TwoModeQuadratureCorrelation.xvecs = [np.linspace(extent[0][0], extent[0][1], steps),
                      np.linspace(extent[1][0], extent[1][1], steps)]",class_field,,,,"Class field: [instance] TwoModeQuadratureCorrelation.xvecs = [np.linspace(extent[0][0], extent[0][1], steps),
                      np.linspace(extent[1][0], extent[1][1], steps)]",qutip,qutip,v5.0.4,,,,,,,TwoModeQuadratureCorrelation,__init__,"(self, state=None, theta1=0.0, theta2=0.0,
                 extent=[[-5, 5], [-5, 5]], steps=250)","self.xvecs = [np.linspace(extent[0][0], extent[0][1], steps),
                      np.linspace(extent[1][0], extent[1][1], steps)]","self.xvecs = [np.linspace(extent[0][0], extent[0][1], steps),
                      np.linspace(extent[1][0], extent[1][1], steps)]",,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"[instance] TwoModeQuadratureCorrelation.xlabels = [r'$X_1(\theta_1)$', r'$X_2(\theta_2)$']",class_field,,,,"Class field: [instance] TwoModeQuadratureCorrelation.xlabels = [r'$X_1(\theta_1)$', r'$X_2(\theta_2)$']",qutip,qutip,v5.0.4,,,,,,,TwoModeQuadratureCorrelation,__init__,"(self, state=None, theta1=0.0, theta2=0.0,
                 extent=[[-5, 5], [-5, 5]], steps=250)","self.xlabels = [r'$X_1(\theta_1)$', r'$X_2(\theta_2)$']","self.xlabels = [r'$X_1(\theta_1)$', r'$X_2(\theta_2)$']",,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,[instance] TwoModeQuadratureCorrelation.theta1 = theta1,class_field,,,,Class field: [instance] TwoModeQuadratureCorrelation.theta1 = theta1,qutip,qutip,v5.0.4,,,,,,,TwoModeQuadratureCorrelation,__init__,"(self, state=None, theta1=0.0, theta2=0.0,
                 extent=[[-5, 5], [-5, 5]], steps=250)",self.theta1 = theta1,self.theta1 = theta1,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,[instance] TwoModeQuadratureCorrelation.theta2 = theta2,class_field,,,,Class field: [instance] TwoModeQuadratureCorrelation.theta2 = theta2,qutip,qutip,v5.0.4,,,,,,,TwoModeQuadratureCorrelation,__init__,"(self, state=None, theta1=0.0, theta2=0.0,
                 extent=[[-5, 5], [-5, 5]], steps=250)",self.theta2 = theta2,self.theta2 = theta2,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,[instance] TwoModeQuadratureCorrelation.update(state),class_field,,,,Class field: [instance] TwoModeQuadratureCorrelation.update(state),qutip,qutip,v5.0.4,,,,,,,TwoModeQuadratureCorrelation,__init__,"(self, state=None, theta1=0.0, theta2=0.0,
                 extent=[[-5, 5], [-5, 5]], steps=250)",self.update(state),self.update(state),,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"[instance] HarmonicOscillatorWaveFunction.xvecs = [np.linspace(extent[0], extent[1], steps)]",class_field,,,,"Class field: [instance] HarmonicOscillatorWaveFunction.xvecs = [np.linspace(extent[0], extent[1], steps)]",qutip,qutip,v5.0.4,,,,,,,HarmonicOscillatorWaveFunction,__init__,"(self, psi=None, omega=1.0, extent=[-5, 5], steps=250)","self.xvecs = [np.linspace(extent[0], extent[1], steps)]","self.xvecs = [np.linspace(extent[0], extent[1], steps)]",,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,[instance] HarmonicOscillatorWaveFunction.xlabels = [r'$x$'],class_field,,,,Class field: [instance] HarmonicOscillatorWaveFunction.xlabels = [r'$x$'],qutip,qutip,v5.0.4,,,,,,,HarmonicOscillatorWaveFunction,__init__,"(self, psi=None, omega=1.0, extent=[-5, 5], steps=250)",self.xlabels = [r'$x$'],self.xlabels = [r'$x$'],,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,[instance] HarmonicOscillatorWaveFunction.omega = omega,class_field,,,,Class field: [instance] HarmonicOscillatorWaveFunction.omega = omega,qutip,qutip,v5.0.4,,,,,,,HarmonicOscillatorWaveFunction,__init__,"(self, psi=None, omega=1.0, extent=[-5, 5], steps=250)",self.omega = omega,self.omega = omega,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"[instance] HarmonicOscillatorProbabilityFunction.xvecs = [np.linspace(extent[0], extent[1], steps)]",class_field,,,,"Class field: [instance] HarmonicOscillatorProbabilityFunction.xvecs = [np.linspace(extent[0], extent[1], steps)]",qutip,qutip,v5.0.4,,,,,,,HarmonicOscillatorProbabilityFunction,__init__,"(self, rho=None, omega=1.0, extent=[-5, 5], steps=250)","self.xvecs = [np.linspace(extent[0], extent[1], steps)]","self.xvecs = [np.linspace(extent[0], extent[1], steps)]",,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,[instance] HarmonicOscillatorProbabilityFunction.xlabels = [r'$x$'],class_field,,,,Class field: [instance] HarmonicOscillatorProbabilityFunction.xlabels = [r'$x$'],qutip,qutip,v5.0.4,,,,,,,HarmonicOscillatorProbabilityFunction,__init__,"(self, rho=None, omega=1.0, extent=[-5, 5], steps=250)",self.xlabels = [r'$x$'],self.xlabels = [r'$x$'],,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,[instance] HarmonicOscillatorProbabilityFunction.omega = omega,class_field,,,,Class field: [instance] HarmonicOscillatorProbabilityFunction.omega = omega,qutip,qutip,v5.0.4,,,,,,,HarmonicOscillatorProbabilityFunction,__init__,"(self, rho=None, omega=1.0, extent=[-5, 5], steps=250)",self.omega = omega,self.omega = omega,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"Distribution.__init__(self, data=None, xvecs=[], xlabels=[])",class_method,,,,"Class method: Distribution.__init__(self, data=None, xvecs=[], xlabels=[])",qutip,qutip,v5.0.4,,,,,,,Distribution,__init__,"(self, data=None, xvecs=[], xlabels=[])",,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"Distribution.visualize(self, fig=None, ax=None, figsize=(8, 6),
                  colorbar=True, cmap=None, style=""colormap"",
                  show_xlabel=True, show_ylabel=True)",class_method,,,,"Class method: Distribution.visualize(self, fig=None, ax=None, figsize=(8, 6),
                  colorbar=True, cmap=None, style=""colormap"",
                  show_xlabel=True, show_ylabel=True)",qutip,qutip,v5.0.4,,,,,,,Distribution,visualize,"(self, fig=None, ax=None, figsize=(8, 6),
                  colorbar=True, cmap=None, style=""colormap"",
                  show_xlabel=True, show_ylabel=True)",,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"Distribution.visualize_2d_colormap(self, fig=None, ax=None, figsize=(8, 6),
                              colorbar=True, cmap=None,
                              show_xlabel=True, show_ylabel=True)",class_method,,,,"Class method: Distribution.visualize_2d_colormap(self, fig=None, ax=None, figsize=(8, 6),
                              colorbar=True, cmap=None,
                              show_xlabel=True, show_ylabel=True)",qutip,qutip,v5.0.4,,,,,,,Distribution,visualize_2d_colormap,"(self, fig=None, ax=None, figsize=(8, 6),
                              colorbar=True, cmap=None,
                              show_xlabel=True, show_ylabel=True)",,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"Distribution.visualize_2d_surface(self, fig=None, ax=None, figsize=(8, 6),
                             colorbar=True, cmap=None,
                             show_xlabel=True, show_ylabel=True)",class_method,,,,"Class method: Distribution.visualize_2d_surface(self, fig=None, ax=None, figsize=(8, 6),
                             colorbar=True, cmap=None,
                             show_xlabel=True, show_ylabel=True)",qutip,qutip,v5.0.4,,,,,,,Distribution,visualize_2d_surface,"(self, fig=None, ax=None, figsize=(8, 6),
                             colorbar=True, cmap=None,
                             show_xlabel=True, show_ylabel=True)",,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"Distribution.visualize_1d(self, fig=None, ax=None, figsize=(8, 6),
                     show_xlabel=True, show_ylabel=True)",class_method,,,,"Class method: Distribution.visualize_1d(self, fig=None, ax=None, figsize=(8, 6),
                     show_xlabel=True, show_ylabel=True)",qutip,qutip,v5.0.4,,,,,,,Distribution,visualize_1d,"(self, fig=None, ax=None, figsize=(8, 6),
                     show_xlabel=True, show_ylabel=True)",,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"Distribution.marginal(self, dim=0)",class_method,,,,"Class method: Distribution.marginal(self, dim=0)",qutip,qutip,v5.0.4,,,,,,,Distribution,marginal,"(self, dim=0)",,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"Distribution.project(self, dim=0)",class_method,,,,"Class method: Distribution.project(self, dim=0)",qutip,qutip,v5.0.4,,,,,,,Distribution,project,"(self, dim=0)",,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"WignerDistribution.__init__(self, rho=None, extent=[[-5, 5], [-5, 5]], steps=250)",class_method,,,,"Class method: WignerDistribution.__init__(self, rho=None, extent=[[-5, 5], [-5, 5]], steps=250)",qutip,qutip,v5.0.4,,,,,,,WignerDistribution,__init__,"(self, rho=None, extent=[[-5, 5], [-5, 5]], steps=250)",,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"WignerDistribution.update(self, rho)",class_method,,,,"Class method: WignerDistribution.update(self, rho)",qutip,qutip,v5.0.4,,,,,,,WignerDistribution,update,"(self, rho)",,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"QDistribution.__init__(self, rho=None, extent=[[-5, 5], [-5, 5]], steps=250)",class_method,,,,"Class method: QDistribution.__init__(self, rho=None, extent=[[-5, 5], [-5, 5]], steps=250)",qutip,qutip,v5.0.4,,,,,,,QDistribution,__init__,"(self, rho=None, extent=[[-5, 5], [-5, 5]], steps=250)",,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"QDistribution.update(self, rho)",class_method,,,,"Class method: QDistribution.update(self, rho)",qutip,qutip,v5.0.4,,,,,,,QDistribution,update,"(self, rho)",,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"TwoModeQuadratureCorrelation.__init__(self, state=None, theta1=0.0, theta2=0.0,
                 extent=[[-5, 5], [-5, 5]], steps=250)",class_method,,,,"Class method: TwoModeQuadratureCorrelation.__init__(self, state=None, theta1=0.0, theta2=0.0,
                 extent=[[-5, 5], [-5, 5]], steps=250)",qutip,qutip,v5.0.4,,,,,,,TwoModeQuadratureCorrelation,__init__,"(self, state=None, theta1=0.0, theta2=0.0,
                 extent=[[-5, 5], [-5, 5]], steps=250)",,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"TwoModeQuadratureCorrelation.update(self, state)",class_method,,,,"Class method: TwoModeQuadratureCorrelation.update(self, state)",qutip,qutip,v5.0.4,,,,,,,TwoModeQuadratureCorrelation,update,"(self, state)",,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"TwoModeQuadratureCorrelation.update_psi(self, psi)",class_method,,,,"Class method: TwoModeQuadratureCorrelation.update_psi(self, psi)",qutip,qutip,v5.0.4,,,,,,,TwoModeQuadratureCorrelation,update_psi,"(self, psi)",,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"TwoModeQuadratureCorrelation.update_rho(self, rho)",class_method,,,,"Class method: TwoModeQuadratureCorrelation.update_rho(self, rho)",qutip,qutip,v5.0.4,,,,,,,TwoModeQuadratureCorrelation,update_rho,"(self, rho)",,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"HarmonicOscillatorWaveFunction.__init__(self, psi=None, omega=1.0, extent=[-5, 5], steps=250)",class_method,,,,"Class method: HarmonicOscillatorWaveFunction.__init__(self, psi=None, omega=1.0, extent=[-5, 5], steps=250)",qutip,qutip,v5.0.4,,,,,,,HarmonicOscillatorWaveFunction,__init__,"(self, psi=None, omega=1.0, extent=[-5, 5], steps=250)",,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"HarmonicOscillatorWaveFunction.update(self, psi)",class_method,,,,"Class method: HarmonicOscillatorWaveFunction.update(self, psi)",qutip,qutip,v5.0.4,,,,,,,HarmonicOscillatorWaveFunction,update,"(self, psi)",,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"HarmonicOscillatorProbabilityFunction.__init__(self, rho=None, omega=1.0, extent=[-5, 5], steps=250)",class_method,,,,"Class method: HarmonicOscillatorProbabilityFunction.__init__(self, rho=None, omega=1.0, extent=[-5, 5], steps=250)",qutip,qutip,v5.0.4,,,,,,,HarmonicOscillatorProbabilityFunction,__init__,"(self, rho=None, omega=1.0, extent=[-5, 5], steps=250)",,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,"HarmonicOscillatorProbabilityFunction.update(self, rho)",class_method,,,,"Class method: HarmonicOscillatorProbabilityFunction.update(self, rho)",qutip,qutip,v5.0.4,,,,,,,HarmonicOscillatorProbabilityFunction,update,"(self, rho)",,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,Distribution,class,,,,Class: Distribution,qutip,qutip,v5.0.4,,,,,,,Distribution,,,,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,WignerDistribution(Distribution),class,,,,Class: WignerDistribution(Distribution),qutip,qutip,v5.0.4,,,,,,,WignerDistribution,,,,,,,,,(Distribution),,
qutip_qutip_v5.0.4,distributions.py,python,QDistribution(Distribution),class,,,,Class: QDistribution(Distribution),qutip,qutip,v5.0.4,,,,,,,QDistribution,,,,,,,,,(Distribution),,
qutip_qutip_v5.0.4,distributions.py,python,TwoModeQuadratureCorrelation(Distribution),class,,,,Class: TwoModeQuadratureCorrelation(Distribution),qutip,qutip,v5.0.4,,,,,,,TwoModeQuadratureCorrelation,,,,,,,,,(Distribution),,
qutip_qutip_v5.0.4,distributions.py,python,HarmonicOscillatorWaveFunction(Distribution),class,,,,Class: HarmonicOscillatorWaveFunction(Distribution),qutip,qutip,v5.0.4,,,,,,,HarmonicOscillatorWaveFunction,,,,,,,,,(Distribution),,
qutip_qutip_v5.0.4,distributions.py,python,HarmonicOscillatorProbabilityFunction(Distribution),class,,,,Class: HarmonicOscillatorProbabilityFunction(Distribution),qutip,qutip,v5.0.4,,,,,,,HarmonicOscillatorProbabilityFunction,,,,,,,,,(Distribution),,
qutip_qutip_v5.0.4,distributions.py,python,"__all__ = ['Distribution', 'WignerDistribution', 'QDistribution',
           'TwoModeQuadratureCorrelation',
           'HarmonicOscillatorWaveFunction',
           'HarmonicOscillatorProbabilityFunction']",constant,"__all__ = ['Distribution', 'WignerDistribution', 'QDistribution',
           'TwoModeQuadratureCorrelation',
           'HarmonicOscillatorWaveFunction',
           'HarmonicOscillatorProbabilityFunction']",__all__,"['Distribution', 'WignerDistribution', 'QDistribution',
           'TwoModeQuadratureCorrelation',
           'HarmonicOscillatorWaveFunction',
           'HarmonicOscillatorProbabilityFunction']","Constant: __all__ = ['Distribution', 'WignerDistribution', 'QDistribution',
           'TwoModeQuadratureCorrelation',
           'HarmonicOscillatorWaveFunction',
           'HarmonicOscillatorProbabilityFunction']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,pi from numpy,import,,,,Import: pi from numpy,qutip,qutip,v5.0.4,"from numpy import pi, exp, sqrt",numpy,pi,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,exp from numpy,import,,,,Import: exp from numpy,qutip,qutip,v5.0.4,"from numpy import pi, exp, sqrt",numpy,exp,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,sqrt from numpy,import,,,,Import: sqrt from numpy,qutip,qutip,v5.0.4,"from numpy import pi, exp, sqrt",numpy,sqrt,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,hermite from scipy.special,local_import,,,,Import: hermite from scipy.special,qutip,qutip,v5.0.4,"from scipy.special import hermite, factorial",scipy.special,hermite,,,scipy.special,,,,,,,,,,,,
qutip_qutip_v5.0.4,distributions.py,python,factorial from scipy.special,local_import,,,,Import: factorial from scipy.special,qutip,qutip,v5.0.4,"from scipy.special import hermite, factorial",scipy.special,factorial,,,scipy.special,,,,,,,,,,,,
,distributions.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,distributions.py,python,,,,,,Directory: qutip\distributions.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,entropy.py,python,"entropy_vn(rho, base=e, sparse=False)",function,,,,"Function: entropy_vn(rho, base=e, sparse=False)",qutip,qutip,v5.0.4,,,,entropy_vn,"(rho, base=e, sparse=False)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,entropy.py,python,entropy_linear(rho),function,,,,Function: entropy_linear(rho),qutip,qutip,v5.0.4,,,,entropy_linear,(rho),,,,,,,,,,,,,
qutip_qutip_v5.0.4,entropy.py,python,concurrence(rho),function,,,,Function: concurrence(rho),qutip,qutip,v5.0.4,,,,concurrence,(rho),,,,,,,,,,,,,
qutip_qutip_v5.0.4,entropy.py,python,"negativity(rho, subsys, method='tracenorm', logarithmic=False)",function,,,,"Function: negativity(rho, subsys, method='tracenorm', logarithmic=False)",qutip,qutip,v5.0.4,,,,negativity,"(rho, subsys, method='tracenorm', logarithmic=False)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,entropy.py,python,"entropy_mutual(rho, selA, selB, base=e, sparse=False)",function,,,,"Function: entropy_mutual(rho, selA, selB, base=e, sparse=False)",qutip,qutip,v5.0.4,,,,entropy_mutual,"(rho, selA, selB, base=e, sparse=False)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,entropy.py,python,"entropy_relative(rho, sigma, base=e, sparse=False, tol=1e-12)",function,,,,"Function: entropy_relative(rho, sigma, base=e, sparse=False, tol=1e-12)",qutip,qutip,v5.0.4,,,,entropy_relative,"(rho, sigma, base=e, sparse=False, tol=1e-12)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,entropy.py,python,"entropy_conditional(rho, selB, base=e, sparse=False)",function,,,,"Function: entropy_conditional(rho, selB, base=e, sparse=False)",qutip,qutip,v5.0.4,,,,entropy_conditional,"(rho, selB, base=e, sparse=False)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,entropy.py,python,participation_ratio(rho),function,,,,Function: participation_ratio(rho),qutip,qutip,v5.0.4,,,,participation_ratio,(rho),,,,,,,,,,,,,
qutip_qutip_v5.0.4,entropy.py,python,entangling_power(U),function,,,,Function: entangling_power(U),qutip,qutip,v5.0.4,,,,entangling_power,(U),,,,,,,,,,,,,
qutip_qutip_v5.0.4,entropy.py,python,"__all__ = ['entropy_vn', 'entropy_linear', 'entropy_mutual', 'negativity',
           'concurrence', 'entropy_conditional', 'entangling_power',
           'entropy_relative']",constant,"__all__ = ['entropy_vn', 'entropy_linear', 'entropy_mutual', 'negativity',
           'concurrence', 'entropy_conditional', 'entangling_power',
           'entropy_relative']",__all__,"['entropy_vn', 'entropy_linear', 'entropy_mutual', 'negativity',
           'concurrence', 'entropy_conditional', 'entangling_power',
           'entropy_relative']","Constant: __all__ = ['entropy_vn', 'entropy_linear', 'entropy_mutual', 'negativity',
           'concurrence', 'entropy_conditional', 'entangling_power',
           'entropy_relative']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,entropy.py,python,conj from numpy,import,,,,Import: conj from numpy,qutip,qutip,v5.0.4,"from numpy import conj, e, inf, imag, inner, real, sort, sqrt",numpy,conj,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,entropy.py,python,e from numpy,import,,,,Import: e from numpy,qutip,qutip,v5.0.4,"from numpy import conj, e, inf, imag, inner, real, sort, sqrt",numpy,e,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,entropy.py,python,inf from numpy,import,,,,Import: inf from numpy,qutip,qutip,v5.0.4,"from numpy import conj, e, inf, imag, inner, real, sort, sqrt",numpy,inf,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,entropy.py,python,imag from numpy,import,,,,Import: imag from numpy,qutip,qutip,v5.0.4,"from numpy import conj, e, inf, imag, inner, real, sort, sqrt",numpy,imag,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,entropy.py,python,inner from numpy,import,,,,Import: inner from numpy,qutip,qutip,v5.0.4,"from numpy import conj, e, inf, imag, inner, real, sort, sqrt",numpy,inner,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,entropy.py,python,real from numpy,import,,,,Import: real from numpy,qutip,qutip,v5.0.4,"from numpy import conj, e, inf, imag, inner, real, sort, sqrt",numpy,real,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,entropy.py,python,sort from numpy,import,,,,Import: sort from numpy,qutip,qutip,v5.0.4,"from numpy import conj, e, inf, imag, inner, real, sort, sqrt",numpy,sort,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,entropy.py,python,sqrt from numpy,import,,,,Import: sqrt from numpy,qutip,qutip,v5.0.4,"from numpy import conj, e, inf, imag, inner, real, sort, sqrt",numpy,sqrt,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,entropy.py,python,log from numpy.lib.scimath,local_import,,,,Import: log from numpy.lib.scimath,qutip,qutip,v5.0.4,"from numpy.lib.scimath import log, log2",numpy.lib.scimath,log,,,numpy.lib.scimath,,,,,,,,,,,,
qutip_qutip_v5.0.4,entropy.py,python,log2 from numpy.lib.scimath,local_import,,,,Import: log2 from numpy.lib.scimath,qutip,qutip,v5.0.4,"from numpy.lib.scimath import log, log2",numpy.lib.scimath,log2,,,numpy.lib.scimath,,,,,,,,,,,,
,entropy.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,entropy.py,python,,,,,,Directory: qutip\entropy.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,fileio.py,python,"file_data_store(filename, data, numtype=""complex"", numformat=""decimal"",
                    sep="","")",function,,,,"Function: file_data_store(filename, data, numtype=""complex"", numformat=""decimal"",
                    sep="","")",qutip,qutip,v5.0.4,,,,file_data_store,"(filename, data, numtype=""complex"", numformat=""decimal"",
                    sep="","")",,,,,,,,,,,,,
qutip_qutip_v5.0.4,fileio.py,python,"file_data_read(filename, sep=None)",function,,,,"Function: file_data_read(filename, sep=None)",qutip,qutip,v5.0.4,,,,file_data_read,"(filename, sep=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,fileio.py,python,"qsave(data, name='qutip_data')",function,,,,"Function: qsave(data, name='qutip_data')",qutip,qutip,v5.0.4,,,,qsave,"(data, name='qutip_data')",,,,,,,,,,,,,
qutip_qutip_v5.0.4,fileio.py,python,qload(filename),function,,,,Function: qload(filename),qutip,qutip,v5.0.4,,,,qload,(filename),,,,,,,,,,,,,
qutip_qutip_v5.0.4,fileio.py,python,"__all__ = ['file_data_store', 'file_data_read', 'qsave', 'qload']",constant,"__all__ = ['file_data_store', 'file_data_read', 'qsave', 'qload']",__all__,"['file_data_store', 'file_data_read', 'qsave', 'qload']","Constant: __all__ = ['file_data_store', 'file_data_read', 'qsave', 'qload']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,fileio.py,python,pickle,import,,,,Import: pickle,qutip,qutip,v5.0.4,import pickle,,pickle,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,fileio.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,fileio.py,python,sys,import,,,,Import: sys,qutip,qutip,v5.0.4,import sys,,sys,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,fileio.py,python,Path from pathlib,import,,,,Import: Path from pathlib,qutip,qutip,v5.0.4,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
,fileio.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,fileio.py,python,,,,,,Directory: qutip\fileio.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,version_table(verbose=False),function,,,,Function: version_table(verbose=False),qutip,qutip,v5.0.4,,,,version_table,(verbose=False),,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,_visualize_parfor_data(metadata),function,,,,Function: _visualize_parfor_data(metadata),qutip,qutip,v5.0.4,,,,_visualize_parfor_data,(metadata),,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,"parfor(task, task_vec, args=None, client=None, view=None,
           show_scheduling=False, show_progressbar=False)",function,,,,"Function: parfor(task, task_vec, args=None, client=None, view=None,
           show_scheduling=False, show_progressbar=False)",qutip,qutip,v5.0.4,,,,parfor,"(task, task_vec, args=None, client=None, view=None,
           show_scheduling=False, show_progressbar=False)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,"parallel_map(task, values, task_args=None, task_kwargs=None,
                 client=None, view=None, progress_bar=None,
                 show_scheduling=False, **kwargs)",function,,,,"Function: parallel_map(task, values, task_args=None, task_kwargs=None,
                 client=None, view=None, progress_bar=None,
                 show_scheduling=False, **kwargs)",qutip,qutip,v5.0.4,,,,parallel_map,"(task, values, task_args=None, task_kwargs=None,
                 client=None, view=None, progress_bar=None,
                 show_scheduling=False, **kwargs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,"plot_animation(plot_setup_func, plot_func, result, name=""movie"",
                   writer=""avconv"", codec=""libx264"", verbose=False)",function,,,,"Function: plot_animation(plot_setup_func, plot_func, result, name=""movie"",
                   writer=""avconv"", codec=""libx264"", verbose=False)",qutip,qutip,v5.0.4,,,,plot_animation,"(plot_setup_func, plot_func, result, name=""movie"",
                   writer=""avconv"", codec=""libx264"", verbose=False)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,IPython,import,,,,Import: IPython,qutip,qutip,v5.0.4,import IPython,,IPython,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,matplotlib.pyplot,import,,,,Import: matplotlib.pyplot,qutip,qutip,v5.0.4,import matplotlib.pyplot as plt,,matplotlib.pyplot,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,animation from matplotlib,import,,,,Import: animation from matplotlib,qutip,qutip,v5.0.4,from matplotlib import animation,matplotlib,animation,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,b64encode from base64,import,,,,Import: b64encode from base64,qutip,qutip,v5.0.4,from base64 import b64encode,base64,b64encode,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,datetime,import,,,,Import: datetime,qutip,qutip,v5.0.4,import datetime,,datetime,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,uuid,import,,,,Import: uuid,qutip,qutip,v5.0.4,import uuid,,uuid,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,sys,import,,,,Import: sys,qutip,qutip,v5.0.4,import sys,,sys,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,os,import,,,,Import: os,qutip,qutip,v5.0.4,import os,,os,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,time,import,,,,Import: time,qutip,qutip,v5.0.4,import time,,time,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,inspect,import,,,,Import: inspect,qutip,qutip,v5.0.4,import inspect,,inspect,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,scipy,import,,,,Import: scipy,qutip,qutip,v5.0.4,import scipy,,scipy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,matplotlib,import,,,,Import: matplotlib,qutip,qutip,v5.0.4,import matplotlib,,matplotlib,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,IPython,import,,,,Import: IPython,qutip,qutip,v5.0.4,import IPython,,IPython,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,BaseProgressBar from qutip.ui.progressbar,local_import,,,,Import: BaseProgressBar from qutip.ui.progressbar,qutip,qutip,v5.0.4,"from qutip.ui.progressbar import BaseProgressBar, HTMLProgressBar",qutip.ui.progressbar,BaseProgressBar,,,qutip.ui.progressbar,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,HTMLProgressBar from qutip.ui.progressbar,local_import,,,,Import: HTMLProgressBar from qutip.ui.progressbar,qutip,qutip,v5.0.4,"from qutip.ui.progressbar import BaseProgressBar, HTMLProgressBar",qutip.ui.progressbar,HTMLProgressBar,,,qutip.ui.progressbar,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,HTML from IPython.display,local_import,,,,Import: HTML from IPython.display,qutip,qutip,v5.0.4,"from IPython.display import HTML, Javascript, display",IPython.display,HTML,,,IPython.display,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,Javascript from IPython.display,local_import,,,,Import: Javascript from IPython.display,qutip,qutip,v5.0.4,"from IPython.display import HTML, Javascript, display",IPython.display,Javascript,,,IPython.display,,,,,,,,,,,,
qutip_qutip_v5.0.4,ipynbtools.py,python,display from IPython.display,local_import,,,,Import: display from IPython.display,qutip,qutip,v5.0.4,"from IPython.display import HTML, Javascript, display",IPython.display,display,,,IPython.display,,,,,,,,,,,,
,ipynbtools.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,ipynbtools.py,python,,,,,,Directory: qutip\ipynbtools.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,matplotlib_utilities.py,python,[instance] MidpointNorm.midpoint = midpoint,class_field,,,,Class field: [instance] MidpointNorm.midpoint = midpoint,qutip,qutip,v5.0.4,,,,,,,MidpointNorm,__init__,"(self, midpoint=0, vmin=None, vmax=None, clip=False)",self.midpoint = midpoint,self.midpoint = midpoint,,,,,,,
qutip_qutip_v5.0.4,matplotlib_utilities.py,python,"Normalize.__init__(self, vmin=None, vmax=None, clip=False)",class_method,,,,"Class method: Normalize.__init__(self, vmin=None, vmax=None, clip=False)",qutip,qutip,v5.0.4,,,,,,,Normalize,__init__,"(self, vmin=None, vmax=None, clip=False)",,,,,,,,,
qutip_qutip_v5.0.4,matplotlib_utilities.py,python,"MidpointNorm.__init__(self, midpoint=0, vmin=None, vmax=None, clip=False)",class_method,,,,"Class method: MidpointNorm.__init__(self, midpoint=0, vmin=None, vmax=None, clip=False)",qutip,qutip,v5.0.4,,,,,,,MidpointNorm,__init__,"(self, midpoint=0, vmin=None, vmax=None, clip=False)",,,,,,,,,
qutip_qutip_v5.0.4,matplotlib_utilities.py,python,"MidpointNorm.__call__(self, value, clip=None)",class_method,,,,"Class method: MidpointNorm.__call__(self, value, clip=None)",qutip,qutip,v5.0.4,,,,,,,MidpointNorm,__call__,"(self, value, clip=None)",,,,,,,,,
qutip_qutip_v5.0.4,matplotlib_utilities.py,python,Normalize(object),class,,,,Class: Normalize(object),qutip,qutip,v5.0.4,,,,,,,Normalize,,,,,,,,,(object),,
qutip_qutip_v5.0.4,matplotlib_utilities.py,python,MidpointNorm(Normalize),class,,,,Class: MidpointNorm(Normalize),qutip,qutip,v5.0.4,,,,,,,MidpointNorm,,,,,,,,,(Normalize),,
qutip_qutip_v5.0.4,matplotlib_utilities.py,python,"wigner_cmap(W, levels=1024, shift=0, max_color='#09224F',
                mid_color='#FFFFFF', min_color='#530017',
                neg_color='#FF97D4', invert=False)",function,,,,"Function: wigner_cmap(W, levels=1024, shift=0, max_color='#09224F',
                mid_color='#FFFFFF', min_color='#530017',
                neg_color='#FF97D4', invert=False)",qutip,qutip,v5.0.4,,,,wigner_cmap,"(W, levels=1024, shift=0, max_color='#09224F',
                mid_color='#FFFFFF', min_color='#530017',
                neg_color='#FF97D4', invert=False)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,matplotlib_utilities.py,python,complex_phase_cmap(),function,,,,Function: complex_phase_cmap(),qutip,qutip,v5.0.4,,,,complex_phase_cmap,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,matplotlib_utilities.py,python,"__all__ = ['wigner_cmap', 'MidpointNorm', 'complex_phase_cmap']",constant,"__all__ = ['wigner_cmap', 'MidpointNorm', 'complex_phase_cmap']",__all__,"['wigner_cmap', 'MidpointNorm', 'complex_phase_cmap']","Constant: __all__ = ['wigner_cmap', 'MidpointNorm', 'complex_phase_cmap']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,matplotlib_utilities.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
,matplotlib_utilities.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,matplotlib_utilities.py,python,,,,,,Directory: qutip\matplotlib_utilities.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,measurement.py,python,"_verify_input(op, state)",function,,,,"Function: _verify_input(op, state)",qutip,qutip,v5.0.4,,,,_verify_input,"(op, state)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,measurement.py,python,"_measurement_statistics_povm_ket(state, ops, tol=None)",function,,,,"Function: _measurement_statistics_povm_ket(state, ops, tol=None)",qutip,qutip,v5.0.4,,,,_measurement_statistics_povm_ket,"(state, ops, tol=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,measurement.py,python,"_measurement_statistics_povm_dm(density_mat, ops, tol=None)",function,,,,"Function: _measurement_statistics_povm_dm(density_mat, ops, tol=None)",qutip,qutip,v5.0.4,,,,_measurement_statistics_povm_dm,"(density_mat, ops, tol=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,measurement.py,python,"measurement_statistics_povm(state, ops, tol=None)",function,,,,"Function: measurement_statistics_povm(state, ops, tol=None)",qutip,qutip,v5.0.4,,,,measurement_statistics_povm,"(state, ops, tol=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,measurement.py,python,"measurement_statistics_observable(state, op, tol=None)",function,,,,"Function: measurement_statistics_observable(state, op, tol=None)",qutip,qutip,v5.0.4,,,,measurement_statistics_observable,"(state, op, tol=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,measurement.py,python,"measure_observable(state, op, tol=None)",function,,,,"Function: measure_observable(state, op, tol=None)",qutip,qutip,v5.0.4,,,,measure_observable,"(state, op, tol=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,measurement.py,python,"measure_povm(state, ops, tol=None)",function,,,,"Function: measure_povm(state, ops, tol=None)",qutip,qutip,v5.0.4,,,,measure_povm,"(state, ops, tol=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,measurement.py,python,"measurement_statistics(state, ops, tol=None)",function,,,,"Function: measurement_statistics(state, ops, tol=None)",qutip,qutip,v5.0.4,,,,measurement_statistics,"(state, ops, tol=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,measurement.py,python,"measure(state, ops, tol=None)",function,,,,"Function: measure(state, ops, tol=None)",qutip,qutip,v5.0.4,,,,measure,"(state, ops, tol=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,measurement.py,python,"__all__ = [
    'measurement_statistics_povm',
    'measurement_statistics_observable',
    'measure_observable',
    'measure_povm',
    'measurement_statistics',
    'measure'
]",constant,"__all__ = [
    'measurement_statistics_povm',
    'measurement_statistics_observable',
    'measure_observable',
    'measure_povm',
    'measurement_statistics',
    'measure'
]",__all__,"[
    'measurement_statistics_povm',
    'measurement_statistics_observable',
    'measure_observable',
    'measure_povm',
    'measurement_statistics',
    'measure'
]","Constant: __all__ = [
    'measurement_statistics_povm',
    'measurement_statistics_observable',
    'measure_observable',
    'measure_povm',
    'measurement_statistics',
    'measure'
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,measurement.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
,measurement.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,measurement.py,python,,,,,,Directory: qutip\measurement.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,partial_transpose.py,python,"partial_transpose(rho, mask, method='dense')",function,,,,"Function: partial_transpose(rho, mask, method='dense')",qutip,qutip,v5.0.4,,,,partial_transpose,"(rho, mask, method='dense')",,,,,,,,,,,,,
qutip_qutip_v5.0.4,partial_transpose.py,python,"_partial_transpose_dense(rho, mask)",function,,,,"Function: _partial_transpose_dense(rho, mask)",qutip,qutip,v5.0.4,,,,_partial_transpose_dense,"(rho, mask)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,partial_transpose.py,python,"_partial_transpose_sparse(rho, mask)",function,,,,"Function: _partial_transpose_sparse(rho, mask)",qutip,qutip,v5.0.4,,,,_partial_transpose_sparse,"(rho, mask)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,partial_transpose.py,python,"_partial_transpose_reference(rho, mask)",function,,,,"Function: _partial_transpose_reference(rho, mask)",qutip,qutip,v5.0.4,,,,_partial_transpose_reference,"(rho, mask)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,partial_transpose.py,python,__all__ = ['partial_transpose'],constant,__all__ = ['partial_transpose'],__all__,['partial_transpose'],Constant: __all__ = ['partial_transpose'],qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,partial_transpose.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,partial_transpose.py,python,scipy.sparse,import,,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,,scipy.sparse,,,,,,,,,,,,,,,
,partial_transpose.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,partial_transpose.py,python,,,,,,Directory: qutip\partial_transpose.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qip.py,python,sys,import,,,,Import: sys,qutip,qutip,v5.0.4,import sys,,sys,,,,,,,,,,,,,,,
,qip.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,qip.py,python,,,,,,Directory: qutip\qip.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,"_implicit_tensor_dimensions(dimensions, superoper=False)",function,,,,"Function: _implicit_tensor_dimensions(dimensions, superoper=False)",qutip,qutip,v5.0.4,,,,_implicit_tensor_dimensions,"(dimensions, superoper=False)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,_get_generator(seed),function,,,,Function: _get_generator(seed),qutip,qutip,v5.0.4,,,,_get_generator,(seed),,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,"_randnz(shape, generator, norm=np.sqrt(0.5))",function,,,,"Function: _randnz(shape, generator, norm=np.sqrt(0.5))",qutip,qutip,v5.0.4,,,,_randnz,"(shape, generator, norm=np.sqrt(0.5))",,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,"_rand_jacobi_rotation(A, generator)",function,,,,"Function: _rand_jacobi_rotation(A, generator)",qutip,qutip,v5.0.4,,,,_rand_jacobi_rotation,"(A, generator)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,"_get_block_sizes(N, density, generator)",function,,,,"Function: _get_block_sizes(N, density, generator)",qutip,qutip,v5.0.4,,,,_get_block_sizes,"(N, density, generator)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,"_merge_shuffle_blocks(blocks, generator)",function,,,,"Function: _merge_shuffle_blocks(blocks, generator)",qutip,qutip,v5.0.4,,,,_merge_shuffle_blocks,"(blocks, generator)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,"rand_herm(dimensions, density=0.30, distribution=""fill"", *,
              eigenvalues=(), seed=None, dtype=None)",function,,,,"Function: rand_herm(dimensions, density=0.30, distribution=""fill"", *,
              eigenvalues=(), seed=None, dtype=None)",qutip,qutip,v5.0.4,,,,rand_herm,"(dimensions, density=0.30, distribution=""fill"", *,
              eigenvalues=(), seed=None, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,"_rand_herm_sparse(N, density, pos_def, generator)",function,,,,"Function: _rand_herm_sparse(N, density, pos_def, generator)",qutip,qutip,v5.0.4,,,,_rand_herm_sparse,"(N, density, pos_def, generator)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,"_rand_herm_dense(N, density, pos_def, generator)",function,,,,"Function: _rand_herm_dense(N, density, pos_def, generator)",qutip,qutip,v5.0.4,,,,_rand_herm_dense,"(N, density, pos_def, generator)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,"rand_unitary(dimensions, density=1, distribution=""haar"", *,
                 seed=None, dtype=None)",function,,,,"Function: rand_unitary(dimensions, density=1, distribution=""haar"", *,
                 seed=None, dtype=None)",qutip,qutip,v5.0.4,,,,rand_unitary,"(dimensions, density=1, distribution=""haar"", *,
                 seed=None, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,"_rand_unitary_haar(N, generator)",function,,,,"Function: _rand_unitary_haar(N, generator)",qutip,qutip,v5.0.4,,,,_rand_unitary_haar,"(N, generator)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,"rand_ket(dimensions, density=1, distribution=""haar"", *,
             seed=None, dtype=None)",function,,,,"Function: rand_ket(dimensions, density=1, distribution=""haar"", *,
             seed=None, dtype=None)",qutip,qutip,v5.0.4,,,,rand_ket,"(dimensions, density=1, distribution=""haar"", *,
             seed=None, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,"rand_dm(dimensions, density=0.75, distribution=""ginibre"", *,
            eigenvalues=(), rank=None, seed=None,
            dtype=None)",function,,,,"Function: rand_dm(dimensions, density=0.75, distribution=""ginibre"", *,
            eigenvalues=(), rank=None, seed=None,
            dtype=None)",qutip,qutip,v5.0.4,,,,rand_dm,"(dimensions, density=0.75, distribution=""ginibre"", *,
            eigenvalues=(), rank=None, seed=None,
            dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,"_rand_dm_ginibre(N, rank, generator)",function,,,,"Function: _rand_dm_ginibre(N, rank, generator)",qutip,qutip,v5.0.4,,,,_rand_dm_ginibre,"(N, rank, generator)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,"rand_kraus_map(dimensions, *, seed=None, dtype=None)",function,,,,"Function: rand_kraus_map(dimensions, *, seed=None, dtype=None)",qutip,qutip,v5.0.4,,,,rand_kraus_map,"(dimensions, *, seed=None, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,"rand_super(dimensions, *, superrep=""super"", seed=None, dtype=None)",function,,,,"Function: rand_super(dimensions, *, superrep=""super"", seed=None, dtype=None)",qutip,qutip,v5.0.4,,,,rand_super,"(dimensions, *, superrep=""super"", seed=None, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,"rand_super_bcsz(dimensions, enforce_tp=True, rank=None, *,
                    superrep=""super"", seed=None,
                    dtype=None)",function,,,,"Function: rand_super_bcsz(dimensions, enforce_tp=True, rank=None, *,
                    superrep=""super"", seed=None,
                    dtype=None)",qutip,qutip,v5.0.4,,,,rand_super_bcsz,"(dimensions, enforce_tp=True, rank=None, *,
                    superrep=""super"", seed=None,
                    dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,"rand_stochastic(dimensions, density=0.75, kind='left',
                    *, seed=None, dtype=None)",function,,,,"Function: rand_stochastic(dimensions, density=0.75, kind='left',
                    *, seed=None, dtype=None)",qutip,qutip,v5.0.4,,,,rand_stochastic,"(dimensions, density=0.75, kind='left',
                    *, seed=None, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,"__all__ = [
    'rand_herm',
    'rand_unitary',
    'rand_dm',
    'rand_stochastic',
    'rand_ket',
    'rand_kraus_map',
    'rand_super',
    ""rand_super_bcsz"",
]",constant,"__all__ = [
    'rand_herm',
    'rand_unitary',
    'rand_dm',
    'rand_stochastic',
    'rand_ket',
    'rand_kraus_map',
    'rand_super',
    ""rand_super_bcsz"",
]",__all__,"[
    'rand_herm',
    'rand_unitary',
    'rand_dm',
    'rand_stochastic',
    'rand_ket',
    'rand_kraus_map',
    'rand_super',
    ""rand_super_bcsz"",
]","Constant: __all__ = [
    'rand_herm',
    'rand_unitary',
    'rand_dm',
    'rand_stochastic',
    'rand_ket',
    'rand_kraus_map',
    'rand_super',
    ""rand_super_bcsz"",
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,_RAND = default_rng(),constant,_RAND = default_rng(),_RAND,default_rng(),Constant: _RAND = default_rng(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,"_UNITS = np.array([1, 1j])",constant,"_UNITS = np.array([1, 1j])",_UNITS,"np.array([1, 1j])","Constant: _UNITS = np.array([1, 1j])",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,numbers,import,,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,,numbers,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,scipy.linalg,import,,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg,,scipy.linalg,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,scipy.sparse,import,,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,,scipy.sparse,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,Generator from numpy.random,local_import,,,,Import: Generator from numpy.random,qutip,qutip,v5.0.4,"from numpy.random import Generator, SeedSequence, default_rng",numpy.random,Generator,,,numpy.random,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,SeedSequence from numpy.random,local_import,,,,Import: SeedSequence from numpy.random,qutip,qutip,v5.0.4,"from numpy.random import Generator, SeedSequence, default_rng",numpy.random,SeedSequence,,,numpy.random,,,,,,,,,,,,
qutip_qutip_v5.0.4,random_objects.py,python,default_rng from numpy.random,local_import,,,,Import: default_rng from numpy.random,qutip,qutip,v5.0.4,"from numpy.random import Generator, SeedSequence, default_rng",numpy.random,default_rng,,,numpy.random,,,,,,,,,,,,
,random_objects.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,random_objects.py,python,,,,,,Directory: qutip\random_objects.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,settings.py,python,"[instance] Settings._mkl_lib = """"",class_field,,,,"Class field: [instance] Settings._mkl_lib = """"",qutip,qutip,v5.0.4,,,,,,,Settings,__init__,(self),"self._mkl_lib = """"","self._mkl_lib = """"",,,,,,,
qutip_qutip_v5.0.4,settings.py,python,[instance] Settings.core = None,class_field,,,,Class field: [instance] Settings.core = None,qutip,qutip,v5.0.4,,,,,,,Settings,__init__,(self),self.core = None,self.core = None,,,,,,,
qutip_qutip_v5.0.4,settings.py,python,[instance] Settings.compile = None,class_field,,,,Class field: [instance] Settings.compile = None,qutip,qutip,v5.0.4,,,,,,,Settings,__init__,(self),self.compile = None,self.compile = None,,,,,,,
qutip_qutip_v5.0.4,settings.py,python,[instance] Settings._debug = False,class_field,,,,Class field: [instance] Settings._debug = False,qutip,qutip,v5.0.4,,,,,,,Settings,__init__,(self),self._debug = False,self._debug = False,,,,,,,
qutip_qutip_v5.0.4,settings.py,python,"[instance] Settings._log_handler = ""default""",class_field,,,,"Class field: [instance] Settings._log_handler = ""default""",qutip,qutip,v5.0.4,,,,,,,Settings,__init__,(self),"self._log_handler = ""default""","self._log_handler = ""default""",,,,,,,
qutip_qutip_v5.0.4,settings.py,python,[instance] Settings._colorblind_safe = False,class_field,,,,Class field: [instance] Settings._colorblind_safe = False,qutip,qutip,v5.0.4,,,,,,,Settings,__init__,(self),self._colorblind_safe = False,self._colorblind_safe = False,,,,,,,
qutip_qutip_v5.0.4,settings.py,python,Settings.__init__(self),class_method,,,,Class method: Settings.__init__(self),qutip,qutip,v5.0.4,,,,,,,Settings,__init__,(self),,,,,,,,,
qutip_qutip_v5.0.4,settings.py,python,[property] Settings.has_mkl(self),class_method,,,,Class method: [property] Settings.has_mkl(self),qutip,qutip,v5.0.4,,,,,,,Settings,has_mkl,(self),,,,,,,,,property
qutip_qutip_v5.0.4,settings.py,python,[property] Settings.mkl_lib(self),class_method,,,,Class method: [property] Settings.mkl_lib(self),qutip,qutip,v5.0.4,,,,,,,Settings,mkl_lib,(self),,,,,,,,,property
qutip_qutip_v5.0.4,settings.py,python,[property] Settings.ipython(self),class_method,,,,Class method: [property] Settings.ipython(self),qutip,qutip,v5.0.4,,,,,,,Settings,ipython,(self),,,,,,,,,property
qutip_qutip_v5.0.4,settings.py,python,[property] Settings.eigh_unsafe(self),class_method,,,,Class method: [property] Settings.eigh_unsafe(self),qutip,qutip,v5.0.4,,,,,,,Settings,eigh_unsafe,(self),,,,,,,,,property
qutip_qutip_v5.0.4,settings.py,python,[property] Settings.tmproot(self),class_method,,,,Class method: [property] Settings.tmproot(self),qutip,qutip,v5.0.4,,,,,,,Settings,tmproot,(self),,,,,,,,,property
qutip_qutip_v5.0.4,settings.py,python,"[tmproot.setter] Settings.tmproot(self, root)",class_method,,,,"Class method: [tmproot.setter] Settings.tmproot(self, root)",qutip,qutip,v5.0.4,,,,,,,Settings,tmproot,"(self, root)",,,,,,,,,tmproot.setter
qutip_qutip_v5.0.4,settings.py,python,[property] Settings.coeffroot(self),class_method,,,,Class method: [property] Settings.coeffroot(self),qutip,qutip,v5.0.4,,,,,,,Settings,coeffroot,(self),,,,,,,,,property
qutip_qutip_v5.0.4,settings.py,python,"[coeffroot.setter] Settings.coeffroot(self, root)",class_method,,,,"Class method: [coeffroot.setter] Settings.coeffroot(self, root)",qutip,qutip,v5.0.4,,,,,,,Settings,coeffroot,"(self, root)",,,,,,,,,coeffroot.setter
qutip_qutip_v5.0.4,settings.py,python,[property] Settings.coeff_write_ok(self),class_method,,,,Class method: [property] Settings.coeff_write_ok(self),qutip,qutip,v5.0.4,,,,,,,Settings,coeff_write_ok,(self),,,,,,,,,property
qutip_qutip_v5.0.4,settings.py,python,[property] Settings.has_openmp(self),class_method,,,,Class method: [property] Settings.has_openmp(self),qutip,qutip,v5.0.4,,,,,,,Settings,has_openmp,(self),,,,,,,,,property
qutip_qutip_v5.0.4,settings.py,python,[property] Settings.idxint_size(self),class_method,,,,Class method: [property] Settings.idxint_size(self),qutip,qutip,v5.0.4,,,,,,,Settings,idxint_size,(self),,,,,,,,,property
qutip_qutip_v5.0.4,settings.py,python,[property] Settings.num_cpus(self),class_method,,,,Class method: [property] Settings.num_cpus(self),qutip,qutip,v5.0.4,,,,,,,Settings,num_cpus,(self),,,,,,,,,property
qutip_qutip_v5.0.4,settings.py,python,[property] Settings.debug(self),class_method,,,,Class method: [property] Settings.debug(self),qutip,qutip,v5.0.4,,,,,,,Settings,debug,(self),,,,,,,,,property
qutip_qutip_v5.0.4,settings.py,python,"[debug.setter] Settings.debug(self, value)",class_method,,,,"Class method: [debug.setter] Settings.debug(self, value)",qutip,qutip,v5.0.4,,,,,,,Settings,debug,"(self, value)",,,,,,,,,debug.setter
qutip_qutip_v5.0.4,settings.py,python,[property] Settings.log_handler(self),class_method,,,,Class method: [property] Settings.log_handler(self),qutip,qutip,v5.0.4,,,,,,,Settings,log_handler,(self),,,,,,,,,property
qutip_qutip_v5.0.4,settings.py,python,"[log_handler.setter] Settings.log_handler(self, value)",class_method,,,,"Class method: [log_handler.setter] Settings.log_handler(self, value)",qutip,qutip,v5.0.4,,,,,,,Settings,log_handler,"(self, value)",,,,,,,,,log_handler.setter
qutip_qutip_v5.0.4,settings.py,python,[property] Settings.colorblind_safe(self),class_method,,,,Class method: [property] Settings.colorblind_safe(self),qutip,qutip,v5.0.4,,,,,,,Settings,colorblind_safe,(self),,,,,,,,,property
qutip_qutip_v5.0.4,settings.py,python,"[colorblind_safe.setter] Settings.colorblind_safe(self, value)",class_method,,,,"Class method: [colorblind_safe.setter] Settings.colorblind_safe(self, value)",qutip,qutip,v5.0.4,,,,,,,Settings,colorblind_safe,"(self, value)",,,,,,,,,colorblind_safe.setter
qutip_qutip_v5.0.4,settings.py,python,Settings.__str__(self),class_method,,,,Class method: Settings.__str__(self),qutip,qutip,v5.0.4,,,,,,,Settings,__str__,(self),,,,,,,,,
qutip_qutip_v5.0.4,settings.py,python,Settings.__repr__(self),class_method,,,,Class method: Settings.__repr__(self),qutip,qutip,v5.0.4,,,,,,,Settings,__repr__,(self),,,,,,,,,
qutip_qutip_v5.0.4,settings.py,python,Settings,class,,,,Class: Settings,qutip,qutip,v5.0.4,,,,,,,Settings,,,,,,,,,,,
qutip_qutip_v5.0.4,settings.py,python,_blas_info(),function,,,,Function: _blas_info(),qutip,qutip,v5.0.4,,,,_blas_info,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,settings.py,python,available_cpu_count(),function,,,,Function: available_cpu_count(),qutip,qutip,v5.0.4,,,,available_cpu_count,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,settings.py,python,_find_mkl(),function,,,,Function: _find_mkl(),qutip,qutip,v5.0.4,,,,_find_mkl,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,settings.py,python,__all__ = ['settings'],constant,__all__ = ['settings'],__all__,['settings'],Constant: __all__ = ['settings'],qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,settings.py,python,settings = Settings(),constant,settings = Settings(),settings,Settings(),Constant: settings = Settings(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,settings.py,python,os,import,,,,Import: os,qutip,qutip,v5.0.4,import os,,os,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,settings.py,python,sys,import,,,,Import: sys,qutip,qutip,v5.0.4,import sys,,sys,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,settings.py,python,cdll from ctypes,import,,,,Import: cdll from ctypes,qutip,qutip,v5.0.4,from ctypes import cdll,ctypes,cdll,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,settings.py,python,platform,import,,,,Import: platform,qutip,qutip,v5.0.4,import platform,,platform,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,settings.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
,settings.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,settings.py,python,,,,,,Directory: qutip\settings.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,simdiag.py,python,"_degen(tol, vecs, ops, i=0)",function,,,,"Function: _degen(tol, vecs, ops, i=0)",qutip,qutip,v5.0.4,,,,_degen,"(tol, vecs, ops, i=0)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,simdiag.py,python,"simdiag(ops, evals: bool = True, *,
            tol: float = 1e-14, safe_mode: bool = True)",function,,,,"Function: simdiag(ops, evals: bool = True, *,
            tol: float = 1e-14, safe_mode: bool = True)",qutip,qutip,v5.0.4,,,,simdiag,"(ops, evals: bool = True, *,
            tol: float = 1e-14, safe_mode: bool = True)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,simdiag.py,python,__all__ = ['simdiag'],constant,__all__ = ['simdiag'],__all__,['simdiag'],Constant: __all__ = ['simdiag'],qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,simdiag.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,simdiag.py,python,scipy.linalg,import,,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg as la,,scipy.linalg,,,,,,,,,,,,,,,
,simdiag.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,simdiag.py,python,,,,,,Directory: qutip\simdiag.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,testing.py,python,run(full=False),function,,,,Function: run(full=False),qutip,qutip,v5.0.4,,,,run,(full=False),,,,,,,,,,,,,
,testing.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,testing.py,python,,,,,,Directory: qutip\testing.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,tomography.py,python,_index_permutations(size_list),function,,,,Function: _index_permutations(size_list),qutip,qutip,v5.0.4,,,,_index_permutations,(size_list),,,,,,,,,,,,,
qutip_qutip_v5.0.4,tomography.py,python,"qpt_plot(chi, lbls_list, title=None, fig=None, axes=None)",function,,,,"Function: qpt_plot(chi, lbls_list, title=None, fig=None, axes=None)",qutip,qutip,v5.0.4,,,,qpt_plot,"(chi, lbls_list, title=None, fig=None, axes=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,tomography.py,python,"qpt_plot_combined(chi, lbls_list, title=None,
                      fig=None, ax=None, figsize=(8, 6),
                      threshold=None)",function,,,,"Function: qpt_plot_combined(chi, lbls_list, title=None,
                      fig=None, ax=None, figsize=(8, 6),
                      threshold=None)",qutip,qutip,v5.0.4,,,,qpt_plot_combined,"(chi, lbls_list, title=None,
                      fig=None, ax=None, figsize=(8, 6),
                      threshold=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,tomography.py,python,"qpt(U, op_basis_list)",function,,,,"Function: qpt(U, op_basis_list)",qutip,qutip,v5.0.4,,,,qpt,"(U, op_basis_list)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,tomography.py,python,"__all__ = ['qpt_plot', 'qpt_plot_combined', 'qpt']",constant,"__all__ = ['qpt_plot', 'qpt_plot_combined', 'qpt']",__all__,"['qpt_plot', 'qpt_plot_combined', 'qpt']","Constant: __all__ = ['qpt_plot', 'qpt_plot_combined', 'qpt']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,tomography.py,python,hstack from numpy,import,,,,Import: hstack from numpy,qutip,qutip,v5.0.4,"from numpy import hstack, real, imag",numpy,hstack,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,tomography.py,python,real from numpy,import,,,,Import: real from numpy,qutip,qutip,v5.0.4,"from numpy import hstack, real, imag",numpy,real,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,tomography.py,python,imag from numpy,import,,,,Import: imag from numpy,qutip,qutip,v5.0.4,"from numpy import hstack, real, imag",numpy,imag,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,tomography.py,python,scipy.linalg,import,,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg as la,,scipy.linalg,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,tomography.py,python,itertools,import,,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,,itertools,,,,,,,,,,,,,,,
,tomography.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,tomography.py,python,,,,,,Directory: qutip\tomography.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,"n_thermal(w, w_th)",function,,,,"Function: n_thermal(w, w_th)",qutip,qutip,v5.0.4,,,,n_thermal,"(w, w_th)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,"_factorial_prod(N, arr)",function,,,,"Function: _factorial_prod(N, arr)",qutip,qutip,v5.0.4,,,,_factorial_prod,"(N, arr)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,"_factorial_div(N, arr)",function,,,,"Function: _factorial_div(N, arr)",qutip,qutip,v5.0.4,,,,_factorial_div,"(N, arr)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,_to_long(arr),function,,,,Function: _to_long(arr),qutip,qutip,v5.0.4,,,,_to_long,(arr),,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,"clebsch(j1, j2, j3, m1, m2, m3)",function,,,,"Function: clebsch(j1, j2, j3, m1, m2, m3)",qutip,qutip,v5.0.4,,,,clebsch,"(j1, j2, j3, m1, m2, m3)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,"convert_unit(value, orig=""meV"", to=""GHz"")",function,,,,"Function: convert_unit(value, orig=""meV"", to=""GHz"")",qutip,qutip,v5.0.4,,,,convert_unit,"(value, orig=""meV"", to=""GHz"")",,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,convert_GHz_to_meV(w),function,,,,Function: convert_GHz_to_meV(w),qutip,qutip,v5.0.4,,,,convert_GHz_to_meV,(w),,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,convert_meV_to_GHz(w),function,,,,Function: convert_meV_to_GHz(w),qutip,qutip,v5.0.4,,,,convert_meV_to_GHz,(w),,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,convert_J_to_meV(w),function,,,,Function: convert_J_to_meV(w),qutip,qutip,v5.0.4,,,,convert_J_to_meV,(w),,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,convert_meV_to_J(w),function,,,,Function: convert_meV_to_J(w),qutip,qutip,v5.0.4,,,,convert_meV_to_J,(w),,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,convert_meV_to_mK(w),function,,,,Function: convert_meV_to_mK(w),qutip,qutip,v5.0.4,,,,convert_meV_to_mK,(w),,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,convert_mK_to_meV(w),function,,,,Function: convert_mK_to_meV(w),qutip,qutip,v5.0.4,,,,convert_mK_to_meV,(w),,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,convert_GHz_to_mK(w),function,,,,Function: convert_GHz_to_mK(w),qutip,qutip,v5.0.4,,,,convert_GHz_to_mK,(w),,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,convert_mK_to_GHz(w),function,,,,Function: convert_mK_to_GHz(w),qutip,qutip,v5.0.4,,,,convert_mK_to_GHz,(w),,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,_version2int(version_string),function,,,,Function: _version2int(version_string),qutip,qutip,v5.0.4,,,,_version2int,(version_string),,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,"__all__ = ['n_thermal', 'clebsch', 'convert_unit']",constant,"__all__ = ['n_thermal', 'clebsch', 'convert_unit']",__all__,"['n_thermal', 'clebsch', 'convert_unit']","Constant: __all__ = ['n_thermal', 'clebsch', 'convert_unit']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,_e = 1.602176565e-19,constant,_e = 1.602176565e-19,_e,1.602176565e-19,Constant: _e = 1.602176565e-19,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,_kB = 1.3806488e-23,constant,_kB = 1.3806488e-23,_kB,1.3806488e-23,Constant: _kB = 1.3806488e-23,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,_h = 6.62606957e-34,constant,_h = 6.62606957e-34,_h,6.62606957e-34,Constant: _h = 6.62606957e-34,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,"_unit_factor_tbl = {
    #   ""unit"": ""factor that convert argument from unit 'unit' to Joule""
    ""J"": 1.0,
    ""eV"": _e,
    ""meV"": 1.0e-3 * _e,
    ""GHz"": 1.0e9 * _h,
    ""mK"": 1.0e-3 * _kB,
}",constant,"_unit_factor_tbl = {
    #   ""unit"": ""factor that convert argument from unit 'unit' to Joule""
    ""J"": 1.0,
    ""eV"": _e,
    ""meV"": 1.0e-3 * _e,
    ""GHz"": 1.0e9 * _h,
    ""mK"": 1.0e-3 * _kB,
}",_unit_factor_tbl,"{
    #   ""unit"": ""factor that convert argument from unit 'unit' to Joule""
    ""J"": 1.0,
    ""eV"": _e,
    ""meV"": 1.0e-3 * _e,
    ""GHz"": 1.0e9 * _h,
    ""mK"": 1.0e-3 * _kB,
}","Constant: _unit_factor_tbl = {
    #   ""unit"": ""factor that convert argument from unit 'unit' to Joule""
    ""J"": 1.0,
    ""eV"": _e,
    ""meV"": 1.0e-3 * _e,
    ""GHz"": 1.0e9 * _h,
    ""mK"": 1.0e-3 * _kB,
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
,utilities.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,utilities.py,python,,,,,,Directory: qutip\utilities.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,_cyclic_cmap(),function,,,,Function: _cyclic_cmap(),qutip,qutip,v5.0.4,,,,_cyclic_cmap,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,_diverging_cmap(),function,,,,Function: _diverging_cmap(),qutip,qutip,v5.0.4,,,,_diverging_cmap,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,_sequential_cmap(),function,,,,Function: _sequential_cmap(),qutip,qutip,v5.0.4,,,,_sequential_cmap,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"_is_fig_and_ax(fig, ax, projection='2d')",function,,,,"Function: _is_fig_and_ax(fig, ax, projection='2d')",qutip,qutip,v5.0.4,,,,_is_fig_and_ax,"(fig, ax, projection='2d')",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"_set_ticklabels(ax, ticklabels, ticks, axis, fontsize=14)",function,,,,"Function: _set_ticklabels(ax, ticklabels, ticks, axis, fontsize=14)",qutip,qutip,v5.0.4,,,,_set_ticklabels,"(ax, ticklabels, ticks, axis, fontsize=14)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,_equal_shape(matrices),function,,,,Function: _equal_shape(matrices),qutip,qutip,v5.0.4,,,,_equal_shape,(matrices),,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"plot_wigner_sphere(wigner, reflections=False, *, cmap=None,
                       colorbar=True, fig=None, ax=None)",function,,,,"Function: plot_wigner_sphere(wigner, reflections=False, *, cmap=None,
                       colorbar=True, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,plot_wigner_sphere,"(wigner, reflections=False, *, cmap=None,
                       colorbar=True, fig=None, ax=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"_blob(x, y, w, w_max, area, color_fn, ax=None)",function,,,,"Function: _blob(x, y, w, w_max, area, color_fn, ax=None)",qutip,qutip,v5.0.4,,,,_blob,"(x, y, w, w_max, area, color_fn, ax=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,_cb_labels(left_dims),function,,,,Function: _cb_labels(left_dims),qutip,qutip,v5.0.4,,,,_cb_labels,(left_dims),,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"hinton(rho, x_basis=None, y_basis=None, color_style=""scaled"",
           label_top=True, *, cmap=None, colorbar=True, fig=None, ax=None)",function,,,,"Function: hinton(rho, x_basis=None, y_basis=None, color_style=""scaled"",
           label_top=True, *, cmap=None, colorbar=True, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,hinton,"(rho, x_basis=None, y_basis=None, color_style=""scaled"",
           label_top=True, *, cmap=None, colorbar=True, fig=None, ax=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"sphereplot(values, theta, phi, *,
               cmap=None, colorbar=True, fig=None, ax=None)",function,,,,"Function: sphereplot(values, theta, phi, *,
               cmap=None, colorbar=True, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,sphereplot,"(values, theta, phi, *,
               cmap=None, colorbar=True, fig=None, ax=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,_remove_margins(axis),function,,,,Function: _remove_margins(axis),qutip,qutip,v5.0.4,,,,_remove_margins,(axis),,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"_stick_to_planes(stick, azim, ax, M, spacing)",function,,,,"Function: _stick_to_planes(stick, azim, ax, M, spacing)",qutip,qutip,v5.0.4,,,,_stick_to_planes,"(stick, azim, ax, M, spacing)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"_update_yaxis(spacing, M, ax, ylabels)",function,,,,"Function: _update_yaxis(spacing, M, ax, ylabels)",qutip,qutip,v5.0.4,,,,_update_yaxis,"(spacing, M, ax, ylabels)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"_update_xaxis(spacing, M, ax, xlabels)",function,,,,"Function: _update_xaxis(spacing, M, ax, xlabels)",qutip,qutip,v5.0.4,,,,_update_xaxis,"(spacing, M, ax, xlabels)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"_update_zaxis(ax, z_min, z_max, zticks)",function,,,,"Function: _update_zaxis(ax, z_min, z_max, zticks)",qutip,qutip,v5.0.4,,,,_update_zaxis,"(ax, z_min, z_max, zticks)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"_get_matrix_components(option, M, argument)",function,,,,"Function: _get_matrix_components(option, M, argument)",qutip,qutip,v5.0.4,,,,_get_matrix_components,"(option, M, argument)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"sph2cart(r, theta, phi)",function,,,,"Function: sph2cart(r, theta, phi)",qutip,qutip,v5.0.4,,,,sph2cart,"(r, theta, phi)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,sphview(ax),function,,,,Function: sphview(ax),qutip,qutip,v5.0.4,,,,sphview,(ax),,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,get_camera_position(ax),function,,,,Function: get_camera_position(ax),qutip,qutip,v5.0.4,,,,get_camera_position,(ax),,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"matrix_histogram(
    M,
    x_basis=None,
    y_basis=None,
    limits=None,
    bar_style=""real"",
    color_limits=None,
    color_style=""real"",
    options=None,
    *,
    cmap=None,
    colorbar=True,
    fig=None,
    ax=None,
)",function,,,,"Function: matrix_histogram(
    M,
    x_basis=None,
    y_basis=None,
    limits=None,
    bar_style=""real"",
    color_limits=None,
    color_style=""real"",
    options=None,
    *,
    cmap=None,
    colorbar=True,
    fig=None,
    ax=None,
)",qutip,qutip,v5.0.4,,,,matrix_histogram,"(
    M,
    x_basis=None,
    y_basis=None,
    limits=None,
    bar_style=""real"",
    color_limits=None,
    color_style=""real"",
    options=None,
    *,
    cmap=None,
    colorbar=True,
    fig=None,
    ax=None,
)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"plot_energy_levels(H_list, h_labels=None, energy_levels=None, N=0, *,
                       fig=None, ax=None)",function,,,,"Function: plot_energy_levels(H_list, h_labels=None, energy_levels=None, N=0, *,
                       fig=None, ax=None)",qutip,qutip,v5.0.4,,,,plot_energy_levels,"(H_list, h_labels=None, energy_levels=None, N=0, *,
                       fig=None, ax=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"plot_fock_distribution(rho, fock_numbers=None, color=""green"",
                           unit_y_range=True, *, fig=None, ax=None)",function,,,,"Function: plot_fock_distribution(rho, fock_numbers=None, color=""green"",
                           unit_y_range=True, *, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,plot_fock_distribution,"(rho, fock_numbers=None, color=""green"",
                           unit_y_range=True, *, fig=None, ax=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"plot_wigner(rho, xvec=None, yvec=None, method='clenshaw', projection='2d',
                g=sqrt(2), sparse=False, parfor=False, *,
                cmap=None, colorbar=False, fig=None, ax=None)",function,,,,"Function: plot_wigner(rho, xvec=None, yvec=None, method='clenshaw', projection='2d',
                g=sqrt(2), sparse=False, parfor=False, *,
                cmap=None, colorbar=False, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,plot_wigner,"(rho, xvec=None, yvec=None, method='clenshaw', projection='2d',
                g=sqrt(2), sparse=False, parfor=False, *,
                cmap=None, colorbar=False, fig=None, ax=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"plot_expectation_values(results, ylabels=None, *,
                            fig=None, axes=None)",function,,,,"Function: plot_expectation_values(results, ylabels=None, *,
                            fig=None, axes=None)",qutip,qutip,v5.0.4,,,,plot_expectation_values,"(results, ylabels=None, *,
                            fig=None, axes=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"plot_spin_distribution(P, THETA, PHI, projection='2d', *,
                           cmap=None, colorbar=False, fig=None, ax=None)",function,,,,"Function: plot_spin_distribution(P, THETA, PHI, projection='2d', *,
                           cmap=None, colorbar=False, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,plot_spin_distribution,"(P, THETA, PHI, projection='2d', *,
                           cmap=None, colorbar=False, fig=None, ax=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"complex_array_to_rgb(X, theme='light', rmax=None)",function,,,,"Function: complex_array_to_rgb(X, theme='light', rmax=None)",qutip,qutip,v5.0.4,,,,complex_array_to_rgb,"(X, theme='light', rmax=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"_index_to_sequence(i, dim_list)",function,,,,"Function: _index_to_sequence(i, dim_list)",qutip,qutip,v5.0.4,,,,_index_to_sequence,"(i, dim_list)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"_sequence_to_index(seq, dim_list)",function,,,,"Function: _sequence_to_index(seq, dim_list)",qutip,qutip,v5.0.4,,,,_sequence_to_index,"(seq, dim_list)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"_to_qubism_index_pair(i, dim_list, how='pairs')",function,,,,"Function: _to_qubism_index_pair(i, dim_list, how='pairs')",qutip,qutip,v5.0.4,,,,_to_qubism_index_pair,"(i, dim_list, how='pairs')",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"_sequence_to_latex(seq, style='ket')",function,,,,"Function: _sequence_to_latex(seq, style='ket')",qutip,qutip,v5.0.4,,,,_sequence_to_latex,"(seq, style='ket')",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"plot_qubism(ket, theme='light', how='pairs', grid_iteration=1,
                legend_iteration=0, *, fig=None, ax=None)",function,,,,"Function: plot_qubism(ket, theme='light', how='pairs', grid_iteration=1,
                legend_iteration=0, *, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,plot_qubism,"(ket, theme='light', how='pairs', grid_iteration=1,
                legend_iteration=0, *, fig=None, ax=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"plot_schmidt(ket, theme='light', splitting=None,
                 labels_iteration=(3, 2), *, fig=None, ax=None)",function,,,,"Function: plot_schmidt(ket, theme='light', splitting=None,
                 labels_iteration=(3, 2), *, fig=None, ax=None)",qutip,qutip,v5.0.4,,,,plot_schmidt,"(ket, theme='light', splitting=None,
                 labels_iteration=(3, 2), *, fig=None, ax=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,"__all__ = ['plot_wigner_sphere', 'hinton', 'sphereplot',
           'matrix_histogram', 'plot_energy_levels', 'plot_fock_distribution',
           'plot_wigner', 'plot_expectation_values',
           'plot_spin_distribution', 'complex_array_to_rgb',
           'plot_qubism', 'plot_schmidt']",constant,"__all__ = ['plot_wigner_sphere', 'hinton', 'sphereplot',
           'matrix_histogram', 'plot_energy_levels', 'plot_fock_distribution',
           'plot_wigner', 'plot_expectation_values',
           'plot_spin_distribution', 'complex_array_to_rgb',
           'plot_qubism', 'plot_schmidt']",__all__,"['plot_wigner_sphere', 'hinton', 'sphereplot',
           'matrix_histogram', 'plot_energy_levels', 'plot_fock_distribution',
           'plot_wigner', 'plot_expectation_values',
           'plot_spin_distribution', 'complex_array_to_rgb',
           'plot_qubism', 'plot_schmidt']","Constant: __all__ = ['plot_wigner_sphere', 'hinton', 'sphereplot',
           'matrix_histogram', 'plot_energy_levels', 'plot_fock_distribution',
           'plot_wigner', 'plot_expectation_values',
           'plot_spin_distribution', 'complex_array_to_rgb',
           'plot_qubism', 'plot_schmidt']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,itertools,import,,,,Import: itertools,qutip,qutip,v5.0.4,import itertools as it,,itertools,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,pi from numpy,import,,,,Import: pi from numpy,qutip,qutip,v5.0.4,"from numpy import pi, array, sin, cos, angle, log2, sqrt",numpy,pi,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,array from numpy,import,,,,Import: array from numpy,qutip,qutip,v5.0.4,"from numpy import pi, array, sin, cos, angle, log2, sqrt",numpy,array,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,sin from numpy,import,,,,Import: sin from numpy,qutip,qutip,v5.0.4,"from numpy import pi, array, sin, cos, angle, log2, sqrt",numpy,sin,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,cos from numpy,import,,,,Import: cos from numpy,qutip,qutip,v5.0.4,"from numpy import pi, array, sin, cos, angle, log2, sqrt",numpy,cos,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,angle from numpy,import,,,,Import: angle from numpy,qutip,qutip,v5.0.4,"from numpy import pi, array, sin, cos, angle, log2, sqrt",numpy,angle,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,log2 from numpy,import,,,,Import: log2 from numpy,qutip,qutip,v5.0.4,"from numpy import pi, array, sin, cos, angle, log2, sqrt",numpy,log2,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,sqrt from numpy,import,,,,Import: sqrt from numpy,qutip,qutip,v5.0.4,"from numpy import pi, array, sin, cos, angle, log2, sqrt",numpy,sqrt,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,visualization.py,python,parse from packaging.version,local_import,,,,Import: parse from packaging.version,qutip,qutip,v5.0.4,from packaging.version import parse as parse_version,packaging.version,parse,,,packaging.version,,,,,,,,,,,,
,visualization.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,visualization.py,python,,,,,,Directory: qutip\visualization.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"[instance] _QFuncCoherentGrid.xvec, yvec = _qfunc_check_coordinates(xvec, yvec)",class_field,,,,"Class field: [instance] _QFuncCoherentGrid.xvec, yvec = _qfunc_check_coordinates(xvec, yvec)",qutip,qutip,v5.0.4,,,,,,,_QFuncCoherentGrid,__init__,"(self, xvec, yvec, g: float)","self.xvec, self.yvec = _qfunc_check_coordinates(xvec, yvec)","self.xvec, self.yvec = _qfunc_check_coordinates(xvec, yvec)",,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"[instance] _QFuncCoherentGrid.grid = np.empty(x.shape, dtype=np.complex128)",class_field,,,,"Class field: [instance] _QFuncCoherentGrid.grid = np.empty(x.shape, dtype=np.complex128)",qutip,qutip,v5.0.4,,,,,,,_QFuncCoherentGrid,__init__,"(self, xvec, yvec, g: float)","self.grid = np.empty(x.shape, dtype=np.complex128)","self.grid = np.empty(x.shape, dtype=np.complex128)",,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,[instance] _QFuncCoherentGrid.grid.real = x,class_field,,,,Class field: [instance] _QFuncCoherentGrid.grid.real = x,qutip,qutip,v5.0.4,,,,,,,_QFuncCoherentGrid,__init__,"(self, xvec, yvec, g: float)",self.grid.real = x,self.grid.real = x,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,[instance] _QFuncCoherentGrid.grid.imag = -y,class_field,,,,Class field: [instance] _QFuncCoherentGrid.grid.imag = -y,qutip,qutip,v5.0.4,,,,,,,_QFuncCoherentGrid,__init__,"(self, xvec, yvec, g: float)",self.grid.imag = -y,self.grid.imag = -y,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,[instance] _QFuncCoherentGrid.prefactor = np.exp(-0.5 * (x * x + y * y)).astype(np.complex128),class_field,,,,Class field: [instance] _QFuncCoherentGrid.prefactor = np.exp(-0.5 * (x * x + y * y)).astype(np.complex128),qutip,qutip,v5.0.4,,,,,,,_QFuncCoherentGrid,__init__,"(self, xvec, yvec, g: float)",self.prefactor = np.exp(-0.5 * (x * x + y * y)).astype(np.complex128),self.prefactor = np.exp(-0.5 * (x * x + y * y)).astype(np.complex128),,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,[instance] QFunc._g = g,class_field,,,,Class field: [instance] QFunc._g = g,qutip,qutip,v5.0.4,,,,,,,QFunc,__init__,"(
        self, xvec, yvec, g: float = np.sqrt(2), memory: float = 1024
    )",self._g = g,self._g = g,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"[instance] QFunc._coherent_grid = _QFuncCoherentGrid(xvec, yvec, g)",class_field,,,,"Class field: [instance] QFunc._coherent_grid = _QFuncCoherentGrid(xvec, yvec, g)",qutip,qutip,v5.0.4,,,,,,,QFunc,__init__,"(
        self, xvec, yvec, g: float = np.sqrt(2), memory: float = 1024
    )","self._coherent_grid = _QFuncCoherentGrid(xvec, yvec, g)","self._coherent_grid = _QFuncCoherentGrid(xvec, yvec, g)",,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,[instance] QFunc._size_mb = _coherent_grid.grid.size * 16 / (1024 ** 2),class_field,,,,Class field: [instance] QFunc._size_mb = _coherent_grid.grid.size * 16 / (1024 ** 2),qutip,qutip,v5.0.4,,,,,,,QFunc,__init__,"(
        self, xvec, yvec, g: float = np.sqrt(2), memory: float = 1024
    )",self._size_mb = self._coherent_grid.grid.size * 16 / (1024 ** 2),self._size_mb = self._coherent_grid.grid.size * 16 / (1024 ** 2),,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,[instance] QFunc._memory_mb = memory,class_field,,,,Class field: [instance] QFunc._memory_mb = memory,qutip,qutip,v5.0.4,,,,,,,QFunc,__init__,"(
        self, xvec, yvec, g: float = np.sqrt(2), memory: float = 1024
    )",self._memory_mb = memory,self._memory_mb = memory,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,[instance] QFunc._max_size = int(_memory_mb // _size_mb),class_field,,,,Class field: [instance] QFunc._max_size = int(_memory_mb // _size_mb),qutip,qutip,v5.0.4,,,,,,,QFunc,__init__,"(
        self, xvec, yvec, g: float = np.sqrt(2), memory: float = 1024
    )",self._max_size = int(self._memory_mb // self._size_mb),self._max_size = int(self._memory_mb // self._size_mb),,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,[instance] QFunc._current_size = 0,class_field,,,,Class field: [instance] QFunc._current_size = 0,qutip,qutip,v5.0.4,,,,,,,QFunc,__init__,"(
        self, xvec, yvec, g: float = np.sqrt(2), memory: float = 1024
    )",self._current_size = 0,self._current_size = 0,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,[instance] QFunc._cache = None,class_field,,,,Class field: [instance] QFunc._cache = None,qutip,qutip,v5.0.4,,,,,,,QFunc,__init__,"(
        self, xvec, yvec, g: float = np.sqrt(2), memory: float = 1024
    )",self._cache = None,self._cache = None,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"_QFuncCoherentGrid.__init__(self, xvec, yvec, g: float)",class_method,,,,"Class method: _QFuncCoherentGrid.__init__(self, xvec, yvec, g: float)",qutip,qutip,v5.0.4,,,,,,,_QFuncCoherentGrid,__init__,"(self, xvec, yvec, g: float)",,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"_QFuncCoherentGrid._start(self, first: int)",class_method,,,,"Class method: _QFuncCoherentGrid._start(self, first: int)",qutip,qutip,v5.0.4,,,,,,,_QFuncCoherentGrid,_start,"(self, first: int)",,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"_QFuncCoherentGrid.__call__(self, first: int, last: int = None)",class_method,,,,"Class method: _QFuncCoherentGrid.__call__(self, first: int, last: int = None)",qutip,qutip,v5.0.4,,,,,,,_QFuncCoherentGrid,__call__,"(self, first: int, last: int = None)",,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"QFunc.__init__(
        self, xvec, yvec, g: float = np.sqrt(2), memory: float = 1024
    )",class_method,,,,"Class method: QFunc.__init__(
        self, xvec, yvec, g: float = np.sqrt(2), memory: float = 1024
    )",qutip,qutip,v5.0.4,,,,,,,QFunc,__init__,"(
        self, xvec, yvec, g: float = np.sqrt(2), memory: float = 1024
    )",,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"QFunc._alphas(self, size: int)",class_method,,,,"Class method: QFunc._alphas(self, size: int)",qutip,qutip,v5.0.4,,,,,,,QFunc,_alphas,"(self, size: int)",,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"QFunc._single(self, vector: np.ndarray, alphas: np.ndarray)",class_method,,,,"Class method: QFunc._single(self, vector: np.ndarray, alphas: np.ndarray)",qutip,qutip,v5.0.4,,,,,,,QFunc,_single,"(self, vector: np.ndarray, alphas: np.ndarray)",,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"QFunc.__call__(self, state: Qobj)",class_method,,,,"Class method: QFunc.__call__(self, state: Qobj)",qutip,qutip,v5.0.4,,,,,,,QFunc,__call__,"(self, state: Qobj)",,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,_QFuncCoherentGrid,class,,,,Class: _QFuncCoherentGrid,qutip,qutip,v5.0.4,,,,,,,_QFuncCoherentGrid,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,QFunc,class,,,,Class: QFunc,qutip,qutip,v5.0.4,,,,,,,QFunc,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"wigner_transform(psi, j, fullparity, steps, slicearray)",function,,,,"Function: wigner_transform(psi, j, fullparity, steps, slicearray)",qutip,qutip,v5.0.4,,,,wigner_transform,"(psi, j, fullparity, steps, slicearray)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"_parity(N, j)",function,,,,"Function: _parity(N, j)",qutip,qutip,v5.0.4,,,,_parity,"(N, j)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,_lambda_f(N),function,,,,Function: _lambda_f(N),qutip,qutip,v5.0.4,,,,_lambda_f,(N),,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"_kernelsu2(theta, phi, N, j, parity, fullparity)",function,,,,"Function: _kernelsu2(theta, phi, N, j, parity, fullparity)",qutip,qutip,v5.0.4,,,,_kernelsu2,"(theta, phi, N, j, parity, fullparity)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"_rotation_matrix(theta, phi, j)",function,,,,"Function: _rotation_matrix(theta, phi, j)",qutip,qutip,v5.0.4,,,,_rotation_matrix,"(theta, phi, j)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"_angle_slice(slicearray, theta, phi)",function,,,,"Function: _angle_slice(slicearray, theta, phi)",qutip,qutip,v5.0.4,,,,_angle_slice,"(slicearray, theta, phi)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"wigner(psi, xvec, yvec=None, method='clenshaw', g=sqrt(2),
           sparse=False, parfor=False)",function,,,,"Function: wigner(psi, xvec, yvec=None, method='clenshaw', g=sqrt(2),
           sparse=False, parfor=False)",qutip,qutip,v5.0.4,,,,wigner,"(psi, xvec, yvec=None, method='clenshaw', g=sqrt(2),
           sparse=False, parfor=False)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"_wigner_iterative(rho, xvec, yvec, g=sqrt(2))",function,,,,"Function: _wigner_iterative(rho, xvec, yvec, g=sqrt(2))",qutip,qutip,v5.0.4,,,,_wigner_iterative,"(rho, xvec, yvec, g=sqrt(2))",,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"_wigner_laguerre(rho, xvec, yvec, g, parallel)",function,,,,"Function: _wigner_laguerre(rho, xvec, yvec, g, parallel)",qutip,qutip,v5.0.4,,,,_wigner_laguerre,"(rho, xvec, yvec, g, parallel)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,_par_wig_eval(args),function,,,,Function: _par_wig_eval(args),qutip,qutip,v5.0.4,,,,_par_wig_eval,(args),,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"_wigner_fourier(psi, xvec, g=np.sqrt(2))",function,,,,"Function: _wigner_fourier(psi, xvec, g=np.sqrt(2))",qutip,qutip,v5.0.4,,,,_wigner_fourier,"(psi, xvec, g=np.sqrt(2))",,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"_psi_wigner_fft(psi, xvec, g=sqrt(2))",function,,,,"Function: _psi_wigner_fft(psi, xvec, g=sqrt(2))",qutip,qutip,v5.0.4,,,,_psi_wigner_fft,"(psi, xvec, g=sqrt(2))",,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"_wigner_fft(psi, xvec)",function,,,,"Function: _wigner_fft(psi, xvec)",qutip,qutip,v5.0.4,,,,_wigner_fft,"(psi, xvec)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"_osc_eigen(N, pnts)",function,,,,"Function: _osc_eigen(N, pnts)",qutip,qutip,v5.0.4,,,,_osc_eigen,"(N, pnts)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"_wigner_clenshaw(rho, xvec, yvec, g=sqrt(2), sparse=False)",function,,,,"Function: _wigner_clenshaw(rho, xvec, yvec, g=sqrt(2), sparse=False)",qutip,qutip,v5.0.4,,,,_wigner_clenshaw,"(rho, xvec, yvec, g=sqrt(2), sparse=False)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"_wig_laguerre_val(L, x, c)",function,,,,"Function: _wig_laguerre_val(L, x, c)",qutip,qutip,v5.0.4,,,,_wig_laguerre_val,"(L, x, c)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,_qfunc_check_state(state: Qobj),function,,,,Function: _qfunc_check_state(state: Qobj),qutip,qutip,v5.0.4,,,,_qfunc_check_state,(state: Qobj),,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"_qfunc_check_coordinates(xvec, yvec)",function,,,,"Function: _qfunc_check_coordinates(xvec, yvec)",qutip,qutip,v5.0.4,,,,_qfunc_check_coordinates,"(xvec, yvec)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"_qfunc_iterative_single(
    vector: np.ndarray, alpha_grid: _QFuncCoherentGrid, g: float,
)",function,,,,"Function: _qfunc_iterative_single(
    vector: np.ndarray, alpha_grid: _QFuncCoherentGrid, g: float,
)",qutip,qutip,v5.0.4,,,,_qfunc_iterative_single,"(
    vector: np.ndarray, alpha_grid: _QFuncCoherentGrid, g: float,
)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"qfunc(
    state: Qobj,
    xvec,
    yvec,
    g: float = sqrt(2),
    precompute_memory: float = 1024,
)",function,,,,"Function: qfunc(
    state: Qobj,
    xvec,
    yvec,
    g: float = sqrt(2),
    precompute_memory: float = 1024,
)",qutip,qutip,v5.0.4,,,,qfunc,"(
    state: Qobj,
    xvec,
    yvec,
    g: float = sqrt(2),
    precompute_memory: float = 1024,
)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"spin_q_function(rho, theta, phi)",function,,,,"Function: spin_q_function(rho, theta, phi)",qutip,qutip,v5.0.4,,,,spin_q_function,"(rho, theta, phi)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"_rho_kq(rho, j, k, q)",function,,,,"Function: _rho_kq(rho, j, k, q)",qutip,qutip,v5.0.4,,,,_rho_kq,"(rho, j, k, q)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"spin_wigner(rho, theta, phi)",function,,,,"Function: spin_wigner(rho, theta, phi)",qutip,qutip,v5.0.4,,,,spin_wigner,"(rho, theta, phi)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,"__all__ = [
    'wigner', 'qfunc', 'QFunc', 'spin_q_function', 'spin_wigner',
    'wigner_transform',
]",constant,"__all__ = [
    'wigner', 'qfunc', 'QFunc', 'spin_q_function', 'spin_wigner',
    'wigner_transform',
]",__all__,"[
    'wigner', 'qfunc', 'QFunc', 'spin_q_function', 'spin_wigner',
    'wigner_transform',
]","Constant: __all__ = [
    'wigner', 'qfunc', 'QFunc', 'spin_q_function', 'spin_wigner',
    'wigner_transform',
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,warnings,import,,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,,warnings,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,zeros from numpy,import,,,,Import: zeros from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",numpy,zeros,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,array from numpy,import,,,,Import: array from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",numpy,array,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,arange from numpy,import,,,,Import: arange from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",numpy,arange,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,exp from numpy,import,,,,Import: exp from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",numpy,exp,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,real from numpy,import,,,,Import: real from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",numpy,real,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,conj from numpy,import,,,,Import: conj from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",numpy,conj,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,pi from numpy,import,,,,Import: pi from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",numpy,pi,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,copy from numpy,import,,,,Import: copy from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",numpy,copy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,sqrt from numpy,import,,,,Import: sqrt from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",numpy,sqrt,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,meshgrid from numpy,import,,,,Import: meshgrid from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",numpy,meshgrid,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,cos from numpy,import,,,,Import: cos from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",numpy,cos,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,sin from numpy,import,,,,Import: sin from numpy,qutip,qutip,v5.0.4,"from numpy import (
    zeros, array, arange, exp, real, conj, pi, copy, sqrt, meshgrid, cos, sin,
)",numpy,sin,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,scipy.sparse,import,,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,,scipy.sparse,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,scipy.fftpack,import,,,,Import: scipy.fftpack,qutip,qutip,v5.0.4,import scipy.fftpack as ft,,scipy.fftpack,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,scipy.linalg,import,,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg as la,,scipy.linalg,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,scipy.special,import,,,,Import: scipy.special,qutip,qutip,v5.0.4,import scipy.special,,scipy.special,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,Qobj from qutip,import,,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import Qobj, ket2dm, jmat",qutip,Qobj,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,ket2dm from qutip,import,,,,Import: ket2dm from qutip,qutip,qutip,v5.0.4,"from qutip import Qobj, ket2dm, jmat",qutip,ket2dm,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,jmat from qutip,import,,,,Import: jmat from qutip,qutip,qutip,v5.0.4,"from qutip import Qobj, ket2dm, jmat",qutip,jmat,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,genlaguerre from scipy.special,local_import,,,,Import: genlaguerre from scipy.special,qutip,qutip,v5.0.4,"from scipy.special import genlaguerre, binom, sph_harm, factorial",scipy.special,genlaguerre,,,scipy.special,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,binom from scipy.special,local_import,,,,Import: binom from scipy.special,qutip,qutip,v5.0.4,"from scipy.special import genlaguerre, binom, sph_harm, factorial",scipy.special,binom,,,scipy.special,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,sph_harm from scipy.special,local_import,,,,Import: sph_harm from scipy.special,qutip,qutip,v5.0.4,"from scipy.special import genlaguerre, binom, sph_harm, factorial",scipy.special,sph_harm,,,scipy.special,,,,,,,,,,,,
qutip_qutip_v5.0.4,wigner.py,python,factorial from scipy.special,local_import,,,,Import: factorial from scipy.special,qutip,qutip,v5.0.4,"from scipy.special import genlaguerre, binom, sph_harm, factorial",scipy.special,factorial,,,scipy.special,,,,,,,,,,,,
,wigner.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,wigner.py,python,,,,,,Directory: qutip\wigner.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,__init__.py,python,os,import,,,,Import: os,qutip,qutip,v5.0.4,import os,,os,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,__init__.py,python,warnings,import,,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,,warnings,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,__init__.py,python,qutip.settings,import,,,,Import: qutip.settings,qutip,qutip,v5.0.4,import qutip.settings,,qutip.settings,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,__init__.py,python,qutip.version,import,,,,Import: qutip.version,qutip,qutip,v5.0.4,import qutip.version,,qutip.version,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,__init__.py,python,qutip.piqs.piqs,import,,,,Import: qutip.piqs.piqs,qutip,qutip,v5.0.4,import qutip.piqs.piqs as piqs,,qutip.piqs.piqs,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,__init__.py,python,settings from qutip.settings,local_import,,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings,qutip.settings,settings,,,qutip.settings,,,,,,,,,,,,
qutip_qutip_v5.0.4,__init__.py,python,version from qutip.version,local_import,,,,Import: version from qutip.version,qutip,qutip,v5.0.4,from qutip.version import version as __version__,qutip.version,version,,,qutip.version,,,,,,,,,,,,
,__init__.py,python,,,,,,File: qutip,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: qutip\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,blochredfield.py,python,"bloch_redfield_tensor(H, a_ops, c_ops=[], sec_cutoff=0.1,
                          fock_basis=False, sparse_eigensolver=False,
                          br_dtype='sparse')",function,,,,"Function: bloch_redfield_tensor(H, a_ops, c_ops=[], sec_cutoff=0.1,
                          fock_basis=False, sparse_eigensolver=False,
                          br_dtype='sparse')",qutip,qutip,v5.0.4,,,,bloch_redfield_tensor,"(H, a_ops, c_ops=[], sec_cutoff=0.1,
                          fock_basis=False, sparse_eigensolver=False,
                          br_dtype='sparse')",,,,,,,,,,,,,
qutip_qutip_v5.0.4,blochredfield.py,python,"brterm(H, a_op, spectra, sec_cutoff=0.1,
           fock_basis=False, sparse_eigensolver=False, br_dtype='sparse')",function,,,,"Function: brterm(H, a_op, spectra, sec_cutoff=0.1,
           fock_basis=False, sparse_eigensolver=False, br_dtype='sparse')",qutip,qutip,v5.0.4,,,,brterm,"(H, a_op, spectra, sec_cutoff=0.1,
           fock_basis=False, sparse_eigensolver=False, br_dtype='sparse')",,,,,,,,,,,,,
qutip_qutip_v5.0.4,blochredfield.py,python,"__all__ = ['bloch_redfield_tensor', 'brterm']",constant,"__all__ = ['bloch_redfield_tensor', 'brterm']",__all__,"['bloch_redfield_tensor', 'brterm']","Constant: __all__ = ['bloch_redfield_tensor', 'brterm']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,blochredfield.py,python,os,import,,,,Import: os,qutip,qutip,v5.0.4,import os,,os,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,blochredfield.py,python,inspect,import,,,,Import: inspect,qutip,qutip,v5.0.4,import inspect,,inspect,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,blochredfield.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,blochredfield.py,python,settings from qutip.settings,local_import,,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings as qset,qutip.settings,settings,,,qutip.settings,,,,,,,,,,,,
,blochredfield.py,python,,,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,blochredfield.py,python,,,,,,Directory: qutip\core\blochredfield.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,"CompilationOptions._link_flags = """"",class_field,,,,"Class field: CompilationOptions._link_flags = """"",qutip,qutip,v5.0.4,,,,,,,CompilationOptions,,,"_link_flags = """"",,,,,_link_flags,,"""""",
qutip_qutip_v5.0.4,coefficient.py,python,"CompilationOptions._compiler_flags = """"",class_field,,,,"Class field: CompilationOptions._compiler_flags = """"",qutip,qutip,v5.0.4,,,,,,,CompilationOptions,,,"_compiler_flags = """"",,,,,_compiler_flags,,"""""",
qutip_qutip_v5.0.4,coefficient.py,python,"CompilationOptions._options = {
        ""use_cython"": _use_cython,
        ""try_parse"": True,
        ""static_types"": True,
        ""accept_int"": None,
        ""accept_float"": True,
        ""recompile"": False,
        ""compiler_flags"": _compiler_flags,
        ""link_flags"": _link_flags,
        ""extra_import"": """",
        ""clean_on_error"": True,
        ""build_dir"": None,
    }",class_field,,,,"Class field: CompilationOptions._options = {
        ""use_cython"": _use_cython,
        ""try_parse"": True,
        ""static_types"": True,
        ""accept_int"": None,
        ""accept_float"": True,
        ""recompile"": False,
        ""compiler_flags"": _compiler_flags,
        ""link_flags"": _link_flags,
        ""extra_import"": """",
        ""clean_on_error"": True,
        ""build_dir"": None,
    }",qutip,qutip,v5.0.4,,,,,,,CompilationOptions,,,"_options = {
        ""use_cython"": _use_cython,
        ""try_parse"": True,
        ""static_types"": True,
        ""accept_int"": None,
        ""accept_float"": True,
        ""recompile"": False,
        ""compiler_flags"": _compiler_flags,
        ""link_flags"": _link_flags,
        ""extra_import"": """",
        ""clean_on_error"": True,
        ""build_dir"": None,
    }",,,,,_options,,"{
        ""use_cython"": _use_cython,
        ""try_parse"": True,
        ""static_types"": True,
        ""accept_int"": None,
        ""accept_float"": True,
        ""recompile"": False,
        ""compiler_flags"": _compiler_flags,
        ""link_flags"": _link_flags,
        ""extra_import"": """",
        ""clean_on_error"": True,
        ""build_dir"": None,
    }",
qutip_qutip_v5.0.4,coefficient.py,python,"CompilationOptions._settings_name = ""compile""",class_field,,,,"Class field: CompilationOptions._settings_name = ""compile""",qutip,qutip,v5.0.4,,,,,,,CompilationOptions,,,"_settings_name = ""compile""",,,,,_settings_name,,"""compile""",
qutip_qutip_v5.0.4,coefficient.py,python,StringParsingWarning(Warning),class,,,,Class: StringParsingWarning(Warning),qutip,qutip,v5.0.4,,,,,,,StringParsingWarning,,,,,,,,,(Warning),,
qutip_qutip_v5.0.4,coefficient.py,python,CompilationOptions(QutipOptions),class,,,,Class: CompilationOptions(QutipOptions),qutip,qutip,v5.0.4,,,,,,,CompilationOptions,,,,,,,,,(QutipOptions),,
qutip_qutip_v5.0.4,coefficient.py,python,DummySelf,class,,,,Class: DummySelf,qutip,qutip,v5.0.4,,,,,,,DummySelf,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,"_return(base, **kwargs)",function,,,,"Function: _return(base, **kwargs)",qutip,qutip,v5.0.4,,,,_return,"(base, **kwargs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,"coefficient(base, *, tlist=None, args={}, args_ctypes={},
                order=3, compile_opt=None, function_style=None,
                boundary_conditions=None, **kwargs)",function,,,,"Function: coefficient(base, *, tlist=None, args={}, args_ctypes={},
                order=3, compile_opt=None, function_style=None,
                boundary_conditions=None, **kwargs)",qutip,qutip,v5.0.4,,,,coefficient,"(base, *, tlist=None, args={}, args_ctypes={},
                order=3, compile_opt=None, function_style=None,
                boundary_conditions=None, **kwargs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,norm(coeff),function,,,,Function: norm(coeff),qutip,qutip,v5.0.4,,,,norm,(coeff),,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,conj(coeff),function,,,,Function: conj(coeff),qutip,qutip,v5.0.4,,,,conj,(coeff),,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,const(value),function,,,,Function: const(value),qutip,qutip,v5.0.4,,,,const,(value),,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,clean_compiled_coefficient(all=False),function,,,,Function: clean_compiled_coefficient(all=False),qutip,qutip,v5.0.4,,,,clean_compiled_coefficient,(all=False),,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,proj(x),function,,,,Function: proj(x),qutip,qutip,v5.0.4,,,,proj,(x),,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,"coeff_from_str(base, args, args_ctypes, compile_opt=None, **_)",function,,,,"Function: coeff_from_str(base, args, args_ctypes, compile_opt=None, **_)",qutip,qutip,v5.0.4,,,,coeff_from_str,"(base, args, args_ctypes, compile_opt=None, **_)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,"try_import(file_name, parsed_in)",function,,,,"Function: try_import(file_name, parsed_in)",qutip,qutip,v5.0.4,,,,try_import,"(file_name, parsed_in)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,"make_cy_code(code, variables, constants, raw, compile_opt)",function,,,,"Function: make_cy_code(code, variables, constants, raw, compile_opt)",qutip,qutip,v5.0.4,,,,make_cy_code,"(code, variables, constants, raw, compile_opt)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,"compile_code(code, file_name, parsed, c_opt)",function,,,,"Function: compile_code(code, file_name, parsed, c_opt)",qutip,qutip,v5.0.4,,,,compile_code,"(code, file_name, parsed, c_opt)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,fromstr(base),function,,,,Function: fromstr(base),qutip,qutip,v5.0.4,,,,fromstr,(base),,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,compileType(value),function,,,,Function: compileType(value),qutip,qutip,v5.0.4,,,,compileType,(value),,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,find_type_from_str(chars),function,,,,Function: find_type_from_str(chars),qutip,qutip,v5.0.4,,,,find_type_from_str,(chars),,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,"fix_type(ctype, accept_int, accept_float)",function,,,,"Function: fix_type(ctype, accept_int, accept_float)",qutip,qutip,v5.0.4,,,,fix_type,"(ctype, accept_int, accept_float)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,extract_constant(code),function,,,,Function: extract_constant(code),qutip,qutip,v5.0.4,,,,extract_constant,(code),,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,"extract_cte_pattern(code, constants, pattern)",function,,,,"Function: extract_cte_pattern(code, constants, pattern)",qutip,qutip,v5.0.4,,,,extract_cte_pattern,"(code, constants, pattern)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,"space_parts(code, names)",function,,,,"Function: space_parts(code, names)",qutip,qutip,v5.0.4,,,,space_parts,"(code, names)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,"parse(code, args, compile_opt)",function,,,,"Function: parse(code, args, compile_opt)",qutip,qutip,v5.0.4,,,,parse,"(code, args, compile_opt)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,"use_hinted_type(variables, code, args_ctypes)",function,,,,"Function: use_hinted_type(variables, code, args_ctypes)",qutip,qutip,v5.0.4,,,,use_hinted_type,"(variables, code, args_ctypes)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,"try_parse(code, args, args_ctypes, compile_opt)",function,,,,"Function: try_parse(code, args, args_ctypes, compile_opt)",qutip,qutip,v5.0.4,,,,try_parse,"(code, args, args_ctypes, compile_opt)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,"test_parsed(code, variables, constants, args)",function,,,,"Function: test_parsed(code, variables, constants, args)",qutip,qutip,v5.0.4,,,,test_parsed,"(code, variables, constants, args)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,"__all__ = [""coefficient"", ""CompilationOptions"", ""Coefficient"",
           ""clean_compiled_coefficient""]",constant,"__all__ = [""coefficient"", ""CompilationOptions"", ""Coefficient"",
           ""clean_compiled_coefficient""]",__all__,"[""coefficient"", ""CompilationOptions"", ""Coefficient"",
           ""clean_compiled_coefficient""]","Constant: __all__ = [""coefficient"", ""CompilationOptions"", ""Coefficient"",
           ""clean_compiled_coefficient""]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,"coefficient_builders = {
    Coefficient: _return,
    np.ndarray: InterCoefficient,
    scipy.interpolate.PPoly: InterCoefficient.from_PPoly,
    scipy.interpolate.BSpline: InterCoefficient.from_Bspline,
}",constant,"coefficient_builders = {
    Coefficient: _return,
    np.ndarray: InterCoefficient,
    scipy.interpolate.PPoly: InterCoefficient.from_PPoly,
    scipy.interpolate.BSpline: InterCoefficient.from_Bspline,
}",coefficient_builders,"{
    Coefficient: _return,
    np.ndarray: InterCoefficient,
    scipy.interpolate.PPoly: InterCoefficient.from_PPoly,
    scipy.interpolate.BSpline: InterCoefficient.from_Bspline,
}","Constant: coefficient_builders = {
    Coefficient: _return,
    np.ndarray: InterCoefficient,
    scipy.interpolate.PPoly: InterCoefficient.from_PPoly,
    scipy.interpolate.BSpline: InterCoefficient.from_Bspline,
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,WARN_MISSING_MODULE = [0],constant,WARN_MISSING_MODULE = [0],WARN_MISSING_MODULE,[0],Constant: WARN_MISSING_MODULE = [0],qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,"COEFF_VERSION = ""1.1""",constant,"COEFF_VERSION = ""1.1""",COEFF_VERSION,"""1.1""","Constant: COEFF_VERSION = ""1.1""",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,"str_env = {
    ""sin"": np.sin,
    ""cos"": np.cos,
    ""tan"": np.tan,
    ""asin"": np.arcsin,
    ""acos"": np.arccos,
    ""atan"": np.arctan,
    ""pi"": np.pi,
    ""sinh"": np.sinh,
    ""cosh"": np.cosh,
    ""tanh"": np.tanh,
    ""asinh"": np.arcsinh,
    ""acosh"": np.arccosh,
    ""atanh"": np.arctanh,
    ""exp"": np.exp,
    ""log"": np.log,
    ""log10"": np.log10,
    ""erf"": scipy.special.erf,
    ""zerf"": scipy.special.erf,
    ""sqrt"": np.sqrt,
    ""real"": np.real,
    ""imag"": np.imag,
    ""conj"": np.conj,
    ""abs"": np.abs,
    ""norm"": lambda x: np.abs(x)**2,
    ""arg"": np.angle,
    ""proj"": proj,
    ""np"": np,
    ""spe"": scipy.special}",constant,"str_env = {
    ""sin"": np.sin,
    ""cos"": np.cos,
    ""tan"": np.tan,
    ""asin"": np.arcsin,
    ""acos"": np.arccos,
    ""atan"": np.arctan,
    ""pi"": np.pi,
    ""sinh"": np.sinh,
    ""cosh"": np.cosh,
    ""tanh"": np.tanh,
    ""asinh"": np.arcsinh,
    ""acosh"": np.arccosh,
    ""atanh"": np.arctanh,
    ""exp"": np.exp,
    ""log"": np.log,
    ""log10"": np.log10,
    ""erf"": scipy.special.erf,
    ""zerf"": scipy.special.erf,
    ""sqrt"": np.sqrt,
    ""real"": np.real,
    ""imag"": np.imag,
    ""conj"": np.conj,
    ""abs"": np.abs,
    ""norm"": lambda x: np.abs(x)**2,
    ""arg"": np.angle,
    ""proj"": proj,
    ""np"": np,
    ""spe"": scipy.special}",str_env,"{
    ""sin"": np.sin,
    ""cos"": np.cos,
    ""tan"": np.tan,
    ""asin"": np.arcsin,
    ""acos"": np.arccos,
    ""atan"": np.arctan,
    ""pi"": np.pi,
    ""sinh"": np.sinh,
    ""cosh"": np.cosh,
    ""tanh"": np.tanh,
    ""asinh"": np.arcsinh,
    ""acosh"": np.arccosh,
    ""atanh"": np.arctanh,
    ""exp"": np.exp,
    ""log"": np.log,
    ""log10"": np.log10,
    ""erf"": scipy.special.erf,
    ""zerf"": scipy.special.erf,
    ""sqrt"": np.sqrt,
    ""real"": np.real,
    ""imag"": np.imag,
    ""conj"": np.conj,
    ""abs"": np.abs,
    ""norm"": lambda x: np.abs(x)**2,
    ""arg"": np.angle,
    ""proj"": proj,
    ""np"": np,
    ""spe"": scipy.special}","Constant: str_env = {
    ""sin"": np.sin,
    ""cos"": np.cos,
    ""tan"": np.tan,
    ""asin"": np.arcsin,
    ""acos"": np.arccos,
    ""atan"": np.arctan,
    ""pi"": np.pi,
    ""sinh"": np.sinh,
    ""cosh"": np.cosh,
    ""tanh"": np.tanh,
    ""asinh"": np.arcsinh,
    ""acosh"": np.arccosh,
    ""atanh"": np.arctanh,
    ""exp"": np.exp,
    ""log"": np.log,
    ""log10"": np.log10,
    ""erf"": scipy.special.erf,
    ""zerf"": scipy.special.erf,
    ""sqrt"": np.sqrt,
    ""real"": np.real,
    ""imag"": np.imag,
    ""conj"": np.conj,
    ""abs"": np.abs,
    ""norm"": lambda x: np.abs(x)**2,
    ""arg"": np.angle,
    ""proj"": proj,
    ""np"": np,
    ""spe"": scipy.special}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,"typeCodes = {
    ""Data"": ""_datalayer"",
    ""complex"": ""_cpl"",
    ""double"": ""_dbl"",
    ""int"": ""_int"",
    ""str"": ""_str"",
    ""object"": ""_obj""
}",constant,"typeCodes = {
    ""Data"": ""_datalayer"",
    ""complex"": ""_cpl"",
    ""double"": ""_dbl"",
    ""int"": ""_int"",
    ""str"": ""_str"",
    ""object"": ""_obj""
}",typeCodes,"{
    ""Data"": ""_datalayer"",
    ""complex"": ""_cpl"",
    ""double"": ""_dbl"",
    ""int"": ""_int"",
    ""str"": ""_str"",
    ""object"": ""_obj""
}","Constant: typeCodes = {
    ""Data"": ""_datalayer"",
    ""complex"": ""_cpl"",
    ""double"": ""_dbl"",
    ""int"": ""_int"",
    ""str"": ""_str"",
    ""object"": ""_obj""
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,scipy,import,,,,Import: scipy,qutip,qutip,v5.0.4,import scipy,,scipy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,scipy.interpolate,import,,,,Import: scipy.interpolate,qutip,qutip,v5.0.4,import scipy.interpolate,,scipy.interpolate,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,os,import,,,,Import: os,qutip,qutip,v5.0.4,import os,,os,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,sys,import,,,,Import: sys,qutip,qutip,v5.0.4,import sys,,sys,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,re,import,,,,Import: re,qutip,qutip,v5.0.4,import re,,re,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,dis,import,,,,Import: dis,qutip,qutip,v5.0.4,import dis,,dis,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,hashlib,import,,,,Import: hashlib,qutip,qutip,v5.0.4,import hashlib,,hashlib,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,glob,import,,,,Import: glob,qutip,qutip,v5.0.4,import glob,,glob,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,importlib,import,,,,Import: importlib,qutip,qutip,v5.0.4,import importlib,,importlib,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,warnings,import,,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,,warnings,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,numbers,import,,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,,numbers,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,coefficient.py,python,defaultdict from collections,import,,,,Import: defaultdict from collections,qutip,qutip,v5.0.4,from collections import defaultdict,collections,defaultdict,,,,,,,,,,,,,,,
,coefficient.py,python,,,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,coefficient.py,python,,,,,,Directory: qutip\core\coefficient.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Space._stored_dims = {},class_field,,,,Class field: Space._stored_dims = {},qutip,qutip,v5.0.4,,,,,,,Space,,,_stored_dims = {},,,,,_stored_dims,,{},
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Space.size = dims,class_field,,,,Class field: [instance] Space.size = dims,qutip,qutip,v5.0.4,,,,,,,Space,__init__,"(self, dims)",self.size = dims,self.size = dims,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Space.issuper = False,class_field,,,,Class field: [instance] Space.issuper = False,qutip,qutip,v5.0.4,,,,,,,Space,__init__,"(self, dims)",self.issuper = False,self.issuper = False,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Space.superrep = None,class_field,,,,Class field: [instance] Space.superrep = None,qutip,qutip,v5.0.4,,,,,,,Space,__init__,"(self, dims)",self.superrep = None,self.superrep = None,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Space._pure_dims = True,class_field,,,,Class field: [instance] Space._pure_dims = True,qutip,qutip,v5.0.4,,,,,,,Space,__init__,"(self, dims)",self._pure_dims = True,self._pure_dims = True,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Space.__setitem__ = _frozen,class_field,,,,Class field: [instance] Space.__setitem__ = _frozen,qutip,qutip,v5.0.4,,,,,,,Space,__init__,"(self, dims)",self.__setitem__ = _frozen,self.__setitem__ = _frozen,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Field.field_instance = None,class_field,,,,Class field: Field.field_instance = None,qutip,qutip,v5.0.4,,,,,,,Field,,,field_instance = None,,,,,field_instance,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Field.size = 1,class_field,,,,Class field: [instance] Field.size = 1,qutip,qutip,v5.0.4,,,,,,,Field,__init__,(self),self.size = 1,self.size = 1,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Field.issuper = False,class_field,,,,Class field: [instance] Field.issuper = False,qutip,qutip,v5.0.4,,,,,,,Field,__init__,(self),self.issuper = False,self.issuper = False,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Field.superrep = None,class_field,,,,Class field: [instance] Field.superrep = None,qutip,qutip,v5.0.4,,,,,,,Field,__init__,(self),self.superrep = None,self.superrep = None,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Field._pure_dims = True,class_field,,,,Class field: [instance] Field._pure_dims = True,qutip,qutip,v5.0.4,,,,,,,Field,__init__,(self),self._pure_dims = True,self._pure_dims = True,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Field.__setitem__ = _frozen,class_field,,,,Class field: [instance] Field.__setitem__ = _frozen,qutip,qutip,v5.0.4,,,,,,,Field,__init__,(self),self.__setitem__ = _frozen,self.__setitem__ = _frozen,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Compound._stored_dims = {},class_field,,,,Class field: Compound._stored_dims = {},qutip,qutip,v5.0.4,,,,,,,Compound,,,_stored_dims = {},,,,,_stored_dims,,{},
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Compound.spaces = [],class_field,,,,Class field: [instance] Compound.spaces = [],qutip,qutip,v5.0.4,,,,,,,Compound,__init__,"(self, *spaces)",self.spaces = [],self.spaces = [],,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Compound.spaces = tuple(spaces),class_field,,,,Class field: [instance] Compound.spaces = tuple(spaces),qutip,qutip,v5.0.4,,,,,,,Compound,__init__,"(self, *spaces)",self.spaces = tuple(self.spaces),self.spaces = tuple(self.spaces),,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Compound.size = np.prod([space.size for space in spaces]),class_field,,,,Class field: [instance] Compound.size = np.prod([space.size for space in spaces]),qutip,qutip,v5.0.4,,,,,,,Compound,__init__,"(self, *spaces)",self.size = np.prod([space.size for space in self.spaces]),self.size = np.prod([space.size for space in self.spaces]),,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Compound.issuper = all(space.issuper for space in spaces),class_field,,,,Class field: [instance] Compound.issuper = all(space.issuper for space in spaces),qutip,qutip,v5.0.4,,,,,,,Compound,__init__,"(self, *spaces)",self.issuper = all(space.issuper for space in self.spaces),self.issuper = all(space.issuper for space in self.spaces),,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Compound._pure_dims = all(space._pure_dims for space in spaces),class_field,,,,Class field: [instance] Compound._pure_dims = all(space._pure_dims for space in spaces),qutip,qutip,v5.0.4,,,,,,,Compound,__init__,"(self, *spaces)",self._pure_dims = all(space._pure_dims for space in self.spaces),self._pure_dims = all(space._pure_dims for space in self.spaces),,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Compound.__setitem__ = _frozen,class_field,,,,Class field: [instance] Compound.__setitem__ = _frozen,qutip,qutip,v5.0.4,,,,,,,Compound,__init__,"(self, *spaces)",self.__setitem__ = _frozen,self.__setitem__ = _frozen,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,SuperSpace._stored_dims = {},class_field,,,,Class field: SuperSpace._stored_dims = {},qutip,qutip,v5.0.4,,,,,,,SuperSpace,,,_stored_dims = {},,,,,_stored_dims,,{},
qutip_qutip_v5.0.4,dimensions.py,python,[instance] SuperSpace.oper = oper,class_field,,,,Class field: [instance] SuperSpace.oper = oper,qutip,qutip,v5.0.4,,,,,,,SuperSpace,__init__,"(self, oper, rep='super')",self.oper = oper,self.oper = oper,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] SuperSpace.superrep = rep,class_field,,,,Class field: [instance] SuperSpace.superrep = rep,qutip,qutip,v5.0.4,,,,,,,SuperSpace,__init__,"(self, oper, rep='super')",self.superrep = rep,self.superrep = rep,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] SuperSpace.size = oper.shape[0] * oper.shape[1],class_field,,,,Class field: [instance] SuperSpace.size = oper.shape[0] * oper.shape[1],qutip,qutip,v5.0.4,,,,,,,SuperSpace,__init__,"(self, oper, rep='super')",self.size = oper.shape[0] * oper.shape[1],self.size = oper.shape[0] * oper.shape[1],,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] SuperSpace.issuper = True,class_field,,,,Class field: [instance] SuperSpace.issuper = True,qutip,qutip,v5.0.4,,,,,,,SuperSpace,__init__,"(self, oper, rep='super')",self.issuper = True,self.issuper = True,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] SuperSpace._pure_dims = oper._pure_dims,class_field,,,,Class field: [instance] SuperSpace._pure_dims = oper._pure_dims,qutip,qutip,v5.0.4,,,,,,,SuperSpace,__init__,"(self, oper, rep='super')",self._pure_dims = oper._pure_dims,self._pure_dims = oper._pure_dims,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] SuperSpace.__setitem__ = _frozen,class_field,,,,Class field: [instance] SuperSpace.__setitem__ = _frozen,qutip,qutip,v5.0.4,,,,,,,SuperSpace,__init__,"(self, oper, rep='super')",self.__setitem__ = _frozen,self.__setitem__ = _frozen,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Dimensions._stored_dims = {},class_field,,,,Class field: Dimensions._stored_dims = {},qutip,qutip,v5.0.4,,,,,,,Dimensions,,,_stored_dims = {},,,,,_stored_dims,,{},
qutip_qutip_v5.0.4,dimensions.py,python,Dimensions._type = None,class_field,,,,Class field: Dimensions._type = None,qutip,qutip,v5.0.4,,,,,,,Dimensions,,,_type = None,,,,,_type,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Dimensions.from_ = from_,class_field,,,,Class field: [instance] Dimensions.from_ = from_,qutip,qutip,v5.0.4,,,,,,,Dimensions,__init__,"(self, from_, to_)",self.from_ = from_,self.from_ = from_,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Dimensions.to_ = to_,class_field,,,,Class field: [instance] Dimensions.to_ = to_,qutip,qutip,v5.0.4,,,,,,,Dimensions,__init__,"(self, from_, to_)",self.to_ = to_,self.to_ = to_,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"[instance] Dimensions.shape = to_.size, from_.size",class_field,,,,"Class field: [instance] Dimensions.shape = to_.size, from_.size",qutip,qutip,v5.0.4,,,,,,,Dimensions,__init__,"(self, from_, to_)","self.shape = to_.size, from_.size","self.shape = to_.size, from_.size",,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Dimensions.issuper = from_.issuper,class_field,,,,Class field: [instance] Dimensions.issuper = from_.issuper,qutip,qutip,v5.0.4,,,,,,,Dimensions,__init__,"(self, from_, to_)",self.issuper = from_.issuper,self.issuper = from_.issuper,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Dimensions._pure_dims = from_._pure_dims and to_._pure_dims,class_field,,,,Class field: [instance] Dimensions._pure_dims = from_._pure_dims and to_._pure_dims,qutip,qutip,v5.0.4,,,,,,,Dimensions,__init__,"(self, from_, to_)",self._pure_dims = from_._pure_dims and to_._pure_dims,self._pure_dims = from_._pure_dims and to_._pure_dims,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Dimensions.issquare = False,class_field,,,,Class field: [instance] Dimensions.issquare = False,qutip,qutip,v5.0.4,,,,,,,Dimensions,__init__,"(self, from_, to_)",self.issquare = False,self.issquare = False,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,[instance] Dimensions.__setitem__ = _frozen,class_field,,,,Class field: [instance] Dimensions.__setitem__ = _frozen,qutip,qutip,v5.0.4,,,,,,,Dimensions,__init__,"(self, from_, to_)",self.__setitem__ = _frozen,self.__setitem__ = _frozen,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"MetaSpace.__call__(cls, *args, rep=None)",class_method,,,,"Class method: MetaSpace.__call__(cls, *args, rep=None)",qutip,qutip,v5.0.4,,,,,,,MetaSpace,__call__,"(cls, *args, rep=None)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"MetaSpace.from_list(cls, list_dims, rep=None)",class_method,,,,"Class method: MetaSpace.from_list(cls, list_dims, rep=None)",qutip,qutip,v5.0.4,,,,,,,MetaSpace,from_list,"(cls, list_dims, rep=None)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Space.__init__(self, dims)",class_method,,,,"Class method: Space.__init__(self, dims)",qutip,qutip,v5.0.4,,,,,,,Space,__init__,"(self, dims)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Space.__eq__(self, other)",class_method,,,,"Class method: Space.__eq__(self, other)",qutip,qutip,v5.0.4,,,,,,,Space,__eq__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Space.__hash__(self),class_method,,,,Class method: Space.__hash__(self),qutip,qutip,v5.0.4,,,,,,,Space,__hash__,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Space.__repr__(self),class_method,,,,Class method: Space.__repr__(self),qutip,qutip,v5.0.4,,,,,,,Space,__repr__,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Space.as_list(self),class_method,,,,Class method: Space.as_list(self),qutip,qutip,v5.0.4,,,,,,,Space,as_list,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Space.__str__(self),class_method,,,,Class method: Space.__str__(self),qutip,qutip,v5.0.4,,,,,,,Space,__str__,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Space.dims2idx(self, dims)",class_method,,,,"Class method: Space.dims2idx(self, dims)",qutip,qutip,v5.0.4,,,,,,,Space,dims2idx,"(self, dims)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Space.idx2dims(self, idx)",class_method,,,,"Class method: Space.idx2dims(self, idx)",qutip,qutip,v5.0.4,,,,,,,Space,idx2dims,"(self, idx)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Space.step(self),class_method,,,,Class method: Space.step(self),qutip,qutip,v5.0.4,,,,,,,Space,step,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Space.flat(self),class_method,,,,Class method: Space.flat(self),qutip,qutip,v5.0.4,,,,,,,Space,flat,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Space.remove(self, idx)",class_method,,,,"Class method: Space.remove(self, idx)",qutip,qutip,v5.0.4,,,,,,,Space,remove,"(self, idx)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Space.replace(self, idx, new)",class_method,,,,"Class method: Space.replace(self, idx, new)",qutip,qutip,v5.0.4,,,,,,,Space,replace,"(self, idx, new)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Space.replace_superrep(self, super_rep)",class_method,,,,"Class method: Space.replace_superrep(self, super_rep)",qutip,qutip,v5.0.4,,,,,,,Space,replace_superrep,"(self, super_rep)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Space.scalar_like(self),class_method,,,,Class method: Space.scalar_like(self),qutip,qutip,v5.0.4,,,,,,,Space,scalar_like,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Field.__init__(self),class_method,,,,Class method: Field.__init__(self),qutip,qutip,v5.0.4,,,,,,,Field,__init__,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Field.__eq__(self, other)",class_method,,,,"Class method: Field.__eq__(self, other)",qutip,qutip,v5.0.4,,,,,,,Field,__eq__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Field.__hash__(self),class_method,,,,Class method: Field.__hash__(self),qutip,qutip,v5.0.4,,,,,,,Field,__hash__,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Field.__repr__(self),class_method,,,,Class method: Field.__repr__(self),qutip,qutip,v5.0.4,,,,,,,Field,__repr__,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Field.as_list(self),class_method,,,,Class method: Field.as_list(self),qutip,qutip,v5.0.4,,,,,,,Field,as_list,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Field.step(self),class_method,,,,Class method: Field.step(self),qutip,qutip,v5.0.4,,,,,,,Field,step,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Field.flat(self),class_method,,,,Class method: Field.flat(self),qutip,qutip,v5.0.4,,,,,,,Field,flat,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Field.remove(self, idx)",class_method,,,,"Class method: Field.remove(self, idx)",qutip,qutip,v5.0.4,,,,,,,Field,remove,"(self, idx)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Field.replace(self, idx, new)",class_method,,,,"Class method: Field.replace(self, idx, new)",qutip,qutip,v5.0.4,,,,,,,Field,replace,"(self, idx, new)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Compound.__init__(self, *spaces)",class_method,,,,"Class method: Compound.__init__(self, *spaces)",qutip,qutip,v5.0.4,,,,,,,Compound,__init__,"(self, *spaces)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Compound.__eq__(self, other)",class_method,,,,"Class method: Compound.__eq__(self, other)",qutip,qutip,v5.0.4,,,,,,,Compound,__eq__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Compound.__hash__(self),class_method,,,,Class method: Compound.__hash__(self),qutip,qutip,v5.0.4,,,,,,,Compound,__hash__,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Compound.__repr__(self),class_method,,,,Class method: Compound.__repr__(self),qutip,qutip,v5.0.4,,,,,,,Compound,__repr__,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Compound.as_list(self),class_method,,,,Class method: Compound.as_list(self),qutip,qutip,v5.0.4,,,,,,,Compound,as_list,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Compound.dims2idx(self, dims)",class_method,,,,"Class method: Compound.dims2idx(self, dims)",qutip,qutip,v5.0.4,,,,,,,Compound,dims2idx,"(self, dims)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Compound.idx2dims(self, idx)",class_method,,,,"Class method: Compound.idx2dims(self, idx)",qutip,qutip,v5.0.4,,,,,,,Compound,idx2dims,"(self, idx)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Compound.step(self),class_method,,,,Class method: Compound.step(self),qutip,qutip,v5.0.4,,,,,,,Compound,step,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Compound.flat(self),class_method,,,,Class method: Compound.flat(self),qutip,qutip,v5.0.4,,,,,,,Compound,flat,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Compound.remove(self, idx)",class_method,,,,"Class method: Compound.remove(self, idx)",qutip,qutip,v5.0.4,,,,,,,Compound,remove,"(self, idx)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Compound.replace(self, idx, new)",class_method,,,,"Class method: Compound.replace(self, idx, new)",qutip,qutip,v5.0.4,,,,,,,Compound,replace,"(self, idx, new)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Compound.replace_superrep(self, super_rep)",class_method,,,,"Class method: Compound.replace_superrep(self, super_rep)",qutip,qutip,v5.0.4,,,,,,,Compound,replace_superrep,"(self, super_rep)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Compound.scalar_like(self),class_method,,,,Class method: Compound.scalar_like(self),qutip,qutip,v5.0.4,,,,,,,Compound,scalar_like,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"SuperSpace.__init__(self, oper, rep='super')",class_method,,,,"Class method: SuperSpace.__init__(self, oper, rep='super')",qutip,qutip,v5.0.4,,,,,,,SuperSpace,__init__,"(self, oper, rep='super')",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"SuperSpace.__eq__(self, other)",class_method,,,,"Class method: SuperSpace.__eq__(self, other)",qutip,qutip,v5.0.4,,,,,,,SuperSpace,__eq__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,SuperSpace.__hash__(self),class_method,,,,Class method: SuperSpace.__hash__(self),qutip,qutip,v5.0.4,,,,,,,SuperSpace,__hash__,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,SuperSpace.__repr__(self),class_method,,,,Class method: SuperSpace.__repr__(self),qutip,qutip,v5.0.4,,,,,,,SuperSpace,__repr__,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,SuperSpace.as_list(self),class_method,,,,Class method: SuperSpace.as_list(self),qutip,qutip,v5.0.4,,,,,,,SuperSpace,as_list,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"SuperSpace.dims2idx(self, dims)",class_method,,,,"Class method: SuperSpace.dims2idx(self, dims)",qutip,qutip,v5.0.4,,,,,,,SuperSpace,dims2idx,"(self, dims)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"SuperSpace.idx2dims(self, idx)",class_method,,,,"Class method: SuperSpace.idx2dims(self, idx)",qutip,qutip,v5.0.4,,,,,,,SuperSpace,idx2dims,"(self, idx)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,SuperSpace.step(self),class_method,,,,Class method: SuperSpace.step(self),qutip,qutip,v5.0.4,,,,,,,SuperSpace,step,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,SuperSpace.flat(self),class_method,,,,Class method: SuperSpace.flat(self),qutip,qutip,v5.0.4,,,,,,,SuperSpace,flat,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"SuperSpace.remove(self, idx)",class_method,,,,"Class method: SuperSpace.remove(self, idx)",qutip,qutip,v5.0.4,,,,,,,SuperSpace,remove,"(self, idx)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"SuperSpace.replace(self, idx, new)",class_method,,,,"Class method: SuperSpace.replace(self, idx, new)",qutip,qutip,v5.0.4,,,,,,,SuperSpace,replace,"(self, idx, new)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"SuperSpace.replace_superrep(self, super_rep)",class_method,,,,"Class method: SuperSpace.replace_superrep(self, super_rep)",qutip,qutip,v5.0.4,,,,,,,SuperSpace,replace_superrep,"(self, super_rep)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,SuperSpace.scalar_like(self),class_method,,,,Class method: SuperSpace.scalar_like(self),qutip,qutip,v5.0.4,,,,,,,SuperSpace,scalar_like,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"MetaDims.__call__(cls, *args, rep=None)",class_method,,,,"Class method: MetaDims.__call__(cls, *args, rep=None)",qutip,qutip,v5.0.4,,,,,,,MetaDims,__call__,"(cls, *args, rep=None)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Dimensions.__init__(self, from_, to_)",class_method,,,,"Class method: Dimensions.__init__(self, from_, to_)",qutip,qutip,v5.0.4,,,,,,,Dimensions,__init__,"(self, from_, to_)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Dimensions.__eq__(self, other)",class_method,,,,"Class method: Dimensions.__eq__(self, other)",qutip,qutip,v5.0.4,,,,,,,Dimensions,__eq__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Dimensions.__ne__(self, other)",class_method,,,,"Class method: Dimensions.__ne__(self, other)",qutip,qutip,v5.0.4,,,,,,,Dimensions,__ne__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Dimensions.__matmul__(self, other)",class_method,,,,"Class method: Dimensions.__matmul__(self, other)",qutip,qutip,v5.0.4,,,,,,,Dimensions,__matmul__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Dimensions.__hash__(self),class_method,,,,Class method: Dimensions.__hash__(self),qutip,qutip,v5.0.4,,,,,,,Dimensions,__hash__,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Dimensions.__repr__(self),class_method,,,,Class method: Dimensions.__repr__(self),qutip,qutip,v5.0.4,,,,,,,Dimensions,__repr__,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Dimensions.__str__(self),class_method,,,,Class method: Dimensions.__str__(self),qutip,qutip,v5.0.4,,,,,,,Dimensions,__str__,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Dimensions.as_list(self),class_method,,,,Class method: Dimensions.as_list(self),qutip,qutip,v5.0.4,,,,,,,Dimensions,as_list,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Dimensions.__getitem__(self, key)",class_method,,,,"Class method: Dimensions.__getitem__(self, key)",qutip,qutip,v5.0.4,,,,,,,Dimensions,__getitem__,"(self, key)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Dimensions.dims2idx(self, dims)",class_method,,,,"Class method: Dimensions.dims2idx(self, dims)",qutip,qutip,v5.0.4,,,,,,,Dimensions,dims2idx,"(self, dims)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Dimensions.idx2dims(self, idxl, idxr)",class_method,,,,"Class method: Dimensions.idx2dims(self, idxl, idxr)",qutip,qutip,v5.0.4,,,,,,,Dimensions,idx2dims,"(self, idxl, idxr)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Dimensions.step(self),class_method,,,,Class method: Dimensions.step(self),qutip,qutip,v5.0.4,,,,,,,Dimensions,step,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Dimensions.flat(self),class_method,,,,Class method: Dimensions.flat(self),qutip,qutip,v5.0.4,,,,,,,Dimensions,flat,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Dimensions._get_tensor_shape(self),class_method,,,,Class method: Dimensions._get_tensor_shape(self),qutip,qutip,v5.0.4,,,,,,,Dimensions,_get_tensor_shape,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Dimensions._get_tensor_perm(self),class_method,,,,Class method: Dimensions._get_tensor_perm(self),qutip,qutip,v5.0.4,,,,,,,Dimensions,_get_tensor_perm,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Dimensions.remove(self, idx)",class_method,,,,"Class method: Dimensions.remove(self, idx)",qutip,qutip,v5.0.4,,,,,,,Dimensions,remove,"(self, idx)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Dimensions.replace(self, idx, new)",class_method,,,,"Class method: Dimensions.replace(self, idx, new)",qutip,qutip,v5.0.4,,,,,,,Dimensions,replace,"(self, idx, new)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"Dimensions.replace_superrep(self, super_rep)",class_method,,,,"Class method: Dimensions.replace_superrep(self, super_rep)",qutip,qutip,v5.0.4,,,,,,,Dimensions,replace_superrep,"(self, super_rep)",,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,Dimensions.scalar_like(self),class_method,,,,Class method: Dimensions.scalar_like(self),qutip,qutip,v5.0.4,,,,,,,Dimensions,scalar_like,(self),,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,MetaSpace(type),class,,,,Class: MetaSpace(type),qutip,qutip,v5.0.4,,,,,,,MetaSpace,,,,,,,,,(type),,
qutip_qutip_v5.0.4,dimensions.py,python,Space(metaclass=MetaSpace),class,,,,Class: Space(metaclass=MetaSpace),qutip,qutip,v5.0.4,,,,,,,Space,,,,,,,,,(metaclass=MetaSpace),,
qutip_qutip_v5.0.4,dimensions.py,python,Field(Space),class,,,,Class: Field(Space),qutip,qutip,v5.0.4,,,,,,,Field,,,,,,,,,(Space),,
qutip_qutip_v5.0.4,dimensions.py,python,Compound(Space),class,,,,Class: Compound(Space),qutip,qutip,v5.0.4,,,,,,,Compound,,,,,,,,,(Space),,
qutip_qutip_v5.0.4,dimensions.py,python,SuperSpace(Space),class,,,,Class: SuperSpace(Space),qutip,qutip,v5.0.4,,,,,,,SuperSpace,,,,,,,,,(Space),,
qutip_qutip_v5.0.4,dimensions.py,python,MetaDims(type),class,,,,Class: MetaDims(type),qutip,qutip,v5.0.4,,,,,,,MetaDims,,,,,,,,,(type),,
qutip_qutip_v5.0.4,dimensions.py,python,Dimensions(metaclass=MetaDims),class,,,,Class: Dimensions(metaclass=MetaDims),qutip,qutip,v5.0.4,,,,,,,Dimensions,,,,,,,,,(metaclass=MetaDims),,
qutip_qutip_v5.0.4,dimensions.py,python,flatten(l),function,,,,Function: flatten(l),qutip,qutip,v5.0.4,,,,flatten,(l),,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"deep_remove(l, *what)",function,,,,"Function: deep_remove(l, *what)",qutip,qutip,v5.0.4,,,,deep_remove,"(l, *what)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"unflatten(l, idxs)",function,,,,"Function: unflatten(l, idxs)",qutip,qutip,v5.0.4,,,,unflatten,"(l, idxs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"_enumerate_flat(l, idx=0)",function,,,,"Function: _enumerate_flat(l, idx=0)",qutip,qutip,v5.0.4,,,,_enumerate_flat,"(l, idx=0)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,_collapse_composite_index(dims),function,,,,Function: _collapse_composite_index(dims),qutip,qutip,v5.0.4,,,,_collapse_composite_index,(dims),,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"_collapse_dims_to_level(dims, level=1)",function,,,,"Function: _collapse_dims_to_level(dims, level=1)",qutip,qutip,v5.0.4,,,,_collapse_dims_to_level,"(dims, level=1)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,collapse_dims_oper(dims),function,,,,Function: collapse_dims_oper(dims),qutip,qutip,v5.0.4,,,,collapse_dims_oper,(dims),,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,collapse_dims_super(dims),function,,,,Function: collapse_dims_super(dims),qutip,qutip,v5.0.4,,,,collapse_dims_super,(dims),,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,enumerate_flat(l),function,,,,Function: enumerate_flat(l),qutip,qutip,v5.0.4,,,,enumerate_flat,(l),,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"deep_map(fn, collection, over=(tuple, list))",function,,,,"Function: deep_map(fn, collection, over=(tuple, list))",qutip,qutip,v5.0.4,,,,deep_map,"(fn, collection, over=(tuple, list))",,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,dims_to_tensor_perm(dims),function,,,,Function: dims_to_tensor_perm(dims),qutip,qutip,v5.0.4,,,,dims_to_tensor_perm,(dims),,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,dims_to_tensor_shape(dims),function,,,,Function: dims_to_tensor_shape(dims),qutip,qutip,v5.0.4,,,,dims_to_tensor_shape,(dims),,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"dims_idxs_to_tensor_idxs(dims, indices)",function,,,,"Function: dims_idxs_to_tensor_idxs(dims, indices)",qutip,qutip,v5.0.4,,,,dims_idxs_to_tensor_idxs,"(dims, indices)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,to_tensor_rep(q_oper),function,,,,Function: to_tensor_rep(q_oper),qutip,qutip,v5.0.4,,,,to_tensor_rep,(q_oper),,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"from_tensor_rep(tensorrep, dims)",function,,,,"Function: from_tensor_rep(tensorrep, dims)",qutip,qutip,v5.0.4,,,,from_tensor_rep,"(tensorrep, dims)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"_frozen(*args, **kwargs)",function,,,,"Function: _frozen(*args, **kwargs)",qutip,qutip,v5.0.4,,,,_frozen,"(*args, **kwargs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,"__all__ = [""to_tensor_rep"", ""from_tensor_rep"", ""Space"", ""Dimensions""]",constant,"__all__ = [""to_tensor_rep"", ""from_tensor_rep"", ""Space"", ""Dimensions""]",__all__,"[""to_tensor_rep"", ""from_tensor_rep"", ""Space"", ""Dimensions""]","Constant: __all__ = [""to_tensor_rep"", ""from_tensor_rep"", ""Space"", ""Dimensions""]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,numbers,import,,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,,numbers,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,getitem from operator,import,,,,Import: getitem from operator,qutip,qutip,v5.0.4,from operator import getitem,operator,getitem,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,partial from functools,import,,,,Import: partial from functools,qutip,qutip,v5.0.4,from functools import partial,functools,partial,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,dimensions.py,python,settings from qutip.settings,local_import,,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings,qutip.settings,settings,,,qutip.settings,,,,,,,,,,,,
,dimensions.py,python,,,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,dimensions.py,python,,,,,,Directory: qutip\core\dimensions.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,energy_restricted.py,python,EnrSpace._stored_dims = {},class_field,,,,Class field: EnrSpace._stored_dims = {},qutip,qutip,v5.0.4,,,,,,,EnrSpace,,,_stored_dims = {},,,,,_stored_dims,,{},
qutip_qutip_v5.0.4,energy_restricted.py,python,[instance] EnrSpace.dims = tuple(dims),class_field,,,,Class field: [instance] EnrSpace.dims = tuple(dims),qutip,qutip,v5.0.4,,,,,,,EnrSpace,__init__,"(self, dims, excitations)",self.dims = tuple(dims),self.dims = tuple(dims),,,,,,,
qutip_qutip_v5.0.4,energy_restricted.py,python,[instance] EnrSpace.n_excitations = excitations,class_field,,,,Class field: [instance] EnrSpace.n_excitations = excitations,qutip,qutip,v5.0.4,,,,,,,EnrSpace,__init__,"(self, dims, excitations)",self.n_excitations = excitations,self.n_excitations = excitations,,,,,,,
qutip_qutip_v5.0.4,energy_restricted.py,python,"[instance] EnrSpace.size, state2idx, idx2state = enr_dicts",class_field,,,,"Class field: [instance] EnrSpace.size, state2idx, idx2state = enr_dicts",qutip,qutip,v5.0.4,,,,,,,EnrSpace,__init__,"(self, dims, excitations)","self.size, self.state2idx, self.idx2state = enr_dicts","self.size, self.state2idx, self.idx2state = enr_dicts",,,,,,,
qutip_qutip_v5.0.4,energy_restricted.py,python,[instance] EnrSpace.issuper = False,class_field,,,,Class field: [instance] EnrSpace.issuper = False,qutip,qutip,v5.0.4,,,,,,,EnrSpace,__init__,"(self, dims, excitations)",self.issuper = False,self.issuper = False,,,,,,,
qutip_qutip_v5.0.4,energy_restricted.py,python,[instance] EnrSpace.superrep = None,class_field,,,,Class field: [instance] EnrSpace.superrep = None,qutip,qutip,v5.0.4,,,,,,,EnrSpace,__init__,"(self, dims, excitations)",self.superrep = None,self.superrep = None,,,,,,,
qutip_qutip_v5.0.4,energy_restricted.py,python,[instance] EnrSpace._pure_dims = False,class_field,,,,Class field: [instance] EnrSpace._pure_dims = False,qutip,qutip,v5.0.4,,,,,,,EnrSpace,__init__,"(self, dims, excitations)",self._pure_dims = False,self._pure_dims = False,,,,,,,
qutip_qutip_v5.0.4,energy_restricted.py,python,"EnrSpace.__init__(self, dims, excitations)",class_method,,,,"Class method: EnrSpace.__init__(self, dims, excitations)",qutip,qutip,v5.0.4,,,,,,,EnrSpace,__init__,"(self, dims, excitations)",,,,,,,,,
qutip_qutip_v5.0.4,energy_restricted.py,python,"EnrSpace.__eq__(self, other)",class_method,,,,"Class method: EnrSpace.__eq__(self, other)",qutip,qutip,v5.0.4,,,,,,,EnrSpace,__eq__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,energy_restricted.py,python,EnrSpace.__hash__(self),class_method,,,,Class method: EnrSpace.__hash__(self),qutip,qutip,v5.0.4,,,,,,,EnrSpace,__hash__,(self),,,,,,,,,
qutip_qutip_v5.0.4,energy_restricted.py,python,EnrSpace.__repr__(self),class_method,,,,Class method: EnrSpace.__repr__(self),qutip,qutip,v5.0.4,,,,,,,EnrSpace,__repr__,(self),,,,,,,,,
qutip_qutip_v5.0.4,energy_restricted.py,python,EnrSpace.as_list(self),class_method,,,,Class method: EnrSpace.as_list(self),qutip,qutip,v5.0.4,,,,,,,EnrSpace,as_list,(self),,,,,,,,,
qutip_qutip_v5.0.4,energy_restricted.py,python,"EnrSpace.dims2idx(self, dims)",class_method,,,,"Class method: EnrSpace.dims2idx(self, dims)",qutip,qutip,v5.0.4,,,,,,,EnrSpace,dims2idx,"(self, dims)",,,,,,,,,
qutip_qutip_v5.0.4,energy_restricted.py,python,"EnrSpace.idx2dims(self, idx)",class_method,,,,"Class method: EnrSpace.idx2dims(self, idx)",qutip,qutip,v5.0.4,,,,,,,EnrSpace,idx2dims,"(self, idx)",,,,,,,,,
qutip_qutip_v5.0.4,energy_restricted.py,python,EnrSpace(Space),class,,,,Class: EnrSpace(Space),qutip,qutip,v5.0.4,,,,,,,EnrSpace,,,,,,,,,(Space),,
qutip_qutip_v5.0.4,energy_restricted.py,python,"enr_state_dictionaries(dims, excitations)",function,,,,"Function: enr_state_dictionaries(dims, excitations)",qutip,qutip,v5.0.4,,,,enr_state_dictionaries,"(dims, excitations)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,energy_restricted.py,python,"enr_fock(dims, excitations, state, *, dtype=None)",function,,,,"Function: enr_fock(dims, excitations, state, *, dtype=None)",qutip,qutip,v5.0.4,,,,enr_fock,"(dims, excitations, state, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,energy_restricted.py,python,"enr_thermal_dm(dims, excitations, n, *, dtype=None)",function,,,,"Function: enr_thermal_dm(dims, excitations, n, *, dtype=None)",qutip,qutip,v5.0.4,,,,enr_thermal_dm,"(dims, excitations, n, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,energy_restricted.py,python,"enr_destroy(dims, excitations, *, dtype=None)",function,,,,"Function: enr_destroy(dims, excitations, *, dtype=None)",qutip,qutip,v5.0.4,,,,enr_destroy,"(dims, excitations, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,energy_restricted.py,python,"enr_identity(dims, excitations, *, dtype=None)",function,,,,"Function: enr_identity(dims, excitations, *, dtype=None)",qutip,qutip,v5.0.4,,,,enr_identity,"(dims, excitations, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,energy_restricted.py,python,"__all__ = ['enr_state_dictionaries', 'enr_fock',
           'enr_thermal_dm', 'enr_destroy', 'enr_identity']",constant,"__all__ = ['enr_state_dictionaries', 'enr_fock',
           'enr_thermal_dm', 'enr_destroy', 'enr_identity']",__all__,"['enr_state_dictionaries', 'enr_fock',
           'enr_thermal_dm', 'enr_destroy', 'enr_identity']","Constant: __all__ = ['enr_state_dictionaries', 'enr_fock',
           'enr_thermal_dm', 'enr_destroy', 'enr_identity']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,energy_restricted.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,energy_restricted.py,python,scipy.sparse,import,,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse,,scipy.sparse,,,,,,,,,,,,,,,
,energy_restricted.py,python,,,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,energy_restricted.py,python,,,,,,Directory: qutip\core\energy_restricted.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,expect.py,python,"expect(oper, state)",function,,,,"Function: expect(oper, state)",qutip,qutip,v5.0.4,,,,expect,"(oper, state)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,expect.py,python,"_single_qobj_expect(oper, state)",function,,,,"Function: _single_qobj_expect(oper, state)",qutip,qutip,v5.0.4,,,,_single_qobj_expect,"(oper, state)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,expect.py,python,"variance(oper, state)",function,,,,"Function: variance(oper, state)",qutip,qutip,v5.0.4,,,,variance,"(oper, state)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,expect.py,python,"__all__ = ['expect', 'variance']",constant,"__all__ = ['expect', 'variance']",__all__,"['expect', 'variance']","Constant: __all__ = ['expect', 'variance']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,expect.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
,expect.py,python,,,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,expect.py,python,,,,,,Directory: qutip\core\expect.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"cy_gate(*, dtype=None)",function,,,,"Function: cy_gate(*, dtype=None)",qutip,qutip,v5.0.4,,,,cy_gate,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"cz_gate(*, dtype=None)",function,,,,"Function: cz_gate(*, dtype=None)",qutip,qutip,v5.0.4,,,,cz_gate,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"s_gate(*, dtype=None)",function,,,,"Function: s_gate(*, dtype=None)",qutip,qutip,v5.0.4,,,,s_gate,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"cs_gate(*, dtype=None)",function,,,,"Function: cs_gate(*, dtype=None)",qutip,qutip,v5.0.4,,,,cs_gate,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"t_gate(*, dtype=None)",function,,,,"Function: t_gate(*, dtype=None)",qutip,qutip,v5.0.4,,,,t_gate,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"ct_gate(*, dtype=None)",function,,,,"Function: ct_gate(*, dtype=None)",qutip,qutip,v5.0.4,,,,ct_gate,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"rx(phi, *, dtype=None)",function,,,,"Function: rx(phi, *, dtype=None)",qutip,qutip,v5.0.4,,,,rx,"(phi, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"ry(phi, *, dtype=None)",function,,,,"Function: ry(phi, *, dtype=None)",qutip,qutip,v5.0.4,,,,ry,"(phi, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"rz(phi, *, dtype=None)",function,,,,"Function: rz(phi, *, dtype=None)",qutip,qutip,v5.0.4,,,,rz,"(phi, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"sqrtnot(*, dtype=None)",function,,,,"Function: sqrtnot(*, dtype=None)",qutip,qutip,v5.0.4,,,,sqrtnot,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"snot(*, dtype=None)",function,,,,"Function: snot(*, dtype=None)",qutip,qutip,v5.0.4,,,,snot,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"phasegate(theta, *, dtype=None)",function,,,,"Function: phasegate(theta, *, dtype=None)",qutip,qutip,v5.0.4,,,,phasegate,"(theta, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"qrot(theta, phi, *, dtype=None)",function,,,,"Function: qrot(theta, phi, *, dtype=None)",qutip,qutip,v5.0.4,,,,qrot,"(theta, phi, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"cphase(theta, *, dtype=None)",function,,,,"Function: cphase(theta, *, dtype=None)",qutip,qutip,v5.0.4,,,,cphase,"(theta, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"cnot(*, dtype=None)",function,,,,"Function: cnot(*, dtype=None)",qutip,qutip,v5.0.4,,,,cnot,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"csign(*, dtype=None)",function,,,,"Function: csign(*, dtype=None)",qutip,qutip,v5.0.4,,,,csign,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"berkeley(*, dtype=None)",function,,,,"Function: berkeley(*, dtype=None)",qutip,qutip,v5.0.4,,,,berkeley,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"swapalpha(alpha, *, dtype=None)",function,,,,"Function: swapalpha(alpha, *, dtype=None)",qutip,qutip,v5.0.4,,,,swapalpha,"(alpha, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"swap(*, dtype=None)",function,,,,"Function: swap(*, dtype=None)",qutip,qutip,v5.0.4,,,,swap,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"iswap(*, dtype=None)",function,,,,"Function: iswap(*, dtype=None)",qutip,qutip,v5.0.4,,,,iswap,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"sqrtswap(*, dtype=None)",function,,,,"Function: sqrtswap(*, dtype=None)",qutip,qutip,v5.0.4,,,,sqrtswap,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"sqrtiswap(*, dtype=None)",function,,,,"Function: sqrtiswap(*, dtype=None)",qutip,qutip,v5.0.4,,,,sqrtiswap,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"molmer_sorensen(theta, *, dtype=None)",function,,,,"Function: molmer_sorensen(theta, *, dtype=None)",qutip,qutip,v5.0.4,,,,molmer_sorensen,"(theta, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"fredkin(*, dtype=None)",function,,,,"Function: fredkin(*, dtype=None)",qutip,qutip,v5.0.4,,,,fredkin,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"toffoli(*, dtype=None)",function,,,,"Function: toffoli(*, dtype=None)",qutip,qutip,v5.0.4,,,,toffoli,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"globalphase(theta, N=1, *, dtype=None)",function,,,,"Function: globalphase(theta, N=1, *, dtype=None)",qutip,qutip,v5.0.4,,,,globalphase,"(theta, N=1, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,_hamming_distance(x),function,,,,Function: _hamming_distance(x),qutip,qutip,v5.0.4,,,,_hamming_distance,(x),,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"hadamard_transform(N=1, *, dtype=None)",function,,,,"Function: hadamard_transform(N=1, *, dtype=None)",qutip,qutip,v5.0.4,,,,hadamard_transform,"(N=1, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"_powers(op, N)",function,,,,"Function: _powers(op, N)",qutip,qutip,v5.0.4,,,,_powers,"(op, N)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"qubit_clifford_group(*, dtype=None)",function,,,,"Function: qubit_clifford_group(*, dtype=None)",qutip,qutip,v5.0.4,,,,qubit_clifford_group,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"__all__ = [
    ""rx"",
    ""ry"",
    ""rz"",
    ""sqrtnot"",
    ""snot"",
    ""phasegate"",
    ""qrot"",
    ""cy_gate"",
    ""cz_gate"",
    ""s_gate"",
    ""t_gate"",
    ""cs_gate"",
    ""ct_gate"",
    ""cphase"",
    ""cnot"",
    ""csign"",
    ""berkeley"",
    ""swapalpha"",
    ""swap"",
    ""iswap"",
    ""sqrtswap"",
    ""sqrtiswap"",
    ""fredkin"",
    ""molmer_sorensen"",
    ""toffoli"",
    ""hadamard_transform"",
    ""qubit_clifford_group"",
    ""globalphase"",
]",constant,"__all__ = [
    ""rx"",
    ""ry"",
    ""rz"",
    ""sqrtnot"",
    ""snot"",
    ""phasegate"",
    ""qrot"",
    ""cy_gate"",
    ""cz_gate"",
    ""s_gate"",
    ""t_gate"",
    ""cs_gate"",
    ""ct_gate"",
    ""cphase"",
    ""cnot"",
    ""csign"",
    ""berkeley"",
    ""swapalpha"",
    ""swap"",
    ""iswap"",
    ""sqrtswap"",
    ""sqrtiswap"",
    ""fredkin"",
    ""molmer_sorensen"",
    ""toffoli"",
    ""hadamard_transform"",
    ""qubit_clifford_group"",
    ""globalphase"",
]",__all__,"[
    ""rx"",
    ""ry"",
    ""rz"",
    ""sqrtnot"",
    ""snot"",
    ""phasegate"",
    ""qrot"",
    ""cy_gate"",
    ""cz_gate"",
    ""s_gate"",
    ""t_gate"",
    ""cs_gate"",
    ""ct_gate"",
    ""cphase"",
    ""cnot"",
    ""csign"",
    ""berkeley"",
    ""swapalpha"",
    ""swap"",
    ""iswap"",
    ""sqrtswap"",
    ""sqrtiswap"",
    ""fredkin"",
    ""molmer_sorensen"",
    ""toffoli"",
    ""hadamard_transform"",
    ""qubit_clifford_group"",
    ""globalphase"",
]","Constant: __all__ = [
    ""rx"",
    ""ry"",
    ""rz"",
    ""sqrtnot"",
    ""snot"",
    ""phasegate"",
    ""qrot"",
    ""cy_gate"",
    ""cz_gate"",
    ""s_gate"",
    ""t_gate"",
    ""cs_gate"",
    ""ct_gate"",
    ""cphase"",
    ""cnot"",
    ""csign"",
    ""berkeley"",
    ""swapalpha"",
    ""swap"",
    ""iswap"",
    ""sqrtswap"",
    ""sqrtiswap"",
    ""fredkin"",
    ""molmer_sorensen"",
    ""toffoli"",
    ""hadamard_transform"",
    ""qubit_clifford_group"",
    ""globalphase"",
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"_DIMS_2_QB = Dimensions([[2, 2], [2, 2]])",constant,"_DIMS_2_QB = Dimensions([[2, 2], [2, 2]])",_DIMS_2_QB,"Dimensions([[2, 2], [2, 2]])","Constant: _DIMS_2_QB = Dimensions([[2, 2], [2, 2]])",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,"_DIMS_3_QB = Dimensions([[2, 2, 2], [2, 2, 2]])",constant,"_DIMS_3_QB = Dimensions([[2, 2, 2], [2, 2, 2]])",_DIMS_3_QB,"Dimensions([[2, 2, 2], [2, 2, 2]])","Constant: _DIMS_3_QB = Dimensions([[2, 2, 2], [2, 2, 2]])",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,product from itertools,import,,,,Import: product from itertools,qutip,qutip,v5.0.4,from itertools import product,itertools,product,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,partial from functools,import,,,,Import: partial from functools,qutip,qutip,v5.0.4,"from functools import partial, reduce",functools,partial,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,reduce from functools,import,,,,Import: reduce from functools,qutip,qutip,v5.0.4,"from functools import partial, reduce",functools,reduce,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,mul from operator,import,,,,Import: mul from operator,qutip,qutip,v5.0.4,from operator import mul,operator,mul,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,gates.py,python,scipy.sparse,import,,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,,scipy.sparse,,,,,,,,,,,,,,,
,gates.py,python,,,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,gates.py,python,,,,,,Directory: qutip\core\gates.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,metrics.py,python,"fidelity(A, B)",function,,,,"Function: fidelity(A, B)",qutip,qutip,v5.0.4,,,,fidelity,"(A, B)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,metrics.py,python,_hilbert_space_dims(oper),function,,,,Function: _hilbert_space_dims(oper),qutip,qutip,v5.0.4,,,,_hilbert_space_dims,(oper),,,,,,,,,,,,,
qutip_qutip_v5.0.4,metrics.py,python,_process_fidelity_to_id(oper),function,,,,Function: _process_fidelity_to_id(oper),qutip,qutip,v5.0.4,,,,_process_fidelity_to_id,(oper),,,,,,,,,,,,,
qutip_qutip_v5.0.4,metrics.py,python,_kraus_or_qobj_to_choi(oper),function,,,,Function: _kraus_or_qobj_to_choi(oper),qutip,qutip,v5.0.4,,,,_kraus_or_qobj_to_choi,(oper),,,,,,,,,,,,,
qutip_qutip_v5.0.4,metrics.py,python,"process_fidelity(oper, target=None)",function,,,,"Function: process_fidelity(oper, target=None)",qutip,qutip,v5.0.4,,,,process_fidelity,"(oper, target=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,metrics.py,python,"average_gate_fidelity(oper, target=None)",function,,,,"Function: average_gate_fidelity(oper, target=None)",qutip,qutip,v5.0.4,,,,average_gate_fidelity,"(oper, target=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,metrics.py,python,"tracedist(A, B, sparse=False, tol=0)",function,,,,"Function: tracedist(A, B, sparse=False, tol=0)",qutip,qutip,v5.0.4,,,,tracedist,"(A, B, sparse=False, tol=0)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,metrics.py,python,"hilbert_dist(A, B)",function,,,,"Function: hilbert_dist(A, B)",qutip,qutip,v5.0.4,,,,hilbert_dist,"(A, B)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,metrics.py,python,"bures_dist(A, B)",function,,,,"Function: bures_dist(A, B)",qutip,qutip,v5.0.4,,,,bures_dist,"(A, B)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,metrics.py,python,"bures_angle(A, B)",function,,,,"Function: bures_angle(A, B)",qutip,qutip,v5.0.4,,,,bures_angle,"(A, B)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,metrics.py,python,"hellinger_dist(A, B, sparse=False, tol=0)",function,,,,"Function: hellinger_dist(A, B, sparse=False, tol=0)",qutip,qutip,v5.0.4,,,,hellinger_dist,"(A, B, sparse=False, tol=0)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,metrics.py,python,"dnorm(A, B=None, solver=""CVXOPT"", verbose=False, force_solve=False,
          sparse=True)",function,,,,"Function: dnorm(A, B=None, solver=""CVXOPT"", verbose=False, force_solve=False,
          sparse=True)",qutip,qutip,v5.0.4,,,,dnorm,"(A, B=None, solver=""CVXOPT"", verbose=False, force_solve=False,
          sparse=True)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,metrics.py,python,unitarity(oper),function,,,,Function: unitarity(oper),qutip,qutip,v5.0.4,,,,unitarity,(oper),,,,,,,,,,,,,
qutip_qutip_v5.0.4,metrics.py,python,"__all__ = ['fidelity', 'tracedist', 'bures_dist', 'bures_angle',
           'hellinger_dist', 'hilbert_dist', 'average_gate_fidelity',
           'process_fidelity', 'unitarity', 'dnorm']",constant,"__all__ = ['fidelity', 'tracedist', 'bures_dist', 'bures_angle',
           'hellinger_dist', 'hilbert_dist', 'average_gate_fidelity',
           'process_fidelity', 'unitarity', 'dnorm']",__all__,"['fidelity', 'tracedist', 'bures_dist', 'bures_angle',
           'hellinger_dist', 'hilbert_dist', 'average_gate_fidelity',
           'process_fidelity', 'unitarity', 'dnorm']","Constant: __all__ = ['fidelity', 'tracedist', 'bures_dist', 'bures_angle',
           'hellinger_dist', 'hilbert_dist', 'average_gate_fidelity',
           'process_fidelity', 'unitarity', 'dnorm']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,metrics.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,metrics.py,python,linalg from scipy,import,,,,Import: linalg from scipy,qutip,qutip,v5.0.4,from scipy import linalg as la,scipy,linalg,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,metrics.py,python,scipy.sparse,import,,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,,scipy.sparse,,,,,,,,,,,,,,,
,metrics.py,python,,,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,metrics.py,python,,,,,,Directory: qutip\core\metrics.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"qdiags(diagonals, offsets=None, dims=None, shape=None, *,
           dtype=None)",function,,,,"Function: qdiags(diagonals, offsets=None, dims=None, shape=None, *,
           dtype=None)",qutip,qutip,v5.0.4,,,,qdiags,"(diagonals, offsets=None, dims=None, shape=None, *,
           dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"jmat(j, which=None, *, dtype=None)",function,,,,"Function: jmat(j, which=None, *, dtype=None)",qutip,qutip,v5.0.4,,,,jmat,"(j, which=None, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"_jplus(j, *, dtype=None)",function,,,,"Function: _jplus(j, *, dtype=None)",qutip,qutip,v5.0.4,,,,_jplus,"(j, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"_jz(j, *, dtype=None)",function,,,,"Function: _jz(j, *, dtype=None)",qutip,qutip,v5.0.4,,,,_jz,"(j, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"spin_Jx(j, *, dtype=None)",function,,,,"Function: spin_Jx(j, *, dtype=None)",qutip,qutip,v5.0.4,,,,spin_Jx,"(j, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"spin_Jy(j, *, dtype=None)",function,,,,"Function: spin_Jy(j, *, dtype=None)",qutip,qutip,v5.0.4,,,,spin_Jy,"(j, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"spin_Jz(j, *, dtype=None)",function,,,,"Function: spin_Jz(j, *, dtype=None)",qutip,qutip,v5.0.4,,,,spin_Jz,"(j, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"spin_Jm(j, *, dtype=None)",function,,,,"Function: spin_Jm(j, *, dtype=None)",qutip,qutip,v5.0.4,,,,spin_Jm,"(j, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"spin_Jp(j, *, dtype=None)",function,,,,"Function: spin_Jp(j, *, dtype=None)",qutip,qutip,v5.0.4,,,,spin_Jp,"(j, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"spin_J_set(j, *, dtype=None)",function,,,,"Function: spin_J_set(j, *, dtype=None)",qutip,qutip,v5.0.4,,,,spin_J_set,"(j, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"sigmap(*, dtype=None)",function,,,,"Function: sigmap(*, dtype=None)",qutip,qutip,v5.0.4,,,,sigmap,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"sigmam(*, dtype=None)",function,,,,"Function: sigmam(*, dtype=None)",qutip,qutip,v5.0.4,,,,sigmam,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"sigmax(*, dtype=None)",function,,,,"Function: sigmax(*, dtype=None)",qutip,qutip,v5.0.4,,,,sigmax,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"sigmay(*, dtype=None)",function,,,,"Function: sigmay(*, dtype=None)",qutip,qutip,v5.0.4,,,,sigmay,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"sigmaz(*, dtype=None)",function,,,,"Function: sigmaz(*, dtype=None)",qutip,qutip,v5.0.4,,,,sigmaz,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"destroy(N, offset=0, *, dtype=None)",function,,,,"Function: destroy(N, offset=0, *, dtype=None)",qutip,qutip,v5.0.4,,,,destroy,"(N, offset=0, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"create(N, offset=0, *, dtype=None)",function,,,,"Function: create(N, offset=0, *, dtype=None)",qutip,qutip,v5.0.4,,,,create,"(N, offset=0, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"fdestroy(n_sites, site, dtype=None)",function,,,,"Function: fdestroy(n_sites, site, dtype=None)",qutip,qutip,v5.0.4,,,,fdestroy,"(n_sites, site, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"fcreate(n_sites, site, dtype=None)",function,,,,"Function: fcreate(n_sites, site, dtype=None)",qutip,qutip,v5.0.4,,,,fcreate,"(n_sites, site, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"_f_op(n_sites, site, action, dtype=None)",function,,,,"Function: _f_op(n_sites, site, action, dtype=None)",qutip,qutip,v5.0.4,,,,_f_op,"(n_sites, site, action, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"qzero(dimensions, dims_right=None, *, dtype=None)",function,,,,"Function: qzero(dimensions, dims_right=None, *, dtype=None)",qutip,qutip,v5.0.4,,,,qzero,"(dimensions, dims_right=None, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,qzero_like(qobj),function,,,,Function: qzero_like(qobj),qutip,qutip,v5.0.4,,,,qzero_like,(qobj),,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"qeye(dimensions, *, dtype=None)",function,,,,"Function: qeye(dimensions, *, dtype=None)",qutip,qutip,v5.0.4,,,,qeye,"(dimensions, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,qeye_like(qobj),function,,,,Function: qeye_like(qobj),qutip,qutip,v5.0.4,,,,qeye_like,(qobj),,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"position(N, offset=0, *, dtype=None)",function,,,,"Function: position(N, offset=0, *, dtype=None)",qutip,qutip,v5.0.4,,,,position,"(N, offset=0, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"momentum(N, offset=0, *, dtype=None)",function,,,,"Function: momentum(N, offset=0, *, dtype=None)",qutip,qutip,v5.0.4,,,,momentum,"(N, offset=0, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"num(N, offset=0, *, dtype=None)",function,,,,"Function: num(N, offset=0, *, dtype=None)",qutip,qutip,v5.0.4,,,,num,"(N, offset=0, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"squeeze(N, z, offset=0, *, dtype=None)",function,,,,"Function: squeeze(N, z, offset=0, *, dtype=None)",qutip,qutip,v5.0.4,,,,squeeze,"(N, z, offset=0, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"squeezing(a1, a2, z)",function,,,,"Function: squeezing(a1, a2, z)",qutip,qutip,v5.0.4,,,,squeezing,"(a1, a2, z)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"displace(N, alpha, offset=0, *, dtype=None)",function,,,,"Function: displace(N, alpha, offset=0, *, dtype=None)",qutip,qutip,v5.0.4,,,,displace,"(N, alpha, offset=0, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"commutator(A, B, kind=""normal"")",function,,,,"Function: commutator(A, B, kind=""normal"")",qutip,qutip,v5.0.4,,,,commutator,"(A, B, kind=""normal"")",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"qutrit_ops(*, dtype=None)",function,,,,"Function: qutrit_ops(*, dtype=None)",qutip,qutip,v5.0.4,,,,qutrit_ops,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"phase(N, phi0=0, *, dtype=None)",function,,,,"Function: phase(N, phi0=0, *, dtype=None)",qutip,qutip,v5.0.4,,,,phase,"(N, phi0=0, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"charge(Nmax, Nmin=None, frac=1, *, dtype=None)",function,,,,"Function: charge(Nmax, Nmin=None, frac=1, *, dtype=None)",qutip,qutip,v5.0.4,,,,charge,"(Nmax, Nmin=None, frac=1, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"tunneling(N, m=1, *, dtype=None)",function,,,,"Function: tunneling(N, m=1, *, dtype=None)",qutip,qutip,v5.0.4,,,,tunneling,"(N, m=1, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"qft(dimensions, *, dtype=None)",function,,,,"Function: qft(dimensions, *, dtype=None)",qutip,qutip,v5.0.4,,,,qft,"(dimensions, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"swap(N, M, *, dtype=None)",function,,,,"Function: swap(N, M, *, dtype=None)",qutip,qutip,v5.0.4,,,,swap,"(N, M, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"__all__ = [
    'jmat', 'spin_Jx', 'spin_Jy', 'spin_Jz', 'spin_Jm', 'spin_Jp',
    'spin_J_set', 'sigmap', 'sigmam', 'sigmax', 'sigmay', 'sigmaz',
    'destroy', 'create', 'fdestroy', 'fcreate', 'qeye', 'identity',
    'position', 'momentum', 'num', 'squeeze', 'squeezing', 'displace',
    'commutator', 'qutrit_ops', 'qdiags', 'phase', 'qzero', 'charge',
    'tunneling', 'qft', 'qzero_like', 'qeye_like', 'swap',
]",constant,"__all__ = [
    'jmat', 'spin_Jx', 'spin_Jy', 'spin_Jz', 'spin_Jm', 'spin_Jp',
    'spin_J_set', 'sigmap', 'sigmam', 'sigmax', 'sigmay', 'sigmaz',
    'destroy', 'create', 'fdestroy', 'fcreate', 'qeye', 'identity',
    'position', 'momentum', 'num', 'squeeze', 'squeezing', 'displace',
    'commutator', 'qutrit_ops', 'qdiags', 'phase', 'qzero', 'charge',
    'tunneling', 'qft', 'qzero_like', 'qeye_like', 'swap',
]",__all__,"[
    'jmat', 'spin_Jx', 'spin_Jy', 'spin_Jz', 'spin_Jm', 'spin_Jp',
    'spin_J_set', 'sigmap', 'sigmam', 'sigmax', 'sigmay', 'sigmaz',
    'destroy', 'create', 'fdestroy', 'fcreate', 'qeye', 'identity',
    'position', 'momentum', 'num', 'squeeze', 'squeezing', 'displace',
    'commutator', 'qutrit_ops', 'qdiags', 'phase', 'qzero', 'charge',
    'tunneling', 'qft', 'qzero_like', 'qeye_like', 'swap',
]","Constant: __all__ = [
    'jmat', 'spin_Jx', 'spin_Jy', 'spin_Jz', 'spin_Jm', 'spin_Jp',
    'spin_J_set', 'sigmap', 'sigmam', 'sigmax', 'sigmay', 'sigmaz',
    'destroy', 'create', 'fdestroy', 'fcreate', 'qeye', 'identity',
    'position', 'momentum', 'num', 'squeeze', 'squeezing', 'displace',
    'commutator', 'qutrit_ops', 'qdiags', 'phase', 'qzero', 'charge',
    'tunneling', 'qft', 'qzero_like', 'qeye_like', 'swap',
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"_SIGMAP = jmat(0.5, '+')",constant,"_SIGMAP = jmat(0.5, '+')",_SIGMAP,"jmat(0.5, '+')","Constant: _SIGMAP = jmat(0.5, '+')",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"_SIGMAM = jmat(0.5, '-')",constant,"_SIGMAM = jmat(0.5, '-')",_SIGMAM,"jmat(0.5, '-')","Constant: _SIGMAM = jmat(0.5, '-')",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"_SIGMAX = 2 * jmat(0.5, 'x')",constant,"_SIGMAX = 2 * jmat(0.5, 'x')",_SIGMAX,"2 * jmat(0.5, 'x')","Constant: _SIGMAX = 2 * jmat(0.5, 'x')",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"_SIGMAY = 2 * jmat(0.5, 'y')",constant,"_SIGMAY = 2 * jmat(0.5, 'y')",_SIGMAY,"2 * jmat(0.5, 'y')","Constant: _SIGMAY = 2 * jmat(0.5, 'y')",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,"_SIGMAZ = 2 * jmat(0.5, 'z')",constant,"_SIGMAZ = 2 * jmat(0.5, 'z')",_SIGMAZ,"2 * jmat(0.5, 'z')","Constant: _SIGMAZ = 2 * jmat(0.5, 'z')",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,identity = qeye,constant,identity = qeye,identity,qeye,Constant: identity = qeye,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,operators.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
,operators.py,python,,,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,operators.py,python,,,,,,Directory: qutip\core\operators.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,options.py,python,QutipOptions._options = {},class_field,,,,Class field: QutipOptions._options = {},qutip,qutip,v5.0.4,,,,,,,QutipOptions,,,_options = {},,,,,_options,,{},
qutip_qutip_v5.0.4,options.py,python,QutipOptions._settings_name = None,class_field,,,,Class field: QutipOptions._settings_name = None,qutip,qutip,v5.0.4,,,,,,,QutipOptions,,,_settings_name = None,,,,,_settings_name,,,
qutip_qutip_v5.0.4,options.py,python,[instance] QutipOptions.options = _options.copy(),class_field,,,,Class field: [instance] QutipOptions.options = _options.copy(),qutip,qutip,v5.0.4,,,,,,,QutipOptions,__init__,"(self, **options)",self.options = self._options.copy(),self.options = self._options.copy(),,,,,,,
qutip_qutip_v5.0.4,options.py,python,"CoreOptions._options = {
        # use auto tidyup
        ""auto_tidyup"": True,
        # use auto tidyup dims on multiplication
        ""auto_tidyup_dims"": False,
        # detect hermiticity
        ""auto_herm"": True,
        # general absolute tolerance
        ""atol"": 1e-12,
        # general relative tolerance
        ""rtol"": 1e-12,
        # use auto tidyup absolute tolerance
        ""auto_tidyup_atol"": 1e-14,
        # signature style expected by function coefficients
        ""function_coefficient_style"": ""auto"",
        # Default Qobj dtype for Qobj create function
        ""default_dtype"": None,
    }",class_field,,,,"Class field: CoreOptions._options = {
        # use auto tidyup
        ""auto_tidyup"": True,
        # use auto tidyup dims on multiplication
        ""auto_tidyup_dims"": False,
        # detect hermiticity
        ""auto_herm"": True,
        # general absolute tolerance
        ""atol"": 1e-12,
        # general relative tolerance
        ""rtol"": 1e-12,
        # use auto tidyup absolute tolerance
        ""auto_tidyup_atol"": 1e-14,
        # signature style expected by function coefficients
        ""function_coefficient_style"": ""auto"",
        # Default Qobj dtype for Qobj create function
        ""default_dtype"": None,
    }",qutip,qutip,v5.0.4,,,,,,,CoreOptions,,,"_options = {
        # use auto tidyup
        ""auto_tidyup"": True,
        # use auto tidyup dims on multiplication
        ""auto_tidyup_dims"": False,
        # detect hermiticity
        ""auto_herm"": True,
        # general absolute tolerance
        ""atol"": 1e-12,
        # general relative tolerance
        ""rtol"": 1e-12,
        # use auto tidyup absolute tolerance
        ""auto_tidyup_atol"": 1e-14,
        # signature style expected by function coefficients
        ""function_coefficient_style"": ""auto"",
        # Default Qobj dtype for Qobj create function
        ""default_dtype"": None,
    }",,,,,_options,,"{
        # use auto tidyup
        ""auto_tidyup"": True,
        # use auto tidyup dims on multiplication
        ""auto_tidyup_dims"": False,
        # detect hermiticity
        ""auto_herm"": True,
        # general absolute tolerance
        ""atol"": 1e-12,
        # general relative tolerance
        ""rtol"": 1e-12,
        # use auto tidyup absolute tolerance
        ""auto_tidyup_atol"": 1e-14,
        # signature style expected by function coefficients
        ""function_coefficient_style"": ""auto"",
        # Default Qobj dtype for Qobj create function
        ""default_dtype"": None,
    }",
qutip_qutip_v5.0.4,options.py,python,"CoreOptions._settings_name = ""core""",class_field,,,,"Class field: CoreOptions._settings_name = ""core""",qutip,qutip,v5.0.4,,,,,,,CoreOptions,,,"_settings_name = ""core""",,,,,_settings_name,,"""core""",
qutip_qutip_v5.0.4,options.py,python,"QutipOptions.__init__(self, **options)",class_method,,,,"Class method: QutipOptions.__init__(self, **options)",qutip,qutip,v5.0.4,,,,,,,QutipOptions,__init__,"(self, **options)",,,,,,,,,
qutip_qutip_v5.0.4,options.py,python,"QutipOptions.__contains__(self, key)",class_method,,,,"Class method: QutipOptions.__contains__(self, key)",qutip,qutip,v5.0.4,,,,,,,QutipOptions,__contains__,"(self, key)",,,,,,,,,
qutip_qutip_v5.0.4,options.py,python,"QutipOptions.__getitem__(self, key)",class_method,,,,"Class method: QutipOptions.__getitem__(self, key)",qutip,qutip,v5.0.4,,,,,,,QutipOptions,__getitem__,"(self, key)",,,,,,,,,
qutip_qutip_v5.0.4,options.py,python,"QutipOptions.__setitem__(self, key, value)",class_method,,,,"Class method: QutipOptions.__setitem__(self, key, value)",qutip,qutip,v5.0.4,,,,,,,QutipOptions,__setitem__,"(self, key, value)",,,,,,,,,
qutip_qutip_v5.0.4,options.py,python,"QutipOptions.__repr__(self, full=True)",class_method,,,,"Class method: QutipOptions.__repr__(self, full=True)",qutip,qutip,v5.0.4,,,,,,,QutipOptions,__repr__,"(self, full=True)",,,,,,,,,
qutip_qutip_v5.0.4,options.py,python,QutipOptions.__enter__(self),class_method,,,,Class method: QutipOptions.__enter__(self),qutip,qutip,v5.0.4,,,,,,,QutipOptions,__enter__,(self),,,,,,,,,
qutip_qutip_v5.0.4,options.py,python,"QutipOptions.__exit__(self, exc_type, exc_value, exc_traceback)",class_method,,,,"Class method: QutipOptions.__exit__(self, exc_type, exc_value, exc_traceback)",qutip,qutip,v5.0.4,,,,,,,QutipOptions,__exit__,"(self, exc_type, exc_value, exc_traceback)",,,,,,,,,
qutip_qutip_v5.0.4,options.py,python,QutipOptions,class,,,,Class: QutipOptions,qutip,qutip,v5.0.4,,,,,,,QutipOptions,,,,,,,,,,,
qutip_qutip_v5.0.4,options.py,python,CoreOptions(QutipOptions),class,,,,Class: CoreOptions(QutipOptions),qutip,qutip,v5.0.4,,,,,,,CoreOptions,,,,,,,,,(QutipOptions),,
qutip_qutip_v5.0.4,options.py,python,"__all__ = [""CoreOptions""]",constant,"__all__ = [""CoreOptions""]",__all__,"[""CoreOptions""]","Constant: __all__ = [""CoreOptions""]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,options.py,python,,,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,options.py,python,,,,,,Directory: qutip\core\options.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,Qobj.__array_ufunc__ = None,class_field,,,,Class field: Qobj.__array_ufunc__ = None,qutip,qutip,v5.0.4,,,,,,,Qobj,,,__array_ufunc__ = None,,,,,__array_ufunc__,,,
qutip_qutip_v5.0.4,qobj.py,python,[instance] Qobj._isherm = isherm,class_field,,,,Class field: [instance] Qobj._isherm = isherm,qutip,qutip,v5.0.4,,,,,,,Qobj,__init__,"(self, arg=None, dims=None,
                 copy=True, superrep=None, isherm=None, isunitary=None)",self._isherm = isherm,self._isherm = isherm,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,[instance] Qobj._isunitary = isunitary,class_field,,,,Class field: [instance] Qobj._isunitary = isunitary,qutip,qutip,v5.0.4,,,,,,,Qobj,__init__,"(self, arg=None, dims=None,
                 copy=True, superrep=None, isherm=None, isunitary=None)",self._isunitary = isunitary,self._isunitary = isunitary,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"[instance] Qobj._initialize_data(arg, dims, copy)",class_field,,,,"Class field: [instance] Qobj._initialize_data(arg, dims, copy)",qutip,qutip,v5.0.4,,,,,,,Qobj,__init__,"(self, arg=None, dims=None,
                 copy=True, superrep=None, isherm=None, isunitary=None)","self._initialize_data(arg, dims, copy)","self._initialize_data(arg, dims, copy)",,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj._initialize_data(self, arg, dims, copy)",class_method,,,,"Class method: Qobj._initialize_data(self, arg, dims, copy)",qutip,qutip,v5.0.4,,,,,,,Qobj,_initialize_data,"(self, arg, dims, copy)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.__init__(self, arg=None, dims=None,
                 copy=True, superrep=None, isherm=None, isunitary=None)",class_method,,,,"Class method: Qobj.__init__(self, arg=None, dims=None,
                 copy=True, superrep=None, isherm=None, isunitary=None)",qutip,qutip,v5.0.4,,,,,,,Qobj,__init__,"(self, arg=None, dims=None,
                 copy=True, superrep=None, isherm=None, isunitary=None)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,Qobj.copy(self),class_method,,,,Class method: Qobj.copy(self),qutip,qutip,v5.0.4,,,,,,,Qobj,copy,(self),,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,[property] Qobj.dims(self),class_method,,,,Class method: [property] Qobj.dims(self),qutip,qutip,v5.0.4,,,,,,,Qobj,dims,(self),,,,,,,,,property
qutip_qutip_v5.0.4,qobj.py,python,"[dims.setter] Qobj.dims(self, dims)",class_method,,,,"Class method: [dims.setter] Qobj.dims(self, dims)",qutip,qutip,v5.0.4,,,,,,,Qobj,dims,"(self, dims)",,,,,,,,,dims.setter
qutip_qutip_v5.0.4,qobj.py,python,[property] Qobj.type(self),class_method,,,,Class method: [property] Qobj.type(self),qutip,qutip,v5.0.4,,,,,,,Qobj,type,(self),,,,,,,,,property
qutip_qutip_v5.0.4,qobj.py,python,[property] Qobj.superrep(self),class_method,,,,Class method: [property] Qobj.superrep(self),qutip,qutip,v5.0.4,,,,,,,Qobj,superrep,(self),,,,,,,,,property
qutip_qutip_v5.0.4,qobj.py,python,"[superrep.setter] Qobj.superrep(self, super_rep)",class_method,,,,"Class method: [superrep.setter] Qobj.superrep(self, super_rep)",qutip,qutip,v5.0.4,,,,,,,Qobj,superrep,"(self, super_rep)",,,,,,,,,superrep.setter
qutip_qutip_v5.0.4,qobj.py,python,[property] Qobj.data(self),class_method,,,,Class method: [property] Qobj.data(self),qutip,qutip,v5.0.4,,,,,,,Qobj,data,(self),,,,,,,,,property
qutip_qutip_v5.0.4,qobj.py,python,[property] Qobj.dtype(self),class_method,,,,Class method: [property] Qobj.dtype(self),qutip,qutip,v5.0.4,,,,,,,Qobj,dtype,(self),,,,,,,,,property
qutip_qutip_v5.0.4,qobj.py,python,"[data.setter] Qobj.data(self, data)",class_method,,,,"Class method: [data.setter] Qobj.data(self, data)",qutip,qutip,v5.0.4,,,,,,,Qobj,data,"(self, data)",,,,,,,,,data.setter
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.to(self, data_type, copy=False)",class_method,,,,"Class method: Qobj.to(self, data_type, copy=False)",qutip,qutip,v5.0.4,,,,,,,Qobj,to,"(self, data_type, copy=False)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"[_require_equal_type] Qobj.__add__(self, other)",class_method,,,,"Class method: [_require_equal_type] Qobj.__add__(self, other)",qutip,qutip,v5.0.4,,,,,,,Qobj,__add__,"(self, other)",,,,,,,,,_require_equal_type
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.__radd__(self, other)",class_method,,,,"Class method: Qobj.__radd__(self, other)",qutip,qutip,v5.0.4,,,,,,,Qobj,__radd__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"[_require_equal_type] Qobj.__sub__(self, other)",class_method,,,,"Class method: [_require_equal_type] Qobj.__sub__(self, other)",qutip,qutip,v5.0.4,,,,,,,Qobj,__sub__,"(self, other)",,,,,,,,,_require_equal_type
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.__rsub__(self, other)",class_method,,,,"Class method: Qobj.__rsub__(self, other)",qutip,qutip,v5.0.4,,,,,,,Qobj,__rsub__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.__mul__(self, other)",class_method,,,,"Class method: Qobj.__mul__(self, other)",qutip,qutip,v5.0.4,,,,,,,Qobj,__mul__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.__rmul__(self, other)",class_method,,,,"Class method: Qobj.__rmul__(self, other)",qutip,qutip,v5.0.4,,,,,,,Qobj,__rmul__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.__matmul__(self, other)",class_method,,,,"Class method: Qobj.__matmul__(self, other)",qutip,qutip,v5.0.4,,,,,,,Qobj,__matmul__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.__truediv__(self, other)",class_method,,,,"Class method: Qobj.__truediv__(self, other)",qutip,qutip,v5.0.4,,,,,,,Qobj,__truediv__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,Qobj.__neg__(self),class_method,,,,Class method: Qobj.__neg__(self),qutip,qutip,v5.0.4,,,,,,,Qobj,__neg__,(self),,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.__getitem__(self, ind)",class_method,,,,"Class method: Qobj.__getitem__(self, ind)",qutip,qutip,v5.0.4,,,,,,,Qobj,__getitem__,"(self, ind)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.__eq__(self, other)",class_method,,,,"Class method: Qobj.__eq__(self, other)",qutip,qutip,v5.0.4,,,,,,,Qobj,__eq__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.__pow__(self, n, m=None)",class_method,,,,"Class method: Qobj.__pow__(self, n, m=None)",qutip,qutip,v5.0.4,,,,,,,Qobj,__pow__,"(self, n, m=None)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,Qobj._str_header(self),class_method,,,,Class method: Qobj._str_header(self),qutip,qutip,v5.0.4,,,,,,,Qobj,_str_header,(self),,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,Qobj.__str__(self),class_method,,,,Class method: Qobj.__str__(self),qutip,qutip,v5.0.4,,,,,,,Qobj,__str__,(self),,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,Qobj.__repr__(self),class_method,,,,Class method: Qobj.__repr__(self),qutip,qutip,v5.0.4,,,,,,,Qobj,__repr__,(self),,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.__call__(self, other)",class_method,,,,"Class method: Qobj.__call__(self, other)",qutip,qutip,v5.0.4,,,,,,,Qobj,__call__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,Qobj.__getstate__(self),class_method,,,,Class method: Qobj.__getstate__(self),qutip,qutip,v5.0.4,,,,,,,Qobj,__getstate__,(self),,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.__setstate__(self, state)",class_method,,,,"Class method: Qobj.__setstate__(self, state)",qutip,qutip,v5.0.4,,,,,,,Qobj,__setstate__,"(self, state)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,Qobj._repr_latex_(self),class_method,,,,Class method: Qobj._repr_latex_(self),qutip,qutip,v5.0.4,,,,,,,Qobj,_repr_latex_,(self),,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.__and__(self, other)",class_method,,,,"Class method: Qobj.__and__(self, other)",qutip,qutip,v5.0.4,,,,,,,Qobj,__and__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,Qobj.dag(self),class_method,,,,Class method: Qobj.dag(self),qutip,qutip,v5.0.4,,,,,,,Qobj,dag,(self),,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,Qobj.conj(self),class_method,,,,Class method: Qobj.conj(self),qutip,qutip,v5.0.4,,,,,,,Qobj,conj,(self),,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,Qobj.trans(self),class_method,,,,Class method: Qobj.trans(self),qutip,qutip,v5.0.4,,,,,,,Qobj,trans,(self),,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,Qobj.dual_chan(self),class_method,,,,Class method: Qobj.dual_chan(self),qutip,qutip,v5.0.4,,,,,,,Qobj,dual_chan,(self),,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.norm(self, norm=None, kwargs=None)",class_method,,,,"Class method: Qobj.norm(self, norm=None, kwargs=None)",qutip,qutip,v5.0.4,,,,,,,Qobj,norm,"(self, norm=None, kwargs=None)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,Qobj.proj(self),class_method,,,,Class method: Qobj.proj(self),qutip,qutip,v5.0.4,,,,,,,Qobj,proj,(self),,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,Qobj.tr(self),class_method,,,,Class method: Qobj.tr(self),qutip,qutip,v5.0.4,,,,,,,Qobj,tr,(self),,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,Qobj.purity(self),class_method,,,,Class method: Qobj.purity(self),qutip,qutip,v5.0.4,,,,,,,Qobj,purity,(self),,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.full(self, order='C', squeeze=False)",class_method,,,,"Class method: Qobj.full(self, order='C', squeeze=False)",qutip,qutip,v5.0.4,,,,,,,Qobj,full,"(self, order='C', squeeze=False)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.data_as(self, format=None, copy=True)",class_method,,,,"Class method: Qobj.data_as(self, format=None, copy=True)",qutip,qutip,v5.0.4,,,,,,,Qobj,data_as,"(self, format=None, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,Qobj.diag(self),class_method,,,,Class method: Qobj.diag(self),qutip,qutip,v5.0.4,,,,,,,Qobj,diag,(self),,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.expm(self, dtype=_data.Dense)",class_method,,,,"Class method: Qobj.expm(self, dtype=_data.Dense)",qutip,qutip,v5.0.4,,,,,,,Qobj,expm,"(self, dtype=_data.Dense)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,Qobj.logm(self),class_method,,,,Class method: Qobj.logm(self),qutip,qutip,v5.0.4,,,,,,,Qobj,logm,(self),,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,Qobj.check_herm(self),class_method,,,,Class method: Qobj.check_herm(self),qutip,qutip,v5.0.4,,,,,,,Qobj,check_herm,(self),,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.sqrtm(self, sparse=False, tol=0, maxiter=100000)",class_method,,,,"Class method: Qobj.sqrtm(self, sparse=False, tol=0, maxiter=100000)",qutip,qutip,v5.0.4,,,,,,,Qobj,sqrtm,"(self, sparse=False, tol=0, maxiter=100000)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,Qobj.cosm(self),class_method,,,,Class method: Qobj.cosm(self),qutip,qutip,v5.0.4,,,,,,,Qobj,cosm,(self),,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,Qobj.sinm(self),class_method,,,,Class method: Qobj.sinm(self),qutip,qutip,v5.0.4,,,,,,,Qobj,sinm,(self),,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.inv(self, sparse=False)",class_method,,,,"Class method: Qobj.inv(self, sparse=False)",qutip,qutip,v5.0.4,,,,,,,Qobj,inv,"(self, sparse=False)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.unit(self, inplace=False, norm=None, kwargs=None)",class_method,,,,"Class method: Qobj.unit(self, inplace=False, norm=None, kwargs=None)",qutip,qutip,v5.0.4,,,,,,,Qobj,unit,"(self, inplace=False, norm=None, kwargs=None)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.ptrace(self, sel, dtype=None)",class_method,,,,"Class method: Qobj.ptrace(self, sel, dtype=None)",qutip,qutip,v5.0.4,,,,,,,Qobj,ptrace,"(self, sel, dtype=None)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.contract(self, inplace=False)",class_method,,,,"Class method: Qobj.contract(self, inplace=False)",qutip,qutip,v5.0.4,,,,,,,Qobj,contract,"(self, inplace=False)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.permute(self, order)",class_method,,,,"Class method: Qobj.permute(self, order)",qutip,qutip,v5.0.4,,,,,,,Qobj,permute,"(self, order)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.tidyup(self, atol=None)",class_method,,,,"Class method: Qobj.tidyup(self, atol=None)",qutip,qutip,v5.0.4,,,,,,,Qobj,tidyup,"(self, atol=None)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.transform(self, inpt, inverse=False)",class_method,,,,"Class method: Qobj.transform(self, inpt, inverse=False)",qutip,qutip,v5.0.4,,,,,,,Qobj,transform,"(self, inpt, inverse=False)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.trunc_neg(self, method=""clip"")",class_method,,,,"Class method: Qobj.trunc_neg(self, method=""clip"")",qutip,qutip,v5.0.4,,,,,,,Qobj,trunc_neg,"(self, method=""clip"")",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.matrix_element(self, bra, ket)",class_method,,,,"Class method: Qobj.matrix_element(self, bra, ket)",qutip,qutip,v5.0.4,,,,,,,Qobj,matrix_element,"(self, bra, ket)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.overlap(self, other)",class_method,,,,"Class method: Qobj.overlap(self, other)",qutip,qutip,v5.0.4,,,,,,,Qobj,overlap,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.eigenstates(self, sparse=False, sort='low', eigvals=0,
                    tol=0, maxiter=100000, phase_fix=None)",class_method,,,,"Class method: Qobj.eigenstates(self, sparse=False, sort='low', eigvals=0,
                    tol=0, maxiter=100000, phase_fix=None)",qutip,qutip,v5.0.4,,,,,,,Qobj,eigenstates,"(self, sparse=False, sort='low', eigvals=0,
                    tol=0, maxiter=100000, phase_fix=None)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.eigenenergies(self, sparse=False, sort='low',
                      eigvals=0, tol=0, maxiter=100000)",class_method,,,,"Class method: Qobj.eigenenergies(self, sparse=False, sort='low',
                      eigvals=0, tol=0, maxiter=100000)",qutip,qutip,v5.0.4,,,,,,,Qobj,eigenenergies,"(self, sparse=False, sort='low',
                      eigvals=0, tol=0, maxiter=100000)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.groundstate(self, sparse=False, tol=0, maxiter=100000, safe=True)",class_method,,,,"Class method: Qobj.groundstate(self, sparse=False, tol=0, maxiter=100000, safe=True)",qutip,qutip,v5.0.4,,,,,,,Qobj,groundstate,"(self, sparse=False, tol=0, maxiter=100000, safe=True)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"Qobj.dnorm(self, B=None)",class_method,,,,"Class method: Qobj.dnorm(self, B=None)",qutip,qutip,v5.0.4,,,,,,,Qobj,dnorm,"(self, B=None)",,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,[property] Qobj.ishp(self),class_method,,,,Class method: [property] Qobj.ishp(self),qutip,qutip,v5.0.4,,,,,,,Qobj,ishp,(self),,,,,,,,,property
qutip_qutip_v5.0.4,qobj.py,python,[property] Qobj.iscp(self),class_method,,,,Class method: [property] Qobj.iscp(self),qutip,qutip,v5.0.4,,,,,,,Qobj,iscp,(self),,,,,,,,,property
qutip_qutip_v5.0.4,qobj.py,python,[property] Qobj.istp(self),class_method,,,,Class method: [property] Qobj.istp(self),qutip,qutip,v5.0.4,,,,,,,Qobj,istp,(self),,,,,,,,,property
qutip_qutip_v5.0.4,qobj.py,python,[property] Qobj.iscptp(self),class_method,,,,Class method: [property] Qobj.iscptp(self),qutip,qutip,v5.0.4,,,,,,,Qobj,iscptp,(self),,,,,,,,,property
qutip_qutip_v5.0.4,qobj.py,python,[property] Qobj.isherm(self),class_method,,,,Class method: [property] Qobj.isherm(self),qutip,qutip,v5.0.4,,,,,,,Qobj,isherm,(self),,,,,,,,,property
qutip_qutip_v5.0.4,qobj.py,python,"[isherm.setter] Qobj.isherm(self, isherm)",class_method,,,,"Class method: [isherm.setter] Qobj.isherm(self, isherm)",qutip,qutip,v5.0.4,,,,,,,Qobj,isherm,"(self, isherm)",,,,,,,,,isherm.setter
qutip_qutip_v5.0.4,qobj.py,python,Qobj._calculate_isunitary(self),class_method,,,,Class method: Qobj._calculate_isunitary(self),qutip,qutip,v5.0.4,,,,,,,Qobj,_calculate_isunitary,(self),,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,[property] Qobj.isunitary(self),class_method,,,,Class method: [property] Qobj.isunitary(self),qutip,qutip,v5.0.4,,,,,,,Qobj,isunitary,(self),,,,,,,,,property
qutip_qutip_v5.0.4,qobj.py,python,[property] Qobj.shape(self),class_method,,,,Class method: [property] Qobj.shape(self),qutip,qutip,v5.0.4,,,,,,,Qobj,shape,(self),,,,,,,,,property
qutip_qutip_v5.0.4,qobj.py,python,[property] Qobj.isoper(self),class_method,,,,Class method: [property] Qobj.isoper(self),qutip,qutip,v5.0.4,,,,,,,Qobj,isoper,(self),,,,,,,,,property
qutip_qutip_v5.0.4,qobj.py,python,[property] Qobj.isbra(self),class_method,,,,Class method: [property] Qobj.isbra(self),qutip,qutip,v5.0.4,,,,,,,Qobj,isbra,(self),,,,,,,,,property
qutip_qutip_v5.0.4,qobj.py,python,[property] Qobj.isket(self),class_method,,,,Class method: [property] Qobj.isket(self),qutip,qutip,v5.0.4,,,,,,,Qobj,isket,(self),,,,,,,,,property
qutip_qutip_v5.0.4,qobj.py,python,[property] Qobj.issuper(self),class_method,,,,Class method: [property] Qobj.issuper(self),qutip,qutip,v5.0.4,,,,,,,Qobj,issuper,(self),,,,,,,,,property
qutip_qutip_v5.0.4,qobj.py,python,[property] Qobj.isoperket(self),class_method,,,,Class method: [property] Qobj.isoperket(self),qutip,qutip,v5.0.4,,,,,,,Qobj,isoperket,(self),,,,,,,,,property
qutip_qutip_v5.0.4,qobj.py,python,[property] Qobj.isoperbra(self),class_method,,,,Class method: [property] Qobj.isoperbra(self),qutip,qutip,v5.0.4,,,,,,,Qobj,isoperbra,(self),,,,,,,,,property
qutip_qutip_v5.0.4,qobj.py,python,Qobj,class,,,,Class: Qobj,qutip,qutip,v5.0.4,,,,,,,Qobj,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,isbra(x),function,,,,Function: isbra(x),qutip,qutip,v5.0.4,,,,isbra,(x),,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,isket(x),function,,,,Function: isket(x),qutip,qutip,v5.0.4,,,,isket,(x),,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,isoper(x),function,,,,Function: isoper(x),qutip,qutip,v5.0.4,,,,isoper,(x),,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,isoperbra(x),function,,,,Function: isoperbra(x),qutip,qutip,v5.0.4,,,,isoperbra,(x),,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,isoperket(x),function,,,,Function: isoperket(x),qutip,qutip,v5.0.4,,,,isoperket,(x),,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,issuper(x),function,,,,Function: issuper(x),qutip,qutip,v5.0.4,,,,issuper,(x),,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,isherm(x),function,,,,Function: isherm(x),qutip,qutip,v5.0.4,,,,isherm,(x),,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,_require_equal_type(method),function,,,,Function: _require_equal_type(method),qutip,qutip,v5.0.4,,,,_require_equal_type,(method),,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,_latex_real(x),function,,,,Function: _latex_real(x),qutip,qutip,v5.0.4,,,,_latex_real,(x),,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,_latex_complex(x),function,,,,Function: _latex_complex(x),qutip,qutip,v5.0.4,,,,_latex_complex,(x),,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"_latex_row(row, cols, data)",function,,,,"Function: _latex_row(row, cols, data)",qutip,qutip,v5.0.4,,,,_latex_row,"(row, cols, data)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"ptrace(Q, sel)",function,,,,"Function: ptrace(Q, sel)",qutip,qutip,v5.0.4,,,,ptrace,"(Q, sel)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"__all__ = [
    'Qobj', 'isbra', 'isket', 'isoper', 'issuper', 'isoperbra', 'isoperket',
    'isherm', 'ptrace',
]",constant,"__all__ = [
    'Qobj', 'isbra', 'isket', 'isoper', 'issuper', 'isoperbra', 'isoperket',
    'isherm', 'ptrace',
]",__all__,"[
    'Qobj', 'isbra', 'isket', 'isoper', 'issuper', 'isoperbra', 'isoperket',
    'isherm', 'ptrace',
]","Constant: __all__ = [
    'Qobj', 'isbra', 'isket', 'isoper', 'issuper', 'isoperbra', 'isoperket',
    'isherm', 'ptrace',
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"_NORM_FUNCTION_LOOKUP = {
    'tr': _data.norm.trace,
    'one': _data.norm.one,
    'max': _data.norm.max,
    'fro': _data.norm.frobenius,
    'l2': _data.norm.l2,
}",constant,"_NORM_FUNCTION_LOOKUP = {
    'tr': _data.norm.trace,
    'one': _data.norm.one,
    'max': _data.norm.max,
    'fro': _data.norm.frobenius,
    'l2': _data.norm.l2,
}",_NORM_FUNCTION_LOOKUP,"{
    'tr': _data.norm.trace,
    'one': _data.norm.one,
    'max': _data.norm.max,
    'fro': _data.norm.frobenius,
    'l2': _data.norm.l2,
}","Constant: _NORM_FUNCTION_LOOKUP = {
    'tr': _data.norm.trace,
    'one': _data.norm.one,
    'max': _data.norm.max,
    'fro': _data.norm.frobenius,
    'l2': _data.norm.l2,
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"_NORM_ALLOWED_MATRIX = {'tr', 'fro', 'one', 'max'}",constant,"_NORM_ALLOWED_MATRIX = {'tr', 'fro', 'one', 'max'}",_NORM_ALLOWED_MATRIX,"{'tr', 'fro', 'one', 'max'}","Constant: _NORM_ALLOWED_MATRIX = {'tr', 'fro', 'one', 'max'}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"_NORM_ALLOWED_VECTOR = {'l2', 'max'}",constant,"_NORM_ALLOWED_VECTOR = {'l2', 'max'}",_NORM_ALLOWED_VECTOR,"{'l2', 'max'}","Constant: _NORM_ALLOWED_VECTOR = {'l2', 'max'}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,"_CALL_ALLOWED = {
    ('super', 'oper'),
    ('super', 'ket'),
    ('oper', 'ket'),
}",constant,"_CALL_ALLOWED = {
    ('super', 'oper'),
    ('super', 'ket'),
    ('oper', 'ket'),
}",_CALL_ALLOWED,"{
    ('super', 'oper'),
    ('super', 'ket'),
    ('oper', 'ket'),
}","Constant: _CALL_ALLOWED = {
    ('super', 'oper'),
    ('super', 'ket'),
    ('oper', 'ket'),
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,functools,import,,,,Import: functools,qutip,qutip,v5.0.4,import functools,,functools,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,numbers,import,,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,,numbers,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,warnings,import,,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,,warnings,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,scipy.sparse,import,,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse,,scipy.sparse,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,to_choi from qutip.core.superop_reps,local_import,,,,Import: to_choi from qutip.core.superop_reps,qutip,qutip,v5.0.4,from qutip.core.superop_reps import to_choi,qutip.core.superop_reps,to_choi,,,qutip.core.superop_reps,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,vector_to_operator from qutip.core.superoperator,local_import,,,,Import: vector_to_operator from qutip.core.superoperator,qutip,qutip,v5.0.4,"from qutip.core.superoperator import vector_to_operator, operator_to_vector",qutip.core.superoperator,vector_to_operator,,,qutip.core.superoperator,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,operator_to_vector from qutip.core.superoperator,local_import,,,,Import: operator_to_vector from qutip.core.superoperator,qutip,qutip,v5.0.4,"from qutip.core.superoperator import vector_to_operator, operator_to_vector",qutip.core.superoperator,operator_to_vector,,,qutip.core.superoperator,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,tensor_swap from qutip.core.tensor,local_import,,,,Import: tensor_swap from qutip.core.tensor,qutip,qutip,v5.0.4,"from qutip.core.tensor import tensor_swap, tensor",qutip.core.tensor,tensor_swap,,,qutip.core.tensor,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,tensor from qutip.core.tensor,local_import,,,,Import: tensor from qutip.core.tensor,qutip,qutip,v5.0.4,"from qutip.core.tensor import tensor_swap, tensor",qutip.core.tensor,tensor,,,qutip.core.tensor,,,,,,,,,,,,
qutip_qutip_v5.0.4,qobj.py,python,metrics from qutip.core,local_import,,,,Import: metrics from qutip.core,qutip,qutip,v5.0.4,from qutip.core import metrics as mts,qutip.core,metrics,,,qutip.core,,,,,,,,,,,,
,qobj.py,python,,,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,qobj.py,python,,,,,,Directory: qutip\core\qobj.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,semidefinite.py,python,"_complex_var(rows=1, cols=1, name=None)",function,,,,"Function: _complex_var(rows=1, cols=1, name=None)",qutip,qutip,v5.0.4,,,,_complex_var,"(rows=1, cols=1, name=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,semidefinite.py,python,_make_constraints(*rhos),function,,,,Function: _make_constraints(*rhos),qutip,qutip,v5.0.4,,,,_make_constraints,(*rhos),,,,,,,,,,,,,
qutip_qutip_v5.0.4,semidefinite.py,python,_arr_to_complex(A),function,,,,Function: _arr_to_complex(A),qutip,qutip,v5.0.4,,,,_arr_to_complex,(A),,,,,,,,,,,,,
qutip_qutip_v5.0.4,semidefinite.py,python,"_kron(A, B)",function,,,,"Function: _kron(A, B)",qutip,qutip,v5.0.4,,,,_kron,"(A, B)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,semidefinite.py,python,"_conj(W, A)",function,,,,"Function: _conj(W, A)",qutip,qutip,v5.0.4,,,,_conj,"(W, A)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,semidefinite.py,python,dnorm_problem(dim),function,,,,Function: dnorm_problem(dim),qutip,qutip,v5.0.4,,,,dnorm_problem,(dim),,,,,,,,,,,,,
qutip_qutip_v5.0.4,semidefinite.py,python,"dnorm_sparse_problem(dim, J_dat)",function,,,,"Function: dnorm_sparse_problem(dim, J_dat)",qutip,qutip,v5.0.4,,,,dnorm_sparse_problem,"(dim, J_dat)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,semidefinite.py,python,"Complex = collections.namedtuple(""Complex"", [""re"", ""im""])",constant,"Complex = collections.namedtuple(""Complex"", [""re"", ""im""])",Complex,"collections.namedtuple(""Complex"", [""re"", ""im""])","Constant: Complex = collections.namedtuple(""Complex"", [""re"", ""im""])",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,semidefinite.py,python,collections,import,,,,Import: collections,qutip,qutip,v5.0.4,import collections,,collections,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,semidefinite.py,python,functools,import,,,,Import: functools,qutip,qutip,v5.0.4,import functools,,functools,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,semidefinite.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,semidefinite.py,python,scipy.sparse,import,,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,,scipy.sparse,,,,,,,,,,,,,,,
,semidefinite.py,python,,,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,semidefinite.py,python,,,,,,Directory: qutip\core\semidefinite.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"_promote_to_zero_list(arg, length)",function,,,,"Function: _promote_to_zero_list(arg, length)",qutip,qutip,v5.0.4,,,,_promote_to_zero_list,"(arg, length)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,_to_space(dimensions),function,,,,Function: _to_space(dimensions),qutip,qutip,v5.0.4,,,,_to_space,(dimensions),,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"basis(dimensions, n=None, offset=None, *, dtype=None)",function,,,,"Function: basis(dimensions, n=None, offset=None, *, dtype=None)",qutip,qutip,v5.0.4,,,,basis,"(dimensions, n=None, offset=None, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"qutrit_basis(*, dtype=None)",function,,,,"Function: qutrit_basis(*, dtype=None)",qutip,qutip,v5.0.4,,,,qutrit_basis,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"coherent(N, alpha, offset=0, method=None, *, dtype=None)",function,,,,"Function: coherent(N, alpha, offset=0, method=None, *, dtype=None)",qutip,qutip,v5.0.4,,,,coherent,"(N, alpha, offset=0, method=None, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"coherent_dm(N, alpha, offset=0, method='operator', *, dtype=None)",function,,,,"Function: coherent_dm(N, alpha, offset=0, method='operator', *, dtype=None)",qutip,qutip,v5.0.4,,,,coherent_dm,"(N, alpha, offset=0, method='operator', *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"fock_dm(dimensions, n=None, offset=None, *, dtype=None)",function,,,,"Function: fock_dm(dimensions, n=None, offset=None, *, dtype=None)",qutip,qutip,v5.0.4,,,,fock_dm,"(dimensions, n=None, offset=None, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"fock(dimensions, n=None, offset=None, *, dtype=None)",function,,,,"Function: fock(dimensions, n=None, offset=None, *, dtype=None)",qutip,qutip,v5.0.4,,,,fock,"(dimensions, n=None, offset=None, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"thermal_dm(N, n, method='operator', *, dtype=None)",function,,,,"Function: thermal_dm(N, n, method='operator', *, dtype=None)",qutip,qutip,v5.0.4,,,,thermal_dm,"(N, n, method='operator', *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"maximally_mixed_dm(dimensions, *, dtype=None)",function,,,,"Function: maximally_mixed_dm(dimensions, *, dtype=None)",qutip,qutip,v5.0.4,,,,maximally_mixed_dm,"(dimensions, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,ket2dm(Q),function,,,,Function: ket2dm(Q),qutip,qutip,v5.0.4,,,,ket2dm,(Q),,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"projection(dimensions, n, m, offset=None, *, dtype=None)",function,,,,"Function: projection(dimensions, n, m, offset=None, *, dtype=None)",qutip,qutip,v5.0.4,,,,projection,"(dimensions, n, m, offset=None, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"qstate(string, *, dtype=None)",function,,,,"Function: qstate(string, *, dtype=None)",qutip,qutip,v5.0.4,,,,qstate,"(string, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,_character_to_qudit(x),function,,,,Function: _character_to_qudit(x),qutip,qutip,v5.0.4,,,,_character_to_qudit,(x),,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"ket(seq, dim=2, *, dtype=None)",function,,,,"Function: ket(seq, dim=2, *, dtype=None)",qutip,qutip,v5.0.4,,,,ket,"(seq, dim=2, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"bra(seq, dim=2, *, dtype=None)",function,,,,"Function: bra(seq, dim=2, *, dtype=None)",qutip,qutip,v5.0.4,,,,bra,"(seq, dim=2, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"state_number_enumerate(dims, excitations=None)",function,,,,"Function: state_number_enumerate(dims, excitations=None)",qutip,qutip,v5.0.4,,,,state_number_enumerate,"(dims, excitations=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"state_number_index(dims, state)",function,,,,"Function: state_number_index(dims, state)",qutip,qutip,v5.0.4,,,,state_number_index,"(dims, state)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"state_index_number(dims, index)",function,,,,"Function: state_index_number(dims, index)",qutip,qutip,v5.0.4,,,,state_index_number,"(dims, index)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"state_number_qobj(dims, state, *, dtype=None)",function,,,,"Function: state_number_qobj(dims, state, *, dtype=None)",qutip,qutip,v5.0.4,,,,state_number_qobj,"(dims, state, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"phase_basis(N, m, phi0=0, *, dtype=None)",function,,,,"Function: phase_basis(N, m, phi0=0, *, dtype=None)",qutip,qutip,v5.0.4,,,,phase_basis,"(N, m, phi0=0, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"zero_ket(dimensions, *, dtype=None)",function,,,,"Function: zero_ket(dimensions, *, dtype=None)",qutip,qutip,v5.0.4,,,,zero_ket,"(dimensions, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"spin_state(j, m, type='ket', *, dtype=None)",function,,,,"Function: spin_state(j, m, type='ket', *, dtype=None)",qutip,qutip,v5.0.4,,,,spin_state,"(j, m, type='ket', *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"spin_coherent(j, theta, phi, type='ket', *, dtype=None)",function,,,,"Function: spin_coherent(j, theta, phi, type='ket', *, dtype=None)",qutip,qutip,v5.0.4,,,,spin_coherent,"(j, theta, phi, type='ket', *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"bell_state(state='00', *, dtype=None)",function,,,,"Function: bell_state(state='00', *, dtype=None)",qutip,qutip,v5.0.4,,,,bell_state,"(state='00', *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"singlet_state(*, dtype=None)",function,,,,"Function: singlet_state(*, dtype=None)",qutip,qutip,v5.0.4,,,,singlet_state,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"triplet_states(*, dtype=None)",function,,,,"Function: triplet_states(*, dtype=None)",qutip,qutip,v5.0.4,,,,triplet_states,"(*, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"w_state(N_qubit, *, dtype=None)",function,,,,"Function: w_state(N_qubit, *, dtype=None)",qutip,qutip,v5.0.4,,,,w_state,"(N_qubit, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"ghz_state(N_qubit, *, dtype=None)",function,,,,"Function: ghz_state(N_qubit, *, dtype=None)",qutip,qutip,v5.0.4,,,,ghz_state,"(N_qubit, *, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"__all__ = ['basis', 'qutrit_basis', 'coherent', 'coherent_dm', 'fock_dm',
           'fock', 'thermal_dm', 'maximally_mixed_dm', 'ket2dm', 'projection',
           'qstate', 'ket', 'bra', 'state_number_enumerate',
           'state_number_index', 'state_index_number', 'state_number_qobj',
           'phase_basis', 'zero_ket', 'spin_state', 'spin_coherent',
           'bell_state', 'singlet_state', 'triplet_states', 'w_state',
           'ghz_state']",constant,"__all__ = ['basis', 'qutrit_basis', 'coherent', 'coherent_dm', 'fock_dm',
           'fock', 'thermal_dm', 'maximally_mixed_dm', 'ket2dm', 'projection',
           'qstate', 'ket', 'bra', 'state_number_enumerate',
           'state_number_index', 'state_index_number', 'state_number_qobj',
           'phase_basis', 'zero_ket', 'spin_state', 'spin_coherent',
           'bell_state', 'singlet_state', 'triplet_states', 'w_state',
           'ghz_state']",__all__,"['basis', 'qutrit_basis', 'coherent', 'coherent_dm', 'fock_dm',
           'fock', 'thermal_dm', 'maximally_mixed_dm', 'ket2dm', 'projection',
           'qstate', 'ket', 'bra', 'state_number_enumerate',
           'state_number_index', 'state_index_number', 'state_number_qobj',
           'phase_basis', 'zero_ket', 'spin_state', 'spin_coherent',
           'bell_state', 'singlet_state', 'triplet_states', 'w_state',
           'ghz_state']","Constant: __all__ = ['basis', 'qutrit_basis', 'coherent', 'coherent_dm', 'fock_dm',
           'fock', 'thermal_dm', 'maximally_mixed_dm', 'ket2dm', 'projection',
           'qstate', 'ket', 'bra', 'state_number_enumerate',
           'state_number_index', 'state_index_number', 'state_number_qobj',
           'phase_basis', 'zero_ket', 'spin_state', 'spin_coherent',
           'bell_state', 'singlet_state', 'triplet_states', 'w_state',
           'ghz_state']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"_COHERENT_METHODS = ('operator', 'analytic')",constant,"_COHERENT_METHODS = ('operator', 'analytic')",_COHERENT_METHODS,"('operator', 'analytic')","Constant: _COHERENT_METHODS = ('operator', 'analytic')",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"_qubit_dict = {
    'g': 0,  # ground state
    'e': 1,  # excited state
    'u': 0,  # spin up
    'd': 1,  # spin down
    'H': 0,  # horizontal polarization
    'V': 1,  # vertical polarization
}",constant,"_qubit_dict = {
    'g': 0,  # ground state
    'e': 1,  # excited state
    'u': 0,  # spin up
    'd': 1,  # spin down
    'H': 0,  # horizontal polarization
    'V': 1,  # vertical polarization
}",_qubit_dict,"{
    'g': 0,  # ground state
    'e': 1,  # excited state
    'u': 0,  # spin up
    'd': 1,  # spin down
    'H': 0,  # horizontal polarization
    'V': 1,  # vertical polarization
}","Constant: _qubit_dict = {
    'g': 0,  # ground state
    'e': 1,  # excited state
    'u': 0,  # spin up
    'd': 1,  # spin down
    'H': 0,  # horizontal polarization
    'V': 1,  # vertical polarization
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,"_BELL_STATES = {
    '00': np.sqrt(0.5) * (basis([2, 2], [0, 0]) + basis([2, 2], [1, 1])),
    '01': np.sqrt(0.5) * (basis([2, 2], [0, 0]) - basis([2, 2], [1, 1])),
    '10': np.sqrt(0.5) * (basis([2, 2], [0, 1]) + basis([2, 2], [1, 0])),
    '11': np.sqrt(0.5) * (basis([2, 2], [0, 1]) - basis([2, 2], [1, 0])),
}",constant,"_BELL_STATES = {
    '00': np.sqrt(0.5) * (basis([2, 2], [0, 0]) + basis([2, 2], [1, 1])),
    '01': np.sqrt(0.5) * (basis([2, 2], [0, 0]) - basis([2, 2], [1, 1])),
    '10': np.sqrt(0.5) * (basis([2, 2], [0, 1]) + basis([2, 2], [1, 0])),
    '11': np.sqrt(0.5) * (basis([2, 2], [0, 1]) - basis([2, 2], [1, 0])),
}",_BELL_STATES,"{
    '00': np.sqrt(0.5) * (basis([2, 2], [0, 0]) + basis([2, 2], [1, 1])),
    '01': np.sqrt(0.5) * (basis([2, 2], [0, 0]) - basis([2, 2], [1, 1])),
    '10': np.sqrt(0.5) * (basis([2, 2], [0, 1]) + basis([2, 2], [1, 0])),
    '11': np.sqrt(0.5) * (basis([2, 2], [0, 1]) - basis([2, 2], [1, 0])),
}","Constant: _BELL_STATES = {
    '00': np.sqrt(0.5) * (basis([2, 2], [0, 0]) + basis([2, 2], [1, 1])),
    '01': np.sqrt(0.5) * (basis([2, 2], [0, 0]) - basis([2, 2], [1, 1])),
    '10': np.sqrt(0.5) * (basis([2, 2], [0, 1]) + basis([2, 2], [1, 0])),
    '11': np.sqrt(0.5) * (basis([2, 2], [0, 1]) - basis([2, 2], [1, 0])),
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,itertools,import,,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,,itertools,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,numbers,import,,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,,numbers,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,warnings,import,,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,,warnings,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,scipy.sparse,import,,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,,scipy.sparse,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,states.py,python,itertools,import,,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,,itertools,,,,,,,,,,,,,,,
,states.py,python,,,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,states.py,python,,,,,,Directory: qutip\core\states.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,subsystem_apply.py,python,"subsystem_apply(state, channel, mask, reference=False)",function,,,,"Function: subsystem_apply(state, channel, mask, reference=False)",qutip,qutip,v5.0.4,,,,subsystem_apply,"(state, channel, mask, reference=False)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,subsystem_apply.py,python,"_subsystem_apply_ket(state, channel, mask)",function,,,,"Function: _subsystem_apply_ket(state, channel, mask)",qutip,qutip,v5.0.4,,,,_subsystem_apply_ket,"(state, channel, mask)",,,,,,,,,"# TODO Write more efficient code for single-matrix map on pure states",,,,
qutip_qutip_v5.0.4,subsystem_apply.py,python,"_subsystem_apply_ket(state, channel, mask)",function,,,,"Function: _subsystem_apply_ket(state, channel, mask)",qutip,qutip,v5.0.4,,,,_subsystem_apply_ket,"(state, channel, mask)",,,,,,,,,"# TODO Write more efficient code for single-subsystem map . . .",,,,
qutip_qutip_v5.0.4,subsystem_apply.py,python,"_subsystem_apply_dm(state, channel, mask)",function,,,,"Function: _subsystem_apply_dm(state, channel, mask)",qutip,qutip,v5.0.4,,,,_subsystem_apply_dm,"(state, channel, mask)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,subsystem_apply.py,python,"_one_subsystem_apply(state, channel, idx)",function,,,,"Function: _one_subsystem_apply(state, channel, idx)",qutip,qutip,v5.0.4,,,,_one_subsystem_apply,"(state, channel, idx)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,subsystem_apply.py,python,"_block_apply(block, channel)",function,,,,"Function: _block_apply(block, channel)",qutip,qutip,v5.0.4,,,,_block_apply,"(block, channel)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,subsystem_apply.py,python,"_top_apply_U(block, channel)",function,,,,"Function: _top_apply_U(block, channel)",qutip,qutip,v5.0.4,,,,_top_apply_U,"(block, channel)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,subsystem_apply.py,python,"_top_apply_S(block, channel)",function,,,,"Function: _top_apply_S(block, channel)",qutip,qutip,v5.0.4,,,,_top_apply_S,"(block, channel)",,,,,,,,,"# If the channel is a super-operator, perform second block decomposition;",,,,
qutip_qutip_v5.0.4,subsystem_apply.py,python,"_top_apply_S(block, channel)",function,,,,"Function: _top_apply_S(block, channel)",qutip,qutip,v5.0.4,,,,_top_apply_S,"(block, channel)",,,,,,,,,"# block-size matches Hilbert space of affected subsystem:",,,,
qutip_qutip_v5.0.4,subsystem_apply.py,python,"_top_apply_S(block, channel)",function,,,,"Function: _top_apply_S(block, channel)",qutip,qutip,v5.0.4,,,,_top_apply_S,"(block, channel)",,,,,,,,,"# FIXME use state shape?",,,,
qutip_qutip_v5.0.4,subsystem_apply.py,python,"_block_split(mat_in, n_v, n_h)",function,,,,"Function: _block_split(mat_in, n_v, n_h)",qutip,qutip,v5.0.4,,,,_block_split,"(mat_in, n_v, n_h)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,subsystem_apply.py,python,_block_join(mat_in),function,,,,Function: _block_join(mat_in),qutip,qutip,v5.0.4,,,,_block_join,(mat_in),,,,,,,,,,,,,
qutip_qutip_v5.0.4,subsystem_apply.py,python,"_block_col(mat_in, n_v, n_h)",function,,,,"Function: _block_col(mat_in, n_v, n_h)",qutip,qutip,v5.0.4,,,,_block_col,"(mat_in, n_v, n_h)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,subsystem_apply.py,python,"_block_stack(arr_in, n_v, n_h)",function,,,,"Function: _block_stack(arr_in, n_v, n_h)",qutip,qutip,v5.0.4,,,,_block_stack,"(arr_in, n_v, n_h)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,subsystem_apply.py,python,"_subsystem_apply_reference(state, channel, mask)",function,,,,"Function: _subsystem_apply_reference(state, channel, mask)",qutip,qutip,v5.0.4,,,,_subsystem_apply_reference,"(state, channel, mask)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,subsystem_apply.py,python,__all__ = ['subsystem_apply'],constant,__all__ = ['subsystem_apply'],__all__,['subsystem_apply'],Constant: __all__ = ['subsystem_apply'],qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,subsystem_apply.py,python,itertools,import,,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,,itertools,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,subsystem_apply.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
,subsystem_apply.py,python,,,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,subsystem_apply.py,python,,,,,,Directory: qutip\core\subsystem_apply.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,superoperator.py,python,_map_over_compound_operators(f),function,,,,Function: _map_over_compound_operators(f),qutip,qutip,v5.0.4,,,,_map_over_compound_operators,(f),,,,,,,,,,,,,
qutip_qutip_v5.0.4,superoperator.py,python,"liouvillian(H=None, c_ops=None, data_only=False, chi=None)",function,,,,"Function: liouvillian(H=None, c_ops=None, data_only=False, chi=None)",qutip,qutip,v5.0.4,,,,liouvillian,"(H=None, c_ops=None, data_only=False, chi=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,superoperator.py,python,"lindblad_dissipator(a, b=None, data_only=False, chi=None)",function,,,,"Function: lindblad_dissipator(a, b=None, data_only=False, chi=None)",qutip,qutip,v5.0.4,,,,lindblad_dissipator,"(a, b=None, data_only=False, chi=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,superoperator.py,python,stack_columns(matrix),function,,,,Function: stack_columns(matrix),qutip,qutip,v5.0.4,,,,stack_columns,(matrix),,,,,,,,,,,,,
qutip_qutip_v5.0.4,superoperator.py,python,"unstack_columns(vector, shape=None)",function,,,,"Function: unstack_columns(vector, shape=None)",qutip,qutip,v5.0.4,,,,unstack_columns,"(vector, shape=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,superoperator.py,python,"unstacked_index(size, index)",function,,,,"Function: unstacked_index(size, index)",qutip,qutip,v5.0.4,,,,unstacked_index,"(size, index)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,superoperator.py,python,"stacked_index(size, row, col)",function,,,,"Function: stacked_index(size, row, col)",qutip,qutip,v5.0.4,,,,stacked_index,"(size, row, col)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,superoperator.py,python,_drop_projected_dims(dims),function,,,,Function: _drop_projected_dims(dims),qutip,qutip,v5.0.4,,,,_drop_projected_dims,(dims),,,,,,,,,,,,,
qutip_qutip_v5.0.4,superoperator.py,python,"sprepost(A, B)",function,,,,"Function: sprepost(A, B)",qutip,qutip,v5.0.4,,,,sprepost,"(A, B)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,superoperator.py,python,_to_super_of_tensor(q_oper),function,,,,Function: _to_super_of_tensor(q_oper),qutip,qutip,v5.0.4,,,,_to_super_of_tensor,(q_oper),,,,,,,,,,,,,
qutip_qutip_v5.0.4,superoperator.py,python,_to_tensor_of_super(q_oper),function,,,,Function: _to_tensor_of_super(q_oper),qutip,qutip,v5.0.4,,,,_to_tensor_of_super,(q_oper),,,,,,,,,,,,,
qutip_qutip_v5.0.4,superoperator.py,python,reshuffle(q_oper),function,,,,Function: reshuffle(q_oper),qutip,qutip,v5.0.4,,,,reshuffle,(q_oper),,,,,,,,,,,,,
qutip_qutip_v5.0.4,superoperator.py,python,"__all__ = [
    'liouvillian', 'lindblad_dissipator', 'operator_to_vector',
    'vector_to_operator', 'stack_columns', 'unstack_columns', 'stacked_index',
    'unstacked_index', 'spost', 'spre', 'sprepost', 'reshuffle',
]",constant,"__all__ = [
    'liouvillian', 'lindblad_dissipator', 'operator_to_vector',
    'vector_to_operator', 'stack_columns', 'unstack_columns', 'stacked_index',
    'unstacked_index', 'spost', 'spre', 'sprepost', 'reshuffle',
]",__all__,"[
    'liouvillian', 'lindblad_dissipator', 'operator_to_vector',
    'vector_to_operator', 'stack_columns', 'unstack_columns', 'stacked_index',
    'unstacked_index', 'spost', 'spre', 'sprepost', 'reshuffle',
]","Constant: __all__ = [
    'liouvillian', 'lindblad_dissipator', 'operator_to_vector',
    'vector_to_operator', 'stack_columns', 'unstack_columns', 'stacked_index',
    'unstacked_index', 'spost', 'spre', 'sprepost', 'reshuffle',
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,superoperator.py,python,functools,import,,,,Import: functools,qutip,qutip,v5.0.4,import functools,,functools,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,superoperator.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
,superoperator.py,python,,,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,superoperator.py,python,,,,,,Directory: qutip\core\superoperator.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,_superpauli_basis(nq=1),function,,,,Function: _superpauli_basis(nq=1),qutip,qutip,v5.0.4,,,,_superpauli_basis,(nq=1),,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,_int_log_two(x),function,,,,Function: _int_log_two(x),qutip,qutip,v5.0.4,,,,_int_log_two,(x),,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,_is_power_of_two(x),function,,,,Function: _is_power_of_two(x),qutip,qutip,v5.0.4,,,,_is_power_of_two,(x),,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,_nq(dims),function,,,,Function: _nq(dims),qutip,qutip,v5.0.4,,,,_nq,(dims),,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,isqubitdims(dims),function,,,,Function: isqubitdims(dims),qutip,qutip,v5.0.4,,,,isqubitdims,(dims),,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,_to_superpauli(q_oper),function,,,,Function: _to_superpauli(q_oper),qutip,qutip,v5.0.4,,,,_to_superpauli,(q_oper),,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,"_choi_to_kraus(q_oper, tol=1e-9)",function,,,,"Function: _choi_to_kraus(q_oper, tol=1e-9)",qutip,qutip,v5.0.4,,,,_choi_to_kraus,"(q_oper, tol=1e-9)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,kraus_to_choi(kraus_ops),function,,,,Function: kraus_to_choi(kraus_ops),qutip,qutip,v5.0.4,,,,kraus_to_choi,(kraus_ops),,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,kraus_to_super(kraus_list),function,,,,Function: kraus_to_super(kraus_list),qutip,qutip,v5.0.4,,,,kraus_to_super,(kraus_list),,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,_super_tofrom_choi(q_oper),function,,,,Function: _super_tofrom_choi(q_oper),qutip,qutip,v5.0.4,,,,_super_tofrom_choi,(q_oper),,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,_choi_to_chi(q_oper),function,,,,Function: _choi_to_chi(q_oper),qutip,qutip,v5.0.4,,,,_choi_to_chi,(q_oper),,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,_chi_to_choi(q_oper),function,,,,Function: _chi_to_choi(q_oper),qutip,qutip,v5.0.4,,,,_chi_to_choi,(q_oper),,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,"_svd_u_to_kraus(U, S, d, dK, indims, outdims)",function,,,,"Function: _svd_u_to_kraus(U, S, d, dK, indims, outdims)",qutip,qutip,v5.0.4,,,,_svd_u_to_kraus,"(U, S, d, dK, indims, outdims)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,"_generalized_kraus(q_oper, threshold=1e-10)",function,,,,"Function: _generalized_kraus(q_oper, threshold=1e-10)",qutip,qutip,v5.0.4,,,,_generalized_kraus,"(q_oper, threshold=1e-10)",,,,,,,,,"# TODO: document!",,,,
qutip_qutip_v5.0.4,superop_reps.py,python,"_generalized_kraus(q_oper, threshold=1e-10)",function,,,,"Function: _generalized_kraus(q_oper, threshold=1e-10)",qutip,qutip,v5.0.4,,,,_generalized_kraus,"(q_oper, threshold=1e-10)",,,,,,,,,"# TODO: use this to generalize to_kraus to the case where U != V.",,,,
qutip_qutip_v5.0.4,superop_reps.py,python,"_generalized_kraus(q_oper, threshold=1e-10)",function,,,,"Function: _generalized_kraus(q_oper, threshold=1e-10)",qutip,qutip,v5.0.4,,,,_generalized_kraus,"(q_oper, threshold=1e-10)",,,,,,,,,"#       This is critical for non-CP maps, as appear in (for example)",,,,
qutip_qutip_v5.0.4,superop_reps.py,python,"_generalized_kraus(q_oper, threshold=1e-10)",function,,,,"Function: _generalized_kraus(q_oper, threshold=1e-10)",qutip,qutip,v5.0.4,,,,_generalized_kraus,"(q_oper, threshold=1e-10)",,,,,,,,,"#       diamond norm differences between two CP maps.",,,,
qutip_qutip_v5.0.4,superop_reps.py,python,"_choi_to_stinespring(q_oper, threshold=1e-10)",function,,,,"Function: _choi_to_stinespring(q_oper, threshold=1e-10)",qutip,qutip,v5.0.4,,,,_choi_to_stinespring,"(q_oper, threshold=1e-10)",,,,,,,,,"# TODO: document!",,,,
qutip_qutip_v5.0.4,superop_reps.py,python,to_choi(q_oper),function,,,,Function: to_choi(q_oper),qutip,qutip,v5.0.4,,,,to_choi,(q_oper),,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,to_chi(q_oper),function,,,,Function: to_chi(q_oper),qutip,qutip,v5.0.4,,,,to_chi,(q_oper),,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,to_super(q_oper),function,,,,Function: to_super(q_oper),qutip,qutip,v5.0.4,,,,to_super,(q_oper),,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,"to_kraus(q_oper, tol=1e-9)",function,,,,"Function: to_kraus(q_oper, tol=1e-9)",qutip,qutip,v5.0.4,,,,to_kraus,"(q_oper, tol=1e-9)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,"to_stinespring(q_oper, threshold=1e-10)",function,,,,"Function: to_stinespring(q_oper, threshold=1e-10)",qutip,qutip,v5.0.4,,,,to_stinespring,"(q_oper, threshold=1e-10)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,"__all__ = [
    'kraus_to_choi', 'kraus_to_super',
    'to_choi', 'to_chi', 'to_super', 'to_kraus', 'to_stinespring',
]",constant,"__all__ = [
    'kraus_to_choi', 'kraus_to_super',
    'to_choi', 'to_chi', 'to_super', 'to_kraus', 'to_stinespring',
]",__all__,"[
    'kraus_to_choi', 'kraus_to_super',
    'to_choi', 'to_chi', 'to_super', 'to_kraus', 'to_stinespring',
]","Constant: __all__ = [
    'kraus_to_choi', 'kraus_to_super',
    'to_choi', 'to_chi', 'to_super', 'to_kraus', 'to_stinespring',
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,"_SINGLE_QUBIT_PAULI_BASIS = (
    identity(2).to(_data.CSR),
    sigmax().to(_data.CSR),
    sigmay().to(_data.CSR),
    sigmaz().to(_data.CSR),
)",constant,"_SINGLE_QUBIT_PAULI_BASIS = (
    identity(2).to(_data.CSR),
    sigmax().to(_data.CSR),
    sigmay().to(_data.CSR),
    sigmaz().to(_data.CSR),
)",_SINGLE_QUBIT_PAULI_BASIS,"(
    identity(2).to(_data.CSR),
    sigmax().to(_data.CSR),
    sigmay().to(_data.CSR),
    sigmaz().to(_data.CSR),
)","Constant: _SINGLE_QUBIT_PAULI_BASIS = (
    identity(2).to(_data.CSR),
    sigmax().to(_data.CSR),
    sigmay().to(_data.CSR),
    sigmaz().to(_data.CSR),
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,itertools,import,,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,,itertools,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,numbers,import,,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,,numbers,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,superop_reps.py,python,scipy.linalg,import,,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg,,scipy.linalg,,,,,,,,,,,,,,,
,superop_reps.py,python,,,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,superop_reps.py,python,,,,,,Directory: qutip\core\superop_reps.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,tensor.py,python,[instance] _reverse_partial_tensor.right = right,class_field,,,,Class field: [instance] _reverse_partial_tensor.right = right,qutip,qutip,v5.0.4,,,,,,,_reverse_partial_tensor,__init__,"(self, right)",self.right = right,self.right = right,,,,,,,
qutip_qutip_v5.0.4,tensor.py,python,"_reverse_partial_tensor.__init__(self, right)",class_method,,,,"Class method: _reverse_partial_tensor.__init__(self, right)",qutip,qutip,v5.0.4,,,,,,,_reverse_partial_tensor,__init__,"(self, right)",,,,,,,,,
qutip_qutip_v5.0.4,tensor.py,python,"_reverse_partial_tensor.__call__(self, op)",class_method,,,,"Class method: _reverse_partial_tensor.__call__(self, op)",qutip,qutip,v5.0.4,,,,,,,_reverse_partial_tensor,__call__,"(self, op)",,,,,,,,,
qutip_qutip_v5.0.4,tensor.py,python,_reverse_partial_tensor,class,,,,Class: _reverse_partial_tensor,qutip,qutip,v5.0.4,,,,,,,_reverse_partial_tensor,,,,,,,,,,,
qutip_qutip_v5.0.4,tensor.py,python,tensor(*args),function,,,,Function: tensor(*args),qutip,qutip,v5.0.4,,,,tensor,(*args),,,,,,,,,,,,,
qutip_qutip_v5.0.4,tensor.py,python,super_tensor(*args),function,,,,Function: super_tensor(*args),qutip,qutip,v5.0.4,,,,super_tensor,(*args),,,,,,,,,,,,,
qutip_qutip_v5.0.4,tensor.py,python,_isoperlike(q),function,,,,Function: _isoperlike(q),qutip,qutip,v5.0.4,,,,_isoperlike,(q),,,,,,,,,,,,,
qutip_qutip_v5.0.4,tensor.py,python,_isketlike(q),function,,,,Function: _isketlike(q),qutip,qutip,v5.0.4,,,,_isketlike,(q),,,,,,,,,,,,,
qutip_qutip_v5.0.4,tensor.py,python,_isbralike(q),function,,,,Function: _isbralike(q),qutip,qutip,v5.0.4,,,,_isbralike,(q),,,,,,,,,,,,,
qutip_qutip_v5.0.4,tensor.py,python,composite(*args),function,,,,Function: composite(*args),qutip,qutip,v5.0.4,,,,composite,(*args),,,,,,,,,,,,,
qutip_qutip_v5.0.4,tensor.py,python,"_tensor_contract_single(arr, i, j)",function,,,,"Function: _tensor_contract_single(arr, i, j)",qutip,qutip,v5.0.4,,,,_tensor_contract_single,"(arr, i, j)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,tensor.py,python,"_tensor_contract_dense(arr, *pairs)",function,,,,"Function: _tensor_contract_dense(arr, *pairs)",qutip,qutip,v5.0.4,,,,_tensor_contract_dense,"(arr, *pairs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,tensor.py,python,"tensor_swap(q_oper, *pairs)",function,,,,"Function: tensor_swap(q_oper, *pairs)",qutip,qutip,v5.0.4,,,,tensor_swap,"(q_oper, *pairs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,tensor.py,python,"tensor_contract(qobj, *pairs)",function,,,,"Function: tensor_contract(qobj, *pairs)",qutip,qutip,v5.0.4,,,,tensor_contract,"(qobj, *pairs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,tensor.py,python,"_check_oper_dims(oper, dims=None, targets=None)",function,,,,"Function: _check_oper_dims(oper, dims=None, targets=None)",qutip,qutip,v5.0.4,,,,_check_oper_dims,"(oper, dims=None, targets=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,tensor.py,python,"_targets_to_list(targets, oper=None, N=None)",function,,,,"Function: _targets_to_list(targets, oper=None, N=None)",qutip,qutip,v5.0.4,,,,_targets_to_list,"(targets, oper=None, N=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,tensor.py,python,"expand_operator(oper, dims, targets, dtype=None)",function,,,,"Function: expand_operator(oper, dims, targets, dtype=None)",qutip,qutip,v5.0.4,,,,expand_operator,"(oper, dims, targets, dtype=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,tensor.py,python,"__all__ = [
    'tensor', 'super_tensor', 'composite', 'tensor_swap', 'tensor_contract',
    'expand_operator'
]",constant,"__all__ = [
    'tensor', 'super_tensor', 'composite', 'tensor_swap', 'tensor_contract',
    'expand_operator'
]",__all__,"[
    'tensor', 'super_tensor', 'composite', 'tensor_swap', 'tensor_contract',
    'expand_operator'
]","Constant: __all__ = [
    'tensor', 'super_tensor', 'composite', 'tensor_swap', 'tensor_contract',
    'expand_operator'
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,tensor.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,tensor.py,python,partial from functools,import,,,,Import: partial from functools,qutip,qutip,v5.0.4,from functools import partial,functools,partial,,,,,,,,,,,,,,,
,tensor.py,python,,,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,tensor.py,python,,,,,,Directory: qutip\core\tensor.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: qutip\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: qutip\core\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: qutip\core\cy,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: qutip\core\cy\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bench_openmp.py,python,"_min_timer(function, *args, **kwargs)",function,,,,"Function: _min_timer(function, *args, **kwargs)",qutip,qutip,v5.0.4,,,,_min_timer,"(function, *args, **kwargs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,bench_openmp.py,python,"system_bench(func, dims)",function,,,,"Function: system_bench(func, dims)",qutip,qutip,v5.0.4,,,,system_bench,"(func, dims)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,bench_openmp.py,python,calculate_openmp_thresh(),function,,,,Function: calculate_openmp_thresh(),qutip,qutip,v5.0.4,,,,calculate_openmp_thresh,(),,,,,,,,,"# if qset.num_cpus == 1:",,,,
qutip_qutip_v5.0.4,bench_openmp.py,python,calculate_openmp_thresh(),function,,,,Function: calculate_openmp_thresh(),qutip,qutip,v5.0.4,,,,calculate_openmp_thresh,(),,,,,,,,,"#    return qset.openmp_thresh",,,,
qutip_qutip_v5.0.4,bench_openmp.py,python,_jc_liouvillian(N),function,,,,Function: _jc_liouvillian(N),qutip,qutip,v5.0.4,,,,_jc_liouvillian,(N),,,,,,,,,,,,,
qutip_qutip_v5.0.4,bench_openmp.py,python,_opto_liouvillian(N),function,,,,Function: _opto_liouvillian(N),qutip,qutip,v5.0.4,,,,_opto_liouvillian,(N),,,,,,,,,,,,,
qutip_qutip_v5.0.4,bench_openmp.py,python,_spin_hamiltonian(N),function,,,,Function: _spin_hamiltonian(N),qutip,qutip,v5.0.4,,,,_spin_hamiltonian,(N),,,,,,,,,,,,,
qutip_qutip_v5.0.4,bench_openmp.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bench_openmp.py,python,default_timer from timeit,import,,,,Import: default_timer from timeit,qutip,qutip,v5.0.4,from timeit import default_timer as timer,timeit,default_timer,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bench_openmp.py,python,settings from qutip.settings,local_import,,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings as qset,qutip.settings,settings,,,qutip.settings,,,,,,,,,,,,
,bench_openmp.py,python,,,,,,File: qutip\core\cy\openmp,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,bench_openmp.py,python,,,,,,Directory: qutip\core\cy\openmp\bench_openmp.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,check_use_openmp(options),function,,,,Function: check_use_openmp(options),qutip,qutip,v5.0.4,,,,check_use_openmp,(options),,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,use_openmp(),function,,,,Function: use_openmp(),qutip,qutip,v5.0.4,,,,use_openmp,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,openmp_components(ptr_list),function,,,,Function: openmp_components(ptr_list),qutip,qutip,v5.0.4,,,,openmp_components,(ptr_list),,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,os,import,,,,Import: os,qutip,qutip,v5.0.4,import os,,os,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,utilities.py,python,settings from qutip.settings,local_import,,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings as qset,qutip.settings,settings,,,qutip.settings,,,,,,,,,,,,
,utilities.py,python,,,,,,File: qutip\core\cy\openmp,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,utilities.py,python,,,,,,Directory: qutip\core\cy\openmp\utilities.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: qutip\core\cy\openmp,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: qutip\core\cy\openmp\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,constant.py,python,"zeros_like_data(data, /)",function,,,,"Function: zeros_like_data(data, /)",qutip,qutip,v5.0.4,,,,zeros_like_data,"(data, /)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,constant.py,python,"zeros_like_dense(data, /)",function,,,,"Function: zeros_like_dense(data, /)",qutip,qutip,v5.0.4,,,,zeros_like_dense,"(data, /)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,constant.py,python,"identity_like_data(data, /)",function,,,,"Function: identity_like_data(data, /)",qutip,qutip,v5.0.4,,,,identity_like_data,"(data, /)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,constant.py,python,"identity_like_dense(data, /)",function,,,,"Function: identity_like_dense(data, /)",qutip,qutip,v5.0.4,,,,identity_like_dense,"(data, /)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,constant.py,python,"__all__ = ['zeros', 'identity', 'zeros_like', 'identity_like',
           'zeros_like_dense', 'identity_like_dense',
           'zeros_like_data', 'identity_like_data']",constant,"__all__ = ['zeros', 'identity', 'zeros_like', 'identity_like',
           'zeros_like_dense', 'identity_like_dense',
           'zeros_like_data', 'identity_like_data']",__all__,"['zeros', 'identity', 'zeros_like', 'identity_like',
           'zeros_like_dense', 'identity_like_dense',
           'zeros_like_data', 'identity_like_data']","Constant: __all__ = ['zeros', 'identity', 'zeros_like', 'identity_like',
           'zeros_like_dense', 'identity_like_dense',
           'zeros_like_data', 'identity_like_data']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,constant.py,python,"zeros = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('rows', _inspect.Parameter.POSITIONAL_OR_KEYWORD),
        _inspect.Parameter('cols', _inspect.Parameter.POSITIONAL_OR_KEYWORD),
    ]),
    name='zeros',
    module=__name__,
    inputs=(),
    out=True,
)",constant,"zeros = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('rows', _inspect.Parameter.POSITIONAL_OR_KEYWORD),
        _inspect.Parameter('cols', _inspect.Parameter.POSITIONAL_OR_KEYWORD),
    ]),
    name='zeros',
    module=__name__,
    inputs=(),
    out=True,
)",zeros,"_Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('rows', _inspect.Parameter.POSITIONAL_OR_KEYWORD),
        _inspect.Parameter('cols', _inspect.Parameter.POSITIONAL_OR_KEYWORD),
    ]),
    name='zeros',
    module=__name__,
    inputs=(),
    out=True,
)","Constant: zeros = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('rows', _inspect.Parameter.POSITIONAL_OR_KEYWORD),
        _inspect.Parameter('cols', _inspect.Parameter.POSITIONAL_OR_KEYWORD),
    ]),
    name='zeros',
    module=__name__,
    inputs=(),
    out=True,
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,constant.py,python,"identity = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('dimension',
                           _inspect.Parameter.POSITIONAL_OR_KEYWORD),
        _inspect.Parameter('scale', _inspect.Parameter.POSITIONAL_OR_KEYWORD,
                           default=1),
    ]),
    name='identity',
    module=__name__,
    inputs=(),
    out=True,
)",constant,"identity = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('dimension',
                           _inspect.Parameter.POSITIONAL_OR_KEYWORD),
        _inspect.Parameter('scale', _inspect.Parameter.POSITIONAL_OR_KEYWORD,
                           default=1),
    ]),
    name='identity',
    module=__name__,
    inputs=(),
    out=True,
)",identity,"_Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('dimension',
                           _inspect.Parameter.POSITIONAL_OR_KEYWORD),
        _inspect.Parameter('scale', _inspect.Parameter.POSITIONAL_OR_KEYWORD,
                           default=1),
    ]),
    name='identity',
    module=__name__,
    inputs=(),
    out=True,
)","Constant: identity = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('dimension',
                           _inspect.Parameter.POSITIONAL_OR_KEYWORD),
        _inspect.Parameter('scale', _inspect.Parameter.POSITIONAL_OR_KEYWORD,
                           default=1),
    ]),
    name='identity',
    module=__name__,
    inputs=(),
    out=True,
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,constant.py,python,"identity_like = _Dispatcher(
    identity_like_data, name='identity_like',
    module=__name__, inputs=(""data"",), out=False,
)",constant,"identity_like = _Dispatcher(
    identity_like_data, name='identity_like',
    module=__name__, inputs=(""data"",), out=False,
)",identity_like,"_Dispatcher(
    identity_like_data, name='identity_like',
    module=__name__, inputs=(""data"",), out=False,
)","Constant: identity_like = _Dispatcher(
    identity_like_data, name='identity_like',
    module=__name__, inputs=(""data"",), out=False,
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,constant.py,python,"zeros_like = _Dispatcher(
    zeros_like_data, name='zeros_like',
    module=__name__, inputs=(""data"",), out=False,
)",constant,"zeros_like = _Dispatcher(
    zeros_like_data, name='zeros_like',
    module=__name__, inputs=(""data"",), out=False,
)",zeros_like,"_Dispatcher(
    zeros_like_data, name='zeros_like',
    module=__name__, inputs=(""data"",), out=False,
)","Constant: zeros_like = _Dispatcher(
    zeros_like_data, name='zeros_like',
    module=__name__, inputs=(""data"",), out=False,
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,constant.py,python,inspect,import,,,,Import: inspect,qutip,qutip,v5.0.4,import inspect as _inspect,,inspect,,,,,,,,,,,,,,,
,constant.py,python,,,,,,File: qutip\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,constant.py,python,,,,,,Directory: qutip\core\data\constant.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,eigen.py,python,"_orthogonalize(vec, other)",function,,,,"Function: _orthogonalize(vec, other)",qutip,qutip,v5.0.4,,,,_orthogonalize,"(vec, other)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,eigen.py,python,"_eigs_dense(data, isherm, vecs, eigvals, num_large, num_small)",function,,,,"Function: _eigs_dense(data, isherm, vecs, eigvals, num_large, num_small)",qutip,qutip,v5.0.4,,,,_eigs_dense,"(data, isherm, vecs, eigvals, num_large, num_small)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,eigen.py,python,"_eigs_csr(data, isherm, vecs, eigvals, num_large, num_small, tol, maxiter)",function,,,,"Function: _eigs_csr(data, isherm, vecs, eigvals, num_large, num_small, tol, maxiter)",qutip,qutip,v5.0.4,,,,_eigs_csr,"(data, isherm, vecs, eigvals, num_large, num_small, tol, maxiter)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,eigen.py,python,_eigs_check_shape(data),function,,,,Function: _eigs_check_shape(data),qutip,qutip,v5.0.4,,,,_eigs_check_shape,(data),,,,,,,,,,,,,
qutip_qutip_v5.0.4,eigen.py,python,"_eigs_fix_eigvals(data, eigvals, sort)",function,,,,"Function: _eigs_fix_eigvals(data, eigvals, sort)",qutip,qutip,v5.0.4,,,,_eigs_fix_eigvals,"(data, eigvals, sort)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,eigen.py,python,"eigs_csr(data, /, isherm=None, vecs=True, sort='low', eigvals=0,
             tol=0, maxiter=100000)",function,,,,"Function: eigs_csr(data, /, isherm=None, vecs=True, sort='low', eigvals=0,
             tol=0, maxiter=100000)",qutip,qutip,v5.0.4,,,,eigs_csr,"(data, /, isherm=None, vecs=True, sort='low', eigvals=0,
             tol=0, maxiter=100000)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,eigen.py,python,"eigs_dense(data, /, isherm=None, vecs=True, sort='low', eigvals=0)",function,,,,"Function: eigs_dense(data, /, isherm=None, vecs=True, sort='low', eigvals=0)",qutip,qutip,v5.0.4,,,,eigs_dense,"(data, /, isherm=None, vecs=True, sort='low', eigvals=0)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,eigen.py,python,"svd_csr(data, vecs=True, k=6, **kw)",function,,,,"Function: svd_csr(data, vecs=True, k=6, **kw)",qutip,qutip,v5.0.4,,,,svd_csr,"(data, vecs=True, k=6, **kw)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,eigen.py,python,"svd_dense(data, vecs=True, **kw)",function,,,,"Function: svd_dense(data, vecs=True, **kw)",qutip,qutip,v5.0.4,,,,svd_dense,"(data, vecs=True, **kw)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,eigen.py,python,"__all__ = [
    'eigs', 'eigs_csr', 'eigs_dense',
    'svd', 'svd_csr', 'svd_dense',
]",constant,"__all__ = [
    'eigs', 'eigs_csr', 'eigs_dense',
    'svd', 'svd_csr', 'svd_dense',
]",__all__,"[
    'eigs', 'eigs_csr', 'eigs_dense',
    'svd', 'svd_csr', 'svd_dense',
]","Constant: __all__ = [
    'eigs', 'eigs_csr', 'eigs_dense',
    'svd', 'svd_csr', 'svd_dense',
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,eigen.py,python,"eigs = _Dispatcher(eigs_dense, name='eigs', inputs=('data',), out=False)",constant,"eigs = _Dispatcher(eigs_dense, name='eigs', inputs=('data',), out=False)",eigs,"_Dispatcher(eigs_dense, name='eigs', inputs=('data',), out=False)","Constant: eigs = _Dispatcher(eigs_dense, name='eigs', inputs=('data',), out=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,eigen.py,python,"svd = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('data', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter('vecs', _inspect.Parameter.POSITIONAL_OR_KEYWORD),
    ]),
    name='svd',
    module=__name__,
    inputs=('data',),
    out=False)",constant,"svd = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('data', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter('vecs', _inspect.Parameter.POSITIONAL_OR_KEYWORD),
    ]),
    name='svd',
    module=__name__,
    inputs=('data',),
    out=False)",svd,"_Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('data', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter('vecs', _inspect.Parameter.POSITIONAL_OR_KEYWORD),
    ]),
    name='svd',
    module=__name__,
    inputs=('data',),
    out=False)","Constant: svd = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('data', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter('vecs', _inspect.Parameter.POSITIONAL_OR_KEYWORD),
    ]),
    name='svd',
    module=__name__,
    inputs=('data',),
    out=False)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,eigen.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,eigen.py,python,scipy.linalg,import,,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg,,scipy.linalg,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,eigen.py,python,scipy.sparse,import,,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,,scipy.sparse,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,eigen.py,python,scipy.sparse.linalg,import,,,,Import: scipy.sparse.linalg,qutip,qutip,v5.0.4,import scipy.sparse.linalg,,scipy.sparse.linalg,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,eigen.py,python,combinations from itertools,import,,,,Import: combinations from itertools,qutip,qutip,v5.0.4,from itertools import combinations,itertools,combinations,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,eigen.py,python,inspect,import,,,,Import: inspect,qutip,qutip,v5.0.4,import inspect as _inspect,,inspect,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,eigen.py,python,settings from qutip.settings,local_import,,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings,qutip.settings,settings,,,qutip.settings,,,,,,,,,,,,
,eigen.py,python,,,,,,File: qutip\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,eigen.py,python,,,,,,Directory: qutip\core\data\eigen.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,expm.py,python,expm_csr(matrix: CSR) -> CSR,function,,,,Function: expm_csr(matrix: CSR) -> CSR,qutip,qutip,v5.0.4,,,,expm_csr,(matrix: CSR),,,,,,,,CSR,,,,,
qutip_qutip_v5.0.4,expm.py,python,expm_dia(matrix: Dia) -> Dia,function,,,,Function: expm_dia(matrix: Dia) -> Dia,qutip,qutip,v5.0.4,,,,expm_dia,(matrix: Dia),,,,,,,,Dia,,,,,
qutip_qutip_v5.0.4,expm.py,python,expm_csr_dense(matrix: CSR) -> Dense,function,,,,Function: expm_csr_dense(matrix: CSR) -> Dense,qutip,qutip,v5.0.4,,,,expm_csr_dense,(matrix: CSR),,,,,,,,Dense,,,,,
qutip_qutip_v5.0.4,expm.py,python,expm_dense(matrix: Dense) -> Dense,function,,,,Function: expm_dense(matrix: Dense) -> Dense,qutip,qutip,v5.0.4,,,,expm_dense,(matrix: Dense),,,,,,,,Dense,,,,,
qutip_qutip_v5.0.4,expm.py,python,logm_dense(matrix: Dense) -> Dense,function,,,,Function: logm_dense(matrix: Dense) -> Dense,qutip,qutip,v5.0.4,,,,logm_dense,(matrix: Dense),,,,,,,,Dense,,,,,
qutip_qutip_v5.0.4,expm.py,python,"__all__ = [
    'expm', 'expm_csr', 'expm_csr_dense', 'expm_dense', 'expm_dia',
    'logm', 'logm_dense',
]",constant,"__all__ = [
    'expm', 'expm_csr', 'expm_csr_dense', 'expm_dense', 'expm_dia',
    'logm', 'logm_dense',
]",__all__,"[
    'expm', 'expm_csr', 'expm_csr_dense', 'expm_dense', 'expm_dia',
    'logm', 'logm_dense',
]","Constant: __all__ = [
    'expm', 'expm_csr', 'expm_csr_dense', 'expm_dense', 'expm_dia',
    'logm', 'logm_dense',
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,expm.py,python,"expm = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
    ]),
    name='expm',
    module=__name__,
    inputs=('matrix',),
    out=True,
)",constant,"expm = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
    ]),
    name='expm',
    module=__name__,
    inputs=('matrix',),
    out=True,
)",expm,"_Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
    ]),
    name='expm',
    module=__name__,
    inputs=('matrix',),
    out=True,
)","Constant: expm = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
    ]),
    name='expm',
    module=__name__,
    inputs=('matrix',),
    out=True,
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,expm.py,python,"logm = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
    ]),
    name='logm',
    module=__name__,
    inputs=('matrix',),
    out=True,
)",constant,"logm = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
    ]),
    name='logm',
    module=__name__,
    inputs=('matrix',),
    out=True,
)",logm,"_Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
    ]),
    name='logm',
    module=__name__,
    inputs=('matrix',),
    out=True,
)","Constant: logm = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
    ]),
    name='logm',
    module=__name__,
    inputs=('matrix',),
    out=True,
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,expm.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,expm.py,python,scipy.sparse.linalg,import,,,,Import: scipy.sparse.linalg,qutip,qutip,v5.0.4,import scipy.sparse.linalg,,scipy.sparse.linalg,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,expm.py,python,scipy.linalg,import,,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg,,scipy.linalg,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,expm.py,python,inspect,import,,,,Import: inspect,qutip,qutip,v5.0.4,import inspect as _inspect,,inspect,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,expm.py,python,settings from qutip.settings,local_import,,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings,qutip.settings,settings,,,qutip.settings,,,,,,,,,,,,
,expm.py,python,,,,,,File: qutip\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,expm.py,python,,,,,,Directory: qutip\core\data\expm.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,extract.py,python,"extract_dense(matrix, format=None, copy=True)",function,,,,"Function: extract_dense(matrix, format=None, copy=True)",qutip,qutip,v5.0.4,,,,extract_dense,"(matrix, format=None, copy=True)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,extract.py,python,"extract_csr(matrix, format=None, copy=True)",function,,,,"Function: extract_csr(matrix, format=None, copy=True)",qutip,qutip,v5.0.4,,,,extract_csr,"(matrix, format=None, copy=True)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,extract.py,python,"extract_dia(matrix, format=None, copy=True)",function,,,,"Function: extract_dia(matrix, format=None, copy=True)",qutip,qutip,v5.0.4,,,,extract_dia,"(matrix, format=None, copy=True)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,extract.py,python,"__all__ = [""extract""]",constant,"__all__ = [""extract""]",__all__,"[""extract""]","Constant: __all__ = [""extract""]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,extract.py,python,"extract = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter(
            'format', _inspect.Parameter.POSITIONAL_OR_KEYWORD, default=None
        ),
        _inspect.Parameter(
            'copy', _inspect.Parameter.POSITIONAL_OR_KEYWORD, default=True
        )
    ]),
    name='extract',
    module=__name__,
    inputs=('matrix',),
    out=False,
)",constant,"extract = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter(
            'format', _inspect.Parameter.POSITIONAL_OR_KEYWORD, default=None
        ),
        _inspect.Parameter(
            'copy', _inspect.Parameter.POSITIONAL_OR_KEYWORD, default=True
        )
    ]),
    name='extract',
    module=__name__,
    inputs=('matrix',),
    out=False,
)",extract,"_Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter(
            'format', _inspect.Parameter.POSITIONAL_OR_KEYWORD, default=None
        ),
        _inspect.Parameter(
            'copy', _inspect.Parameter.POSITIONAL_OR_KEYWORD, default=True
        )
    ]),
    name='extract',
    module=__name__,
    inputs=('matrix',),
    out=False,
)","Constant: extract = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter(
            'format', _inspect.Parameter.POSITIONAL_OR_KEYWORD, default=None
        ),
        _inspect.Parameter(
            'copy', _inspect.Parameter.POSITIONAL_OR_KEYWORD, default=True
        )
    ]),
    name='extract',
    module=__name__,
    inputs=('matrix',),
    out=False,
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,extract.py,python,inspect,import,,,,Import: inspect,qutip,qutip,v5.0.4,import inspect as _inspect,,inspect,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,extract.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,qutip,qutip,v5.0.4,from scipy.sparse import csr_matrix,scipy.sparse,csr_matrix,,,scipy.sparse,,,,,,,,,,,,
,extract.py,python,,,,,,File: qutip\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,extract.py,python,,,,,,Directory: qutip\core\data\extract.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,linalg.py,python,"inv_dense(data, /)",function,,,,"Function: inv_dense(data, /)",qutip,qutip,v5.0.4,,,,inv_dense,"(data, /)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,linalg.py,python,"inv_csr(data, /)",function,,,,"Function: inv_csr(data, /)",qutip,qutip,v5.0.4,,,,inv_csr,"(data, /)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,linalg.py,python,"__all__ = ['inv', 'inv_csr', 'inv_dense']",constant,"__all__ = ['inv', 'inv_csr', 'inv_dense']",__all__,"['inv', 'inv_csr', 'inv_dense']","Constant: __all__ = ['inv', 'inv_csr', 'inv_dense']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,linalg.py,python,"inv = _Dispatcher(inv_dense, name='inv', inputs=('data',), out=True)",constant,"inv = _Dispatcher(inv_dense, name='inv', inputs=('data',), out=True)",inv,"_Dispatcher(inv_dense, name='inv', inputs=('data',), out=True)","Constant: inv = _Dispatcher(inv_dense, name='inv', inputs=('data',), out=True)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,linalg.py,python,scipy.linalg,import,,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg,,scipy.linalg,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,linalg.py,python,scipy.sparse,import,,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse,,scipy.sparse,,,,,,,,,,,,,,,
,linalg.py,python,,,,,,File: qutip\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,linalg.py,python,,,,,,Directory: qutip\core\data\linalg.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,make.py,python,"_diag_signature(diagonals, offsets=0, shape=None)",function,,,,"Function: _diag_signature(diagonals, offsets=0, shape=None)",qutip,qutip,v5.0.4,,,,_diag_signature,"(diagonals, offsets=0, shape=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,make.py,python,"one_element_csr(shape, position, value=1.0)",function,,,,"Function: one_element_csr(shape, position, value=1.0)",qutip,qutip,v5.0.4,,,,one_element_csr,"(shape, position, value=1.0)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,make.py,python,"one_element_dense(shape, position, value=1.0)",function,,,,"Function: one_element_dense(shape, position, value=1.0)",qutip,qutip,v5.0.4,,,,one_element_dense,"(shape, position, value=1.0)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,make.py,python,"one_element_dia(shape, position, value=1.0)",function,,,,"Function: one_element_dia(shape, position, value=1.0)",qutip,qutip,v5.0.4,,,,one_element_dia,"(shape, position, value=1.0)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,make.py,python,"__all__ = [
    'diag',
    'one_element_csr', 'one_element_dense', 'one_element_dia', 'one_element'
]",constant,"__all__ = [
    'diag',
    'one_element_csr', 'one_element_dense', 'one_element_dia', 'one_element'
]",__all__,"[
    'diag',
    'one_element_csr', 'one_element_dense', 'one_element_dia', 'one_element'
]","Constant: __all__ = [
    'diag',
    'one_element_csr', 'one_element_dense', 'one_element_dia', 'one_element'
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,make.py,python,"diag = _Dispatcher(_diag_signature, name='diag', inputs=(), out=True)",constant,"diag = _Dispatcher(_diag_signature, name='diag', inputs=(), out=True)",diag,"_Dispatcher(_diag_signature, name='diag', inputs=(), out=True)","Constant: diag = _Dispatcher(_diag_signature, name='diag', inputs=(), out=True)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,make.py,python,"one_element = _Dispatcher(one_element_dense, name='one_element',
                          inputs=(), out=True)",constant,"one_element = _Dispatcher(one_element_dense, name='one_element',
                          inputs=(), out=True)",one_element,"_Dispatcher(one_element_dense, name='one_element',
                          inputs=(), out=True)","Constant: one_element = _Dispatcher(one_element_dense, name='one_element',
                          inputs=(), out=True)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,make.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
,make.py,python,,,,,,File: qutip\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,make.py,python,,,,,,Directory: qutip\core\data\make.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,solve.py,python,"_splu(A, B, **kwargs)",function,,,,"Function: _splu(A, B, **kwargs)",qutip,qutip,v5.0.4,,,,_splu,"(A, B, **kwargs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,solve.py,python,"solve_csr_dense(matrix: Union[CSR, Dia], target: Dense, method=None,
                    options: dict={}) -> Dense",function,,,,"Function: solve_csr_dense(matrix: Union[CSR, Dia], target: Dense, method=None,
                    options: dict={}) -> Dense",qutip,qutip,v5.0.4,,,,solve_csr_dense,"(matrix: Union[CSR, Dia], target: Dense, method=None,
                    options: dict={})",,,,,,,,Dense,,,,,
qutip_qutip_v5.0.4,solve.py,python,"solve_dense(matrix: Dense, target: Data, method=None,
                options: dict={}) -> Dense",function,,,,"Function: solve_dense(matrix: Dense, target: Data, method=None,
                options: dict={}) -> Dense",qutip,qutip,v5.0.4,,,,solve_dense,"(matrix: Dense, target: Data, method=None,
                options: dict={})",,,,,,,,Dense,,,,,
qutip_qutip_v5.0.4,solve.py,python,"__all__ = [""solve_csr_dense"", ""solve_dia_dense"", ""solve_dense"", ""solve""]",constant,"__all__ = [""solve_csr_dense"", ""solve_dia_dense"", ""solve_dense"", ""solve""]",__all__,"[""solve_csr_dense"", ""solve_dia_dense"", ""solve_dense"", ""solve""]","Constant: __all__ = [""solve_csr_dense"", ""solve_dia_dense"", ""solve_dense"", ""solve""]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,solve.py,python,solve_dia_dense = solve_csr_dense,constant,solve_dia_dense = solve_csr_dense,solve_dia_dense,solve_csr_dense,Constant: solve_dia_dense = solve_csr_dense,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,solve.py,python,"solve = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter('target', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter('method', _inspect.Parameter.POSITIONAL_OR_KEYWORD,
                           default=None),
        _inspect.Parameter('options', _inspect.Parameter.POSITIONAL_OR_KEYWORD,
                           default={}),
    ]),
    name='solve',
    module=__name__,
    inputs=('matrix', 'target'),
    out=True,
)",constant,"solve = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter('target', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter('method', _inspect.Parameter.POSITIONAL_OR_KEYWORD,
                           default=None),
        _inspect.Parameter('options', _inspect.Parameter.POSITIONAL_OR_KEYWORD,
                           default={}),
    ]),
    name='solve',
    module=__name__,
    inputs=('matrix', 'target'),
    out=True,
)",solve,"_Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter('target', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter('method', _inspect.Parameter.POSITIONAL_OR_KEYWORD,
                           default=None),
        _inspect.Parameter('options', _inspect.Parameter.POSITIONAL_OR_KEYWORD,
                           default={}),
    ]),
    name='solve',
    module=__name__,
    inputs=('matrix', 'target'),
    out=True,
)","Constant: solve = _Dispatcher(
    _inspect.Signature([
        _inspect.Parameter('matrix', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter('target', _inspect.Parameter.POSITIONAL_ONLY),
        _inspect.Parameter('method', _inspect.Parameter.POSITIONAL_OR_KEYWORD,
                           default=None),
        _inspect.Parameter('options', _inspect.Parameter.POSITIONAL_OR_KEYWORD,
                           default={}),
    ]),
    name='solve',
    module=__name__,
    inputs=('matrix', 'target'),
    out=True,
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,solve.py,python,qutip.core.data,import,,,,Import: qutip.core.data,qutip,qutip,v5.0.4,import qutip.core.data as _data,,qutip.core.data,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,solve.py,python,scipy.sparse.linalg,import,,,,Import: scipy.sparse.linalg,qutip,qutip,v5.0.4,import scipy.sparse.linalg as splinalg,,scipy.sparse.linalg,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,solve.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,solve.py,python,warnings,import,,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,,warnings,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,solve.py,python,Union from typing,import,,,,Import: Union from typing,qutip,qutip,v5.0.4,from typing import Union,typing,Union,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,solve.py,python,inspect,import,,,,Import: inspect,qutip,qutip,v5.0.4,import inspect as _inspect,,inspect,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,solve.py,python,CSR from qutip.core.data,local_import,,,,Import: CSR from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Data, csr, Dense, Dia",qutip.core.data,CSR,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,solve.py,python,Data from qutip.core.data,local_import,,,,Import: Data from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Data, csr, Dense, Dia",qutip.core.data,Data,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,solve.py,python,csr from qutip.core.data,local_import,,,,Import: csr from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Data, csr, Dense, Dia",qutip.core.data,csr,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,solve.py,python,Dense from qutip.core.data,local_import,,,,Import: Dense from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Data, csr, Dense, Dia",qutip.core.data,Dense,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,solve.py,python,Dia from qutip.core.data,local_import,,,,Import: Dia from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Data, csr, Dense, Dia",qutip.core.data,Dia,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,solve.py,python,settings from qutip.settings,local_import,,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings,qutip.settings,settings,,,qutip.settings,,,,,,,,,,,,
,solve.py,python,,,,,,File: qutip\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,solve.py,python,,,,,,Directory: qutip\core\data\solve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,_creator_utils.py,python,is_data(arg),function,,,,Function: is_data(arg),qutip,qutip,v5.0.4,,,,is_data,(arg),,,,,,,,,,,,,
qutip_qutip_v5.0.4,_creator_utils.py,python,is_nparray(arg),function,,,,Function: is_nparray(arg),qutip,qutip,v5.0.4,,,,is_nparray,(arg),,,,,,,,,,,,,
qutip_qutip_v5.0.4,_creator_utils.py,python,true(arg),function,,,,Function: true(arg),qutip,qutip,v5.0.4,,,,true,(arg),,,,,,,,,,,,,
qutip_qutip_v5.0.4,_creator_utils.py,python,"data_copy(arg, shape, copy=True)",function,,,,"Function: data_copy(arg, shape, copy=True)",qutip,qutip,v5.0.4,,,,data_copy,"(arg, shape, copy=True)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,_creator_utils.py,python,"__all__ = [
    'data_copy',
    'is_data',
    'is_nparray',
    'isspmatrix_csr',
    'isspmatrix_dia',
    'issparse'
]",constant,"__all__ = [
    'data_copy',
    'is_data',
    'is_nparray',
    'isspmatrix_csr',
    'isspmatrix_dia',
    'issparse'
]",__all__,"[
    'data_copy',
    'is_data',
    'is_nparray',
    'isspmatrix_csr',
    'isspmatrix_dia',
    'issparse'
]","Constant: __all__ = [
    'data_copy',
    'is_data',
    'is_nparray',
    'isspmatrix_csr',
    'isspmatrix_dia',
    'issparse'
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,_creator_utils.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,_creator_utils.py,python,isspmatrix_csr from scipy.sparse,local_import,,,,Import: isspmatrix_csr from scipy.sparse,qutip,qutip,v5.0.4,"from scipy.sparse import isspmatrix_csr, issparse, isspmatrix_dia",scipy.sparse,isspmatrix_csr,,,scipy.sparse,,,,,,,,,,,,
qutip_qutip_v5.0.4,_creator_utils.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,qutip,qutip,v5.0.4,"from scipy.sparse import isspmatrix_csr, issparse, isspmatrix_dia",scipy.sparse,issparse,,,scipy.sparse,,,,,,,,,,,,
qutip_qutip_v5.0.4,_creator_utils.py,python,isspmatrix_dia from scipy.sparse,local_import,,,,Import: isspmatrix_dia from scipy.sparse,qutip,qutip,v5.0.4,"from scipy.sparse import isspmatrix_csr, issparse, isspmatrix_dia",scipy.sparse,isspmatrix_dia,,,scipy.sparse,,,,,,,,,,,,
,_creator_utils.py,python,,,,,,File: qutip\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,_creator_utils.py,python,,,,,,Directory: qutip\core\data\_creator_utils.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,__init__.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: qutip\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: qutip\core\data\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,rcsolve.py,python,"rcsolve(Hsys, psi0, tlist, e_ops, Q, wc, alpha, N, w_th, sparse=False,
            options=None)",function,,,,"Function: rcsolve(Hsys, psi0, tlist, e_ops, Q, wc, alpha, N, w_th, sparse=False,
            options=None)",qutip,qutip,v5.0.4,,,,rcsolve,"(Hsys, psi0, tlist, e_ops, Q, wc, alpha, N, w_th, sparse=False,
            options=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,rcsolve.py,python,__all__ = ['rcsolve'],constant,__all__ = ['rcsolve'],__all__,['rcsolve'],Constant: __all__ = ['rcsolve'],qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,rcsolve.py,python,warnings,import,,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,,warnings,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,rcsolve.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,rcsolve.py,python,scipy.sparse,import,,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,,scipy.sparse,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,rcsolve.py,python,matrix from numpy,import,,,,Import: matrix from numpy,qutip,qutip,v5.0.4,from numpy import matrix,numpy,matrix,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,rcsolve.py,python,linalg from numpy,import,,,,Import: linalg from numpy,qutip,qutip,v5.0.4,from numpy import linalg,numpy,linalg,,,,,,,,,,,,,,,
,rcsolve.py,python,,,,,,File: qutip\legacy,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,rcsolve.py,python,,,,,,Directory: qutip\legacy\rcsolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,__init__.py,python,warnings,import,,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,,warnings,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: qutip\legacy,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: qutip\legacy\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,[instance] MemoryCascade.H_S = H_S,class_field,,,,Class field: [instance] MemoryCascade.H_S = H_S,qutip,qutip,v5.0.4,,,,,,,MemoryCascade,__init__,"(
        self,
        H_S,
        L1,
        L2,
        S_matrix=None,
        c_ops_markov=None,
        integrator=""propagator"",
        options=None,
    )",self.H_S = H_S,self.H_S = H_S,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,[instance] MemoryCascade.sysdims = H_S.dims,class_field,,,,Class field: [instance] MemoryCascade.sysdims = H_S.dims,qutip,qutip,v5.0.4,,,,,,,MemoryCascade,__init__,"(
        self,
        H_S,
        L1,
        L2,
        S_matrix=None,
        c_ops_markov=None,
        integrator=""propagator"",
        options=None,
    )",self.sysdims = H_S.dims,self.sysdims = H_S.dims,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,[instance] MemoryCascade.Id = qeye(H_S.shape[0]),class_field,,,,Class field: [instance] MemoryCascade.Id = qeye(H_S.shape[0]),qutip,qutip,v5.0.4,,,,,,,MemoryCascade,__init__,"(
        self,
        H_S,
        L1,
        L2,
        S_matrix=None,
        c_ops_markov=None,
        integrator=""propagator"",
        options=None,
    )",self.Id = qeye(H_S.shape[0]),self.Id = qeye(H_S.shape[0]),,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,[instance] MemoryCascade.Id.dims = sysdims,class_field,,,,Class field: [instance] MemoryCascade.Id.dims = sysdims,qutip,qutip,v5.0.4,,,,,,,MemoryCascade,__init__,"(
        self,
        H_S,
        L1,
        L2,
        S_matrix=None,
        c_ops_markov=None,
        integrator=""propagator"",
        options=None,
    )",self.Id.dims = self.sysdims,self.Id.dims = self.sysdims,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,"[instance] MemoryCascade.Id = sprepost(Id, Id)",class_field,,,,"Class field: [instance] MemoryCascade.Id = sprepost(Id, Id)",qutip,qutip,v5.0.4,,,,,,,MemoryCascade,__init__,"(
        self,
        H_S,
        L1,
        L2,
        S_matrix=None,
        c_ops_markov=None,
        integrator=""propagator"",
        options=None,
    )","self.Id = sprepost(self.Id, self.Id)","self.Id = sprepost(self.Id, self.Id)",,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,"[instance] MemoryCascade.store_states = options.get(""store_states"", False)",class_field,,,,"Class field: [instance] MemoryCascade.store_states = options.get(""store_states"", False)",qutip,qutip,v5.0.4,,,,,,,MemoryCascade,__init__,"(
        self,
        H_S,
        L1,
        L2,
        S_matrix=None,
        c_ops_markov=None,
        integrator=""propagator"",
        options=None,
    )","self.store_states = self.options.get(""store_states"", False)","self.store_states = self.options.get(""store_states"", False)",,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,[instance] MemoryCascade.integrator = integrator,class_field,,,,Class field: [instance] MemoryCascade.integrator = integrator,qutip,qutip,v5.0.4,,,,,,,MemoryCascade,__init__,"(
        self,
        H_S,
        L1,
        L2,
        S_matrix=None,
        c_ops_markov=None,
        integrator=""propagator"",
        options=None,
    )",self.integrator = integrator,self.integrator = integrator,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,[instance] MemoryCascade._generators = {},class_field,,,,Class field: [instance] MemoryCascade._generators = {},qutip,qutip,v5.0.4,,,,,,,MemoryCascade,__init__,"(
        self,
        H_S,
        L1,
        L2,
        S_matrix=None,
        c_ops_markov=None,
        integrator=""propagator"",
        options=None,
    )",self._generators = {},self._generators = {},,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,"MemoryCascade.__init__(
        self,
        H_S,
        L1,
        L2,
        S_matrix=None,
        c_ops_markov=None,
        integrator=""propagator"",
        options=None,
    )",class_method,,,,"Class method: MemoryCascade.__init__(
        self,
        H_S,
        L1,
        L2,
        S_matrix=None,
        c_ops_markov=None,
        integrator=""propagator"",
        options=None,
    )",qutip,qutip,v5.0.4,,,,,,,MemoryCascade,__init__,"(
        self,
        H_S,
        L1,
        L2,
        S_matrix=None,
        c_ops_markov=None,
        integrator=""propagator"",
        options=None,
    )",,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,"MemoryCascade.generator(self, k)",class_method,,,,"Class method: MemoryCascade.generator(self, k)",qutip,qutip,v5.0.4,,,,,,,MemoryCascade,generator,"(self, k)",,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,"MemoryCascade.propagator(self, t, tau, notrace=False)",class_method,,,,"Class method: MemoryCascade.propagator(self, t, tau, notrace=False)",qutip,qutip,v5.0.4,,,,,,,MemoryCascade,propagator,"(self, t, tau, notrace=False)",,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,"MemoryCascade.outfieldpropagator(
        self, blist, tlist, tau, c1=None, c2=None, notrace=False
    )",class_method,,,,"Class method: MemoryCascade.outfieldpropagator(
        self, blist, tlist, tau, c1=None, c2=None, notrace=False
    )",qutip,qutip,v5.0.4,,,,,,,MemoryCascade,outfieldpropagator,"(
        self, blist, tlist, tau, c1=None, c2=None, notrace=False
    )",,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,"MemoryCascade.rhot(self, rho0, t, tau)",class_method,,,,"Class method: MemoryCascade.rhot(self, rho0, t, tau)",qutip,qutip,v5.0.4,,,,,,,MemoryCascade,rhot,"(self, rho0, t, tau)",,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,"MemoryCascade.outfieldcorr(self, rho0, blist, tlist, tau, c1=None, c2=None)",class_method,,,,"Class method: MemoryCascade.outfieldcorr(self, rho0, blist, tlist, tau, c1=None, c2=None)",qutip,qutip,v5.0.4,,,,,,,MemoryCascade,outfieldcorr,"(self, rho0, blist, tlist, tau, c1=None, c2=None)",,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,MemoryCascade,class,,,,Class: MemoryCascade,qutip,qutip,v5.0.4,,,,,,,MemoryCascade,,,,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,"_localop(op, l, k)",function,,,,"Function: _localop(op, l, k)",qutip,qutip,v5.0.4,,,,_localop,"(op, l, k)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,"_genptrace(E, k)",function,,,,"Function: _genptrace(E, k)",qutip,qutip,v5.0.4,,,,_genptrace,"(E, k)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,"_generator(k, H, L1, L2, S=None, c_ops_markov=None)",function,,,,"Function: _generator(k, H, L1, L2, S=None, c_ops_markov=None)",qutip,qutip,v5.0.4,,,,_generator,"(k, H, L1, L2, S=None, c_ops_markov=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,"_integrate(L, E0, ti, tf, integrator=""propagator"", opt=None)",function,,,,"Function: _integrate(L, E0, ti, tf, integrator=""propagator"", opt=None)",qutip,qutip,v5.0.4,,,,_integrate,"(L, E0, ti, tf, integrator=""propagator"", opt=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,"__all__ = [""MemoryCascade""]",constant,"__all__ = [""MemoryCascade""]",__all__,"[""MemoryCascade""]","Constant: __all__ = [""MemoryCascade""]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,warnings,import,,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,,warnings,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,sprepost from qutip,import,,,,Import: sprepost from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",qutip,sprepost,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,Qobj from qutip,import,,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",qutip,Qobj,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,spre from qutip,import,,,,Import: spre from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",qutip,spre,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,spost from qutip,import,,,,Import: spost from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",qutip,spost,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,liouvillian from qutip,import,,,,Import: liouvillian from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",qutip,liouvillian,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,qeye from qutip,import,,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",qutip,qeye,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,mesolve from qutip,import,,,,Import: mesolve from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",qutip,mesolve,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,propagator from qutip,import,,,,Import: propagator from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",qutip,propagator,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,composite from qutip,import,,,,Import: composite from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",qutip,composite,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,isket from qutip,import,,,,Import: isket from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",qutip,isket,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,ket2dm from qutip,import,,,,Import: ket2dm from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",qutip,ket2dm,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,memorycascade.py,python,tensor_contract from qutip,import,,,,Import: tensor_contract from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sprepost,
    Qobj,
    spre,
    spost,
    liouvillian,
    qeye,
    mesolve,
    propagator,
    composite,
    isket,
    ket2dm,
    tensor_contract,
)",qutip,tensor_contract,,,,,,,,,,,,,,,
,memorycascade.py,python,,,,,,File: qutip\legacy\nonmarkov,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,memorycascade.py,python,,,,,,Directory: qutip\legacy\nonmarkov\memorycascade.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: qutip\legacy\nonmarkov,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: qutip\legacy\nonmarkov\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,[instance] Dicke.N = N,class_field,,,,Class field: [instance] Dicke.N = N,qutip,qutip,v5.0.4,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",self.N = N,self.N = N,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,[instance] Dicke.hamiltonian = hamiltonian,class_field,,,,Class field: [instance] Dicke.hamiltonian = hamiltonian,qutip,qutip,v5.0.4,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",self.hamiltonian = hamiltonian,self.hamiltonian = hamiltonian,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,[instance] Dicke.emission = emission,class_field,,,,Class field: [instance] Dicke.emission = emission,qutip,qutip,v5.0.4,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",self.emission = emission,self.emission = emission,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,[instance] Dicke.dephasing = dephasing,class_field,,,,Class field: [instance] Dicke.dephasing = dephasing,qutip,qutip,v5.0.4,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",self.dephasing = dephasing,self.dephasing = dephasing,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,[instance] Dicke.pumping = pumping,class_field,,,,Class field: [instance] Dicke.pumping = pumping,qutip,qutip,v5.0.4,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",self.pumping = pumping,self.pumping = pumping,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,[instance] Dicke.collective_emission = collective_emission,class_field,,,,Class field: [instance] Dicke.collective_emission = collective_emission,qutip,qutip,v5.0.4,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",self.collective_emission = collective_emission,self.collective_emission = collective_emission,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,[instance] Dicke.collective_dephasing = collective_dephasing,class_field,,,,Class field: [instance] Dicke.collective_dephasing = collective_dephasing,qutip,qutip,v5.0.4,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",self.collective_dephasing = collective_dephasing,self.collective_dephasing = collective_dephasing,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,[instance] Dicke.collective_pumping = collective_pumping,class_field,,,,Class field: [instance] Dicke.collective_pumping = collective_pumping,qutip,qutip,v5.0.4,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",self.collective_pumping = collective_pumping,self.collective_pumping = collective_pumping,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,[instance] Dicke.nds = num_dicke_states(N),class_field,,,,Class field: [instance] Dicke.nds = num_dicke_states(N),qutip,qutip,v5.0.4,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",self.nds = num_dicke_states(self.N),self.nds = num_dicke_states(self.N),,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"[instance] Dicke.dshape = (num_dicke_states(N), num_dicke_states(N))",class_field,,,,"Class field: [instance] Dicke.dshape = (num_dicke_states(N), num_dicke_states(N))",qutip,qutip,v5.0.4,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )","self.dshape = (num_dicke_states(self.N), num_dicke_states(self.N))","self.dshape = (num_dicke_states(self.N), num_dicke_states(self.N))",,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,[instance] Pim.N = N,class_field,,,,Class field: [instance] Pim.N = N,qutip,qutip,v5.0.4,,,,,,,Pim,__init__,"(
        self,
        N,
        emission=0.0,
        dephasing=0,
        pumping=0,
        collective_emission=0,
        collective_pumping=0,
        collective_dephasing=0,
    )",self.N = N,self.N = N,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,[instance] Pim.emission = emission,class_field,,,,Class field: [instance] Pim.emission = emission,qutip,qutip,v5.0.4,,,,,,,Pim,__init__,"(
        self,
        N,
        emission=0.0,
        dephasing=0,
        pumping=0,
        collective_emission=0,
        collective_pumping=0,
        collective_dephasing=0,
    )",self.emission = emission,self.emission = emission,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,[instance] Pim.dephasing = dephasing,class_field,,,,Class field: [instance] Pim.dephasing = dephasing,qutip,qutip,v5.0.4,,,,,,,Pim,__init__,"(
        self,
        N,
        emission=0.0,
        dephasing=0,
        pumping=0,
        collective_emission=0,
        collective_pumping=0,
        collective_dephasing=0,
    )",self.dephasing = dephasing,self.dephasing = dephasing,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,[instance] Pim.pumping = pumping,class_field,,,,Class field: [instance] Pim.pumping = pumping,qutip,qutip,v5.0.4,,,,,,,Pim,__init__,"(
        self,
        N,
        emission=0.0,
        dephasing=0,
        pumping=0,
        collective_emission=0,
        collective_pumping=0,
        collective_dephasing=0,
    )",self.pumping = pumping,self.pumping = pumping,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,[instance] Pim.collective_pumping = collective_pumping,class_field,,,,Class field: [instance] Pim.collective_pumping = collective_pumping,qutip,qutip,v5.0.4,,,,,,,Pim,__init__,"(
        self,
        N,
        emission=0.0,
        dephasing=0,
        pumping=0,
        collective_emission=0,
        collective_pumping=0,
        collective_dephasing=0,
    )",self.collective_pumping = collective_pumping,self.collective_pumping = collective_pumping,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,[instance] Pim.collective_dephasing = collective_dephasing,class_field,,,,Class field: [instance] Pim.collective_dephasing = collective_dephasing,qutip,qutip,v5.0.4,,,,,,,Pim,__init__,"(
        self,
        N,
        emission=0.0,
        dephasing=0,
        pumping=0,
        collective_emission=0,
        collective_pumping=0,
        collective_dephasing=0,
    )",self.collective_dephasing = collective_dephasing,self.collective_dephasing = collective_dephasing,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,[instance] Pim.collective_emission = collective_emission,class_field,,,,Class field: [instance] Pim.collective_emission = collective_emission,qutip,qutip,v5.0.4,,,,,,,Pim,__init__,"(
        self,
        N,
        emission=0.0,
        dephasing=0,
        pumping=0,
        collective_emission=0,
        collective_pumping=0,
        collective_dephasing=0,
    )",self.collective_emission = collective_emission,self.collective_emission = collective_emission,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,[instance] Pim.M = {},class_field,,,,Class field: [instance] Pim.M = {},qutip,qutip,v5.0.4,,,,,,,Pim,__init__,"(
        self,
        N,
        emission=0.0,
        dephasing=0,
        pumping=0,
        collective_emission=0,
        collective_pumping=0,
        collective_dephasing=0,
    )",self.M = {},self.M = {},,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"Dicke.__init__(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",class_method,,,,"Class method: Dicke.__init__(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",qutip,qutip,v5.0.4,,,,,,,Dicke,__init__,"(
        self,
        N,
        hamiltonian=None,
        emission=0.0,
        dephasing=0.0,
        pumping=0.0,
        collective_emission=0.0,
        collective_dephasing=0.0,
        collective_pumping=0.0,
    )",,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,Dicke.__repr__(self),class_method,,,,Class method: Dicke.__repr__(self),qutip,qutip,v5.0.4,,,,,,,Dicke,__repr__,(self),,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,Dicke.lindbladian(self),class_method,,,,Class method: Dicke.lindbladian(self),qutip,qutip,v5.0.4,,,,,,,Dicke,lindbladian,(self),,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,Dicke.liouvillian(self),class_method,,,,Class method: Dicke.liouvillian(self),qutip,qutip,v5.0.4,,,,,,,Dicke,liouvillian,(self),,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"Dicke.pisolve(self, initial_state, tlist)",class_method,,,,"Class method: Dicke.pisolve(self, initial_state, tlist)",qutip,qutip,v5.0.4,,,,,,,Dicke,pisolve,"(self, initial_state, tlist)",,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,Dicke.c_ops(self),class_method,,,,Class method: Dicke.c_ops(self),qutip,qutip,v5.0.4,,,,,,,Dicke,c_ops,(self),,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,Dicke.coefficient_matrix(self),class_method,,,,Class method: Dicke.coefficient_matrix(self),qutip,qutip,v5.0.4,,,,,,,Dicke,coefficient_matrix,(self),,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"Pim.__init__(
        self,
        N,
        emission=0.0,
        dephasing=0,
        pumping=0,
        collective_emission=0,
        collective_pumping=0,
        collective_dephasing=0,
    )",class_method,,,,"Class method: Pim.__init__(
        self,
        N,
        emission=0.0,
        dephasing=0,
        pumping=0,
        collective_emission=0,
        collective_pumping=0,
        collective_dephasing=0,
    )",qutip,qutip,v5.0.4,,,,,,,Pim,__init__,"(
        self,
        N,
        emission=0.0,
        dephasing=0,
        pumping=0,
        collective_emission=0,
        collective_pumping=0,
        collective_dephasing=0,
    )",,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"Pim.isdicke(self, dicke_row, dicke_col)",class_method,,,,"Class method: Pim.isdicke(self, dicke_row, dicke_col)",qutip,qutip,v5.0.4,,,,,,,Pim,isdicke,"(self, dicke_row, dicke_col)",,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"Pim.tau_valid(self, dicke_row, dicke_col)",class_method,,,,"Class method: Pim.tau_valid(self, dicke_row, dicke_col)",qutip,qutip,v5.0.4,,,,,,,Pim,tau_valid,"(self, dicke_row, dicke_col)",,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"Pim.calculate_j_m(self, dicke_row, dicke_col)",class_method,,,,"Class method: Pim.calculate_j_m(self, dicke_row, dicke_col)",qutip,qutip,v5.0.4,,,,,,,Pim,calculate_j_m,"(self, dicke_row, dicke_col)",,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"Pim.calculate_k(self, dicke_row, dicke_col)",class_method,,,,"Class method: Pim.calculate_k(self, dicke_row, dicke_col)",qutip,qutip,v5.0.4,,,,,,,Pim,calculate_k,"(self, dicke_row, dicke_col)",,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,Pim.coefficient_matrix(self),class_method,,,,Class method: Pim.coefficient_matrix(self),qutip,qutip,v5.0.4,,,,,,,Pim,coefficient_matrix,(self),,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"Pim.solve(self, rho0, tlist)",class_method,,,,"Class method: Pim.solve(self, rho0, tlist)",qutip,qutip,v5.0.4,,,,,,,Pim,solve,"(self, rho0, tlist)",,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"Pim.tau1(self, j, m)",class_method,,,,"Class method: Pim.tau1(self, j, m)",qutip,qutip,v5.0.4,,,,,,,Pim,tau1,"(self, j, m)",,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"Pim.tau2(self, j, m)",class_method,,,,"Class method: Pim.tau2(self, j, m)",qutip,qutip,v5.0.4,,,,,,,Pim,tau2,"(self, j, m)",,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"Pim.tau3(self, j, m)",class_method,,,,"Class method: Pim.tau3(self, j, m)",qutip,qutip,v5.0.4,,,,,,,Pim,tau3,"(self, j, m)",,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"Pim.tau4(self, j, m)",class_method,,,,"Class method: Pim.tau4(self, j, m)",qutip,qutip,v5.0.4,,,,,,,Pim,tau4,"(self, j, m)",,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"Pim.tau5(self, j, m)",class_method,,,,"Class method: Pim.tau5(self, j, m)",qutip,qutip,v5.0.4,,,,,,,Pim,tau5,"(self, j, m)",,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"Pim.tau6(self, j, m)",class_method,,,,"Class method: Pim.tau6(self, j, m)",qutip,qutip,v5.0.4,,,,,,,Pim,tau6,"(self, j, m)",,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"Pim.tau7(self, j, m)",class_method,,,,"Class method: Pim.tau7(self, j, m)",qutip,qutip,v5.0.4,,,,,,,Pim,tau7,"(self, j, m)",,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"Pim.tau8(self, j, m)",class_method,,,,"Class method: Pim.tau8(self, j, m)",qutip,qutip,v5.0.4,,,,,,,Pim,tau8,"(self, j, m)",,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"Pim.tau9(self, j, m)",class_method,,,,"Class method: Pim.tau9(self, j, m)",qutip,qutip,v5.0.4,,,,,,,Pim,tau9,"(self, j, m)",,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,Result,class,,,,Class: Result,qutip,qutip,v5.0.4,,,,,,,Result,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,Dicke(object),class,,,,Class: Dicke(object),qutip,qutip,v5.0.4,,,,,,,Dicke,,,,,,,,,(object),,
qutip_qutip_v5.0.4,piqs.py,python,Pim(object),class,,,,Class: Pim(object),qutip,qutip,v5.0.4,,,,,,,Pim,,,,,,,,,(object),,
qutip_qutip_v5.0.4,piqs.py,python,_ensure_int(x),function,,,,Function: _ensure_int(x),qutip,qutip,v5.0.4,,,,_ensure_int,(x),,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,num_dicke_states(N),function,,,,Function: num_dicke_states(N),qutip,qutip,v5.0.4,,,,num_dicke_states,(N),,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,num_dicke_ladders(N),function,,,,Function: num_dicke_ladders(N),qutip,qutip,v5.0.4,,,,num_dicke_ladders,(N),,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,num_tls(nds),function,,,,Function: num_tls(nds),qutip,qutip,v5.0.4,,,,num_tls,(nds),,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,isdiagonal(mat),function,,,,Function: isdiagonal(mat),qutip,qutip,v5.0.4,,,,isdiagonal,(mat),,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,dicke_blocks(rho),function,,,,Function: dicke_blocks(rho),qutip,qutip,v5.0.4,,,,dicke_blocks,(rho),,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,dicke_blocks_full(rho),function,,,,Function: dicke_blocks_full(rho),qutip,qutip,v5.0.4,,,,dicke_blocks_full,(rho),,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"dicke_function_trace(f, rho)",function,,,,"Function: dicke_function_trace(f, rho)",qutip,qutip,v5.0.4,,,,dicke_function_trace,"(f, rho)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,entropy_vn_dicke(rho),function,,,,Function: entropy_vn_dicke(rho),qutip,qutip,v5.0.4,,,,entropy_vn_dicke,(rho),,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,purity_dicke(rho),function,,,,Function: purity_dicke(rho),qutip,qutip,v5.0.4,,,,purity_dicke,(rho),,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"energy_degeneracy(N, m)",function,,,,"Function: energy_degeneracy(N, m)",qutip,qutip,v5.0.4,,,,energy_degeneracy,"(N, m)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"state_degeneracy(N, j)",function,,,,"Function: state_degeneracy(N, j)",qutip,qutip,v5.0.4,,,,state_degeneracy,"(N, j)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"m_degeneracy(N, m)",function,,,,"Function: m_degeneracy(N, m)",qutip,qutip,v5.0.4,,,,m_degeneracy,"(N, m)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"ap(j, m)",function,,,,"Function: ap(j, m)",qutip,qutip,v5.0.4,,,,ap,"(j, m)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"am(j, m)",function,,,,"Function: am(j, m)",qutip,qutip,v5.0.4,,,,am,"(j, m)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"spin_algebra(N, op=None)",function,,,,"Function: spin_algebra(N, op=None)",qutip,qutip,v5.0.4,,,,spin_algebra,"(N, op=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"_jspin_uncoupled(N, op=None)",function,,,,"Function: _jspin_uncoupled(N, op=None)",qutip,qutip,v5.0.4,,,,_jspin_uncoupled,"(N, op=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"jspin(N, op=None, basis=""dicke"")",function,,,,"Function: jspin(N, op=None, basis=""dicke"")",qutip,qutip,v5.0.4,,,,jspin,"(N, op=None, basis=""dicke"")",,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"collapse_uncoupled(
    N,
    emission=0.0,
    dephasing=0.0,
    pumping=0.0,
    collective_emission=0.0,
    collective_dephasing=0.0,
    collective_pumping=0.0,
)",function,,,,"Function: collapse_uncoupled(
    N,
    emission=0.0,
    dephasing=0.0,
    pumping=0.0,
    collective_emission=0.0,
    collective_dephasing=0.0,
    collective_pumping=0.0,
)",qutip,qutip,v5.0.4,,,,collapse_uncoupled,"(
    N,
    emission=0.0,
    dephasing=0.0,
    pumping=0.0,
    collective_emission=0.0,
    collective_dephasing=0.0,
    collective_pumping=0.0,
)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"dicke_basis(N, jmm1)",function,,,,"Function: dicke_basis(N, jmm1)",qutip,qutip,v5.0.4,,,,dicke_basis,"(N, jmm1)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"dicke(N, j, m)",function,,,,"Function: dicke(N, j, m)",qutip,qutip,v5.0.4,,,,dicke,"(N, j, m)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,_uncoupled_excited(N),function,,,,Function: _uncoupled_excited(N),qutip,qutip,v5.0.4,,,,_uncoupled_excited,(N),,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,_uncoupled_superradiant(N),function,,,,Function: _uncoupled_superradiant(N),qutip,qutip,v5.0.4,,,,_uncoupled_superradiant,(N),,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,_uncoupled_ground(N),function,,,,Function: _uncoupled_ground(N),qutip,qutip,v5.0.4,,,,_uncoupled_ground,(N),,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,_uncoupled_ghz(N),function,,,,Function: _uncoupled_ghz(N),qutip,qutip,v5.0.4,,,,_uncoupled_ghz,(N),,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"_uncoupled_css(N, a, b)",function,,,,"Function: _uncoupled_css(N, a, b)",qutip,qutip,v5.0.4,,,,_uncoupled_css,"(N, a, b)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"excited(N, basis=""dicke"")",function,,,,"Function: excited(N, basis=""dicke"")",qutip,qutip,v5.0.4,,,,excited,"(N, basis=""dicke"")",,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"superradiant(N, basis=""dicke"")",function,,,,"Function: superradiant(N, basis=""dicke"")",qutip,qutip,v5.0.4,,,,superradiant,"(N, basis=""dicke"")",,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"css(
    N,
    x=1 / np.sqrt(2),
    y=1 / np.sqrt(2),
    basis=""dicke"",
    coordinates=""cartesian"",
)",function,,,,"Function: css(
    N,
    x=1 / np.sqrt(2),
    y=1 / np.sqrt(2),
    basis=""dicke"",
    coordinates=""cartesian"",
)",qutip,qutip,v5.0.4,,,,css,"(
    N,
    x=1 / np.sqrt(2),
    y=1 / np.sqrt(2),
    basis=""dicke"",
    coordinates=""cartesian"",
)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"ghz(N, basis=""dicke"")",function,,,,"Function: ghz(N, basis=""dicke"")",qutip,qutip,v5.0.4,,,,ghz,"(N, basis=""dicke"")",,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"ground(N, basis=""dicke"")",function,,,,"Function: ground(N, basis=""dicke"")",qutip,qutip,v5.0.4,,,,ground,"(N, basis=""dicke"")",,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,identity_uncoupled(N),function,,,,Function: identity_uncoupled(N),qutip,qutip,v5.0.4,,,,identity_uncoupled,(N),,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"block_matrix(N, elements=""ones"")",function,,,,"Function: block_matrix(N, elements=""ones"")",qutip,qutip,v5.0.4,,,,block_matrix,"(N, elements=""ones"")",,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"tau_column(tau, k, j)",function,,,,"Function: tau_column(tau, k, j)",qutip,qutip,v5.0.4,,,,tau_column,"(tau, k, j)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,"__all__ = [
    ""num_dicke_states"",
    ""num_dicke_ladders"",
    ""num_tls"",
    ""isdiagonal"",
    ""dicke_blocks"",
    ""dicke_blocks_full"",
    ""dicke_function_trace"",
    ""purity_dicke"",
    ""entropy_vn_dicke"",
    ""Dicke"",
    ""state_degeneracy"",
    ""m_degeneracy"",
    ""energy_degeneracy"",
    ""ap"",
    ""am"",
    ""spin_algebra"",
    ""jspin"",
    ""collapse_uncoupled"",
    ""dicke_basis"",
    ""dicke"",
    ""excited"",
    ""superradiant"",
    ""css"",
    ""ghz"",
    ""ground"",
    ""identity_uncoupled"",
    ""block_matrix"",
    ""tau_column"",
    ""Pim"",
]",constant,"__all__ = [
    ""num_dicke_states"",
    ""num_dicke_ladders"",
    ""num_tls"",
    ""isdiagonal"",
    ""dicke_blocks"",
    ""dicke_blocks_full"",
    ""dicke_function_trace"",
    ""purity_dicke"",
    ""entropy_vn_dicke"",
    ""Dicke"",
    ""state_degeneracy"",
    ""m_degeneracy"",
    ""energy_degeneracy"",
    ""ap"",
    ""am"",
    ""spin_algebra"",
    ""jspin"",
    ""collapse_uncoupled"",
    ""dicke_basis"",
    ""dicke"",
    ""excited"",
    ""superradiant"",
    ""css"",
    ""ghz"",
    ""ground"",
    ""identity_uncoupled"",
    ""block_matrix"",
    ""tau_column"",
    ""Pim"",
]",__all__,"[
    ""num_dicke_states"",
    ""num_dicke_ladders"",
    ""num_tls"",
    ""isdiagonal"",
    ""dicke_blocks"",
    ""dicke_blocks_full"",
    ""dicke_function_trace"",
    ""purity_dicke"",
    ""entropy_vn_dicke"",
    ""Dicke"",
    ""state_degeneracy"",
    ""m_degeneracy"",
    ""energy_degeneracy"",
    ""ap"",
    ""am"",
    ""spin_algebra"",
    ""jspin"",
    ""collapse_uncoupled"",
    ""dicke_basis"",
    ""dicke"",
    ""excited"",
    ""superradiant"",
    ""css"",
    ""ghz"",
    ""ground"",
    ""identity_uncoupled"",
    ""block_matrix"",
    ""tau_column"",
    ""Pim"",
]","Constant: __all__ = [
    ""num_dicke_states"",
    ""num_dicke_ladders"",
    ""num_tls"",
    ""isdiagonal"",
    ""dicke_blocks"",
    ""dicke_blocks_full"",
    ""dicke_function_trace"",
    ""purity_dicke"",
    ""entropy_vn_dicke"",
    ""Dicke"",
    ""state_degeneracy"",
    ""m_degeneracy"",
    ""energy_degeneracy"",
    ""ap"",
    ""am"",
    ""spin_algebra"",
    ""jspin"",
    ""collapse_uncoupled"",
    ""dicke_basis"",
    ""dicke"",
    ""excited"",
    ""superradiant"",
    ""css"",
    ""ghz"",
    ""ground"",
    ""identity_uncoupled"",
    ""block_matrix"",
    ""tau_column"",
    ""Pim"",
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,factorial from math,import,,,,Import: factorial from math,qutip,qutip,v5.0.4,from math import factorial,math,factorial,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,Decimal from decimal,import,,,,Import: Decimal from decimal,qutip,qutip,v5.0.4,from decimal import Decimal,decimal,Decimal,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,odeint from scipy.integrate,local_import,,,,Import: odeint from scipy.integrate,qutip,qutip,v5.0.4,from scipy.integrate import odeint,scipy.integrate,odeint,,,scipy.integrate,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,eigvalsh from scipy.linalg,local_import,,,,Import: eigvalsh from scipy.linalg,qutip,qutip,v5.0.4,from scipy.linalg import eigvalsh,scipy.linalg,eigvalsh,,,scipy.linalg,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,entr from scipy.special,local_import,,,,Import: entr from scipy.special,qutip,qutip,v5.0.4,from scipy.special import entr,scipy.special,entr,,,scipy.special,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,dok_matrix from scipy.sparse,local_import,,,,Import: dok_matrix from scipy.sparse,qutip,qutip,v5.0.4,"from scipy.sparse import dok_matrix, block_diag, lil_matrix",scipy.sparse,dok_matrix,,,scipy.sparse,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,block_diag from scipy.sparse,local_import,,,,Import: block_diag from scipy.sparse,qutip,qutip,v5.0.4,"from scipy.sparse import dok_matrix, block_diag, lil_matrix",scipy.sparse,block_diag,,,scipy.sparse,,,,,,,,,,,,
qutip_qutip_v5.0.4,piqs.py,python,lil_matrix from scipy.sparse,local_import,,,,Import: lil_matrix from scipy.sparse,qutip,qutip,v5.0.4,"from scipy.sparse import dok_matrix, block_diag, lil_matrix",scipy.sparse,lil_matrix,,,scipy.sparse,,,,,,,,,,,,
,piqs.py,python,,,,,,File: qutip\piqs,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,piqs.py,python,,,,,,Directory: qutip\piqs\piqs.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: qutip\piqs,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: qutip\piqs\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,brmesolve.py,python,"BRSolver.name = ""brmesolve""",class_field,,,,"Class field: BRSolver.name = ""brmesolve""",qutip,qutip,v5.0.4,,,,,,,BRSolver,,,"name = ""brmesolve""",,,,,name,,"""brmesolve""",
qutip_qutip_v5.0.4,brmesolve.py,python,"BRSolver.solver_options = {
        ""progress_bar"": """",
        ""progress_kwargs"": {""chunk_size"":10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": False,
        'method': 'adams',
        'tensor_type': 'sparse',
        'sparse_eigensolver': False,
    }",class_field,,,,"Class field: BRSolver.solver_options = {
        ""progress_bar"": """",
        ""progress_kwargs"": {""chunk_size"":10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": False,
        'method': 'adams',
        'tensor_type': 'sparse',
        'sparse_eigensolver': False,
    }",qutip,qutip,v5.0.4,,,,,,,BRSolver,,,"solver_options = {
        ""progress_bar"": """",
        ""progress_kwargs"": {""chunk_size"":10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": False,
        'method': 'adams',
        'tensor_type': 'sparse',
        'sparse_eigensolver': False,
    }",,,,,solver_options,,"{
        ""progress_bar"": """",
        ""progress_kwargs"": {""chunk_size"":10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": False,
        'method': 'adams',
        'tensor_type': 'sparse',
        'sparse_eigensolver': False,
    }",
qutip_qutip_v5.0.4,brmesolve.py,python,BRSolver._avail_integrators = {},class_field,,,,Class field: BRSolver._avail_integrators = {},qutip,qutip,v5.0.4,,,,,,,BRSolver,,,_avail_integrators = {},,,,,_avail_integrators,,{},
qutip_qutip_v5.0.4,brmesolve.py,python,[instance] BRSolver.rhs = None,class_field,,,,Class field: [instance] BRSolver.rhs = None,qutip,qutip,v5.0.4,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",self.rhs = None,self.rhs = None,,,,,,,
qutip_qutip_v5.0.4,brmesolve.py,python,[instance] BRSolver.sec_cutoff = sec_cutoff,class_field,,,,Class field: [instance] BRSolver.sec_cutoff = sec_cutoff,qutip,qutip,v5.0.4,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",self.sec_cutoff = sec_cutoff,self.sec_cutoff = sec_cutoff,,,,,,,
qutip_qutip_v5.0.4,brmesolve.py,python,[instance] BRSolver.options = options,class_field,,,,Class field: [instance] BRSolver.options = options,qutip,qutip,v5.0.4,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",self.options = options,self.options = options,,,,,,,
qutip_qutip_v5.0.4,brmesolve.py,python,"[instance] BRSolver._system = H, a_ops, c_ops",class_field,,,,"Class field: [instance] BRSolver._system = H, a_ops, c_ops",qutip,qutip,v5.0.4,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)","self._system = H, a_ops, c_ops","self._system = H, a_ops, c_ops",,,,,,,
qutip_qutip_v5.0.4,brmesolve.py,python,[instance] BRSolver._num_collapse = len(c_ops),class_field,,,,Class field: [instance] BRSolver._num_collapse = len(c_ops),qutip,qutip,v5.0.4,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",self._num_collapse = len(c_ops),self._num_collapse = len(c_ops),,,,,,,
qutip_qutip_v5.0.4,brmesolve.py,python,[instance] BRSolver._num_a_ops = len(a_ops),class_field,,,,Class field: [instance] BRSolver._num_a_ops = len(a_ops),qutip,qutip,v5.0.4,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",self._num_a_ops = len(a_ops),self._num_a_ops = len(a_ops),,,,,,,
qutip_qutip_v5.0.4,brmesolve.py,python,[instance] BRSolver.rhs = _prepare_rhs(),class_field,,,,Class field: [instance] BRSolver.rhs = _prepare_rhs(),qutip,qutip,v5.0.4,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",self.rhs = self._prepare_rhs(),self.rhs = self._prepare_rhs(),,,,,,,
qutip_qutip_v5.0.4,brmesolve.py,python,[instance] BRSolver._integrator = _get_integrator(),class_field,,,,Class field: [instance] BRSolver._integrator = _get_integrator(),qutip,qutip,v5.0.4,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",self._integrator = self._get_integrator(),self._integrator = self._get_integrator(),,,,,,,
qutip_qutip_v5.0.4,brmesolve.py,python,[instance] BRSolver._state_metadata = {},class_field,,,,Class field: [instance] BRSolver._state_metadata = {},qutip,qutip,v5.0.4,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",self._state_metadata = {},self._state_metadata = {},,,,,,,
qutip_qutip_v5.0.4,brmesolve.py,python,[instance] BRSolver.stats = _initialize_stats(),class_field,,,,Class field: [instance] BRSolver.stats = _initialize_stats(),qutip,qutip,v5.0.4,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",self.stats = self._initialize_stats(),self.stats = self._initialize_stats(),,,,,,,
qutip_qutip_v5.0.4,brmesolve.py,python,"[instance] BRSolver.rhs._register_feedback({}, solver=name)",class_field,,,,"Class field: [instance] BRSolver.rhs._register_feedback({}, solver=name)",qutip,qutip,v5.0.4,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)","self.rhs._register_feedback({}, solver=self.name)","self.rhs._register_feedback({}, solver=self.name)",,,,,,,
qutip_qutip_v5.0.4,brmesolve.py,python,"BRSolver.__init__(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",class_method,,,,"Class method: BRSolver.__init__(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",qutip,qutip,v5.0.4,,,,,,,BRSolver,__init__,"(self, H, a_ops, c_ops=None, sec_cutoff=0.1, *, options=None)",,,,,,,,,
qutip_qutip_v5.0.4,brmesolve.py,python,BRSolver._initialize_stats(self),class_method,,,,Class method: BRSolver._initialize_stats(self),qutip,qutip,v5.0.4,,,,,,,BRSolver,_initialize_stats,(self),,,,,,,,,
qutip_qutip_v5.0.4,brmesolve.py,python,BRSolver._prepare_rhs(self),class_method,,,,Class method: BRSolver._prepare_rhs(self),qutip,qutip,v5.0.4,,,,,,,BRSolver,_prepare_rhs,(self),,,,,,,,,
qutip_qutip_v5.0.4,brmesolve.py,python,[property] BRSolver.options(self),class_method,,,,Class method: [property] BRSolver.options(self),qutip,qutip,v5.0.4,,,,,,,BRSolver,options,(self),,,,,,,,,property
qutip_qutip_v5.0.4,brmesolve.py,python,"[options.setter] BRSolver.options(self, new_options)",class_method,,,,"Class method: [options.setter] BRSolver.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,BRSolver,options,"(self, new_options)",,,,,,,,,options.setter
qutip_qutip_v5.0.4,brmesolve.py,python,"BRSolver._apply_options(self, keys)",class_method,,,,"Class method: BRSolver._apply_options(self, keys)",qutip,qutip,v5.0.4,,,,,,,BRSolver,_apply_options,"(self, keys)",,,,,,,,,
qutip_qutip_v5.0.4,brmesolve.py,python,"[classmethod] BRSolver.StateFeedback(cls, default=None, raw_data=False)",class_method,,,,"Class method: [classmethod] BRSolver.StateFeedback(cls, default=None, raw_data=False)",qutip,qutip,v5.0.4,,,,,,,BRSolver,StateFeedback,"(cls, default=None, raw_data=False)",,,,,,,,,classmethod
qutip_qutip_v5.0.4,brmesolve.py,python,BRSolver(Solver),class,,,,Class: BRSolver(Solver),qutip,qutip,v5.0.4,,,,,,,BRSolver,,,,,,,,,(Solver),,
qutip_qutip_v5.0.4,brmesolve.py,python,"brmesolve(H, psi0, tlist, a_ops=(), e_ops=(), c_ops=(),
              args=None, sec_cutoff=0.1, options=None, **kwargs)",function,,,,"Function: brmesolve(H, psi0, tlist, a_ops=(), e_ops=(), c_ops=(),
              args=None, sec_cutoff=0.1, options=None, **kwargs)",qutip,qutip,v5.0.4,,,,brmesolve,"(H, psi0, tlist, a_ops=(), e_ops=(), c_ops=(),
              args=None, sec_cutoff=0.1, options=None, **kwargs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,brmesolve.py,python,"__all__ = ['brmesolve', 'BRSolver']",constant,"__all__ = ['brmesolve', 'BRSolver']",__all__,"['brmesolve', 'BRSolver']","Constant: __all__ = ['brmesolve', 'BRSolver']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,brmesolve.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,brmesolve.py,python,inspect,import,,,,Import: inspect,qutip,qutip,v5.0.4,import inspect,,inspect,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,brmesolve.py,python,time from time,import,,,,Import: time from time,qutip,qutip,v5.0.4,from time import time,time,time,,,,,,,,,,,,,,,
,brmesolve.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,brmesolve.py,python,,,,,,Directory: qutip\solver\brmesolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation.py,python,"correlation_2op_1t(H, state0, taulist, c_ops, a_op, b_op,
                       solver=""me"", reverse=False, args=None,
                       options=None)",function,,,,"Function: correlation_2op_1t(H, state0, taulist, c_ops, a_op, b_op,
                       solver=""me"", reverse=False, args=None,
                       options=None)",qutip,qutip,v5.0.4,,,,correlation_2op_1t,"(H, state0, taulist, c_ops, a_op, b_op,
                       solver=""me"", reverse=False, args=None,
                       options=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation.py,python,"correlation_2op_2t(H, state0, tlist, taulist, c_ops, a_op, b_op,
                       solver=""me"", reverse=False, args=None,
                       options=None)",function,,,,"Function: correlation_2op_2t(H, state0, tlist, taulist, c_ops, a_op, b_op,
                       solver=""me"", reverse=False, args=None,
                       options=None)",qutip,qutip,v5.0.4,,,,correlation_2op_2t,"(H, state0, tlist, taulist, c_ops, a_op, b_op,
                       solver=""me"", reverse=False, args=None,
                       options=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation.py,python,"correlation_3op_1t(H, state0, taulist, c_ops, a_op, b_op, c_op,
                       solver=""me"", args=None, options=None)",function,,,,"Function: correlation_3op_1t(H, state0, taulist, c_ops, a_op, b_op, c_op,
                       solver=""me"", args=None, options=None)",qutip,qutip,v5.0.4,,,,correlation_3op_1t,"(H, state0, taulist, c_ops, a_op, b_op, c_op,
                       solver=""me"", args=None, options=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation.py,python,"correlation_3op_2t(H, state0, tlist, taulist, c_ops, a_op, b_op, c_op,
                       solver=""me"", args=None, options=None)",function,,,,"Function: correlation_3op_2t(H, state0, tlist, taulist, c_ops, a_op, b_op, c_op,
                       solver=""me"", args=None, options=None)",qutip,qutip,v5.0.4,,,,correlation_3op_2t,"(H, state0, tlist, taulist, c_ops, a_op, b_op, c_op,
                       solver=""me"", args=None, options=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation.py,python,"coherence_function_g1(
    H, state0, taulist, c_ops, a_op, solver=""me"", args=None, options=None
)",function,,,,"Function: coherence_function_g1(
    H, state0, taulist, c_ops, a_op, solver=""me"", args=None, options=None
)",qutip,qutip,v5.0.4,,,,coherence_function_g1,"(
    H, state0, taulist, c_ops, a_op, solver=""me"", args=None, options=None
)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation.py,python,"coherence_function_g2(H, state0, taulist, c_ops, a_op, solver=""me"",
                          args=None, options=None)",function,,,,"Function: coherence_function_g2(H, state0, taulist, c_ops, a_op, solver=""me"",
                          args=None, options=None)",qutip,qutip,v5.0.4,,,,coherence_function_g2,"(H, state0, taulist, c_ops, a_op, solver=""me"",
                          args=None, options=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation.py,python,"_make_solver(H, c_ops, args, options, solver)",function,,,,"Function: _make_solver(H, c_ops, args, options, solver)",qutip,qutip,v5.0.4,,,,_make_solver,"(H, c_ops, args, options, solver)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation.py,python,"correlation_3op(solver, state0, tlist, taulist, A=None, B=None, C=None)",function,,,,"Function: correlation_3op(solver, state0, tlist, taulist, A=None, B=None, C=None)",qutip,qutip,v5.0.4,,,,correlation_3op,"(solver, state0, tlist, taulist, A=None, B=None, C=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation.py,python,"_correlation_3op_dm(solver, state0, tlist, taulist, A, B, C)",function,,,,"Function: _correlation_3op_dm(solver, state0, tlist, taulist, A, B, C)",qutip,qutip,v5.0.4,,,,_correlation_3op_dm,"(solver, state0, tlist, taulist, A, B, C)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation.py,python,"__all__ = [
    'correlation_3op',
    'correlation_2op_1t', 'correlation_2op_2t', 'correlation_3op_1t',
    'correlation_3op_2t', 'coherence_function_g1', 'coherence_function_g2'
]",constant,"__all__ = [
    'correlation_3op',
    'correlation_2op_1t', 'correlation_2op_2t', 'correlation_3op_1t',
    'correlation_3op_2t', 'coherence_function_g1', 'coherence_function_g2'
]",__all__,"[
    'correlation_3op',
    'correlation_2op_1t', 'correlation_2op_2t', 'correlation_3op_1t',
    'correlation_3op_2t', 'coherence_function_g1', 'coherence_function_g2'
]","Constant: __all__ = [
    'correlation_3op',
    'correlation_2op_1t', 'correlation_2op_2t', 'correlation_3op_1t',
    'correlation_3op_2t', 'coherence_function_g1', 'coherence_function_g2'
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,correlation.py,python,scipy.fftpack,import,,,,Import: scipy.fftpack,qutip,qutip,v5.0.4,import scipy.fftpack,,scipy.fftpack,,,,,,,,,,,,,,,
,correlation.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,correlation.py,python,,,,,,Directory: qutip\solver\correlation.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,countstat.py,python,"countstat_current(L, c_ops=None, rhoss=None, J_ops=None)",function,,,,"Function: countstat_current(L, c_ops=None, rhoss=None, J_ops=None)",qutip,qutip,v5.0.4,,,,countstat_current,"(L, c_ops=None, rhoss=None, J_ops=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,countstat.py,python,"_solve(A, V)",function,,,,"Function: _solve(A, V)",qutip,qutip,v5.0.4,,,,_solve,"(A, V)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,countstat.py,python,"_noise_direct(L, wlist, rhoss, J_ops)",function,,,,"Function: _noise_direct(L, wlist, rhoss, J_ops)",qutip,qutip,v5.0.4,,,,_noise_direct,"(L, wlist, rhoss, J_ops)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,countstat.py,python,"_noise_pseudoinv(L, wlist, rhoss, J_ops, sparse, method)",function,,,,"Function: _noise_pseudoinv(L, wlist, rhoss, J_ops, sparse, method)",qutip,qutip,v5.0.4,,,,_noise_pseudoinv,"(L, wlist, rhoss, J_ops, sparse, method)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,countstat.py,python,"countstat_current_noise(L, c_ops, wlist=None, rhoss=None, J_ops=None,
                            sparse=True, method='direct')",function,,,,"Function: countstat_current_noise(L, c_ops, wlist=None, rhoss=None, J_ops=None,
                            sparse=True, method='direct')",qutip,qutip,v5.0.4,,,,countstat_current_noise,"(L, c_ops, wlist=None, rhoss=None, J_ops=None,
                            sparse=True, method='direct')",,,,,,,,,,,,,
qutip_qutip_v5.0.4,countstat.py,python,"__all__ = ['countstat_current', 'countstat_current_noise']",constant,"__all__ = ['countstat_current', 'countstat_current_noise']",__all__,"['countstat_current', 'countstat_current_noise']","Constant: __all__ = ['countstat_current', 'countstat_current_noise']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,countstat.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,countstat.py,python,scipy.sparse,import,,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,,scipy.sparse,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,countstat.py,python,product from itertools,import,,,,Import: product from itertools,qutip,qutip,v5.0.4,from itertools import product,itertools,product,,,,,,,,,,,,,,,
,countstat.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,countstat.py,python,,,,,,Directory: qutip\solver\countstat.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,[instance] FloquetBasis.T = T,class_field,,,,Class field: [instance] FloquetBasis.T = T,qutip,qutip,v5.0.4,,,,,,,FloquetBasis,__init__,"(
        self,
        H,
        T,
        args=None,
        options=None,
        sparse=False,
        sort=True,
        precompute=None,
    )",self.T = T,self.T = T,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"[instance] FloquetBasis.U = Propagator(H, args=args, options=options, memoize=memoize)",class_field,,,,"Class field: [instance] FloquetBasis.U = Propagator(H, args=args, options=options, memoize=memoize)",qutip,qutip,v5.0.4,,,,,,,FloquetBasis,__init__,"(
        self,
        H,
        T,
        args=None,
        options=None,
        sparse=False,
        sort=True,
        precompute=None,
    )","self.U = Propagator(H, args=args, options=options, memoize=memoize)","self.U = Propagator(H, args=args, options=options, memoize=memoize)",,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"FMESolver.name = ""fmmesolve""",class_field,,,,"Class field: FMESolver.name = ""fmmesolve""",qutip,qutip,v5.0.4,,,,,,,FMESolver,,,"name = ""fmmesolve""",,,,,name,,"""fmmesolve""",
qutip_qutip_v5.0.4,floquet.py,python,FMESolver._avail_integrators = {},class_field,,,,Class field: FMESolver._avail_integrators = {},qutip,qutip,v5.0.4,,,,,,,FMESolver,,,_avail_integrators = {},,,,,_avail_integrators,,{},
qutip_qutip_v5.0.4,floquet.py,python,FMESolver._resultclass = FloquetResult,class_field,,,,Class field: FMESolver._resultclass = FloquetResult,qutip,qutip,v5.0.4,,,,,,,FMESolver,,,_resultclass = FloquetResult,,,,,_resultclass,,FloquetResult,
qutip_qutip_v5.0.4,floquet.py,python,"FMESolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        ""method"": ""adams"",
        ""store_floquet_states"": False,
    }",class_field,,,,"Class field: FMESolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        ""method"": ""adams"",
        ""store_floquet_states"": False,
    }",qutip,qutip,v5.0.4,,,,,,,FMESolver,,,"solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        ""method"": ""adams"",
        ""store_floquet_states"": False,
    }",,,,,solver_options,,"{
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        ""method"": ""adams"",
        ""store_floquet_states"": False,
    }",
qutip_qutip_v5.0.4,floquet.py,python,[instance] FMESolver.options = options,class_field,,,,Class field: [instance] FMESolver.options = options,qutip,qutip,v5.0.4,,,,,,,FMESolver,__init__,"(
        self, floquet_basis, a_ops, w_th=0.0, *, kmax=5, nT=None, options=None
    )",self.options = options,self.options = options,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,[instance] FMESolver._num_collapse = len(a_ops),class_field,,,,Class field: [instance] FMESolver._num_collapse = len(a_ops),qutip,qutip,v5.0.4,,,,,,,FMESolver,__init__,"(
        self, floquet_basis, a_ops, w_th=0.0, *, kmax=5, nT=None, options=None
    )",self._num_collapse = len(a_ops),self._num_collapse = len(a_ops),,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"[instance] FMESolver.rhs = QobjEvo(
            floquet_tensor(
                floquet_basis,
                c_ops,
                spectra_cb,
                w_th=w_th,
                kmax=kmax,
                nT=nT,
            )
        )",class_field,,,,"Class field: [instance] FMESolver.rhs = QobjEvo(
            floquet_tensor(
                floquet_basis,
                c_ops,
                spectra_cb,
                w_th=w_th,
                kmax=kmax,
                nT=nT,
            )
        )",qutip,qutip,v5.0.4,,,,,,,FMESolver,__init__,"(
        self, floquet_basis, a_ops, w_th=0.0, *, kmax=5, nT=None, options=None
    )","self.rhs = QobjEvo(
            floquet_tensor(
                self.floquet_basis,
                c_ops,
                spectra_cb,
                w_th=w_th,
                kmax=kmax,
                nT=nT,
            )
        )","self.rhs = QobjEvo(
            floquet_tensor(
                self.floquet_basis,
                c_ops,
                spectra_cb,
                w_th=w_th,
                kmax=kmax,
                nT=nT,
            )
        )",,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,[instance] FMESolver._integrator = _get_integrator(),class_field,,,,Class field: [instance] FMESolver._integrator = _get_integrator(),qutip,qutip,v5.0.4,,,,,,,FMESolver,__init__,"(
        self, floquet_basis, a_ops, w_th=0.0, *, kmax=5, nT=None, options=None
    )",self._integrator = self._get_integrator(),self._integrator = self._get_integrator(),,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,[instance] FMESolver._state_metadata = {},class_field,,,,Class field: [instance] FMESolver._state_metadata = {},qutip,qutip,v5.0.4,,,,,,,FMESolver,__init__,"(
        self, floquet_basis, a_ops, w_th=0.0, *, kmax=5, nT=None, options=None
    )",self._state_metadata = {},self._state_metadata = {},,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,[instance] FMESolver.stats = _initialize_stats(),class_field,,,,Class field: [instance] FMESolver.stats = _initialize_stats(),qutip,qutip,v5.0.4,,,,,,,FMESolver,__init__,"(
        self, floquet_basis, a_ops, w_th=0.0, *, kmax=5, nT=None, options=None
    )",self.stats = self._initialize_stats(),self.stats = self._initialize_stats(),,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"FloquetBasis.__init__(
        self,
        H,
        T,
        args=None,
        options=None,
        sparse=False,
        sort=True,
        precompute=None,
    )",class_method,,,,"Class method: FloquetBasis.__init__(
        self,
        H,
        T,
        args=None,
        options=None,
        sparse=False,
        sort=True,
        precompute=None,
    )",qutip,qutip,v5.0.4,,,,,,,FloquetBasis,__init__,"(
        self,
        H,
        T,
        args=None,
        options=None,
        sparse=False,
        sort=True,
        precompute=None,
    )",,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"FloquetBasis._as_ketlist(self, kets_mat)",class_method,,,,"Class method: FloquetBasis._as_ketlist(self, kets_mat)",qutip,qutip,v5.0.4,,,,,,,FloquetBasis,_as_ketlist,"(self, kets_mat)",,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"FloquetBasis.mode(self, t, data=False)",class_method,,,,"Class method: FloquetBasis.mode(self, t, data=False)",qutip,qutip,v5.0.4,,,,,,,FloquetBasis,mode,"(self, t, data=False)",,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"FloquetBasis.state(self, t, data=False)",class_method,,,,"Class method: FloquetBasis.state(self, t, data=False)",qutip,qutip,v5.0.4,,,,,,,FloquetBasis,state,"(self, t, data=False)",,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"FloquetBasis.from_floquet_basis(self, floquet_basis, t=0)",class_method,,,,"Class method: FloquetBasis.from_floquet_basis(self, floquet_basis, t=0)",qutip,qutip,v5.0.4,,,,,,,FloquetBasis,from_floquet_basis,"(self, floquet_basis, t=0)",,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"FloquetBasis.to_floquet_basis(self, lab_basis, t=0)",class_method,,,,"Class method: FloquetBasis.to_floquet_basis(self, lab_basis, t=0)",qutip,qutip,v5.0.4,,,,,,,FloquetBasis,to_floquet_basis,"(self, lab_basis, t=0)",,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"FloquetResult._post_init(self, floquet_basis)",class_method,,,,"Class method: FloquetResult._post_init(self, floquet_basis)",qutip,qutip,v5.0.4,,,,,,,FloquetResult,_post_init,"(self, floquet_basis)",,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"FloquetResult.add(self, t, state)",class_method,,,,"Class method: FloquetResult.add(self, t, state)",qutip,qutip,v5.0.4,,,,,,,FloquetResult,add,"(self, t, state)",,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"FMESolver.__init__(
        self, floquet_basis, a_ops, w_th=0.0, *, kmax=5, nT=None, options=None
    )",class_method,,,,"Class method: FMESolver.__init__(
        self, floquet_basis, a_ops, w_th=0.0, *, kmax=5, nT=None, options=None
    )",qutip,qutip,v5.0.4,,,,,,,FMESolver,__init__,"(
        self, floquet_basis, a_ops, w_th=0.0, *, kmax=5, nT=None, options=None
    )",,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,FMESolver._initialize_stats(self),class_method,,,,Class method: FMESolver._initialize_stats(self),qutip,qutip,v5.0.4,,,,,,,FMESolver,_initialize_stats,(self),,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"FMESolver._argument(self, args)",class_method,,,,"Class method: FMESolver._argument(self, args)",qutip,qutip,v5.0.4,,,,,,,FMESolver,_argument,"(self, args)",,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"FMESolver.start(self, state0, t0, *, floquet=False)",class_method,,,,"Class method: FMESolver.start(self, state0, t0, *, floquet=False)",qutip,qutip,v5.0.4,,,,,,,FMESolver,start,"(self, state0, t0, *, floquet=False)",,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"FMESolver.step(self, t, *, args=None, copy=True, floquet=False)",class_method,,,,"Class method: FMESolver.step(self, t, *, args=None, copy=True, floquet=False)",qutip,qutip,v5.0.4,,,,,,,FMESolver,step,"(self, t, *, args=None, copy=True, floquet=False)",,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"FMESolver.run(self, state0, tlist, *, floquet=False, args=None, e_ops=None)",class_method,,,,"Class method: FMESolver.run(self, state0, tlist, *, floquet=False, args=None, e_ops=None)",qutip,qutip,v5.0.4,,,,,,,FMESolver,run,"(self, state0, tlist, *, floquet=False, args=None, e_ops=None)",,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,[classmethod] FMESolver.ExpectFeedback(cls),class_method,,,,Class method: [classmethod] FMESolver.ExpectFeedback(cls),qutip,qutip,v5.0.4,,,,,,,FMESolver,ExpectFeedback,(cls),,,,,,,,,classmethod
qutip_qutip_v5.0.4,floquet.py,python,[classmethod] FMESolver.StateFeedback(cls),class_method,,,,Class method: [classmethod] FMESolver.StateFeedback(cls),qutip,qutip,v5.0.4,,,,,,,FMESolver,StateFeedback,(cls),,,,,,,,,classmethod
qutip_qutip_v5.0.4,floquet.py,python,FloquetBasis,class,,,,Class: FloquetBasis,qutip,qutip,v5.0.4,,,,,,,FloquetBasis,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,FloquetResult(Result),class,,,,Class: FloquetResult(Result),qutip,qutip,v5.0.4,,,,,,,FloquetResult,,,,,,,,,(Result),,
qutip_qutip_v5.0.4,floquet.py,python,FMESolver(MESolver),class,,,,Class: FMESolver(MESolver),qutip,qutip,v5.0.4,,,,,,,FMESolver,,,,,,,,,(MESolver),,
qutip_qutip_v5.0.4,floquet.py,python,"_floquet_delta_tensor(f_energies, kmax, T)",function,,,,"Function: _floquet_delta_tensor(f_energies, kmax, T)",qutip,qutip,v5.0.4,,,,_floquet_delta_tensor,"(f_energies, kmax, T)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"_floquet_X_matrices(floquet_basis, c_ops, kmax, ntimes=100)",function,,,,"Function: _floquet_X_matrices(floquet_basis, c_ops, kmax, ntimes=100)",qutip,qutip,v5.0.4,,,,_floquet_X_matrices,"(floquet_basis, c_ops, kmax, ntimes=100)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"_floquet_gamma_matrices(X, delta, J_cb)",function,,,,"Function: _floquet_gamma_matrices(X, delta, J_cb)",qutip,qutip,v5.0.4,,,,_floquet_gamma_matrices,"(X, delta, J_cb)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"_floquet_A_matrix(delta, gamma, w_th)",function,,,,"Function: _floquet_A_matrix(delta, gamma, w_th)",qutip,qutip,v5.0.4,,,,_floquet_A_matrix,"(delta, gamma, w_th)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,_floquet_master_equation_tensor(A),function,,,,Function: _floquet_master_equation_tensor(A),qutip,qutip,v5.0.4,,,,_floquet_master_equation_tensor,(A),,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"floquet_tensor(H, c_ops, spectra_cb, T=0, w_th=0.0, kmax=5, nT=100)",function,,,,"Function: floquet_tensor(H, c_ops, spectra_cb, T=0, w_th=0.0, kmax=5, nT=100)",qutip,qutip,v5.0.4,,,,floquet_tensor,"(H, c_ops, spectra_cb, T=0, w_th=0.0, kmax=5, nT=100)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"fsesolve(H, psi0, tlist, e_ops=None, T=0.0, args=None, options=None)",function,,,,"Function: fsesolve(H, psi0, tlist, e_ops=None, T=0.0, args=None, options=None)",qutip,qutip,v5.0.4,,,,fsesolve,"(H, psi0, tlist, e_ops=None, T=0.0, args=None, options=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"fmmesolve(
    H,
    rho0,
    tlist,
    c_ops=None,
    e_ops=None,
    spectra_cb=None,
    T=0,
    w_th=0.0,
    args=None,
    options=None,
)",function,,,,"Function: fmmesolve(
    H,
    rho0,
    tlist,
    c_ops=None,
    e_ops=None,
    spectra_cb=None,
    T=0,
    w_th=0.0,
    args=None,
    options=None,
)",qutip,qutip,v5.0.4,,,,fmmesolve,"(
    H,
    rho0,
    tlist,
    c_ops=None,
    e_ops=None,
    spectra_cb=None,
    T=0,
    w_th=0.0,
    args=None,
    options=None,
)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,"__all__ = [
    ""FloquetBasis"",
    ""floquet_tensor"",
    ""fsesolve"",
    ""fmmesolve"",
    ""FMESolver"",
]",constant,"__all__ = [
    ""FloquetBasis"",
    ""floquet_tensor"",
    ""fsesolve"",
    ""fmmesolve"",
    ""FMESolver"",
]",__all__,"[
    ""FloquetBasis"",
    ""floquet_tensor"",
    ""fsesolve"",
    ""fmmesolve"",
    ""FMESolver"",
]","Constant: __all__ = [
    ""FloquetBasis"",
    ""floquet_tensor"",
    ""fsesolve"",
    ""fmmesolve"",
    ""FMESolver"",
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,Qobj from qutip,import,,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import Qobj, QobjEvo",qutip,Qobj,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,QobjEvo from qutip,import,,,,Import: QobjEvo from qutip,qutip,qutip,v5.0.4,"from qutip import Qobj, QobjEvo",qutip,QobjEvo,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,time from time,import,,,,Import: time from time,qutip,qutip,v5.0.4,from time import time,time,time,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,data from qutip.core,local_import,,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,qutip.core,data,,,qutip.core,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet.py,python,Data from qutip.core.data,local_import,,,,Import: Data from qutip.core.data,qutip,qutip,v5.0.4,from qutip.core.data import Data,qutip.core.data,Data,,,qutip.core.data,,,,,,,,,,,,
,floquet.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,floquet.py,python,,,,,,Directory: qutip\solver\floquet.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_bwcomp.py,python,"floquet_modes(H, T, args=None, sort=False, U=None, options=None)",function,,,,"Function: floquet_modes(H, T, args=None, sort=False, U=None, options=None)",qutip,qutip,v5.0.4,,,,floquet_modes,"(H, T, args=None, sort=False, U=None, options=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_bwcomp.py,python,"floquet_modes_t(f_modes_0, f_energies, t, H, T, args=None, options=None)",function,,,,"Function: floquet_modes_t(f_modes_0, f_energies, t, H, T, args=None, options=None)",qutip,qutip,v5.0.4,,,,floquet_modes_t,"(f_modes_0, f_energies, t, H, T, args=None, options=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_bwcomp.py,python,"floquet_modes_table(
    f_modes_0, f_energies, tlist, H, T, args=None, options=None
)",function,,,,"Function: floquet_modes_table(
    f_modes_0, f_energies, tlist, H, T, args=None, options=None
)",qutip,qutip,v5.0.4,,,,floquet_modes_table,"(
    f_modes_0, f_energies, tlist, H, T, args=None, options=None
)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_bwcomp.py,python,"floquet_modes_t_lookup(f_modes_table_t, t, T)",function,,,,"Function: floquet_modes_t_lookup(f_modes_table_t, t, T)",qutip,qutip,v5.0.4,,,,floquet_modes_t_lookup,"(f_modes_table_t, t, T)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_bwcomp.py,python,"floquet_states(f_modes_t, f_energies, t)",function,,,,"Function: floquet_states(f_modes_t, f_energies, t)",qutip,qutip,v5.0.4,,,,floquet_states,"(f_modes_t, f_energies, t)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_bwcomp.py,python,"floquet_states_t(f_modes_0, f_energies, t, H, T, args=None, options=None)",function,,,,"Function: floquet_states_t(f_modes_0, f_energies, t, H, T, args=None, options=None)",qutip,qutip,v5.0.4,,,,floquet_states_t,"(f_modes_0, f_energies, t, H, T, args=None, options=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_bwcomp.py,python,"floquet_wavefunction(f_modes_t, f_energies, f_coeff, t)",function,,,,"Function: floquet_wavefunction(f_modes_t, f_energies, f_coeff, t)",qutip,qutip,v5.0.4,,,,floquet_wavefunction,"(f_modes_t, f_energies, f_coeff, t)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_bwcomp.py,python,"floquet_wavefunction_t(
    f_modes_0, f_energies, f_coeff, t, H, T, args=None, options=None
)",function,,,,"Function: floquet_wavefunction_t(
    f_modes_0, f_energies, f_coeff, t, H, T, args=None, options=None
)",qutip,qutip,v5.0.4,,,,floquet_wavefunction_t,"(
    f_modes_0, f_energies, f_coeff, t, H, T, args=None, options=None
)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_bwcomp.py,python,"floquet_state_decomposition(f_states, f_energies, psi)",function,,,,"Function: floquet_state_decomposition(f_states, f_energies, psi)",qutip,qutip,v5.0.4,,,,floquet_state_decomposition,"(f_states, f_energies, psi)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_bwcomp.py,python,"floquet_master_equation_rates(
    f_modes_0,
    f_energies,
    c_op,
    H,
    T,
    args,
    J_cb,
    w_th,
    kmax=5,
    f_modes_table_t=None,
)",function,,,,"Function: floquet_master_equation_rates(
    f_modes_0,
    f_energies,
    c_op,
    H,
    T,
    args,
    J_cb,
    w_th,
    kmax=5,
    f_modes_table_t=None,
)",qutip,qutip,v5.0.4,,,,floquet_master_equation_rates,"(
    f_modes_0,
    f_energies,
    c_op,
    H,
    T,
    args,
    J_cb,
    w_th,
    kmax=5,
    f_modes_table_t=None,
)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_bwcomp.py,python,"__all__ = [
    ""floquet_modes"",
    ""floquet_modes_t"",
    ""floquet_modes_table"",
    ""floquet_modes_t_lookup"",
    ""floquet_states"",
    ""floquet_states_t"",
    ""floquet_wavefunction"",
    ""floquet_wavefunction_t"",
    ""floquet_state_decomposition"",
    ""floquet_master_equation_rates"",
]",constant,"__all__ = [
    ""floquet_modes"",
    ""floquet_modes_t"",
    ""floquet_modes_table"",
    ""floquet_modes_t_lookup"",
    ""floquet_states"",
    ""floquet_states_t"",
    ""floquet_wavefunction"",
    ""floquet_wavefunction_t"",
    ""floquet_state_decomposition"",
    ""floquet_master_equation_rates"",
]",__all__,"[
    ""floquet_modes"",
    ""floquet_modes_t"",
    ""floquet_modes_table"",
    ""floquet_modes_t_lookup"",
    ""floquet_states"",
    ""floquet_states_t"",
    ""floquet_wavefunction"",
    ""floquet_wavefunction_t"",
    ""floquet_state_decomposition"",
    ""floquet_master_equation_rates"",
]","Constant: __all__ = [
    ""floquet_modes"",
    ""floquet_modes_t"",
    ""floquet_modes_table"",
    ""floquet_modes_t_lookup"",
    ""floquet_states"",
    ""floquet_states_t"",
    ""floquet_wavefunction"",
    ""floquet_wavefunction_t"",
    ""floquet_state_decomposition"",
    ""floquet_master_equation_rates"",
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_bwcomp.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,floquet_bwcomp.py,python,warnings,import,,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,,warnings,,,,,,,,,,,,,,,
,floquet_bwcomp.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,floquet_bwcomp.py,python,,,,,,Directory: qutip\solver\floquet_bwcomp.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,krylovsolve.py,python,"krylovsolve(
    H, psi0, tlist, krylov_dim, e_ops=None, args=None, options=None
)",function,,,,"Function: krylovsolve(
    H, psi0, tlist, krylov_dim, e_ops=None, args=None, options=None
)",qutip,qutip,v5.0.4,,,,krylovsolve,"(
    H, psi0, tlist, krylov_dim, e_ops=None, args=None, options=None
)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,krylovsolve.py,python,__all__ = ['krylovsolve'],constant,__all__ = ['krylovsolve'],__all__,['krylovsolve'],Constant: __all__ = ['krylovsolve'],qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,krylovsolve.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,krylovsolve.py,python,,,,,,Directory: qutip\solver\krylovsolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,[instance] _MCRHS.rhs = H,class_field,,,,Class field: [instance] _MCRHS.rhs = H,qutip,qutip,v5.0.4,,,,,,,_MCRHS,__init__,"(self, H, c_ops, n_ops)",self.rhs = H,self.rhs = H,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,[instance] _MCRHS.c_ops = c_ops,class_field,,,,Class field: [instance] _MCRHS.c_ops = c_ops,qutip,qutip,v5.0.4,,,,,,,_MCRHS,__init__,"(self, H, c_ops, n_ops)",self.c_ops = c_ops,self.c_ops = c_ops,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,[instance] _MCRHS.n_ops = n_ops,class_field,,,,Class field: [instance] _MCRHS.n_ops = n_ops,qutip,qutip,v5.0.4,,,,,,,_MCRHS,__init__,"(self, H, c_ops, n_ops)",self.n_ops = n_ops,self.n_ops = n_ops,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,"MCIntegrator.name = ""mcsolve""",class_field,,,,"Class field: MCIntegrator.name = ""mcsolve""",qutip,qutip,v5.0.4,,,,,,,MCIntegrator,,,"name = ""mcsolve""",,,,,name,,"""mcsolve""",
qutip_qutip_v5.0.4,mcsolve.py,python,[instance] MCIntegrator._integrator = integrator,class_field,,,,Class field: [instance] MCIntegrator._integrator = integrator,qutip,qutip,v5.0.4,,,,,,,MCIntegrator,__init__,"(self, integrator, system, options=None)",self._integrator = integrator,self._integrator = integrator,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,[instance] MCIntegrator.system = system,class_field,,,,Class field: [instance] MCIntegrator.system = system,qutip,qutip,v5.0.4,,,,,,,MCIntegrator,__init__,"(self, integrator, system, options=None)",self.system = system,self.system = system,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,[instance] MCIntegrator._c_ops = system.c_ops,class_field,,,,Class field: [instance] MCIntegrator._c_ops = system.c_ops,qutip,qutip,v5.0.4,,,,,,,MCIntegrator,__init__,"(self, integrator, system, options=None)",self._c_ops = system.c_ops,self._c_ops = system.c_ops,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,[instance] MCIntegrator._n_ops = system.n_ops,class_field,,,,Class field: [instance] MCIntegrator._n_ops = system.n_ops,qutip,qutip,v5.0.4,,,,,,,MCIntegrator,__init__,"(self, integrator, system, options=None)",self._n_ops = system.n_ops,self._n_ops = system.n_ops,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,[instance] MCIntegrator.options = options,class_field,,,,Class field: [instance] MCIntegrator.options = options,qutip,qutip,v5.0.4,,,,,,,MCIntegrator,__init__,"(self, integrator, system, options=None)",self.options = options,self.options = options,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,[instance] MCIntegrator._generator = None,class_field,,,,Class field: [instance] MCIntegrator._generator = None,qutip,qutip,v5.0.4,,,,,,,MCIntegrator,__init__,"(self, integrator, system, options=None)",self._generator = None,self._generator = None,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,"[instance] MCIntegrator.method = f""{name} {_integrator.method}""",class_field,,,,"Class field: [instance] MCIntegrator.method = f""{name} {_integrator.method}""",qutip,qutip,v5.0.4,,,,,,,MCIntegrator,__init__,"(self, integrator, system, options=None)","self.method = f""{self.name} {self._integrator.method}""","self.method = f""{self.name} {self._integrator.method}""",,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,[instance] MCIntegrator._is_set = False,class_field,,,,Class field: [instance] MCIntegrator._is_set = False,qutip,qutip,v5.0.4,,,,,,,MCIntegrator,__init__,"(self, integrator, system, options=None)",self._is_set = False,self._is_set = False,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,[instance] MCIntegrator.issuper = _c_ops[0].issuper,class_field,,,,Class field: [instance] MCIntegrator.issuper = _c_ops[0].issuper,qutip,qutip,v5.0.4,,,,,,,MCIntegrator,__init__,"(self, integrator, system, options=None)",self.issuper = self._c_ops[0].issuper,self.issuper = self._c_ops[0].issuper,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,"MCSolver.name = ""mcsolve""",class_field,,,,"Class field: MCSolver.name = ""mcsolve""",qutip,qutip,v5.0.4,,,,,,,MCSolver,,,"name = ""mcsolve""",,,,,name,,"""mcsolve""",
qutip_qutip_v5.0.4,mcsolve.py,python,MCSolver._trajectory_resultclass = McTrajectoryResult,class_field,,,,Class field: MCSolver._trajectory_resultclass = McTrajectoryResult,qutip,qutip,v5.0.4,,,,,,,MCSolver,,,_trajectory_resultclass = McTrajectoryResult,,,,,_trajectory_resultclass,,McTrajectoryResult,
qutip_qutip_v5.0.4,mcsolve.py,python,MCSolver._mc_integrator_class = MCIntegrator,class_field,,,,Class field: MCSolver._mc_integrator_class = MCIntegrator,qutip,qutip,v5.0.4,,,,,,,MCSolver,,,_mc_integrator_class = MCIntegrator,,,,,_mc_integrator_class,,MCIntegrator,
qutip_qutip_v5.0.4,mcsolve.py,python,"MCSolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""adams"",
        ""mc_corr_eps"": 1e-10,
        ""norm_steps"": 5,
        ""norm_t_tol"": 1e-6,
        ""norm_tol"": 1e-4,
        ""improved_sampling"": False,
    }",class_field,,,,"Class field: MCSolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""adams"",
        ""mc_corr_eps"": 1e-10,
        ""norm_steps"": 5,
        ""norm_t_tol"": 1e-6,
        ""norm_tol"": 1e-4,
        ""improved_sampling"": False,
    }",qutip,qutip,v5.0.4,,,,,,,MCSolver,,,"solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""adams"",
        ""mc_corr_eps"": 1e-10,
        ""norm_steps"": 5,
        ""norm_t_tol"": 1e-6,
        ""norm_tol"": 1e-4,
        ""improved_sampling"": False,
    }",,,,,solver_options,,"{
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""adams"",
        ""mc_corr_eps"": 1e-10,
        ""norm_steps"": 5,
        ""norm_t_tol"": 1e-6,
        ""norm_tol"": 1e-4,
        ""improved_sampling"": False,
    }",
qutip_qutip_v5.0.4,mcsolve.py,python,[instance] MCSolver._num_collapse = len(_c_ops),class_field,,,,Class field: [instance] MCSolver._num_collapse = len(_c_ops),qutip,qutip,v5.0.4,,,,,,,MCSolver,__init__,"(self, H, c_ops, *, options=None)",self._num_collapse = len(self._c_ops),self._num_collapse = len(self._c_ops),,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,[instance] MCSolver.options = options,class_field,,,,Class field: [instance] MCSolver.options = options,qutip,qutip,v5.0.4,,,,,,,MCSolver,__init__,"(self, H, c_ops, *, options=None)",self.options = options,self.options = options,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,"_MCRHS.__init__(self, H, c_ops, n_ops)",class_method,,,,"Class method: _MCRHS.__init__(self, H, c_ops, n_ops)",qutip,qutip,v5.0.4,,,,,,,_MCRHS,__init__,"(self, H, c_ops, n_ops)",,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,_MCRHS.__call__(self),class_method,,,,Class method: _MCRHS.__call__(self),qutip,qutip,v5.0.4,,,,,,,_MCRHS,__call__,(self),,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,"_MCRHS.arguments(self, args)",class_method,,,,"Class method: _MCRHS.arguments(self, args)",qutip,qutip,v5.0.4,,,,,,,_MCRHS,arguments,"(self, args)",,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,"_MCRHS._register_feedback(self, key, val)",class_method,,,,"Class method: _MCRHS._register_feedback(self, key, val)",qutip,qutip,v5.0.4,,,,,,,_MCRHS,_register_feedback,"(self, key, val)",,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,"MCIntegrator.__init__(self, integrator, system, options=None)",class_method,,,,"Class method: MCIntegrator.__init__(self, integrator, system, options=None)",qutip,qutip,v5.0.4,,,,,,,MCIntegrator,__init__,"(self, integrator, system, options=None)",,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,"MCIntegrator.set_state(self, t, state0, generator,
                  no_jump=False, jump_prob_floor=0.0)",class_method,,,,"Class method: MCIntegrator.set_state(self, t, state0, generator,
                  no_jump=False, jump_prob_floor=0.0)",qutip,qutip,v5.0.4,,,,,,,MCIntegrator,set_state,"(self, t, state0, generator,
                  no_jump=False, jump_prob_floor=0.0)",,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,"MCIntegrator.get_state(self, copy=True)",class_method,,,,"Class method: MCIntegrator.get_state(self, copy=True)",qutip,qutip,v5.0.4,,,,,,,MCIntegrator,get_state,"(self, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,"MCIntegrator.integrate(self, t, copy=False)",class_method,,,,"Class method: MCIntegrator.integrate(self, t, copy=False)",qutip,qutip,v5.0.4,,,,,,,MCIntegrator,integrate,"(self, t, copy=False)",,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,"MCIntegrator.run(self, tlist)",class_method,,,,"Class method: MCIntegrator.run(self, tlist)",qutip,qutip,v5.0.4,,,,,,,MCIntegrator,run,"(self, tlist)",,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,"MCIntegrator.reset(self, hard=False)",class_method,,,,"Class method: MCIntegrator.reset(self, hard=False)",qutip,qutip,v5.0.4,,,,,,,MCIntegrator,reset,"(self, hard=False)",,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,"MCIntegrator._prob_func(self, state)",class_method,,,,"Class method: MCIntegrator._prob_func(self, state)",qutip,qutip,v5.0.4,,,,,,,MCIntegrator,_prob_func,"(self, state)",,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,"MCIntegrator._norm_func(self, state)",class_method,,,,"Class method: MCIntegrator._norm_func(self, state)",qutip,qutip,v5.0.4,,,,,,,MCIntegrator,_norm_func,"(self, state)",,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,"MCIntegrator._find_collapse_time(self, norm_old, norm, t_prev, t_final)",class_method,,,,"Class method: MCIntegrator._find_collapse_time(self, norm_old, norm, t_prev, t_final)",qutip,qutip,v5.0.4,,,,,,,MCIntegrator,_find_collapse_time,"(self, norm_old, norm, t_prev, t_final)",,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,"MCIntegrator._do_collapse(self, collapse_time, state)",class_method,,,,"Class method: MCIntegrator._do_collapse(self, collapse_time, state)",qutip,qutip,v5.0.4,,,,,,,MCIntegrator,_do_collapse,"(self, collapse_time, state)",,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,"MCIntegrator.arguments(self, args)",class_method,,,,"Class method: MCIntegrator.arguments(self, args)",qutip,qutip,v5.0.4,,,,,,,MCIntegrator,arguments,"(self, args)",,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,[property] MCIntegrator.integrator_options(self),class_method,,,,Class method: [property] MCIntegrator.integrator_options(self),qutip,qutip,v5.0.4,,,,,,,MCIntegrator,integrator_options,(self),,,,,,,,,property
qutip_qutip_v5.0.4,mcsolve.py,python,"MCSolver.__init__(self, H, c_ops, *, options=None)",class_method,,,,"Class method: MCSolver.__init__(self, H, c_ops, *, options=None)",qutip,qutip,v5.0.4,,,,,,,MCSolver,__init__,"(self, H, c_ops, *, options=None)",,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,"MCSolver._restore_state(self, data, *, copy=True)",class_method,,,,"Class method: MCSolver._restore_state(self, data, *, copy=True)",qutip,qutip,v5.0.4,,,,,,,MCSolver,_restore_state,"(self, data, *, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,MCSolver._initialize_stats(self),class_method,,,,Class method: MCSolver._initialize_stats(self),qutip,qutip,v5.0.4,,,,,,,MCSolver,_initialize_stats,(self),,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,"MCSolver._run_one_traj(self, seed, state, tlist, e_ops, **integrator_kwargs)",class_method,,,,"Class method: MCSolver._run_one_traj(self, seed, state, tlist, e_ops, **integrator_kwargs)",qutip,qutip,v5.0.4,,,,,,,MCSolver,_run_one_traj,"(self, seed, state, tlist, e_ops, **integrator_kwargs)",,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,"MCSolver.run(self, state, tlist, ntraj=1, *,
            args=None, e_ops=(), timeout=None, target_tol=None, seeds=None)",class_method,,,,"Class method: MCSolver.run(self, state, tlist, ntraj=1, *,
            args=None, e_ops=(), timeout=None, target_tol=None, seeds=None)",qutip,qutip,v5.0.4,,,,,,,MCSolver,run,"(self, state, tlist, ntraj=1, *,
            args=None, e_ops=(), timeout=None, target_tol=None, seeds=None)",,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,MCSolver._get_integrator(self),class_method,,,,Class method: MCSolver._get_integrator(self),qutip,qutip,v5.0.4,,,,,,,MCSolver,_get_integrator,(self),,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,[property] MCSolver._resultclass(self),class_method,,,,Class method: [property] MCSolver._resultclass(self),qutip,qutip,v5.0.4,,,,,,,MCSolver,_resultclass,(self),,,,,,,,,property
qutip_qutip_v5.0.4,mcsolve.py,python,[property] MCSolver.options(self),class_method,,,,Class method: [property] MCSolver.options(self),qutip,qutip,v5.0.4,,,,,,,MCSolver,options,(self),,,,,,,,,property
qutip_qutip_v5.0.4,mcsolve.py,python,"[options.setter] MCSolver.options(self, new_options)",class_method,,,,"Class method: [options.setter] MCSolver.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,MCSolver,options,"(self, new_options)",,,,,,,,,options.setter
qutip_qutip_v5.0.4,mcsolve.py,python,[classmethod] MCSolver.avail_integrators(cls),class_method,,,,Class method: [classmethod] MCSolver.avail_integrators(cls),qutip,qutip,v5.0.4,,,,,,,MCSolver,avail_integrators,(cls),,,,,,,,,classmethod
qutip_qutip_v5.0.4,mcsolve.py,python,"[classmethod] MCSolver.CollapseFeedback(cls, default=None)",class_method,,,,"Class method: [classmethod] MCSolver.CollapseFeedback(cls, default=None)",qutip,qutip,v5.0.4,,,,,,,MCSolver,CollapseFeedback,"(cls, default=None)",,,,,,,,,classmethod
qutip_qutip_v5.0.4,mcsolve.py,python,"[classmethod] MCSolver.StateFeedback(cls, default=None, raw_data=False, open=False)",class_method,,,,"Class method: [classmethod] MCSolver.StateFeedback(cls, default=None, raw_data=False, open=False)",qutip,qutip,v5.0.4,,,,,,,MCSolver,StateFeedback,"(cls, default=None, raw_data=False, open=False)",,,,,,,,,classmethod
qutip_qutip_v5.0.4,mcsolve.py,python,_MCRHS(_MultiTrajRHS),class,,,,Class: _MCRHS(_MultiTrajRHS),qutip,qutip,v5.0.4,,,,,,,_MCRHS,,,,,,,,,(_MultiTrajRHS),,
qutip_qutip_v5.0.4,mcsolve.py,python,MCIntegrator,class,,,,Class: MCIntegrator,qutip,qutip,v5.0.4,,,,,,,MCIntegrator,,,,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,MCSolver(MultiTrajSolver),class,,,,Class: MCSolver(MultiTrajSolver),qutip,qutip,v5.0.4,,,,,,,MCSolver,,,,,,,,,(MultiTrajSolver),,
qutip_qutip_v5.0.4,mcsolve.py,python,"mcsolve(H, state, tlist, c_ops=(), e_ops=None, ntraj=500, *,
            args=None, options=None, seeds=None, target_tol=None, timeout=None,
            **kwargs)",function,,,,"Function: mcsolve(H, state, tlist, c_ops=(), e_ops=None, ntraj=500, *,
            args=None, options=None, seeds=None, target_tol=None, timeout=None,
            **kwargs)",qutip,qutip,v5.0.4,,,,mcsolve,"(H, state, tlist, c_ops=(), e_ops=None, ntraj=500, *,
            args=None, options=None, seeds=None, target_tol=None, timeout=None,
            **kwargs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,"__all__ = ['mcsolve', ""MCSolver""]",constant,"__all__ = ['mcsolve', ""MCSolver""]",__all__,"['mcsolve', ""MCSolver""]","Constant: __all__ = ['mcsolve', ""MCSolver""]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,qutip.core.data,import,,,,Import: qutip.core.data,qutip,qutip,v5.0.4,import qutip.core.data as _data,,qutip.core.data,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,mcsolve.py,python,time from time,import,,,,Import: time from time,qutip,qutip,v5.0.4,from time import time,time,time,,,,,,,,,,,,,,,
,mcsolve.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,mcsolve.py,python,,,,,,Directory: qutip\solver\mcsolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,mesolve.py,python,"MESolver.name = ""mesolve""",class_field,,,,"Class field: MESolver.name = ""mesolve""",qutip,qutip,v5.0.4,,,,,,,MESolver,,,"name = ""mesolve""",,,,,name,,"""mesolve""",
qutip_qutip_v5.0.4,mesolve.py,python,MESolver._avail_integrators = {},class_field,,,,Class field: MESolver._avail_integrators = {},qutip,qutip,v5.0.4,,,,,,,MESolver,,,_avail_integrators = {},,,,,_avail_integrators,,{},
qutip_qutip_v5.0.4,mesolve.py,python,"MESolver.solver_options = {
        ""progress_bar"": """",
        ""progress_kwargs"": {""chunk_size"":10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        'method': 'adams',
    }",class_field,,,,"Class field: MESolver.solver_options = {
        ""progress_bar"": """",
        ""progress_kwargs"": {""chunk_size"":10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        'method': 'adams',
    }",qutip,qutip,v5.0.4,,,,,,,MESolver,,,"solver_options = {
        ""progress_bar"": """",
        ""progress_kwargs"": {""chunk_size"":10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        'method': 'adams',
    }",,,,,solver_options,,"{
        ""progress_bar"": """",
        ""progress_kwargs"": {""chunk_size"":10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        'method': 'adams',
    }",
qutip_qutip_v5.0.4,mesolve.py,python,[instance] MESolver._num_collapse = len(c_ops),class_field,,,,Class field: [instance] MESolver._num_collapse = len(c_ops),qutip,qutip,v5.0.4,,,,,,,MESolver,__init__,"(self, H, c_ops=None, *, options=None)",self._num_collapse = len(c_ops),self._num_collapse = len(c_ops),,,,,,,
qutip_qutip_v5.0.4,mesolve.py,python,"MESolver.__init__(self, H, c_ops=None, *, options=None)",class_method,,,,"Class method: MESolver.__init__(self, H, c_ops=None, *, options=None)",qutip,qutip,v5.0.4,,,,,,,MESolver,__init__,"(self, H, c_ops=None, *, options=None)",,,,,,,,,
qutip_qutip_v5.0.4,mesolve.py,python,MESolver._initialize_stats(self),class_method,,,,Class method: MESolver._initialize_stats(self),qutip,qutip,v5.0.4,,,,,,,MESolver,_initialize_stats,(self),,,,,,,,,
qutip_qutip_v5.0.4,mesolve.py,python,"[classmethod] MESolver.StateFeedback(cls, default=None, raw_data=False, prop=False)",class_method,,,,"Class method: [classmethod] MESolver.StateFeedback(cls, default=None, raw_data=False, prop=False)",qutip,qutip,v5.0.4,,,,,,,MESolver,StateFeedback,"(cls, default=None, raw_data=False, prop=False)",,,,,,,,,classmethod
qutip_qutip_v5.0.4,mesolve.py,python,MESolver(SESolver),class,,,,Class: MESolver(SESolver),qutip,qutip,v5.0.4,,,,,,,MESolver,,,,,,,,,(SESolver),,
qutip_qutip_v5.0.4,mesolve.py,python,"mesolve(H, rho0, tlist, c_ops=None, e_ops=None, args=None, options=None,
            **kwargs)",function,,,,"Function: mesolve(H, rho0, tlist, c_ops=None, e_ops=None, args=None, options=None,
            **kwargs)",qutip,qutip,v5.0.4,,,,mesolve,"(H, rho0, tlist, c_ops=None, e_ops=None, args=None, options=None,
            **kwargs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,mesolve.py,python,"__all__ = ['mesolve', 'MESolver']",constant,"__all__ = ['mesolve', 'MESolver']",__all__,"['mesolve', 'MESolver']","Constant: __all__ = ['mesolve', 'MESolver']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,mesolve.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,mesolve.py,python,time from time,import,,,,Import: time from time,qutip,qutip,v5.0.4,from time import time,time,time,,,,,,,,,,,,,,,
,mesolve.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,mesolve.py,python,,,,,,Directory: qutip\solver\mesolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,[instance] _MultiTrajRHS.rhs = rhs,class_field,,,,Class field: [instance] _MultiTrajRHS.rhs = rhs,qutip,qutip,v5.0.4,,,,,,,_MultiTrajRHS,__init__,"(self, rhs)",self.rhs = rhs,self.rhs = rhs,,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,"MultiTrajSolver.name = ""generic multi trajectory""",class_field,,,,"Class field: MultiTrajSolver.name = ""generic multi trajectory""",qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,,,"name = ""generic multi trajectory""",,,,,name,,"""generic multi trajectory""",
qutip_qutip_v5.0.4,multitraj.py,python,MultiTrajSolver._resultclass = MultiTrajResult,class_field,,,,Class field: MultiTrajSolver._resultclass = MultiTrajResult,qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,,,_resultclass = MultiTrajResult,,,,,_resultclass,,MultiTrajResult,
qutip_qutip_v5.0.4,multitraj.py,python,MultiTrajSolver._trajectory_resultclass = Result,class_field,,,,Class field: MultiTrajSolver._trajectory_resultclass = Result,qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,,,_trajectory_resultclass = Result,,,,,_trajectory_resultclass,,Result,
qutip_qutip_v5.0.4,multitraj.py,python,MultiTrajSolver._avail_integrators = {},class_field,,,,Class field: MultiTrajSolver._avail_integrators = {},qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,,,_avail_integrators = {},,,,,_avail_integrators,,{},
qutip_qutip_v5.0.4,multitraj.py,python,"MultiTrajSolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""method"": """",
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
    }",class_field,,,,"Class field: MultiTrajSolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""method"": """",
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
    }",qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,,,"solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""method"": """",
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
    }",,,,,solver_options,,"{
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""method"": """",
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
    }",
qutip_qutip_v5.0.4,multitraj.py,python,[instance] MultiTrajSolver.options = options,class_field,,,,Class field: [instance] MultiTrajSolver.options = options,qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,__init__,"(self, rhs, *, options=None)",self.options = options,self.options = options,,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,[instance] MultiTrajSolver.seed_sequence = np.random.SeedSequence(),class_field,,,,Class field: [instance] MultiTrajSolver.seed_sequence = np.random.SeedSequence(),qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,__init__,"(self, rhs, *, options=None)",self.seed_sequence = np.random.SeedSequence(),self.seed_sequence = np.random.SeedSequence(),,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,[instance] MultiTrajSolver._integrator = _get_integrator(),class_field,,,,Class field: [instance] MultiTrajSolver._integrator = _get_integrator(),qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,__init__,"(self, rhs, *, options=None)",self._integrator = self._get_integrator(),self._integrator = self._get_integrator(),,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,[instance] MultiTrajSolver._state_metadata = {},class_field,,,,Class field: [instance] MultiTrajSolver._state_metadata = {},qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,__init__,"(self, rhs, *, options=None)",self._state_metadata = {},self._state_metadata = {},,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,[instance] MultiTrajSolver.stats = _initialize_stats(),class_field,,,,Class field: [instance] MultiTrajSolver.stats = _initialize_stats(),qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,__init__,"(self, rhs, *, options=None)",self.stats = self._initialize_stats(),self.stats = self._initialize_stats(),,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,"_MultiTrajRHS.__init__(self, rhs)",class_method,,,,"Class method: _MultiTrajRHS.__init__(self, rhs)",qutip,qutip,v5.0.4,,,,,,,_MultiTrajRHS,__init__,"(self, rhs)",,,,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,"_MultiTrajRHS.arguments(self, args)",class_method,,,,"Class method: _MultiTrajRHS.arguments(self, args)",qutip,qutip,v5.0.4,,,,,,,_MultiTrajRHS,arguments,"(self, args)",,,,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,"_MultiTrajRHS._register_feedback(self, type, val)",class_method,,,,"Class method: _MultiTrajRHS._register_feedback(self, type, val)",qutip,qutip,v5.0.4,,,,,,,_MultiTrajRHS,_register_feedback,"(self, type, val)",,,,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,"_MultiTrajRHS.__getattr__(self, attr)",class_method,,,,"Class method: _MultiTrajRHS.__getattr__(self, attr)",qutip,qutip,v5.0.4,,,,,,,_MultiTrajRHS,__getattr__,"(self, attr)",,,,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,"MultiTrajSolver.__init__(self, rhs, *, options=None)",class_method,,,,"Class method: MultiTrajSolver.__init__(self, rhs, *, options=None)",qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,__init__,"(self, rhs, *, options=None)",,,,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,"MultiTrajSolver.start(self, state, t0, seed=None)",class_method,,,,"Class method: MultiTrajSolver.start(self, state, t0, seed=None)",qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,start,"(self, state, t0, seed=None)",,,,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,"MultiTrajSolver.step(self, t, *, args=None, copy=True)",class_method,,,,"Class method: MultiTrajSolver.step(self, t, *, args=None, copy=True)",qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,step,"(self, t, *, args=None, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,"MultiTrajSolver._initialize_run(self, state, ntraj=1, args=None, e_ops=(),
                        timeout=None, target_tol=None, seeds=None)",class_method,,,,"Class method: MultiTrajSolver._initialize_run(self, state, ntraj=1, args=None, e_ops=(),
                        timeout=None, target_tol=None, seeds=None)",qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,_initialize_run,"(self, state, ntraj=1, args=None, e_ops=(),
                        timeout=None, target_tol=None, seeds=None)",,,,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,"MultiTrajSolver.run(self, state, tlist, ntraj=1, *,
            args=None, e_ops=(), timeout=None, target_tol=None, seeds=None)",class_method,,,,"Class method: MultiTrajSolver.run(self, state, tlist, ntraj=1, *,
            args=None, e_ops=(), timeout=None, target_tol=None, seeds=None)",qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,run,"(self, state, tlist, ntraj=1, *,
            args=None, e_ops=(), timeout=None, target_tol=None, seeds=None)",,,,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,"MultiTrajSolver._initialize_run_one_traj(self, seed, state, tlist, e_ops,
                                 **integrator_kwargs)",class_method,,,,"Class method: MultiTrajSolver._initialize_run_one_traj(self, seed, state, tlist, e_ops,
                                 **integrator_kwargs)",qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,_initialize_run_one_traj,"(self, seed, state, tlist, e_ops,
                                 **integrator_kwargs)",,,,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,"MultiTrajSolver._run_one_traj(self, seed, state, tlist, e_ops, **integrator_kwargs)",class_method,,,,"Class method: MultiTrajSolver._run_one_traj(self, seed, state, tlist, e_ops, **integrator_kwargs)",qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,_run_one_traj,"(self, seed, state, tlist, e_ops, **integrator_kwargs)",,,,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,"MultiTrajSolver._integrate_one_traj(self, seed, tlist, result)",class_method,,,,"Class method: MultiTrajSolver._integrate_one_traj(self, seed, tlist, result)",qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,_integrate_one_traj,"(self, seed, tlist, result)",,,,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,"MultiTrajSolver._read_seed(self, seed, ntraj)",class_method,,,,"Class method: MultiTrajSolver._read_seed(self, seed, ntraj)",qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,_read_seed,"(self, seed, ntraj)",,,,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,"MultiTrajSolver._argument(self, args)",class_method,,,,"Class method: MultiTrajSolver._argument(self, args)",qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,_argument,"(self, args)",,,,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,"MultiTrajSolver._get_generator(self, seed)",class_method,,,,"Class method: MultiTrajSolver._get_generator(self, seed)",qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,_get_generator,"(self, seed)",,,,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,_MultiTrajRHS,class,,,,Class: _MultiTrajRHS,qutip,qutip,v5.0.4,,,,,,,_MultiTrajRHS,,,,,,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,MultiTrajSolver(Solver),class,,,,Class: MultiTrajSolver(Solver),qutip,qutip,v5.0.4,,,,,,,MultiTrajSolver,,,,,,,,,(Solver),,
qutip_qutip_v5.0.4,multitraj.py,python,"__all__ = [""MultiTrajSolver""]",constant,"__all__ = [""MultiTrajSolver""]",__all__,"[""MultiTrajSolver""]","Constant: __all__ = [""MultiTrajSolver""]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,time from time,import,,,,Import: time from time,qutip,qutip,v5.0.4,from time import time,time,time,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,multitraj.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
,multitraj.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,multitraj.py,python,,,,,,Directory: qutip\solver\multitraj.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,[instance] InfluenceMartingale._nm_solver = nm_solver,class_field,,,,Class field: [instance] InfluenceMartingale._nm_solver = nm_solver,qutip,qutip,v5.0.4,,,,,,,InfluenceMartingale,__init__,"(self, nm_solver, a_parameter, quad_limit)",self._nm_solver = nm_solver,self._nm_solver = nm_solver,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,[instance] InfluenceMartingale._quad_limit = quad_limit,class_field,,,,Class field: [instance] InfluenceMartingale._quad_limit = quad_limit,qutip,qutip,v5.0.4,,,,,,,InfluenceMartingale,__init__,"(self, nm_solver, a_parameter, quad_limit)",self._quad_limit = quad_limit,self._quad_limit = quad_limit,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,[instance] InfluenceMartingale._a_parameter = a_parameter,class_field,,,,Class field: [instance] InfluenceMartingale._a_parameter = a_parameter,qutip,qutip,v5.0.4,,,,,,,InfluenceMartingale,__init__,"(self, nm_solver, a_parameter, quad_limit)",self._a_parameter = a_parameter,self._a_parameter = a_parameter,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,[instance] InfluenceMartingale.reset(),class_field,,,,Class field: [instance] InfluenceMartingale.reset(),qutip,qutip,v5.0.4,,,,,,,InfluenceMartingale,__init__,"(self, nm_solver, a_parameter, quad_limit)",self.reset(),self.reset(),,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"[instance] NmMCIntegrator._martingale = kwargs.pop(""__martingale"")",class_field,,,,"Class field: [instance] NmMCIntegrator._martingale = kwargs.pop(""__martingale"")",qutip,qutip,v5.0.4,,,,,,,NmMCIntegrator,__init__,"(self, *args, **kwargs)","self._martingale = kwargs.pop(""__martingale"")","self._martingale = kwargs.pop(""__martingale"")",,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"NonMarkovianMCSolver.name = ""nm_mcsolve""",class_field,,,,"Class field: NonMarkovianMCSolver.name = ""nm_mcsolve""",qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,,,"name = ""nm_mcsolve""",,,,,name,,"""nm_mcsolve""",
qutip_qutip_v5.0.4,nm_mcsolve.py,python,NonMarkovianMCSolver._resultclass = NmmcResult,class_field,,,,Class field: NonMarkovianMCSolver._resultclass = NmmcResult,qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,,,_resultclass = NmmcResult,,,,,_resultclass,,NmmcResult,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"NonMarkovianMCSolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""adams"",
        ""mc_corr_eps"": 1e-10,
        ""norm_steps"": 5,
        ""norm_t_tol"": 1e-6,
        ""norm_tol"": 1e-4,
        ""completeness_rtol"": 1e-5,
        ""completeness_atol"": 1e-8,
        ""martingale_quad_limit"": 100,
    }",class_field,,,,"Class field: NonMarkovianMCSolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""adams"",
        ""mc_corr_eps"": 1e-10,
        ""norm_steps"": 5,
        ""norm_t_tol"": 1e-6,
        ""norm_tol"": 1e-4,
        ""completeness_rtol"": 1e-5,
        ""completeness_atol"": 1e-8,
        ""martingale_quad_limit"": 100,
    }",qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,,,"solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""adams"",
        ""mc_corr_eps"": 1e-10,
        ""norm_steps"": 5,
        ""norm_t_tol"": 1e-6,
        ""norm_tol"": 1e-4,
        ""completeness_rtol"": 1e-5,
        ""completeness_atol"": 1e-8,
        ""martingale_quad_limit"": 100,
    }",,,,,solver_options,,"{
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""adams"",
        ""mc_corr_eps"": 1e-10,
        ""norm_steps"": 5,
        ""norm_t_tol"": 1e-6,
        ""norm_tol"": 1e-4,
        ""completeness_rtol"": 1e-5,
        ""completeness_atol"": 1e-8,
        ""martingale_quad_limit"": 100,
    }",
qutip_qutip_v5.0.4,nm_mcsolve.py,python,NonMarkovianMCSolver._trajectory_resultclass = NmmcTrajectoryResult,class_field,,,,Class field: NonMarkovianMCSolver._trajectory_resultclass = NmmcTrajectoryResult,qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,,,_trajectory_resultclass = NmmcTrajectoryResult,,,,,_trajectory_resultclass,,NmmcTrajectoryResult,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,NonMarkovianMCSolver._mc_integrator_class = NmMCIntegrator,class_field,,,,Class field: NonMarkovianMCSolver._mc_integrator_class = NmMCIntegrator,qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,,,_mc_integrator_class = NmMCIntegrator,,,,,_mc_integrator_class,,NmMCIntegrator,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,[instance] NonMarkovianMCSolver.options = options,class_field,,,,Class field: [instance] NonMarkovianMCSolver.options = options,qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,__init__,"(
        self, H, ops_and_rates, args=None, options=None,
    )",self.options = options,self.options = options,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"[instance] NonMarkovianMCSolver.ops = [op for op, _ in ops_and_rates]",class_field,,,,"Class field: [instance] NonMarkovianMCSolver.ops = [op for op, _ in ops_and_rates]",qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,__init__,"(
        self, H, ops_and_rates, args=None, options=None,
    )","self.ops = [op for op, _ in ops_and_rates]","self.ops = [op for op, _ in ops_and_rates]",,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"[instance] NonMarkovianMCSolver._martingale = InfluenceMartingale(
            self, a_parameter, options[""martingale_quad_limit""]
        )",class_field,,,,"Class field: [instance] NonMarkovianMCSolver._martingale = InfluenceMartingale(
            self, a_parameter, options[""martingale_quad_limit""]
        )",qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,__init__,"(
        self, H, ops_and_rates, args=None, options=None,
    )","self._martingale = InfluenceMartingale(
            self, a_parameter, self.options[""martingale_quad_limit""]
        )","self._martingale = InfluenceMartingale(
            self, a_parameter, self.options[""martingale_quad_limit""]
        )",,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"[instance] NonMarkovianMCSolver._rates = [rate for _, rate in ops_and_rates]",class_field,,,,"Class field: [instance] NonMarkovianMCSolver._rates = [rate for _, rate in ops_and_rates]",qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,__init__,"(
        self, H, ops_and_rates, args=None, options=None,
    )","self._rates = [rate for _, rate in ops_and_rates]","self._rates = [rate for _, rate in ops_and_rates]",,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,[instance] NonMarkovianMCSolver._rate_shift = RateShiftCoefficient(_rates),class_field,,,,Class field: [instance] NonMarkovianMCSolver._rate_shift = RateShiftCoefficient(_rates),qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,__init__,"(
        self, H, ops_and_rates, args=None, options=None,
    )",self._rate_shift = RateShiftCoefficient(self._rates),self._rate_shift = RateShiftCoefficient(self._rates),,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"[instance] NonMarkovianMCSolver._sqrt_shifted_rates = [
            SqrtRealCoefficient(rate + _rate_shift)
            for rate in _rates
        ]",class_field,,,,"Class field: [instance] NonMarkovianMCSolver._sqrt_shifted_rates = [
            SqrtRealCoefficient(rate + _rate_shift)
            for rate in _rates
        ]",qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,__init__,"(
        self, H, ops_and_rates, args=None, options=None,
    )","self._sqrt_shifted_rates = [
            SqrtRealCoefficient(rate + self._rate_shift)
            for rate in self._rates
        ]","self._sqrt_shifted_rates = [
            SqrtRealCoefficient(rate + self._rate_shift)
            for rate in self._rates
        ]",,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"[instance] NonMarkovianMCSolver._trajectory_resultclass = functools.partial(
            NmmcTrajectoryResult, __nm_solver=self,
        )",class_field,,,,"Class field: [instance] NonMarkovianMCSolver._trajectory_resultclass = functools.partial(
            NmmcTrajectoryResult, __nm_solver=self,
        )",qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,__init__,"(
        self, H, ops_and_rates, args=None, options=None,
    )","self._trajectory_resultclass = functools.partial(
            NmmcTrajectoryResult, __nm_solver=self,
        )","self._trajectory_resultclass = functools.partial(
            NmmcTrajectoryResult, __nm_solver=self,
        )",,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"[instance] NonMarkovianMCSolver._mc_integrator_class = functools.partial(
            NmMCIntegrator, __martingale=_martingale,
        )",class_field,,,,"Class field: [instance] NonMarkovianMCSolver._mc_integrator_class = functools.partial(
            NmMCIntegrator, __martingale=_martingale,
        )",qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,__init__,"(
        self, H, ops_and_rates, args=None, options=None,
    )","self._mc_integrator_class = functools.partial(
            NmMCIntegrator, __martingale=self._martingale,
        )","self._mc_integrator_class = functools.partial(
            NmMCIntegrator, __martingale=self._martingale,
        )",,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"InfluenceMartingale.__init__(self, nm_solver, a_parameter, quad_limit)",class_method,,,,"Class method: InfluenceMartingale.__init__(self, nm_solver, a_parameter, quad_limit)",qutip,qutip,v5.0.4,,,,,,,InfluenceMartingale,__init__,"(self, nm_solver, a_parameter, quad_limit)",,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,InfluenceMartingale.reset(self),class_method,,,,Class method: InfluenceMartingale.reset(self),qutip,qutip,v5.0.4,,,,,,,InfluenceMartingale,reset,(self),,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"InfluenceMartingale.initialize(self, t0, cache='clear')",class_method,,,,"Class method: InfluenceMartingale.initialize(self, t0, cache='clear')",qutip,qutip,v5.0.4,,,,,,,InfluenceMartingale,initialize,"(self, t0, cache='clear')",,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"InfluenceMartingale.add_collapse(self, collapse_time, collapse_channel)",class_method,,,,"Class method: InfluenceMartingale.add_collapse(self, collapse_time, collapse_channel)",qutip,qutip,v5.0.4,,,,,,,InfluenceMartingale,add_collapse,"(self, collapse_time, collapse_channel)",,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"InfluenceMartingale.value(self, t)",class_method,,,,"Class method: InfluenceMartingale.value(self, t)",qutip,qutip,v5.0.4,,,,,,,InfluenceMartingale,value,"(self, t)",,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"InfluenceMartingale._compute_continuous_martingale(self, t1, t2)",class_method,,,,"Class method: InfluenceMartingale._compute_continuous_martingale(self, t1, t2)",qutip,qutip,v5.0.4,,,,,,,InfluenceMartingale,_compute_continuous_martingale,"(self, t1, t2)",,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"NmMCIntegrator.__init__(self, *args, **kwargs)",class_method,,,,"Class method: NmMCIntegrator.__init__(self, *args, **kwargs)",qutip,qutip,v5.0.4,,,,,,,NmMCIntegrator,__init__,"(self, *args, **kwargs)",,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"NmMCIntegrator._do_collapse(self, *args, **kwargs)",class_method,,,,"Class method: NmMCIntegrator._do_collapse(self, *args, **kwargs)",qutip,qutip,v5.0.4,,,,,,,NmMCIntegrator,_do_collapse,"(self, *args, **kwargs)",,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"NmMCIntegrator.set_state(self, t, *args, **kwargs)",class_method,,,,"Class method: NmMCIntegrator.set_state(self, t, *args, **kwargs)",qutip,qutip,v5.0.4,,,,,,,NmMCIntegrator,set_state,"(self, t, *args, **kwargs)",,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"NonMarkovianMCSolver.__init__(
        self, H, ops_and_rates, args=None, options=None,
    )",class_method,,,,"Class method: NonMarkovianMCSolver.__init__(
        self, H, ops_and_rates, args=None, options=None,
    )",qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,__init__,"(
        self, H, ops_and_rates, args=None, options=None,
    )",,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"NonMarkovianMCSolver._check_completeness(self, ops_and_rates)",class_method,,,,"Class method: NonMarkovianMCSolver._check_completeness(self, ops_and_rates)",qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,_check_completeness,"(self, ops_and_rates)",,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,NonMarkovianMCSolver.current_martingale(self),class_method,,,,Class method: NonMarkovianMCSolver.current_martingale(self),qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,current_martingale,(self),,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"NonMarkovianMCSolver._argument(self, args)",class_method,,,,"Class method: NonMarkovianMCSolver._argument(self, args)",qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,_argument,"(self, args)",,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"NonMarkovianMCSolver.add_feedback(self, key, type)",class_method,,,,"Class method: NonMarkovianMCSolver.add_feedback(self, key, type)",qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,add_feedback,"(self, key, type)",,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"NonMarkovianMCSolver.rate_shift(self, t)",class_method,,,,"Class method: NonMarkovianMCSolver.rate_shift(self, t)",qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,rate_shift,"(self, t)",,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"NonMarkovianMCSolver.rate(self, t, i)",class_method,,,,"Class method: NonMarkovianMCSolver.rate(self, t, i)",qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,rate,"(self, t, i)",,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"NonMarkovianMCSolver.sqrt_shifted_rate(self, t, i)",class_method,,,,"Class method: NonMarkovianMCSolver.sqrt_shifted_rate(self, t, i)",qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,sqrt_shifted_rate,"(self, t, i)",,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"NonMarkovianMCSolver.start(self, state, t0, seed=None)",class_method,,,,"Class method: NonMarkovianMCSolver.start(self, state, t0, seed=None)",qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,start,"(self, state, t0, seed=None)",,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"NonMarkovianMCSolver.step(self, t, *, args=None, copy=True)",class_method,,,,"Class method: NonMarkovianMCSolver.step(self, t, *, args=None, copy=True)",qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,step,"(self, t, *, args=None, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"NonMarkovianMCSolver.run(self, state, tlist, ntraj=1, *, args=None, **kwargs)",class_method,,,,"Class method: NonMarkovianMCSolver.run(self, state, tlist, ntraj=1, *, args=None, **kwargs)",qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,run,"(self, state, tlist, ntraj=1, *, args=None, **kwargs)",,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,[property] NonMarkovianMCSolver.options(self),class_method,,,,Class method: [property] NonMarkovianMCSolver.options(self),qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,options,(self),,,,,,,,,property
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"[options.setter] NonMarkovianMCSolver.options(self, new_options)",class_method,,,,"Class method: [options.setter] NonMarkovianMCSolver.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,options,"(self, new_options)",,,,,,,,,options.setter
qutip_qutip_v5.0.4,nm_mcsolve.py,python,InfluenceMartingale,class,,,,Class: InfluenceMartingale,qutip,qutip,v5.0.4,,,,,,,InfluenceMartingale,,,,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,NmMCIntegrator(MCIntegrator),class,,,,Class: NmMCIntegrator(MCIntegrator),qutip,qutip,v5.0.4,,,,,,,NmMCIntegrator,,,,,,,,,(MCIntegrator),,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,NonMarkovianMCSolver(MCSolver),class,,,,Class: NonMarkovianMCSolver(MCSolver),qutip,qutip,v5.0.4,,,,,,,NonMarkovianMCSolver,,,,,,,,,(MCSolver),,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"nm_mcsolve(H, state, tlist, ops_and_rates=(), e_ops=None, ntraj=500, *,
               args=None, options=None, seeds=None, target_tol=None,
               timeout=None)",function,,,,"Function: nm_mcsolve(H, state, tlist, ops_and_rates=(), e_ops=None, ntraj=500, *,
               args=None, options=None, seeds=None, target_tol=None,
               timeout=None)",qutip,qutip,v5.0.4,,,,nm_mcsolve,"(H, state, tlist, ops_and_rates=(), e_ops=None, ntraj=500, *,
               args=None, options=None, seeds=None, target_tol=None,
               timeout=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"_parse_op_and_rate(op, rate, **kw)",function,,,,"Function: _parse_op_and_rate(op, rate, **kw)",qutip,qutip,v5.0.4,,,,_parse_op_and_rate,"(op, rate, **kw)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,"__all__ = ['nm_mcsolve', 'NonMarkovianMCSolver']",constant,"__all__ = ['nm_mcsolve', 'NonMarkovianMCSolver']",__all__,"['nm_mcsolve', 'NonMarkovianMCSolver']","Constant: __all__ = ['nm_mcsolve', 'NonMarkovianMCSolver']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,functools,import,,,,Import: functools,qutip,qutip,v5.0.4,import functools,,functools,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,numbers,import,,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,,numbers,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,nm_mcsolve.py,python,scipy,import,,,,Import: scipy,qutip,qutip,v5.0.4,import scipy,,scipy,,,,,,,,,,,,,,,
,nm_mcsolve.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,nm_mcsolve.py,python,,,,,,Directory: qutip\solver\nm_mcsolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,options.py,python,[instance] _SolverOptions._default = default,class_field,,,,Class field: [instance] _SolverOptions._default = default,qutip,qutip,v5.0.4,,,,,,,_SolverOptions,__init__,"(
        self, default, feedback=None, name="""", doc="""", /, **kwargs
    )",self._default = default,self._default = default,,,,,,,
qutip_qutip_v5.0.4,options.py,python,[instance] _SolverOptions.__doc__ = doc,class_field,,,,Class field: [instance] _SolverOptions.__doc__ = doc,qutip,qutip,v5.0.4,,,,,,,_SolverOptions,__init__,"(
        self, default, feedback=None, name="""", doc="""", /, **kwargs
    )",self.__doc__ = doc,self.__doc__ = doc,,,,,,,
qutip_qutip_v5.0.4,options.py,python,[instance] _SolverOptions._feedback = feedback,class_field,,,,Class field: [instance] _SolverOptions._feedback = feedback,qutip,qutip,v5.0.4,,,,,,,_SolverOptions,__init__,"(
        self, default, feedback=None, name="""", doc="""", /, **kwargs
    )",self._feedback = feedback,self._feedback = feedback,,,,,,,
qutip_qutip_v5.0.4,options.py,python,[instance] _SolverOptions._name = name,class_field,,,,Class field: [instance] _SolverOptions._name = name,qutip,qutip,v5.0.4,,,,,,,_SolverOptions,__init__,"(
        self, default, feedback=None, name="""", doc="""", /, **kwargs
    )",self._name = name,self._name = name,,,,,,,
qutip_qutip_v5.0.4,options.py,python,"_SolverOptions.__init__(
        self, default, feedback=None, name="""", doc="""", /, **kwargs
    )",class_method,,,,"Class method: _SolverOptions.__init__(
        self, default, feedback=None, name="""", doc="""", /, **kwargs
    )",qutip,qutip,v5.0.4,,,,,,,_SolverOptions,__init__,"(
        self, default, feedback=None, name="""", doc="""", /, **kwargs
    )",,,,,,,,,
qutip_qutip_v5.0.4,options.py,python,"_SolverOptions.__setitem__(self, key, val)",class_method,,,,"Class method: _SolverOptions.__setitem__(self, key, val)",qutip,qutip,v5.0.4,,,,,,,_SolverOptions,__setitem__,"(self, key, val)",,,,,,,,,
qutip_qutip_v5.0.4,options.py,python,"_SolverOptions.__delitem__(self, key)",class_method,,,,"Class method: _SolverOptions.__delitem__(self, key)",qutip,qutip,v5.0.4,,,,,,,_SolverOptions,__delitem__,"(self, key)",,,,,,,,,
qutip_qutip_v5.0.4,options.py,python,_SolverOptions.copy(self),class_method,,,,Class method: _SolverOptions.copy(self),qutip,qutip,v5.0.4,,,,,,,_SolverOptions,copy,(self),,,,,,,,,
qutip_qutip_v5.0.4,options.py,python,_SolverOptions.__str__(self),class_method,,,,Class method: _SolverOptions.__str__(self),qutip,qutip,v5.0.4,,,,,,,_SolverOptions,__str__,(self),,,,,,,,,
qutip_qutip_v5.0.4,options.py,python,"[classmethod] _SolverOptions._from_reduced(cls, default, feedback, name, doc, keys, args)",class_method,,,,"Class method: [classmethod] _SolverOptions._from_reduced(cls, default, feedback, name, doc, keys, args)",qutip,qutip,v5.0.4,,,,,,,_SolverOptions,_from_reduced,"(cls, default, feedback, name, doc, keys, args)",,,,,,,,,classmethod
qutip_qutip_v5.0.4,options.py,python,_SolverOptions.__reduce__(self),class_method,,,,Class method: _SolverOptions.__reduce__(self),qutip,qutip,v5.0.4,,,,,,,_SolverOptions,__reduce__,(self),,,,,,,,,
qutip_qutip_v5.0.4,options.py,python,_SolverOptions(dict),class,,,,Class: _SolverOptions(dict),qutip,qutip,v5.0.4,,,,,,,_SolverOptions,,,,,,,,,(dict),,
qutip_qutip_v5.0.4,options.py,python,"SolverOptions(*args, **kwargs)",function,,,,"Function: SolverOptions(*args, **kwargs)",qutip,qutip,v5.0.4,,,,SolverOptions,"(*args, **kwargs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,options.py,python,Options(**kwargs),function,,,,Function: Options(**kwargs),qutip,qutip,v5.0.4,,,,Options,(**kwargs),,,,,,,,,,,,,
qutip_qutip_v5.0.4,options.py,python,"__all__ = [""Options"", ""SolverOptions""]",constant,"__all__ = [""Options"", ""SolverOptions""]",__all__,"[""Options"", ""SolverOptions""]","Constant: __all__ = [""Options"", ""SolverOptions""]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,options.py,python,warnings,import,,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,,warnings,,,,,,,,,,,,,,,
,options.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,options.py,python,,,,,,Directory: qutip\solver\options.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,[instance] MapExceptions.errors = errors,class_field,,,,Class field: [instance] MapExceptions.errors = errors,qutip,qutip,v5.0.4,,,,,,,MapExceptions,__init__,"(self, msg, errors, results)",self.errors = errors,self.errors = errors,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,[instance] MapExceptions.results = results,class_field,,,,Class field: [instance] MapExceptions.results = results,qutip,qutip,v5.0.4,,,,,,,MapExceptions,__init__,"(self, msg, errors, results)",self.results = results,self.results = results,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,"MapExceptions.__init__(self, msg, errors, results)",class_method,,,,"Class method: MapExceptions.__init__(self, msg, errors, results)",qutip,qutip,v5.0.4,,,,,,,MapExceptions,__init__,"(self, msg, errors, results)",,,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,MapExceptions(Exception),class,,,,Class: MapExceptions(Exception),qutip,qutip,v5.0.4,,,,,,,MapExceptions,,,,,,,,,(Exception),,
qutip_qutip_v5.0.4,parallel.py,python,_read_map_kw(options),function,,,,Function: _read_map_kw(options),qutip,qutip,v5.0.4,,,,_read_map_kw,(options),,,,,,,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,"serial_map(task, values, task_args=None, task_kwargs=None,
               reduce_func=None, map_kw=None,
               progress_bar=None, progress_bar_kwargs={})",function,,,,"Function: serial_map(task, values, task_args=None, task_kwargs=None,
               reduce_func=None, map_kw=None,
               progress_bar=None, progress_bar_kwargs={})",qutip,qutip,v5.0.4,,,,serial_map,"(task, values, task_args=None, task_kwargs=None,
               reduce_func=None, map_kw=None,
               progress_bar=None, progress_bar_kwargs={})",,,,,,,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,"_generic_pmap(task, values, task_args, task_kwargs, reduce_func,
                  timeout, fail_fast, num_workers,
                  progress_bar, progress_bar_kwargs,
                  setup_executor, extract_result, shutdown_executor)",function,,,,"Function: _generic_pmap(task, values, task_args, task_kwargs, reduce_func,
                  timeout, fail_fast, num_workers,
                  progress_bar, progress_bar_kwargs,
                  setup_executor, extract_result, shutdown_executor)",qutip,qutip,v5.0.4,,,,_generic_pmap,"(task, values, task_args, task_kwargs, reduce_func,
                  timeout, fail_fast, num_workers,
                  progress_bar, progress_bar_kwargs,
                  setup_executor, extract_result, shutdown_executor)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,"parallel_map(task, values, task_args=None, task_kwargs=None,
                 reduce_func=None, map_kw=None,
                 progress_bar=None, progress_bar_kwargs={})",function,,,,"Function: parallel_map(task, values, task_args=None, task_kwargs=None,
                 reduce_func=None, map_kw=None,
                 progress_bar=None, progress_bar_kwargs={})",qutip,qutip,v5.0.4,,,,parallel_map,"(task, values, task_args=None, task_kwargs=None,
                 reduce_func=None, map_kw=None,
                 progress_bar=None, progress_bar_kwargs={})",,,,,,,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,"loky_pmap(task, values, task_args=None, task_kwargs=None,
              reduce_func=None, map_kw=None,
              progress_bar=None, progress_bar_kwargs={})",function,,,,"Function: loky_pmap(task, values, task_args=None, task_kwargs=None,
              reduce_func=None, map_kw=None,
              progress_bar=None, progress_bar_kwargs={})",qutip,qutip,v5.0.4,,,,loky_pmap,"(task, values, task_args=None, task_kwargs=None,
              reduce_func=None, map_kw=None,
              progress_bar=None, progress_bar_kwargs={})",,,,,,,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,"mpi_pmap(task, values, task_args=None, task_kwargs=None,
             reduce_func=None, map_kw=None,
             progress_bar=None, progress_bar_kwargs={})",function,,,,"Function: mpi_pmap(task, values, task_args=None, task_kwargs=None,
             reduce_func=None, map_kw=None,
             progress_bar=None, progress_bar_kwargs={})",qutip,qutip,v5.0.4,,,,mpi_pmap,"(task, values, task_args=None, task_kwargs=None,
             reduce_func=None, map_kw=None,
             progress_bar=None, progress_bar_kwargs={})",,,,,,,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,_get_map(options),function,,,,Function: _get_map(options),qutip,qutip,v5.0.4,,,,_get_map,(options),,,,,,,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,"__all__ = ['parallel_map', 'serial_map', 'loky_pmap', 'mpi_pmap']",constant,"__all__ = ['parallel_map', 'serial_map', 'loky_pmap', 'mpi_pmap']",__all__,"['parallel_map', 'serial_map', 'loky_pmap', 'mpi_pmap']","Constant: __all__ = ['parallel_map', 'serial_map', 'loky_pmap', 'mpi_pmap']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,"default_map_kw = {
    'timeout': threading.TIMEOUT_MAX,
    'num_cpus': available_cpu_count(),
    'fail_fast': True,
}",constant,"default_map_kw = {
    'timeout': threading.TIMEOUT_MAX,
    'num_cpus': available_cpu_count(),
    'fail_fast': True,
}",default_map_kw,"{
    'timeout': threading.TIMEOUT_MAX,
    'num_cpus': available_cpu_count(),
    'fail_fast': True,
}","Constant: default_map_kw = {
    'timeout': threading.TIMEOUT_MAX,
    'num_cpus': available_cpu_count(),
    'fail_fast': True,
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,"_maps = {
    ""parallel_map"": parallel_map,
    ""parallel"": parallel_map,
    ""serial_map"": serial_map,
    ""serial"": serial_map,
    ""loky"": loky_pmap,
    ""mpi"": mpi_pmap
}",constant,"_maps = {
    ""parallel_map"": parallel_map,
    ""parallel"": parallel_map,
    ""serial_map"": serial_map,
    ""serial"": serial_map,
    ""loky"": loky_pmap,
    ""mpi"": mpi_pmap
}",_maps,"{
    ""parallel_map"": parallel_map,
    ""parallel"": parallel_map,
    ""serial_map"": serial_map,
    ""serial"": serial_map,
    ""loky"": loky_pmap,
    ""mpi"": mpi_pmap
}","Constant: _maps = {
    ""parallel_map"": parallel_map,
    ""parallel"": parallel_map,
    ""serial_map"": serial_map,
    ""serial"": serial_map,
    ""loky"": loky_pmap,
    ""mpi"": mpi_pmap
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,multiprocessing,import,,,,Import: multiprocessing,qutip,qutip,v5.0.4,import multiprocessing,,multiprocessing,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,os,import,,,,Import: os,qutip,qutip,v5.0.4,import os,,os,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,sys,import,,,,Import: sys,qutip,qutip,v5.0.4,import sys,,sys,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,time,import,,,,Import: time,qutip,qutip,v5.0.4,import time,,time,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,threading,import,,,,Import: threading,qutip,qutip,v5.0.4,import threading,,threading,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,concurrent.futures,import,,,,Import: concurrent.futures,qutip,qutip,v5.0.4,import concurrent.futures,,concurrent.futures,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,warnings,import,,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,,warnings,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,progress_bars from qutip.ui.progressbar,local_import,,,,Import: progress_bars from qutip.ui.progressbar,qutip,qutip,v5.0.4,from qutip.ui.progressbar import progress_bars,qutip.ui.progressbar,progress_bars,,,qutip.ui.progressbar,,,,,,,,,,,,
qutip_qutip_v5.0.4,parallel.py,python,available_cpu_count from qutip.settings,local_import,,,,Import: available_cpu_count from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import available_cpu_count,qutip.settings,available_cpu_count,,,qutip.settings,,,,,,,,,,,,
,parallel.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,parallel.py,python,,,,,,Directory: qutip\solver\parallel.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,[instance] Propagator.times = [0],class_field,,,,Class field: [instance] Propagator.times = [0],qutip,qutip,v5.0.4,,,,,,,Propagator,__init__,"(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)",self.times = [0],self.times = [0],,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,[instance] Propagator.invs = [None],class_field,,,,Class field: [instance] Propagator.invs = [None],qutip,qutip,v5.0.4,,,,,,,Propagator,__init__,"(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)",self.invs = [None],self.invs = [None],,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,[instance] Propagator.props = [qeye(solver.sys_dims)],class_field,,,,Class field: [instance] Propagator.props = [qeye(solver.sys_dims)],qutip,qutip,v5.0.4,,,,,,,Propagator,__init__,"(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)",self.props = [qeye(self.solver.sys_dims)],self.props = [qeye(self.solver.sys_dims)],,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,"[instance] Propagator.solver.start(props[0], times[0])",class_field,,,,"Class field: [instance] Propagator.solver.start(props[0], times[0])",qutip,qutip,v5.0.4,,,,,,,Propagator,__init__,"(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)","self.solver.start(self.props[0], self.times[0])","self.solver.start(self.props[0], self.times[0])",,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,[instance] Propagator.cte = solver.rhs.isconstant,class_field,,,,Class field: [instance] Propagator.cte = solver.rhs.isconstant,qutip,qutip,v5.0.4,,,,,,,Propagator,__init__,"(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)",self.cte = self.solver.rhs.isconstant,self.cte = self.solver.rhs.isconstant,,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,[instance] Propagator.unitary = not H_0.issuper and H_0.isherm,class_field,,,,Class field: [instance] Propagator.unitary = not H_0.issuper and H_0.isherm,qutip,qutip,v5.0.4,,,,,,,Propagator,__init__,"(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)",self.unitary = not H_0.issuper and H_0.isherm,self.unitary = not H_0.issuper and H_0.isherm,,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,[instance] Propagator.args = args,class_field,,,,Class field: [instance] Propagator.args = args,qutip,qutip,v5.0.4,,,,,,,Propagator,__init__,"(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)",self.args = args,self.args = args,,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,"[instance] Propagator.memoize = max(3, int(memoize))",class_field,,,,"Class field: [instance] Propagator.memoize = max(3, int(memoize))",qutip,qutip,v5.0.4,,,,,,,Propagator,__init__,"(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)","self.memoize = max(3, int(memoize))","self.memoize = max(3, int(memoize))",,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,[instance] Propagator.tol = tol,class_field,,,,Class field: [instance] Propagator.tol = tol,qutip,qutip,v5.0.4,,,,,,,Propagator,__init__,"(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)",self.tol = tol,self.tol = tol,,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,"Propagator.__init__(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)",class_method,,,,"Class method: Propagator.__init__(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)",qutip,qutip,v5.0.4,,,,,,,Propagator,__init__,"(self, system, *, c_ops=(), args=None, options=None,
                 memoize=10, tol=1e-14)",,,,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,"Propagator._lookup_or_compute(self, t)",class_method,,,,"Class method: Propagator._lookup_or_compute(self, t)",qutip,qutip,v5.0.4,,,,,,,Propagator,_lookup_or_compute,"(self, t)",,,,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,"Propagator.__call__(self, t, t_start=0, **args)",class_method,,,,"Class method: Propagator.__call__(self, t, t_start=0, **args)",qutip,qutip,v5.0.4,,,,,,,Propagator,__call__,"(self, t, t_start=0, **args)",,,,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,"Propagator.inv(self, t, **args)",class_method,,,,"Class method: Propagator.inv(self, t, **args)",qutip,qutip,v5.0.4,,,,,,,Propagator,inv,"(self, t, **args)",,,,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,"Propagator._compute(self, t, idx)",class_method,,,,"Class method: Propagator._compute(self, t, idx)",qutip,qutip,v5.0.4,,,,,,,Propagator,_compute,"(self, t, idx)",,,,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,"Propagator._inv(self, U)",class_method,,,,"Class method: Propagator._inv(self, U)",qutip,qutip,v5.0.4,,,,,,,Propagator,_inv,"(self, U)",,,,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,"Propagator._insert(self, t, U, idx)",class_method,,,,"Class method: Propagator._insert(self, t, U, idx)",qutip,qutip,v5.0.4,,,,,,,Propagator,_insert,"(self, t, U, idx)",,,,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,Propagator,class,,,,Class: Propagator,qutip,qutip,v5.0.4,,,,,,,Propagator,,,,,,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,"propagator(H, t, c_ops=(), args=None, options=None, **kwargs)",function,,,,"Function: propagator(H, t, c_ops=(), args=None, options=None, **kwargs)",qutip,qutip,v5.0.4,,,,propagator,"(H, t, c_ops=(), args=None, options=None, **kwargs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,propagator_steadystate(U),function,,,,Function: propagator_steadystate(U),qutip,qutip,v5.0.4,,,,propagator_steadystate,(U),,,,,,,,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,"__all__ = ['Propagator', 'propagator', 'propagator_steadystate']",constant,"__all__ = ['Propagator', 'propagator', 'propagator_steadystate']",__all__,"['Propagator', 'propagator', 'propagator_steadystate']","Constant: __all__ = ['Propagator', 'propagator', 'propagator_steadystate']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,numbers,import,,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,,numbers,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,propagator.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
,propagator.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,propagator.py,python,,,,,,Directory: qutip\solver\propagator.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] _QobjExpectEop.op = op,class_field,,,,Class field: [instance] _QobjExpectEop.op = op,qutip,qutip,v5.0.4,,,,,,,_QobjExpectEop,__init__,"(self, op)",self.op = op,self.op = op,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] ExpectOp.op = op,class_field,,,,Class field: [instance] ExpectOp.op = op,qutip,qutip,v5.0.4,,,,,,,ExpectOp,__init__,"(self, op, f, append)",self.op = op,self.op = op,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] ExpectOp._f = f,class_field,,,,Class field: [instance] ExpectOp._f = f,qutip,qutip,v5.0.4,,,,,,,ExpectOp,__init__,"(self, op, f, append)",self._f = f,self._f = f,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] ExpectOp._append = append,class_field,,,,Class field: [instance] ExpectOp._append = append,qutip,qutip,v5.0.4,,,,,,,ExpectOp,__init__,"(self, op, f, append)",self._append = append,self._append = append,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] _BaseResult.solver = solver,class_field,,,,Class field: [instance] _BaseResult.solver = solver,qutip,qutip,v5.0.4,,,,,,,_BaseResult,__init__,"(self, options, *, solver=None, stats=None)",self.solver = solver,self.solver = solver,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] _BaseResult.stats = stats,class_field,,,,Class field: [instance] _BaseResult.stats = stats,qutip,qutip,v5.0.4,,,,,,,_BaseResult,__init__,"(self, options, *, solver=None, stats=None)",self.stats = stats,self.stats = stats,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] _BaseResult._state_processors = [],class_field,,,,Class field: [instance] _BaseResult._state_processors = [],qutip,qutip,v5.0.4,,,,,,,_BaseResult,__init__,"(self, options, *, solver=None, stats=None)",self._state_processors = [],self._state_processors = [],,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] _BaseResult._state_processors_require_copy = False,class_field,,,,Class field: [instance] _BaseResult._state_processors_require_copy = False,qutip,qutip,v5.0.4,,,,,,,_BaseResult,__init__,"(self, options, *, solver=None, stats=None)",self._state_processors_require_copy = False,self._state_processors_require_copy = False,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] _BaseResult.options = options_copy,class_field,,,,Class field: [instance] _BaseResult.options = options_copy,qutip,qutip,v5.0.4,,,,,,,_BaseResult,__init__,"(self, options, *, solver=None, stats=None)",self.options = options_copy,self.options = options_copy,,,,,,,
qutip_qutip_v5.0.4,result.py,python,ResultOptions.store_states: bool,class_field,,,,Class field: ResultOptions.store_states: bool,qutip,qutip,v5.0.4,,,,,,,ResultOptions,,,store_states: bool,,,,,store_states,,,
qutip_qutip_v5.0.4,result.py,python,ResultOptions.store_final_state: bool,class_field,,,,Class field: ResultOptions.store_final_state: bool,qutip,qutip,v5.0.4,,,,,,,ResultOptions,,,store_final_state: bool,,,,,store_final_state,,,
qutip_qutip_v5.0.4,result.py,python,Result.options: ResultOptions,class_field,,,,Class field: Result.options: ResultOptions,qutip,qutip,v5.0.4,,,,,,,Result,,,options: ResultOptions,,,,,options,,,
qutip_qutip_v5.0.4,result.py,python,[instance] Result.e_data = {k: [] for k in raw_ops},class_field,,,,Class field: [instance] Result.e_data = {k: [] for k in raw_ops},qutip,qutip,v5.0.4,,,,,,,Result,__init__,"(
        self,
        e_ops,
        options: ResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.e_data = {k: [] for k in raw_ops},self.e_data = {k: [] for k in raw_ops},,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] Result.e_ops = {},class_field,,,,Class field: [instance] Result.e_ops = {},qutip,qutip,v5.0.4,,,,,,,Result,__init__,"(
        self,
        e_ops,
        options: ResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.e_ops = {},self.e_ops = {},,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] Result.times = [],class_field,,,,Class field: [instance] Result.times = [],qutip,qutip,v5.0.4,,,,,,,Result,__init__,"(
        self,
        e_ops,
        options: ResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.times = [],self.times = [],,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] Result.states = [],class_field,,,,Class field: [instance] Result.states = [],qutip,qutip,v5.0.4,,,,,,,Result,__init__,"(
        self,
        e_ops,
        options: ResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.states = [],self.states = [],,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] Result._final_state = None,class_field,,,,Class field: [instance] Result._final_state = None,qutip,qutip,v5.0.4,,,,,,,Result,__init__,"(
        self,
        e_ops,
        options: ResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self._final_state = None,self._final_state = None,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] Result._post_init(**kw),class_field,,,,Class field: [instance] Result._post_init(**kw),qutip,qutip,v5.0.4,,,,,,,Result,__init__,"(
        self,
        e_ops,
        options: ResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self._post_init(**kw),self._post_init(**kw),,,,,,,
qutip_qutip_v5.0.4,result.py,python,MultiTrajResultOptions.store_states: bool,class_field,,,,Class field: MultiTrajResultOptions.store_states: bool,qutip,qutip,v5.0.4,,,,,,,MultiTrajResultOptions,,,store_states: bool,,,,,store_states,,,
qutip_qutip_v5.0.4,result.py,python,MultiTrajResultOptions.store_final_state: bool,class_field,,,,Class field: MultiTrajResultOptions.store_final_state: bool,qutip,qutip,v5.0.4,,,,,,,MultiTrajResultOptions,,,store_final_state: bool,,,,,store_final_state,,,
qutip_qutip_v5.0.4,result.py,python,MultiTrajResultOptions.keep_runs_results: bool,class_field,,,,Class field: MultiTrajResultOptions.keep_runs_results: bool,qutip,qutip,v5.0.4,,,,,,,MultiTrajResultOptions,,,keep_runs_results: bool,,,,,keep_runs_results,,,
qutip_qutip_v5.0.4,result.py,python,MultiTrajResult.options: MultiTrajResultOptions,class_field,,,,Class field: MultiTrajResult.options: MultiTrajResultOptions,qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,,,options: MultiTrajResultOptions,,,,,options,,,
qutip_qutip_v5.0.4,result.py,python,[instance] MultiTrajResult._raw_ops = _e_ops_to_dict(e_ops),class_field,,,,Class field: [instance] MultiTrajResult._raw_ops = _e_ops_to_dict(e_ops),qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self._raw_ops = self._e_ops_to_dict(e_ops),self._raw_ops = self._e_ops_to_dict(e_ops),,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] MultiTrajResult.times = [],class_field,,,,Class field: [instance] MultiTrajResult.times = [],qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.times = [],self.times = [],,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] MultiTrajResult.trajectories = [],class_field,,,,Class field: [instance] MultiTrajResult.trajectories = [],qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.trajectories = [],self.trajectories = [],,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] MultiTrajResult.num_trajectories = 0,class_field,,,,Class field: [instance] MultiTrajResult.num_trajectories = 0,qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.num_trajectories = 0,self.num_trajectories = 0,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] MultiTrajResult.seeds = [],class_field,,,,Class field: [instance] MultiTrajResult.seeds = [],qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.seeds = [],self.seeds = [],,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] MultiTrajResult._sum_states = None,class_field,,,,Class field: [instance] MultiTrajResult._sum_states = None,qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self._sum_states = None,self._sum_states = None,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] MultiTrajResult._sum_final_states = None,class_field,,,,Class field: [instance] MultiTrajResult._sum_final_states = None,qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self._sum_final_states = None,self._sum_final_states = None,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] MultiTrajResult._sum_expect = None,class_field,,,,Class field: [instance] MultiTrajResult._sum_expect = None,qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self._sum_expect = None,self._sum_expect = None,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] MultiTrajResult._sum2_expect = None,class_field,,,,Class field: [instance] MultiTrajResult._sum2_expect = None,qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self._sum2_expect = None,self._sum2_expect = None,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] MultiTrajResult._target_tols = None,class_field,,,,Class field: [instance] MultiTrajResult._target_tols = None,qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self._target_tols = None,self._target_tols = None,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] MultiTrajResult.average_e_data = {},class_field,,,,Class field: [instance] MultiTrajResult.average_e_data = {},qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.average_e_data = {},self.average_e_data = {},,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] MultiTrajResult.std_e_data = {},class_field,,,,Class field: [instance] MultiTrajResult.std_e_data = {},qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.std_e_data = {},self.std_e_data = {},,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] MultiTrajResult.runs_e_data = {},class_field,,,,Class field: [instance] MultiTrajResult.runs_e_data = {},qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self.runs_e_data = {},self.runs_e_data = {},,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] MultiTrajResult._post_init(**kw),class_field,,,,Class field: [instance] MultiTrajResult._post_init(**kw),qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",self._post_init(**kw),self._post_init(**kw),,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] McResultImprovedSampling._sum_expect_no_jump = None,class_field,,,,Class field: [instance] McResultImprovedSampling._sum_expect_no_jump = None,qutip,qutip,v5.0.4,,,,,,,McResultImprovedSampling,__init__,"(self, e_ops, options, **kw)",self._sum_expect_no_jump = None,self._sum_expect_no_jump = None,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] McResultImprovedSampling._sum_expect_jump = None,class_field,,,,Class field: [instance] McResultImprovedSampling._sum_expect_jump = None,qutip,qutip,v5.0.4,,,,,,,McResultImprovedSampling,__init__,"(self, e_ops, options, **kw)",self._sum_expect_jump = None,self._sum_expect_jump = None,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] McResultImprovedSampling._sum2_expect_no_jump = None,class_field,,,,Class field: [instance] McResultImprovedSampling._sum2_expect_no_jump = None,qutip,qutip,v5.0.4,,,,,,,McResultImprovedSampling,__init__,"(self, e_ops, options, **kw)",self._sum2_expect_no_jump = None,self._sum2_expect_no_jump = None,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] McResultImprovedSampling._sum2_expect_jump = None,class_field,,,,Class field: [instance] McResultImprovedSampling._sum2_expect_jump = None,qutip,qutip,v5.0.4,,,,,,,McResultImprovedSampling,__init__,"(self, e_ops, options, **kw)",self._sum2_expect_jump = None,self._sum2_expect_jump = None,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] McResultImprovedSampling._sum_states_no_jump = None,class_field,,,,Class field: [instance] McResultImprovedSampling._sum_states_no_jump = None,qutip,qutip,v5.0.4,,,,,,,McResultImprovedSampling,__init__,"(self, e_ops, options, **kw)",self._sum_states_no_jump = None,self._sum_states_no_jump = None,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] McResultImprovedSampling._sum_states_jump = None,class_field,,,,Class field: [instance] McResultImprovedSampling._sum_states_jump = None,qutip,qutip,v5.0.4,,,,,,,McResultImprovedSampling,__init__,"(self, e_ops, options, **kw)",self._sum_states_jump = None,self._sum_states_jump = None,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] McResultImprovedSampling._sum_final_states_no_jump = None,class_field,,,,Class field: [instance] McResultImprovedSampling._sum_final_states_no_jump = None,qutip,qutip,v5.0.4,,,,,,,McResultImprovedSampling,__init__,"(self, e_ops, options, **kw)",self._sum_final_states_no_jump = None,self._sum_final_states_no_jump = None,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] McResultImprovedSampling._sum_final_states_jump = None,class_field,,,,Class field: [instance] McResultImprovedSampling._sum_final_states_jump = None,qutip,qutip,v5.0.4,,,,,,,McResultImprovedSampling,__init__,"(self, e_ops, options, **kw)",self._sum_final_states_jump = None,self._sum_final_states_jump = None,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] McResultImprovedSampling.no_jump_prob = None,class_field,,,,Class field: [instance] McResultImprovedSampling.no_jump_prob = None,qutip,qutip,v5.0.4,,,,,,,McResultImprovedSampling,__init__,"(self, e_ops, options, **kw)",self.no_jump_prob = None,self.no_jump_prob = None,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"[instance] NmmcTrajectoryResult._nm_solver = kwargs.pop(""__nm_solver"")",class_field,,,,"Class field: [instance] NmmcTrajectoryResult._nm_solver = kwargs.pop(""__nm_solver"")",qutip,qutip,v5.0.4,,,,,,,NmmcTrajectoryResult,__init__,"(self, e_ops, options, *args, **kwargs)","self._nm_solver = kwargs.pop(""__nm_solver"")","self._nm_solver = kwargs.pop(""__nm_solver"")",,,,,,,
qutip_qutip_v5.0.4,result.py,python,[instance] NmmcTrajectoryResult.trace = [],class_field,,,,Class field: [instance] NmmcTrajectoryResult.trace = [],qutip,qutip,v5.0.4,,,,,,,NmmcTrajectoryResult,__init__,"(self, e_ops, options, *args, **kwargs)",self.trace = [],self.trace = [],,,,,,,
qutip_qutip_v5.0.4,result.py,python,"_QobjExpectEop.__init__(self, op)",class_method,,,,"Class method: _QobjExpectEop.__init__(self, op)",qutip,qutip,v5.0.4,,,,,,,_QobjExpectEop,__init__,"(self, op)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"_QobjExpectEop.__call__(self, t, state)",class_method,,,,"Class method: _QobjExpectEop.__call__(self, t, state)",qutip,qutip,v5.0.4,,,,,,,_QobjExpectEop,__call__,"(self, t, state)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"ExpectOp.__init__(self, op, f, append)",class_method,,,,"Class method: ExpectOp.__init__(self, op, f, append)",qutip,qutip,v5.0.4,,,,,,,ExpectOp,__init__,"(self, op, f, append)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"ExpectOp.__call__(self, t, state)",class_method,,,,"Class method: ExpectOp.__call__(self, t, state)",qutip,qutip,v5.0.4,,,,,,,ExpectOp,__call__,"(self, t, state)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"ExpectOp._store(self, t, state)",class_method,,,,"Class method: ExpectOp._store(self, t, state)",qutip,qutip,v5.0.4,,,,,,,ExpectOp,_store,"(self, t, state)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"_BaseResult.__init__(self, options, *, solver=None, stats=None)",class_method,,,,"Class method: _BaseResult.__init__(self, options, *, solver=None, stats=None)",qutip,qutip,v5.0.4,,,,,,,_BaseResult,__init__,"(self, options, *, solver=None, stats=None)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"_BaseResult._e_ops_to_dict(self, e_ops)",class_method,,,,"Class method: _BaseResult._e_ops_to_dict(self, e_ops)",qutip,qutip,v5.0.4,,,,,,,_BaseResult,_e_ops_to_dict,"(self, e_ops)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"_BaseResult.add_processor(self, f, requires_copy=False)",class_method,,,,"Class method: _BaseResult.add_processor(self, f, requires_copy=False)",qutip,qutip,v5.0.4,,,,,,,_BaseResult,add_processor,"(self, f, requires_copy=False)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"Result.__init__(
        self,
        e_ops,
        options: ResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",class_method,,,,"Class method: Result.__init__(
        self,
        e_ops,
        options: ResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",qutip,qutip,v5.0.4,,,,,,,Result,__init__,"(
        self,
        e_ops,
        options: ResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"Result._e_op_func(self, e_op)",class_method,,,,"Class method: Result._e_op_func(self, e_op)",qutip,qutip,v5.0.4,,,,,,,Result,_e_op_func,"(self, e_op)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,Result._post_init(self),class_method,,,,Class method: Result._post_init(self),qutip,qutip,v5.0.4,,,,,,,Result,_post_init,(self),,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"Result._store_state(self, t, state)",class_method,,,,"Class method: Result._store_state(self, t, state)",qutip,qutip,v5.0.4,,,,,,,Result,_store_state,"(self, t, state)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"Result._store_final_state(self, t, state)",class_method,,,,"Class method: Result._store_final_state(self, t, state)",qutip,qutip,v5.0.4,,,,,,,Result,_store_final_state,"(self, t, state)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"Result._pre_copy(self, state)",class_method,,,,"Class method: Result._pre_copy(self, state)",qutip,qutip,v5.0.4,,,,,,,Result,_pre_copy,"(self, state)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"Result.add(self, t, state)",class_method,,,,"Class method: Result.add(self, t, state)",qutip,qutip,v5.0.4,,,,,,,Result,add,"(self, t, state)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,Result.__repr__(self),class_method,,,,Class method: Result.__repr__(self),qutip,qutip,v5.0.4,,,,,,,Result,__repr__,(self),,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[property] Result.expect(self),class_method,,,,Class method: [property] Result.expect(self),qutip,qutip,v5.0.4,,,,,,,Result,expect,(self),,,,,,,,,property
qutip_qutip_v5.0.4,result.py,python,[property] Result.final_state(self),class_method,,,,Class method: [property] Result.final_state(self),qutip,qutip,v5.0.4,,,,,,,Result,final_state,(self),,,,,,,,,property
qutip_qutip_v5.0.4,result.py,python,"MultiTrajResult.__init__(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",class_method,,,,"Class method: MultiTrajResult.__init__(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,__init__,"(
        self,
        e_ops,
        options: MultiTrajResultOptions,
        *,
        solver=None,
        stats=None,
        **kw,
    )",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[property] MultiTrajResult._store_average_density_matrices(self) -> bool,class_method,,,,Class method: [property] MultiTrajResult._store_average_density_matrices(self) -> bool,qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,_store_average_density_matrices,(self),,,bool,,,,,,property
qutip_qutip_v5.0.4,result.py,python,[property] MultiTrajResult._store_final_density_matrix(self) -> bool,class_method,,,,Class method: [property] MultiTrajResult._store_final_density_matrix(self) -> bool,qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,_store_final_density_matrix,(self),,,bool,,,,,,property
qutip_qutip_v5.0.4,result.py,python,[staticmethod] MultiTrajResult._to_dm(state),class_method,,,,Class method: [staticmethod] MultiTrajResult._to_dm(state),qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,_to_dm,(state),,,,,,,,,staticmethod
qutip_qutip_v5.0.4,result.py,python,"MultiTrajResult._add_first_traj(self, trajectory)",class_method,,,,"Class method: MultiTrajResult._add_first_traj(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,_add_first_traj,"(self, trajectory)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"MultiTrajResult._store_trajectory(self, trajectory)",class_method,,,,"Class method: MultiTrajResult._store_trajectory(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,_store_trajectory,"(self, trajectory)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"MultiTrajResult._reduce_states(self, trajectory)",class_method,,,,"Class method: MultiTrajResult._reduce_states(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,_reduce_states,"(self, trajectory)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"MultiTrajResult._reduce_final_state(self, trajectory)",class_method,,,,"Class method: MultiTrajResult._reduce_final_state(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,_reduce_final_state,"(self, trajectory)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"MultiTrajResult._reduce_expect(self, trajectory)",class_method,,,,"Class method: MultiTrajResult._reduce_expect(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,_reduce_expect,"(self, trajectory)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"MultiTrajResult._increment_traj(self, trajectory)",class_method,,,,"Class method: MultiTrajResult._increment_traj(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,_increment_traj,"(self, trajectory)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,MultiTrajResult._no_end(self),class_method,,,,Class method: MultiTrajResult._no_end(self),qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,_no_end,(self),,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,MultiTrajResult._fixed_end(self),class_method,,,,Class method: MultiTrajResult._fixed_end(self),qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,_fixed_end,(self),,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,MultiTrajResult._average_computer(self),class_method,,,,Class method: MultiTrajResult._average_computer(self),qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,_average_computer,(self),,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,MultiTrajResult._target_tolerance_end(self),class_method,,,,Class method: MultiTrajResult._target_tolerance_end(self),qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,_target_tolerance_end,(self),,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,MultiTrajResult._post_init(self),class_method,,,,Class method: MultiTrajResult._post_init(self),qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,_post_init,(self),,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"MultiTrajResult.add(self, trajectory_info)",class_method,,,,"Class method: MultiTrajResult.add(self, trajectory_info)",qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,add,"(self, trajectory_info)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"MultiTrajResult.add_end_condition(self, ntraj, target_tol=None)",class_method,,,,"Class method: MultiTrajResult.add_end_condition(self, ntraj, target_tol=None)",qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,add_end_condition,"(self, ntraj, target_tol=None)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[property] MultiTrajResult.runs_states(self),class_method,,,,Class method: [property] MultiTrajResult.runs_states(self),qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,runs_states,(self),,,,,,,,,property
qutip_qutip_v5.0.4,result.py,python,[property] MultiTrajResult.average_states(self),class_method,,,,Class method: [property] MultiTrajResult.average_states(self),qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,average_states,(self),,,,,,,,,property
qutip_qutip_v5.0.4,result.py,python,[property] MultiTrajResult.states(self),class_method,,,,Class method: [property] MultiTrajResult.states(self),qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,states,(self),,,,,,,,,property
qutip_qutip_v5.0.4,result.py,python,[property] MultiTrajResult.runs_final_states(self),class_method,,,,Class method: [property] MultiTrajResult.runs_final_states(self),qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,runs_final_states,(self),,,,,,,,,property
qutip_qutip_v5.0.4,result.py,python,[property] MultiTrajResult.average_final_state(self),class_method,,,,Class method: [property] MultiTrajResult.average_final_state(self),qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,average_final_state,(self),,,,,,,,,property
qutip_qutip_v5.0.4,result.py,python,[property] MultiTrajResult.final_state(self),class_method,,,,Class method: [property] MultiTrajResult.final_state(self),qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,final_state,(self),,,,,,,,,property
qutip_qutip_v5.0.4,result.py,python,[property] MultiTrajResult.average_expect(self),class_method,,,,Class method: [property] MultiTrajResult.average_expect(self),qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,average_expect,(self),,,,,,,,,property
qutip_qutip_v5.0.4,result.py,python,[property] MultiTrajResult.std_expect(self),class_method,,,,Class method: [property] MultiTrajResult.std_expect(self),qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,std_expect,(self),,,,,,,,,property
qutip_qutip_v5.0.4,result.py,python,[property] MultiTrajResult.runs_expect(self),class_method,,,,Class method: [property] MultiTrajResult.runs_expect(self),qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,runs_expect,(self),,,,,,,,,property
qutip_qutip_v5.0.4,result.py,python,[property] MultiTrajResult.expect(self),class_method,,,,Class method: [property] MultiTrajResult.expect(self),qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,expect,(self),,,,,,,,,property
qutip_qutip_v5.0.4,result.py,python,[property] MultiTrajResult.e_data(self),class_method,,,,Class method: [property] MultiTrajResult.e_data(self),qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,e_data,(self),,,,,,,,,property
qutip_qutip_v5.0.4,result.py,python,"MultiTrajResult.steady_state(self, N=0)",class_method,,,,"Class method: MultiTrajResult.steady_state(self, N=0)",qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,steady_state,"(self, N=0)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,MultiTrajResult.__repr__(self),class_method,,,,Class method: MultiTrajResult.__repr__(self),qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,__repr__,(self),,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"MultiTrajResult.__add__(self, other)",class_method,,,,"Class method: MultiTrajResult.__add__(self, other)",qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,__add__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"McTrajectoryResult.__init__(self, e_ops, options, *args, **kwargs)",class_method,,,,"Class method: McTrajectoryResult.__init__(self, e_ops, options, *args, **kwargs)",qutip,qutip,v5.0.4,,,,,,,McTrajectoryResult,__init__,"(self, e_ops, options, *args, **kwargs)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"McResult._add_collapse(self, trajectory)",class_method,,,,"Class method: McResult._add_collapse(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,McResult,_add_collapse,"(self, trajectory)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,McResult._post_init(self),class_method,,,,Class method: McResult._post_init(self),qutip,qutip,v5.0.4,,,,,,,McResult,_post_init,(self),,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[property] McResult.col_times(self),class_method,,,,Class method: [property] McResult.col_times(self),qutip,qutip,v5.0.4,,,,,,,McResult,col_times,(self),,,,,,,,,property
qutip_qutip_v5.0.4,result.py,python,[property] McResult.col_which(self),class_method,,,,Class method: [property] McResult.col_which(self),qutip,qutip,v5.0.4,,,,,,,McResult,col_which,(self),,,,,,,,,property
qutip_qutip_v5.0.4,result.py,python,[property] McResult.photocurrent(self),class_method,,,,Class method: [property] McResult.photocurrent(self),qutip,qutip,v5.0.4,,,,,,,McResult,photocurrent,(self),,,,,,,,,property
qutip_qutip_v5.0.4,result.py,python,[property] McResult.runs_photocurrent(self),class_method,,,,Class method: [property] McResult.runs_photocurrent(self),qutip,qutip,v5.0.4,,,,,,,McResult,runs_photocurrent,(self),,,,,,,,,property
qutip_qutip_v5.0.4,result.py,python,"McResultImprovedSampling.__init__(self, e_ops, options, **kw)",class_method,,,,"Class method: McResultImprovedSampling.__init__(self, e_ops, options, **kw)",qutip,qutip,v5.0.4,,,,,,,McResultImprovedSampling,__init__,"(self, e_ops, options, **kw)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"McResultImprovedSampling._reduce_states(self, trajectory)",class_method,,,,"Class method: McResultImprovedSampling._reduce_states(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,McResultImprovedSampling,_reduce_states,"(self, trajectory)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"McResultImprovedSampling._reduce_final_state(self, trajectory)",class_method,,,,"Class method: McResultImprovedSampling._reduce_final_state(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,McResultImprovedSampling,_reduce_final_state,"(self, trajectory)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,McResultImprovedSampling._average_computer(self),class_method,,,,Class method: McResultImprovedSampling._average_computer(self),qutip,qutip,v5.0.4,,,,,,,McResultImprovedSampling,_average_computer,(self),,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"McResultImprovedSampling._add_first_traj(self, trajectory)",class_method,,,,"Class method: McResultImprovedSampling._add_first_traj(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,McResultImprovedSampling,_add_first_traj,"(self, trajectory)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"McResultImprovedSampling._reduce_expect(self, trajectory)",class_method,,,,"Class method: McResultImprovedSampling._reduce_expect(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,McResultImprovedSampling,_reduce_expect,"(self, trajectory)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[property] McResultImprovedSampling.average_states(self),class_method,,,,Class method: [property] McResultImprovedSampling.average_states(self),qutip,qutip,v5.0.4,,,,,,,McResultImprovedSampling,average_states,(self),,,,,,,,,property
qutip_qutip_v5.0.4,result.py,python,[property] McResultImprovedSampling.average_final_state(self),class_method,,,,Class method: [property] McResultImprovedSampling.average_final_state(self),qutip,qutip,v5.0.4,,,,,,,McResultImprovedSampling,average_final_state,(self),,,,,,,,,property
qutip_qutip_v5.0.4,result.py,python,"McResultImprovedSampling.__add__(self, other)",class_method,,,,"Class method: McResultImprovedSampling.__add__(self, other)",qutip,qutip,v5.0.4,,,,,,,McResultImprovedSampling,__add__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[property] McResultImprovedSampling.photocurrent(self),class_method,,,,Class method: [property] McResultImprovedSampling.photocurrent(self),qutip,qutip,v5.0.4,,,,,,,McResultImprovedSampling,photocurrent,(self),,,,,,,,,property
qutip_qutip_v5.0.4,result.py,python,"NmmcTrajectoryResult.__init__(self, e_ops, options, *args, **kwargs)",class_method,,,,"Class method: NmmcTrajectoryResult.__init__(self, e_ops, options, *args, **kwargs)",qutip,qutip,v5.0.4,,,,,,,NmmcTrajectoryResult,__init__,"(self, e_ops, options, *args, **kwargs)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"NmmcTrajectoryResult.add(self, t, state)",class_method,,,,"Class method: NmmcTrajectoryResult.add(self, t, state)",qutip,qutip,v5.0.4,,,,,,,NmmcTrajectoryResult,add,"(self, t, state)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,NmmcResult._post_init(self),class_method,,,,Class method: NmmcResult._post_init(self),qutip,qutip,v5.0.4,,,,,,,NmmcResult,_post_init,(self),,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"NmmcResult._add_first_traj(self, trajectory)",class_method,,,,"Class method: NmmcResult._add_first_traj(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,NmmcResult,_add_first_traj,"(self, trajectory)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,"NmmcResult._add_trace(self, trajectory)",class_method,,,,"Class method: NmmcResult._add_trace(self, trajectory)",qutip,qutip,v5.0.4,,,,,,,NmmcResult,_add_trace,"(self, trajectory)",,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,[property] NmmcResult.trace(self),class_method,,,,Class method: [property] NmmcResult.trace(self),qutip,qutip,v5.0.4,,,,,,,NmmcResult,trace,(self),,,,,,,,,property
qutip_qutip_v5.0.4,result.py,python,_QobjExpectEop,class,,,,Class: _QobjExpectEop,qutip,qutip,v5.0.4,,,,,,,_QobjExpectEop,,,,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,ExpectOp,class,,,,Class: ExpectOp,qutip,qutip,v5.0.4,,,,,,,ExpectOp,,,,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,_BaseResult,class,,,,Class: _BaseResult,qutip,qutip,v5.0.4,,,,,,,_BaseResult,,,,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,ResultOptions(TypedDict),class,,,,Class: ResultOptions(TypedDict),qutip,qutip,v5.0.4,,,,,,,ResultOptions,,,,,,,,,(TypedDict),,
qutip_qutip_v5.0.4,result.py,python,Result(_BaseResult),class,,,,Class: Result(_BaseResult),qutip,qutip,v5.0.4,,,,,,,Result,,,,,,,,,(_BaseResult),,
qutip_qutip_v5.0.4,result.py,python,MultiTrajResultOptions(TypedDict),class,,,,Class: MultiTrajResultOptions(TypedDict),qutip,qutip,v5.0.4,,,,,,,MultiTrajResultOptions,,,,,,,,,(TypedDict),,
qutip_qutip_v5.0.4,result.py,python,MultiTrajResult(_BaseResult),class,,,,Class: MultiTrajResult(_BaseResult),qutip,qutip,v5.0.4,,,,,,,MultiTrajResult,,,,,,,,,(_BaseResult),,
qutip_qutip_v5.0.4,result.py,python,McTrajectoryResult(Result),class,,,,Class: McTrajectoryResult(Result),qutip,qutip,v5.0.4,,,,,,,McTrajectoryResult,,,,,,,,,(Result),,
qutip_qutip_v5.0.4,result.py,python,McResult(MultiTrajResult),class,,,,Class: McResult(MultiTrajResult),qutip,qutip,v5.0.4,,,,,,,McResult,,,,,,,,,(MultiTrajResult),,
qutip_qutip_v5.0.4,result.py,python,"McResultImprovedSampling(McResult, MultiTrajResult)",class,,,,"Class: McResultImprovedSampling(McResult, MultiTrajResult)",qutip,qutip,v5.0.4,,,,,,,McResultImprovedSampling,,,,,,,,,"(McResult, MultiTrajResult)",,
qutip_qutip_v5.0.4,result.py,python,NmmcTrajectoryResult(McTrajectoryResult),class,,,,Class: NmmcTrajectoryResult(McTrajectoryResult),qutip,qutip,v5.0.4,,,,,,,NmmcTrajectoryResult,,,,,,,,,(McTrajectoryResult),,
qutip_qutip_v5.0.4,result.py,python,NmmcResult(McResult),class,,,,Class: NmmcResult(McResult),qutip,qutip,v5.0.4,,,,,,,NmmcResult,,,,,,,,,(McResult),,
qutip_qutip_v5.0.4,result.py,python,"__all__ = [
    ""Result"",
    ""MultiTrajResult"",
    ""McResult"",
    ""NmmcResult"",
    ""McTrajectoryResult"",
    ""McResultImprovedSampling"",
]",constant,"__all__ = [
    ""Result"",
    ""MultiTrajResult"",
    ""McResult"",
    ""NmmcResult"",
    ""McTrajectoryResult"",
    ""McResultImprovedSampling"",
]",__all__,"[
    ""Result"",
    ""MultiTrajResult"",
    ""McResult"",
    ""NmmcResult"",
    ""McTrajectoryResult"",
    ""McResultImprovedSampling"",
]","Constant: __all__ = [
    ""Result"",
    ""MultiTrajResult"",
    ""McResult"",
    ""NmmcResult"",
    ""McTrajectoryResult"",
    ""McResultImprovedSampling"",
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,TypedDict from typing,import,,,,Import: TypedDict from typing,qutip,qutip,v5.0.4,from typing import TypedDict,typing,TypedDict,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,result.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
,result.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,result.py,python,,,,,,Directory: qutip\solver\result.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,scattering.py,python,"set_partition(collection, num_sets)",function,,,,"Function: set_partition(collection, num_sets)",qutip,qutip,v5.0.4,,,,set_partition,"(collection, num_sets)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,scattering.py,python,"photon_scattering_amplitude(propagator, c_ops, tlist, taus, psi, psit)",function,,,,"Function: photon_scattering_amplitude(propagator, c_ops, tlist, taus, psi, psit)",qutip,qutip,v5.0.4,,,,photon_scattering_amplitude,"(propagator, c_ops, tlist, taus, psi, psit)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,scattering.py,python,"_temporal_basis_idx(waveguide_emission_indices, n_time_bins)",function,,,,"Function: _temporal_basis_idx(waveguide_emission_indices, n_time_bins)",qutip,qutip,v5.0.4,,,,_temporal_basis_idx,"(waveguide_emission_indices, n_time_bins)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,scattering.py,python,"_temporal_basis_dims(waveguide_emission_indices, n_time_bins,
                         n_emissions=None)",function,,,,"Function: _temporal_basis_dims(waveguide_emission_indices, n_time_bins,
                         n_emissions=None)",qutip,qutip,v5.0.4,,,,_temporal_basis_dims,"(waveguide_emission_indices, n_time_bins,
                         n_emissions=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,scattering.py,python,"temporal_basis_vector(waveguide_emission_indices, n_time_bins)",function,,,,"Function: temporal_basis_vector(waveguide_emission_indices, n_time_bins)",qutip,qutip,v5.0.4,,,,temporal_basis_vector,"(waveguide_emission_indices, n_time_bins)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,scattering.py,python,"_temporal_scattered_matrix(H, psi0, n_emissions, c_ops, tlist,
                               system_zero_state=None,
                               construct_effective_hamiltonian=True)",function,,,,"Function: _temporal_scattered_matrix(H, psi0, n_emissions, c_ops, tlist,
                               system_zero_state=None,
                               construct_effective_hamiltonian=True)",qutip,qutip,v5.0.4,,,,_temporal_scattered_matrix,"(H, psi0, n_emissions, c_ops, tlist,
                               system_zero_state=None,
                               construct_effective_hamiltonian=True)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,scattering.py,python,"temporal_scattered_state(H, psi0, n_emissions, c_ops, tlist,
                             system_zero_state=None,
                             construct_effective_hamiltonian=True)",function,,,,"Function: temporal_scattered_state(H, psi0, n_emissions, c_ops, tlist,
                             system_zero_state=None,
                             construct_effective_hamiltonian=True)",qutip,qutip,v5.0.4,,,,temporal_scattered_state,"(H, psi0, n_emissions, c_ops, tlist,
                             system_zero_state=None,
                             construct_effective_hamiltonian=True)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,scattering.py,python,"scattering_probability(H, psi0, n_emissions, c_ops, tlist,
                           system_zero_state=None,
                           construct_effective_hamiltonian=True)",function,,,,"Function: scattering_probability(H, psi0, n_emissions, c_ops, tlist,
                           system_zero_state=None,
                           construct_effective_hamiltonian=True)",qutip,qutip,v5.0.4,,,,scattering_probability,"(H, psi0, n_emissions, c_ops, tlist,
                           system_zero_state=None,
                           construct_effective_hamiltonian=True)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,scattering.py,python,"__all__ = ['temporal_basis_vector',
           'temporal_scattered_state',
           'scattering_probability']",constant,"__all__ = ['temporal_basis_vector',
           'temporal_scattered_state',
           'scattering_probability']",__all__,"['temporal_basis_vector',
           'temporal_scattered_state',
           'scattering_probability']","Constant: __all__ = ['temporal_basis_vector',
           'temporal_scattered_state',
           'scattering_probability']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,scattering.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,scattering.py,python,product from itertools,import,,,,Import: product from itertools,qutip,qutip,v5.0.4,"from itertools import product, combinations_with_replacement",itertools,product,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,scattering.py,python,combinations_with_replacement from itertools,import,,,,Import: combinations_with_replacement from itertools,qutip,qutip,v5.0.4,"from itertools import product, combinations_with_replacement",itertools,combinations_with_replacement,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,scattering.py,python,trapezoid from scipy.integrate,local_import,,,,Import: trapezoid from scipy.integrate,qutip,qutip,v5.0.4,from scipy.integrate import trapezoid,scipy.integrate,trapezoid,,,scipy.integrate,,,,,,,,,,,,
,scattering.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,scattering.py,python,,,,,,Directory: qutip\solver\scattering.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,sesolve.py,python,"SESolver.name = ""sesolve""",class_field,,,,"Class field: SESolver.name = ""sesolve""",qutip,qutip,v5.0.4,,,,,,,SESolver,,,"name = ""sesolve""",,,,,name,,"""sesolve""",
qutip_qutip_v5.0.4,sesolve.py,python,SESolver._avail_integrators = {},class_field,,,,Class field: SESolver._avail_integrators = {},qutip,qutip,v5.0.4,,,,,,,SESolver,,,_avail_integrators = {},,,,,_avail_integrators,,{},
qutip_qutip_v5.0.4,sesolve.py,python,"SESolver.solver_options = {
        ""progress_bar"": """",
        ""progress_kwargs"": {""chunk_size"":10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        'method': 'adams',
    }",class_field,,,,"Class field: SESolver.solver_options = {
        ""progress_bar"": """",
        ""progress_kwargs"": {""chunk_size"":10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        'method': 'adams',
    }",qutip,qutip,v5.0.4,,,,,,,SESolver,,,"solver_options = {
        ""progress_bar"": """",
        ""progress_kwargs"": {""chunk_size"":10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        'method': 'adams',
    }",,,,,solver_options,,"{
        ""progress_bar"": """",
        ""progress_kwargs"": {""chunk_size"":10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        'method': 'adams',
    }",
qutip_qutip_v5.0.4,sesolve.py,python,"SESolver.__init__(self, H, *, options=None)",class_method,,,,"Class method: SESolver.__init__(self, H, *, options=None)",qutip,qutip,v5.0.4,,,,,,,SESolver,__init__,"(self, H, *, options=None)",,,,,,,,,
qutip_qutip_v5.0.4,sesolve.py,python,SESolver._initialize_stats(self),class_method,,,,Class method: SESolver._initialize_stats(self),qutip,qutip,v5.0.4,,,,,,,SESolver,_initialize_stats,(self),,,,,,,,,
qutip_qutip_v5.0.4,sesolve.py,python,[property] SESolver.options(self),class_method,,,,Class method: [property] SESolver.options(self),qutip,qutip,v5.0.4,,,,,,,SESolver,options,(self),,,,,,,,,property
qutip_qutip_v5.0.4,sesolve.py,python,"[options.setter] SESolver.options(self, new_options)",class_method,,,,"Class method: [options.setter] SESolver.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,SESolver,options,"(self, new_options)",,,,,,,,,options.setter
qutip_qutip_v5.0.4,sesolve.py,python,"[classmethod] SESolver.StateFeedback(cls, default=None, raw_data=False, prop=False)",class_method,,,,"Class method: [classmethod] SESolver.StateFeedback(cls, default=None, raw_data=False, prop=False)",qutip,qutip,v5.0.4,,,,,,,SESolver,StateFeedback,"(cls, default=None, raw_data=False, prop=False)",,,,,,,,,classmethod
qutip_qutip_v5.0.4,sesolve.py,python,SESolver(Solver),class,,,,Class: SESolver(Solver),qutip,qutip,v5.0.4,,,,,,,SESolver,,,,,,,,,(Solver),,
qutip_qutip_v5.0.4,sesolve.py,python,"sesolve(H, psi0, tlist, e_ops=None, args=None, options=None, **kwargs)",function,,,,"Function: sesolve(H, psi0, tlist, e_ops=None, args=None, options=None, **kwargs)",qutip,qutip,v5.0.4,,,,sesolve,"(H, psi0, tlist, e_ops=None, args=None, options=None, **kwargs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,sesolve.py,python,"__all__ = ['sesolve', 'SESolver']",constant,"__all__ = ['sesolve', 'SESolver']",__all__,"['sesolve', 'SESolver']","Constant: __all__ = ['sesolve', 'SESolver']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,sesolve.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,sesolve.py,python,time from time,import,,,,Import: time from time,qutip,qutip,v5.0.4,from time import time,time,time,,,,,,,,,,,,,,,
,sesolve.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,sesolve.py,python,,,,,,Directory: qutip\solver\sesolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,"Solver.name = """"",class_field,,,,"Class field: Solver.name = """"",qutip,qutip,v5.0.4,,,,,,,Solver,,,"name = """"",,,,,name,,"""""",
qutip_qutip_v5.0.4,solver_base.py,python,Solver._integrator = None,class_field,,,,Class field: Solver._integrator = None,qutip,qutip,v5.0.4,,,,,,,Solver,,,_integrator = None,,,,,_integrator,,,
qutip_qutip_v5.0.4,solver_base.py,python,Solver._avail_integrators = {},class_field,,,,Class field: Solver._avail_integrators = {},qutip,qutip,v5.0.4,,,,,,,Solver,,,_avail_integrators = {},,,,,_avail_integrators,,{},
qutip_qutip_v5.0.4,solver_base.py,python,"Solver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        ""method"": ""adams"",
    }",class_field,,,,"Class field: Solver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        ""method"": ""adams"",
    }",qutip,qutip,v5.0.4,,,,,,,Solver,,,"solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        ""method"": ""adams"",
    }",,,,,solver_options,,"{
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": True,
        ""method"": ""adams"",
    }",
qutip_qutip_v5.0.4,solver_base.py,python,Solver._resultclass = Result,class_field,,,,Class field: Solver._resultclass = Result,qutip,qutip,v5.0.4,,,,,,,Solver,,,_resultclass = Result,,,,,_resultclass,,Result,
qutip_qutip_v5.0.4,solver_base.py,python,[instance] Solver.options = options,class_field,,,,Class field: [instance] Solver.options = options,qutip,qutip,v5.0.4,,,,,,,Solver,__init__,"(self, rhs, *, options=None)",self.options = options,self.options = options,,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,[instance] Solver._integrator = _get_integrator(),class_field,,,,Class field: [instance] Solver._integrator = _get_integrator(),qutip,qutip,v5.0.4,,,,,,,Solver,__init__,"(self, rhs, *, options=None)",self._integrator = self._get_integrator(),self._integrator = self._get_integrator(),,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,[instance] Solver._state_metadata = {},class_field,,,,Class field: [instance] Solver._state_metadata = {},qutip,qutip,v5.0.4,,,,,,,Solver,__init__,"(self, rhs, *, options=None)",self._state_metadata = {},self._state_metadata = {},,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,[instance] Solver.stats = _initialize_stats(),class_field,,,,Class field: [instance] Solver.stats = _initialize_stats(),qutip,qutip,v5.0.4,,,,,,,Solver,__init__,"(self, rhs, *, options=None)",self.stats = self._initialize_stats(),self.stats = self._initialize_stats(),,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,"[instance] Solver.rhs._register_feedback({}, solver=name)",class_field,,,,"Class field: [instance] Solver.rhs._register_feedback({}, solver=name)",qutip,qutip,v5.0.4,,,,,,,Solver,__init__,"(self, rhs, *, options=None)","self.rhs._register_feedback({}, solver=self.name)","self.rhs._register_feedback({}, solver=self.name)",,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,"Solver.__init__(self, rhs, *, options=None)",class_method,,,,"Class method: Solver.__init__(self, rhs, *, options=None)",qutip,qutip,v5.0.4,,,,,,,Solver,__init__,"(self, rhs, *, options=None)",,,,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,Solver._initialize_stats(self),class_method,,,,Class method: Solver._initialize_stats(self),qutip,qutip,v5.0.4,,,,,,,Solver,_initialize_stats,(self),,,,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,"Solver._prepare_state(self, state)",class_method,,,,"Class method: Solver._prepare_state(self, state)",qutip,qutip,v5.0.4,,,,,,,Solver,_prepare_state,"(self, state)",,,,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,"Solver._restore_state(self, data, *, copy=True)",class_method,,,,"Class method: Solver._restore_state(self, data, *, copy=True)",qutip,qutip,v5.0.4,,,,,,,Solver,_restore_state,"(self, data, *, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,"Solver.run(self, state0, tlist, *, args=None, e_ops=None)",class_method,,,,"Class method: Solver.run(self, state0, tlist, *, args=None, e_ops=None)",qutip,qutip,v5.0.4,,,,,,,Solver,run,"(self, state0, tlist, *, args=None, e_ops=None)",,,,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,"Solver.start(self, state0, t0)",class_method,,,,"Class method: Solver.start(self, state0, t0)",qutip,qutip,v5.0.4,,,,,,,Solver,start,"(self, state0, t0)",,,,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,"Solver.step(self, t, *, args=None, copy=True)",class_method,,,,"Class method: Solver.step(self, t, *, args=None, copy=True)",qutip,qutip,v5.0.4,,,,,,,Solver,step,"(self, t, *, args=None, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,Solver._get_integrator(self),class_method,,,,Class method: Solver._get_integrator(self),qutip,qutip,v5.0.4,,,,,,,Solver,_get_integrator,(self),,,,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,[property] Solver.sys_dims(self),class_method,,,,Class method: [property] Solver.sys_dims(self),qutip,qutip,v5.0.4,,,,,,,Solver,sys_dims,(self),,,,,,,,,property
qutip_qutip_v5.0.4,solver_base.py,python,[property] Solver.options(self),class_method,,,,Class method: [property] Solver.options(self),qutip,qutip,v5.0.4,,,,,,,Solver,options,(self),,,,,,,,,property
qutip_qutip_v5.0.4,solver_base.py,python,"Solver._parse_options(self, new_options, default, old_options)",class_method,,,,"Class method: Solver._parse_options(self, new_options, default, old_options)",qutip,qutip,v5.0.4,,,,,,,Solver,_parse_options,"(self, new_options, default, old_options)",,,,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,"[options.setter] Solver.options(self, new_options)",class_method,,,,"Class method: [options.setter] Solver.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,Solver,options,"(self, new_options)",,,,,,,,,options.setter
qutip_qutip_v5.0.4,solver_base.py,python,"Solver._apply_options(self, keys)",class_method,,,,"Class method: Solver._apply_options(self, keys)",qutip,qutip,v5.0.4,,,,,,,Solver,_apply_options,"(self, keys)",,,,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,"Solver._argument(self, args)",class_method,,,,"Class method: Solver._argument(self, args)",qutip,qutip,v5.0.4,,,,,,,Solver,_argument,"(self, args)",,,,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,[classmethod] Solver.avail_integrators(cls),class_method,,,,Class method: [classmethod] Solver.avail_integrators(cls),qutip,qutip,v5.0.4,,,,,,,Solver,avail_integrators,(cls),,,,,,,,,classmethod
qutip_qutip_v5.0.4,solver_base.py,python,"[classmethod] Solver.integrator(cls, key)",class_method,,,,"Class method: [classmethod] Solver.integrator(cls, key)",qutip,qutip,v5.0.4,,,,,,,Solver,integrator,"(cls, key)",,,,,,,,,classmethod
qutip_qutip_v5.0.4,solver_base.py,python,"[classmethod] Solver.add_integrator(cls, integrator, key)",class_method,,,,"Class method: [classmethod] Solver.add_integrator(cls, integrator, key)",qutip,qutip,v5.0.4,,,,,,,Solver,add_integrator,"(cls, integrator, key)",,,,,,,,,classmethod
qutip_qutip_v5.0.4,solver_base.py,python,"[classmethod] Solver.ExpectFeedback(cls, operator, default=0.)",class_method,,,,"Class method: [classmethod] Solver.ExpectFeedback(cls, operator, default=0.)",qutip,qutip,v5.0.4,,,,,,,Solver,ExpectFeedback,"(cls, operator, default=0.)",,,,,,,,,classmethod
qutip_qutip_v5.0.4,solver_base.py,python,Solver,class,,,,Class: Solver,qutip,qutip,v5.0.4,,,,,,,Solver,,,,,,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,"_solver_deprecation(kwargs, options, solver=""me"")",function,,,,"Function: _solver_deprecation(kwargs, options, solver=""me"")",qutip,qutip,v5.0.4,,,,_solver_deprecation,"(kwargs, options, solver=""me"")",,,,,,,,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,__all__ = ['Solver'],constant,__all__ = ['Solver'],__all__,['Solver'],Constant: __all__ = ['Solver'],qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,time from time,import,,,,Import: time from time,qutip,qutip,v5.0.4,from time import time,time,time,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,warnings,import,,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,,warnings,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,solver_base.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
,solver_base.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,solver_base.py,python,,,,,,Directory: qutip\solver\solver_base.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum.py,python,"spectrum(H, wlist, c_ops, a_op, b_op, solver=""es"")",function,,,,"Function: spectrum(H, wlist, c_ops, a_op, b_op, solver=""es"")",qutip,qutip,v5.0.4,,,,spectrum,"(H, wlist, c_ops, a_op, b_op, solver=""es"")",,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum.py,python,"spectrum_correlation_fft(tlist, y, inverse=False)",function,,,,"Function: spectrum_correlation_fft(tlist, y, inverse=False)",qutip,qutip,v5.0.4,,,,spectrum_correlation_fft,"(tlist, y, inverse=False)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum.py,python,"_spectrum_es(L, wlist, a_op, b_op)",function,,,,"Function: _spectrum_es(L, wlist, a_op, b_op)",qutip,qutip,v5.0.4,,,,_spectrum_es,"(L, wlist, a_op, b_op)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum.py,python,"_spectrum_pi(L, wlist, a_op, b_op, use_pinv=False)",function,,,,"Function: _spectrum_pi(L, wlist, a_op, b_op, use_pinv=False)",qutip,qutip,v5.0.4,,,,_spectrum_pi,"(L, wlist, a_op, b_op, use_pinv=False)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum.py,python,"_diagonal_evolution(L, rho0, sparse=False)",function,,,,"Function: _diagonal_evolution(L, rho0, sparse=False)",qutip,qutip,v5.0.4,,,,_diagonal_evolution,"(L, rho0, sparse=False)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum.py,python,"__all__ = ['spectrum', 'spectrum_correlation_fft']",constant,"__all__ = ['spectrum', 'spectrum_correlation_fft']",__all__,"['spectrum', 'spectrum_correlation_fft']","Constant: __all__ = ['spectrum', 'spectrum_correlation_fft']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum.py,python,scipy.fftpack,import,,,,Import: scipy.fftpack,qutip,qutip,v5.0.4,import scipy.fftpack,,scipy.fftpack,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spectrum.py,python,settings from qutip.settings,local_import,,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings,qutip.settings,settings,,,qutip.settings,,,,,,,,,,,,
,spectrum.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,spectrum.py,python,,,,,,Directory: qutip\solver\spectrum.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,"_permute_wbm(L, b)",function,,,,"Function: _permute_wbm(L, b)",qutip,qutip,v5.0.4,,,,_permute_wbm,"(L, b)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,"_permute_rcm(L, b)",function,,,,"Function: _permute_rcm(L, b)",qutip,qutip,v5.0.4,,,,_permute_rcm,"(L, b)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,"_reverse_rcm(rho, perm)",function,,,,"Function: _reverse_rcm(rho, perm)",qutip,qutip,v5.0.4,,,,_reverse_rcm,"(rho, perm)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,"steadystate(A, c_ops=[], *, method='direct', solver=None, **kwargs)",function,,,,"Function: steadystate(A, c_ops=[], *, method='direct', solver=None, **kwargs)",qutip,qutip,v5.0.4,,,,steadystate,"(A, c_ops=[], *, method='direct', solver=None, **kwargs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,"_steadystate_direct(A, weight, **kw)",function,,,,"Function: _steadystate_direct(A, weight, **kw)",qutip,qutip,v5.0.4,,,,_steadystate_direct,"(A, weight, **kw)",,,,,,,,,"# Find the weight, no good dispatched function available...",,,,
qutip_qutip_v5.0.4,steadystate.py,python,"_steadystate_eigen(L, **kw)",function,,,,"Function: _steadystate_eigen(L, **kw)",qutip,qutip,v5.0.4,,,,_steadystate_eigen,"(L, **kw)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,"_steadystate_svd(L, **kw)",function,,,,"Function: _steadystate_svd(L, **kw)",qutip,qutip,v5.0.4,,,,_steadystate_svd,"(L, **kw)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,"_steadystate_power(A, **kw)",function,,,,"Function: _steadystate_power(A, **kw)",qutip,qutip,v5.0.4,,,,_steadystate_power,"(A, **kw)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,"steadystate_floquet(H_0, c_ops, Op_t, w_d=1.0, n_it=3, sparse=False,
                        solver=None, **kwargs)",function,,,,"Function: steadystate_floquet(H_0, c_ops, Op_t, w_d=1.0, n_it=3, sparse=False,
                        solver=None, **kwargs)",qutip,qutip,v5.0.4,,,,steadystate_floquet,"(H_0, c_ops, Op_t, w_d=1.0, n_it=3, sparse=False,
                        solver=None, **kwargs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,"pseudo_inverse(L, rhoss=None, w=None, method='splu', *, use_rcm=False,
                   **kwargs)",function,,,,"Function: pseudo_inverse(L, rhoss=None, w=None, method='splu', *, use_rcm=False,
                   **kwargs)",qutip,qutip,v5.0.4,,,,pseudo_inverse,"(L, rhoss=None, w=None, method='splu', *, use_rcm=False,
                   **kwargs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,"_compute_precond(L, args)",function,,,,"Function: _compute_precond(L, args)",qutip,qutip,v5.0.4,,,,_compute_precond,"(L, args)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,"__all__ = [""steadystate"", ""steadystate_floquet"", ""pseudo_inverse""]",constant,"__all__ = [""steadystate"", ""steadystate_floquet"", ""pseudo_inverse""]",__all__,"[""steadystate"", ""steadystate_floquet"", ""pseudo_inverse""]","Constant: __all__ = [""steadystate"", ""steadystate_floquet"", ""pseudo_inverse""]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,liouvillian from qutip,import,,,,Import: liouvillian from qutip,qutip,qutip,v5.0.4,"from qutip import liouvillian, lindblad_dissipator, Qobj, qzero_like, qeye_like",qutip,liouvillian,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,lindblad_dissipator from qutip,import,,,,Import: lindblad_dissipator from qutip,qutip,qutip,v5.0.4,"from qutip import liouvillian, lindblad_dissipator, Qobj, qzero_like, qeye_like",qutip,lindblad_dissipator,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,Qobj from qutip,import,,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import liouvillian, lindblad_dissipator, Qobj, qzero_like, qeye_like",qutip,Qobj,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,qzero_like from qutip,import,,,,Import: qzero_like from qutip,qutip,qutip,v5.0.4,"from qutip import liouvillian, lindblad_dissipator, Qobj, qzero_like, qeye_like",qutip,qzero_like,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,qeye_like from qutip,import,,,,Import: qeye_like from qutip,qutip,qutip,v5.0.4,"from qutip import liouvillian, lindblad_dissipator, Qobj, qzero_like, qeye_like",qutip,qeye_like,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,vector_to_operator from qutip,import,,,,Import: vector_to_operator from qutip,qutip,qutip,v5.0.4,"from qutip import vector_to_operator, operator_to_vector",qutip,vector_to_operator,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,operator_to_vector from qutip,import,,,,Import: operator_to_vector from qutip,qutip,qutip,v5.0.4,"from qutip import vector_to_operator, operator_to_vector",qutip,operator_to_vector,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,settings from qutip,import,,,,Import: settings from qutip,qutip,qutip,v5.0.4,from qutip import settings,qutip,settings,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,qutip.core.data,import,,,,Import: qutip.core.data,qutip,qutip,v5.0.4,import qutip.core.data as _data,,qutip.core.data,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,scipy.sparse.csgraph,import,,,,Import: scipy.sparse.csgraph,qutip,qutip,v5.0.4,import scipy.sparse.csgraph,,scipy.sparse.csgraph,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,scipy.sparse.linalg,import,,,,Import: scipy.sparse.linalg,qutip,qutip,v5.0.4,import scipy.sparse.linalg,,scipy.sparse.linalg,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,steadystate.py,python,warn from warnings,import,,,,Import: warn from warnings,qutip,qutip,v5.0.4,from warnings import warn,warnings,warn,,,,,,,,,,,,,,,
,steadystate.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,steadystate.py,python,,,,,,Directory: qutip\solver\steadystate.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,[instance] _StochasticRHS.H = QobjEvo(H),class_field,,,,Class field: [instance] _StochasticRHS.H = QobjEvo(H),qutip,qutip,v5.0.4,,,,,,,_StochasticRHS,__init__,"(self, issuper, H, sc_ops, c_ops, heterodyne)",self.H = QobjEvo(H),self.H = QobjEvo(H),,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,[instance] _StochasticRHS.sc_ops = [QobjEvo(c_op) for c_op in sc_ops],class_field,,,,Class field: [instance] _StochasticRHS.sc_ops = [QobjEvo(c_op) for c_op in sc_ops],qutip,qutip,v5.0.4,,,,,,,_StochasticRHS,__init__,"(self, issuper, H, sc_ops, c_ops, heterodyne)",self.sc_ops = [QobjEvo(c_op) for c_op in sc_ops],self.sc_ops = [QobjEvo(c_op) for c_op in sc_ops],,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,[instance] _StochasticRHS.c_ops = [QobjEvo(c_op) for c_op in c_ops],class_field,,,,Class field: [instance] _StochasticRHS.c_ops = [QobjEvo(c_op) for c_op in c_ops],qutip,qutip,v5.0.4,,,,,,,_StochasticRHS,__init__,"(self, issuper, H, sc_ops, c_ops, heterodyne)",self.c_ops = [QobjEvo(c_op) for c_op in c_ops],self.c_ops = [QobjEvo(c_op) for c_op in c_ops],,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,[instance] _StochasticRHS.issuper = issuper,class_field,,,,Class field: [instance] _StochasticRHS.issuper = issuper,qutip,qutip,v5.0.4,,,,,,,_StochasticRHS,__init__,"(self, issuper, H, sc_ops, c_ops, heterodyne)",self.issuper = issuper,self.issuper = issuper,,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,[instance] _StochasticRHS.heterodyne = heterodyne,class_field,,,,Class field: [instance] _StochasticRHS.heterodyne = heterodyne,qutip,qutip,v5.0.4,,,,,,,_StochasticRHS,__init__,"(self, issuper, H, sc_ops, c_ops, heterodyne)",self.heterodyne = heterodyne,self.heterodyne = heterodyne,,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,[instance] _StochasticRHS._noise_key = None,class_field,,,,Class field: [instance] _StochasticRHS._noise_key = None,qutip,qutip,v5.0.4,,,,,,,_StochasticRHS,__init__,"(self, issuper, H, sc_ops, c_ops, heterodyne)",self._noise_key = None,self._noise_key = None,,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,"StochasticSolver.name = ""StochasticSolver""",class_field,,,,"Class field: StochasticSolver.name = ""StochasticSolver""",qutip,qutip,v5.0.4,,,,,,,StochasticSolver,,,"name = ""StochasticSolver""",,,,,name,,"""StochasticSolver""",
qutip_qutip_v5.0.4,stochastic.py,python,StochasticSolver._resultclass = StochasticResult,class_field,,,,Class field: StochasticSolver._resultclass = StochasticResult,qutip,qutip,v5.0.4,,,,,,,StochasticSolver,,,_resultclass = StochasticResult,,,,,_resultclass,,StochasticResult,
qutip_qutip_v5.0.4,stochastic.py,python,StochasticSolver._avail_integrators = {},class_field,,,,Class field: StochasticSolver._avail_integrators = {},qutip,qutip,v5.0.4,,,,,,,StochasticSolver,,,_avail_integrators = {},,,,,_avail_integrators,,{},
qutip_qutip_v5.0.4,stochastic.py,python,StochasticSolver._open = None,class_field,,,,Class field: StochasticSolver._open = None,qutip,qutip,v5.0.4,,,,,,,StochasticSolver,,,_open = None,,,,,_open,,,
qutip_qutip_v5.0.4,stochastic.py,python,"StochasticSolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""platen"",
        ""store_measurement"": False,
    }",class_field,,,,"Class field: StochasticSolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""platen"",
        ""store_measurement"": False,
    }",qutip,qutip,v5.0.4,,,,,,,StochasticSolver,,,"solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""platen"",
        ""store_measurement"": False,
    }",,,,,solver_options,,"{
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""platen"",
        ""store_measurement"": False,
    }",
qutip_qutip_v5.0.4,stochastic.py,python,[instance] StochasticSolver._heterodyne = heterodyne,class_field,,,,Class field: [instance] StochasticSolver._heterodyne = heterodyne,qutip,qutip,v5.0.4,,,,,,,StochasticSolver,__init__,"(self, H, sc_ops, heterodyne, *, c_ops=(), options=None)",self._heterodyne = heterodyne,self._heterodyne = heterodyne,,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,"SMESolver.name = ""smesolve""",class_field,,,,"Class field: SMESolver.name = ""smesolve""",qutip,qutip,v5.0.4,,,,,,,SMESolver,,,"name = ""smesolve""",,,,,name,,"""smesolve""",
qutip_qutip_v5.0.4,stochastic.py,python,SMESolver._avail_integrators = {},class_field,,,,Class field: SMESolver._avail_integrators = {},qutip,qutip,v5.0.4,,,,,,,SMESolver,,,_avail_integrators = {},,,,,_avail_integrators,,{},
qutip_qutip_v5.0.4,stochastic.py,python,SMESolver._open = True,class_field,,,,Class field: SMESolver._open = True,qutip,qutip,v5.0.4,,,,,,,SMESolver,,,_open = True,,,,,_open,,True,
qutip_qutip_v5.0.4,stochastic.py,python,"SMESolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""platen"",
        ""store_measurement"": False,
    }",class_field,,,,"Class field: SMESolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""platen"",
        ""store_measurement"": False,
    }",qutip,qutip,v5.0.4,,,,,,,SMESolver,,,"solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""platen"",
        ""store_measurement"": False,
    }",,,,,solver_options,,"{
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""platen"",
        ""store_measurement"": False,
    }",
qutip_qutip_v5.0.4,stochastic.py,python,"SSESolver.name = ""ssesolve""",class_field,,,,"Class field: SSESolver.name = ""ssesolve""",qutip,qutip,v5.0.4,,,,,,,SSESolver,,,"name = ""ssesolve""",,,,,name,,"""ssesolve""",
qutip_qutip_v5.0.4,stochastic.py,python,SSESolver._avail_integrators = {},class_field,,,,Class field: SSESolver._avail_integrators = {},qutip,qutip,v5.0.4,,,,,,,SSESolver,,,_avail_integrators = {},,,,,_avail_integrators,,{},
qutip_qutip_v5.0.4,stochastic.py,python,SSESolver._open = False,class_field,,,,Class field: SSESolver._open = False,qutip,qutip,v5.0.4,,,,,,,SSESolver,,,_open = False,,,,,_open,,False,
qutip_qutip_v5.0.4,stochastic.py,python,"SSESolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""platen"",
        ""store_measurement"": False,
    }",class_field,,,,"Class field: SSESolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""platen"",
        ""store_measurement"": False,
    }",qutip,qutip,v5.0.4,,,,,,,SSESolver,,,"solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""platen"",
        ""store_measurement"": False,
    }",,,,,solver_options,,"{
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""keep_runs_results"": False,
        ""normalize_output"": False,
        ""map"": ""serial"",
        ""mpi_options"": {},
        ""num_cpus"": None,
        ""bitgenerator"": None,
        ""method"": ""platen"",
        ""store_measurement"": False,
    }",
qutip_qutip_v5.0.4,stochastic.py,python,"StochasticTrajResult._post_init(self, m_ops=(), dw_factor=(), heterodyne=False)",class_method,,,,"Class method: StochasticTrajResult._post_init(self, m_ops=(), dw_factor=(), heterodyne=False)",qutip,qutip,v5.0.4,,,,,,,StochasticTrajResult,_post_init,"(self, m_ops=(), dw_factor=(), heterodyne=False)",,,,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,"StochasticTrajResult.add(self, t, state, noise=None)",class_method,,,,"Class method: StochasticTrajResult.add(self, t, state, noise=None)",qutip,qutip,v5.0.4,,,,,,,StochasticTrajResult,add,"(self, t, state, noise=None)",,,,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,[property] StochasticTrajResult.wiener_process(self),class_method,,,,Class method: [property] StochasticTrajResult.wiener_process(self),qutip,qutip,v5.0.4,,,,,,,StochasticTrajResult,wiener_process,(self),,,,,,,,,property
qutip_qutip_v5.0.4,stochastic.py,python,[property] StochasticTrajResult.dW(self),class_method,,,,Class method: [property] StochasticTrajResult.dW(self),qutip,qutip,v5.0.4,,,,,,,StochasticTrajResult,dW,(self),,,,,,,,,property
qutip_qutip_v5.0.4,stochastic.py,python,[property] StochasticTrajResult.measurement(self),class_method,,,,Class method: [property] StochasticTrajResult.measurement(self),qutip,qutip,v5.0.4,,,,,,,StochasticTrajResult,measurement,(self),,,,,,,,,property
qutip_qutip_v5.0.4,stochastic.py,python,StochasticResult._post_init(self),class_method,,,,Class method: StochasticResult._post_init(self),qutip,qutip,v5.0.4,,,,,,,StochasticResult,_post_init,(self),,,,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,"StochasticResult._reduce_attr(self, trajectory, attr)",class_method,,,,"Class method: StochasticResult._reduce_attr(self, trajectory, attr)",qutip,qutip,v5.0.4,,,,,,,StochasticResult,_reduce_attr,"(self, trajectory, attr)",,,,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,"StochasticResult._trajectories_attr(self, attr)",class_method,,,,"Class method: StochasticResult._trajectories_attr(self, attr)",qutip,qutip,v5.0.4,,,,,,,StochasticResult,_trajectories_attr,"(self, attr)",,,,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,[property] StochasticResult.measurement(self),class_method,,,,Class method: [property] StochasticResult.measurement(self),qutip,qutip,v5.0.4,,,,,,,StochasticResult,measurement,(self),,,,,,,,,property
qutip_qutip_v5.0.4,stochastic.py,python,[property] StochasticResult.dW(self),class_method,,,,Class method: [property] StochasticResult.dW(self),qutip,qutip,v5.0.4,,,,,,,StochasticResult,dW,(self),,,,,,,,,property
qutip_qutip_v5.0.4,stochastic.py,python,[property] StochasticResult.wiener_process(self),class_method,,,,Class method: [property] StochasticResult.wiener_process(self),qutip,qutip,v5.0.4,,,,,,,StochasticResult,wiener_process,(self),,,,,,,,,property
qutip_qutip_v5.0.4,stochastic.py,python,"_StochasticRHS.__init__(self, issuper, H, sc_ops, c_ops, heterodyne)",class_method,,,,"Class method: _StochasticRHS.__init__(self, issuper, H, sc_ops, c_ops, heterodyne)",qutip,qutip,v5.0.4,,,,,,,_StochasticRHS,__init__,"(self, issuper, H, sc_ops, c_ops, heterodyne)",,,,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,"_StochasticRHS.__call__(self, options)",class_method,,,,"Class method: _StochasticRHS.__call__(self, options)",qutip,qutip,v5.0.4,,,,,,,_StochasticRHS,__call__,"(self, options)",,,,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,"_StochasticRHS.arguments(self, args)",class_method,,,,"Class method: _StochasticRHS.arguments(self, args)",qutip,qutip,v5.0.4,,,,,,,_StochasticRHS,arguments,"(self, args)",,,,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,"_StochasticRHS._register_feedback(self, val)",class_method,,,,"Class method: _StochasticRHS._register_feedback(self, val)",qutip,qutip,v5.0.4,,,,,,,_StochasticRHS,_register_feedback,"(self, val)",,,,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,"StochasticSolver._trajectory_resultclass(self, e_ops, options)",class_method,,,,"Class method: StochasticSolver._trajectory_resultclass(self, e_ops, options)",qutip,qutip,v5.0.4,,,,,,,StochasticSolver,_trajectory_resultclass,"(self, e_ops, options)",,,,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,"StochasticSolver.__init__(self, H, sc_ops, heterodyne, *, c_ops=(), options=None)",class_method,,,,"Class method: StochasticSolver.__init__(self, H, sc_ops, heterodyne, *, c_ops=(), options=None)",qutip,qutip,v5.0.4,,,,,,,StochasticSolver,__init__,"(self, H, sc_ops, heterodyne, *, c_ops=(), options=None)",,,,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,[property] StochasticSolver.heterodyne(self),class_method,,,,Class method: [property] StochasticSolver.heterodyne(self),qutip,qutip,v5.0.4,,,,,,,StochasticSolver,heterodyne,(self),,,,,,,,,property
qutip_qutip_v5.0.4,stochastic.py,python,[property] StochasticSolver.m_ops(self),class_method,,,,Class method: [property] StochasticSolver.m_ops(self),qutip,qutip,v5.0.4,,,,,,,StochasticSolver,m_ops,(self),,,,,,,,,property
qutip_qutip_v5.0.4,stochastic.py,python,"[m_ops.setter] StochasticSolver.m_ops(self, new_m_ops)",class_method,,,,"Class method: [m_ops.setter] StochasticSolver.m_ops(self, new_m_ops)",qutip,qutip,v5.0.4,,,,,,,StochasticSolver,m_ops,"(self, new_m_ops)",,,,,,,,,m_ops.setter
qutip_qutip_v5.0.4,stochastic.py,python,[property] StochasticSolver.dW_factors(self),class_method,,,,Class method: [property] StochasticSolver.dW_factors(self),qutip,qutip,v5.0.4,,,,,,,StochasticSolver,dW_factors,(self),,,,,,,,,property
qutip_qutip_v5.0.4,stochastic.py,python,"[dW_factors.setter] StochasticSolver.dW_factors(self, new_dW_factors)",class_method,,,,"Class method: [dW_factors.setter] StochasticSolver.dW_factors(self, new_dW_factors)",qutip,qutip,v5.0.4,,,,,,,StochasticSolver,dW_factors,"(self, new_dW_factors)",,,,,,,,,dW_factors.setter
qutip_qutip_v5.0.4,stochastic.py,python,"StochasticSolver._integrate_one_traj(self, seed, tlist, result)",class_method,,,,"Class method: StochasticSolver._integrate_one_traj(self, seed, tlist, result)",qutip,qutip,v5.0.4,,,,,,,StochasticSolver,_integrate_one_traj,"(self, seed, tlist, result)",,,,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,[classmethod] StochasticSolver.avail_integrators(cls),class_method,,,,Class method: [classmethod] StochasticSolver.avail_integrators(cls),qutip,qutip,v5.0.4,,,,,,,StochasticSolver,avail_integrators,(cls),,,,,,,,,classmethod
qutip_qutip_v5.0.4,stochastic.py,python,[property] StochasticSolver.options(self),class_method,,,,Class method: [property] StochasticSolver.options(self),qutip,qutip,v5.0.4,,,,,,,StochasticSolver,options,(self),,,,,,,,,property
qutip_qutip_v5.0.4,stochastic.py,python,"[options.setter] StochasticSolver.options(self, new_options)",class_method,,,,"Class method: [options.setter] StochasticSolver.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,StochasticSolver,options,"(self, new_options)",,,,,,,,,options.setter
qutip_qutip_v5.0.4,stochastic.py,python,"[classmethod] StochasticSolver.WienerFeedback(cls, default=None)",class_method,,,,"Class method: [classmethod] StochasticSolver.WienerFeedback(cls, default=None)",qutip,qutip,v5.0.4,,,,,,,StochasticSolver,WienerFeedback,"(cls, default=None)",,,,,,,,,classmethod
qutip_qutip_v5.0.4,stochastic.py,python,"[classmethod] StochasticSolver.StateFeedback(cls, default=None, raw_data=False)",class_method,,,,"Class method: [classmethod] StochasticSolver.StateFeedback(cls, default=None, raw_data=False)",qutip,qutip,v5.0.4,,,,,,,StochasticSolver,StateFeedback,"(cls, default=None, raw_data=False)",,,,,,,,,classmethod
qutip_qutip_v5.0.4,stochastic.py,python,StochasticTrajResult(Result),class,,,,Class: StochasticTrajResult(Result),qutip,qutip,v5.0.4,,,,,,,StochasticTrajResult,,,,,,,,,(Result),,
qutip_qutip_v5.0.4,stochastic.py,python,StochasticResult(MultiTrajResult),class,,,,Class: StochasticResult(MultiTrajResult),qutip,qutip,v5.0.4,,,,,,,StochasticResult,,,,,,,,,(MultiTrajResult),,
qutip_qutip_v5.0.4,stochastic.py,python,_StochasticRHS(_MultiTrajRHS),class,,,,Class: _StochasticRHS(_MultiTrajRHS),qutip,qutip,v5.0.4,,,,,,,_StochasticRHS,,,,,,,,,(_MultiTrajRHS),,
qutip_qutip_v5.0.4,stochastic.py,python,StochasticSolver(MultiTrajSolver),class,,,,Class: StochasticSolver(MultiTrajSolver),qutip,qutip,v5.0.4,,,,,,,StochasticSolver,,,,,,,,,(MultiTrajSolver),,
qutip_qutip_v5.0.4,stochastic.py,python,SMESolver(StochasticSolver),class,,,,Class: SMESolver(StochasticSolver),qutip,qutip,v5.0.4,,,,,,,SMESolver,,,,,,,,,(StochasticSolver),,
qutip_qutip_v5.0.4,stochastic.py,python,SSESolver(StochasticSolver),class,,,,Class: SSESolver(StochasticSolver),qutip,qutip,v5.0.4,,,,,,,SSESolver,,,,,,,,,(StochasticSolver),,
qutip_qutip_v5.0.4,stochastic.py,python,"smesolve(
    H, rho0, tlist, c_ops=(), sc_ops=(), heterodyne=False, *,
    e_ops=(), args={}, ntraj=500, options=None,
    seeds=None, target_tol=None, timeout=None, **kwargs
)",function,,,,"Function: smesolve(
    H, rho0, tlist, c_ops=(), sc_ops=(), heterodyne=False, *,
    e_ops=(), args={}, ntraj=500, options=None,
    seeds=None, target_tol=None, timeout=None, **kwargs
)",qutip,qutip,v5.0.4,,,,smesolve,"(
    H, rho0, tlist, c_ops=(), sc_ops=(), heterodyne=False, *,
    e_ops=(), args={}, ntraj=500, options=None,
    seeds=None, target_tol=None, timeout=None, **kwargs
)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,"ssesolve(
    H, psi0, tlist, sc_ops=(), heterodyne=False, *,
    e_ops=(), args={}, ntraj=500, options=None,
    seeds=None, target_tol=None, timeout=None, **kwargs
)",function,,,,"Function: ssesolve(
    H, psi0, tlist, sc_ops=(), heterodyne=False, *,
    e_ops=(), args={}, ntraj=500, options=None,
    seeds=None, target_tol=None, timeout=None, **kwargs
)",qutip,qutip,v5.0.4,,,,ssesolve,"(
    H, psi0, tlist, sc_ops=(), heterodyne=False, *,
    e_ops=(), args={}, ntraj=500, options=None,
    seeds=None, target_tol=None, timeout=None, **kwargs
)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,"__all__ = [""smesolve"", ""SMESolver"", ""ssesolve"", ""SSESolver""]",constant,"__all__ = [""smesolve"", ""SMESolver"", ""ssesolve"", ""SSESolver""]",__all__,"[""smesolve"", ""SMESolver"", ""ssesolve"", ""SSESolver""]","Constant: __all__ = [""smesolve"", ""SMESolver"", ""ssesolve"", ""SSESolver""]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,stochastic.py,python,partial from functools,import,,,,Import: partial from functools,qutip,qutip,v5.0.4,from functools import partial,functools,partial,,,,,,,,,,,,,,,
,stochastic.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,stochastic.py,python,,,,,,Directory: qutip\solver\stochastic.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,[instance] _ExpectFeedback.oper = QobjEvo(oper),class_field,,,,Class field: [instance] _ExpectFeedback.oper = QobjEvo(oper),qutip,qutip,v5.0.4,,,,,,,_ExpectFeedback,__init__,"(self, oper, default=0.)",self.oper = QobjEvo(oper),self.oper = QobjEvo(oper),,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,[instance] _ExpectFeedback.N = oper.shape[1],class_field,,,,Class field: [instance] _ExpectFeedback.N = oper.shape[1],qutip,qutip,v5.0.4,,,,,,,_ExpectFeedback,__init__,"(self, oper, default=0.)",self.N = oper.shape[1],self.N = oper.shape[1],,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,[instance] _ExpectFeedback.N2 = oper.shape[1]**2,class_field,,,,Class field: [instance] _ExpectFeedback.N2 = oper.shape[1]**2,qutip,qutip,v5.0.4,,,,,,,_ExpectFeedback,__init__,"(self, oper, default=0.)",self.N2 = oper.shape[1]**2,self.N2 = oper.shape[1]**2,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,[instance] _ExpectFeedback.default = default,class_field,,,,Class field: [instance] _ExpectFeedback.default = default,qutip,qutip,v5.0.4,,,,,,,_ExpectFeedback,__init__,"(self, oper, default=0.)",self.default = default,self.default = default,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,[instance] _QobjFeedback.open = open,class_field,,,,Class field: [instance] _QobjFeedback.open = open,qutip,qutip,v5.0.4,,,,,,,_QobjFeedback,__init__,"(self, default=None, prop=False, open=True)",self.open = open,self.open = open,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,[instance] _QobjFeedback.prop = prop,class_field,,,,Class field: [instance] _QobjFeedback.prop = prop,qutip,qutip,v5.0.4,,,,,,,_QobjFeedback,__init__,"(self, default=None, prop=False, open=True)",self.prop = prop,self.prop = prop,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,[instance] _QobjFeedback.default = default,class_field,,,,Class field: [instance] _QobjFeedback.default = default,qutip,qutip,v5.0.4,,,,,,,_QobjFeedback,__init__,"(self, default=None, prop=False, open=True)",self.default = default,self.default = default,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,[instance] _DataFeedback.open = open,class_field,,,,Class field: [instance] _DataFeedback.open = open,qutip,qutip,v5.0.4,,,,,,,_DataFeedback,__init__,"(self, default=None, open=True, prop=False)",self.open = open,self.open = open,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,[instance] _DataFeedback.default = default,class_field,,,,Class field: [instance] _DataFeedback.default = default,qutip,qutip,v5.0.4,,,,,,,_DataFeedback,__init__,"(self, default=None, open=True, prop=False)",self.default = default,self.default = default,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,[instance] _DataFeedback.prop = prop,class_field,,,,Class field: [instance] _DataFeedback.prop = prop,qutip,qutip,v5.0.4,,,,,,,_DataFeedback,__init__,"(self, default=None, open=True, prop=False)",self.prop = prop,self.prop = prop,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,"_CollapseFeedback.code = ""CollapseFeedback""",class_field,,,,"Class field: _CollapseFeedback.code = ""CollapseFeedback""",qutip,qutip,v5.0.4,,,,,,,_CollapseFeedback,,,"code = ""CollapseFeedback""",,,,,code,,"""CollapseFeedback""",
qutip_qutip_v5.0.4,_feedback.py,python,[instance] _CollapseFeedback.default = default or [],class_field,,,,Class field: [instance] _CollapseFeedback.default = default or [],qutip,qutip,v5.0.4,,,,,,,_CollapseFeedback,__init__,"(self, default=None)",self.default = default or [],self.default = default or [],,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,"_WienerFeedback.code = ""WienerFeedback""",class_field,,,,"Class field: _WienerFeedback.code = ""WienerFeedback""",qutip,qutip,v5.0.4,,,,,,,_WienerFeedback,,,"code = ""WienerFeedback""",,,,,code,,"""WienerFeedback""",
qutip_qutip_v5.0.4,_feedback.py,python,[instance] _WienerFeedback.default = default or _default_wiener,class_field,,,,Class field: [instance] _WienerFeedback.default = default or _default_wiener,qutip,qutip,v5.0.4,,,,,,,_WienerFeedback,__init__,"(self, default=None)",self.default = default or _default_wiener,self.default = default or _default_wiener,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,"_ExpectFeedback.__init__(self, oper, default=0.)",class_method,,,,"Class method: _ExpectFeedback.__init__(self, oper, default=0.)",qutip,qutip,v5.0.4,,,,,,,_ExpectFeedback,__init__,"(self, oper, default=0.)",,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,"_ExpectFeedback.check_consistency(self, dims)",class_method,,,,"Class method: _ExpectFeedback.check_consistency(self, dims)",qutip,qutip,v5.0.4,,,,,,,_ExpectFeedback,check_consistency,"(self, dims)",,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,"_ExpectFeedback.__call__(self, t, state)",class_method,,,,"Class method: _ExpectFeedback.__call__(self, t, state)",qutip,qutip,v5.0.4,,,,,,,_ExpectFeedback,__call__,"(self, t, state)",,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,_ExpectFeedback.__repr__(self),class_method,,,,Class method: _ExpectFeedback.__repr__(self),qutip,qutip,v5.0.4,,,,,,,_ExpectFeedback,__repr__,(self),,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,"_QobjFeedback.__init__(self, default=None, prop=False, open=True)",class_method,,,,"Class method: _QobjFeedback.__init__(self, default=None, prop=False, open=True)",qutip,qutip,v5.0.4,,,,,,,_QobjFeedback,__init__,"(self, default=None, prop=False, open=True)",,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,"_QobjFeedback.check_consistency(self, dims)",class_method,,,,"Class method: _QobjFeedback.check_consistency(self, dims)",qutip,qutip,v5.0.4,,,,,,,_QobjFeedback,check_consistency,"(self, dims)",,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,"_QobjFeedback.__call__(self, t, state)",class_method,,,,"Class method: _QobjFeedback.__call__(self, t, state)",qutip,qutip,v5.0.4,,,,,,,_QobjFeedback,__call__,"(self, t, state)",,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,_QobjFeedback.__repr__(self),class_method,,,,Class method: _QobjFeedback.__repr__(self),qutip,qutip,v5.0.4,,,,,,,_QobjFeedback,__repr__,(self),,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,"_DataFeedback.__init__(self, default=None, open=True, prop=False)",class_method,,,,"Class method: _DataFeedback.__init__(self, default=None, open=True, prop=False)",qutip,qutip,v5.0.4,,,,,,,_DataFeedback,__init__,"(self, default=None, open=True, prop=False)",,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,"_DataFeedback.check_consistency(self, dims)",class_method,,,,"Class method: _DataFeedback.check_consistency(self, dims)",qutip,qutip,v5.0.4,,,,,,,_DataFeedback,check_consistency,"(self, dims)",,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,"_DataFeedback.__call__(self, t, state)",class_method,,,,"Class method: _DataFeedback.__call__(self, t, state)",qutip,qutip,v5.0.4,,,,,,,_DataFeedback,__call__,"(self, t, state)",,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,_DataFeedback.__repr__(self),class_method,,,,Class method: _DataFeedback.__repr__(self),qutip,qutip,v5.0.4,,,,,,,_DataFeedback,__repr__,(self),,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,"_CollapseFeedback.__init__(self, default=None)",class_method,,,,"Class method: _CollapseFeedback.__init__(self, default=None)",qutip,qutip,v5.0.4,,,,,,,_CollapseFeedback,__init__,"(self, default=None)",,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,"_CollapseFeedback.check_consistency(self, dims)",class_method,,,,"Class method: _CollapseFeedback.check_consistency(self, dims)",qutip,qutip,v5.0.4,,,,,,,_CollapseFeedback,check_consistency,"(self, dims)",,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,_CollapseFeedback.__repr__(self),class_method,,,,Class method: _CollapseFeedback.__repr__(self),qutip,qutip,v5.0.4,,,,,,,_CollapseFeedback,__repr__,(self),,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,"_WienerFeedback.__init__(self, default=None)",class_method,,,,"Class method: _WienerFeedback.__init__(self, default=None)",qutip,qutip,v5.0.4,,,,,,,_WienerFeedback,__init__,"(self, default=None)",,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,"_WienerFeedback.check_consistency(self, dims)",class_method,,,,"Class method: _WienerFeedback.check_consistency(self, dims)",qutip,qutip,v5.0.4,,,,,,,_WienerFeedback,check_consistency,"(self, dims)",,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,_WienerFeedback.__repr__(self),class_method,,,,Class method: _WienerFeedback.__repr__(self),qutip,qutip,v5.0.4,,,,,,,_WienerFeedback,__repr__,(self),,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,_ExpectFeedback(_Feedback),class,,,,Class: _ExpectFeedback(_Feedback),qutip,qutip,v5.0.4,,,,,,,_ExpectFeedback,,,,,,,,,(_Feedback),,
qutip_qutip_v5.0.4,_feedback.py,python,_QobjFeedback(_Feedback),class,,,,Class: _QobjFeedback(_Feedback),qutip,qutip,v5.0.4,,,,,,,_QobjFeedback,,,,,,,,,(_Feedback),,
qutip_qutip_v5.0.4,_feedback.py,python,_DataFeedback(_Feedback),class,,,,Class: _DataFeedback(_Feedback),qutip,qutip,v5.0.4,,,,,,,_DataFeedback,,,,,,,,,(_Feedback),,
qutip_qutip_v5.0.4,_feedback.py,python,_CollapseFeedback(_Feedback),class,,,,Class: _CollapseFeedback(_Feedback),qutip,qutip,v5.0.4,,,,,,,_CollapseFeedback,,,,,,,,,(_Feedback),,
qutip_qutip_v5.0.4,_feedback.py,python,_WienerFeedback(_Feedback),class,,,,Class: _WienerFeedback(_Feedback),qutip,qutip,v5.0.4,,,,,,,_WienerFeedback,,,,,,,,,(_Feedback),,
qutip_qutip_v5.0.4,_feedback.py,python,_default_wiener(t),function,,,,Function: _default_wiener(t),qutip,qutip,v5.0.4,,,,_default_wiener,(t),,,,,,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,qutip.core.data,import,,,,Import: qutip.core.data,qutip,qutip,v5.0.4,import qutip.core.data as _data,,qutip.core.data,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,QobjEvo from qutip.core.cy.qobjevo,local_import,,,,Import: QobjEvo from qutip.core.cy.qobjevo,qutip,qutip,v5.0.4,"from qutip.core.cy.qobjevo import QobjEvo, _Feedback",qutip.core.cy.qobjevo,QobjEvo,,,qutip.core.cy.qobjevo,,,,,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,_Feedback from qutip.core.cy.qobjevo,local_import,,,,Import: _Feedback from qutip.core.cy.qobjevo,qutip,qutip,v5.0.4,"from qutip.core.cy.qobjevo import QobjEvo, _Feedback",qutip.core.cy.qobjevo,_Feedback,,,qutip.core.cy.qobjevo,,,,,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,Dimensions from qutip.core.dimensions,local_import,,,,Import: Dimensions from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import Dimensions, Field, SuperSpace",qutip.core.dimensions,Dimensions,,,qutip.core.dimensions,,,,,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,Field from qutip.core.dimensions,local_import,,,,Import: Field from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import Dimensions, Field, SuperSpace",qutip.core.dimensions,Field,,,qutip.core.dimensions,,,,,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,SuperSpace from qutip.core.dimensions,local_import,,,,Import: SuperSpace from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import Dimensions, Field, SuperSpace",qutip.core.dimensions,SuperSpace,,,qutip.core.dimensions,,,,,,,,,,,,
qutip_qutip_v5.0.4,_feedback.py,python,Qobj from qutip.core.qobj,local_import,,,,Import: Qobj from qutip.core.qobj,qutip,qutip,v5.0.4,from qutip.core.qobj import Qobj,qutip.core.qobj,Qobj,,,qutip.core.qobj,,,,,,,,,,,,
,_feedback.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,_feedback.py,python,,,,,,Directory: qutip\solver\_feedback.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,__init__.py,python,qutip.solver.integrator,import,,,,Import: qutip.solver.integrator,qutip,qutip,v5.0.4,import qutip.solver.integrator as integrator,,qutip.solver.integrator,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,__init__.py,python,qutip.solver.sode,import,,,,Import: qutip.solver.sode,qutip,qutip,v5.0.4,import qutip.solver.sode as sode,,qutip.solver.sode,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: qutip\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: qutip\solver\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: qutip\solver\cy,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: qutip\solver\cy\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"BathExponent.types = enum.Enum(""ExponentType"", [""R"", ""I"", ""RI"", ""+"", ""-""])",class_field,,,,"Class field: BathExponent.types = enum.Enum(""ExponentType"", [""R"", ""I"", ""RI"", ""+"", ""-""])",qutip,qutip,v5.0.4,,,,,,,BathExponent,,,"types = enum.Enum(""ExponentType"", [""R"", ""I"", ""RI"", ""+"", ""-""])",,,,,types,,"enum.Enum(""ExponentType"", [""R"", ""I"", ""RI"", ""+"", ""-""])",
qutip_qutip_v5.0.4,bofin_baths.py,python,"[instance] BathExponent._check_ck2(type, ck2)",class_field,,,,"Class field: [instance] BathExponent._check_ck2(type, ck2)",qutip,qutip,v5.0.4,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )","self._check_ck2(type, ck2)","self._check_ck2(type, ck2)",,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"[instance] BathExponent._check_sigma_bar_k_offset(type, sigma_bar_k_offset)",class_field,,,,"Class field: [instance] BathExponent._check_sigma_bar_k_offset(type, sigma_bar_k_offset)",qutip,qutip,v5.0.4,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )","self._check_sigma_bar_k_offset(type, sigma_bar_k_offset)","self._check_sigma_bar_k_offset(type, sigma_bar_k_offset)",,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,[instance] BathExponent.type = type,class_field,,,,Class field: [instance] BathExponent.type = type,qutip,qutip,v5.0.4,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",self.type = type,self.type = type,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,[instance] BathExponent.fermionic = _type_is_fermionic(type),class_field,,,,Class field: [instance] BathExponent.fermionic = _type_is_fermionic(type),qutip,qutip,v5.0.4,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",self.fermionic = self._type_is_fermionic(type),self.fermionic = self._type_is_fermionic(type),,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,[instance] BathExponent.dim = dim,class_field,,,,Class field: [instance] BathExponent.dim = dim,qutip,qutip,v5.0.4,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",self.dim = dim,self.dim = dim,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,[instance] BathExponent.Q = Q,class_field,,,,Class field: [instance] BathExponent.Q = Q,qutip,qutip,v5.0.4,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",self.Q = Q,self.Q = Q,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,[instance] BathExponent.ck = ck,class_field,,,,Class field: [instance] BathExponent.ck = ck,qutip,qutip,v5.0.4,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",self.ck = ck,self.ck = ck,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,[instance] BathExponent.vk = vk,class_field,,,,Class field: [instance] BathExponent.vk = vk,qutip,qutip,v5.0.4,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",self.vk = vk,self.vk = vk,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,[instance] BathExponent.ck2 = ck2,class_field,,,,Class field: [instance] BathExponent.ck2 = ck2,qutip,qutip,v5.0.4,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",self.ck2 = ck2,self.ck2 = ck2,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,[instance] BathExponent.sigma_bar_k_offset = sigma_bar_k_offset,class_field,,,,Class field: [instance] BathExponent.sigma_bar_k_offset = sigma_bar_k_offset,qutip,qutip,v5.0.4,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",self.sigma_bar_k_offset = sigma_bar_k_offset,self.sigma_bar_k_offset = sigma_bar_k_offset,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,[instance] BathExponent.tag = tag,class_field,,,,Class field: [instance] BathExponent.tag = tag,qutip,qutip,v5.0.4,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",self.tag = tag,self.tag = tag,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,[instance] Bath.exponents = exponents,class_field,,,,Class field: [instance] Bath.exponents = exponents,qutip,qutip,v5.0.4,,,,,,,Bath,__init__,"(self, exponents)",self.exponents = exponents,self.exponents = exponents,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"[instance] BosonicBath._check_cks_and_vks(ck_real, vk_real, ck_imag, vk_imag)",class_field,,,,"Class field: [instance] BosonicBath._check_cks_and_vks(ck_real, vk_real, ck_imag, vk_imag)",qutip,qutip,v5.0.4,,,,,,,BosonicBath,__init__,"(
            self, Q, ck_real, vk_real, ck_imag, vk_imag, combine=True,
            tag=None,
    )","self._check_cks_and_vks(ck_real, vk_real, ck_imag, vk_imag)","self._check_cks_and_vks(ck_real, vk_real, ck_imag, vk_imag)",,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,[instance] BosonicBath._check_coup_op(Q),class_field,,,,Class field: [instance] BosonicBath._check_coup_op(Q),qutip,qutip,v5.0.4,,,,,,,BosonicBath,__init__,"(
            self, Q, ck_real, vk_real, ck_imag, vk_imag, combine=True,
            tag=None,
    )",self._check_coup_op(Q),self._check_coup_op(Q),,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"[instance] DrudeLorentzBath._dl_terminator = _DrudeLorentzTerminator(
            Q=Q, lam=lam, gamma=gamma, T=T,
        )",class_field,,,,"Class field: [instance] DrudeLorentzBath._dl_terminator = _DrudeLorentzTerminator(
            Q=Q, lam=lam, gamma=gamma, T=T,
        )",qutip,qutip,v5.0.4,,,,,,,DrudeLorentzBath,__init__,"(
        self, Q, lam, gamma, T, Nk, combine=True, tag=None,
    )","self._dl_terminator = _DrudeLorentzTerminator(
            Q=Q, lam=lam, gamma=gamma, T=T,
        )","self._dl_terminator = _DrudeLorentzTerminator(
            Q=Q, lam=lam, gamma=gamma, T=T,
        )",,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"[instance] DrudeLorentzPadeBath._dl_terminator = _DrudeLorentzTerminator(
            Q=Q, lam=lam, gamma=gamma, T=T,
        )",class_field,,,,"Class field: [instance] DrudeLorentzPadeBath._dl_terminator = _DrudeLorentzTerminator(
            Q=Q, lam=lam, gamma=gamma, T=T,
        )",qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPadeBath,__init__,"(
        self, Q, lam, gamma, T, Nk, combine=True, tag=None
    )","self._dl_terminator = _DrudeLorentzTerminator(
            Q=Q, lam=lam, gamma=gamma, T=T,
        )","self._dl_terminator = _DrudeLorentzTerminator(
            Q=Q, lam=lam, gamma=gamma, T=T,
        )",,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,[instance] _DrudeLorentzTerminator.Q = Q,class_field,,,,Class field: [instance] _DrudeLorentzTerminator.Q = Q,qutip,qutip,v5.0.4,,,,,,,_DrudeLorentzTerminator,__init__,"(self, Q, lam, gamma, T)",self.Q = Q,self.Q = Q,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,[instance] _DrudeLorentzTerminator.lam = lam,class_field,,,,Class field: [instance] _DrudeLorentzTerminator.lam = lam,qutip,qutip,v5.0.4,,,,,,,_DrudeLorentzTerminator,__init__,"(self, Q, lam, gamma, T)",self.lam = lam,self.lam = lam,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,[instance] _DrudeLorentzTerminator.gamma = gamma,class_field,,,,Class field: [instance] _DrudeLorentzTerminator.gamma = gamma,qutip,qutip,v5.0.4,,,,,,,_DrudeLorentzTerminator,__init__,"(self, Q, lam, gamma, T)",self.gamma = gamma,self.gamma = gamma,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,[instance] _DrudeLorentzTerminator.T = T,class_field,,,,Class field: [instance] _DrudeLorentzTerminator.T = T,qutip,qutip,v5.0.4,,,,,,,_DrudeLorentzTerminator,__init__,"(self, Q, lam, gamma, T)",self.T = T,self.T = T,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"[instance] FermionicBath._check_cks_and_vks(ck_plus, vk_plus, ck_minus, vk_minus)",class_field,,,,"Class field: [instance] FermionicBath._check_cks_and_vks(ck_plus, vk_plus, ck_minus, vk_minus)",qutip,qutip,v5.0.4,,,,,,,FermionicBath,__init__,"(self, Q, ck_plus, vk_plus, ck_minus, vk_minus, tag=None)","self._check_cks_and_vks(ck_plus, vk_plus, ck_minus, vk_minus)","self._check_cks_and_vks(ck_plus, vk_plus, ck_minus, vk_minus)",,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,[instance] FermionicBath._check_coup_op(Q),class_field,,,,Class field: [instance] FermionicBath._check_coup_op(Q),qutip,qutip,v5.0.4,,,,,,,FermionicBath,__init__,"(self, Q, ck_plus, vk_plus, ck_minus, vk_minus, tag=None)",self._check_coup_op(Q),self._check_coup_op(Q),,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"BathExponent._check_ck2(self, type, ck2)",class_method,,,,"Class method: BathExponent._check_ck2(self, type, ck2)",qutip,qutip,v5.0.4,,,,,,,BathExponent,_check_ck2,"(self, type, ck2)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"BathExponent._check_sigma_bar_k_offset(self, type, offset)",class_method,,,,"Class method: BathExponent._check_sigma_bar_k_offset(self, type, offset)",qutip,qutip,v5.0.4,,,,,,,BathExponent,_check_sigma_bar_k_offset,"(self, type, offset)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"BathExponent._type_is_fermionic(self, type)",class_method,,,,"Class method: BathExponent._type_is_fermionic(self, type)",qutip,qutip,v5.0.4,,,,,,,BathExponent,_type_is_fermionic,"(self, type)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"BathExponent.__init__(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",class_method,,,,"Class method: BathExponent.__init__(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",qutip,qutip,v5.0.4,,,,,,,BathExponent,__init__,"(
            self, type, dim, Q, ck, vk, ck2=None,
            sigma_bar_k_offset=None, tag=None,
    )",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,BathExponent.__repr__(self),class_method,,,,Class method: BathExponent.__repr__(self),qutip,qutip,v5.0.4,,,,,,,BathExponent,__repr__,(self),,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"Bath.__init__(self, exponents)",class_method,,,,"Class method: Bath.__init__(self, exponents)",qutip,qutip,v5.0.4,,,,,,,Bath,__init__,"(self, exponents)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"BosonicBath._check_cks_and_vks(self, ck_real, vk_real, ck_imag, vk_imag)",class_method,,,,"Class method: BosonicBath._check_cks_and_vks(self, ck_real, vk_real, ck_imag, vk_imag)",qutip,qutip,v5.0.4,,,,,,,BosonicBath,_check_cks_and_vks,"(self, ck_real, vk_real, ck_imag, vk_imag)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"BosonicBath._check_coup_op(self, Q)",class_method,,,,"Class method: BosonicBath._check_coup_op(self, Q)",qutip,qutip,v5.0.4,,,,,,,BosonicBath,_check_coup_op,"(self, Q)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"BosonicBath.__init__(
            self, Q, ck_real, vk_real, ck_imag, vk_imag, combine=True,
            tag=None,
    )",class_method,,,,"Class method: BosonicBath.__init__(
            self, Q, ck_real, vk_real, ck_imag, vk_imag, combine=True,
            tag=None,
    )",qutip,qutip,v5.0.4,,,,,,,BosonicBath,__init__,"(
            self, Q, ck_real, vk_real, ck_imag, vk_imag, combine=True,
            tag=None,
    )",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"[classmethod] BosonicBath.combine(cls, exponents, rtol=1e-5, atol=1e-7)",class_method,,,,"Class method: [classmethod] BosonicBath.combine(cls, exponents, rtol=1e-5, atol=1e-7)",qutip,qutip,v5.0.4,,,,,,,BosonicBath,combine,"(cls, exponents, rtol=1e-5, atol=1e-7)",,,,,,,,,classmethod
qutip_qutip_v5.0.4,bofin_baths.py,python,"DrudeLorentzBath.__init__(
        self, Q, lam, gamma, T, Nk, combine=True, tag=None,
    )",class_method,,,,"Class method: DrudeLorentzBath.__init__(
        self, Q, lam, gamma, T, Nk, combine=True, tag=None,
    )",qutip,qutip,v5.0.4,,,,,,,DrudeLorentzBath,__init__,"(
        self, Q, lam, gamma, T, Nk, combine=True, tag=None,
    )",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,DrudeLorentzBath.terminator(self),class_method,,,,Class method: DrudeLorentzBath.terminator(self),qutip,qutip,v5.0.4,,,,,,,DrudeLorentzBath,terminator,(self),,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"DrudeLorentzBath._matsubara_params(self, lam, gamma, T, Nk)",class_method,,,,"Class method: DrudeLorentzBath._matsubara_params(self, lam, gamma, T, Nk)",qutip,qutip,v5.0.4,,,,,,,DrudeLorentzBath,_matsubara_params,"(self, lam, gamma, T, Nk)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"DrudeLorentzPadeBath.__init__(
        self, Q, lam, gamma, T, Nk, combine=True, tag=None
    )",class_method,,,,"Class method: DrudeLorentzPadeBath.__init__(
        self, Q, lam, gamma, T, Nk, combine=True, tag=None
    )",qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPadeBath,__init__,"(
        self, Q, lam, gamma, T, Nk, combine=True, tag=None
    )",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,DrudeLorentzPadeBath.terminator(self),class_method,,,,Class method: DrudeLorentzPadeBath.terminator(self),qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPadeBath,terminator,(self),,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"DrudeLorentzPadeBath._corr(self, lam, gamma, T, Nk)",class_method,,,,"Class method: DrudeLorentzPadeBath._corr(self, lam, gamma, T, Nk)",qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPadeBath,_corr,"(self, lam, gamma, T, Nk)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"DrudeLorentzPadeBath._cot(self, x)",class_method,,,,"Class method: DrudeLorentzPadeBath._cot(self, x)",qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPadeBath,_cot,"(self, x)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"DrudeLorentzPadeBath._kappa_epsilon(self, Nk)",class_method,,,,"Class method: DrudeLorentzPadeBath._kappa_epsilon(self, Nk)",qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPadeBath,_kappa_epsilon,"(self, Nk)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"DrudeLorentzPadeBath._delta(self, i, j)",class_method,,,,"Class method: DrudeLorentzPadeBath._delta(self, i, j)",qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPadeBath,_delta,"(self, i, j)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"DrudeLorentzPadeBath._calc_eps(self, Nk)",class_method,,,,"Class method: DrudeLorentzPadeBath._calc_eps(self, Nk)",qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPadeBath,_calc_eps,"(self, Nk)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"DrudeLorentzPadeBath._calc_chi(self, Nk)",class_method,,,,"Class method: DrudeLorentzPadeBath._calc_chi(self, Nk)",qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPadeBath,_calc_chi,"(self, Nk)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"_DrudeLorentzTerminator.__init__(self, Q, lam, gamma, T)",class_method,,,,"Class method: _DrudeLorentzTerminator.__init__(self, Q, lam, gamma, T)",qutip,qutip,v5.0.4,,,,,,,_DrudeLorentzTerminator,__init__,"(self, Q, lam, gamma, T)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"_DrudeLorentzTerminator.terminator(self, exponents)",class_method,,,,"Class method: _DrudeLorentzTerminator.terminator(self, exponents)",qutip,qutip,v5.0.4,,,,,,,_DrudeLorentzTerminator,terminator,"(self, exponents)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"UnderDampedBath.__init__(
        self, Q, lam, gamma, w0, T, Nk, combine=True, tag=None,
    )",class_method,,,,"Class method: UnderDampedBath.__init__(
        self, Q, lam, gamma, w0, T, Nk, combine=True, tag=None,
    )",qutip,qutip,v5.0.4,,,,,,,UnderDampedBath,__init__,"(
        self, Q, lam, gamma, w0, T, Nk, combine=True, tag=None,
    )",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"UnderDampedBath._matsubara_params(self, lam, gamma, w0, T, Nk)",class_method,,,,"Class method: UnderDampedBath._matsubara_params(self, lam, gamma, w0, T, Nk)",qutip,qutip,v5.0.4,,,,,,,UnderDampedBath,_matsubara_params,"(self, lam, gamma, w0, T, Nk)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"FermionicBath._check_cks_and_vks(self, ck_plus, vk_plus, ck_minus, vk_minus)",class_method,,,,"Class method: FermionicBath._check_cks_and_vks(self, ck_plus, vk_plus, ck_minus, vk_minus)",qutip,qutip,v5.0.4,,,,,,,FermionicBath,_check_cks_and_vks,"(self, ck_plus, vk_plus, ck_minus, vk_minus)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"FermionicBath._check_coup_op(self, Q)",class_method,,,,"Class method: FermionicBath._check_coup_op(self, Q)",qutip,qutip,v5.0.4,,,,,,,FermionicBath,_check_coup_op,"(self, Q)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"FermionicBath.__init__(self, Q, ck_plus, vk_plus, ck_minus, vk_minus, tag=None)",class_method,,,,"Class method: FermionicBath.__init__(self, Q, ck_plus, vk_plus, ck_minus, vk_minus, tag=None)",qutip,qutip,v5.0.4,,,,,,,FermionicBath,__init__,"(self, Q, ck_plus, vk_plus, ck_minus, vk_minus, tag=None)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"LorentzianBath.__init__(self, Q, gamma, w, mu, T, Nk, tag=None)",class_method,,,,"Class method: LorentzianBath.__init__(self, Q, gamma, w, mu, T, Nk, tag=None)",qutip,qutip,v5.0.4,,,,,,,LorentzianBath,__init__,"(self, Q, gamma, w, mu, T, Nk, tag=None)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"LorentzianBath._corr(self, gamma, w, mu, T, Nk, sigma)",class_method,,,,"Class method: LorentzianBath._corr(self, gamma, w, mu, T, Nk, sigma)",qutip,qutip,v5.0.4,,,,,,,LorentzianBath,_corr,"(self, gamma, w, mu, T, Nk, sigma)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"LorentzianPadeBath.__init__(self, Q, gamma, w, mu, T, Nk, tag=None)",class_method,,,,"Class method: LorentzianPadeBath.__init__(self, Q, gamma, w, mu, T, Nk, tag=None)",qutip,qutip,v5.0.4,,,,,,,LorentzianPadeBath,__init__,"(self, Q, gamma, w, mu, T, Nk, tag=None)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"LorentzianPadeBath._corr(self, gamma, w, mu, T, Nk, sigma)",class_method,,,,"Class method: LorentzianPadeBath._corr(self, gamma, w, mu, T, Nk, sigma)",qutip,qutip,v5.0.4,,,,,,,LorentzianPadeBath,_corr,"(self, gamma, w, mu, T, Nk, sigma)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"LorentzianPadeBath._kappa_epsilon(self, Nk)",class_method,,,,"Class method: LorentzianPadeBath._kappa_epsilon(self, Nk)",qutip,qutip,v5.0.4,,,,,,,LorentzianPadeBath,_kappa_epsilon,"(self, Nk)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"LorentzianPadeBath._delta(self, i, j)",class_method,,,,"Class method: LorentzianPadeBath._delta(self, i, j)",qutip,qutip,v5.0.4,,,,,,,LorentzianPadeBath,_delta,"(self, i, j)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"LorentzianPadeBath._calc_eps(self, Nk)",class_method,,,,"Class method: LorentzianPadeBath._calc_eps(self, Nk)",qutip,qutip,v5.0.4,,,,,,,LorentzianPadeBath,_calc_eps,"(self, Nk)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"LorentzianPadeBath._calc_chi(self, Nk)",class_method,,,,"Class method: LorentzianPadeBath._calc_chi(self, Nk)",qutip,qutip,v5.0.4,,,,,,,LorentzianPadeBath,_calc_chi,"(self, Nk)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,BathExponent,class,,,,Class: BathExponent,qutip,qutip,v5.0.4,,,,,,,BathExponent,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,Bath,class,,,,Class: Bath,qutip,qutip,v5.0.4,,,,,,,Bath,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,BosonicBath(Bath),class,,,,Class: BosonicBath(Bath),qutip,qutip,v5.0.4,,,,,,,BosonicBath,,,,,,,,,(Bath),,
qutip_qutip_v5.0.4,bofin_baths.py,python,DrudeLorentzBath(BosonicBath),class,,,,Class: DrudeLorentzBath(BosonicBath),qutip,qutip,v5.0.4,,,,,,,DrudeLorentzBath,,,,,,,,,(BosonicBath),,
qutip_qutip_v5.0.4,bofin_baths.py,python,DrudeLorentzPadeBath(BosonicBath),class,,,,Class: DrudeLorentzPadeBath(BosonicBath),qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPadeBath,,,,,,,,,(BosonicBath),,
qutip_qutip_v5.0.4,bofin_baths.py,python,_DrudeLorentzTerminator,class,,,,Class: _DrudeLorentzTerminator,qutip,qutip,v5.0.4,,,,,,,_DrudeLorentzTerminator,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,UnderDampedBath(BosonicBath),class,,,,Class: UnderDampedBath(BosonicBath),qutip,qutip,v5.0.4,,,,,,,UnderDampedBath,,,,,,,,,(BosonicBath),,
qutip_qutip_v5.0.4,bofin_baths.py,python,FermionicBath(Bath),class,,,,Class: FermionicBath(Bath),qutip,qutip,v5.0.4,,,,,,,FermionicBath,,,,,,,,,(Bath),,
qutip_qutip_v5.0.4,bofin_baths.py,python,LorentzianBath(FermionicBath),class,,,,Class: LorentzianBath(FermionicBath),qutip,qutip,v5.0.4,,,,,,,LorentzianBath,,,,,,,,,(FermionicBath),,
qutip_qutip_v5.0.4,bofin_baths.py,python,LorentzianPadeBath(FermionicBath),class,,,,Class: LorentzianPadeBath(FermionicBath),qutip,qutip,v5.0.4,,,,,,,LorentzianPadeBath,,,,,,,,,(FermionicBath),,
qutip_qutip_v5.0.4,bofin_baths.py,python,"_isequal(Q1, Q2, tol)",function,,,,"Function: _isequal(Q1, Q2, tol)",qutip,qutip,v5.0.4,,,,_isequal,"(Q1, Q2, tol)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,"__all__ = [
    ""BathExponent"",
    ""Bath"",
    ""BosonicBath"",
    ""DrudeLorentzBath"",
    ""DrudeLorentzPadeBath"",
    ""UnderDampedBath"",
    ""FermionicBath"",
    ""LorentzianBath"",
    ""LorentzianPadeBath"",
]",constant,"__all__ = [
    ""BathExponent"",
    ""Bath"",
    ""BosonicBath"",
    ""DrudeLorentzBath"",
    ""DrudeLorentzPadeBath"",
    ""UnderDampedBath"",
    ""FermionicBath"",
    ""LorentzianBath"",
    ""LorentzianPadeBath"",
]",__all__,"[
    ""BathExponent"",
    ""Bath"",
    ""BosonicBath"",
    ""DrudeLorentzBath"",
    ""DrudeLorentzPadeBath"",
    ""UnderDampedBath"",
    ""FermionicBath"",
    ""LorentzianBath"",
    ""LorentzianPadeBath"",
]","Constant: __all__ = [
    ""BathExponent"",
    ""Bath"",
    ""BosonicBath"",
    ""DrudeLorentzBath"",
    ""DrudeLorentzPadeBath"",
    ""UnderDampedBath"",
    ""FermionicBath"",
    ""LorentzianBath"",
    ""LorentzianPadeBath"",
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,enum,import,,,,Import: enum,qutip,qutip,v5.0.4,import enum,,enum,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,eigvalsh from scipy.linalg,local_import,,,,Import: eigvalsh from scipy.linalg,qutip,qutip,v5.0.4,from scipy.linalg import eigvalsh,scipy.linalg,eigvalsh,,,scipy.linalg,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,data from qutip.core,local_import,,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,qutip.core,data,,,qutip.core,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,Qobj from qutip.core.qobj,local_import,,,,Import: Qobj from qutip.core.qobj,qutip,qutip,v5.0.4,from qutip.core.qobj import Qobj,qutip.core.qobj,Qobj,,,qutip.core.qobj,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,spre from qutip.core.superoperator,local_import,,,,Import: spre from qutip.core.superoperator,qutip,qutip,v5.0.4,"from qutip.core.superoperator import spre, spost",qutip.core.superoperator,spre,,,qutip.core.superoperator,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_baths.py,python,spost from qutip.core.superoperator,local_import,,,,Import: spost from qutip.core.superoperator,qutip,qutip,v5.0.4,"from qutip.core.superoperator import spre, spost",qutip.core.superoperator,spost,,,qutip.core.superoperator,,,,,,,,,,,,
,bofin_baths.py,python,,,,,,File: qutip\solver\heom,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,bofin_baths.py,python,,,,,,Directory: qutip\solver\heom\bofin_baths.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HierarchyADOs.exponents = exponents,class_field,,,,Class field: [instance] HierarchyADOs.exponents = exponents,qutip,qutip,v5.0.4,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)",self.exponents = exponents,self.exponents = exponents,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HierarchyADOs.max_depth = max_depth,class_field,,,,Class field: [instance] HierarchyADOs.max_depth = max_depth,qutip,qutip,v5.0.4,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)",self.max_depth = max_depth,self.max_depth = max_depth,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HierarchyADOs.dims = [exp.dim or (max_depth + 1) for exp in exponents],class_field,,,,Class field: [instance] HierarchyADOs.dims = [exp.dim or (max_depth + 1) for exp in exponents],qutip,qutip,v5.0.4,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)",self.dims = [exp.dim or (max_depth + 1) for exp in self.exponents],self.dims = [exp.dim or (max_depth + 1) for exp in self.exponents],,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HierarchyADOs.vk = [exp.vk for exp in exponents],class_field,,,,Class field: [instance] HierarchyADOs.vk = [exp.vk for exp in exponents],qutip,qutip,v5.0.4,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)",self.vk = [exp.vk for exp in self.exponents],self.vk = [exp.vk for exp in self.exponents],,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HierarchyADOs.ck = [exp.ck for exp in exponents],class_field,,,,Class field: [instance] HierarchyADOs.ck = [exp.ck for exp in exponents],qutip,qutip,v5.0.4,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)",self.ck = [exp.ck for exp in self.exponents],self.ck = [exp.ck for exp in self.exponents],,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HierarchyADOs.ck2 = [exp.ck2 for exp in exponents],class_field,,,,Class field: [instance] HierarchyADOs.ck2 = [exp.ck2 for exp in exponents],qutip,qutip,v5.0.4,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)",self.ck2 = [exp.ck2 for exp in self.exponents],self.ck2 = [exp.ck2 for exp in self.exponents],,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"[instance] HierarchyADOs.sigma_bar_k_offset = [
            exp.sigma_bar_k_offset for exp in exponents
        ]",class_field,,,,"Class field: [instance] HierarchyADOs.sigma_bar_k_offset = [
            exp.sigma_bar_k_offset for exp in exponents
        ]",qutip,qutip,v5.0.4,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)","self.sigma_bar_k_offset = [
            exp.sigma_bar_k_offset for exp in self.exponents
        ]","self.sigma_bar_k_offset = [
            exp.sigma_bar_k_offset for exp in self.exponents
        ]",,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"[instance] HierarchyADOs.labels = list(state_number_enumerate(dims, max_depth))",class_field,,,,"Class field: [instance] HierarchyADOs.labels = list(state_number_enumerate(dims, max_depth))",qutip,qutip,v5.0.4,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)","self.labels = list(state_number_enumerate(self.dims, max_depth))","self.labels = list(state_number_enumerate(self.dims, max_depth))",,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"[instance] HierarchyADOs._label_idx = {s: i for i, s in enumerate(labels)}",class_field,,,,"Class field: [instance] HierarchyADOs._label_idx = {s: i for i, s in enumerate(labels)}",qutip,qutip,v5.0.4,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)","self._label_idx = {s: i for i, s in enumerate(self.labels)}","self._label_idx = {s: i for i, s in enumerate(self.labels)}",,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HierarchyADOs.idx = _label_idx.__getitem__,class_field,,,,Class field: [instance] HierarchyADOs.idx = _label_idx.__getitem__,qutip,qutip,v5.0.4,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)",self.idx = self._label_idx.__getitem__,self.idx = self._label_idx.__getitem__,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HierarchyADOsState.rho = rho,class_field,,,,Class field: [instance] HierarchyADOsState.rho = rho,qutip,qutip,v5.0.4,,,,,,,HierarchyADOsState,__init__,"(self, rho, ados, ado_state)",self.rho = rho,self.rho = rho,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HierarchyADOsState._ado_state = ado_state,class_field,,,,Class field: [instance] HierarchyADOsState._ado_state = ado_state,qutip,qutip,v5.0.4,,,,,,,HierarchyADOsState,__init__,"(self, rho, ados, ado_state)",self._ado_state = ado_state,self._ado_state = ado_state,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HierarchyADOsState._ados = ados,class_field,,,,Class field: [instance] HierarchyADOsState._ados = ados,qutip,qutip,v5.0.4,,,,,,,HierarchyADOsState,__init__,"(self, rho, ados, ado_state)",self._ados = ados,self._ados = ados,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HEOMSolver.name = ""heomsolver""",class_field,,,,"Class field: HEOMSolver.name = ""heomsolver""",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,,,"name = ""heomsolver""",,,,,name,,"""heomsolver""",
qutip_qutip_v5.0.4,bofin_solvers.py,python,HEOMSolver._resultclass = HEOMResult,class_field,,,,Class field: HEOMSolver._resultclass = HEOMResult,qutip,qutip,v5.0.4,,,,,,,HEOMSolver,,,_resultclass = HEOMResult,,,,,_resultclass,,HEOMResult,
qutip_qutip_v5.0.4,bofin_solvers.py,python,HEOMSolver._avail_integrators = {},class_field,,,,Class field: HEOMSolver._avail_integrators = {},qutip,qutip,v5.0.4,,,,,,,HEOMSolver,,,_avail_integrators = {},,,,,_avail_integrators,,{},
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HEOMSolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": False,
        ""method"": ""adams"",
        ""store_ados"": False,
        ""state_data_type"": ""dense"",
    }",class_field,,,,"Class field: HEOMSolver.solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": False,
        ""method"": ""adams"",
        ""store_ados"": False,
        ""state_data_type"": ""dense"",
    }",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,,,"solver_options = {
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": False,
        ""method"": ""adams"",
        ""store_ados"": False,
        ""state_data_type"": ""dense"",
    }",,,,,solver_options,,"{
        ""progress_bar"": ""text"",
        ""progress_kwargs"": {""chunk_size"": 10},
        ""store_final_state"": False,
        ""store_states"": None,
        ""normalize_output"": False,
        ""method"": ""adams"",
        ""store_ados"": False,
        ""state_data_type"": ""dense"",
    }",
qutip_qutip_v5.0.4,bofin_solvers.py,python,"[instance] HEOMSolver.L_sys = (
            liouvillian(H) if H.type == ""oper""  # hamiltonian
            else H  # already a liouvillian
        )",class_field,,,,"Class field: [instance] HEOMSolver.L_sys = (
            liouvillian(H) if H.type == ""oper""  # hamiltonian
            else H  # already a liouvillian
        )",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)","self.L_sys = (
            liouvillian(H) if H.type == ""oper""  # hamiltonian
            else H  # already a liouvillian
        )","self.L_sys = (
            liouvillian(H) if H.type == ""oper""  # hamiltonian
            else H  # already a liouvillian
        )",,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HEOMSolver._sys_shape = int(np.sqrt(L_sys.shape[0])),class_field,,,,Class field: [instance] HEOMSolver._sys_shape = int(np.sqrt(L_sys.shape[0])),qutip,qutip,v5.0.4,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._sys_shape = int(np.sqrt(self.L_sys.shape[0])),self._sys_shape = int(np.sqrt(self.L_sys.shape[0])),,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HEOMSolver._sup_shape = L_sys.shape[0],class_field,,,,Class field: [instance] HEOMSolver._sup_shape = L_sys.shape[0],qutip,qutip,v5.0.4,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._sup_shape = self.L_sys.shape[0],self._sup_shape = self.L_sys.shape[0],,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HEOMSolver._sys_dims = L_sys.dims[0],class_field,,,,Class field: [instance] HEOMSolver._sys_dims = L_sys.dims[0],qutip,qutip,v5.0.4,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._sys_dims = self.L_sys.dims[0],self._sys_dims = self.L_sys.dims[0],,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"[instance] HEOMSolver.ados = HierarchyADOs(
            _combine_bath_exponents(bath), max_depth,
        )",class_field,,,,"Class field: [instance] HEOMSolver.ados = HierarchyADOs(
            _combine_bath_exponents(bath), max_depth,
        )",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)","self.ados = HierarchyADOs(
            self._combine_bath_exponents(bath), max_depth,
        )","self.ados = HierarchyADOs(
            self._combine_bath_exponents(bath), max_depth,
        )",,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HEOMSolver._n_ados = len(ados.labels),class_field,,,,Class field: [instance] HEOMSolver._n_ados = len(ados.labels),qutip,qutip,v5.0.4,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._n_ados = len(self.ados.labels),self._n_ados = len(self.ados.labels),,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HEOMSolver._n_exponents = len(ados.exponents),class_field,,,,Class field: [instance] HEOMSolver._n_exponents = len(ados.exponents),qutip,qutip,v5.0.4,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._n_exponents = len(self.ados.exponents),self._n_exponents = len(self.ados.exponents),,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HEOMSolver._init_ados_time = time() - _time_start,class_field,,,,Class field: [instance] HEOMSolver._init_ados_time = time() - _time_start,qutip,qutip,v5.0.4,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._init_ados_time = time() - _time_start,self._init_ados_time = time() - _time_start,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"[instance] HEOMSolver._sId = _data.identity(_sup_shape, dtype=""csr"")",class_field,,,,"Class field: [instance] HEOMSolver._sId = _data.identity(_sup_shape, dtype=""csr"")",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)","self._sId = _data.identity(self._sup_shape, dtype=""csr"")","self._sId = _data.identity(self._sup_shape, dtype=""csr"")",,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HEOMSolver._spreQ = [spre(op).data for op in Qs],class_field,,,,Class field: [instance] HEOMSolver._spreQ = [spre(op).data for op in Qs],qutip,qutip,v5.0.4,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._spreQ = [spre(op).data for op in Qs],self._spreQ = [spre(op).data for op in Qs],,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HEOMSolver._spostQ = [spost(op).data for op in Qs],class_field,,,,Class field: [instance] HEOMSolver._spostQ = [spost(op).data for op in Qs],qutip,qutip,v5.0.4,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._spostQ = [spost(op).data for op in Qs],self._spostQ = [spost(op).data for op in Qs],,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"[instance] HEOMSolver._s_pre_minus_post_Q = [
            _data.sub(_spreQ[k], _spostQ[k])
            for k in range(_n_exponents)
        ]",class_field,,,,"Class field: [instance] HEOMSolver._s_pre_minus_post_Q = [
            _data.sub(_spreQ[k], _spostQ[k])
            for k in range(_n_exponents)
        ]",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)","self._s_pre_minus_post_Q = [
            _data.sub(self._spreQ[k], self._spostQ[k])
            for k in range(self._n_exponents)
        ]","self._s_pre_minus_post_Q = [
            _data.sub(self._spreQ[k], self._spostQ[k])
            for k in range(self._n_exponents)
        ]",,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"[instance] HEOMSolver._s_pre_plus_post_Q = [
            _data.add(_spreQ[k], _spostQ[k])
            for k in range(_n_exponents)
        ]",class_field,,,,"Class field: [instance] HEOMSolver._s_pre_plus_post_Q = [
            _data.add(_spreQ[k], _spostQ[k])
            for k in range(_n_exponents)
        ]",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)","self._s_pre_plus_post_Q = [
            _data.add(self._spreQ[k], self._spostQ[k])
            for k in range(self._n_exponents)
        ]","self._s_pre_plus_post_Q = [
            _data.add(self._spreQ[k], self._spostQ[k])
            for k in range(self._n_exponents)
        ]",,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HEOMSolver._spreQdag = [spre(op.dag()).data for op in Qs],class_field,,,,Class field: [instance] HEOMSolver._spreQdag = [spre(op.dag()).data for op in Qs],qutip,qutip,v5.0.4,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._spreQdag = [spre(op.dag()).data for op in Qs],self._spreQdag = [spre(op.dag()).data for op in Qs],,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HEOMSolver._spostQdag = [spost(op.dag()).data for op in Qs],class_field,,,,Class field: [instance] HEOMSolver._spostQdag = [spost(op.dag()).data for op in Qs],qutip,qutip,v5.0.4,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._spostQdag = [spost(op.dag()).data for op in Qs],self._spostQdag = [spost(op.dag()).data for op in Qs],,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"[instance] HEOMSolver._s_pre_minus_post_Qdag = [
            _data.sub(_spreQdag[k], _spostQdag[k])
            for k in range(_n_exponents)
        ]",class_field,,,,"Class field: [instance] HEOMSolver._s_pre_minus_post_Qdag = [
            _data.sub(_spreQdag[k], _spostQdag[k])
            for k in range(_n_exponents)
        ]",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)","self._s_pre_minus_post_Qdag = [
            _data.sub(self._spreQdag[k], self._spostQdag[k])
            for k in range(self._n_exponents)
        ]","self._s_pre_minus_post_Qdag = [
            _data.sub(self._spreQdag[k], self._spostQdag[k])
            for k in range(self._n_exponents)
        ]",,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"[instance] HEOMSolver._s_pre_plus_post_Qdag = [
            _data.add(_spreQdag[k], _spostQdag[k])
            for k in range(_n_exponents)
        ]",class_field,,,,"Class field: [instance] HEOMSolver._s_pre_plus_post_Qdag = [
            _data.add(_spreQdag[k], _spostQdag[k])
            for k in range(_n_exponents)
        ]",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)","self._s_pre_plus_post_Qdag = [
            _data.add(self._spreQdag[k], self._spostQdag[k])
            for k in range(self._n_exponents)
        ]","self._s_pre_plus_post_Qdag = [
            _data.add(self._spreQdag[k], self._spostQdag[k])
            for k in range(self._n_exponents)
        ]",,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HEOMSolver._init_superop_cache_time = time() - _time_start,class_field,,,,Class field: [instance] HEOMSolver._init_superop_cache_time = time() - _time_start,qutip,qutip,v5.0.4,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._init_superop_cache_time = time() - _time_start,self._init_superop_cache_time = time() - _time_start,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HEOMSolver._init_rhs_time = time() - _time_start,class_field,,,,Class field: [instance] HEOMSolver._init_rhs_time = time() - _time_start,qutip,qutip,v5.0.4,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",self._init_rhs_time = time() - _time_start,self._init_rhs_time = time() - _time_start,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HSolverDL.coup_strength = coup_strength,class_field,,,,Class field: [instance] HSolverDL.coup_strength = coup_strength,qutip,qutip,v5.0.4,,,,,,,HSolverDL,__init__,"(
        self, H_sys, coup_op, coup_strength, temperature,
        N_cut, N_exp, cut_freq, *, bnd_cut_approx=False, options=None,
        combine=True,
    )",self.coup_strength = coup_strength,self.coup_strength = coup_strength,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HSolverDL.cut_freq = cut_freq,class_field,,,,Class field: [instance] HSolverDL.cut_freq = cut_freq,qutip,qutip,v5.0.4,,,,,,,HSolverDL,__init__,"(
        self, H_sys, coup_op, coup_strength, temperature,
        N_cut, N_exp, cut_freq, *, bnd_cut_approx=False, options=None,
        combine=True,
    )",self.cut_freq = cut_freq,self.cut_freq = cut_freq,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HSolverDL.temperature = temperature,class_field,,,,Class field: [instance] HSolverDL.temperature = temperature,qutip,qutip,v5.0.4,,,,,,,HSolverDL,__init__,"(
        self, H_sys, coup_op, coup_strength, temperature,
        N_cut, N_exp, cut_freq, *, bnd_cut_approx=False, options=None,
        combine=True,
    )",self.temperature = temperature,self.temperature = temperature,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HSolverDL.N_exp = N_exp,class_field,,,,Class field: [instance] HSolverDL.N_exp = N_exp,qutip,qutip,v5.0.4,,,,,,,HSolverDL,__init__,"(
        self, H_sys, coup_op, coup_strength, temperature,
        N_cut, N_exp, cut_freq, *, bnd_cut_approx=False, options=None,
        combine=True,
    )",self.N_exp = N_exp,self.N_exp = N_exp,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] HSolverDL.bnd_cut_approx = bnd_cut_approx,class_field,,,,Class field: [instance] HSolverDL.bnd_cut_approx = bnd_cut_approx,qutip,qutip,v5.0.4,,,,,,,HSolverDL,__init__,"(
        self, H_sys, coup_op, coup_strength, temperature,
        N_cut, N_exp, cut_freq, *, bnd_cut_approx=False, options=None,
        combine=True,
    )",self.bnd_cut_approx = bnd_cut_approx,self.bnd_cut_approx = bnd_cut_approx,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] _GatherHEOMRHS._block_size = block,class_field,,,,Class field: [instance] _GatherHEOMRHS._block_size = block,qutip,qutip,v5.0.4,,,,,,,_GatherHEOMRHS,__init__,"(self, f_idx, block, nhe)",self._block_size = block,self._block_size = block,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] _GatherHEOMRHS._n_blocks = nhe,class_field,,,,Class field: [instance] _GatherHEOMRHS._n_blocks = nhe,qutip,qutip,v5.0.4,,,,,,,_GatherHEOMRHS,__init__,"(self, f_idx, block, nhe)",self._n_blocks = nhe,self._n_blocks = nhe,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] _GatherHEOMRHS._f_idx = f_idx,class_field,,,,Class field: [instance] _GatherHEOMRHS._f_idx = f_idx,qutip,qutip,v5.0.4,,,,,,,_GatherHEOMRHS,__init__,"(self, f_idx, block, nhe)",self._f_idx = f_idx,self._f_idx = f_idx,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[instance] _GatherHEOMRHS._ops = [],class_field,,,,Class field: [instance] _GatherHEOMRHS._ops = [],qutip,qutip,v5.0.4,,,,,,,_GatherHEOMRHS,__init__,"(self, f_idx, block, nhe)",self._ops = [],self._ops = [],,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HierarchyADOs.__init__(self, exponents, max_depth)",class_method,,,,"Class method: HierarchyADOs.__init__(self, exponents, max_depth)",qutip,qutip,v5.0.4,,,,,,,HierarchyADOs,__init__,"(self, exponents, max_depth)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HierarchyADOs.idx(self, label)",class_method,,,,"Class method: HierarchyADOs.idx(self, label)",qutip,qutip,v5.0.4,,,,,,,HierarchyADOs,idx,"(self, label)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HierarchyADOs.next(self, label, k)",class_method,,,,"Class method: HierarchyADOs.next(self, label, k)",qutip,qutip,v5.0.4,,,,,,,HierarchyADOs,next,"(self, label, k)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HierarchyADOs.prev(self, label, k)",class_method,,,,"Class method: HierarchyADOs.prev(self, label, k)",qutip,qutip,v5.0.4,,,,,,,HierarchyADOs,prev,"(self, label, k)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HierarchyADOs.exps(self, label)",class_method,,,,"Class method: HierarchyADOs.exps(self, label)",qutip,qutip,v5.0.4,,,,,,,HierarchyADOs,exps,"(self, label)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HierarchyADOs.filter(self, level=None, tags=None, dims=None, types=None)",class_method,,,,"Class method: HierarchyADOs.filter(self, level=None, tags=None, dims=None, types=None)",qutip,qutip,v5.0.4,,,,,,,HierarchyADOs,filter,"(self, level=None, tags=None, dims=None, types=None)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HierarchyADOsState.__init__(self, rho, ados, ado_state)",class_method,,,,"Class method: HierarchyADOsState.__init__(self, rho, ados, ado_state)",qutip,qutip,v5.0.4,,,,,,,HierarchyADOsState,__init__,"(self, rho, ados, ado_state)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HierarchyADOsState.__getattr__(self, name)",class_method,,,,"Class method: HierarchyADOsState.__getattr__(self, name)",qutip,qutip,v5.0.4,,,,,,,HierarchyADOsState,__getattr__,"(self, name)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HierarchyADOsState.extract(self, idx_or_label)",class_method,,,,"Class method: HierarchyADOsState.extract(self, idx_or_label)",qutip,qutip,v5.0.4,,,,,,,HierarchyADOsState,extract,"(self, idx_or_label)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,HEOMResult._post_init(self),class_method,,,,Class method: HEOMResult._post_init(self),qutip,qutip,v5.0.4,,,,,,,HEOMResult,_post_init,(self),,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HEOMResult._e_op_func(self, e_op)",class_method,,,,"Class method: HEOMResult._e_op_func(self, e_op)",qutip,qutip,v5.0.4,,,,,,,HEOMResult,_e_op_func,"(self, e_op)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HEOMResult._pre_copy(self, state)",class_method,,,,"Class method: HEOMResult._pre_copy(self, state)",qutip,qutip,v5.0.4,,,,,,,HEOMResult,_pre_copy,"(self, state)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HEOMResult._store_state(self, t, ado_state)",class_method,,,,"Class method: HEOMResult._store_state(self, t, ado_state)",qutip,qutip,v5.0.4,,,,,,,HEOMResult,_store_state,"(self, t, ado_state)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HEOMResult._store_final_state(self, t, ado_state)",class_method,,,,"Class method: HEOMResult._store_final_state(self, t, ado_state)",qutip,qutip,v5.0.4,,,,,,,HEOMResult,_store_final_state,"(self, t, ado_state)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[property] HEOMResult.final_ado_state(self),class_method,,,,Class method: [property] HEOMResult.final_ado_state(self),qutip,qutip,v5.0.4,,,,,,,HEOMResult,final_ado_state,(self),,,,,,,,,property
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HEOMSolver.__init__(self, H, bath, max_depth, *, options=None)",class_method,,,,"Class method: HEOMSolver.__init__(self, H, bath, max_depth, *, options=None)",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,__init__,"(self, H, bath, max_depth, *, options=None)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[property] HEOMSolver.sys_dims(self),class_method,,,,Class method: [property] HEOMSolver.sys_dims(self),qutip,qutip,v5.0.4,,,,,,,HEOMSolver,sys_dims,(self),,,,,,,,,property
qutip_qutip_v5.0.4,bofin_solvers.py,python,HEOMSolver._initialize_stats(self),class_method,,,,Class method: HEOMSolver._initialize_stats(self),qutip,qutip,v5.0.4,,,,,,,HEOMSolver,_initialize_stats,(self),,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HEOMSolver._combine_bath_exponents(self, bath)",class_method,,,,"Class method: HEOMSolver._combine_bath_exponents(self, bath)",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,_combine_bath_exponents,"(self, bath)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HEOMSolver._grad_n(self, he_n)",class_method,,,,"Class method: HEOMSolver._grad_n(self, he_n)",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,_grad_n,"(self, he_n)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HEOMSolver._grad_prev(self, he_n, k)",class_method,,,,"Class method: HEOMSolver._grad_prev(self, he_n, k)",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,_grad_prev,"(self, he_n, k)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HEOMSolver._grad_prev_bosonic(self, he_n, k)",class_method,,,,"Class method: HEOMSolver._grad_prev_bosonic(self, he_n, k)",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,_grad_prev_bosonic,"(self, he_n, k)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HEOMSolver._grad_prev_fermionic(self, he_n, k)",class_method,,,,"Class method: HEOMSolver._grad_prev_fermionic(self, he_n, k)",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,_grad_prev_fermionic,"(self, he_n, k)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HEOMSolver._grad_next(self, he_n, k)",class_method,,,,"Class method: HEOMSolver._grad_next(self, he_n, k)",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,_grad_next,"(self, he_n, k)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HEOMSolver._grad_next_bosonic(self, he_n, k)",class_method,,,,"Class method: HEOMSolver._grad_next_bosonic(self, he_n, k)",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,_grad_next_bosonic,"(self, he_n, k)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HEOMSolver._grad_next_fermionic(self, he_n, k)",class_method,,,,"Class method: HEOMSolver._grad_next_fermionic(self, he_n, k)",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,_grad_next_fermionic,"(self, he_n, k)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,HEOMSolver._rhs(self),class_method,,,,Class method: HEOMSolver._rhs(self),qutip,qutip,v5.0.4,,,,,,,HEOMSolver,_rhs,(self),,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,HEOMSolver._calculate_rhs(self),class_method,,,,Class method: HEOMSolver._calculate_rhs(self),qutip,qutip,v5.0.4,,,,,,,HEOMSolver,_calculate_rhs,(self),,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HEOMSolver.steady_state(
        self,
        use_mkl=True, mkl_max_iter_refine=100, mkl_weighted_matching=False
    )",class_method,,,,"Class method: HEOMSolver.steady_state(
        self,
        use_mkl=True, mkl_max_iter_refine=100, mkl_weighted_matching=False
    )",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,steady_state,"(
        self,
        use_mkl=True, mkl_max_iter_refine=100, mkl_weighted_matching=False
    )",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HEOMSolver.run(self, state0, tlist, *, args=None, e_ops=None)",class_method,,,,"Class method: HEOMSolver.run(self, state0, tlist, *, args=None, e_ops=None)",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,run,"(self, state0, tlist, *, args=None, e_ops=None)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HEOMSolver._prepare_state(self, state)",class_method,,,,"Class method: HEOMSolver._prepare_state(self, state)",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,_prepare_state,"(self, state)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HEOMSolver._restore_state(self, state, *, copy=True)",class_method,,,,"Class method: HEOMSolver._restore_state(self, state, *, copy=True)",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,_restore_state,"(self, state, *, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HEOMSolver.start(self, state0, t0)",class_method,,,,"Class method: HEOMSolver.start(self, state0, t0)",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,start,"(self, state0, t0)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,[property] HEOMSolver.options(self),class_method,,,,Class method: [property] HEOMSolver.options(self),qutip,qutip,v5.0.4,,,,,,,HEOMSolver,options,(self),,,,,,,,,property
qutip_qutip_v5.0.4,bofin_solvers.py,python,"[options.setter] HEOMSolver.options(self, new_options)",class_method,,,,"Class method: [options.setter] HEOMSolver.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,HEOMSolver,options,"(self, new_options)",,,,,,,,,options.setter
qutip_qutip_v5.0.4,bofin_solvers.py,python,"HSolverDL.__init__(
        self, H_sys, coup_op, coup_strength, temperature,
        N_cut, N_exp, cut_freq, *, bnd_cut_approx=False, options=None,
        combine=True,
    )",class_method,,,,"Class method: HSolverDL.__init__(
        self, H_sys, coup_op, coup_strength, temperature,
        N_cut, N_exp, cut_freq, *, bnd_cut_approx=False, options=None,
        combine=True,
    )",qutip,qutip,v5.0.4,,,,,,,HSolverDL,__init__,"(
        self, H_sys, coup_op, coup_strength, temperature,
        N_cut, N_exp, cut_freq, *, bnd_cut_approx=False, options=None,
        combine=True,
    )",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"_GatherHEOMRHS.__init__(self, f_idx, block, nhe)",class_method,,,,"Class method: _GatherHEOMRHS.__init__(self, f_idx, block, nhe)",qutip,qutip,v5.0.4,,,,,,,_GatherHEOMRHS,__init__,"(self, f_idx, block, nhe)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"_GatherHEOMRHS.add_op(self, row_he, col_he, op)",class_method,,,,"Class method: _GatherHEOMRHS.add_op(self, row_he, col_he, op)",qutip,qutip,v5.0.4,,,,,,,_GatherHEOMRHS,add_op,"(self, row_he, col_he, op)",,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,_GatherHEOMRHS.gather(self),class_method,,,,Class method: _GatherHEOMRHS.gather(self),qutip,qutip,v5.0.4,,,,,,,_GatherHEOMRHS,gather,(self),,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,HierarchyADOs,class,,,,Class: HierarchyADOs,qutip,qutip,v5.0.4,,,,,,,HierarchyADOs,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,HierarchyADOsState,class,,,,Class: HierarchyADOsState,qutip,qutip,v5.0.4,,,,,,,HierarchyADOsState,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,HEOMResult(Result),class,,,,Class: HEOMResult(Result),qutip,qutip,v5.0.4,,,,,,,HEOMResult,,,,,,,,,(Result),,
qutip_qutip_v5.0.4,bofin_solvers.py,python,HEOMSolver(Solver),class,,,,Class: HEOMSolver(Solver),qutip,qutip,v5.0.4,,,,,,,HEOMSolver,,,,,,,,,(Solver),,
qutip_qutip_v5.0.4,bofin_solvers.py,python,HSolverDL(HEOMSolver),class,,,,Class: HSolverDL(HEOMSolver),qutip,qutip,v5.0.4,,,,,,,HSolverDL,,,,,,,,,(HEOMSolver),,
qutip_qutip_v5.0.4,bofin_solvers.py,python,_GatherHEOMRHS,class,,,,Class: _GatherHEOMRHS,qutip,qutip,v5.0.4,,,,,,,_GatherHEOMRHS,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"heomsolve(
    H, bath, max_depth, state0, tlist, *, e_ops=None, args=None, options=None,
)",function,,,,"Function: heomsolve(
    H, bath, max_depth, state0, tlist, *, e_ops=None, args=None, options=None,
)",qutip,qutip,v5.0.4,,,,heomsolve,"(
    H, bath, max_depth, state0, tlist, *, e_ops=None, args=None, options=None,
)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,"__all__ = [
    ""heomsolve"",
    ""HierarchyADOs"",
    ""HierarchyADOsState"",
    ""HEOMResult"",
    ""HEOMSolver"",
    ""HSolverDL"",
]",constant,"__all__ = [
    ""heomsolve"",
    ""HierarchyADOs"",
    ""HierarchyADOsState"",
    ""HEOMResult"",
    ""HEOMSolver"",
    ""HSolverDL"",
]",__all__,"[
    ""heomsolve"",
    ""HierarchyADOs"",
    ""HierarchyADOsState"",
    ""HEOMResult"",
    ""HEOMSolver"",
    ""HSolverDL"",
]","Constant: __all__ = [
    ""heomsolve"",
    ""HierarchyADOs"",
    ""HierarchyADOsState"",
    ""HEOMResult"",
    ""HEOMSolver"",
    ""HSolverDL"",
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,time from time,import,,,,Import: time from time,qutip,qutip,v5.0.4,from time import time,time,time,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,scipy.sparse,import,,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,,scipy.sparse,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,state_number_enumerate from qutip,import,,,,Import: state_number_enumerate from qutip,qutip,qutip,v5.0.4,from qutip import state_number_enumerate,qutip,state_number_enumerate,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,spsolve from scipy.sparse.linalg,local_import,,,,Import: spsolve from scipy.sparse.linalg,qutip,qutip,v5.0.4,from scipy.sparse.linalg import spsolve,scipy.sparse.linalg,spsolve,,,scipy.sparse.linalg,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,settings from qutip.settings,local_import,,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings,qutip.settings,settings,,,qutip.settings,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,data from qutip.core,local_import,,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,qutip.core,data,,,qutip.core,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,csr from qutip.core.data,local_import,,,,Import: csr from qutip.core.data,qutip,qutip,v5.0.4,from qutip.core.data import csr as _csr,qutip.core.data,csr,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,Qobj from qutip.core,local_import,,,,Import: Qobj from qutip.core,qutip,qutip,v5.0.4,"from qutip.core import Qobj, QobjEvo",qutip.core,Qobj,,,qutip.core,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,QobjEvo from qutip.core,local_import,,,,Import: QobjEvo from qutip.core,qutip,qutip,v5.0.4,"from qutip.core import Qobj, QobjEvo",qutip.core,QobjEvo,,,qutip.core,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,liouvillian from qutip.core.superoperator,local_import,,,,Import: liouvillian from qutip.core.superoperator,qutip,qutip,v5.0.4,"from qutip.core.superoperator import liouvillian, spre, spost",qutip.core.superoperator,liouvillian,,,qutip.core.superoperator,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,spre from qutip.core.superoperator,local_import,,,,Import: spre from qutip.core.superoperator,qutip,qutip,v5.0.4,"from qutip.core.superoperator import liouvillian, spre, spost",qutip.core.superoperator,spre,,,qutip.core.superoperator,,,,,,,,,,,,
qutip_qutip_v5.0.4,bofin_solvers.py,python,spost from qutip.core.superoperator,local_import,,,,Import: spost from qutip.core.superoperator,qutip,qutip,v5.0.4,"from qutip.core.superoperator import liouvillian, spre, spost",qutip.core.superoperator,spost,,,qutip.core.superoperator,,,,,,,,,,,,
,bofin_solvers.py,python,,,,,,File: qutip\solver\heom,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,bofin_solvers.py,python,,,,,,Directory: qutip\solver\heom\bofin_solvers.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,__init__.py,python,"__all__ = [
    ""BathExponent"",
    ""Bath"",
    ""BosonicBath"",
    ""DrudeLorentzBath"",
    ""DrudeLorentzPadeBath"",
    ""UnderDampedBath"",
    ""FermionicBath"",
    ""LorentzianBath"",
    ""LorentzianPadeBath"",
    ""heomsolve"",
    ""HEOMSolver"",
    ""HEOMResult"",
    ""HSolverDL"",
    ""HierarchyADOs"",
    ""HierarchyADOsState"",
]",constant,"__all__ = [
    ""BathExponent"",
    ""Bath"",
    ""BosonicBath"",
    ""DrudeLorentzBath"",
    ""DrudeLorentzPadeBath"",
    ""UnderDampedBath"",
    ""FermionicBath"",
    ""LorentzianBath"",
    ""LorentzianPadeBath"",
    ""heomsolve"",
    ""HEOMSolver"",
    ""HEOMResult"",
    ""HSolverDL"",
    ""HierarchyADOs"",
    ""HierarchyADOsState"",
]",__all__,"[
    ""BathExponent"",
    ""Bath"",
    ""BosonicBath"",
    ""DrudeLorentzBath"",
    ""DrudeLorentzPadeBath"",
    ""UnderDampedBath"",
    ""FermionicBath"",
    ""LorentzianBath"",
    ""LorentzianPadeBath"",
    ""heomsolve"",
    ""HEOMSolver"",
    ""HEOMResult"",
    ""HSolverDL"",
    ""HierarchyADOs"",
    ""HierarchyADOsState"",
]","Constant: __all__ = [
    ""BathExponent"",
    ""Bath"",
    ""BosonicBath"",
    ""DrudeLorentzBath"",
    ""DrudeLorentzPadeBath"",
    ""UnderDampedBath"",
    ""FermionicBath"",
    ""LorentzianBath"",
    ""LorentzianPadeBath"",
    ""heomsolve"",
    ""HEOMSolver"",
    ""HEOMResult"",
    ""HSolverDL"",
    ""HierarchyADOs"",
    ""HierarchyADOsState"",
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: qutip\solver\heom,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: qutip\solver\heom\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,integrator.py,python,Integrator.integrator_options = {},class_field,,,,Class field: Integrator.integrator_options = {},qutip,qutip,v5.0.4,,,,,,,Integrator,,,integrator_options = {},,,,,integrator_options,,{},
qutip_qutip_v5.0.4,integrator.py,python,Integrator._options = None,class_field,,,,Class field: Integrator._options = None,qutip,qutip,v5.0.4,,,,,,,Integrator,,,_options = None,,,,,_options,,,
qutip_qutip_v5.0.4,integrator.py,python,Integrator.support_time_dependant = None,class_field,,,,Class field: Integrator.support_time_dependant = None,qutip,qutip,v5.0.4,,,,,,,Integrator,,,support_time_dependant = None,,,,,support_time_dependant,,,
qutip_qutip_v5.0.4,integrator.py,python,Integrator.supports_blackbox = None,class_field,,,,Class field: Integrator.supports_blackbox = None,qutip,qutip,v5.0.4,,,,,,,Integrator,,,supports_blackbox = None,,,,,supports_blackbox,,,
qutip_qutip_v5.0.4,integrator.py,python,Integrator.name = None,class_field,,,,Class field: Integrator.name = None,qutip,qutip,v5.0.4,,,,,,,Integrator,,,name = None,,,,,name,,,
qutip_qutip_v5.0.4,integrator.py,python,"Integrator.method = """"",class_field,,,,"Class field: Integrator.method = """"",qutip,qutip,v5.0.4,,,,,,,Integrator,,,"method = """"",,,,,method,,"""""",
qutip_qutip_v5.0.4,integrator.py,python,[instance] Integrator.system = system,class_field,,,,Class field: [instance] Integrator.system = system,qutip,qutip,v5.0.4,,,,,,,Integrator,__init__,"(self, system, options)",self.system = system,self.system = system,,,,,,,
qutip_qutip_v5.0.4,integrator.py,python,[instance] Integrator._is_set = False,class_field,,,,Class field: [instance] Integrator._is_set = False,qutip,qutip,v5.0.4,,,,,,,Integrator,__init__,"(self, system, options)",self._is_set = False,self._is_set = False,,,,,,,
qutip_qutip_v5.0.4,integrator.py,python,"[instance] Integrator._back = (np.inf, None)",class_field,,,,"Class field: [instance] Integrator._back = (np.inf, None)",qutip,qutip,v5.0.4,,,,,,,Integrator,__init__,"(self, system, options)","self._back = (np.inf, None)","self._back = (np.inf, None)",,,,,,,
qutip_qutip_v5.0.4,integrator.py,python,[instance] Integrator._options = integrator_options.copy(),class_field,,,,Class field: [instance] Integrator._options = integrator_options.copy(),qutip,qutip,v5.0.4,,,,,,,Integrator,__init__,"(self, system, options)",self._options = self.integrator_options.copy(),self._options = self.integrator_options.copy(),,,,,,,
qutip_qutip_v5.0.4,integrator.py,python,[instance] Integrator.options = options,class_field,,,,Class field: [instance] Integrator.options = options,qutip,qutip,v5.0.4,,,,,,,Integrator,__init__,"(self, system, options)",self.options = options,self.options = options,,,,,,,
qutip_qutip_v5.0.4,integrator.py,python,[instance] Integrator._prepare(),class_field,,,,Class field: [instance] Integrator._prepare(),qutip,qutip,v5.0.4,,,,,,,Integrator,__init__,"(self, system, options)",self._prepare(),self._prepare(),,,,,,,
qutip_qutip_v5.0.4,integrator.py,python,"Integrator.__init__(self, system, options)",class_method,,,,"Class method: Integrator.__init__(self, system, options)",qutip,qutip,v5.0.4,,,,,,,Integrator,__init__,"(self, system, options)",,,,,,,,,
qutip_qutip_v5.0.4,integrator.py,python,Integrator._prepare(self),class_method,,,,Class method: Integrator._prepare(self),qutip,qutip,v5.0.4,,,,,,,Integrator,_prepare,(self),,,,,,,,,
qutip_qutip_v5.0.4,integrator.py,python,"Integrator.set_state(self, t, state0)",class_method,,,,"Class method: Integrator.set_state(self, t, state0)",qutip,qutip,v5.0.4,,,,,,,Integrator,set_state,"(self, t, state0)",,,,,,,,,
qutip_qutip_v5.0.4,integrator.py,python,"Integrator.integrate(self, t, copy=True)",class_method,,,,"Class method: Integrator.integrate(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,Integrator,integrate,"(self, t, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,integrator.py,python,"Integrator.mcstep(self, t, copy=True)",class_method,,,,"Class method: Integrator.mcstep(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,Integrator,mcstep,"(self, t, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,integrator.py,python,"Integrator.get_state(self, copy=True)",class_method,,,,"Class method: Integrator.get_state(self, copy=True)",qutip,qutip,v5.0.4,,,,,,,Integrator,get_state,"(self, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,integrator.py,python,"Integrator.run(self, tlist)",class_method,,,,"Class method: Integrator.run(self, tlist)",qutip,qutip,v5.0.4,,,,,,,Integrator,run,"(self, tlist)",,,,,,,,,
qutip_qutip_v5.0.4,integrator.py,python,"Integrator.reset(self, hard=False)",class_method,,,,"Class method: Integrator.reset(self, hard=False)",qutip,qutip,v5.0.4,,,,,,,Integrator,reset,"(self, hard=False)",,,,,,,,,
qutip_qutip_v5.0.4,integrator.py,python,"Integrator.arguments(self, args)",class_method,,,,"Class method: Integrator.arguments(self, args)",qutip,qutip,v5.0.4,,,,,,,Integrator,arguments,"(self, args)",,,,,,,,,
qutip_qutip_v5.0.4,integrator.py,python,[property] Integrator.options(self),class_method,,,,Class method: [property] Integrator.options(self),qutip,qutip,v5.0.4,,,,,,,Integrator,options,(self),,,,,,,,,property
qutip_qutip_v5.0.4,integrator.py,python,"[options.setter] Integrator.options(self, new_options)",class_method,,,,"Class method: [options.setter] Integrator.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,Integrator,options,"(self, new_options)",,,,,,,,,options.setter
qutip_qutip_v5.0.4,integrator.py,python,IntegratorException(Exception),class,,,,Class: IntegratorException(Exception),qutip,qutip,v5.0.4,,,,,,,IntegratorException,,,,,,,,,(Exception),,
qutip_qutip_v5.0.4,integrator.py,python,Integrator,class,,,,Class: Integrator,qutip,qutip,v5.0.4,,,,,,,Integrator,,,,,,,,,,,
qutip_qutip_v5.0.4,integrator.py,python,"__all__ = ['Integrator', 'IntegratorException']",constant,"__all__ = ['Integrator', 'IntegratorException']",__all__,"['Integrator', 'IntegratorException']","Constant: __all__ = ['Integrator', 'IntegratorException']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,integrator.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
,integrator.py,python,,,,,,File: qutip\solver\integrator,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,integrator.py,python,,,,,,Directory: qutip\solver\integrator\integrator.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,krylov.py,python,"IntegratorKrylov.integrator_options = {
        'atol': 1e-7,
        'nsteps': 100,
        'min_step': 1e-5,
        'max_step': 1e5,
        'krylov_dim': 0,
        'sub_system_tol': 1e-7,
        'always_compute_step': False,
    }",class_field,,,,"Class field: IntegratorKrylov.integrator_options = {
        'atol': 1e-7,
        'nsteps': 100,
        'min_step': 1e-5,
        'max_step': 1e5,
        'krylov_dim': 0,
        'sub_system_tol': 1e-7,
        'always_compute_step': False,
    }",qutip,qutip,v5.0.4,,,,,,,IntegratorKrylov,,,"integrator_options = {
        'atol': 1e-7,
        'nsteps': 100,
        'min_step': 1e-5,
        'max_step': 1e5,
        'krylov_dim': 0,
        'sub_system_tol': 1e-7,
        'always_compute_step': False,
    }",,,,,integrator_options,,"{
        'atol': 1e-7,
        'nsteps': 100,
        'min_step': 1e-5,
        'max_step': 1e5,
        'krylov_dim': 0,
        'sub_system_tol': 1e-7,
        'always_compute_step': False,
    }",
qutip_qutip_v5.0.4,krylov.py,python,IntegratorKrylov.support_time_dependant = False,class_field,,,,Class field: IntegratorKrylov.support_time_dependant = False,qutip,qutip,v5.0.4,,,,,,,IntegratorKrylov,,,support_time_dependant = False,,,,,support_time_dependant,,False,
qutip_qutip_v5.0.4,krylov.py,python,IntegratorKrylov.supports_blackbox = False,class_field,,,,Class field: IntegratorKrylov.supports_blackbox = False,qutip,qutip,v5.0.4,,,,,,,IntegratorKrylov,,,supports_blackbox = False,,,,,supports_blackbox,,False,
qutip_qutip_v5.0.4,krylov.py,python,IntegratorKrylov.method = 'krylov',class_field,,,,Class field: IntegratorKrylov.method = 'krylov',qutip,qutip,v5.0.4,,,,,,,IntegratorKrylov,,,method = 'krylov',,,,,method,,'krylov',
qutip_qutip_v5.0.4,krylov.py,python,IntegratorKrylov._prepare(self),class_method,,,,Class method: IntegratorKrylov._prepare(self),qutip,qutip,v5.0.4,,,,,,,IntegratorKrylov,_prepare,(self),,,,,,,,,
qutip_qutip_v5.0.4,krylov.py,python,"IntegratorKrylov._lanczos_algorithm(self, psi)",class_method,,,,"Class method: IntegratorKrylov._lanczos_algorithm(self, psi)",qutip,qutip,v5.0.4,,,,,,,IntegratorKrylov,_lanczos_algorithm,"(self, psi)",,,,,,,,,
qutip_qutip_v5.0.4,krylov.py,python,"IntegratorKrylov._compute_krylov_set(self, krylov_tridiag, krylov_basis)",class_method,,,,"Class method: IntegratorKrylov._compute_krylov_set(self, krylov_tridiag, krylov_basis)",qutip,qutip,v5.0.4,,,,,,,IntegratorKrylov,_compute_krylov_set,"(self, krylov_tridiag, krylov_basis)",,,,,,,,,
qutip_qutip_v5.0.4,krylov.py,python,"IntegratorKrylov._compute_psi(self, dt, eigenvalues, U, e0)",class_method,,,,"Class method: IntegratorKrylov._compute_psi(self, dt, eigenvalues, U, e0)",qutip,qutip,v5.0.4,,,,,,,IntegratorKrylov,_compute_psi,"(self, dt, eigenvalues, U, e0)",,,,,,,,,
qutip_qutip_v5.0.4,krylov.py,python,"IntegratorKrylov._compute_max_step(self, krylov_tridiag, krylov_basis, krylov_state=None)",class_method,,,,"Class method: IntegratorKrylov._compute_max_step(self, krylov_tridiag, krylov_basis, krylov_state=None)",qutip,qutip,v5.0.4,,,,,,,IntegratorKrylov,_compute_max_step,"(self, krylov_tridiag, krylov_basis, krylov_state=None)",,,,,,,,,
qutip_qutip_v5.0.4,krylov.py,python,"IntegratorKrylov.set_state(self, t, state0)",class_method,,,,"Class method: IntegratorKrylov.set_state(self, t, state0)",qutip,qutip,v5.0.4,,,,,,,IntegratorKrylov,set_state,"(self, t, state0)",,,,,,,,,
qutip_qutip_v5.0.4,krylov.py,python,"IntegratorKrylov.get_state(self, copy=True)",class_method,,,,"Class method: IntegratorKrylov.get_state(self, copy=True)",qutip,qutip,v5.0.4,,,,,,,IntegratorKrylov,get_state,"(self, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,krylov.py,python,"IntegratorKrylov.integrate(self, t, copy=True)",class_method,,,,"Class method: IntegratorKrylov.integrate(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,IntegratorKrylov,integrate,"(self, t, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,krylov.py,python,[property] IntegratorKrylov.options(self),class_method,,,,Class method: [property] IntegratorKrylov.options(self),qutip,qutip,v5.0.4,,,,,,,IntegratorKrylov,options,(self),,,,,,,,,property
qutip_qutip_v5.0.4,krylov.py,python,"[options.setter] IntegratorKrylov.options(self, new_options)",class_method,,,,"Class method: [options.setter] IntegratorKrylov.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,IntegratorKrylov,options,"(self, new_options)",,,,,,,,,options.setter
qutip_qutip_v5.0.4,krylov.py,python,IntegratorKrylov(Integrator),class,,,,Class: IntegratorKrylov(Integrator),qutip,qutip,v5.0.4,,,,,,,IntegratorKrylov,,,,,,,,,(Integrator),,
qutip_qutip_v5.0.4,krylov.py,python,"__all__ = [""IntegratorKrylov""]",constant,"__all__ = [""IntegratorKrylov""]",__all__,"[""IntegratorKrylov""]","Constant: __all__ = [""IntegratorKrylov""]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,krylov.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,krylov.py,python,data from qutip.core,local_import,,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,qutip.core,data,,,qutip.core,,,,,,,,,,,,
qutip_qutip_v5.0.4,krylov.py,python,root_scalar from scipy.optimize,local_import,,,,Import: root_scalar from scipy.optimize,qutip,qutip,v5.0.4,from scipy.optimize import root_scalar,scipy.optimize,root_scalar,,,scipy.optimize,,,,,,,,,,,,
,krylov.py,python,,,,,,File: qutip\solver\integrator,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,krylov.py,python,,,,,,Directory: qutip\solver\integrator\krylov.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qutip_integrator.py,python,"IntegratorVern7.integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 1000,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
        'interpolate': True,
    }",class_field,,,,"Class field: IntegratorVern7.integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 1000,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
        'interpolate': True,
    }",qutip,qutip,v5.0.4,,,,,,,IntegratorVern7,,,"integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 1000,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
        'interpolate': True,
    }",,,,,integrator_options,,"{
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 1000,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
        'interpolate': True,
    }",
qutip_qutip_v5.0.4,qutip_integrator.py,python,IntegratorVern7.support_time_dependant = True,class_field,,,,Class field: IntegratorVern7.support_time_dependant = True,qutip,qutip,v5.0.4,,,,,,,IntegratorVern7,,,support_time_dependant = True,,,,,support_time_dependant,,True,
qutip_qutip_v5.0.4,qutip_integrator.py,python,IntegratorVern7.supports_blackbox = True,class_field,,,,Class field: IntegratorVern7.supports_blackbox = True,qutip,qutip,v5.0.4,,,,,,,IntegratorVern7,,,supports_blackbox = True,,,,,supports_blackbox,,True,
qutip_qutip_v5.0.4,qutip_integrator.py,python,IntegratorVern7.method = 'vern7',class_field,,,,Class field: IntegratorVern7.method = 'vern7',qutip,qutip,v5.0.4,,,,,,,IntegratorVern7,,,method = 'vern7',,,,,method,,'vern7',
qutip_qutip_v5.0.4,qutip_integrator.py,python,"IntegratorVern9.integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 1000,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
        'interpolate': True,
    }",class_field,,,,"Class field: IntegratorVern9.integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 1000,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
        'interpolate': True,
    }",qutip,qutip,v5.0.4,,,,,,,IntegratorVern9,,,"integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 1000,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
        'interpolate': True,
    }",,,,,integrator_options,,"{
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 1000,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
        'interpolate': True,
    }",
qutip_qutip_v5.0.4,qutip_integrator.py,python,IntegratorVern9.method = 'vern9',class_field,,,,Class field: IntegratorVern9.method = 'vern9',qutip,qutip,v5.0.4,,,,,,,IntegratorVern9,,,method = 'vern9',,,,,method,,'vern9',
qutip_qutip_v5.0.4,qutip_integrator.py,python,"IntegratorDiag.integrator_options = {""eigensolver_dtype"": ""dense""}",class_field,,,,"Class field: IntegratorDiag.integrator_options = {""eigensolver_dtype"": ""dense""}",qutip,qutip,v5.0.4,,,,,,,IntegratorDiag,,,"integrator_options = {""eigensolver_dtype"": ""dense""}",,,,,integrator_options,,"{""eigensolver_dtype"": ""dense""}",
qutip_qutip_v5.0.4,qutip_integrator.py,python,IntegratorDiag.support_time_dependant = False,class_field,,,,Class field: IntegratorDiag.support_time_dependant = False,qutip,qutip,v5.0.4,,,,,,,IntegratorDiag,,,support_time_dependant = False,,,,,support_time_dependant,,False,
qutip_qutip_v5.0.4,qutip_integrator.py,python,IntegratorDiag.supports_blackbox = False,class_field,,,,Class field: IntegratorDiag.supports_blackbox = False,qutip,qutip,v5.0.4,,,,,,,IntegratorDiag,,,supports_blackbox = False,,,,,supports_blackbox,,False,
qutip_qutip_v5.0.4,qutip_integrator.py,python,IntegratorDiag.method = 'diag',class_field,,,,Class field: IntegratorDiag.method = 'diag',qutip,qutip,v5.0.4,,,,,,,IntegratorDiag,,,method = 'diag',,,,,method,,'diag',
qutip_qutip_v5.0.4,qutip_integrator.py,python,IntegratorVern7._prepare(self),class_method,,,,Class method: IntegratorVern7._prepare(self),qutip,qutip,v5.0.4,,,,,,,IntegratorVern7,_prepare,(self),,,,,,,,,
qutip_qutip_v5.0.4,qutip_integrator.py,python,"IntegratorVern7.get_state(self, copy=True)",class_method,,,,"Class method: IntegratorVern7.get_state(self, copy=True)",qutip,qutip,v5.0.4,,,,,,,IntegratorVern7,get_state,"(self, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,qutip_integrator.py,python,"IntegratorVern7.set_state(self, t, state)",class_method,,,,"Class method: IntegratorVern7.set_state(self, t, state)",qutip,qutip,v5.0.4,,,,,,,IntegratorVern7,set_state,"(self, t, state)",,,,,,,,,
qutip_qutip_v5.0.4,qutip_integrator.py,python,"IntegratorVern7.integrate(self, t, copy=True)",class_method,,,,"Class method: IntegratorVern7.integrate(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,IntegratorVern7,integrate,"(self, t, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,qutip_integrator.py,python,"IntegratorVern7.mcstep(self, t, copy=True)",class_method,,,,"Class method: IntegratorVern7.mcstep(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,IntegratorVern7,mcstep,"(self, t, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,qutip_integrator.py,python,IntegratorVern7._check_failed_integration(self),class_method,,,,Class method: IntegratorVern7._check_failed_integration(self),qutip,qutip,v5.0.4,,,,,,,IntegratorVern7,_check_failed_integration,(self),,,,,,,,,
qutip_qutip_v5.0.4,qutip_integrator.py,python,[property] IntegratorVern7.options(self),class_method,,,,Class method: [property] IntegratorVern7.options(self),qutip,qutip,v5.0.4,,,,,,,IntegratorVern7,options,(self),,,,,,,,,property
qutip_qutip_v5.0.4,qutip_integrator.py,python,"[options.setter] IntegratorVern7.options(self, new_options)",class_method,,,,"Class method: [options.setter] IntegratorVern7.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,IntegratorVern7,options,"(self, new_options)",,,,,,,,,options.setter
qutip_qutip_v5.0.4,qutip_integrator.py,python,"IntegratorDiag.__init__(self, system, options)",class_method,,,,"Class method: IntegratorDiag.__init__(self, system, options)",qutip,qutip,v5.0.4,,,,,,,IntegratorDiag,__init__,"(self, system, options)",,,,,,,,,
qutip_qutip_v5.0.4,qutip_integrator.py,python,IntegratorDiag._prepare(self),class_method,,,,Class method: IntegratorDiag._prepare(self),qutip,qutip,v5.0.4,,,,,,,IntegratorDiag,_prepare,(self),,,,,,,,,
qutip_qutip_v5.0.4,qutip_integrator.py,python,"IntegratorDiag.integrate(self, t, copy=True)",class_method,,,,"Class method: IntegratorDiag.integrate(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,IntegratorDiag,integrate,"(self, t, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,qutip_integrator.py,python,"IntegratorDiag.mcstep(self, t, copy=True)",class_method,,,,"Class method: IntegratorDiag.mcstep(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,IntegratorDiag,mcstep,"(self, t, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,qutip_integrator.py,python,"IntegratorDiag.get_state(self, copy=True)",class_method,,,,"Class method: IntegratorDiag.get_state(self, copy=True)",qutip,qutip,v5.0.4,,,,,,,IntegratorDiag,get_state,"(self, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,qutip_integrator.py,python,"IntegratorDiag.set_state(self, t, state0)",class_method,,,,"Class method: IntegratorDiag.set_state(self, t, state0)",qutip,qutip,v5.0.4,,,,,,,IntegratorDiag,set_state,"(self, t, state0)",,,,,,,,,
qutip_qutip_v5.0.4,qutip_integrator.py,python,[property] IntegratorDiag.options(self),class_method,,,,Class method: [property] IntegratorDiag.options(self),qutip,qutip,v5.0.4,,,,,,,IntegratorDiag,options,(self),,,,,,,,,property
qutip_qutip_v5.0.4,qutip_integrator.py,python,"[options.setter] IntegratorDiag.options(self, new_options)",class_method,,,,"Class method: [options.setter] IntegratorDiag.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,IntegratorDiag,options,"(self, new_options)",,,,,,,,,options.setter
qutip_qutip_v5.0.4,qutip_integrator.py,python,IntegratorVern7(Integrator),class,,,,Class: IntegratorVern7(Integrator),qutip,qutip,v5.0.4,,,,,,,IntegratorVern7,,,,,,,,,(Integrator),,
qutip_qutip_v5.0.4,qutip_integrator.py,python,IntegratorVern9(IntegratorVern7),class,,,,Class: IntegratorVern9(IntegratorVern7),qutip,qutip,v5.0.4,,,,,,,IntegratorVern9,,,,,,,,,(IntegratorVern7),,
qutip_qutip_v5.0.4,qutip_integrator.py,python,IntegratorDiag(Integrator),class,,,,Class: IntegratorDiag(Integrator),qutip,qutip,v5.0.4,,,,,,,IntegratorDiag,,,,,,,,,(Integrator),,
qutip_qutip_v5.0.4,qutip_integrator.py,python,"__all__ = ['IntegratorVern7', 'IntegratorVern9', 'IntegratorDiag']",constant,"__all__ = ['IntegratorVern7', 'IntegratorVern9', 'IntegratorDiag']",__all__,"['IntegratorVern7', 'IntegratorVern9', 'IntegratorDiag']","Constant: __all__ = ['IntegratorVern7', 'IntegratorVern9', 'IntegratorDiag']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qutip_integrator.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,qutip_integrator.py,python,data from qutip,import,,,,Import: data from qutip,qutip,qutip,v5.0.4,from qutip import data as _data,qutip,data,,,,,,,,,,,,,,,
,qutip_integrator.py,python,,,,,,File: qutip\solver\integrator,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,qutip_integrator.py,python,,,,,,Directory: qutip\solver\integrator\qutip_integrator.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,"IntegratorScipyAdams.integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'order': 12,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
    }",class_field,,,,"Class field: IntegratorScipyAdams.integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'order': 12,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
    }",qutip,qutip,v5.0.4,,,,,,,IntegratorScipyAdams,,,"integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'order': 12,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
    }",,,,,integrator_options,,"{
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'order': 12,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
    }",
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipyAdams.support_time_dependant = True,class_field,,,,Class field: IntegratorScipyAdams.support_time_dependant = True,qutip,qutip,v5.0.4,,,,,,,IntegratorScipyAdams,,,support_time_dependant = True,,,,,support_time_dependant,,True,
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipyAdams.supports_blackbox = True,class_field,,,,Class field: IntegratorScipyAdams.supports_blackbox = True,qutip,qutip,v5.0.4,,,,,,,IntegratorScipyAdams,,,supports_blackbox = True,,,,,supports_blackbox,,True,
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipyAdams.method = 'adams',class_field,,,,Class field: IntegratorScipyAdams.method = 'adams',qutip,qutip,v5.0.4,,,,,,,IntegratorScipyAdams,,,method = 'adams',,,,,method,,'adams',
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipyBDF.method = 'bdf',class_field,,,,Class field: IntegratorScipyBDF.method = 'bdf',qutip,qutip,v5.0.4,,,,,,,IntegratorScipyBDF,,,method = 'bdf',,,,,method,,'bdf',
qutip_qutip_v5.0.4,scipy_integrator.py,python,"IntegratorScipyBDF.integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'order': 5,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
    }",class_field,,,,"Class field: IntegratorScipyBDF.integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'order': 5,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
    }",qutip,qutip,v5.0.4,,,,,,,IntegratorScipyBDF,,,"integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'order': 5,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
    }",,,,,integrator_options,,"{
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'order': 5,
        'first_step': 0,
        'max_step': 0,
        'min_step': 0,
    }",
qutip_qutip_v5.0.4,scipy_integrator.py,python,"IntegratorScipyDop853.integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'first_step': 0,
        'max_step': 0,
        'ifactor': 6.0,
        'dfactor': 0.3,
        'beta': 0.0,
    }",class_field,,,,"Class field: IntegratorScipyDop853.integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'first_step': 0,
        'max_step': 0,
        'ifactor': 6.0,
        'dfactor': 0.3,
        'beta': 0.0,
    }",qutip,qutip,v5.0.4,,,,,,,IntegratorScipyDop853,,,"integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'first_step': 0,
        'max_step': 0,
        'ifactor': 6.0,
        'dfactor': 0.3,
        'beta': 0.0,
    }",,,,,integrator_options,,"{
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'first_step': 0,
        'max_step': 0,
        'ifactor': 6.0,
        'dfactor': 0.3,
        'beta': 0.0,
    }",
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipyDop853.support_time_dependant = True,class_field,,,,Class field: IntegratorScipyDop853.support_time_dependant = True,qutip,qutip,v5.0.4,,,,,,,IntegratorScipyDop853,,,support_time_dependant = True,,,,,support_time_dependant,,True,
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipyDop853.supports_blackbox = True,class_field,,,,Class field: IntegratorScipyDop853.supports_blackbox = True,qutip,qutip,v5.0.4,,,,,,,IntegratorScipyDop853,,,supports_blackbox = True,,,,,supports_blackbox,,True,
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipyDop853.method = 'dop853',class_field,,,,Class field: IntegratorScipyDop853.method = 'dop853',qutip,qutip,v5.0.4,,,,,,,IntegratorScipyDop853,,,method = 'dop853',,,,,method,,'dop853',
qutip_qutip_v5.0.4,scipy_integrator.py,python,"IntegratorScipylsoda.integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'max_order_ns': 12,
        'max_order_s': 5,
        'first_step': 0.0,
        'max_step': 0.0,
        'min_step': 0.0,
    }",class_field,,,,"Class field: IntegratorScipylsoda.integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'max_order_ns': 12,
        'max_order_s': 5,
        'first_step': 0.0,
        'max_step': 0.0,
        'min_step': 0.0,
    }",qutip,qutip,v5.0.4,,,,,,,IntegratorScipylsoda,,,"integrator_options = {
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'max_order_ns': 12,
        'max_order_s': 5,
        'first_step': 0.0,
        'max_step': 0.0,
        'min_step': 0.0,
    }",,,,,integrator_options,,"{
        'atol': 1e-8,
        'rtol': 1e-6,
        'nsteps': 2500,
        'max_order_ns': 12,
        'max_order_s': 5,
        'first_step': 0.0,
        'max_step': 0.0,
        'min_step': 0.0,
    }",
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipylsoda.support_time_dependant = True,class_field,,,,Class field: IntegratorScipylsoda.support_time_dependant = True,qutip,qutip,v5.0.4,,,,,,,IntegratorScipylsoda,,,support_time_dependant = True,,,,,support_time_dependant,,True,
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipylsoda.supports_blackbox = True,class_field,,,,Class field: IntegratorScipylsoda.supports_blackbox = True,qutip,qutip,v5.0.4,,,,,,,IntegratorScipylsoda,,,supports_blackbox = True,,,,,supports_blackbox,,True,
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipylsoda.method = 'lsoda',class_field,,,,Class field: IntegratorScipylsoda.method = 'lsoda',qutip,qutip,v5.0.4,,,,,,,IntegratorScipylsoda,,,method = 'lsoda',,,,,method,,'lsoda',
qutip_qutip_v5.0.4,scipy_integrator.py,python,"_zvode.step(self, *args)",class_method,,,,"Class method: _zvode.step(self, *args)",qutip,qutip,v5.0.4,,,,,,,_zvode,step,"(self, *args)",,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipyAdams._prepare(self),class_method,,,,Class method: IntegratorScipyAdams._prepare(self),qutip,qutip,v5.0.4,,,,,,,IntegratorScipyAdams,_prepare,(self),,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,"IntegratorScipyAdams._mul_np_vec(self, t, vec)",class_method,,,,"Class method: IntegratorScipyAdams._mul_np_vec(self, t, vec)",qutip,qutip,v5.0.4,,,,,,,IntegratorScipyAdams,_mul_np_vec,"(self, t, vec)",,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,"IntegratorScipyAdams.set_state(self, t, state0)",class_method,,,,"Class method: IntegratorScipyAdams.set_state(self, t, state0)",qutip,qutip,v5.0.4,,,,,,,IntegratorScipyAdams,set_state,"(self, t, state0)",,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,"IntegratorScipyAdams.get_state(self, copy=True)",class_method,,,,"Class method: IntegratorScipyAdams.get_state(self, copy=True)",qutip,qutip,v5.0.4,,,,,,,IntegratorScipyAdams,get_state,"(self, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipyAdams._check_handle(self),class_method,,,,Class method: IntegratorScipyAdams._check_handle(self),qutip,qutip,v5.0.4,,,,,,,IntegratorScipyAdams,_check_handle,(self),,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,"IntegratorScipyAdams.integrate(self, t, copy=True)",class_method,,,,"Class method: IntegratorScipyAdams.integrate(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,IntegratorScipyAdams,integrate,"(self, t, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,"IntegratorScipyAdams.mcstep(self, t, copy=True)",class_method,,,,"Class method: IntegratorScipyAdams.mcstep(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,IntegratorScipyAdams,mcstep,"(self, t, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipyAdams._check_failed_integration(self),class_method,,,,Class method: IntegratorScipyAdams._check_failed_integration(self),qutip,qutip,v5.0.4,,,,,,,IntegratorScipyAdams,_check_failed_integration,(self),,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,[property] IntegratorScipyAdams.options(self),class_method,,,,Class method: [property] IntegratorScipyAdams.options(self),qutip,qutip,v5.0.4,,,,,,,IntegratorScipyAdams,options,(self),,,,,,,,,property
qutip_qutip_v5.0.4,scipy_integrator.py,python,"[options.setter] IntegratorScipyAdams.options(self, new_options)",class_method,,,,"Class method: [options.setter] IntegratorScipyAdams.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,IntegratorScipyAdams,options,"(self, new_options)",,,,,,,,,options.setter
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipyDop853._prepare(self),class_method,,,,Class method: IntegratorScipyDop853._prepare(self),qutip,qutip,v5.0.4,,,,,,,IntegratorScipyDop853,_prepare,(self),,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,"IntegratorScipyDop853._mul_np_vec(self, t, vec)",class_method,,,,"Class method: IntegratorScipyDop853._mul_np_vec(self, t, vec)",qutip,qutip,v5.0.4,,,,,,,IntegratorScipyDop853,_mul_np_vec,"(self, t, vec)",,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,"IntegratorScipyDop853.integrate(self, t, copy=True)",class_method,,,,"Class method: IntegratorScipyDop853.integrate(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,IntegratorScipyDop853,integrate,"(self, t, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,"IntegratorScipyDop853.mcstep(self, t, copy=True)",class_method,,,,"Class method: IntegratorScipyDop853.mcstep(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,IntegratorScipyDop853,mcstep,"(self, t, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,"IntegratorScipyDop853.get_state(self, copy=True)",class_method,,,,"Class method: IntegratorScipyDop853.get_state(self, copy=True)",qutip,qutip,v5.0.4,,,,,,,IntegratorScipyDop853,get_state,"(self, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,"IntegratorScipyDop853.set_state(self, t, state0)",class_method,,,,"Class method: IntegratorScipyDop853.set_state(self, t, state0)",qutip,qutip,v5.0.4,,,,,,,IntegratorScipyDop853,set_state,"(self, t, state0)",,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipyDop853._check_failed_integration(self),class_method,,,,Class method: IntegratorScipyDop853._check_failed_integration(self),qutip,qutip,v5.0.4,,,,,,,IntegratorScipyDop853,_check_failed_integration,(self),,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,[property] IntegratorScipyDop853.options(self),class_method,,,,Class method: [property] IntegratorScipyDop853.options(self),qutip,qutip,v5.0.4,,,,,,,IntegratorScipyDop853,options,(self),,,,,,,,,property
qutip_qutip_v5.0.4,scipy_integrator.py,python,"[options.setter] IntegratorScipyDop853.options(self, new_options)",class_method,,,,"Class method: [options.setter] IntegratorScipyDop853.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,IntegratorScipyDop853,options,"(self, new_options)",,,,,,,,,options.setter
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipylsoda._prepare(self),class_method,,,,Class method: IntegratorScipylsoda._prepare(self),qutip,qutip,v5.0.4,,,,,,,IntegratorScipylsoda,_prepare,(self),,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipylsoda._check_handle(self),class_method,,,,Class method: IntegratorScipylsoda._check_handle(self),qutip,qutip,v5.0.4,,,,,,,IntegratorScipylsoda,_check_handle,(self),,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,"IntegratorScipylsoda.integrate(self, t, copy=True)",class_method,,,,"Class method: IntegratorScipylsoda.integrate(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,IntegratorScipylsoda,integrate,"(self, t, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,"IntegratorScipylsoda.set_state(self, t, state0)",class_method,,,,"Class method: IntegratorScipylsoda.set_state(self, t, state0)",qutip,qutip,v5.0.4,,,,,,,IntegratorScipylsoda,set_state,"(self, t, state0)",,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,"IntegratorScipylsoda.mcstep(self, t, copy=True)",class_method,,,,"Class method: IntegratorScipylsoda.mcstep(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,IntegratorScipylsoda,mcstep,"(self, t, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,"IntegratorScipylsoda._one_step(self, t)",class_method,,,,"Class method: IntegratorScipylsoda._one_step(self, t)",qutip,qutip,v5.0.4,,,,,,,IntegratorScipylsoda,_one_step,"(self, t)",,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,"IntegratorScipylsoda._backstep(self, t)",class_method,,,,"Class method: IntegratorScipylsoda._backstep(self, t)",qutip,qutip,v5.0.4,,,,,,,IntegratorScipylsoda,_backstep,"(self, t)",,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipylsoda._check_failed_integration(self),class_method,,,,Class method: IntegratorScipylsoda._check_failed_integration(self),qutip,qutip,v5.0.4,,,,,,,IntegratorScipylsoda,_check_failed_integration,(self),,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,[property] IntegratorScipylsoda.options(self),class_method,,,,Class method: [property] IntegratorScipylsoda.options(self),qutip,qutip,v5.0.4,,,,,,,IntegratorScipylsoda,options,(self),,,,,,,,,property
qutip_qutip_v5.0.4,scipy_integrator.py,python,"[options.setter] IntegratorScipylsoda.options(self, new_options)",class_method,,,,"Class method: [options.setter] IntegratorScipylsoda.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,IntegratorScipylsoda,options,"(self, new_options)",,,,,,,,,options.setter
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipyAdams(Integrator),class,,,,Class: IntegratorScipyAdams(Integrator),qutip,qutip,v5.0.4,,,,,,,IntegratorScipyAdams,,,,,,,,,(Integrator),,
qutip_qutip_v5.0.4,scipy_integrator.py,python,_zvode(zvode),class,,,,Class: _zvode(zvode),qutip,qutip,v5.0.4,,,,,,,_zvode,,,,,,,,,(zvode),,
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipyBDF(IntegratorScipyAdams),class,,,,Class: IntegratorScipyBDF(IntegratorScipyAdams),qutip,qutip,v5.0.4,,,,,,,IntegratorScipyBDF,,,,,,,,,(IntegratorScipyAdams),,
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipyDop853(Integrator),class,,,,Class: IntegratorScipyDop853(Integrator),qutip,qutip,v5.0.4,,,,,,,IntegratorScipyDop853,,,,,,,,,(Integrator),,
qutip_qutip_v5.0.4,scipy_integrator.py,python,IntegratorScipylsoda(IntegratorScipyDop853),class,,,,Class: IntegratorScipylsoda(IntegratorScipyDop853),qutip,qutip,v5.0.4,,,,,,,IntegratorScipylsoda,,,,,,,,,(IntegratorScipyDop853),,
qutip_qutip_v5.0.4,scipy_integrator.py,python,"__all__ = [
    'IntegratorScipyAdams',
    'IntegratorScipyBDF',
    'IntegratorScipyDop853',
    'IntegratorScipylsoda',
]",constant,"__all__ = [
    'IntegratorScipyAdams',
    'IntegratorScipyBDF',
    'IntegratorScipyDop853',
    'IntegratorScipylsoda',
]",__all__,"[
    'IntegratorScipyAdams',
    'IntegratorScipyBDF',
    'IntegratorScipyDop853',
    'IntegratorScipylsoda',
]","Constant: __all__ = [
    'IntegratorScipyAdams',
    'IntegratorScipyBDF',
    'IntegratorScipyDop853',
    'IntegratorScipylsoda',
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,warnings,import,,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,,warnings,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,ode from scipy.integrate,local_import,,,,Import: ode from scipy.integrate,qutip,qutip,v5.0.4,from scipy.integrate import ode,scipy.integrate,ode,,,scipy.integrate,,,,,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,zvode from scipy.integrate._ode,local_import,,,,Import: zvode from scipy.integrate._ode,qutip,qutip,v5.0.4,from scipy.integrate._ode import zvode,scipy.integrate._ode,zvode,,,scipy.integrate._ode,,,,,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,data from qutip.core,local_import,,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,qutip.core,data,,,qutip.core,,,,,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,column_unstack_dense from qutip.core.data.reshape,local_import,,,,Import: column_unstack_dense from qutip.core.data.reshape,qutip,qutip,v5.0.4,"from qutip.core.data.reshape import column_unstack_dense, column_stack_dense",qutip.core.data.reshape,column_unstack_dense,,,qutip.core.data.reshape,,,,,,,,,,,,
qutip_qutip_v5.0.4,scipy_integrator.py,python,column_stack_dense from qutip.core.data.reshape,local_import,,,,Import: column_stack_dense from qutip.core.data.reshape,qutip,qutip,v5.0.4,"from qutip.core.data.reshape import column_unstack_dense, column_stack_dense",qutip.core.data.reshape,column_stack_dense,,,qutip.core.data.reshape,,,,,,,,,,,,
,scipy_integrator.py,python,,,,,,File: qutip\solver\integrator,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,scipy_integrator.py,python,,,,,,Directory: qutip\solver\integrator\scipy_integrator.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner7efficient.py,python,"__all__ = [""vern7_coeff""]",constant,"__all__ = [""vern7_coeff""]",__all__,"[""vern7_coeff""]","Constant: __all__ = [""vern7_coeff""]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner7efficient.py,python,order = 7,constant,order = 7,order,7,Constant: order = 7,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner7efficient.py,python,rk_step = 10,constant,rk_step = 10,rk_step,10,Constant: rk_step = 10,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner7efficient.py,python,rk_extra_step = 16,constant,rk_extra_step = 16,rk_extra_step,16,Constant: rk_extra_step = 16,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner7efficient.py,python,denseout_order = 7,constant,denseout_order = 7,denseout_order,7,Constant: denseout_order = 7,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner7efficient.py,python,"bh = np.zeros(rk_step, dtype=np.float64)",constant,"bh = np.zeros(rk_step, dtype=np.float64)",bh,"np.zeros(rk_step, dtype=np.float64)","Constant: bh = np.zeros(rk_step, dtype=np.float64)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner7efficient.py,python,"a = np.zeros((rk_extra_step, rk_extra_step), dtype=np.float64)",constant,"a = np.zeros((rk_extra_step, rk_extra_step), dtype=np.float64)",a,"np.zeros((rk_extra_step, rk_extra_step), dtype=np.float64)","Constant: a = np.zeros((rk_extra_step, rk_extra_step), dtype=np.float64)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner7efficient.py,python,"b = np.zeros(rk_step, dtype=np.float64)",constant,"b = np.zeros(rk_step, dtype=np.float64)",b,"np.zeros(rk_step, dtype=np.float64)","Constant: b = np.zeros(rk_step, dtype=np.float64)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner7efficient.py,python,"c = np.zeros(rk_extra_step, dtype=np.float64)",constant,"c = np.zeros(rk_extra_step, dtype=np.float64)",c,"np.zeros(rk_extra_step, dtype=np.float64)","Constant: c = np.zeros(rk_extra_step, dtype=np.float64)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner7efficient.py,python,"e = np.zeros(rk_step, dtype=np.float64)",constant,"e = np.zeros(rk_step, dtype=np.float64)",e,"np.zeros(rk_step, dtype=np.float64)","Constant: e = np.zeros(rk_step, dtype=np.float64)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner7efficient.py,python,"bi = np.zeros((rk_extra_step, denseout_order), dtype=np.float64)",constant,"bi = np.zeros((rk_extra_step, denseout_order), dtype=np.float64)",bi,"np.zeros((rk_extra_step, denseout_order), dtype=np.float64)","Constant: bi = np.zeros((rk_extra_step, denseout_order), dtype=np.float64)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner7efficient.py,python,"vern7_coeff = {'order': order, 'a': a, 'b': b, 'c': c, 'e': e, 'bi': bi}",constant,"vern7_coeff = {'order': order, 'a': a, 'b': b, 'c': c, 'e': e, 'bi': bi}",vern7_coeff,"{'order': order, 'a': a, 'b': b, 'c': c, 'e': e, 'bi': bi}","Constant: vern7_coeff = {'order': order, 'a': a, 'b': b, 'c': c, 'e': e, 'bi': bi}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner7efficient.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
,verner7efficient.py,python,,,,,,File: qutip\solver\integrator,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,verner7efficient.py,python,,,,,,Directory: qutip\solver\integrator\verner7efficient.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner9efficient.py,python,"__all__ = [""vern9_coeff""]",constant,"__all__ = [""vern9_coeff""]",__all__,"[""vern9_coeff""]","Constant: __all__ = [""vern9_coeff""]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner9efficient.py,python,order = 9,constant,order = 9,order,9,Constant: order = 9,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner9efficient.py,python,rk_step = 16,constant,rk_step = 16,rk_step,16,Constant: rk_step = 16,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner9efficient.py,python,rk_extra_step = 26,constant,rk_extra_step = 26,rk_extra_step,26,Constant: rk_extra_step = 26,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner9efficient.py,python,denseout_order = 9,constant,denseout_order = 9,denseout_order,9,Constant: denseout_order = 9,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner9efficient.py,python,"bh = np.zeros(rk_step, dtype=np.float64)",constant,"bh = np.zeros(rk_step, dtype=np.float64)",bh,"np.zeros(rk_step, dtype=np.float64)","Constant: bh = np.zeros(rk_step, dtype=np.float64)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner9efficient.py,python,"a = np.zeros((rk_extra_step, rk_extra_step), dtype=np.float64)",constant,"a = np.zeros((rk_extra_step, rk_extra_step), dtype=np.float64)",a,"np.zeros((rk_extra_step, rk_extra_step), dtype=np.float64)","Constant: a = np.zeros((rk_extra_step, rk_extra_step), dtype=np.float64)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner9efficient.py,python,"b = np.zeros(rk_step, dtype=np.float64)",constant,"b = np.zeros(rk_step, dtype=np.float64)",b,"np.zeros(rk_step, dtype=np.float64)","Constant: b = np.zeros(rk_step, dtype=np.float64)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner9efficient.py,python,"c = np.zeros(rk_extra_step, dtype=np.float64)",constant,"c = np.zeros(rk_extra_step, dtype=np.float64)",c,"np.zeros(rk_extra_step, dtype=np.float64)","Constant: c = np.zeros(rk_extra_step, dtype=np.float64)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner9efficient.py,python,"e = np.zeros(rk_step, dtype=np.float64)",constant,"e = np.zeros(rk_step, dtype=np.float64)",e,"np.zeros(rk_step, dtype=np.float64)","Constant: e = np.zeros(rk_step, dtype=np.float64)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner9efficient.py,python,"bi = np.zeros((rk_extra_step, denseout_order), dtype=np.float64)",constant,"bi = np.zeros((rk_extra_step, denseout_order), dtype=np.float64)",bi,"np.zeros((rk_extra_step, denseout_order), dtype=np.float64)","Constant: bi = np.zeros((rk_extra_step, denseout_order), dtype=np.float64)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner9efficient.py,python,"vern9_coeff = {'order': order, 'a': a, 'b': b, 'c': c, 'e': e, 'bi': bi}",constant,"vern9_coeff = {'order': order, 'a': a, 'b': b, 'c': c, 'e': e, 'bi': bi}",vern9_coeff,"{'order': order, 'a': a, 'b': b, 'c': c, 'e': e, 'bi': bi}","Constant: vern9_coeff = {'order': order, 'a': a, 'b': b, 'c': c, 'e': e, 'bi': bi}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,verner9efficient.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
,verner9efficient.py,python,,,,,,File: qutip\solver\integrator,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,verner9efficient.py,python,,,,,,Directory: qutip\solver\integrator\verner9efficient.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: qutip\solver\integrator,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: qutip\solver\integrator\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,transfertensor.py,python,"ttmsolve(dynmaps, state0, times, e_ops=(), num_learning=0, options=None)",function,,,,"Function: ttmsolve(dynmaps, state0, times, e_ops=(), num_learning=0, options=None)",qutip,qutip,v5.0.4,,,,ttmsolve,"(dynmaps, state0, times, e_ops=(), num_learning=0, options=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,transfertensor.py,python,"_generatetensors(dynmaps, threshold)",function,,,,"Function: _generatetensors(dynmaps, threshold)",qutip,qutip,v5.0.4,,,,_generatetensors,"(dynmaps, threshold)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,transfertensor.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,transfertensor.py,python,time,import,,,,Import: time,qutip,qutip,v5.0.4,import time,,time,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,transfertensor.py,python,spre from qutip,import,,,,Import: spre from qutip,qutip,qutip,v5.0.4,"from qutip import spre, vector_to_operator, operator_to_vector, Result",qutip,spre,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,transfertensor.py,python,vector_to_operator from qutip,import,,,,Import: vector_to_operator from qutip,qutip,qutip,v5.0.4,"from qutip import spre, vector_to_operator, operator_to_vector, Result",qutip,vector_to_operator,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,transfertensor.py,python,operator_to_vector from qutip,import,,,,Import: operator_to_vector from qutip,qutip,qutip,v5.0.4,"from qutip import spre, vector_to_operator, operator_to_vector, Result",qutip,operator_to_vector,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,transfertensor.py,python,Result from qutip,import,,,,Import: Result from qutip,qutip,qutip,v5.0.4,"from qutip import spre, vector_to_operator, operator_to_vector, Result",qutip,Result,,,,,,,,,,,,,,,
,transfertensor.py,python,,,,,,File: qutip\solver\nonmarkov,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,transfertensor.py,python,,,,,,Directory: qutip\solver\nonmarkov\transfertensor.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: qutip\solver\nonmarkov,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: qutip\solver\nonmarkov\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,itotaylor.py,python,EulerSODE.stepper = _sode.Euler,class_field,,,,Class field: EulerSODE.stepper = _sode.Euler,qutip,qutip,v5.0.4,,,,,,,EulerSODE,,,stepper = _sode.Euler,,,,,stepper,,_sode.Euler,
qutip_qutip_v5.0.4,itotaylor.py,python,EulerSODE.N_dw = 1,class_field,,,,Class field: EulerSODE.N_dw = 1,qutip,qutip,v5.0.4,,,,,,,EulerSODE,,,N_dw = 1,,,,,N_dw,,1,
qutip_qutip_v5.0.4,itotaylor.py,python,Milstein_SODE.stepper = _sode.Milstein,class_field,,,,Class field: Milstein_SODE.stepper = _sode.Milstein,qutip,qutip,v5.0.4,,,,,,,Milstein_SODE,,,stepper = _sode.Milstein,,,,,stepper,,_sode.Milstein,
qutip_qutip_v5.0.4,itotaylor.py,python,Milstein_SODE.N_dw = 1,class_field,,,,Class field: Milstein_SODE.N_dw = 1,qutip,qutip,v5.0.4,,,,,,,Milstein_SODE,,,N_dw = 1,,,,,N_dw,,1,
qutip_qutip_v5.0.4,itotaylor.py,python,"Taylor1_5_SODE.integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""derr_dt"": 1e-6,
    }",class_field,,,,"Class field: Taylor1_5_SODE.integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""derr_dt"": 1e-6,
    }",qutip,qutip,v5.0.4,,,,,,,Taylor1_5_SODE,,,"integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""derr_dt"": 1e-6,
    }",,,,,integrator_options,,"{
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""derr_dt"": 1e-6,
    }",
qutip_qutip_v5.0.4,itotaylor.py,python,Taylor1_5_SODE.stepper = _sode.Taylor15,class_field,,,,Class field: Taylor1_5_SODE.stepper = _sode.Taylor15,qutip,qutip,v5.0.4,,,,,,,Taylor1_5_SODE,,,stepper = _sode.Taylor15,,,,,stepper,,_sode.Taylor15,
qutip_qutip_v5.0.4,itotaylor.py,python,Taylor1_5_SODE.N_dw = 2,class_field,,,,Class field: Taylor1_5_SODE.N_dw = 2,qutip,qutip,v5.0.4,,,,,,,Taylor1_5_SODE,,,N_dw = 2,,,,,N_dw,,2,
qutip_qutip_v5.0.4,itotaylor.py,python,Explicit1_5_SODE.stepper = _sode.Explicit15,class_field,,,,Class field: Explicit1_5_SODE.stepper = _sode.Explicit15,qutip,qutip,v5.0.4,,,,,,,Explicit1_5_SODE,,,stepper = _sode.Explicit15,,,,,stepper,,_sode.Explicit15,
qutip_qutip_v5.0.4,itotaylor.py,python,Explicit1_5_SODE.N_dw = 2,class_field,,,,Class field: Explicit1_5_SODE.N_dw = 2,qutip,qutip,v5.0.4,,,,,,,Explicit1_5_SODE,,,N_dw = 2,,,,,N_dw,,2,
qutip_qutip_v5.0.4,itotaylor.py,python,Implicit_Milstein_SODE.stepper = _sode.Milstein_imp,class_field,,,,Class field: Implicit_Milstein_SODE.stepper = _sode.Milstein_imp,qutip,qutip,v5.0.4,,,,,,,Implicit_Milstein_SODE,,,stepper = _sode.Milstein_imp,,,,,stepper,,_sode.Milstein_imp,
qutip_qutip_v5.0.4,itotaylor.py,python,Implicit_Milstein_SODE.N_dw = 1,class_field,,,,Class field: Implicit_Milstein_SODE.N_dw = 1,qutip,qutip,v5.0.4,,,,,,,Implicit_Milstein_SODE,,,N_dw = 1,,,,,N_dw,,1,
qutip_qutip_v5.0.4,itotaylor.py,python,"Implicit_Taylor1_5_SODE.integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""solve_method"": None,
        ""solve_options"": {},
        ""deff_dt"": 1e-6
    }",class_field,,,,"Class field: Implicit_Taylor1_5_SODE.integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""solve_method"": None,
        ""solve_options"": {},
        ""deff_dt"": 1e-6
    }",qutip,qutip,v5.0.4,,,,,,,Implicit_Taylor1_5_SODE,,,"integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""solve_method"": None,
        ""solve_options"": {},
        ""deff_dt"": 1e-6
    }",,,,,integrator_options,,"{
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""solve_method"": None,
        ""solve_options"": {},
        ""deff_dt"": 1e-6
    }",
qutip_qutip_v5.0.4,itotaylor.py,python,Implicit_Taylor1_5_SODE.stepper = _sode.Taylor15_imp,class_field,,,,Class field: Implicit_Taylor1_5_SODE.stepper = _sode.Taylor15_imp,qutip,qutip,v5.0.4,,,,,,,Implicit_Taylor1_5_SODE,,,stepper = _sode.Taylor15_imp,,,,,stepper,,_sode.Taylor15_imp,
qutip_qutip_v5.0.4,itotaylor.py,python,Implicit_Taylor1_5_SODE.N_dw = 2,class_field,,,,Class field: Implicit_Taylor1_5_SODE.N_dw = 2,qutip,qutip,v5.0.4,,,,,,,Implicit_Taylor1_5_SODE,,,N_dw = 2,,,,,N_dw,,2,
qutip_qutip_v5.0.4,itotaylor.py,python,[property] Taylor1_5_SODE.options(self),class_method,,,,Class method: [property] Taylor1_5_SODE.options(self),qutip,qutip,v5.0.4,,,,,,,Taylor1_5_SODE,options,(self),,,,,,,,,property
qutip_qutip_v5.0.4,itotaylor.py,python,"[options.setter] Taylor1_5_SODE.options(self, new_options)",class_method,,,,"Class method: [options.setter] Taylor1_5_SODE.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,Taylor1_5_SODE,options,"(self, new_options)",,,,,,,,,options.setter
qutip_qutip_v5.0.4,itotaylor.py,python,[property] Implicit_Taylor1_5_SODE.options(self),class_method,,,,Class method: [property] Implicit_Taylor1_5_SODE.options(self),qutip,qutip,v5.0.4,,,,,,,Implicit_Taylor1_5_SODE,options,(self),,,,,,,,,property
qutip_qutip_v5.0.4,itotaylor.py,python,"[options.setter] Implicit_Taylor1_5_SODE.options(self, new_options)",class_method,,,,"Class method: [options.setter] Implicit_Taylor1_5_SODE.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,Implicit_Taylor1_5_SODE,options,"(self, new_options)",,,,,,,,,options.setter
qutip_qutip_v5.0.4,itotaylor.py,python,EulerSODE(_Explicit_Simple_Integrator),class,,,,Class: EulerSODE(_Explicit_Simple_Integrator),qutip,qutip,v5.0.4,,,,,,,EulerSODE,,,,,,,,,(_Explicit_Simple_Integrator),,
qutip_qutip_v5.0.4,itotaylor.py,python,Milstein_SODE(_Explicit_Simple_Integrator),class,,,,Class: Milstein_SODE(_Explicit_Simple_Integrator),qutip,qutip,v5.0.4,,,,,,,Milstein_SODE,,,,,,,,,(_Explicit_Simple_Integrator),,
qutip_qutip_v5.0.4,itotaylor.py,python,Taylor1_5_SODE(_Explicit_Simple_Integrator),class,,,,Class: Taylor1_5_SODE(_Explicit_Simple_Integrator),qutip,qutip,v5.0.4,,,,,,,Taylor1_5_SODE,,,,,,,,,(_Explicit_Simple_Integrator),,
qutip_qutip_v5.0.4,itotaylor.py,python,Explicit1_5_SODE(_Explicit_Simple_Integrator),class,,,,Class: Explicit1_5_SODE(_Explicit_Simple_Integrator),qutip,qutip,v5.0.4,,,,,,,Explicit1_5_SODE,,,,,,,,,(_Explicit_Simple_Integrator),,
qutip_qutip_v5.0.4,itotaylor.py,python,Implicit_Milstein_SODE(_Implicit_Simple_Integrator),class,,,,Class: Implicit_Milstein_SODE(_Implicit_Simple_Integrator),qutip,qutip,v5.0.4,,,,,,,Implicit_Milstein_SODE,,,,,,,,,(_Implicit_Simple_Integrator),,
qutip_qutip_v5.0.4,itotaylor.py,python,Implicit_Taylor1_5_SODE(_Implicit_Simple_Integrator),class,,,,Class: Implicit_Taylor1_5_SODE(_Implicit_Simple_Integrator),qutip,qutip,v5.0.4,,,,,,,Implicit_Taylor1_5_SODE,,,,,,,,,(_Implicit_Simple_Integrator),,
qutip_qutip_v5.0.4,itotaylor.py,python,"__all__ = [
    ""EulerSODE"", ""Milstein_SODE"", ""Taylor1_5_SODE"", ""Explicit1_5_SODE"",
    ""Implicit_Milstein_SODE"", ""Implicit_Taylor1_5_SODE""
]",constant,"__all__ = [
    ""EulerSODE"", ""Milstein_SODE"", ""Taylor1_5_SODE"", ""Explicit1_5_SODE"",
    ""Implicit_Milstein_SODE"", ""Implicit_Taylor1_5_SODE""
]",__all__,"[
    ""EulerSODE"", ""Milstein_SODE"", ""Taylor1_5_SODE"", ""Explicit1_5_SODE"",
    ""Implicit_Milstein_SODE"", ""Implicit_Taylor1_5_SODE""
]","Constant: __all__ = [
    ""EulerSODE"", ""Milstein_SODE"", ""Taylor1_5_SODE"", ""Explicit1_5_SODE"",
    ""Implicit_Milstein_SODE"", ""Implicit_Taylor1_5_SODE""
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,itotaylor.py,python,,,,,,File: qutip\solver\sode,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,itotaylor.py,python,,,,,,Directory: qutip\solver\sode\itotaylor.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,rouchon.py,python,"RouchonSODE.integrator_options = {
        ""dt"": 0.0001,
        ""tol"": 1e-7,
    }",class_field,,,,"Class field: RouchonSODE.integrator_options = {
        ""dt"": 0.0001,
        ""tol"": 1e-7,
    }",qutip,qutip,v5.0.4,,,,,,,RouchonSODE,,,"integrator_options = {
        ""dt"": 0.0001,
        ""tol"": 1e-7,
    }",,,,,integrator_options,,"{
        ""dt"": 0.0001,
        ""tol"": 1e-7,
    }",
qutip_qutip_v5.0.4,rouchon.py,python,[instance] RouchonSODE._options = integrator_options.copy(),class_field,,,,Class field: [instance] RouchonSODE._options = integrator_options.copy(),qutip,qutip,v5.0.4,,,,,,,RouchonSODE,__init__,"(self, rhs, options)",self._options = self.integrator_options.copy(),self._options = self.integrator_options.copy(),,,,,,,
qutip_qutip_v5.0.4,rouchon.py,python,[instance] RouchonSODE.options = options,class_field,,,,Class field: [instance] RouchonSODE.options = options,qutip,qutip,v5.0.4,,,,,,,RouchonSODE,__init__,"(self, rhs, options)",self.options = options,self.options = options,,,,,,,
qutip_qutip_v5.0.4,rouchon.py,python,[instance] RouchonSODE.rhs = rhs,class_field,,,,Class field: [instance] RouchonSODE.rhs = rhs,qutip,qutip,v5.0.4,,,,,,,RouchonSODE,__init__,"(self, rhs, options)",self.rhs = rhs,self.rhs = rhs,,,,,,,
qutip_qutip_v5.0.4,rouchon.py,python,[instance] RouchonSODE._make_operators(),class_field,,,,Class field: [instance] RouchonSODE._make_operators(),qutip,qutip,v5.0.4,,,,,,,RouchonSODE,__init__,"(self, rhs, options)",self._make_operators(),self._make_operators(),,,,,,,
qutip_qutip_v5.0.4,rouchon.py,python,"RouchonSODE.__init__(self, rhs, options)",class_method,,,,"Class method: RouchonSODE.__init__(self, rhs, options)",qutip,qutip,v5.0.4,,,,,,,RouchonSODE,__init__,"(self, rhs, options)",,,,,,,,,
qutip_qutip_v5.0.4,rouchon.py,python,RouchonSODE._make_operators(self),class_method,,,,Class method: RouchonSODE._make_operators(self),qutip,qutip,v5.0.4,,,,,,,RouchonSODE,_make_operators,(self),,,,,,,,,
qutip_qutip_v5.0.4,rouchon.py,python,"RouchonSODE.set_state(self, t, state0, generator)",class_method,,,,"Class method: RouchonSODE.set_state(self, t, state0, generator)",qutip,qutip,v5.0.4,,,,,,,RouchonSODE,set_state,"(self, t, state0, generator)",,,,,,,,,
qutip_qutip_v5.0.4,rouchon.py,python,"RouchonSODE.integrate(self, t, copy=True)",class_method,,,,"Class method: RouchonSODE.integrate(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,RouchonSODE,integrate,"(self, t, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,rouchon.py,python,"RouchonSODE._step(self, t, state, dt, dW)",class_method,,,,"Class method: RouchonSODE._step(self, t, state, dt, dW)",qutip,qutip,v5.0.4,,,,,,,RouchonSODE,_step,"(self, t, state, dt, dW)",,,,,,,,,
qutip_qutip_v5.0.4,rouchon.py,python,[property] RouchonSODE.options(self),class_method,,,,Class method: [property] RouchonSODE.options(self),qutip,qutip,v5.0.4,,,,,,,RouchonSODE,options,(self),,,,,,,,,property
qutip_qutip_v5.0.4,rouchon.py,python,"[options.setter] RouchonSODE.options(self, new_options)",class_method,,,,"Class method: [options.setter] RouchonSODE.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,RouchonSODE,options,"(self, new_options)",,,,,,,,,options.setter
qutip_qutip_v5.0.4,rouchon.py,python,"RouchonSODE.reset(self, hard=False)",class_method,,,,"Class method: RouchonSODE.reset(self, hard=False)",qutip,qutip,v5.0.4,,,,,,,RouchonSODE,reset,"(self, hard=False)",,,,,,,,,
qutip_qutip_v5.0.4,rouchon.py,python,RouchonSODE(SIntegrator),class,,,,Class: RouchonSODE(SIntegrator),qutip,qutip,v5.0.4,,,,,,,RouchonSODE,,,,,,,,,(SIntegrator),,
qutip_qutip_v5.0.4,rouchon.py,python,"__all__ = [""RouchonSODE""]",constant,"__all__ = [""RouchonSODE""]",__all__,"[""RouchonSODE""]","Constant: __all__ = [""RouchonSODE""]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,rouchon.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,rouchon.py,python,warnings,import,,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,,warnings,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,rouchon.py,python,unstack_columns from qutip,import,,,,Import: unstack_columns from qutip,qutip,qutip,v5.0.4,"from qutip import unstack_columns, stack_columns",qutip,unstack_columns,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,rouchon.py,python,stack_columns from qutip,import,,,,Import: stack_columns from qutip,qutip,qutip,v5.0.4,"from qutip import unstack_columns, stack_columns",qutip,stack_columns,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,rouchon.py,python,data from qutip.core,local_import,,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,qutip.core,data,,,qutip.core,,,,,,,,,,,,
,rouchon.py,python,,,,,,File: qutip\solver\sode,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,rouchon.py,python,,,,,,Directory: qutip\solver\sode\rouchon.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,sode.py,python,SIntegrator._is_set = False,class_field,,,,Class field: SIntegrator._is_set = False,qutip,qutip,v5.0.4,,,,,,,SIntegrator,,,_is_set = False,,,,,_is_set,,False,
qutip_qutip_v5.0.4,sode.py,python,SIntegrator._stepper_options = [],class_field,,,,Class field: SIntegrator._stepper_options = [],qutip,qutip,v5.0.4,,,,,,,SIntegrator,,,_stepper_options = [],,,,,_stepper_options,,[],
qutip_qutip_v5.0.4,sode.py,python,"_Explicit_Simple_Integrator.integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
    }",class_field,,,,"Class field: _Explicit_Simple_Integrator.integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
    }",qutip,qutip,v5.0.4,,,,,,,_Explicit_Simple_Integrator,,,"integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
    }",,,,,integrator_options,,"{
        ""dt"": 0.001,
        ""tol"": 1e-10,
    }",
qutip_qutip_v5.0.4,sode.py,python,_Explicit_Simple_Integrator.stepper = None,class_field,,,,Class field: _Explicit_Simple_Integrator.stepper = None,qutip,qutip,v5.0.4,,,,,,,_Explicit_Simple_Integrator,,,stepper = None,,,,,stepper,,,
qutip_qutip_v5.0.4,sode.py,python,_Explicit_Simple_Integrator.N_dw = 0,class_field,,,,Class field: _Explicit_Simple_Integrator.N_dw = 0,qutip,qutip,v5.0.4,,,,,,,_Explicit_Simple_Integrator,,,N_dw = 0,,,,,N_dw,,0,
qutip_qutip_v5.0.4,sode.py,python,[instance] _Explicit_Simple_Integrator._options = integrator_options.copy(),class_field,,,,Class field: [instance] _Explicit_Simple_Integrator._options = integrator_options.copy(),qutip,qutip,v5.0.4,,,,,,,_Explicit_Simple_Integrator,__init__,"(self, rhs, options)",self._options = self.integrator_options.copy(),self._options = self.integrator_options.copy(),,,,,,,
qutip_qutip_v5.0.4,sode.py,python,[instance] _Explicit_Simple_Integrator.options = options,class_field,,,,Class field: [instance] _Explicit_Simple_Integrator.options = options,qutip,qutip,v5.0.4,,,,,,,_Explicit_Simple_Integrator,__init__,"(self, rhs, options)",self.options = options,self.options = options,,,,,,,
qutip_qutip_v5.0.4,sode.py,python,[instance] _Explicit_Simple_Integrator.rhs = rhs,class_field,,,,Class field: [instance] _Explicit_Simple_Integrator.rhs = rhs,qutip,qutip,v5.0.4,,,,,,,_Explicit_Simple_Integrator,__init__,"(self, rhs, options)",self.rhs = rhs,self.rhs = rhs,,,,,,,
qutip_qutip_v5.0.4,sode.py,python,"_Implicit_Simple_Integrator.integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""solve_method"": None,
        ""solve_options"": {},
    }",class_field,,,,"Class field: _Implicit_Simple_Integrator.integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""solve_method"": None,
        ""solve_options"": {},
    }",qutip,qutip,v5.0.4,,,,,,,_Implicit_Simple_Integrator,,,"integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""solve_method"": None,
        ""solve_options"": {},
    }",,,,,integrator_options,,"{
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""solve_method"": None,
        ""solve_options"": {},
    }",
qutip_qutip_v5.0.4,sode.py,python,"_Implicit_Simple_Integrator._stepper_options = [""solve_method"", ""solve_options""]",class_field,,,,"Class field: _Implicit_Simple_Integrator._stepper_options = [""solve_method"", ""solve_options""]",qutip,qutip,v5.0.4,,,,,,,_Implicit_Simple_Integrator,,,"_stepper_options = [""solve_method"", ""solve_options""]",,,,,_stepper_options,,"[""solve_method"", ""solve_options""]",
qutip_qutip_v5.0.4,sode.py,python,_Implicit_Simple_Integrator.stepper = None,class_field,,,,Class field: _Implicit_Simple_Integrator.stepper = None,qutip,qutip,v5.0.4,,,,,,,_Implicit_Simple_Integrator,,,stepper = None,,,,,stepper,,,
qutip_qutip_v5.0.4,sode.py,python,_Implicit_Simple_Integrator.N_dw = 0,class_field,,,,Class field: _Implicit_Simple_Integrator.N_dw = 0,qutip,qutip,v5.0.4,,,,,,,_Implicit_Simple_Integrator,,,N_dw = 0,,,,,N_dw,,0,
qutip_qutip_v5.0.4,sode.py,python,PlatenSODE.stepper = _sode.Platen,class_field,,,,Class field: PlatenSODE.stepper = _sode.Platen,qutip,qutip,v5.0.4,,,,,,,PlatenSODE,,,stepper = _sode.Platen,,,,,stepper,,_sode.Platen,
qutip_qutip_v5.0.4,sode.py,python,PlatenSODE.N_dw = 1,class_field,,,,Class field: PlatenSODE.N_dw = 1,qutip,qutip,v5.0.4,,,,,,,PlatenSODE,,,N_dw = 1,,,,,N_dw,,1,
qutip_qutip_v5.0.4,sode.py,python,"PredCorr_SODE.integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""alpha"": 0.0,
        ""eta"": 0.5,
    }",class_field,,,,"Class field: PredCorr_SODE.integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""alpha"": 0.0,
        ""eta"": 0.5,
    }",qutip,qutip,v5.0.4,,,,,,,PredCorr_SODE,,,"integrator_options = {
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""alpha"": 0.0,
        ""eta"": 0.5,
    }",,,,,integrator_options,,"{
        ""dt"": 0.001,
        ""tol"": 1e-10,
        ""alpha"": 0.0,
        ""eta"": 0.5,
    }",
qutip_qutip_v5.0.4,sode.py,python,PredCorr_SODE.stepper = _sode.PredCorr,class_field,,,,Class field: PredCorr_SODE.stepper = _sode.PredCorr,qutip,qutip,v5.0.4,,,,,,,PredCorr_SODE,,,stepper = _sode.PredCorr,,,,,stepper,,_sode.PredCorr,
qutip_qutip_v5.0.4,sode.py,python,PredCorr_SODE.N_dw = 1,class_field,,,,Class field: PredCorr_SODE.N_dw = 1,qutip,qutip,v5.0.4,,,,,,,PredCorr_SODE,,,N_dw = 1,,,,,N_dw,,1,
qutip_qutip_v5.0.4,sode.py,python,"PredCorr_SODE._stepper_options = [""alpha"", ""eta""]",class_field,,,,"Class field: PredCorr_SODE._stepper_options = [""alpha"", ""eta""]",qutip,qutip,v5.0.4,,,,,,,PredCorr_SODE,,,"_stepper_options = [""alpha"", ""eta""]",,,,,_stepper_options,,"[""alpha"", ""eta""]",
qutip_qutip_v5.0.4,sode.py,python,"SIntegrator.set_state(self, t, state0, generator)",class_method,,,,"Class method: SIntegrator.set_state(self, t, state0, generator)",qutip,qutip,v5.0.4,,,,,,,SIntegrator,set_state,"(self, t, state0, generator)",,,,,,,,,
qutip_qutip_v5.0.4,sode.py,python,"SIntegrator.get_state(self, copy=True)",class_method,,,,"Class method: SIntegrator.get_state(self, copy=True)",qutip,qutip,v5.0.4,,,,,,,SIntegrator,get_state,"(self, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,sode.py,python,"SIntegrator.integrate(self, t, copy=True)",class_method,,,,"Class method: SIntegrator.integrate(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,SIntegrator,integrate,"(self, t, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,sode.py,python,"SIntegrator.mcstep(self, t, copy=True)",class_method,,,,"Class method: SIntegrator.mcstep(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,SIntegrator,mcstep,"(self, t, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,sode.py,python,"SIntegrator.reset(self, hard=False)",class_method,,,,"Class method: SIntegrator.reset(self, hard=False)",qutip,qutip,v5.0.4,,,,,,,SIntegrator,reset,"(self, hard=False)",,,,,,,,,
qutip_qutip_v5.0.4,sode.py,python,"_Explicit_Simple_Integrator.__init__(self, rhs, options)",class_method,,,,"Class method: _Explicit_Simple_Integrator.__init__(self, rhs, options)",qutip,qutip,v5.0.4,,,,,,,_Explicit_Simple_Integrator,__init__,"(self, rhs, options)",,,,,,,,,
qutip_qutip_v5.0.4,sode.py,python,"_Explicit_Simple_Integrator.integrate(self, t, copy=True)",class_method,,,,"Class method: _Explicit_Simple_Integrator.integrate(self, t, copy=True)",qutip,qutip,v5.0.4,,,,,,,_Explicit_Simple_Integrator,integrate,"(self, t, copy=True)",,,,,,,,,
qutip_qutip_v5.0.4,sode.py,python,[property] _Explicit_Simple_Integrator.options(self),class_method,,,,Class method: [property] _Explicit_Simple_Integrator.options(self),qutip,qutip,v5.0.4,,,,,,,_Explicit_Simple_Integrator,options,(self),,,,,,,,,property
qutip_qutip_v5.0.4,sode.py,python,"[options.setter] _Explicit_Simple_Integrator.options(self, new_options)",class_method,,,,"Class method: [options.setter] _Explicit_Simple_Integrator.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,_Explicit_Simple_Integrator,options,"(self, new_options)",,,,,,,,,options.setter
qutip_qutip_v5.0.4,sode.py,python,[property] _Implicit_Simple_Integrator.options(self),class_method,,,,Class method: [property] _Implicit_Simple_Integrator.options(self),qutip,qutip,v5.0.4,,,,,,,_Implicit_Simple_Integrator,options,(self),,,,,,,,,property
qutip_qutip_v5.0.4,sode.py,python,"[options.setter] _Implicit_Simple_Integrator.options(self, new_options)",class_method,,,,"Class method: [options.setter] _Implicit_Simple_Integrator.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,_Implicit_Simple_Integrator,options,"(self, new_options)",,,,,,,,,options.setter
qutip_qutip_v5.0.4,sode.py,python,[property] PredCorr_SODE.options(self),class_method,,,,Class method: [property] PredCorr_SODE.options(self),qutip,qutip,v5.0.4,,,,,,,PredCorr_SODE,options,(self),,,,,,,,,property
qutip_qutip_v5.0.4,sode.py,python,"[options.setter] PredCorr_SODE.options(self, new_options)",class_method,,,,"Class method: [options.setter] PredCorr_SODE.options(self, new_options)",qutip,qutip,v5.0.4,,,,,,,PredCorr_SODE,options,"(self, new_options)",,,,,,,,,options.setter
qutip_qutip_v5.0.4,sode.py,python,SIntegrator(Integrator),class,,,,Class: SIntegrator(Integrator),qutip,qutip,v5.0.4,,,,,,,SIntegrator,,,,,,,,,(Integrator),,
qutip_qutip_v5.0.4,sode.py,python,_Explicit_Simple_Integrator(SIntegrator),class,,,,Class: _Explicit_Simple_Integrator(SIntegrator),qutip,qutip,v5.0.4,,,,,,,_Explicit_Simple_Integrator,,,,,,,,,(SIntegrator),,
qutip_qutip_v5.0.4,sode.py,python,_Implicit_Simple_Integrator(_Explicit_Simple_Integrator),class,,,,Class: _Implicit_Simple_Integrator(_Explicit_Simple_Integrator),qutip,qutip,v5.0.4,,,,,,,_Implicit_Simple_Integrator,,,,,,,,,(_Explicit_Simple_Integrator),,
qutip_qutip_v5.0.4,sode.py,python,PlatenSODE(_Explicit_Simple_Integrator),class,,,,Class: PlatenSODE(_Explicit_Simple_Integrator),qutip,qutip,v5.0.4,,,,,,,PlatenSODE,,,,,,,,,(_Explicit_Simple_Integrator),,
qutip_qutip_v5.0.4,sode.py,python,PredCorr_SODE(_Explicit_Simple_Integrator),class,,,,Class: PredCorr_SODE(_Explicit_Simple_Integrator),qutip,qutip,v5.0.4,,,,,,,PredCorr_SODE,,,,,,,,,(_Explicit_Simple_Integrator),,
qutip_qutip_v5.0.4,sode.py,python,"__all__ = [""SIntegrator"", ""PlatenSODE"", ""PredCorr_SODE""]",constant,"__all__ = [""SIntegrator"", ""PlatenSODE"", ""PredCorr_SODE""]",__all__,"[""SIntegrator"", ""PlatenSODE"", ""PredCorr_SODE""]","Constant: __all__ = [""SIntegrator"", ""PlatenSODE"", ""PredCorr_SODE""]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,sode.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,sode.py,python,warnings,import,,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,,warnings,,,,,,,,,,,,,,,
,sode.py,python,,,,,,File: qutip\solver\sode,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,sode.py,python,,,,,,Directory: qutip\solver\sode\sode.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,[instance] Wiener.t0 = t0,class_field,,,,Class field: [instance] Wiener.t0 = t0,qutip,qutip,v5.0.4,,,,,,,Wiener,__init__,"(self, t0, dt, generator, shape)",self.t0 = t0,self.t0 = t0,,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,[instance] Wiener.dt = dt,class_field,,,,Class field: [instance] Wiener.dt = dt,qutip,qutip,v5.0.4,,,,,,,Wiener,__init__,"(self, t0, dt, generator, shape)",self.dt = dt,self.dt = dt,,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,[instance] Wiener.generator = generator,class_field,,,,Class field: [instance] Wiener.generator = generator,qutip,qutip,v5.0.4,,,,,,,Wiener,__init__,"(self, t0, dt, generator, shape)",self.generator = generator,self.generator = generator,,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,[instance] Wiener.t_end = t0,class_field,,,,Class field: [instance] Wiener.t_end = t0,qutip,qutip,v5.0.4,,,,,,,Wiener,__init__,"(self, t0, dt, generator, shape)",self.t_end = t0,self.t_end = t0,,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,[instance] Wiener.shape = shape,class_field,,,,Class field: [instance] Wiener.shape = shape,qutip,qutip,v5.0.4,,,,,,,Wiener,__init__,"(self, t0, dt, generator, shape)",self.shape = shape,self.shape = shape,,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,"[instance] Wiener.process = np.zeros((1,) + shape, dtype=float)",class_field,,,,"Class field: [instance] Wiener.process = np.zeros((1,) + shape, dtype=float)",qutip,qutip,v5.0.4,,,,,,,Wiener,__init__,"(self, t0, dt, generator, shape)","self.process = np.zeros((1,) + shape, dtype=float)","self.process = np.zeros((1,) + shape, dtype=float)",,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,[instance] _Noise.T = T,class_field,,,,Class field: [instance] _Noise.T = T,qutip,qutip,v5.0.4,,,,,,,_Noise,__init__,"(self, T, dt, num=1)",self.T = T,self.T = T,,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,[instance] _Noise.dt = dt,class_field,,,,Class field: [instance] _Noise.dt = dt,qutip,qutip,v5.0.4,,,,,,,_Noise,__init__,"(self, T, dt, num=1)",self.dt = dt,self.dt = dt,,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,[instance] _Noise.num = num,class_field,,,,Class field: [instance] _Noise.num = num,qutip,qutip,v5.0.4,,,,,,,_Noise,__init__,"(self, T, dt, num=1)",self.num = num,self.num = num,,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,"[instance] _Noise.noise = np.random.randn(N, num) * dt**0.5",class_field,,,,"Class field: [instance] _Noise.noise = np.random.randn(N, num) * dt**0.5",qutip,qutip,v5.0.4,,,,,,,_Noise,__init__,"(self, T, dt, num=1)","self.noise = np.random.randn(N, num) * dt**0.5","self.noise = np.random.randn(N, num) * dt**0.5",,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,"Wiener.__init__(self, t0, dt, generator, shape)",class_method,,,,"Class method: Wiener.__init__(self, t0, dt, generator, shape)",qutip,qutip,v5.0.4,,,,,,,Wiener,__init__,"(self, t0, dt, generator, shape)",,,,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,"Wiener._extend(self, t)",class_method,,,,"Class method: Wiener._extend(self, t)",qutip,qutip,v5.0.4,,,,,,,Wiener,_extend,"(self, t)",,,,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,"Wiener.dW(self, t, N)",class_method,,,,"Class method: Wiener.dW(self, t, N)",qutip,qutip,v5.0.4,,,,,,,Wiener,dW,"(self, t, N)",,,,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,"Wiener.__call__(self, t)",class_method,,,,"Class method: Wiener.__call__(self, t)",qutip,qutip,v5.0.4,,,,,,,Wiener,__call__,"(self, t)",,,,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,"_Noise.__init__(self, T, dt, num=1)",class_method,,,,"Class method: _Noise.__init__(self, T, dt, num=1)",qutip,qutip,v5.0.4,,,,,,,_Noise,__init__,"(self, T, dt, num=1)",,,,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,"_Noise.dw(self, dt)",class_method,,,,"Class method: _Noise.dw(self, dt)",qutip,qutip,v5.0.4,,,,,,,_Noise,dw,"(self, dt)",,,,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,"_Noise.dz(self, dt)",class_method,,,,"Class method: _Noise.dz(self, dt)",qutip,qutip,v5.0.4,,,,,,,_Noise,dz,"(self, dt)",,,,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,"_Noise.dW(self, dt)",class_method,,,,"Class method: _Noise.dW(self, dt)",qutip,qutip,v5.0.4,,,,,,,_Noise,dW,"(self, dt)",,,,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,Wiener,class,,,,Class: Wiener,qutip,qutip,v5.0.4,,,,,,,Wiener,,,,,,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,_Noise,class,,,,Class: _Noise,qutip,qutip,v5.0.4,,,,,,,_Noise,,,,,,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,"__all__ = [""Wiener""]",constant,"__all__ = [""Wiener""]",__all__,"[""Wiener""]","Constant: __all__ = [""Wiener""]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,_noise.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
,_noise.py,python,,,,,,File: qutip\solver\sode,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,_noise.py,python,,,,,,Directory: qutip\solver\sode\_noise.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: qutip\solver\sode,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: qutip\solver\sode\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conftest.py,python,_add_repeats_if_marked(metafunc),function,,,,Function: _add_repeats_if_marked(metafunc),qutip,qutip,v5.0.4,,,,_add_repeats_if_marked,(metafunc),,,,,,,,,,,,,
qutip_qutip_v5.0.4,conftest.py,python,_skip_cython_tests_if_unavailable(item),function,,,,Function: _skip_cython_tests_if_unavailable(item),qutip,qutip,v5.0.4,,,,_skip_cython_tests_if_unavailable,(item),,,,,,,,,,,,,
qutip_qutip_v5.0.4,conftest.py,python,pytest_runtest_setup(item),function,,,,Function: pytest_runtest_setup(item),qutip,qutip,v5.0.4,,,,pytest_runtest_setup,(item),,,,,,,,,,,,,
qutip_qutip_v5.0.4,conftest.py,python,"_patched_build_err_msg(arrays, err_msg, header='Items are not equal:',
                           verbose=True, names=('ACTUAL', 'DESIRED'),
                           precision=8)",function,,,,"Function: _patched_build_err_msg(arrays, err_msg, header='Items are not equal:',
                           verbose=True, names=('ACTUAL', 'DESIRED'),
                           precision=8)",qutip,qutip,v5.0.4,,,,_patched_build_err_msg,"(arrays, err_msg, header='Items are not equal:',
                           verbose=True, names=('ACTUAL', 'DESIRED'),
                           precision=8)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,conftest.py,python,"_numpy_private_utils_paths = [
    ['_private', 'utils'],    # 1.15.0 <= x
    ['nose_tools', 'utils'],  # 1.14.0 <= x < 1.15.0
    ['utils'],                # 1.14.0 > x
]",constant,"_numpy_private_utils_paths = [
    ['_private', 'utils'],    # 1.15.0 <= x
    ['nose_tools', 'utils'],  # 1.14.0 <= x < 1.15.0
    ['utils'],                # 1.14.0 > x
]",_numpy_private_utils_paths,"[
    ['_private', 'utils'],    # 1.15.0 <= x
    ['nose_tools', 'utils'],  # 1.14.0 <= x < 1.15.0
    ['utils'],                # 1.14.0 > x
]","Constant: _numpy_private_utils_paths = [
    ['_private', 'utils'],    # 1.15.0 <= x
    ['nose_tools', 'utils'],  # 1.14.0 <= x < 1.15.0
    ['utils'],                # 1.14.0 > x
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conftest.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conftest.py,python,functools,import,,,,Import: functools,qutip,qutip,v5.0.4,import functools,,functools,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conftest.py,python,os,import,,,,Import: os,qutip,qutip,v5.0.4,import os,,os,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conftest.py,python,tempfile,import,,,,Import: tempfile,qutip,qutip,v5.0.4,import tempfile,,tempfile,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conftest.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
,conftest.py,python,,,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,conftest.py,python,,,,,,Directory: qutip\tests\conftest.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_animation.py,python,test_result_state(),function,,,,Function: test_result_state(),qutip,qutip,v5.0.4,,,,test_result_state,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_animation.py,python,test_result_state_ValueError(),function,,,,Function: test_result_state_ValueError(),qutip,qutip,v5.0.4,,,,test_result_state_ValueError,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_animation.py,python,test_anim_wigner_sphere(),function,,,,Function: test_anim_wigner_sphere(),qutip,qutip,v5.0.4,,,,test_anim_wigner_sphere,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_animation.py,python,test_anim_hinton(),function,,,,Function: test_anim_hinton(),qutip,qutip,v5.0.4,,,,test_anim_hinton,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_animation.py,python,test_anim_sphereplot(),function,,,,Function: test_anim_sphereplot(),qutip,qutip,v5.0.4,,,,test_anim_sphereplot,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_animation.py,python,test_anim_matrix_histogram(),function,,,,Function: test_anim_matrix_histogram(),qutip,qutip,v5.0.4,,,,test_anim_matrix_histogram,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_animation.py,python,test_anim_fock_distribution(),function,,,,Function: test_anim_fock_distribution(),qutip,qutip,v5.0.4,,,,test_anim_fock_distribution,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_animation.py,python,test_anim_wigner(),function,,,,Function: test_anim_wigner(),qutip,qutip,v5.0.4,,,,test_anim_wigner,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_animation.py,python,test_anim_qubism(),function,,,,Function: test_anim_qubism(),qutip,qutip,v5.0.4,,,,test_anim_qubism,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_animation.py,python,test_anim_schmidt(),function,,,,Function: test_anim_schmidt(),qutip,qutip,v5.0.4,,,,test_anim_schmidt,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_animation.py,python,"mpl = pytest.importorskip(""matplotlib"")",constant,"mpl = pytest.importorskip(""matplotlib"")",mpl,"pytest.importorskip(""matplotlib"")","Constant: mpl = pytest.importorskip(""matplotlib"")",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_animation.py,python,"plt = pytest.importorskip(""matplotlib.pyplot"")",constant,"plt = pytest.importorskip(""matplotlib.pyplot"")",plt,"pytest.importorskip(""matplotlib.pyplot"")","Constant: plt = pytest.importorskip(""matplotlib.pyplot"")",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_animation.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_animation.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_animation.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_animation.py,python,sph_harm from scipy.special,local_import,,,,Import: sph_harm from scipy.special,qutip,qutip,v5.0.4,from scipy.special import sph_harm,scipy.special,sph_harm,,,scipy.special,,,,,,,,,,,,
,test_animation.py,python,,,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_animation.py,python,,,,,,Directory: qutip\tests\test_animation.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_basis_transformation.py,python,real_hermitian(n_levels),function,,,,Function: real_hermitian(n_levels),qutip,qutip,v5.0.4,,,,real_hermitian,(n_levels),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_basis_transformation.py,python,imaginary_hermitian(n_levels),function,,,,Function: imaginary_hermitian(n_levels),qutip,qutip,v5.0.4,,,,imaginary_hermitian,(n_levels),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_basis_transformation.py,python,complex_hermitian(n_levels),function,,,,Function: complex_hermitian(n_levels),qutip,qutip,v5.0.4,,,,complex_hermitian,(n_levels),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_basis_transformation.py,python,rand_bra(n_levels),function,,,,Function: rand_bra(n_levels),qutip,qutip,v5.0.4,,,,rand_bra,(n_levels),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_basis_transformation.py,python,test_eigenbasis_transformation_makes_diagonal_operator(),function,,,,Function: test_eigenbasis_transformation_makes_diagonal_operator(),qutip,qutip,v5.0.4,,,,test_eigenbasis_transformation_makes_diagonal_operator,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_basis_transformation.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_basis_transformation.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_basis_transformation.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
,test_basis_transformation.py,python,,,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_basis_transformation.py,python,,,,,,Directory: qutip\tests\test_basis_transformation.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bloch.py,python,RefBloch.render(self),class_method,,,,Class method: RefBloch.render(self),qutip,qutip,v5.0.4,,,,,,,RefBloch,render,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bloch.py,python,RefBloch.render_back(self),class_method,,,,Class method: RefBloch.render_back(self),qutip,qutip,v5.0.4,,,,,,,RefBloch,render_back,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bloch.py,python,RefBloch.render_front(self),class_method,,,,Class method: RefBloch.render_front(self),qutip,qutip,v5.0.4,,,,,,,RefBloch,render_front,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bloch.py,python,"TestBloch.plot_arc_test(self, fig, *args, **kw)",class_method,,,,"Class method: TestBloch.plot_arc_test(self, fig, *args, **kw)",qutip,qutip,v5.0.4,,,,,,,TestBloch,plot_arc_test,"(self, fig, *args, **kw)",,,,,,,,,
qutip_qutip_v5.0.4,test_bloch.py,python,"TestBloch.plot_arc_ref(self, fig, start, end, **kw)",class_method,,,,"Class method: TestBloch.plot_arc_ref(self, fig, start, end, **kw)",qutip,qutip,v5.0.4,,,,,,,TestBloch,plot_arc_ref,"(self, fig, start, end, **kw)",,,,,,,,,
qutip_qutip_v5.0.4,test_bloch.py,python,"[pytest.mark.parametrize([
        ""start_test"", ""start_ref"", ""end_test"", ""end_ref"", ""kwargs"",
    ], [
        pytest.param(
            (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), {}, id=""arrays""),
        pytest.param(
            (0.1, 0, 0), (0.1, 0, 0), (0, 0.1, 0), (0, 0.1, 0), {},
            id=""small-radius""),
        pytest.param(
            (1e-5, 0, 0), (1e-5, 0, 0), (0, 1e-5, 0), (0, 1e-5, 0), {},
            id=""tiny-radius""),
        pytest.param(
            (1.2, 0, 0), (1.2, 0, 0), (0, 1.2, 0), (0, 1.2, 0), {},
            id=""large-radius""),
        pytest.param(
            (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0),
            {""fmt"": ""r"", ""linestyle"": ""-""}, id=""fmt-and-kwargs"",
        ),
        pytest.param(
            ket(""0""), (0, 0, 1),
            (ket(""0"") + ket(""1"")).unit(), (1, 0, 0),
            {}, id=""kets"",
        ),
        pytest.param(
            ket2dm(ket(""0"")), (0, 0, 1),
            ket2dm(ket(""0"") + ket(""1"")).unit(), (1, 0, 0),
            {}, id=""dms"",
        ),
        pytest.param(
            ket2dm(ket(""0"")) * 0.5, (0, 0, 0.5),
            ket2dm(ket(""0"") + ket(""1"")).unit() * 0.5, (0.5, 0, 0),
            {}, id=""non-unit-dms"",
        ),
    ])] TestBloch.test_arc(
        self, start_test, start_ref, end_test, end_ref, kwargs,
        fig_test, fig_ref,
    )",class_method,,,,"Class method: [pytest.mark.parametrize([
        ""start_test"", ""start_ref"", ""end_test"", ""end_ref"", ""kwargs"",
    ], [
        pytest.param(
            (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), {}, id=""arrays""),
        pytest.param(
            (0.1, 0, 0), (0.1, 0, 0), (0, 0.1, 0), (0, 0.1, 0), {},
            id=""small-radius""),
        pytest.param(
            (1e-5, 0, 0), (1e-5, 0, 0), (0, 1e-5, 0), (0, 1e-5, 0), {},
            id=""tiny-radius""),
        pytest.param(
            (1.2, 0, 0), (1.2, 0, 0), (0, 1.2, 0), (0, 1.2, 0), {},
            id=""large-radius""),
        pytest.param(
            (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0),
            {""fmt"": ""r"", ""linestyle"": ""-""}, id=""fmt-and-kwargs"",
        ),
        pytest.param(
            ket(""0""), (0, 0, 1),
            (ket(""0"") + ket(""1"")).unit(), (1, 0, 0),
            {}, id=""kets"",
        ),
        pytest.param(
            ket2dm(ket(""0"")), (0, 0, 1),
            ket2dm(ket(""0"") + ket(""1"")).unit(), (1, 0, 0),
            {}, id=""dms"",
        ),
        pytest.param(
            ket2dm(ket(""0"")) * 0.5, (0, 0, 0.5),
            ket2dm(ket(""0"") + ket(""1"")).unit() * 0.5, (0.5, 0, 0),
            {}, id=""non-unit-dms"",
        ),
    ])] TestBloch.test_arc(
        self, start_test, start_ref, end_test, end_ref, kwargs,
        fig_test, fig_ref,
    )",qutip,qutip,v5.0.4,,,,,,,TestBloch,test_arc,"(
        self, start_test, start_ref, end_test, end_ref, kwargs,
        fig_test, fig_ref,
    )",,,,,,,,,"pytest.mark.parametrize([
        ""start_test"", ""start_ref"", ""end_test"", ""end_ref"", ""kwargs"",
    ], [
        pytest.param(
            (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), {}, id=""arrays""),
        pytest.param(
            (0.1, 0, 0), (0.1, 0, 0), (0, 0.1, 0), (0, 0.1, 0), {},
            id=""small-radius""),
        pytest.param(
            (1e-5, 0, 0), (1e-5, 0, 0), (0, 1e-5, 0), (0, 1e-5, 0), {},
            id=""tiny-radius""),
        pytest.param(
            (1.2, 0, 0), (1.2, 0, 0), (0, 1.2, 0), (0, 1.2, 0), {},
            id=""large-radius""),
        pytest.param(
            (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0),
            {""fmt"": ""r"", ""linestyle"": ""-""}, id=""fmt-and-kwargs"",
        ),
        pytest.param(
            ket(""0""), (0, 0, 1),
            (ket(""0"") + ket(""1"")).unit(), (1, 0, 0),
            {}, id=""kets"",
        ),
        pytest.param(
            ket2dm(ket(""0"")), (0, 0, 1),
            ket2dm(ket(""0"") + ket(""1"")).unit(), (1, 0, 0),
            {}, id=""dms"",
        ),
        pytest.param(
            ket2dm(ket(""0"")) * 0.5, (0, 0, 0.5),
            ket2dm(ket(""0"") + ket(""1"")).unit() * 0.5, (0.5, 0, 0),
            {}, id=""non-unit-dms"",
        ),
    ])"
qutip_qutip_v5.0.4,test_bloch.py,python,"[check_pngs_equal] TestBloch.test_arc(
        self, start_test, start_ref, end_test, end_ref, kwargs,
        fig_test, fig_ref,
    )",class_method,,,,"Class method: [check_pngs_equal] TestBloch.test_arc(
        self, start_test, start_ref, end_test, end_ref, kwargs,
        fig_test, fig_ref,
    )",qutip,qutip,v5.0.4,,,,,,,TestBloch,test_arc,"(
        self, start_test, start_ref, end_test, end_ref, kwargs,
        fig_test, fig_ref,
    )",,,,,,,,,check_pngs_equal
qutip_qutip_v5.0.4,test_bloch.py,python,"[pytest.mark.parametrize([
        ""start"", ""end"", ""err_msg"",
    ], [
        pytest.param(
            (0, 0, 0), (0, 1, 0),
            ""Polar and azimuthal angles undefined at origin."",
            id=""start-origin"",
        ),
        pytest.param(
            (1, 0, 0), (0, 0, 0),
            ""Polar and azimuthal angles undefined at origin."",
            id=""end-origin"",
        ),
        pytest.param(
            (0.9, 0, 0), (0, 1, 0), ""Points not on the same sphere."",
            id=""different-spheres"",
        ),
        pytest.param(
            (1, 0, 0), (1, 0, 0),
            ""Start and end represent the same point. No arc can be formed."",
            id=""same-points"",
        ),
        pytest.param(
            (1, 0, 0), (-1, 0, 0),
            ""Start and end are diagonally opposite, no unique arc is""
            "" possible."",
            id=""opposite-points"",
        ),
    ])] TestBloch.test_arc_errors(self, start, end, err_msg)",class_method,,,,"Class method: [pytest.mark.parametrize([
        ""start"", ""end"", ""err_msg"",
    ], [
        pytest.param(
            (0, 0, 0), (0, 1, 0),
            ""Polar and azimuthal angles undefined at origin."",
            id=""start-origin"",
        ),
        pytest.param(
            (1, 0, 0), (0, 0, 0),
            ""Polar and azimuthal angles undefined at origin."",
            id=""end-origin"",
        ),
        pytest.param(
            (0.9, 0, 0), (0, 1, 0), ""Points not on the same sphere."",
            id=""different-spheres"",
        ),
        pytest.param(
            (1, 0, 0), (1, 0, 0),
            ""Start and end represent the same point. No arc can be formed."",
            id=""same-points"",
        ),
        pytest.param(
            (1, 0, 0), (-1, 0, 0),
            ""Start and end are diagonally opposite, no unique arc is""
            "" possible."",
            id=""opposite-points"",
        ),
    ])] TestBloch.test_arc_errors(self, start, end, err_msg)",qutip,qutip,v5.0.4,,,,,,,TestBloch,test_arc_errors,"(self, start, end, err_msg)",,,,,,,,,"pytest.mark.parametrize([
        ""start"", ""end"", ""err_msg"",
    ], [
        pytest.param(
            (0, 0, 0), (0, 1, 0),
            ""Polar and azimuthal angles undefined at origin."",
            id=""start-origin"",
        ),
        pytest.param(
            (1, 0, 0), (0, 0, 0),
            ""Polar and azimuthal angles undefined at origin."",
            id=""end-origin"",
        ),
        pytest.param(
            (0.9, 0, 0), (0, 1, 0), ""Points not on the same sphere."",
            id=""different-spheres"",
        ),
        pytest.param(
            (1, 0, 0), (1, 0, 0),
            ""Start and end represent the same point. No arc can be formed."",
            id=""same-points"",
        ),
        pytest.param(
            (1, 0, 0), (-1, 0, 0),
            ""Start and end are diagonally opposite, no unique arc is""
            "" possible."",
            id=""opposite-points"",
        ),
    ])"
qutip_qutip_v5.0.4,test_bloch.py,python,"TestBloch.plot_line_test(self, fig, *args, **kw)",class_method,,,,"Class method: TestBloch.plot_line_test(self, fig, *args, **kw)",qutip,qutip,v5.0.4,,,,,,,TestBloch,plot_line_test,"(self, fig, *args, **kw)",,,,,,,,,
qutip_qutip_v5.0.4,test_bloch.py,python,"TestBloch.plot_line_ref(self, fig, start, end, **kw)",class_method,,,,"Class method: TestBloch.plot_line_ref(self, fig, start, end, **kw)",qutip,qutip,v5.0.4,,,,,,,TestBloch,plot_line_ref,"(self, fig, start, end, **kw)",,,,,,,,,
qutip_qutip_v5.0.4,test_bloch.py,python,"[pytest.mark.parametrize([
        ""start_test"", ""start_ref"", ""end_test"", ""end_ref"", ""kwargs"",
    ], [
        pytest.param(
            (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), {}, id=""arrays""),
        pytest.param(
            (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0),
            {""fmt"": ""r"", ""linestyle"": ""-""}, id=""fmt-and-kwargs"",
        ),
        pytest.param(
            ket(""0""), (0, 0, 1),
            (ket(""0"") + ket(""1"")).unit(), (1, 0, 0),
            {}, id=""kets"",
        ),
        pytest.param(
            ket2dm(ket(""0"")), (0, 0, 1),
            ket2dm(ket(""0"") + ket(""1"")).unit(), (1, 0, 0),
            {}, id=""dms"",
        ),
        pytest.param(
            ket2dm(ket(""0"")) * 0.5, (0, 0, 0.5),
            ket2dm(ket(""0"") + ket(""1"")).unit() * 0.5, (0.5, 0, 0),
            {}, id=""non-unit-dms"",
        ),
    ])] TestBloch.test_line(
        self, start_test, start_ref, end_test, end_ref, kwargs,
        fig_test, fig_ref,
    )",class_method,,,,"Class method: [pytest.mark.parametrize([
        ""start_test"", ""start_ref"", ""end_test"", ""end_ref"", ""kwargs"",
    ], [
        pytest.param(
            (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), {}, id=""arrays""),
        pytest.param(
            (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0),
            {""fmt"": ""r"", ""linestyle"": ""-""}, id=""fmt-and-kwargs"",
        ),
        pytest.param(
            ket(""0""), (0, 0, 1),
            (ket(""0"") + ket(""1"")).unit(), (1, 0, 0),
            {}, id=""kets"",
        ),
        pytest.param(
            ket2dm(ket(""0"")), (0, 0, 1),
            ket2dm(ket(""0"") + ket(""1"")).unit(), (1, 0, 0),
            {}, id=""dms"",
        ),
        pytest.param(
            ket2dm(ket(""0"")) * 0.5, (0, 0, 0.5),
            ket2dm(ket(""0"") + ket(""1"")).unit() * 0.5, (0.5, 0, 0),
            {}, id=""non-unit-dms"",
        ),
    ])] TestBloch.test_line(
        self, start_test, start_ref, end_test, end_ref, kwargs,
        fig_test, fig_ref,
    )",qutip,qutip,v5.0.4,,,,,,,TestBloch,test_line,"(
        self, start_test, start_ref, end_test, end_ref, kwargs,
        fig_test, fig_ref,
    )",,,,,,,,,"pytest.mark.parametrize([
        ""start_test"", ""start_ref"", ""end_test"", ""end_ref"", ""kwargs"",
    ], [
        pytest.param(
            (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), {}, id=""arrays""),
        pytest.param(
            (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0),
            {""fmt"": ""r"", ""linestyle"": ""-""}, id=""fmt-and-kwargs"",
        ),
        pytest.param(
            ket(""0""), (0, 0, 1),
            (ket(""0"") + ket(""1"")).unit(), (1, 0, 0),
            {}, id=""kets"",
        ),
        pytest.param(
            ket2dm(ket(""0"")), (0, 0, 1),
            ket2dm(ket(""0"") + ket(""1"")).unit(), (1, 0, 0),
            {}, id=""dms"",
        ),
        pytest.param(
            ket2dm(ket(""0"")) * 0.5, (0, 0, 0.5),
            ket2dm(ket(""0"") + ket(""1"")).unit() * 0.5, (0.5, 0, 0),
            {}, id=""non-unit-dms"",
        ),
    ])"
qutip_qutip_v5.0.4,test_bloch.py,python,"[check_pngs_equal] TestBloch.test_line(
        self, start_test, start_ref, end_test, end_ref, kwargs,
        fig_test, fig_ref,
    )",class_method,,,,"Class method: [check_pngs_equal] TestBloch.test_line(
        self, start_test, start_ref, end_test, end_ref, kwargs,
        fig_test, fig_ref,
    )",qutip,qutip,v5.0.4,,,,,,,TestBloch,test_line,"(
        self, start_test, start_ref, end_test, end_ref, kwargs,
        fig_test, fig_ref,
    )",,,,,,,,,check_pngs_equal
qutip_qutip_v5.0.4,test_bloch.py,python,"TestBloch.plot_point_test(self, fig, point_kws)",class_method,,,,"Class method: TestBloch.plot_point_test(self, fig, point_kws)",qutip,qutip,v5.0.4,,,,,,,TestBloch,plot_point_test,"(self, fig, point_kws)",,,,,,,,,
qutip_qutip_v5.0.4,test_bloch.py,python,"TestBloch.plot_point_ref(self, fig, point_kws)",class_method,,,,"Class method: TestBloch.plot_point_ref(self, fig, point_kws)",qutip,qutip,v5.0.4,,,,,,,TestBloch,plot_point_ref,"(self, fig, point_kws)",,,,,,,,,
qutip_qutip_v5.0.4,test_bloch.py,python,"[pytest.mark.parametrize(""meth"", ["""", ""s"", ""l"", ""m""], ids=[""default"",
                                                               ""scatter"",
                                                               ""line"",
                                                               ""multicolored""])] TestBloch.test_point(self, point_kws, meth, fig_test, fig_ref)",class_method,,,,"Class method: [pytest.mark.parametrize(""meth"", ["""", ""s"", ""l"", ""m""], ids=[""default"",
                                                               ""scatter"",
                                                               ""line"",
                                                               ""multicolored""])] TestBloch.test_point(self, point_kws, meth, fig_test, fig_ref)",qutip,qutip,v5.0.4,,,,,,,TestBloch,test_point,"(self, point_kws, meth, fig_test, fig_ref)",,,,,,,,,"pytest.mark.parametrize(""meth"", ["""", ""s"", ""l"", ""m""], ids=[""default"",
                                                               ""scatter"",
                                                               ""line"",
                                                               ""multicolored""])"
qutip_qutip_v5.0.4,test_bloch.py,python,"[pytest.mark.parametrize([
        ""point_kws""
    ], [
        pytest.param(
            dict(points=np.array([
                [
                    np.cos(np.pi / 4) * np.cos(t),
                    np.sin(np.pi / 4) * np.cos(t),
                    np.sin(t),
                ]
                for t in np.linspace(0, 2 * np.pi, 20)
            ]).T, alpha=0.5), id=""circle-of-points""),
        pytest.param(
            dict(points=(0, 0, 1), alpha=1), id=""alpha-opaque""),
        pytest.param(
            dict(points=(0, 0, 1), alpha=0.3), id=""alpha-transparent""),
        pytest.param(
            dict(points=(0, 0, 1), alpha=0), id=""alpha-invisible""),
        pytest.param(
            dict(points=(0, 0, 1)), id=""alpha-default""),
        pytest.param(
            dict(points=[(0, 0), (0, 1), (1, 0)], colors='g'),
            id=""color-green""),
        pytest.param([
            dict(points=[(0, 0), (0, 1), (1, 0)], alpha=1.0),
            dict(points=[(1, 1), (0, 1), (1, 0)], alpha=0.5),
        ], id=""alpha-multiple-point-sets""),
        pytest.param([
            dict(points=[(0), (0), (1)], alpha=1.0),
            dict(points=[(0), (1), (0)], alpha=1.0),
            dict(points=[(1), (0), (0)], alpha=1.0),
            dict(points=[(1), (1), (1)], alpha=1.0),
        ], id=""alpha-multiple-point-sets-all_sizes_markers""),
    ])] TestBloch.test_point(self, point_kws, meth, fig_test, fig_ref)",class_method,,,,"Class method: [pytest.mark.parametrize([
        ""point_kws""
    ], [
        pytest.param(
            dict(points=np.array([
                [
                    np.cos(np.pi / 4) * np.cos(t),
                    np.sin(np.pi / 4) * np.cos(t),
                    np.sin(t),
                ]
                for t in np.linspace(0, 2 * np.pi, 20)
            ]).T, alpha=0.5), id=""circle-of-points""),
        pytest.param(
            dict(points=(0, 0, 1), alpha=1), id=""alpha-opaque""),
        pytest.param(
            dict(points=(0, 0, 1), alpha=0.3), id=""alpha-transparent""),
        pytest.param(
            dict(points=(0, 0, 1), alpha=0), id=""alpha-invisible""),
        pytest.param(
            dict(points=(0, 0, 1)), id=""alpha-default""),
        pytest.param(
            dict(points=[(0, 0), (0, 1), (1, 0)], colors='g'),
            id=""color-green""),
        pytest.param([
            dict(points=[(0, 0), (0, 1), (1, 0)], alpha=1.0),
            dict(points=[(1, 1), (0, 1), (1, 0)], alpha=0.5),
        ], id=""alpha-multiple-point-sets""),
        pytest.param([
            dict(points=[(0), (0), (1)], alpha=1.0),
            dict(points=[(0), (1), (0)], alpha=1.0),
            dict(points=[(1), (0), (0)], alpha=1.0),
            dict(points=[(1), (1), (1)], alpha=1.0),
        ], id=""alpha-multiple-point-sets-all_sizes_markers""),
    ])] TestBloch.test_point(self, point_kws, meth, fig_test, fig_ref)",qutip,qutip,v5.0.4,,,,,,,TestBloch,test_point,"(self, point_kws, meth, fig_test, fig_ref)",,,,,,,,,"pytest.mark.parametrize([
        ""point_kws""
    ], [
        pytest.param(
            dict(points=np.array([
                [
                    np.cos(np.pi / 4) * np.cos(t),
                    np.sin(np.pi / 4) * np.cos(t),
                    np.sin(t),
                ]
                for t in np.linspace(0, 2 * np.pi, 20)
            ]).T, alpha=0.5), id=""circle-of-points""),
        pytest.param(
            dict(points=(0, 0, 1), alpha=1), id=""alpha-opaque""),
        pytest.param(
            dict(points=(0, 0, 1), alpha=0.3), id=""alpha-transparent""),
        pytest.param(
            dict(points=(0, 0, 1), alpha=0), id=""alpha-invisible""),
        pytest.param(
            dict(points=(0, 0, 1)), id=""alpha-default""),
        pytest.param(
            dict(points=[(0, 0), (0, 1), (1, 0)], colors='g'),
            id=""color-green""),
        pytest.param([
            dict(points=[(0, 0), (0, 1), (1, 0)], alpha=1.0),
            dict(points=[(1, 1), (0, 1), (1, 0)], alpha=0.5),
        ], id=""alpha-multiple-point-sets""),
        pytest.param([
            dict(points=[(0), (0), (1)], alpha=1.0),
            dict(points=[(0), (1), (0)], alpha=1.0),
            dict(points=[(1), (0), (0)], alpha=1.0),
            dict(points=[(1), (1), (1)], alpha=1.0),
        ], id=""alpha-multiple-point-sets-all_sizes_markers""),
    ])"
qutip_qutip_v5.0.4,test_bloch.py,python,"[check_pngs_equal] TestBloch.test_point(self, point_kws, meth, fig_test, fig_ref)",class_method,,,,"Class method: [check_pngs_equal] TestBloch.test_point(self, point_kws, meth, fig_test, fig_ref)",qutip,qutip,v5.0.4,,,,,,,TestBloch,test_point,"(self, point_kws, meth, fig_test, fig_ref)",,,,,,,,,check_pngs_equal
qutip_qutip_v5.0.4,test_bloch.py,python,TestBloch.test_point_errors_meth(self),class_method,,,,Class method: TestBloch.test_point_errors_meth(self),qutip,qutip,v5.0.4,,,,,,,TestBloch,test_point_errors_meth,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bloch.py,python,"[pytest.mark.parametrize(""points"",
                             [(0, 1, 0, 1), (0, 1), [0, 1], np.array((0, 1)),
                              np.arange(12).reshape((3, 2, 2))],
                             ids=[""long_tuple"", ""short_tuple"", ""short_list"",
                                  ""short_numpy"", ""wrong_shape_numpy""]
                             )] TestBloch.test_point_errors_wrong_points(self, points)",class_method,,,,"Class method: [pytest.mark.parametrize(""points"",
                             [(0, 1, 0, 1), (0, 1), [0, 1], np.array((0, 1)),
                              np.arange(12).reshape((3, 2, 2))],
                             ids=[""long_tuple"", ""short_tuple"", ""short_list"",
                                  ""short_numpy"", ""wrong_shape_numpy""]
                             )] TestBloch.test_point_errors_wrong_points(self, points)",qutip,qutip,v5.0.4,,,,,,,TestBloch,test_point_errors_wrong_points,"(self, points)",,,,,,,,,"pytest.mark.parametrize(""points"",
                             [(0, 1, 0, 1), (0, 1), [0, 1], np.array((0, 1)),
                              np.arange(12).reshape((3, 2, 2))],
                             ids=[""long_tuple"", ""short_tuple"", ""short_list"",
                                  ""short_numpy"", ""wrong_shape_numpy""]
                             )"
qutip_qutip_v5.0.4,test_bloch.py,python,"TestBloch.plot_vector_test(self, fig, vector_kws)",class_method,,,,"Class method: TestBloch.plot_vector_test(self, fig, vector_kws)",qutip,qutip,v5.0.4,,,,,,,TestBloch,plot_vector_test,"(self, fig, vector_kws)",,,,,,,,,
qutip_qutip_v5.0.4,test_bloch.py,python,"TestBloch.plot_vector_ref(self, fig, vector_kws)",class_method,,,,"Class method: TestBloch.plot_vector_ref(self, fig, vector_kws)",qutip,qutip,v5.0.4,,,,,,,TestBloch,plot_vector_ref,"(self, fig, vector_kws)",,,,,,,,,
qutip_qutip_v5.0.4,test_bloch.py,python,"[pytest.mark.parametrize([
        ""vector_kws""
    ], [
        pytest.param(
            dict(vectors=(0, 0, 1)), id=""single-vector-tuple""),
        pytest.param(
            dict(vectors=[0, 0, 1]), id=""single-vector-list""),
        pytest.param(
            dict(vectors=np.array([0, 0, 1])), id=""single-vector-numpy""),
        pytest.param(
            dict(vectors=[(0, 0, 1), (0, 1, 0)]), id=""list-vectors-tuple""),
        pytest.param(
            dict(vectors=[[0, 0, 1]]), id=""list-vectors-list""),
        pytest.param(
            dict(vectors=[np.array([0, 0, 1])]), id=""list-vectors-numpy""),
        pytest.param(
            dict(vectors=[
                [
                    np.cos(np.pi / 4) * np.cos(t),
                    np.sin(np.pi / 4) * np.cos(t),
                    np.sin(t),
                ]
                for t in np.linspace(0, 2 * np.pi, 20)
            ], alpha=0.5), id=""circle-of-vectors""),
        pytest.param(
            dict(vectors=(0, 0, 1), alpha=1), id=""alpha-opaque""),
        pytest.param(
            dict(vectors=(0, 0, 1), alpha=0.3), id=""alpha-transparent""),
        pytest.param(
            dict(vectors=(0, 0, 1), alpha=0), id=""alpha-invisible""),
        pytest.param(
            dict(vectors=(0, 0, 1)), id=""alpha-default""),
        pytest.param([
            dict(vectors=[(0, 0, 1), (0, 1, 0)], alpha=1.0),
            dict(vectors=[(1, 0, 1), (1, 1, 0)], alpha=0.5),
        ], id=""alpha-multiple-vector-sets""),
        pytest.param(
            dict(vectors=(0, 0, 1), colors=['y']), id=""color-y""),
        pytest.param(
            dict(vectors=[(0, 0, 1), (0, 1, 0)], colors=['y', 'y']),
            id=""color-two-y""),
        pytest.param([
            dict(vectors=[(0, 0, 1)], colors=['y']),
            dict(vectors=[(1, 0, 1)], colors=['g']),
        ], id=""color-yg""),
    ])] TestBloch.test_vector(self, vector_kws, fig_test, fig_ref)",class_method,,,,"Class method: [pytest.mark.parametrize([
        ""vector_kws""
    ], [
        pytest.param(
            dict(vectors=(0, 0, 1)), id=""single-vector-tuple""),
        pytest.param(
            dict(vectors=[0, 0, 1]), id=""single-vector-list""),
        pytest.param(
            dict(vectors=np.array([0, 0, 1])), id=""single-vector-numpy""),
        pytest.param(
            dict(vectors=[(0, 0, 1), (0, 1, 0)]), id=""list-vectors-tuple""),
        pytest.param(
            dict(vectors=[[0, 0, 1]]), id=""list-vectors-list""),
        pytest.param(
            dict(vectors=[np.array([0, 0, 1])]), id=""list-vectors-numpy""),
        pytest.param(
            dict(vectors=[
                [
                    np.cos(np.pi / 4) * np.cos(t),
                    np.sin(np.pi / 4) * np.cos(t),
                    np.sin(t),
                ]
                for t in np.linspace(0, 2 * np.pi, 20)
            ], alpha=0.5), id=""circle-of-vectors""),
        pytest.param(
            dict(vectors=(0, 0, 1), alpha=1), id=""alpha-opaque""),
        pytest.param(
            dict(vectors=(0, 0, 1), alpha=0.3), id=""alpha-transparent""),
        pytest.param(
            dict(vectors=(0, 0, 1), alpha=0), id=""alpha-invisible""),
        pytest.param(
            dict(vectors=(0, 0, 1)), id=""alpha-default""),
        pytest.param([
            dict(vectors=[(0, 0, 1), (0, 1, 0)], alpha=1.0),
            dict(vectors=[(1, 0, 1), (1, 1, 0)], alpha=0.5),
        ], id=""alpha-multiple-vector-sets""),
        pytest.param(
            dict(vectors=(0, 0, 1), colors=['y']), id=""color-y""),
        pytest.param(
            dict(vectors=[(0, 0, 1), (0, 1, 0)], colors=['y', 'y']),
            id=""color-two-y""),
        pytest.param([
            dict(vectors=[(0, 0, 1)], colors=['y']),
            dict(vectors=[(1, 0, 1)], colors=['g']),
        ], id=""color-yg""),
    ])] TestBloch.test_vector(self, vector_kws, fig_test, fig_ref)",qutip,qutip,v5.0.4,,,,,,,TestBloch,test_vector,"(self, vector_kws, fig_test, fig_ref)",,,,,,,,,"pytest.mark.parametrize([
        ""vector_kws""
    ], [
        pytest.param(
            dict(vectors=(0, 0, 1)), id=""single-vector-tuple""),
        pytest.param(
            dict(vectors=[0, 0, 1]), id=""single-vector-list""),
        pytest.param(
            dict(vectors=np.array([0, 0, 1])), id=""single-vector-numpy""),
        pytest.param(
            dict(vectors=[(0, 0, 1), (0, 1, 0)]), id=""list-vectors-tuple""),
        pytest.param(
            dict(vectors=[[0, 0, 1]]), id=""list-vectors-list""),
        pytest.param(
            dict(vectors=[np.array([0, 0, 1])]), id=""list-vectors-numpy""),
        pytest.param(
            dict(vectors=[
                [
                    np.cos(np.pi / 4) * np.cos(t),
                    np.sin(np.pi / 4) * np.cos(t),
                    np.sin(t),
                ]
                for t in np.linspace(0, 2 * np.pi, 20)
            ], alpha=0.5), id=""circle-of-vectors""),
        pytest.param(
            dict(vectors=(0, 0, 1), alpha=1), id=""alpha-opaque""),
        pytest.param(
            dict(vectors=(0, 0, 1), alpha=0.3), id=""alpha-transparent""),
        pytest.param(
            dict(vectors=(0, 0, 1), alpha=0), id=""alpha-invisible""),
        pytest.param(
            dict(vectors=(0, 0, 1)), id=""alpha-default""),
        pytest.param([
            dict(vectors=[(0, 0, 1), (0, 1, 0)], alpha=1.0),
            dict(vectors=[(1, 0, 1), (1, 1, 0)], alpha=0.5),
        ], id=""alpha-multiple-vector-sets""),
        pytest.param(
            dict(vectors=(0, 0, 1), colors=['y']), id=""color-y""),
        pytest.param(
            dict(vectors=[(0, 0, 1), (0, 1, 0)], colors=['y', 'y']),
            id=""color-two-y""),
        pytest.param([
            dict(vectors=[(0, 0, 1)], colors=['y']),
            dict(vectors=[(1, 0, 1)], colors=['g']),
        ], id=""color-yg""),
    ])"
qutip_qutip_v5.0.4,test_bloch.py,python,"[check_pngs_equal] TestBloch.test_vector(self, vector_kws, fig_test, fig_ref)",class_method,,,,"Class method: [check_pngs_equal] TestBloch.test_vector(self, vector_kws, fig_test, fig_ref)",qutip,qutip,v5.0.4,,,,,,,TestBloch,test_vector,"(self, vector_kws, fig_test, fig_ref)",,,,,,,,,check_pngs_equal
qutip_qutip_v5.0.4,test_bloch.py,python,"[pytest.mark.parametrize(""vectors"",
                             [(0, 1, 0, 1), (0, 1), [0, 1], np.array((0, 1)),
                              np.arange(12).reshape((3, 2, 2))],
                             ids=[""long_tuple"", ""short_tuple"", ""short_list"",
                                  ""short_numpy"", ""wrong_shape_numpy""]
                             )] TestBloch.test_vector_errors_wrong_vectors(self, vectors)",class_method,,,,"Class method: [pytest.mark.parametrize(""vectors"",
                             [(0, 1, 0, 1), (0, 1), [0, 1], np.array((0, 1)),
                              np.arange(12).reshape((3, 2, 2))],
                             ids=[""long_tuple"", ""short_tuple"", ""short_list"",
                                  ""short_numpy"", ""wrong_shape_numpy""]
                             )] TestBloch.test_vector_errors_wrong_vectors(self, vectors)",qutip,qutip,v5.0.4,,,,,,,TestBloch,test_vector_errors_wrong_vectors,"(self, vectors)",,,,,,,,,"pytest.mark.parametrize(""vectors"",
                             [(0, 1, 0, 1), (0, 1), [0, 1], np.array((0, 1)),
                              np.arange(12).reshape((3, 2, 2))],
                             ids=[""long_tuple"", ""short_tuple"", ""short_list"",
                                  ""short_numpy"", ""wrong_shape_numpy""]
                             )"
qutip_qutip_v5.0.4,test_bloch.py,python,"[pytest.mark.parametrize(""vectors, colors"",
                             [([0, 0, 1], ['g', 'y']),
                              ([[0, 0, 1], [0, 1, 0]], ['y']),
                              ([0, 0, 1], [['g', 'y']])],
                             ids=[""one-vec-two-colors"", ""two-vec-one-color"",
                                  ""wrong-dimension-list""]
                             )] TestBloch.test_vector_errors_color_length(self, vectors, colors)",class_method,,,,"Class method: [pytest.mark.parametrize(""vectors, colors"",
                             [([0, 0, 1], ['g', 'y']),
                              ([[0, 0, 1], [0, 1, 0]], ['y']),
                              ([0, 0, 1], [['g', 'y']])],
                             ids=[""one-vec-two-colors"", ""two-vec-one-color"",
                                  ""wrong-dimension-list""]
                             )] TestBloch.test_vector_errors_color_length(self, vectors, colors)",qutip,qutip,v5.0.4,,,,,,,TestBloch,test_vector_errors_color_length,"(self, vectors, colors)",,,,,,,,,"pytest.mark.parametrize(""vectors, colors"",
                             [([0, 0, 1], ['g', 'y']),
                              ([[0, 0, 1], [0, 1, 0]], ['y']),
                              ([0, 0, 1], [['g', 'y']])],
                             ids=[""one-vec-two-colors"", ""two-vec-one-color"",
                                  ""wrong-dimension-list""]
                             )"
qutip_qutip_v5.0.4,test_bloch.py,python,"[check_pngs_equal] TestBloch.test_clear(self, fig_test=None, fig_ref=None)",class_method,,,,"Class method: [check_pngs_equal] TestBloch.test_clear(self, fig_test=None, fig_ref=None)",qutip,qutip,v5.0.4,,,,,,,TestBloch,test_clear,"(self, fig_test=None, fig_ref=None)",,,,,,,,,check_pngs_equal
qutip_qutip_v5.0.4,test_bloch.py,python,RefBloch(Bloch),class,,,,Class: RefBloch(Bloch),qutip,qutip,v5.0.4,,,,,,,RefBloch,,,,,,,,,(Bloch),,
qutip_qutip_v5.0.4,test_bloch.py,python,TestBloch,class,,,,Class: TestBloch,qutip,qutip,v5.0.4,,,,,,,TestBloch,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bloch.py,python,test_repr_svg(),function,,,,Function: test_repr_svg(),qutip,qutip,v5.0.4,,,,test_repr_svg,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bloch.py,python,copy,import,,,,Import: copy,qutip,qutip,v5.0.4,import copy,,copy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bloch.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bloch.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bloch.py,python,ket from qutip,import,,,,Import: ket from qutip,qutip,qutip,v5.0.4,"from qutip import ket, ket2dm",qutip,ket,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bloch.py,python,ket2dm from qutip,import,,,,Import: ket2dm from qutip,qutip,qutip,v5.0.4,"from qutip import ket, ket2dm",qutip,ket2dm,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bloch.py,python,Bloch from qutip.bloch,local_import,,,,Import: Bloch from qutip.bloch,qutip,qutip,v5.0.4,from qutip.bloch import Bloch,qutip.bloch,Bloch,,,qutip.bloch,,,,,,,,,,,,
,test_bloch.py,python,,,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_bloch.py,python,,,,,,Directory: qutip\tests\test_bloch.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_enr_state_operator.py,python,"TestOperator.test_no_restrictions(self, dimensions)",class_method,,,,"Class method: TestOperator.test_no_restrictions(self, dimensions)",qutip,qutip,v5.0.4,,,,,,,TestOperator,test_no_restrictions,"(self, dimensions)",,,,,,,,,
qutip_qutip_v5.0.4,test_enr_state_operator.py,python,"TestOperator.test_space_size_reduction(self, dimensions, n_excitations)",class_method,,,,"Class method: TestOperator.test_space_size_reduction(self, dimensions, n_excitations)",qutip,qutip,v5.0.4,,,,,,,TestOperator,test_space_size_reduction,"(self, dimensions, n_excitations)",,,,,,,,,
qutip_qutip_v5.0.4,test_enr_state_operator.py,python,"TestOperator.test_identity(self, dimensions, n_excitations)",class_method,,,,"Class method: TestOperator.test_identity(self, dimensions, n_excitations)",qutip,qutip,v5.0.4,,,,,,,TestOperator,test_identity,"(self, dimensions, n_excitations)",,,,,,,,,
qutip_qutip_v5.0.4,test_enr_state_operator.py,python,TestOperator,class,,,,Class: TestOperator,qutip,qutip,v5.0.4,,,,,,,TestOperator,,,,,,,,,,,
qutip_qutip_v5.0.4,test_enr_state_operator.py,python,"_n_enr_states(dimensions, n_excitations)",function,,,,"Function: _n_enr_states(dimensions, n_excitations)",qutip,qutip,v5.0.4,,,,_n_enr_states,"(dimensions, n_excitations)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_enr_state_operator.py,python,"test_fock_state(dimensions, n_excitations)",function,,,,"Function: test_fock_state(dimensions, n_excitations)",qutip,qutip,v5.0.4,,,,test_fock_state,"(dimensions, n_excitations)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_enr_state_operator.py,python,test_fock_state_error(),function,,,,Function: test_fock_state_error(),qutip,qutip,v5.0.4,,,,test_fock_state_error,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_enr_state_operator.py,python,"_reference_dm(dimensions, n_excitations, nbars)",function,,,,"Function: _reference_dm(dimensions, n_excitations, nbars)",qutip,qutip,v5.0.4,,,,_reference_dm,"(dimensions, n_excitations, nbars)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_enr_state_operator.py,python,test_mesolve_ENR(),function,,,,Function: test_mesolve_ENR(),qutip,qutip,v5.0.4,,,,test_mesolve_ENR,(),,,,,,,,,"# Ensure ENR states work with mesolve",,,,
qutip_qutip_v5.0.4,test_enr_state_operator.py,python,test_mesolve_ENR(),function,,,,Function: test_mesolve_ENR(),qutip,qutip,v5.0.4,,,,test_mesolve_ENR,(),,,,,,,,,"# We compare the output to an exact truncation of the",,,,
qutip_qutip_v5.0.4,test_enr_state_operator.py,python,test_mesolve_ENR(),function,,,,Function: test_mesolve_ENR(),qutip,qutip,v5.0.4,,,,test_mesolve_ENR,(),,,,,,,,,"# single-excitation Jaynes-Cummings model",,,,
qutip_qutip_v5.0.4,test_enr_state_operator.py,python,test_steadystate_ENR(),function,,,,Function: test_steadystate_ENR(),qutip,qutip,v5.0.4,,,,test_steadystate_ENR,(),,,,,,,,,"# Ensure ENR states work with steadystate functions",,,,
qutip_qutip_v5.0.4,test_enr_state_operator.py,python,test_steadystate_ENR(),function,,,,Function: test_steadystate_ENR(),qutip,qutip,v5.0.4,,,,test_steadystate_ENR,(),,,,,,,,,"# We compare the output to an exact truncation of the",,,,
qutip_qutip_v5.0.4,test_enr_state_operator.py,python,test_steadystate_ENR(),function,,,,Function: test_steadystate_ENR(),qutip,qutip,v5.0.4,,,,test_steadystate_ENR,(),,,,,,,,,"# single-excitation Jaynes-Cummings model",,,,
qutip_qutip_v5.0.4,test_enr_state_operator.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_enr_state_operator.py,python,itertools,import,,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,,itertools,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_enr_state_operator.py,python,random,import,,,,Import: random,qutip,qutip,v5.0.4,import random,,random,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_enr_state_operator.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_enr_state_operator.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
,test_enr_state_operator.py,python,,,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_enr_state_operator.py,python,,,,,,Directory: qutip\tests\test_enr_state_operator.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,"[pytest.mark.parametrize(""p"", np.linspace(0, 1, 17))] TestVonNeumannEntropy.test_binary(self, p)",class_method,,,,"Class method: [pytest.mark.parametrize(""p"", np.linspace(0, 1, 17))] TestVonNeumannEntropy.test_binary(self, p)",qutip,qutip,v5.0.4,,,,,,,TestVonNeumannEntropy,test_binary,"(self, p)",,,,,,,,,"pytest.mark.parametrize(""p"", np.linspace(0, 1, 17))"
qutip_qutip_v5.0.4,test_entropy.py,python,[pytest.mark.repeat(10)] TestVonNeumannEntropy.test_pure_state(self),class_method,,,,Class method: [pytest.mark.repeat(10)] TestVonNeumannEntropy.test_pure_state(self),qutip,qutip,v5.0.4,,,,,,,TestVonNeumannEntropy,test_pure_state,(self),,,,,,,,,pytest.mark.repeat(10)
qutip_qutip_v5.0.4,test_entropy.py,python,[pytest.mark.repeat(10)] TestLinearEntropy.test_less_than_von_neumann(self),class_method,,,,Class method: [pytest.mark.repeat(10)] TestLinearEntropy.test_less_than_von_neumann(self),qutip,qutip,v5.0.4,,,,,,,TestLinearEntropy,test_less_than_von_neumann,(self),,,,,,,,,pytest.mark.repeat(10)
qutip_qutip_v5.0.4,test_entropy.py,python,[pytest.mark.repeat(10)] TestLinearEntropy.test_pure_state(self),class_method,,,,Class method: [pytest.mark.repeat(10)] TestLinearEntropy.test_pure_state(self),qutip,qutip,v5.0.4,,,,,,,TestLinearEntropy,test_pure_state,(self),,,,,,,,,pytest.mark.repeat(10)
qutip_qutip_v5.0.4,test_entropy.py,python,"[pytest.mark.parametrize(""dm"", [
        pytest.param(qutip.bell_state(x).proj(), id='bell'+x)
        for x in ['00', '01', '10', '11']
    ])] TestConcurrence.test_maximally_entangled(self, dm)",class_method,,,,"Class method: [pytest.mark.parametrize(""dm"", [
        pytest.param(qutip.bell_state(x).proj(), id='bell'+x)
        for x in ['00', '01', '10', '11']
    ])] TestConcurrence.test_maximally_entangled(self, dm)",qutip,qutip,v5.0.4,,,,,,,TestConcurrence,test_maximally_entangled,"(self, dm)",,,,,,,,,"pytest.mark.parametrize(""dm"", [
        pytest.param(qutip.bell_state(x).proj(), id='bell'+x)
        for x in ['00', '01', '10', '11']
    ])"
qutip_qutip_v5.0.4,test_entropy.py,python,[pytest.mark.repeat(10)] TestConcurrence.test_nonzero(self),class_method,,,,Class method: [pytest.mark.repeat(10)] TestConcurrence.test_nonzero(self),qutip,qutip,v5.0.4,,,,,,,TestConcurrence,test_nonzero,(self),,,,,,,,,pytest.mark.repeat(10)
qutip_qutip_v5.0.4,test_entropy.py,python,TestMutualInformation.test_pure_state_additive(self),class_method,,,,Class method: TestMutualInformation.test_pure_state_additive(self),qutip,qutip,v5.0.4,,,,,,,TestMutualInformation,test_pure_state_additive,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,TestMutualInformation.test_component_selection(self),class_method,,,,Class method: TestMutualInformation.test_component_selection(self),qutip,qutip,v5.0.4,,,,,,,TestMutualInformation,test_component_selection,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,"TestRelativeEntropy._simple_relative_entropy_implementation(
            self, rho, sigma, log_base=np.log, tol=1e-12)",class_method,,,,"Class method: TestRelativeEntropy._simple_relative_entropy_implementation(
            self, rho, sigma, log_base=np.log, tol=1e-12)",qutip,qutip,v5.0.4,,,,,,,TestRelativeEntropy,_simple_relative_entropy_implementation,"(
            self, rho, sigma, log_base=np.log, tol=1e-12)",,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,TestRelativeEntropy.test_rho_or_sigma_not_oper(self),class_method,,,,Class method: TestRelativeEntropy.test_rho_or_sigma_not_oper(self),qutip,qutip,v5.0.4,,,,,,,TestRelativeEntropy,test_rho_or_sigma_not_oper,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,TestRelativeEntropy.test_rho_and_sigma_have_different_shape_and_dims(self),class_method,,,,Class method: TestRelativeEntropy.test_rho_and_sigma_have_different_shape_and_dims(self),qutip,qutip,v5.0.4,,,,,,,TestRelativeEntropy,test_rho_and_sigma_have_different_shape_and_dims,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,TestRelativeEntropy.test_base_not_2_or_e(self),class_method,,,,Class method: TestRelativeEntropy.test_base_not_2_or_e(self),qutip,qutip,v5.0.4,,,,,,,TestRelativeEntropy,test_base_not_2_or_e,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,TestRelativeEntropy.test_infinite_relative_entropy(self),class_method,,,,Class method: TestRelativeEntropy.test_infinite_relative_entropy(self),qutip,qutip,v5.0.4,,,,,,,TestRelativeEntropy,test_infinite_relative_entropy,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,TestRelativeEntropy.test_base_2_or_e(self),class_method,,,,Class method: TestRelativeEntropy.test_base_2_or_e(self),qutip,qutip,v5.0.4,,,,,,,TestRelativeEntropy,test_base_2_or_e,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,TestRelativeEntropy.test_pure_vs_maximally_mixed_state(self),class_method,,,,Class method: TestRelativeEntropy.test_pure_vs_maximally_mixed_state(self),qutip,qutip,v5.0.4,,,,,,,TestRelativeEntropy,test_pure_vs_maximally_mixed_state,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,TestRelativeEntropy.test_density_matrices_with_non_real_eigenvalues(self),class_method,,,,Class method: TestRelativeEntropy.test_density_matrices_with_non_real_eigenvalues(self),qutip,qutip,v5.0.4,,,,,,,TestRelativeEntropy,test_density_matrices_with_non_real_eigenvalues,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,[pytest.mark.repeat(20)] TestRelativeEntropy.test_random_dm_with_self(self),class_method,,,,Class method: [pytest.mark.repeat(20)] TestRelativeEntropy.test_random_dm_with_self(self),qutip,qutip,v5.0.4,,,,,,,TestRelativeEntropy,test_random_dm_with_self,(self),,,,,,,,,pytest.mark.repeat(20)
qutip_qutip_v5.0.4,test_entropy.py,python,[pytest.mark.repeat(20)] TestRelativeEntropy.test_random_rho_sigma(self),class_method,,,,Class method: [pytest.mark.repeat(20)] TestRelativeEntropy.test_random_rho_sigma(self),qutip,qutip,v5.0.4,,,,,,,TestRelativeEntropy,test_random_rho_sigma,(self),,,,,,,,,pytest.mark.repeat(20)
qutip_qutip_v5.0.4,test_entropy.py,python,TestConditionalEntropy.test_inequality_3_qubits(self),class_method,,,,Class method: TestConditionalEntropy.test_inequality_3_qubits(self),qutip,qutip,v5.0.4,,,,,,,TestConditionalEntropy,test_inequality_3_qubits,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,TestConditionalEntropy.test_triangle_inequality_4_qubits(self),class_method,,,,Class method: TestConditionalEntropy.test_triangle_inequality_4_qubits(self),qutip,qutip,v5.0.4,,,,,,,TestConditionalEntropy,test_triangle_inequality_4_qubits,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,TestVonNeumannEntropy,class,,,,Class: TestVonNeumannEntropy,qutip,qutip,v5.0.4,,,,,,,TestVonNeumannEntropy,,,,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,TestLinearEntropy,class,,,,Class: TestLinearEntropy,qutip,qutip,v5.0.4,,,,,,,TestLinearEntropy,,,,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,TestConcurrence,class,,,,Class: TestConcurrence,qutip,qutip,v5.0.4,,,,,,,TestConcurrence,,,,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,TestMutualInformation,class,,,,Class: TestMutualInformation,qutip,qutip,v5.0.4,,,,,,,TestMutualInformation,,,,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,TestRelativeEntropy,class,,,,Class: TestRelativeEntropy,qutip,qutip,v5.0.4,,,,,,,TestRelativeEntropy,,,,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,TestConditionalEntropy,class,,,,Class: TestConditionalEntropy,qutip,qutip,v5.0.4,,,,,,,TestConditionalEntropy,,,,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,_alpha = 2*np.pi * np.random.rand(),constant,_alpha = 2*np.pi * np.random.rand(),_alpha,2*np.pi * np.random.rand(),Constant: _alpha = 2*np.pi * np.random.rand(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_entropy.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
,test_entropy.py,python,,,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_entropy.py,python,,,,,,Directory: qutip\tests\test_entropy.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_fileio.py,python,"Test_file_data_store_file_data_read.case(self, filename, kwargs)",class_method,,,,"Class method: Test_file_data_store_file_data_read.case(self, filename, kwargs)",qutip,qutip,v5.0.4,,,,,,,Test_file_data_store_file_data_read,case,"(self, filename, kwargs)",,,,,,,,,
qutip_qutip_v5.0.4,test_fileio.py,python,Test_file_data_store_file_data_read.test_defaults(self),class_method,,,,Class method: Test_file_data_store_file_data_read.test_defaults(self),qutip,qutip,v5.0.4,,,,,,,Test_file_data_store_file_data_read,test_defaults,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_fileio.py,python,"[pytest.mark.parametrize(""type_"", [""real"", ""complex""])] Test_file_data_store_file_data_read.test_type_format(self, type_, format_)",class_method,,,,"Class method: [pytest.mark.parametrize(""type_"", [""real"", ""complex""])] Test_file_data_store_file_data_read.test_type_format(self, type_, format_)",qutip,qutip,v5.0.4,,,,,,,Test_file_data_store_file_data_read,test_type_format,"(self, type_, format_)",,,,,,,,,"pytest.mark.parametrize(""type_"", [""real"", ""complex""])"
qutip_qutip_v5.0.4,test_fileio.py,python,"[pytest.mark.parametrize(""format_"", [""decimal"", ""exp""])] Test_file_data_store_file_data_read.test_type_format(self, type_, format_)",class_method,,,,"Class method: [pytest.mark.parametrize(""format_"", [""decimal"", ""exp""])] Test_file_data_store_file_data_read.test_type_format(self, type_, format_)",qutip,qutip,v5.0.4,,,,,,,Test_file_data_store_file_data_read,test_type_format,"(self, type_, format_)",,,,,,,,,"pytest.mark.parametrize(""format_"", [""decimal"", ""exp""])"
qutip_qutip_v5.0.4,test_fileio.py,python,"[pytest.mark.parametrize(""separator"", ["","", "";"", ""\t"", "" "", "" \t ""],
                             ids=lambda x: ""'"" + x + ""'"")] Test_file_data_store_file_data_read.test_separator_detection(self, separator)",class_method,,,,"Class method: [pytest.mark.parametrize(""separator"", ["","", "";"", ""\t"", "" "", "" \t ""],
                             ids=lambda x: ""'"" + x + ""'"")] Test_file_data_store_file_data_read.test_separator_detection(self, separator)",qutip,qutip,v5.0.4,,,,,,,Test_file_data_store_file_data_read,test_separator_detection,"(self, separator)",,,,,,,,,"pytest.mark.parametrize(""separator"", ["","", "";"", ""\t"", "" "", "" \t ""],
                             ids=lambda x: ""'"" + x + ""'"")"
qutip_qutip_v5.0.4,test_fileio.py,python,Test_file_data_store_file_data_read,class,,,,Class: Test_file_data_store_file_data_read,qutip,qutip,v5.0.4,,,,,,,Test_file_data_store_file_data_read,,,,,,,,,,,
qutip_qutip_v5.0.4,test_fileio.py,python,_random_file_name(),function,,,,Function: _random_file_name(),qutip,qutip,v5.0.4,,,,_random_file_name,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_fileio.py,python,"pytestmark = [pytest.mark.usefixtures(""in_temporary_directory"")]",constant,"pytestmark = [pytest.mark.usefixtures(""in_temporary_directory"")]",pytestmark,"[pytest.mark.usefixtures(""in_temporary_directory"")]","Constant: pytestmark = [pytest.mark.usefixtures(""in_temporary_directory"")]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_fileio.py,python,_dimension = 10,constant,_dimension = 10,_dimension,10,Constant: _dimension = 10,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_fileio.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_fileio.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_fileio.py,python,uuid,import,,,,Import: uuid,qutip,qutip,v5.0.4,import uuid,,uuid,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_fileio.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_fileio.py,python,Path from pathlib,import,,,,Import: Path from pathlib,qutip,qutip,v5.0.4,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
,test_fileio.py,python,,,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_fileio.py,python,,,,,,Directory: qutip\tests\test_fileio.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_ipynbtools.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_ipynbtools.py,python,version_table from qutip.ipynbtools,local_import,,,,Import: version_table from qutip.ipynbtools,qutip,qutip,v5.0.4,from qutip.ipynbtools import version_table,qutip.ipynbtools,version_table,,,qutip.ipynbtools,,,,,,,,,,,,
,test_ipynbtools.py,python,,,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_ipynbtools.py,python,,,,,,Directory: qutip\tests\test_ipynbtools.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,[instance] EigenPairs.pairs = pairs,class_field,,,,Class field: [instance] EigenPairs.pairs = pairs,qutip,qutip,v5.0.4,,,,,,,EigenPairs,__init__,"(self, pairs)",self.pairs = pairs,self.pairs = pairs,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,[instance] EigenPairs.eigenvalues = [p[0] for p in pairs],class_field,,,,Class field: [instance] EigenPairs.eigenvalues = [p[0] for p in pairs],qutip,qutip,v5.0.4,,,,,,,EigenPairs,__init__,"(self, pairs)",self.eigenvalues = [p[0] for p in pairs],self.eigenvalues = [p[0] for p in pairs],,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,[instance] EigenPairs.eigenstates = [p[1] for p in pairs],class_field,,,,Class field: [instance] EigenPairs.eigenstates = [p[1] for p in pairs],qutip,qutip,v5.0.4,,,,,,,EigenPairs,__init__,"(self, pairs)",self.eigenstates = [p[1] for p in pairs],self.eigenstates = [p[1] for p in pairs],,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,[instance] EigenPairs.projectors = [v * v.dag() for v in eigenstates],class_field,,,,Class field: [instance] EigenPairs.projectors = [v * v.dag() for v in eigenstates],qutip,qutip,v5.0.4,,,,,,,EigenPairs,__init__,"(self, pairs)",self.projectors = [v * v.dag() for v in self.eigenstates],self.projectors = [v * v.dag() for v in self.eigenstates],,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,"EigenPairs.__init__(self, pairs)",class_method,,,,"Class method: EigenPairs.__init__(self, pairs)",qutip,qutip,v5.0.4,,,,,,,EigenPairs,__init__,"(self, pairs)",,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,"EigenPairs.__getitem__(self, i)",class_method,,,,"Class method: EigenPairs.__getitem__(self, i)",qutip,qutip,v5.0.4,,,,,,,EigenPairs,__getitem__,"(self, i)",,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,"EigenPairs.__contains__(self, other)",class_method,,,,"Class method: EigenPairs.__contains__(self, other)",qutip,qutip,v5.0.4,,,,,,,EigenPairs,__contains__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,EigenPairs,class,,,,Class: EigenPairs,qutip,qutip,v5.0.4,,,,,,,EigenPairs,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,pairs2dm(pairs),function,,,,Function: pairs2dm(pairs),qutip,qutip,v5.0.4,,,,pairs2dm,(pairs),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,"_equivalent(left, right, tol=1e-8)",function,,,,"Function: _equivalent(left, right, tol=1e-8)",qutip,qutip,v5.0.4,,,,_equivalent,"(left, right, tol=1e-8)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,test_measurement_statistics_observable_degenerate(),function,,,,Function: test_measurement_statistics_observable_degenerate(),qutip,qutip,v5.0.4,,,,test_measurement_statistics_observable_degenerate,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,test_measurement_statistics_povm_input_errors(),function,,,,Function: test_measurement_statistics_povm_input_errors(),qutip,qutip,v5.0.4,,,,test_measurement_statistics_povm_input_errors,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,test_measurement_statistics_observable_input_errors(),function,,,,Function: test_measurement_statistics_observable_input_errors(),qutip,qutip,v5.0.4,,,,test_measurement_statistics_observable_input_errors,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,test_measure_input_errors(),function,,,,Function: test_measure_input_errors(),qutip,qutip,v5.0.4,,,,test_measure_input_errors,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,test_measure_observable_input_errors(),function,,,,Function: test_measure_observable_input_errors(),qutip,qutip,v5.0.4,,,,test_measure_observable_input_errors,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,test_povm(),function,,,,Function: test_povm(),qutip,qutip,v5.0.4,,,,test_povm,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,"SIGMAZ = EigenPairs([
    (-1.0, -basis(2, 1)),
    (1.0, -basis(2, 0)),
])",constant,"SIGMAZ = EigenPairs([
    (-1.0, -basis(2, 1)),
    (1.0, -basis(2, 0)),
])",SIGMAZ,"EigenPairs([
    (-1.0, -basis(2, 1)),
    (1.0, -basis(2, 0)),
])","Constant: SIGMAZ = EigenPairs([
    (-1.0, -basis(2, 1)),
    (1.0, -basis(2, 0)),
])",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,"SIGMAX = EigenPairs([
    (-1.0, (-basis(2, 0) + basis(2, 1)).unit()),
    (1.0, (basis(2, 0) + basis(2, 1)).unit()),
])",constant,"SIGMAX = EigenPairs([
    (-1.0, (-basis(2, 0) + basis(2, 1)).unit()),
    (1.0, (basis(2, 0) + basis(2, 1)).unit()),
])",SIGMAX,"EigenPairs([
    (-1.0, (-basis(2, 0) + basis(2, 1)).unit()),
    (1.0, (basis(2, 0) + basis(2, 1)).unit()),
])","Constant: SIGMAX = EigenPairs([
    (-1.0, (-basis(2, 0) + basis(2, 1)).unit()),
    (1.0, (basis(2, 0) + basis(2, 1)).unit()),
])",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,"SIGMAY = EigenPairs([
    (-1.0, (-basis(2, 0) + 1j * basis(2, 1)).unit()),
    (1.0, (-basis(2, 0) - 1j * basis(2, 1)).unit()),
])",constant,"SIGMAY = EigenPairs([
    (-1.0, (-basis(2, 0) + 1j * basis(2, 1)).unit()),
    (1.0, (-basis(2, 0) - 1j * basis(2, 1)).unit()),
])",SIGMAY,"EigenPairs([
    (-1.0, (-basis(2, 0) + 1j * basis(2, 1)).unit()),
    (1.0, (-basis(2, 0) - 1j * basis(2, 1)).unit()),
])","Constant: SIGMAY = EigenPairs([
    (-1.0, (-basis(2, 0) + 1j * basis(2, 1)).unit()),
    (1.0, (-basis(2, 0) - 1j * basis(2, 1)).unit()),
])",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,"state0 = basis(2, 0)",constant,"state0 = basis(2, 0)",state0,"basis(2, 0)","Constant: state0 = basis(2, 0)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,"state1 = basis(2, 1)",constant,"state1 = basis(2, 1)",state1,"basis(2, 1)","Constant: state1 = basis(2, 1)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,"stateplus = (basis(2, 0) + basis(2, 1)).unit()",constant,"stateplus = (basis(2, 0) + basis(2, 1)).unit()",stateplus,"(basis(2, 0) + basis(2, 1)).unit()","Constant: stateplus = (basis(2, 0) + basis(2, 1)).unit()",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,"stateminus = (basis(2, 0) - basis(2, 1)).unit()",constant,"stateminus = (basis(2, 0) - basis(2, 1)).unit()",stateminus,"(basis(2, 0) - basis(2, 1)).unit()","Constant: stateminus = (basis(2, 0) - basis(2, 1)).unit()",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,"stateR = (basis(2, 0) + 1j * basis(2, 1)).unit()",constant,"stateR = (basis(2, 0) + 1j * basis(2, 1)).unit()",stateR,"(basis(2, 0) + 1j * basis(2, 1)).unit()","Constant: stateR = (basis(2, 0) + 1j * basis(2, 1)).unit()",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,"stateL = (basis(2, 0) - 1j * basis(2, 1)).unit()",constant,"stateL = (basis(2, 0) - 1j * basis(2, 1)).unit()",stateL,"(basis(2, 0) - 1j * basis(2, 1)).unit()","Constant: stateL = (basis(2, 0) - 1j * basis(2, 1)).unit()",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,"PZ = [ket2dm(state0), ket2dm(state1)]",constant,"PZ = [ket2dm(state0), ket2dm(state1)]",PZ,"[ket2dm(state0), ket2dm(state1)]","Constant: PZ = [ket2dm(state0), ket2dm(state1)]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,"PX = [ket2dm(stateplus), ket2dm(stateminus)]",constant,"PX = [ket2dm(stateplus), ket2dm(stateminus)]",PX,"[ket2dm(stateplus), ket2dm(stateminus)]","Constant: PX = [ket2dm(stateplus), ket2dm(stateminus)]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,"PY = [ket2dm(stateR), ket2dm(stateL)]",constant,"PY = [ket2dm(stateR), ket2dm(stateL)]",PY,"[ket2dm(stateR), ket2dm(stateL)]","Constant: PY = [ket2dm(stateR), ket2dm(stateL)]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,"PZ_ket = [state0, state1]",constant,"PZ_ket = [state0, state1]",PZ_ket,"[state0, state1]","Constant: PZ_ket = [state0, state1]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,scipy,import,,,,Import: scipy,qutip,qutip,v5.0.4,import scipy,,scipy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,sqrt from math,import,,,,Import: sqrt from math,qutip,qutip,v5.0.4,from math import sqrt,math,sqrt,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,Qobj from qutip,import,,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, ket2dm, sigmax, sigmay, sigmaz, identity, num, tensor,
    rand_ket
)",qutip,Qobj,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,basis from qutip,import,,,,Import: basis from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, ket2dm, sigmax, sigmay, sigmaz, identity, num, tensor,
    rand_ket
)",qutip,basis,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,ket2dm from qutip,import,,,,Import: ket2dm from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, ket2dm, sigmax, sigmay, sigmaz, identity, num, tensor,
    rand_ket
)",qutip,ket2dm,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,sigmax from qutip,import,,,,Import: sigmax from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, ket2dm, sigmax, sigmay, sigmaz, identity, num, tensor,
    rand_ket
)",qutip,sigmax,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,sigmay from qutip,import,,,,Import: sigmay from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, ket2dm, sigmax, sigmay, sigmaz, identity, num, tensor,
    rand_ket
)",qutip,sigmay,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,sigmaz from qutip,import,,,,Import: sigmaz from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, ket2dm, sigmax, sigmay, sigmaz, identity, num, tensor,
    rand_ket
)",qutip,sigmaz,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,identity from qutip,import,,,,Import: identity from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, ket2dm, sigmax, sigmay, sigmaz, identity, num, tensor,
    rand_ket
)",qutip,identity,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,num from qutip,import,,,,Import: num from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, ket2dm, sigmax, sigmay, sigmaz, identity, num, tensor,
    rand_ket
)",qutip,num,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,tensor from qutip,import,,,,Import: tensor from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, ket2dm, sigmax, sigmay, sigmaz, identity, num, tensor,
    rand_ket
)",qutip,tensor,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,rand_ket from qutip,import,,,,Import: rand_ket from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, ket2dm, sigmax, sigmay, sigmaz, identity, num, tensor,
    rand_ket
)",qutip,rand_ket,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,measure_povm from qutip.measurement,local_import,,,,Import: measure_povm from qutip.measurement,qutip,qutip,v5.0.4,"from qutip.measurement import (
    measure_povm, measurement_statistics_povm, measure_observable,
    measurement_statistics_observable,
)",qutip.measurement,measure_povm,,,qutip.measurement,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,measurement_statistics_povm from qutip.measurement,local_import,,,,Import: measurement_statistics_povm from qutip.measurement,qutip,qutip,v5.0.4,"from qutip.measurement import (
    measure_povm, measurement_statistics_povm, measure_observable,
    measurement_statistics_observable,
)",qutip.measurement,measurement_statistics_povm,,,qutip.measurement,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,measure_observable from qutip.measurement,local_import,,,,Import: measure_observable from qutip.measurement,qutip,qutip,v5.0.4,"from qutip.measurement import (
    measure_povm, measurement_statistics_povm, measure_observable,
    measurement_statistics_observable,
)",qutip.measurement,measure_observable,,,qutip.measurement,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_measurement.py,python,measurement_statistics_observable from qutip.measurement,local_import,,,,Import: measurement_statistics_observable from qutip.measurement,qutip,qutip,v5.0.4,"from qutip.measurement import (
    measure_povm, measurement_statistics_povm, measure_observable,
    measurement_statistics_observable,
)",qutip.measurement,measurement_statistics_observable,,,qutip.measurement,,,,,,,,,,,,
,test_measurement.py,python,,,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_measurement.py,python,,,,,,Directory: qutip\tests\test_measurement.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mkl.py,python,Test_spsolve.test_single_rhs_vector_real(self),class_method,,,,Class method: Test_spsolve.test_single_rhs_vector_real(self),qutip,qutip,v5.0.4,,,,,,,Test_spsolve,test_single_rhs_vector_real,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_mkl.py,python,Test_spsolve.test_single_rhs_vector_complex(self),class_method,,,,Class method: Test_spsolve.test_single_rhs_vector_complex(self),qutip,qutip,v5.0.4,,,,,,,Test_spsolve,test_single_rhs_vector_complex,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_mkl.py,python,"[pytest.mark.parametrize('dtype', [np.float64, np.complex128])] Test_spsolve.test_multi_rhs_vector(self, dtype)",class_method,,,,"Class method: [pytest.mark.parametrize('dtype', [np.float64, np.complex128])] Test_spsolve.test_multi_rhs_vector(self, dtype)",qutip,qutip,v5.0.4,,,,,,,Test_spsolve,test_multi_rhs_vector,"(self, dtype)",,,,,,,,,"pytest.mark.parametrize('dtype', [np.float64, np.complex128])"
qutip_qutip_v5.0.4,test_mkl.py,python,Test_spsolve.test_rhs_shape_is_maintained(self),class_method,,,,Class method: Test_spsolve.test_rhs_shape_is_maintained(self),qutip,qutip,v5.0.4,,,,,,,Test_spsolve,test_rhs_shape_is_maintained,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_mkl.py,python,Test_spsolve.test_sparse_rhs(self),class_method,,,,Class method: Test_spsolve.test_sparse_rhs(self),qutip,qutip,v5.0.4,,,,,,,Test_spsolve,test_sparse_rhs,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_mkl.py,python,"[pytest.mark.parametrize('dtype', [np.float64, np.complex128])] Test_spsolve.test_symmetric_solver(self, dtype)",class_method,,,,"Class method: [pytest.mark.parametrize('dtype', [np.float64, np.complex128])] Test_spsolve.test_symmetric_solver(self, dtype)",qutip,qutip,v5.0.4,,,,,,,Test_spsolve,test_symmetric_solver,"(self, dtype)",,,,,,,,,"pytest.mark.parametrize('dtype', [np.float64, np.complex128])"
qutip_qutip_v5.0.4,test_mkl.py,python,"[pytest.mark.parametrize('dtype', [np.float64, np.complex128])] Test_splu.test_repeated_rhs_solve(self, dtype)",class_method,,,,"Class method: [pytest.mark.parametrize('dtype', [np.float64, np.complex128])] Test_splu.test_repeated_rhs_solve(self, dtype)",qutip,qutip,v5.0.4,,,,,,,Test_splu,test_repeated_rhs_solve,"(self, dtype)",,,,,,,,,"pytest.mark.parametrize('dtype', [np.float64, np.complex128])"
qutip_qutip_v5.0.4,test_mkl.py,python,Test_spsolve,class,,,,Class: Test_spsolve,qutip,qutip,v5.0.4,,,,,,,Test_spsolve,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mkl.py,python,Test_splu,class,,,,Class: Test_splu,qutip,qutip,v5.0.4,,,,,,,Test_splu,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mkl.py,python,"pytestmark = [
    pytest.mark.skipif(not qutip.settings.has_mkl,
                       reason='MKL extensions not found.'),
]",constant,"pytestmark = [
    pytest.mark.skipif(not qutip.settings.has_mkl,
                       reason='MKL extensions not found.'),
]",pytestmark,"[
    pytest.mark.skipif(not qutip.settings.has_mkl,
                       reason='MKL extensions not found.'),
]","Constant: pytestmark = [
    pytest.mark.skipif(not qutip.settings.has_mkl,
                       reason='MKL extensions not found.'),
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mkl.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mkl.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mkl.py,python,scipy.linalg,import,,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg,,scipy.linalg,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mkl.py,python,scipy.sparse,import,,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse,,scipy.sparse,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mkl.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
,test_mkl.py,python,,,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_mkl.py,python,,,,,,Directory: qutip\tests\test_mkl.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_partial_transpose.py,python,test_partial_transpose_bipartite(),function,,,,Function: test_partial_transpose_bipartite(),qutip,qutip,v5.0.4,,,,test_partial_transpose_bipartite,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_partial_transpose.py,python,test_partial_transpose_comparison(),function,,,,Function: test_partial_transpose_comparison(),qutip,qutip,v5.0.4,,,,test_partial_transpose_comparison,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_partial_transpose.py,python,test_partial_transpose_randomized(),function,,,,Function: test_partial_transpose_randomized(),qutip,qutip,v5.0.4,,,,test_partial_transpose_randomized,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_partial_transpose.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_partial_transpose.py,python,Qobj from qutip,import,,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import Qobj, partial_transpose, tensor, rand_dm",qutip,Qobj,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_partial_transpose.py,python,partial_transpose from qutip,import,,,,Import: partial_transpose from qutip,qutip,qutip,v5.0.4,"from qutip import Qobj, partial_transpose, tensor, rand_dm",qutip,partial_transpose,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_partial_transpose.py,python,tensor from qutip,import,,,,Import: tensor from qutip,qutip,qutip,v5.0.4,"from qutip import Qobj, partial_transpose, tensor, rand_dm",qutip,tensor,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_partial_transpose.py,python,rand_dm from qutip,import,,,,Import: rand_dm from qutip,qutip,qutip,v5.0.4,"from qutip import Qobj, partial_transpose, tensor, rand_dm",qutip,rand_dm,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_partial_transpose.py,python,_partial_transpose_reference from qutip.partial_transpose,local_import,,,,Import: _partial_transpose_reference from qutip.partial_transpose,qutip,qutip,v5.0.4,from qutip.partial_transpose import _partial_transpose_reference,qutip.partial_transpose,_partial_transpose_reference,,,qutip.partial_transpose,,,,,,,,,,,,
,test_partial_transpose.py,python,,,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_partial_transpose.py,python,,,,,,Directory: qutip\tests\test_partial_transpose.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_progressbar.py,python,"bars = [""base"", ""text"", ""Enhanced""]",constant,"bars = [""base"", ""text"", ""Enhanced""]",bars,"[""base"", ""text"", ""Enhanced""]","Constant: bars = [""base"", ""text"", ""Enhanced""]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_progressbar.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_progressbar.py,python,time,import,,,,Import: time,qutip,qutip,v5.0.4,import time,,time,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_progressbar.py,python,progress_bars from qutip.ui.progressbar,local_import,,,,Import: progress_bars from qutip.ui.progressbar,qutip,qutip,v5.0.4,from qutip.ui.progressbar import progress_bars,qutip.ui.progressbar,progress_bars,,,qutip.ui.progressbar,,,,,,,,,,,,
,test_progressbar.py,python,,,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_progressbar.py,python,,,,,,Directory: qutip\tests\test_progressbar.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qip.py,python,test_failed_import(without_qutip_qip),function,,,,Function: test_failed_import(without_qutip_qip),qutip,qutip,v5.0.4,,,,test_failed_import,(without_qutip_qip),,,,,,,,,"# Ensure 'qutip.qip' is not imported yet",,,,
qutip_qutip_v5.0.4,test_qip.py,python,test_with_qip(with_qutip_qip_stub),function,,,,Function: test_with_qip(with_qutip_qip_stub),qutip,qutip,v5.0.4,,,,test_with_qip,(with_qutip_qip_stub),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qip.py,python,sys,import,,,,Import: sys,qutip,qutip,v5.0.4,import sys,,sys,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qip.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
,test_qip.py,python,,,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_qip.py,python,,,,,,Directory: qutip\tests\test_qip.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qpt.py,python,test_qpt_snot(),function,,,,Function: test_qpt_snot(),qutip,qutip,v5.0.4,,,,test_qpt_snot,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qpt.py,python,test_qpt_cnot(),function,,,,Function: test_qpt_cnot(),qutip,qutip,v5.0.4,,,,test_qpt_cnot,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qpt.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qpt.py,python,scipy.linalg,import,,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg as la,,scipy.linalg,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qpt.py,python,spre from qutip,import,,,,Import: spre from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, qeye, sigmax, sigmay, sigmaz, qpt",qutip,spre,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qpt.py,python,spost from qutip,import,,,,Import: spost from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, qeye, sigmax, sigmay, sigmaz, qpt",qutip,spost,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qpt.py,python,qeye from qutip,import,,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, qeye, sigmax, sigmay, sigmaz, qpt",qutip,qeye,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qpt.py,python,sigmax from qutip,import,,,,Import: sigmax from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, qeye, sigmax, sigmay, sigmaz, qpt",qutip,sigmax,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qpt.py,python,sigmay from qutip,import,,,,Import: sigmay from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, qeye, sigmax, sigmay, sigmaz, qpt",qutip,sigmay,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qpt.py,python,sigmaz from qutip,import,,,,Import: sigmaz from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, qeye, sigmax, sigmay, sigmaz, qpt",qutip,sigmaz,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qpt.py,python,qpt from qutip,import,,,,Import: qpt from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, qeye, sigmax, sigmay, sigmaz, qpt",qutip,qpt,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qpt.py,python,snot from qutip.core.gates,local_import,,,,Import: snot from qutip.core.gates,qutip,qutip,v5.0.4,"from qutip.core.gates import snot, cnot",qutip.core.gates,snot,,,qutip.core.gates,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qpt.py,python,cnot from qutip.core.gates,local_import,,,,Import: cnot from qutip.core.gates,qutip,qutip,v5.0.4,"from qutip.core.gates import snot, cnot",qutip.core.gates,cnot,,,qutip.core.gates,,,,,,,,,,,,
,test_qpt.py,python,,,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_qpt.py,python,,,,,,Directory: qutip\tests\test_qpt.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,"_assert_density(qobj, density)",function,,,,"Function: _assert_density(qobj, density)",qutip,qutip,v5.0.4,,,,_assert_density,"(qobj, density)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,"_assert_metadata(random_qobj, dims, dtype=None, super=False, ket=False)",function,,,,"Function: _assert_metadata(random_qobj, dims, dtype=None, super=False, ket=False)",qutip,qutip,v5.0.4,,,,_assert_metadata,"(random_qobj, dims, dtype=None, super=False, ket=False)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,"test_kraus_map(dimensions, dtype)",function,,,,"Function: test_kraus_map(dimensions, dtype)",qutip,qutip,v5.0.4,,,,test_kraus_map,"(dimensions, dtype)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,dtype_names = list(_data.to._str2type.keys()) + list(_data.to.dtypes),constant,dtype_names = list(_data.to._str2type.keys()) + list(_data.to.dtypes),dtype_names,list(_data.to._str2type.keys()) + list(_data.to.dtypes),Constant: dtype_names = list(_data.to._str2type.keys()) + list(_data.to.dtypes),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,dtype_types = list(_data.to._str2type.values()) + list(_data.to.dtypes),constant,dtype_types = list(_data.to._str2type.values()) + list(_data.to.dtypes),dtype_types,list(_data.to._str2type.values()) + list(_data.to.dtypes),Constant: dtype_types = list(_data.to._str2type.values()) + list(_data.to.dtypes),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,scipy.sparse,import,,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,,scipy.sparse,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,scipy.linalg,import,,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg as la,,scipy.linalg,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,qeye from qutip,import,,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import qeye, num, to_kraus, kraus_to_choi, CoreOptions, Qobj",qutip,qeye,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,num from qutip,import,,,,Import: num from qutip,qutip,qutip,v5.0.4,"from qutip import qeye, num, to_kraus, kraus_to_choi, CoreOptions, Qobj",qutip,num,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,to_kraus from qutip,import,,,,Import: to_kraus from qutip,qutip,qutip,v5.0.4,"from qutip import qeye, num, to_kraus, kraus_to_choi, CoreOptions, Qobj",qutip,to_kraus,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,kraus_to_choi from qutip,import,,,,Import: kraus_to_choi from qutip,qutip,qutip,v5.0.4,"from qutip import qeye, num, to_kraus, kraus_to_choi, CoreOptions, Qobj",qutip,kraus_to_choi,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,CoreOptions from qutip,import,,,,Import: CoreOptions from qutip,qutip,qutip,v5.0.4,"from qutip import qeye, num, to_kraus, kraus_to_choi, CoreOptions, Qobj",qutip,CoreOptions,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,Qobj from qutip,import,,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import qeye, num, to_kraus, kraus_to_choi, CoreOptions, Qobj",qutip,Qobj,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,data from qutip,import,,,,Import: data from qutip,qutip,qutip,v5.0.4,from qutip import data as _data,qutip,data,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,SeedSequence from numpy.random,local_import,,,,Import: SeedSequence from numpy.random,qutip,qutip,v5.0.4,"from numpy.random import SeedSequence, default_rng",numpy.random,SeedSequence,,,numpy.random,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,default_rng from numpy.random,local_import,,,,Import: default_rng from numpy.random,qutip,qutip,v5.0.4,"from numpy.random import SeedSequence, default_rng",numpy.random,default_rng,,,numpy.random,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,rand_herm from qutip.random_objects,local_import,,,,Import: rand_herm from qutip.random_objects,qutip,qutip,v5.0.4,"from qutip.random_objects import (
    rand_herm,
    rand_unitary,
    rand_dm,
    rand_ket,
    rand_stochastic,
    rand_super,
    rand_super_bcsz,
    rand_kraus_map,
)",qutip.random_objects,rand_herm,,,qutip.random_objects,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,rand_unitary from qutip.random_objects,local_import,,,,Import: rand_unitary from qutip.random_objects,qutip,qutip,v5.0.4,"from qutip.random_objects import (
    rand_herm,
    rand_unitary,
    rand_dm,
    rand_ket,
    rand_stochastic,
    rand_super,
    rand_super_bcsz,
    rand_kraus_map,
)",qutip.random_objects,rand_unitary,,,qutip.random_objects,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,rand_dm from qutip.random_objects,local_import,,,,Import: rand_dm from qutip.random_objects,qutip,qutip,v5.0.4,"from qutip.random_objects import (
    rand_herm,
    rand_unitary,
    rand_dm,
    rand_ket,
    rand_stochastic,
    rand_super,
    rand_super_bcsz,
    rand_kraus_map,
)",qutip.random_objects,rand_dm,,,qutip.random_objects,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,rand_ket from qutip.random_objects,local_import,,,,Import: rand_ket from qutip.random_objects,qutip,qutip,v5.0.4,"from qutip.random_objects import (
    rand_herm,
    rand_unitary,
    rand_dm,
    rand_ket,
    rand_stochastic,
    rand_super,
    rand_super_bcsz,
    rand_kraus_map,
)",qutip.random_objects,rand_ket,,,qutip.random_objects,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,rand_stochastic from qutip.random_objects,local_import,,,,Import: rand_stochastic from qutip.random_objects,qutip,qutip,v5.0.4,"from qutip.random_objects import (
    rand_herm,
    rand_unitary,
    rand_dm,
    rand_ket,
    rand_stochastic,
    rand_super,
    rand_super_bcsz,
    rand_kraus_map,
)",qutip.random_objects,rand_stochastic,,,qutip.random_objects,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,rand_super from qutip.random_objects,local_import,,,,Import: rand_super from qutip.random_objects,qutip,qutip,v5.0.4,"from qutip.random_objects import (
    rand_herm,
    rand_unitary,
    rand_dm,
    rand_ket,
    rand_stochastic,
    rand_super,
    rand_super_bcsz,
    rand_kraus_map,
)",qutip.random_objects,rand_super,,,qutip.random_objects,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,rand_super_bcsz from qutip.random_objects,local_import,,,,Import: rand_super_bcsz from qutip.random_objects,qutip,qutip,v5.0.4,"from qutip.random_objects import (
    rand_herm,
    rand_unitary,
    rand_dm,
    rand_ket,
    rand_stochastic,
    rand_super,
    rand_super_bcsz,
    rand_kraus_map,
)",qutip.random_objects,rand_super_bcsz,,,qutip.random_objects,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_random.py,python,rand_kraus_map from qutip.random_objects,local_import,,,,Import: rand_kraus_map from qutip.random_objects,qutip,qutip,v5.0.4,"from qutip.random_objects import (
    rand_herm,
    rand_unitary,
    rand_dm,
    rand_ket,
    rand_stochastic,
    rand_super,
    rand_super_bcsz,
    rand_kraus_map,
)",qutip.random_objects,rand_kraus_map,,,qutip.random_objects,,,,,,,,,,,,
,test_random.py,python,,,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_random.py,python,,,,,,Directory: qutip\tests\test_random.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_simdiag.py,python,test_simdiag_orthonormal_eigenvectors(),function,,,,Function: test_simdiag_orthonormal_eigenvectors(),qutip,qutip,v5.0.4,,,,test_simdiag_orthonormal_eigenvectors,(),,,,,,,,,"# Special matrix that used to be problematic (see Issue #2268)",,,,
qutip_qutip_v5.0.4,test_simdiag.py,python,test_simdiag_no_input(),function,,,,Function: test_simdiag_no_input(),qutip,qutip,v5.0.4,,,,test_simdiag_no_input,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_simdiag.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_simdiag.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_simdiag.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
,test_simdiag.py,python,,,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_simdiag.py,python,,,,,,Directory: qutip\tests\test_simdiag.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_subsys_apply.py,python,TestSubsysApply.test_SimpleSingleApply(self),class_method,,,,Class method: TestSubsysApply.test_SimpleSingleApply(self),qutip,qutip,v5.0.4,,,,,,,TestSubsysApply,test_SimpleSingleApply,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_subsys_apply.py,python,TestSubsysApply.test_SimpleSuperApply(self),class_method,,,,Class method: TestSubsysApply.test_SimpleSuperApply(self),qutip,qutip,v5.0.4,,,,,,,TestSubsysApply,test_SimpleSuperApply,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_subsys_apply.py,python,TestSubsysApply.test_ComplexSingleApply(self),class_method,,,,Class method: TestSubsysApply.test_ComplexSingleApply(self),qutip,qutip,v5.0.4,,,,,,,TestSubsysApply,test_ComplexSingleApply,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_subsys_apply.py,python,TestSubsysApply.test_ComplexSuperApply(self),class_method,,,,Class method: TestSubsysApply.test_ComplexSuperApply(self),qutip,qutip,v5.0.4,,,,,,,TestSubsysApply,test_ComplexSuperApply,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_subsys_apply.py,python,TestSubsysApply(object),class,,,,Class: TestSubsysApply(object),qutip,qutip,v5.0.4,,,,,,,TestSubsysApply,,,,,,,,,(object),,
qutip_qutip_v5.0.4,test_subsys_apply.py,python,Qobj from qutip,import,,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, vector_to_operator, operator_to_vector, kraus_to_super,
    subsystem_apply, rand_dm, rand_unitary,
)",qutip,Qobj,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_subsys_apply.py,python,tensor from qutip,import,,,,Import: tensor from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, vector_to_operator, operator_to_vector, kraus_to_super,
    subsystem_apply, rand_dm, rand_unitary,
)",qutip,tensor,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_subsys_apply.py,python,vector_to_operator from qutip,import,,,,Import: vector_to_operator from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, vector_to_operator, operator_to_vector, kraus_to_super,
    subsystem_apply, rand_dm, rand_unitary,
)",qutip,vector_to_operator,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_subsys_apply.py,python,operator_to_vector from qutip,import,,,,Import: operator_to_vector from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, vector_to_operator, operator_to_vector, kraus_to_super,
    subsystem_apply, rand_dm, rand_unitary,
)",qutip,operator_to_vector,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_subsys_apply.py,python,kraus_to_super from qutip,import,,,,Import: kraus_to_super from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, vector_to_operator, operator_to_vector, kraus_to_super,
    subsystem_apply, rand_dm, rand_unitary,
)",qutip,kraus_to_super,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_subsys_apply.py,python,subsystem_apply from qutip,import,,,,Import: subsystem_apply from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, vector_to_operator, operator_to_vector, kraus_to_super,
    subsystem_apply, rand_dm, rand_unitary,
)",qutip,subsystem_apply,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_subsys_apply.py,python,rand_dm from qutip,import,,,,Import: rand_dm from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, vector_to_operator, operator_to_vector, kraus_to_super,
    subsystem_apply, rand_dm, rand_unitary,
)",qutip,rand_dm,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_subsys_apply.py,python,rand_unitary from qutip,import,,,,Import: rand_unitary from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, vector_to_operator, operator_to_vector, kraus_to_super,
    subsystem_apply, rand_dm, rand_unitary,
)",qutip,rand_unitary,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_subsys_apply.py,python,norm from numpy.linalg,local_import,,,,Import: norm from numpy.linalg,qutip,qutip,v5.0.4,from numpy.linalg import norm,numpy.linalg,norm,,,numpy.linalg,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_subsys_apply.py,python,rand_kraus_map from qutip.random_objects,local_import,,,,Import: rand_kraus_map from qutip.random_objects,qutip,qutip,v5.0.4,from qutip.random_objects import rand_kraus_map,qutip.random_objects,rand_kraus_map,,,qutip.random_objects,,,,,,,,,,,,
,test_subsys_apply.py,python,,,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_subsys_apply.py,python,,,,,,Directory: qutip\tests\test_subsys_apply.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_utilities.py,python,"_get_converter(orig, target)",function,,,,"Function: _get_converter(orig, target)",qutip,qutip,v5.0.4,,,,_get_converter,"(orig, target)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_utilities.py,python,test_unit_conversions_bad_unit(),function,,,,Function: test_unit_conversions_bad_unit(),qutip,qutip,v5.0.4,,,,test_unit_conversions_bad_unit,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_utilities.py,python,test_cpu_count(monkeypatch),function,,,,Function: test_cpu_count(monkeypatch),qutip,qutip,v5.0.4,,,,test_cpu_count,(monkeypatch),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_utilities.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_utilities.py,python,convert_unit from qutip,import,,,,Import: convert_unit from qutip,qutip,qutip,v5.0.4,"from qutip import convert_unit, clebsch, n_thermal",qutip,convert_unit,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_utilities.py,python,clebsch from qutip,import,,,,Import: clebsch from qutip,qutip,qutip,v5.0.4,"from qutip import convert_unit, clebsch, n_thermal",qutip,clebsch,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_utilities.py,python,n_thermal from qutip,import,,,,Import: n_thermal from qutip,qutip,qutip,v5.0.4,"from qutip import convert_unit, clebsch, n_thermal",qutip,n_thermal,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_utilities.py,python,qutip.utilities,import,,,,Import: qutip.utilities,qutip,qutip,v5.0.4,import qutip.utilities as utils,,qutip.utilities,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_utilities.py,python,partial from functools,import,,,,Import: partial from functools,qutip,qutip,v5.0.4,from functools import partial,functools,partial,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_utilities.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
,test_utilities.py,python,,,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_utilities.py,python,,,,,,Directory: qutip\tests\test_utilities.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_cyclic(),function,,,,Function: test_cyclic(),qutip,qutip,v5.0.4,,,,test_cyclic,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_diverging(),function,,,,Function: test_diverging(),qutip,qutip,v5.0.4,,,,test_diverging,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_sequential(),function,,,,Function: test_sequential(),qutip,qutip,v5.0.4,,,,test_sequential,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_set_ticklabels(),function,,,,Function: test_set_ticklabels(),qutip,qutip,v5.0.4,,,,test_set_ticklabels,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_equal_shape(),function,,,,Function: test_equal_shape(),qutip,qutip,v5.0.4,,,,test_equal_shape,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_plot_wigner_sphere_anim(),function,,,,Function: test_plot_wigner_sphere_anim(),qutip,qutip,v5.0.4,,,,test_plot_wigner_sphere_anim,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,to_oper_bra(oper),function,,,,Function: to_oper_bra(oper),qutip,qutip,v5.0.4,,,,to_oper_bra,(oper),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,to_oper(oper),function,,,,Function: to_oper(oper),qutip,qutip,v5.0.4,,,,to_oper,(oper),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_hinton1(),function,,,,Function: test_hinton1(),qutip,qutip,v5.0.4,,,,test_hinton1,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_hinton_anim(),function,,,,Function: test_hinton_anim(),qutip,qutip,v5.0.4,,,,test_hinton_anim,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_hinton_ValueError0(),function,,,,Function: test_hinton_ValueError0(),qutip,qutip,v5.0.4,,,,test_hinton_ValueError0,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_sphereplot_anim(),function,,,,Function: test_sphereplot_anim(),qutip,qutip,v5.0.4,,,,test_sphereplot_anim,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_get_matrix_components(),function,,,,Function: test_get_matrix_components(),qutip,qutip,v5.0.4,,,,test_get_matrix_components,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_matrix_histogram_zeros(),function,,,,Function: test_matrix_histogram_zeros(),qutip,qutip,v5.0.4,,,,test_matrix_histogram_zeros,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_matrix_histogram_anim(),function,,,,Function: test_matrix_histogram_anim(),qutip,qutip,v5.0.4,,,,test_matrix_histogram_anim,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_plot_energy_levels_ValueError(),function,,,,Function: test_plot_energy_levels_ValueError(),qutip,qutip,v5.0.4,,,,test_plot_energy_levels_ValueError,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_plot_fock_distribution_anim(),function,,,,Function: test_plot_fock_distribution_anim(),qutip,qutip,v5.0.4,,,,test_plot_fock_distribution_anim,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_plot_wigner_anim(),function,,,,Function: test_plot_wigner_anim(),qutip,qutip,v5.0.4,,,,test_plot_wigner_anim,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_plot_wigner_ValueError(),function,,,,Function: test_plot_wigner_ValueError(),qutip,qutip,v5.0.4,,,,test_plot_wigner_ValueError,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_plot_spin_distribution_ValueError(),function,,,,Function: test_plot_spin_distribution_ValueError(),qutip,qutip,v5.0.4,,,,test_plot_spin_distribution_ValueError,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_plot_qubism_anim(),function,,,,Function: test_plot_qubism_anim(),qutip,qutip,v5.0.4,,,,test_plot_qubism_anim,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_plot_qubism_dimension(),function,,,,Function: test_plot_qubism_dimension(),qutip,qutip,v5.0.4,,,,test_plot_qubism_dimension,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_plot_schmidt_anim(),function,,,,Function: test_plot_schmidt_anim(),qutip,qutip,v5.0.4,,,,test_plot_schmidt_anim,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,test_plot_schmidt_Error(),function,,,,Function: test_plot_schmidt_Error(),qutip,qutip,v5.0.4,,,,test_plot_schmidt_Error,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,"mpl = pytest.importorskip(""matplotlib"")",constant,"mpl = pytest.importorskip(""matplotlib"")",mpl,"pytest.importorskip(""matplotlib"")","Constant: mpl = pytest.importorskip(""matplotlib"")",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,"plt = pytest.importorskip(""matplotlib.pyplot"")",constant,"plt = pytest.importorskip(""matplotlib.pyplot"")",plt,"pytest.importorskip(""matplotlib.pyplot"")","Constant: plt = pytest.importorskip(""matplotlib.pyplot"")",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_visualization.py,python,sph_harm from scipy.special,local_import,,,,Import: sph_harm from scipy.special,qutip,qutip,v5.0.4,from scipy.special import sph_harm,scipy.special,sph_harm,,,scipy.special,,,,,,,,,,,,
,test_visualization.py,python,,,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_visualization.py,python,,,,,,Directory: qutip\tests\test_visualization.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('xs', ["""", 1, None], ids=['str', 'int', 'none'])] TestHusimiQ.test_failure_if_non_arraylike_coordinates(self, xs)",class_method,,,,"Class method: [pytest.mark.parametrize('xs', ["""", 1, None], ids=['str', 'int', 'none'])] TestHusimiQ.test_failure_if_non_arraylike_coordinates(self, xs)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_failure_if_non_arraylike_coordinates,"(self, xs)",,,,,,,,,"pytest.mark.parametrize('xs', ["""", 1, None], ids=['str', 'int', 'none'])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('ndim', [2, 3])] TestHusimiQ.test_failure_if_coordinates_not_1d(self, ndim)",class_method,,,,"Class method: [pytest.mark.parametrize('ndim', [2, 3])] TestHusimiQ.test_failure_if_coordinates_not_1d(self, ndim)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_failure_if_coordinates_not_1d,"(self, ndim)",,,,,,,,,"pytest.mark.parametrize('ndim', [2, 3])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('dm', [True, False], ids=['dm', 'ket'])] TestHusimiQ.test_failure_if_tensor_hilbert_space(self, dm)",class_method,,,,"Class method: [pytest.mark.parametrize('dm', [True, False], ids=['dm', 'ket'])] TestHusimiQ.test_failure_if_tensor_hilbert_space(self, dm)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_failure_if_tensor_hilbert_space,"(self, dm)",,,,,,,,,"pytest.mark.parametrize('dm', [True, False], ids=['dm', 'ket'])"
qutip_qutip_v5.0.4,test_wigner.py,python,TestHusimiQ.test_QFunc_raises_if_insufficient_memory(self),class_method,,,,Class method: TestHusimiQ.test_QFunc_raises_if_insufficient_memory(self),qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_QFunc_raises_if_insufficient_memory,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,TestHusimiQ.test_qfunc_warns_if_insufficient_memory(self),class_method,,,,Class method: TestHusimiQ.test_qfunc_warns_if_insufficient_memory(self),qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_qfunc_warns_if_insufficient_memory,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('obj', [
        pytest.param(np.eye(2, dtype=np.complex128), id='ndarray'),
        pytest.param([[1, 0], [0, 1]], id='list'),
        pytest.param(1, id='int'),
    ])] TestHusimiQ.test_failure_if_not_a_Qobj(self, obj)",class_method,,,,"Class method: [pytest.mark.parametrize('obj', [
        pytest.param(np.eye(2, dtype=np.complex128), id='ndarray'),
        pytest.param([[1, 0], [0, 1]], id='list'),
        pytest.param(1, id='int'),
    ])] TestHusimiQ.test_failure_if_not_a_Qobj(self, obj)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_failure_if_not_a_Qobj,"(self, obj)",,,,,,,,,"pytest.mark.parametrize('obj', [
        pytest.param(np.eye(2, dtype=np.complex128), id='ndarray'),
        pytest.param([[1, 0], [0, 1]], id='list'),
        pytest.param(1, id='int'),
    ])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('state', [
        pytest.param(lambda: qutip.rand_super(2), id='super'),
        pytest.param(lambda: qutip.rand_ket(2).dag(), id='bra'),
        pytest.param(lambda: 1j*qutip.rand_dm(2), id='non-dm operator'),
        pytest.param(lambda: qutip.Qobj([[1, 0], [0, 0]], dims=[[2], [2, 1]]),
                     id='nonsquare dm'),
        pytest.param(lambda: qutip.operator_to_vector(qutip.qeye(2)),
                     id='operator-ket'),
        pytest.param(lambda: qutip.operator_to_vector(qutip.qeye(2)).dag(),
                     id='operator-bra'),
    ])] TestHusimiQ.test_failure_if_not_a_state(self, state)",class_method,,,,"Class method: [pytest.mark.parametrize('state', [
        pytest.param(lambda: qutip.rand_super(2), id='super'),
        pytest.param(lambda: qutip.rand_ket(2).dag(), id='bra'),
        pytest.param(lambda: 1j*qutip.rand_dm(2), id='non-dm operator'),
        pytest.param(lambda: qutip.Qobj([[1, 0], [0, 0]], dims=[[2], [2, 1]]),
                     id='nonsquare dm'),
        pytest.param(lambda: qutip.operator_to_vector(qutip.qeye(2)),
                     id='operator-ket'),
        pytest.param(lambda: qutip.operator_to_vector(qutip.qeye(2)).dag(),
                     id='operator-bra'),
    ])] TestHusimiQ.test_failure_if_not_a_state(self, state)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_failure_if_not_a_state,"(self, state)",,,,,,,,,"pytest.mark.parametrize('state', [
        pytest.param(lambda: qutip.rand_super(2), id='super'),
        pytest.param(lambda: qutip.rand_ket(2).dag(), id='bra'),
        pytest.param(lambda: 1j*qutip.rand_dm(2), id='non-dm operator'),
        pytest.param(lambda: qutip.Qobj([[1, 0], [0, 0]], dims=[[2], [2, 1]]),
                     id='nonsquare dm'),
        pytest.param(lambda: qutip.operator_to_vector(qutip.qeye(2)),
                     id='operator-ket'),
        pytest.param(lambda: qutip.operator_to_vector(qutip.qeye(2)).dag(),
                     id='operator-bra'),
    ])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('g', [
        pytest.param(np.sqrt(2), id='natural units'),
        pytest.param(1, id='arb units'),
    ])] TestHusimiQ.test_function_and_class_are_equivalent(self, size, dm, n_xs, n_ys, g)",class_method,,,,"Class method: [pytest.mark.parametrize('g', [
        pytest.param(np.sqrt(2), id='natural units'),
        pytest.param(1, id='arb units'),
    ])] TestHusimiQ.test_function_and_class_are_equivalent(self, size, dm, n_xs, n_ys, g)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_function_and_class_are_equivalent,"(self, size, dm, n_xs, n_ys, g)",,,,,,,,,"pytest.mark.parametrize('g', [
        pytest.param(np.sqrt(2), id='natural units'),
        pytest.param(1, id='arb units'),
    ])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('n_ys', [5, 101])] TestHusimiQ.test_function_and_class_are_equivalent(self, size, dm, n_xs, n_ys, g)",class_method,,,,"Class method: [pytest.mark.parametrize('n_ys', [5, 101])] TestHusimiQ.test_function_and_class_are_equivalent(self, size, dm, n_xs, n_ys, g)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_function_and_class_are_equivalent,"(self, size, dm, n_xs, n_ys, g)",,,,,,,,,"pytest.mark.parametrize('n_ys', [5, 101])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('n_xs', [5, 101])] TestHusimiQ.test_function_and_class_are_equivalent(self, size, dm, n_xs, n_ys, g)",class_method,,,,"Class method: [pytest.mark.parametrize('n_xs', [5, 101])] TestHusimiQ.test_function_and_class_are_equivalent(self, size, dm, n_xs, n_ys, g)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_function_and_class_are_equivalent,"(self, size, dm, n_xs, n_ys, g)",,,,,,,,,"pytest.mark.parametrize('n_xs', [5, 101])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('dm', [True, False], ids=['dm', 'ket'])] TestHusimiQ.test_function_and_class_are_equivalent(self, size, dm, n_xs, n_ys, g)",class_method,,,,"Class method: [pytest.mark.parametrize('dm', [True, False], ids=['dm', 'ket'])] TestHusimiQ.test_function_and_class_are_equivalent(self, size, dm, n_xs, n_ys, g)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_function_and_class_are_equivalent,"(self, size, dm, n_xs, n_ys, g)",,,,,,,,,"pytest.mark.parametrize('dm', [True, False], ids=['dm', 'ket'])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('size', [5, 32])] TestHusimiQ.test_function_and_class_are_equivalent(self, size, dm, n_xs, n_ys, g)",class_method,,,,"Class method: [pytest.mark.parametrize('size', [5, 32])] TestHusimiQ.test_function_and_class_are_equivalent(self, size, dm, n_xs, n_ys, g)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_function_and_class_are_equivalent,"(self, size, dm, n_xs, n_ys, g)",,,,,,,,,"pytest.mark.parametrize('size', [5, 32])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('g', [
        pytest.param(np.sqrt(2), id='natural units'),
        pytest.param(1, id='arb units'),
    ])] TestHusimiQ.test_iterate_and_precompute_are_equivalent(self, size, n_xs, n_ys, g)",class_method,,,,"Class method: [pytest.mark.parametrize('g', [
        pytest.param(np.sqrt(2), id='natural units'),
        pytest.param(1, id='arb units'),
    ])] TestHusimiQ.test_iterate_and_precompute_are_equivalent(self, size, n_xs, n_ys, g)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_iterate_and_precompute_are_equivalent,"(self, size, n_xs, n_ys, g)",,,,,,,,,"pytest.mark.parametrize('g', [
        pytest.param(np.sqrt(2), id='natural units'),
        pytest.param(1, id='arb units'),
    ])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('n_ys', [5, 101])] TestHusimiQ.test_iterate_and_precompute_are_equivalent(self, size, n_xs, n_ys, g)",class_method,,,,"Class method: [pytest.mark.parametrize('n_ys', [5, 101])] TestHusimiQ.test_iterate_and_precompute_are_equivalent(self, size, n_xs, n_ys, g)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_iterate_and_precompute_are_equivalent,"(self, size, n_xs, n_ys, g)",,,,,,,,,"pytest.mark.parametrize('n_ys', [5, 101])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('n_xs', [5, 101])] TestHusimiQ.test_iterate_and_precompute_are_equivalent(self, size, n_xs, n_ys, g)",class_method,,,,"Class method: [pytest.mark.parametrize('n_xs', [5, 101])] TestHusimiQ.test_iterate_and_precompute_are_equivalent(self, size, n_xs, n_ys, g)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_iterate_and_precompute_are_equivalent,"(self, size, n_xs, n_ys, g)",,,,,,,,,"pytest.mark.parametrize('n_xs', [5, 101])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('size', [5, 32])] TestHusimiQ.test_iterate_and_precompute_are_equivalent(self, size, n_xs, n_ys, g)",class_method,,,,"Class method: [pytest.mark.parametrize('size', [5, 32])] TestHusimiQ.test_iterate_and_precompute_are_equivalent(self, size, n_xs, n_ys, g)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_iterate_and_precompute_are_equivalent,"(self, size, n_xs, n_ys, g)",,,,,,,,,"pytest.mark.parametrize('size', [5, 32])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('initial_size', [5, 8])] TestHusimiQ.test_same_class_can_take_many_sizes(self, dm, initial_size)",class_method,,,,"Class method: [pytest.mark.parametrize('initial_size', [5, 8])] TestHusimiQ.test_same_class_can_take_many_sizes(self, dm, initial_size)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_same_class_can_take_many_sizes,"(self, dm, initial_size)",,,,,,,,,"pytest.mark.parametrize('initial_size', [5, 8])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('dm', [True, False], ids=['dm', 'ket'])] TestHusimiQ.test_same_class_can_take_many_sizes(self, dm, initial_size)",class_method,,,,"Class method: [pytest.mark.parametrize('dm', [True, False], ids=['dm', 'ket'])] TestHusimiQ.test_same_class_can_take_many_sizes(self, dm, initial_size)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_same_class_can_take_many_sizes,"(self, dm, initial_size)",,,,,,,,,"pytest.mark.parametrize('dm', [True, False], ids=['dm', 'ket'])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('dm_first', [True, False])] TestHusimiQ.test_same_class_can_mix_ket_and_dm(self, dm_first)",class_method,,,,"Class method: [pytest.mark.parametrize('dm_first', [True, False])] TestHusimiQ.test_same_class_can_mix_ket_and_dm(self, dm_first)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_same_class_can_mix_ket_and_dm,"(self, dm_first)",,,,,,,,,"pytest.mark.parametrize('dm_first', [True, False])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('n_ys', [5, 101])] TestHusimiQ.test_qfunc_is_linear(self, n_xs, n_ys, mix)",class_method,,,,"Class method: [pytest.mark.parametrize('n_ys', [5, 101])] TestHusimiQ.test_qfunc_is_linear(self, n_xs, n_ys, mix)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_qfunc_is_linear,"(self, n_xs, n_ys, mix)",,,,,,,,,"pytest.mark.parametrize('n_ys', [5, 101])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('n_xs', [5, 101])] TestHusimiQ.test_qfunc_is_linear(self, n_xs, n_ys, mix)",class_method,,,,"Class method: [pytest.mark.parametrize('n_xs', [5, 101])] TestHusimiQ.test_qfunc_is_linear(self, n_xs, n_ys, mix)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_qfunc_is_linear,"(self, n_xs, n_ys, mix)",,,,,,,,,"pytest.mark.parametrize('n_xs', [5, 101])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('mix', [0.1, 0.5])] TestHusimiQ.test_qfunc_is_linear(self, n_xs, n_ys, mix)",class_method,,,,"Class method: [pytest.mark.parametrize('mix', [0.1, 0.5])] TestHusimiQ.test_qfunc_is_linear(self, n_xs, n_ys, mix)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_qfunc_is_linear,"(self, n_xs, n_ys, mix)",,,,,,,,,"pytest.mark.parametrize('mix', [0.1, 0.5])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('n_ys', [5, 101])] TestHusimiQ.test_ket_and_dm_give_same_result(self, n_xs, n_ys, size)",class_method,,,,"Class method: [pytest.mark.parametrize('n_ys', [5, 101])] TestHusimiQ.test_ket_and_dm_give_same_result(self, n_xs, n_ys, size)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_ket_and_dm_give_same_result,"(self, n_xs, n_ys, size)",,,,,,,,,"pytest.mark.parametrize('n_ys', [5, 101])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('n_xs', [5, 101])] TestHusimiQ.test_ket_and_dm_give_same_result(self, n_xs, n_ys, size)",class_method,,,,"Class method: [pytest.mark.parametrize('n_xs', [5, 101])] TestHusimiQ.test_ket_and_dm_give_same_result(self, n_xs, n_ys, size)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_ket_and_dm_give_same_result,"(self, n_xs, n_ys, size)",,,,,,,,,"pytest.mark.parametrize('n_xs', [5, 101])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('size', [5, 32])] TestHusimiQ.test_ket_and_dm_give_same_result(self, n_xs, n_ys, size)",class_method,,,,"Class method: [pytest.mark.parametrize('size', [5, 32])] TestHusimiQ.test_ket_and_dm_give_same_result(self, n_xs, n_ys, size)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_ket_and_dm_give_same_result,"(self, n_xs, n_ys, size)",,,,,,,,,"pytest.mark.parametrize('size', [5, 32])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('g', [
        pytest.param(np.sqrt(2), id='natural units'),
        pytest.param(1, id='arb units'),
    ])] TestHusimiQ.test_against_naive_implementation(self, xs, ys, g, size)",class_method,,,,"Class method: [pytest.mark.parametrize('g', [
        pytest.param(np.sqrt(2), id='natural units'),
        pytest.param(1, id='arb units'),
    ])] TestHusimiQ.test_against_naive_implementation(self, xs, ys, g, size)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_against_naive_implementation,"(self, xs, ys, g, size)",,,,,,,,,"pytest.mark.parametrize('g', [
        pytest.param(np.sqrt(2), id='natural units'),
        pytest.param(1, id='arb units'),
    ])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('ys', [
        pytest.param(np.linspace(-1, 1, 5), id='(-1,1,5)'),
        pytest.param(np.linspace(0, 2, 3), id='(0,2,3)'),
    ])] TestHusimiQ.test_against_naive_implementation(self, xs, ys, g, size)",class_method,,,,"Class method: [pytest.mark.parametrize('ys', [
        pytest.param(np.linspace(-1, 1, 5), id='(-1,1,5)'),
        pytest.param(np.linspace(0, 2, 3), id='(0,2,3)'),
    ])] TestHusimiQ.test_against_naive_implementation(self, xs, ys, g, size)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_against_naive_implementation,"(self, xs, ys, g, size)",,,,,,,,,"pytest.mark.parametrize('ys', [
        pytest.param(np.linspace(-1, 1, 5), id='(-1,1,5)'),
        pytest.param(np.linspace(0, 2, 3), id='(0,2,3)'),
    ])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('xs', [
        pytest.param(np.linspace(-1, 1, 5), id='(-1,1,5)'),
        pytest.param(np.linspace(0, 2, 3), id='(0,2,3)'),
    ])] TestHusimiQ.test_against_naive_implementation(self, xs, ys, g, size)",class_method,,,,"Class method: [pytest.mark.parametrize('xs', [
        pytest.param(np.linspace(-1, 1, 5), id='(-1,1,5)'),
        pytest.param(np.linspace(0, 2, 3), id='(0,2,3)'),
    ])] TestHusimiQ.test_against_naive_implementation(self, xs, ys, g, size)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_against_naive_implementation,"(self, xs, ys, g, size)",,,,,,,,,"pytest.mark.parametrize('xs', [
        pytest.param(np.linspace(-1, 1, 5), id='(-1,1,5)'),
        pytest.param(np.linspace(0, 2, 3), id='(0,2,3)'),
    ])"
qutip_qutip_v5.0.4,test_wigner.py,python,"[pytest.mark.parametrize('size', [3, 5])] TestHusimiQ.test_against_naive_implementation(self, xs, ys, g, size)",class_method,,,,"Class method: [pytest.mark.parametrize('size', [3, 5])] TestHusimiQ.test_against_naive_implementation(self, xs, ys, g, size)",qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,test_against_naive_implementation,"(self, xs, ys, g, size)",,,,,,,,,"pytest.mark.parametrize('size', [3, 5])"
qutip_qutip_v5.0.4,test_wigner.py,python,TestHusimiQ,class,,,,Class: TestHusimiQ,qutip,qutip,v5.0.4,,,,,,,TestHusimiQ,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,test_wigner_bell1_su2parity(),function,,,,Function: test_wigner_bell1_su2parity(),qutip,qutip,v5.0.4,,,,test_wigner_bell1_su2parity,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,test_parity(),function,,,,Function: test_parity(),qutip,qutip,v5.0.4,,,,test_parity,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,test_wigner_coherent(),function,,,,Function: test_wigner_coherent(),qutip,qutip,v5.0.4,,,,test_wigner_coherent,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,test_wigner_fock(),function,,,,Function: test_wigner_fock(),qutip,qutip,v5.0.4,,,,test_wigner_fock,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,test_wigner_compare_methods_dm(),function,,,,Function: test_wigner_compare_methods_dm(),qutip,qutip,v5.0.4,,,,test_wigner_compare_methods_dm,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,test_wigner_compare_methods_ket(),function,,,,Function: test_wigner_compare_methods_ket(),qutip,qutip,v5.0.4,,,,test_wigner_compare_methods_ket,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,test_wigner_fft_comparse_ket(),function,,,,Function: test_wigner_fft_comparse_ket(),qutip,qutip,v5.0.4,,,,test_wigner_fft_comparse_ket,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,test_wigner_fft_comparse_dm(),function,,,,Function: test_wigner_fft_comparse_dm(),qutip,qutip,v5.0.4,,,,test_wigner_fft_comparse_dm,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,test_wigner_clenshaw_iter_dm(),function,,,,Function: test_wigner_clenshaw_iter_dm(),qutip,qutip,v5.0.4,,,,test_wigner_clenshaw_iter_dm,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,test_wigner_clenshaw_sp_iter_dm(),function,,,,Function: test_wigner_clenshaw_sp_iter_dm(),qutip,qutip,v5.0.4,,,,test_wigner_clenshaw_sp_iter_dm,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,itertools,import,,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,,itertools,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,trapezoid from scipy.integrate,local_import,,,,Import: trapezoid from scipy.integrate,qutip,qutip,v5.0.4,from scipy.integrate import trapezoid,scipy.integrate,trapezoid,,,scipy.integrate,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,laguerre from scipy.special,local_import,,,,Import: laguerre from scipy.special,qutip,qutip,v5.0.4,from scipy.special import laguerre,scipy.special,laguerre,,,scipy.special,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,rand from numpy.random,local_import,,,,Import: rand from numpy.random,qutip,qutip,v5.0.4,from numpy.random import rand,numpy.random,rand,,,numpy.random,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,assert_equal from numpy.testing,local_import,,,,Import: assert_equal from numpy.testing,qutip,qutip,v5.0.4,"from numpy.testing import assert_equal, assert_almost_equal, assert_allclose",numpy.testing,assert_equal,,,numpy.testing,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,assert_almost_equal from numpy.testing,local_import,,,,Import: assert_almost_equal from numpy.testing,qutip,qutip,v5.0.4,"from numpy.testing import assert_equal, assert_almost_equal, assert_allclose",numpy.testing,assert_almost_equal,,,numpy.testing,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,assert_allclose from numpy.testing,local_import,,,,Import: assert_allclose from numpy.testing,qutip,qutip,v5.0.4,"from numpy.testing import assert_equal, assert_almost_equal, assert_allclose",numpy.testing,assert_allclose,,,numpy.testing,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,coherent from qutip.core.states,local_import,,,,Import: coherent from qutip.core.states,qutip,qutip,v5.0.4,"from qutip.core.states import coherent, fock, ket, bell_state",qutip.core.states,coherent,,,qutip.core.states,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,fock from qutip.core.states,local_import,,,,Import: fock from qutip.core.states,qutip,qutip,v5.0.4,"from qutip.core.states import coherent, fock, ket, bell_state",qutip.core.states,fock,,,qutip.core.states,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,ket from qutip.core.states,local_import,,,,Import: ket from qutip.core.states,qutip,qutip,v5.0.4,"from qutip.core.states import coherent, fock, ket, bell_state",qutip.core.states,ket,,,qutip.core.states,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,bell_state from qutip.core.states,local_import,,,,Import: bell_state from qutip.core.states,qutip,qutip,v5.0.4,"from qutip.core.states import coherent, fock, ket, bell_state",qutip.core.states,bell_state,,,qutip.core.states,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,wigner from qutip.wigner,local_import,,,,Import: wigner from qutip.wigner,qutip,qutip,v5.0.4,"from qutip.wigner import wigner, wigner_transform, _parity",qutip.wigner,wigner,,,qutip.wigner,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,wigner_transform from qutip.wigner,local_import,,,,Import: wigner_transform from qutip.wigner,qutip,qutip,v5.0.4,"from qutip.wigner import wigner, wigner_transform, _parity",qutip.wigner,wigner_transform,,,qutip.wigner,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,_parity from qutip.wigner,local_import,,,,Import: _parity from qutip.wigner,qutip,qutip,v5.0.4,"from qutip.wigner import wigner, wigner_transform, _parity",qutip.wigner,_parity,,,qutip.wigner,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,rand_dm from qutip.random_objects,local_import,,,,Import: rand_dm from qutip.random_objects,qutip,qutip,v5.0.4,"from qutip.random_objects import rand_dm, rand_ket",qutip.random_objects,rand_dm,,,qutip.random_objects,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_wigner.py,python,rand_ket from qutip.random_objects,local_import,,,,Import: rand_ket from qutip.random_objects,qutip,qutip,v5.0.4,"from qutip.random_objects import rand_dm, rand_ket",qutip.random_objects,rand_ket,,,qutip.random_objects,,,,,,,,,,,,
,test_wigner.py,python,,,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_wigner.py,python,,,,,,Directory: qutip\tests\test_wigner.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: qutip\tests,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: qutip\tests\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brtools.py,python,_make_rand_data(shape),function,,,,Function: _make_rand_data(shape),qutip,qutip,v5.0.4,,,,_make_rand_data,(shape),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brtools.py,python,test_eigen_transform_ket(),function,,,,Function: test_eigen_transform_ket(),qutip,qutip,v5.0.4,,,,test_eigen_transform_ket,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brtools.py,python,test_eigen_transform_dm(),function,,,,Function: test_eigen_transform_dm(),qutip,qutip,v5.0.4,,,,test_eigen_transform_dm,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brtools.py,python,test_eigen_transform_oper_ket(),function,,,,Function: test_eigen_transform_oper_ket(),qutip,qutip,v5.0.4,,,,test_eigen_transform_oper_ket,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brtools.py,python,test_eigen_transform_super_ops(),function,,,,Function: test_eigen_transform_super_ops(),qutip,qutip,v5.0.4,,,,test_eigen_transform_super_ops,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brtools.py,python,test_bloch_redfield_tensor_spectral_string(),function,,,,Function: test_bloch_redfield_tensor_spectral_string(),qutip,qutip,v5.0.4,,,,test_bloch_redfield_tensor_spectral_string,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brtools.py,python,test_bloch_redfield_tensor_spectral_callable(),function,,,,Function: test_bloch_redfield_tensor_spectral_callable(),qutip,qutip,v5.0.4,,,,test_bloch_redfield_tensor_spectral_callable,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brtools.py,python,"transform = {
    0: lambda x: x,
    1: qutip.data.transpose,
    2: qutip.data.conj,
    3: qutip.data.adjoint
}",constant,"transform = {
    0: lambda x: x,
    1: qutip.data.transpose,
    2: qutip.data.conj,
    3: qutip.data.adjoint
}",transform,"{
    0: lambda x: x,
    1: qutip.data.transpose,
    2: qutip.data.conj,
    3: qutip.data.adjoint
}","Constant: transform = {
    0: lambda x: x,
    1: qutip.data.transpose,
    2: qutip.data.conj,
    3: qutip.data.adjoint
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brtools.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brtools.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brtools.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brtools.py,python,matmul_var_data from qutip.core._brtools,local_import,,,,Import: matmul_var_data from qutip.core._brtools,qutip,qutip,v5.0.4,"from qutip.core._brtools import matmul_var_data, _EigenBasisTransform",qutip.core._brtools,matmul_var_data,,,qutip.core._brtools,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brtools.py,python,_EigenBasisTransform from qutip.core._brtools,local_import,,,,Import: _EigenBasisTransform from qutip.core._brtools,qutip,qutip,v5.0.4,"from qutip.core._brtools import matmul_var_data, _EigenBasisTransform",qutip.core._brtools,_EigenBasisTransform,,,qutip.core._brtools,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brtools.py,python,brterm from qutip.core.blochredfield,local_import,,,,Import: brterm from qutip.core.blochredfield,qutip,qutip,v5.0.4,"from qutip.core.blochredfield import brterm, bloch_redfield_tensor",qutip.core.blochredfield,brterm,,,qutip.core.blochredfield,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brtools.py,python,bloch_redfield_tensor from qutip.core.blochredfield,local_import,,,,Import: bloch_redfield_tensor from qutip.core.blochredfield,qutip,qutip,v5.0.4,"from qutip.core.blochredfield import brterm, bloch_redfield_tensor",qutip.core.blochredfield,bloch_redfield_tensor,,,qutip.core.blochredfield,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brtools.py,python,_br_term_dense from qutip.core._brtensor,local_import,,,,Import: _br_term_dense from qutip.core._brtensor,qutip,qutip,v5.0.4,"from qutip.core._brtensor import (_br_term_dense, _br_term_sparse,
                                  _br_term_data, _BlochRedfieldElement)",qutip.core._brtensor,_br_term_dense,,,qutip.core._brtensor,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brtools.py,python,_br_term_sparse from qutip.core._brtensor,local_import,,,,Import: _br_term_sparse from qutip.core._brtensor,qutip,qutip,v5.0.4,"from qutip.core._brtensor import (_br_term_dense, _br_term_sparse,
                                  _br_term_data, _BlochRedfieldElement)",qutip.core._brtensor,_br_term_sparse,,,qutip.core._brtensor,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brtools.py,python,_br_term_data from qutip.core._brtensor,local_import,,,,Import: _br_term_data from qutip.core._brtensor,qutip,qutip,v5.0.4,"from qutip.core._brtensor import (_br_term_dense, _br_term_sparse,
                                  _br_term_data, _BlochRedfieldElement)",qutip.core._brtensor,_br_term_data,,,qutip.core._brtensor,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brtools.py,python,_BlochRedfieldElement from qutip.core._brtensor,local_import,,,,Import: _BlochRedfieldElement from qutip.core._brtensor,qutip,qutip,v5.0.4,"from qutip.core._brtensor import (_br_term_dense, _br_term_sparse,
                                  _br_term_data, _BlochRedfieldElement)",qutip.core._brtensor,_BlochRedfieldElement,,,qutip.core._brtensor,,,,,,,,,,,,
,test_brtools.py,python,,,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_brtools.py,python,,,,,,Directory: qutip\tests\core\test_brtools.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,"f(t, w)",function,,,,"Function: f(t, w)",qutip,qutip,v5.0.4,,,,f,"(t, w)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,"g(t, w)",function,,,,"Function: g(t, w)",qutip,qutip,v5.0.4,,,,g,"(t, w)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,"h(t, a, b)",function,,,,"Function: h(t, a, b)",qutip,qutip,v5.0.4,,,,h,"(t, a, b)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,"f_kw(t, w, **args)",function,,,,"Function: f_kw(t, w, **args)",qutip,qutip,v5.0.4,,,,f_kw,"(t, w, **args)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,"g_kw(t, w, **args)",function,,,,"Function: g_kw(t, w, **args)",qutip,qutip,v5.0.4,,,,g_kw,"(t, w, **args)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,"h_kw(t, a, b, **args)",function,,,,"Function: h_kw(t, a, b, **args)",qutip,qutip,v5.0.4,,,,h_kw,"(t, a, b, **args)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,"f_qtv4(t, args)",function,,,,"Function: f_qtv4(t, args)",qutip,qutip,v5.0.4,,,,f_qtv4,"(t, args)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,"g_qtv4(t, args)",function,,,,"Function: g_qtv4(t, args)",qutip,qutip,v5.0.4,,,,g_qtv4,"(t, args)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,"h_qtv4(t, args)",function,,,,"Function: h_qtv4(t, args)",qutip,qutip,v5.0.4,,,,h_qtv4,"(t, args)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,"_assert_eq_over_interval(coeff1, coeff2, rtol=1e-12, inside=False)",function,,,,"Function: _assert_eq_over_interval(coeff1, coeff2, rtol=1e-12, inside=False)",qutip,qutip,v5.0.4,,,,_assert_eq_over_interval,"(coeff1, coeff2, rtol=1e-12, inside=False)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,"coeff_generator(style, func)",function,,,,"Function: coeff_generator(style, func)",qutip,qutip,v5.0.4,,,,coeff_generator,"(style, func)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,test_ConstantCoefficient(),function,,,,Function: test_ConstantCoefficient(),qutip,qutip,v5.0.4,,,,test_ConstantCoefficient,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,test_warn_no_cython(),function,,,,Function: test_warn_no_cython(),qutip,qutip,v5.0.4,,,,test_warn_no_cython,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,_add(coeff),function,,,,Function: _add(coeff),qutip,qutip,v5.0.4,,,,_add,(coeff),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,_pass(coeff),function,,,,Function: _pass(coeff),qutip,qutip,v5.0.4,,,,_pass,(coeff),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,_mul(coeff),function,,,,Function: _mul(coeff),qutip,qutip,v5.0.4,,,,_mul,(coeff),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,"args = {""w"": 1j}",constant,"args = {""w"": 1j}",args,"{""w"": 1j}","Constant: args = {""w"": 1j}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,"tlist = np.linspace(0, 1, 101)",constant,"tlist = np.linspace(0, 1, 101)",tlist,"np.linspace(0, 1, 101)","Constant: tlist = np.linspace(0, 1, 101)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,"f_asarray = f(tlist, **args)",constant,"f_asarray = f(tlist, **args)",f_asarray,"f(tlist, **args)","Constant: f_asarray = f(tlist, **args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,"g_asarray = g(tlist, **args)",constant,"g_asarray = g(tlist, **args)",g_asarray,"g(tlist, **args)","Constant: g_asarray = g(tlist, **args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,"tlistlog = np.logspace(-2, 0, 501)",constant,"tlistlog = np.logspace(-2, 0, 501)",tlistlog,"np.logspace(-2, 0, 501)","Constant: tlistlog = np.logspace(-2, 0, 501)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,"f_asarraylog = f(tlistlog, **args)",constant,"f_asarraylog = f(tlistlog, **args)",f_asarraylog,"f(tlistlog, **args)","Constant: f_asarraylog = f(tlistlog, **args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,pickle,import,,,,Import: pickle,qutip,qutip,v5.0.4,import pickle,,pickle,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,scipy.interpolate,import,,,,Import: scipy.interpolate,qutip,qutip,v5.0.4,import scipy.interpolate as interp,,scipy.interpolate,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,partial from functools,import,,,,Import: partial from functools,qutip,qutip,v5.0.4,from functools import partial,functools,partial,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,coefficient from qutip.core.coefficient,local_import,,,,Import: coefficient from qutip.core.coefficient,qutip,qutip,v5.0.4,"from qutip.core.coefficient import (coefficient, norm, conj, const,
                                    CompilationOptions, Coefficient,
                                    clean_compiled_coefficient,
                                    WARN_MISSING_MODULE,
                                    )",qutip.core.coefficient,coefficient,,,qutip.core.coefficient,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,norm from qutip.core.coefficient,local_import,,,,Import: norm from qutip.core.coefficient,qutip,qutip,v5.0.4,"from qutip.core.coefficient import (coefficient, norm, conj, const,
                                    CompilationOptions, Coefficient,
                                    clean_compiled_coefficient,
                                    WARN_MISSING_MODULE,
                                    )",qutip.core.coefficient,norm,,,qutip.core.coefficient,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,conj from qutip.core.coefficient,local_import,,,,Import: conj from qutip.core.coefficient,qutip,qutip,v5.0.4,"from qutip.core.coefficient import (coefficient, norm, conj, const,
                                    CompilationOptions, Coefficient,
                                    clean_compiled_coefficient,
                                    WARN_MISSING_MODULE,
                                    )",qutip.core.coefficient,conj,,,qutip.core.coefficient,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,const from qutip.core.coefficient,local_import,,,,Import: const from qutip.core.coefficient,qutip,qutip,v5.0.4,"from qutip.core.coefficient import (coefficient, norm, conj, const,
                                    CompilationOptions, Coefficient,
                                    clean_compiled_coefficient,
                                    WARN_MISSING_MODULE,
                                    )",qutip.core.coefficient,const,,,qutip.core.coefficient,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,CompilationOptions from qutip.core.coefficient,local_import,,,,Import: CompilationOptions from qutip.core.coefficient,qutip,qutip,v5.0.4,"from qutip.core.coefficient import (coefficient, norm, conj, const,
                                    CompilationOptions, Coefficient,
                                    clean_compiled_coefficient,
                                    WARN_MISSING_MODULE,
                                    )",qutip.core.coefficient,CompilationOptions,,,qutip.core.coefficient,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,Coefficient from qutip.core.coefficient,local_import,,,,Import: Coefficient from qutip.core.coefficient,qutip,qutip,v5.0.4,"from qutip.core.coefficient import (coefficient, norm, conj, const,
                                    CompilationOptions, Coefficient,
                                    clean_compiled_coefficient,
                                    WARN_MISSING_MODULE,
                                    )",qutip.core.coefficient,Coefficient,,,qutip.core.coefficient,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,clean_compiled_coefficient from qutip.core.coefficient,local_import,,,,Import: clean_compiled_coefficient from qutip.core.coefficient,qutip,qutip,v5.0.4,"from qutip.core.coefficient import (coefficient, norm, conj, const,
                                    CompilationOptions, Coefficient,
                                    clean_compiled_coefficient,
                                    WARN_MISSING_MODULE,
                                    )",qutip.core.coefficient,clean_compiled_coefficient,,,qutip.core.coefficient,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_coefficient.py,python,WARN_MISSING_MODULE from qutip.core.coefficient,local_import,,,,Import: WARN_MISSING_MODULE from qutip.core.coefficient,qutip,qutip,v5.0.4,"from qutip.core.coefficient import (coefficient, norm, conj, const,
                                    CompilationOptions, Coefficient,
                                    clean_compiled_coefficient,
                                    WARN_MISSING_MODULE,
                                    )",qutip.core.coefficient,WARN_MISSING_MODULE,,,qutip.core.coefficient,,,,,,,,,,,,
,test_coefficient.py,python,,,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_coefficient.py,python,,,,,,Directory: qutip\tests\core\test_coefficient.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,"TestFlattenUnflatten.test_flatten(self, base, flat)",class_method,,,,"Class method: TestFlattenUnflatten.test_flatten(self, base, flat)",qutip,qutip,v5.0.4,,,,,,,TestFlattenUnflatten,test_flatten,"(self, base, flat)",,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,"TestFlattenUnflatten.test_unflatten(self, base, flat)",class_method,,,,"Class method: TestFlattenUnflatten.test_unflatten(self, base, flat)",qutip,qutip,v5.0.4,,,,,,,TestFlattenUnflatten,test_unflatten,"(self, base, flat)",,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,"TestSuperOperatorDimsModification.test_dims_to_tensor_perm(self, indices)",class_method,,,,"Class method: TestSuperOperatorDimsModification.test_dims_to_tensor_perm(self, indices)",qutip,qutip,v5.0.4,,,,,,,TestSuperOperatorDimsModification,test_dims_to_tensor_perm,"(self, indices)",,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,"TestSuperOperatorDimsModification.test_dims_idxs_to_tensor_idxs(self, indices)",class_method,,,,"Class method: TestSuperOperatorDimsModification.test_dims_idxs_to_tensor_idxs(self, indices)",qutip,qutip,v5.0.4,,,,,,,TestSuperOperatorDimsModification,test_dims_idxs_to_tensor_idxs,"(self, indices)",,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,"TestSuperOperatorDimsModification.test_dims_to_tensor_shape(self, indices)",class_method,,,,"Class method: TestSuperOperatorDimsModification.test_dims_to_tensor_shape(self, indices)",qutip,qutip,v5.0.4,,,,,,,TestSuperOperatorDimsModification,test_dims_to_tensor_shape,"(self, indices)",,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,"[pytest.mark.parametrize([""base"", ""expected""], [
        pytest.param([[2], [2]], 'oper'),
        pytest.param([[2, 3], [2, 3]], 'oper'),
        pytest.param([[2], [3]], 'oper'),
        pytest.param([[2], [1]], 'ket'),
        pytest.param([[1], [2]], 'bra'),
        pytest.param([[[2, 3], [2, 3]], [1]], 'operator-ket'),
        pytest.param([[1], [[2, 3], [2, 3]]], 'operator-bra'),
        pytest.param([[[3], [3]], [[2, 3], [2, 3]]], 'super'),
    ])] TestTypeFromDims.test_Dimensions_type(self, base, expected)",class_method,,,,"Class method: [pytest.mark.parametrize([""base"", ""expected""], [
        pytest.param([[2], [2]], 'oper'),
        pytest.param([[2, 3], [2, 3]], 'oper'),
        pytest.param([[2], [3]], 'oper'),
        pytest.param([[2], [1]], 'ket'),
        pytest.param([[1], [2]], 'bra'),
        pytest.param([[[2, 3], [2, 3]], [1]], 'operator-ket'),
        pytest.param([[1], [[2, 3], [2, 3]]], 'operator-bra'),
        pytest.param([[[3], [3]], [[2, 3], [2, 3]]], 'super'),
    ])] TestTypeFromDims.test_Dimensions_type(self, base, expected)",qutip,qutip,v5.0.4,,,,,,,TestTypeFromDims,test_Dimensions_type,"(self, base, expected)",,,,,,,,,"pytest.mark.parametrize([""base"", ""expected""], [
        pytest.param([[2], [2]], 'oper'),
        pytest.param([[2, 3], [2, 3]], 'oper'),
        pytest.param([[2], [3]], 'oper'),
        pytest.param([[2], [1]], 'ket'),
        pytest.param([[1], [2]], 'bra'),
        pytest.param([[[2, 3], [2, 3]], [1]], 'operator-ket'),
        pytest.param([[1], [[2, 3], [2, 3]]], 'operator-bra'),
        pytest.param([[[3], [3]], [[2, 3], [2, 3]]], 'super'),
    ])"
qutip_qutip_v5.0.4,test_dimensions.py,python,"[pytest.mark.parametrize([""base"", ""expected""], [
        pytest.param([[1], [3]], [[1], [3]], id=""ket trivial""),
        pytest.param([[1, 1], [2, 3]], [[1], [6]], id=""ket tensor""),
        pytest.param([[2], [1]], [[2], [1]], id=""bra trivial""),
        pytest.param([[2, 3], [1, 1]], [[6], [1]], id=""bra tensor""),
        pytest.param([[5], [5]], [[5], [5]], id=""oper trivial""),
        pytest.param([[2, 3], [2, 3]], [[6], [6]], id=""oper tensor""),
    ])] TestCollapseDims.test_oper(self, base, expected)",class_method,,,,"Class method: [pytest.mark.parametrize([""base"", ""expected""], [
        pytest.param([[1], [3]], [[1], [3]], id=""ket trivial""),
        pytest.param([[1, 1], [2, 3]], [[1], [6]], id=""ket tensor""),
        pytest.param([[2], [1]], [[2], [1]], id=""bra trivial""),
        pytest.param([[2, 3], [1, 1]], [[6], [1]], id=""bra tensor""),
        pytest.param([[5], [5]], [[5], [5]], id=""oper trivial""),
        pytest.param([[2, 3], [2, 3]], [[6], [6]], id=""oper tensor""),
    ])] TestCollapseDims.test_oper(self, base, expected)",qutip,qutip,v5.0.4,,,,,,,TestCollapseDims,test_oper,"(self, base, expected)",,,,,,,,,"pytest.mark.parametrize([""base"", ""expected""], [
        pytest.param([[1], [3]], [[1], [3]], id=""ket trivial""),
        pytest.param([[1, 1], [2, 3]], [[1], [6]], id=""ket tensor""),
        pytest.param([[2], [1]], [[2], [1]], id=""bra trivial""),
        pytest.param([[2, 3], [1, 1]], [[6], [1]], id=""bra tensor""),
        pytest.param([[5], [5]], [[5], [5]], id=""oper trivial""),
        pytest.param([[2, 3], [2, 3]], [[6], [6]], id=""oper tensor""),
    ])"
qutip_qutip_v5.0.4,test_dimensions.py,python,"[pytest.mark.parametrize([""base"", ""expected""], [
        pytest.param([[[1]], [[2, 3], [2, 3]]],
                     [[[1]], [[6], [6]]], id=""operator-ket""),
        pytest.param([[[2, 3], [2, 3]], [[1]]],
                     [[[6], [6]], [[1]]], id=""operator-bra""),
        pytest.param([[[2, 3], [2, 3]], [[2, 3], [2, 3]]],
                     [[[6], [6]], [[6], [6]]], id=""super""),
    ])] TestCollapseDims.test_super(self, base, expected)",class_method,,,,"Class method: [pytest.mark.parametrize([""base"", ""expected""], [
        pytest.param([[[1]], [[2, 3], [2, 3]]],
                     [[[1]], [[6], [6]]], id=""operator-ket""),
        pytest.param([[[2, 3], [2, 3]], [[1]]],
                     [[[6], [6]], [[1]]], id=""operator-bra""),
        pytest.param([[[2, 3], [2, 3]], [[2, 3], [2, 3]]],
                     [[[6], [6]], [[6], [6]]], id=""super""),
    ])] TestCollapseDims.test_super(self, base, expected)",qutip,qutip,v5.0.4,,,,,,,TestCollapseDims,test_super,"(self, base, expected)",,,,,,,,,"pytest.mark.parametrize([""base"", ""expected""], [
        pytest.param([[[1]], [[2, 3], [2, 3]]],
                     [[[1]], [[6], [6]]], id=""operator-ket""),
        pytest.param([[[2, 3], [2, 3]], [[1]]],
                     [[[6], [6]], [[1]]], id=""operator-bra""),
        pytest.param([[[2, 3], [2, 3]], [[2, 3], [2, 3]]],
                     [[[6], [6]], [[6], [6]]], id=""super""),
    ])"
qutip_qutip_v5.0.4,test_dimensions.py,python,TestFlattenUnflatten,class,,,,Class: TestFlattenUnflatten,qutip,qutip,v5.0.4,,,,,,,TestFlattenUnflatten,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,TestSuperOperatorDimsModification,class,,,,Class: TestSuperOperatorDimsModification,qutip,qutip,v5.0.4,,,,,,,TestSuperOperatorDimsModification,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,TestTypeFromDims,class,,,,Class: TestTypeFromDims,qutip,qutip,v5.0.4,,,,,,,TestTypeFromDims,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,TestCollapseDims,class,,,,Class: TestCollapseDims,qutip,qutip,v5.0.4,,,,,,,TestCollapseDims,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,test_dims_matmul_bad(),function,,,,Function: test_dims_matmul_bad(),qutip,qutip,v5.0.4,,,,test_dims_matmul_bad,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,test_dims_comparison(),function,,,,Function: test_dims_comparison(),qutip,qutip,v5.0.4,,,,test_dims_comparison,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,"_Indices = collections.namedtuple('_Indices', ['base', 'permutation', 'shape'])",constant,"_Indices = collections.namedtuple('_Indices', ['base', 'permutation', 'shape'])",_Indices,"collections.namedtuple('_Indices', ['base', 'permutation', 'shape'])","Constant: _Indices = collections.namedtuple('_Indices', ['base', 'permutation', 'shape'])",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,collections,import,,,,Import: collections,qutip,qutip,v5.0.4,import collections,,collections,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,flatten from qutip.core.dimensions,local_import,,,,Import: flatten from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",qutip.core.dimensions,flatten,,,qutip.core.dimensions,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,unflatten from qutip.core.dimensions,local_import,,,,Import: unflatten from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",qutip.core.dimensions,unflatten,,,qutip.core.dimensions,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,enumerate_flat from qutip.core.dimensions,local_import,,,,Import: enumerate_flat from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",qutip.core.dimensions,enumerate_flat,,,qutip.core.dimensions,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,deep_remove from qutip.core.dimensions,local_import,,,,Import: deep_remove from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",qutip.core.dimensions,deep_remove,,,qutip.core.dimensions,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,deep_map from qutip.core.dimensions,local_import,,,,Import: deep_map from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",qutip.core.dimensions,deep_map,,,qutip.core.dimensions,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,dims_idxs_to_tensor_idxs from qutip.core.dimensions,local_import,,,,Import: dims_idxs_to_tensor_idxs from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",qutip.core.dimensions,dims_idxs_to_tensor_idxs,,,qutip.core.dimensions,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,dims_to_tensor_shape from qutip.core.dimensions,local_import,,,,Import: dims_to_tensor_shape from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",qutip.core.dimensions,dims_to_tensor_shape,,,qutip.core.dimensions,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,dims_to_tensor_perm from qutip.core.dimensions,local_import,,,,Import: dims_to_tensor_perm from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",qutip.core.dimensions,dims_to_tensor_perm,,,qutip.core.dimensions,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,collapse_dims_super from qutip.core.dimensions,local_import,,,,Import: collapse_dims_super from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",qutip.core.dimensions,collapse_dims_super,,,qutip.core.dimensions,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,collapse_dims_oper from qutip.core.dimensions,local_import,,,,Import: collapse_dims_oper from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",qutip.core.dimensions,collapse_dims_oper,,,qutip.core.dimensions,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dimensions.py,python,Dimensions from qutip.core.dimensions,local_import,,,,Import: Dimensions from qutip.core.dimensions,qutip,qutip,v5.0.4,"from qutip.core.dimensions import (
    flatten, unflatten, enumerate_flat, deep_remove, deep_map,
    dims_idxs_to_tensor_idxs, dims_to_tensor_shape, dims_to_tensor_perm,
    collapse_dims_super, collapse_dims_oper, Dimensions
)",qutip.core.dimensions,Dimensions,,,qutip.core.dimensions,,,,,,,,,,,,
,test_dimensions.py,python,,,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_dimensions.py,python,,,,,,Directory: qutip\tests\core\test_dimensions.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_eigen.py,python,"is_eigen_set(oper, vals, vecs)",function,,,,"Function: is_eigen_set(oper, vals, vecs)",qutip,qutip,v5.0.4,,,,is_eigen_set,"(oper, vals, vecs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_eigen.py,python,test_BigDenseValsOnly(),function,,,,Function: test_BigDenseValsOnly(),qutip,qutip,v5.0.4,,,,test_BigDenseValsOnly,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_eigen.py,python,scipy,import,,,,Import: scipy,qutip,qutip,v5.0.4,import scipy,,scipy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_eigen.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_eigen.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_eigen.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
,test_eigen.py,python,,,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_eigen.py,python,,,,,,Directory: qutip\tests\core\test_eigen.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_eigenstates.py,python,_canonicalise_eigenvector(vec),function,,,,Function: _canonicalise_eigenvector(vec),qutip,qutip,v5.0.4,,,,_canonicalise_eigenvector,(vec),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_eigenstates.py,python,_diagonal_dimension = 10,constant,_diagonal_dimension = 10,_diagonal_dimension,10,Constant: _diagonal_dimension = 10,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_eigenstates.py,python,_diagonal_eigenvalues = np.sort(np.random.rand(_diagonal_dimension)),constant,_diagonal_eigenvalues = np.sort(np.random.rand(_diagonal_dimension)),_diagonal_eigenvalues,np.sort(np.random.rand(_diagonal_dimension)),Constant: _diagonal_eigenvalues = np.sort(np.random.rand(_diagonal_dimension)),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_eigenstates.py,python,"_diagonal_eigenstates = np.array([[0]*n + [1] + [0]*(_diagonal_dimension-n-1)
                                  for n in range(_diagonal_dimension)])",constant,"_diagonal_eigenstates = np.array([[0]*n + [1] + [0]*(_diagonal_dimension-n-1)
                                  for n in range(_diagonal_dimension)])",_diagonal_eigenstates,"np.array([[0]*n + [1] + [0]*(_diagonal_dimension-n-1)
                                  for n in range(_diagonal_dimension)])","Constant: _diagonal_eigenstates = np.array([[0]*n + [1] + [0]*(_diagonal_dimension-n-1)
                                  for n in range(_diagonal_dimension)])",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_eigenstates.py,python,"_diagonal_hamiltonian = qutip.qdiags(_diagonal_eigenvalues, 0)",constant,"_diagonal_hamiltonian = qutip.qdiags(_diagonal_eigenvalues, 0)",_diagonal_hamiltonian,"qutip.qdiags(_diagonal_eigenvalues, 0)","Constant: _diagonal_hamiltonian = qutip.qdiags(_diagonal_eigenvalues, 0)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_eigenstates.py,python,"_nondiagonal_hamiltonian = qutip.Qobj(np.array([
    [0.16252356,             0.27696416+0.0405202j,  0.19577420+0.07815636j],
    [0.27696416-0.0405202j,  0.45859633,             0.36222915+0.17372725j],
    [0.19577420-0.07815636j, 0.36222915-0.17372725j, 0.44149665]]))",constant,"_nondiagonal_hamiltonian = qutip.Qobj(np.array([
    [0.16252356,             0.27696416+0.0405202j,  0.19577420+0.07815636j],
    [0.27696416-0.0405202j,  0.45859633,             0.36222915+0.17372725j],
    [0.19577420-0.07815636j, 0.36222915-0.17372725j, 0.44149665]]))",_nondiagonal_hamiltonian,"qutip.Qobj(np.array([
    [0.16252356,             0.27696416+0.0405202j,  0.19577420+0.07815636j],
    [0.27696416-0.0405202j,  0.45859633,             0.36222915+0.17372725j],
    [0.19577420-0.07815636j, 0.36222915-0.17372725j, 0.44149665]]))","Constant: _nondiagonal_hamiltonian = qutip.Qobj(np.array([
    [0.16252356,             0.27696416+0.0405202j,  0.19577420+0.07815636j],
    [0.27696416-0.0405202j,  0.45859633,             0.36222915+0.17372725j],
    [0.19577420-0.07815636j, 0.36222915-0.17372725j, 0.44149665]]))",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_eigenstates.py,python,"_nondiagonal_eigenvalues = np.array([
    -0.022062710138316392, 0.08888141616526818, 0.995797833973048])",constant,"_nondiagonal_eigenvalues = np.array([
    -0.022062710138316392, 0.08888141616526818, 0.995797833973048])",_nondiagonal_eigenvalues,"np.array([
    -0.022062710138316392, 0.08888141616526818, 0.995797833973048])","Constant: _nondiagonal_eigenvalues = np.array([
    -0.022062710138316392, 0.08888141616526818, 0.995797833973048])",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_eigenstates.py,python,"_nondiagonal_eigenstates = np.array([
    [-0.737511505546763, 0.5270680510449308-0.29398599661318j,
     0.009793118179759598+0.3029065489313791j],
    [0.5552814080417957, 0.23570050756381764 - 0.3577691669342573j,
     -0.3741560255426259+0.6067259021655438j],
    [-0.3843687514214284, -0.670810624386174+0.04723455831286158j,
     -0.5593181579625106+0.2953063897306936j]])",constant,"_nondiagonal_eigenstates = np.array([
    [-0.737511505546763, 0.5270680510449308-0.29398599661318j,
     0.009793118179759598+0.3029065489313791j],
    [0.5552814080417957, 0.23570050756381764 - 0.3577691669342573j,
     -0.3741560255426259+0.6067259021655438j],
    [-0.3843687514214284, -0.670810624386174+0.04723455831286158j,
     -0.5593181579625106+0.2953063897306936j]])",_nondiagonal_eigenstates,"np.array([
    [-0.737511505546763, 0.5270680510449308-0.29398599661318j,
     0.009793118179759598+0.3029065489313791j],
    [0.5552814080417957, 0.23570050756381764 - 0.3577691669342573j,
     -0.3741560255426259+0.6067259021655438j],
    [-0.3843687514214284, -0.670810624386174+0.04723455831286158j,
     -0.5593181579625106+0.2953063897306936j]])","Constant: _nondiagonal_eigenstates = np.array([
    [-0.737511505546763, 0.5270680510449308-0.29398599661318j,
     0.009793118179759598+0.3029065489313791j],
    [0.5552814080417957, 0.23570050756381764 - 0.3577691669342573j,
     -0.3741560255426259+0.6067259021655438j],
    [-0.3843687514214284, -0.670810624386174+0.04723455831286158j,
     -0.5593181579625106+0.2953063897306936j]])",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_eigenstates.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_eigenstates.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_eigenstates.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_eigenstates.py,python,combinations from itertools,import,,,,Import: combinations from itertools,qutip,qutip,v5.0.4,from itertools import combinations,itertools,combinations,,,,,,,,,,,,,,,
,test_eigenstates.py,python,,,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_eigenstates.py,python,,,,,,Directory: qutip\tests\core\test_eigenstates.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,"TestKnownExpectation.pytest_generate_tests(self, metafunc)",class_method,,,,"Class method: TestKnownExpectation.pytest_generate_tests(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,TestKnownExpectation,pytest_generate_tests,"(self, metafunc)",,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,"TestKnownExpectation.test_operator_by_basis(self, operator, state, expected)",class_method,,,,"Class method: TestKnownExpectation.test_operator_by_basis(self, operator, state, expected)",qutip,qutip,v5.0.4,,,,,,,TestKnownExpectation,test_operator_by_basis,"(self, operator, state, expected)",,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,"TestKnownExpectation.test_broadcast_operator_list(self, operators, state, expected)",class_method,,,,"Class method: TestKnownExpectation.test_broadcast_operator_list(self, operators, state, expected)",qutip,qutip,v5.0.4,,,,,,,TestKnownExpectation,test_broadcast_operator_list,"(self, operators, state, expected)",,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,"TestKnownExpectation.test_broadcast_state_list(self, operator, states, expected)",class_method,,,,"Class method: TestKnownExpectation.test_broadcast_state_list(self, operator, states, expected)",qutip,qutip,v5.0.4,,,,,,,TestKnownExpectation,test_broadcast_state_list,"(self, operator, states, expected)",,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,"TestKnownExpectation.test_broadcast_both_lists(self, operators, states, expected)",class_method,,,,"Class method: TestKnownExpectation.test_broadcast_both_lists(self, operators, states, expected)",qutip,qutip,v5.0.4,,,,,,,TestKnownExpectation,test_broadcast_both_lists,"(self, operators, states, expected)",,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,TestKnownExpectation,class,,,,Class: TestKnownExpectation,qutip,qutip,v5.0.4,,,,,,,TestKnownExpectation,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,_case_to_dm(case),function,,,,Function: _case_to_dm(case),qutip,qutip,v5.0.4,,,,_case_to_dm,(case),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,_unwrap(list_),function,,,,Function: _unwrap(list_),qutip,qutip,v5.0.4,,,,_unwrap,(list_),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,_case_id(case),function,,,,Function: _case_id(case),qutip,qutip,v5.0.4,,,,_case_id,(case),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,test_no_real_attribute(monkeypatch),function,,,,Function: test_no_real_attribute(monkeypatch),qutip,qutip,v5.0.4,,,,test_no_real_attribute,(monkeypatch),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,"_Case = collections.namedtuple('_Case', ['operator', 'state', 'expected'])",constant,"_Case = collections.namedtuple('_Case', ['operator', 'state', 'expected'])",_Case,"collections.namedtuple('_Case', ['operator', 'state', 'expected'])","Constant: _Case = collections.namedtuple('_Case', ['operator', 'state', 'expected'])",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,_dim = 5,constant,_dim = 5,_dim,5,Constant: _dim = 5,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,"_known_fock = _Case([_num, _a],
                    [qutip.fock(_dim, n) for n in range(_dim)],
                    np.array([np.arange(_dim), np.zeros(_dim)]))",constant,"_known_fock = _Case([_num, _a],
                    [qutip.fock(_dim, n) for n in range(_dim)],
                    np.array([np.arange(_dim), np.zeros(_dim)]))",_known_fock,"_Case([_num, _a],
                    [qutip.fock(_dim, n) for n in range(_dim)],
                    np.array([np.arange(_dim), np.zeros(_dim)]))","Constant: _known_fock = _Case([_num, _a],
                    [qutip.fock(_dim, n) for n in range(_dim)],
                    np.array([np.arange(_dim), np.zeros(_dim)]))",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,"_known_qubit = _Case([_sx, _sz, _sp],
                     [qutip.basis(2, 0), qutip.basis(2, 1)],
                     np.array([[0, 0], [1, -1], [0, 0]]))",constant,"_known_qubit = _Case([_sx, _sz, _sp],
                     [qutip.basis(2, 0), qutip.basis(2, 1)],
                     np.array([[0, 0], [1, -1], [0, 0]]))",_known_qubit,"_Case([_sx, _sz, _sp],
                     [qutip.basis(2, 0), qutip.basis(2, 1)],
                     np.array([[0, 0], [1, -1], [0, 0]]))","Constant: _known_qubit = _Case([_sx, _sz, _sp],
                     [qutip.basis(2, 0), qutip.basis(2, 1)],
                     np.array([[0, 0], [1, -1], [0, 0]]))",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,"_known_cases = [_known_fock, _case_to_dm(_known_fock),
                _known_qubit, _case_to_dm(_known_qubit)]",constant,"_known_cases = [_known_fock, _case_to_dm(_known_fock),
                _known_qubit, _case_to_dm(_known_qubit)]",_known_cases,"[_known_fock, _case_to_dm(_known_fock),
                _known_qubit, _case_to_dm(_known_qubit)]","Constant: _known_cases = [_known_fock, _case_to_dm(_known_fock),
                _known_qubit, _case_to_dm(_known_qubit)]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,collections,import,,,,Import: collections,qutip,qutip,v5.0.4,import collections,,collections,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,functools,import,,,,Import: functools,qutip,qutip,v5.0.4,import functools,,functools,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,qutip.core.data,import,,,,Import: qutip.core.data,qutip,qutip,v5.0.4,import qutip.core.data as _data,,qutip.core.data,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,CSR from qutip.core.data,local_import,,,,Import: CSR from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense",qutip.core.data,CSR,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,Dense from qutip.core.data,local_import,,,,Import: Dense from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense",qutip.core.data,Dense,,,qutip.core.data,,,,,,,,,,,,
,test_expect.py,python,,,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_expect.py,python,,,,,,Directory: qutip\tests\core\test_expect.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_gates.py,python,"TestCliffordGroup.pauli = [qutip.qeye(2), qutip.sigmax(), qutip.sigmay(), qutip.sigmaz()]",class_field,,,,"Class field: TestCliffordGroup.pauli = [qutip.qeye(2), qutip.sigmax(), qutip.sigmay(), qutip.sigmaz()]",qutip,qutip,v5.0.4,,,,,,,TestCliffordGroup,,,"pauli = [qutip.qeye(2), qutip.sigmax(), qutip.sigmay(), qutip.sigmaz()]",,,,,pauli,,"[qutip.qeye(2), qutip.sigmax(), qutip.sigmay(), qutip.sigmaz()]",
qutip_qutip_v5.0.4,test_gates.py,python,TestExplicitForm.test_swap(self),class_method,,,,Class method: TestExplicitForm.test_swap(self),qutip,qutip,v5.0.4,,,,,,,TestExplicitForm,test_swap,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_gates.py,python,"[pytest.mark.parametrize([""gate"", ""cgate"", ""args""], [
        pytest.param(qutip.sigmax, gates.cnot, (), id=""cnot""),
        pytest.param(qutip.sigmay, gates.cy_gate, (), id=""cy_gate""),
        pytest.param(qutip.sigmaz, gates.cz_gate, (), id=""cz_gate""),
        pytest.param(gates.s_gate, gates.cs_gate, (), id=""cs_gate""),
        pytest.param(gates.t_gate, gates.ct_gate, (), id=""ct_gate""),
        pytest.param(gates.phasegate, gates.cphase, (0.1,), id=""cphase""),
        pytest.param(qutip.sigmaz, gates.csign, (), id=""csign""),
        pytest.param(gates.swap, gates.fredkin, (), id=""fredkin""),
        pytest.param(gates.cnot, gates.toffoli, (), id=""toffoli""),
    ])] TestExplicitForm.test_controled(self, gate, cgate, args)",class_method,,,,"Class method: [pytest.mark.parametrize([""gate"", ""cgate"", ""args""], [
        pytest.param(qutip.sigmax, gates.cnot, (), id=""cnot""),
        pytest.param(qutip.sigmay, gates.cy_gate, (), id=""cy_gate""),
        pytest.param(qutip.sigmaz, gates.cz_gate, (), id=""cz_gate""),
        pytest.param(gates.s_gate, gates.cs_gate, (), id=""cs_gate""),
        pytest.param(gates.t_gate, gates.ct_gate, (), id=""ct_gate""),
        pytest.param(gates.phasegate, gates.cphase, (0.1,), id=""cphase""),
        pytest.param(qutip.sigmaz, gates.csign, (), id=""csign""),
        pytest.param(gates.swap, gates.fredkin, (), id=""fredkin""),
        pytest.param(gates.cnot, gates.toffoli, (), id=""toffoli""),
    ])] TestExplicitForm.test_controled(self, gate, cgate, args)",qutip,qutip,v5.0.4,,,,,,,TestExplicitForm,test_controled,"(self, gate, cgate, args)",,,,,,,,,"pytest.mark.parametrize([""gate"", ""cgate"", ""args""], [
        pytest.param(qutip.sigmax, gates.cnot, (), id=""cnot""),
        pytest.param(qutip.sigmay, gates.cy_gate, (), id=""cy_gate""),
        pytest.param(qutip.sigmaz, gates.cz_gate, (), id=""cz_gate""),
        pytest.param(gates.s_gate, gates.cs_gate, (), id=""cs_gate""),
        pytest.param(gates.t_gate, gates.ct_gate, (), id=""ct_gate""),
        pytest.param(gates.phasegate, gates.cphase, (0.1,), id=""cphase""),
        pytest.param(qutip.sigmaz, gates.csign, (), id=""csign""),
        pytest.param(gates.swap, gates.fredkin, (), id=""fredkin""),
        pytest.param(gates.cnot, gates.toffoli, (), id=""toffoli""),
    ])"
qutip_qutip_v5.0.4,test_gates.py,python,"[pytest.mark.parametrize([""gate"", ""power"", ""expected""], [
        pytest.param(gates.snot, 2, lambda : qutip.qeye(2), id=""snot""),
        pytest.param(gates.s_gate, 4, lambda : qutip.qeye(2), id=""s_gate""),
        pytest.param(gates.t_gate, 8, lambda : qutip.qeye(2), id=""t_gate""),
        pytest.param(gates.berkeley, 8, lambda : -qutip.qeye([2, 2]),
                     id=""berkeley""),
        pytest.param(gates.sqrtnot, 2, qutip.sigmax, id=""sqrtnot""),
        pytest.param(gates.sqrtswap, 2, gates.swap, id=""cs_gate""),
        pytest.param(gates.sqrtiswap, 2, gates.iswap, id=""ct_gate""),
    ])] TestExplicitForm.gate_power_relation(self, gate, expected, power)",class_method,,,,"Class method: [pytest.mark.parametrize([""gate"", ""power"", ""expected""], [
        pytest.param(gates.snot, 2, lambda : qutip.qeye(2), id=""snot""),
        pytest.param(gates.s_gate, 4, lambda : qutip.qeye(2), id=""s_gate""),
        pytest.param(gates.t_gate, 8, lambda : qutip.qeye(2), id=""t_gate""),
        pytest.param(gates.berkeley, 8, lambda : -qutip.qeye([2, 2]),
                     id=""berkeley""),
        pytest.param(gates.sqrtnot, 2, qutip.sigmax, id=""sqrtnot""),
        pytest.param(gates.sqrtswap, 2, gates.swap, id=""cs_gate""),
        pytest.param(gates.sqrtiswap, 2, gates.iswap, id=""ct_gate""),
    ])] TestExplicitForm.gate_power_relation(self, gate, expected, power)",qutip,qutip,v5.0.4,,,,,,,TestExplicitForm,gate_power_relation,"(self, gate, expected, power)",,,,,,,,,"pytest.mark.parametrize([""gate"", ""power"", ""expected""], [
        pytest.param(gates.snot, 2, lambda : qutip.qeye(2), id=""snot""),
        pytest.param(gates.s_gate, 4, lambda : qutip.qeye(2), id=""s_gate""),
        pytest.param(gates.t_gate, 8, lambda : qutip.qeye(2), id=""t_gate""),
        pytest.param(gates.berkeley, 8, lambda : -qutip.qeye([2, 2]),
                     id=""berkeley""),
        pytest.param(gates.sqrtnot, 2, qutip.sigmax, id=""sqrtnot""),
        pytest.param(gates.sqrtswap, 2, gates.swap, id=""cs_gate""),
        pytest.param(gates.sqrtiswap, 2, gates.iswap, id=""ct_gate""),
    ])"
qutip_qutip_v5.0.4,test_gates.py,python,"[pytest.mark.parametrize(['angle', 'expected'], [
        pytest.param(np.pi, -1j*qutip.tensor(qutip.sigmax(), qutip.sigmax()),
                     id=""pi""),
        pytest.param(2*np.pi, -qutip.qeye([2, 2]), id=""2pi""),
    ])] TestExplicitForm.test_molmer_sorensen(self, angle, expected)",class_method,,,,"Class method: [pytest.mark.parametrize(['angle', 'expected'], [
        pytest.param(np.pi, -1j*qutip.tensor(qutip.sigmax(), qutip.sigmax()),
                     id=""pi""),
        pytest.param(2*np.pi, -qutip.qeye([2, 2]), id=""2pi""),
    ])] TestExplicitForm.test_molmer_sorensen(self, angle, expected)",qutip,qutip,v5.0.4,,,,,,,TestExplicitForm,test_molmer_sorensen,"(self, angle, expected)",,,,,,,,,"pytest.mark.parametrize(['angle', 'expected'], [
        pytest.param(np.pi, -1j*qutip.tensor(qutip.sigmax(), qutip.sigmax()),
                     id=""pi""),
        pytest.param(2*np.pi, -qutip.qeye([2, 2]), id=""2pi""),
    ])"
qutip_qutip_v5.0.4,test_gates.py,python,"[pytest.mark.parametrize([""gate"", ""n_angles""], [
        pytest.param(gates.rx, 1, id=""Rx""),
        pytest.param(gates.ry, 1, id=""Ry""),
        pytest.param(gates.rz, 1, id=""Rz""),
        pytest.param(gates.phasegate, 1, id=""phase""),
        pytest.param(gates.qrot, 2, id=""Rabi rotation""),
    ])] TestExplicitForm.test_zero_rotations_are_identity(self, gate, n_angles)",class_method,,,,"Class method: [pytest.mark.parametrize([""gate"", ""n_angles""], [
        pytest.param(gates.rx, 1, id=""Rx""),
        pytest.param(gates.ry, 1, id=""Ry""),
        pytest.param(gates.rz, 1, id=""Rz""),
        pytest.param(gates.phasegate, 1, id=""phase""),
        pytest.param(gates.qrot, 2, id=""Rabi rotation""),
    ])] TestExplicitForm.test_zero_rotations_are_identity(self, gate, n_angles)",qutip,qutip,v5.0.4,,,,,,,TestExplicitForm,test_zero_rotations_are_identity,"(self, gate, n_angles)",,,,,,,,,"pytest.mark.parametrize([""gate"", ""n_angles""], [
        pytest.param(gates.rx, 1, id=""Rx""),
        pytest.param(gates.ry, 1, id=""Ry""),
        pytest.param(gates.rz, 1, id=""Rz""),
        pytest.param(gates.phasegate, 1, id=""phase""),
        pytest.param(gates.qrot, 2, id=""Rabi rotation""),
    ])"
qutip_qutip_v5.0.4,test_gates.py,python,TestExplicitForm.test_hadamard(self),class_method,,,,Class method: TestExplicitForm.test_hadamard(self),qutip,qutip,v5.0.4,,,,,,,TestExplicitForm,test_hadamard,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_gates.py,python,TestExplicitForm.test_globalphase(self),class_method,,,,Class method: TestExplicitForm.test_globalphase(self),qutip,qutip,v5.0.4,,,,,,,TestExplicitForm,test_globalphase,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_gates.py,python,TestCliffordGroup.test_single_qubit_group_dimension_is_24(self),class_method,,,,Class method: TestCliffordGroup.test_single_qubit_group_dimension_is_24(self),qutip,qutip,v5.0.4,,,,,,,TestCliffordGroup,test_single_qubit_group_dimension_is_24,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_gates.py,python,TestCliffordGroup.test_dtype(self),class_method,,,,Class method: TestCliffordGroup.test_dtype(self),qutip,qutip,v5.0.4,,,,,,,TestCliffordGroup,test_dtype,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_gates.py,python,TestCliffordGroup.test_all_elements_different(self),class_method,,,,Class method: TestCliffordGroup.test_all_elements_different(self),qutip,qutip,v5.0.4,,,,,,,TestCliffordGroup,test_all_elements_different,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_gates.py,python,"[pytest.mark.parametrize(""gate"", gates.qubit_clifford_group(dtype=""dense""))] TestCliffordGroup.test_gate_normalises_pauli_group(self, gate)",class_method,,,,"Class method: [pytest.mark.parametrize(""gate"", gates.qubit_clifford_group(dtype=""dense""))] TestCliffordGroup.test_gate_normalises_pauli_group(self, gate)",qutip,qutip,v5.0.4,,,,,,,TestCliffordGroup,test_gate_normalises_pauli_group,"(self, gate)",,,,,,,,,"pytest.mark.parametrize(""gate"", gates.qubit_clifford_group(dtype=""dense""))"
qutip_qutip_v5.0.4,test_gates.py,python,TestExplicitForm,class,,,,Class: TestExplicitForm,qutip,qutip,v5.0.4,,,,,,,TestExplicitForm,,,,,,,,,,,
qutip_qutip_v5.0.4,test_gates.py,python,TestCliffordGroup,class,,,,Class: TestCliffordGroup,qutip,qutip,v5.0.4,,,,,,,TestCliffordGroup,,,,,,,,,,,
qutip_qutip_v5.0.4,test_gates.py,python,"_infidelity(a, b)",function,,,,"Function: _infidelity(a, b)",qutip,qutip,v5.0.4,,,,_infidelity,"(a, b)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_gates.py,python,_remove_global_phase(qobj),function,,,,Function: _remove_global_phase(qobj),qutip,qutip,v5.0.4,,,,_remove_global_phase,(qobj),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_gates.py,python,_make_random_three_qubit_gate(),function,,,,Function: _make_random_three_qubit_gate(),qutip,qutip,v5.0.4,,,,_make_random_three_qubit_gate,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_gates.py,python,_make_controled(op),function,,,,Function: _make_controled(op),qutip,qutip,v5.0.4,,,,_make_controled,(op),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_gates.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_gates.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_gates.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_gates.py,python,gates from qutip.core,local_import,,,,Import: gates from qutip.core,qutip,qutip,v5.0.4,from qutip.core import gates,qutip.core,gates,,,qutip.core,,,,,,,,,,,,
,test_gates.py,python,,,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_gates.py,python,,,,,,Directory: qutip\tests\core\test_gates.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,"Test_fidelity.ket_0 = basis(2, 0)",class_field,,,,"Class field: Test_fidelity.ket_0 = basis(2, 0)",qutip,qutip,v5.0.4,,,,,,,Test_fidelity,,,"ket_0 = basis(2, 0)",,,,,ket_0,,"basis(2, 0)",
qutip_qutip_v5.0.4,test_metrics.py,python,"Test_fidelity.ket_1 = basis(2, 1)",class_field,,,,"Class field: Test_fidelity.ket_1 = basis(2, 1)",qutip,qutip,v5.0.4,,,,,,,Test_fidelity,,,"ket_1 = basis(2, 1)",,,,,ket_1,,"basis(2, 1)",
qutip_qutip_v5.0.4,test_metrics.py,python,Test_fidelity.ket_p = (ket_0 + ket_1).unit(),class_field,,,,Class field: Test_fidelity.ket_p = (ket_0 + ket_1).unit(),qutip,qutip,v5.0.4,,,,,,,Test_fidelity,,,ket_p = (ket_0 + ket_1).unit(),,,,,ket_p,,(ket_0 + ket_1).unit(),
qutip_qutip_v5.0.4,test_metrics.py,python,Test_fidelity.ket_py = (ket_0 + np.exp(0.25j*np.pi)*ket_1).unit(),class_field,,,,Class field: Test_fidelity.ket_py = (ket_0 + np.exp(0.25j*np.pi)*ket_1).unit(),qutip,qutip,v5.0.4,,,,,,,Test_fidelity,,,ket_py = (ket_0 + np.exp(0.25j*np.pi)*ket_1).unit(),,,,,ket_py,,(ket_0 + np.exp(0.25j*np.pi)*ket_1).unit(),
qutip_qutip_v5.0.4,test_metrics.py,python,Test_fidelity.max_mixed = qeye(2).unit(),class_field,,,,Class field: Test_fidelity.max_mixed = qeye(2).unit(),qutip,qutip,v5.0.4,,,,,,,Test_fidelity,,,max_mixed = qeye(2).unit(),,,,,max_mixed,,qeye(2).unit(),
qutip_qutip_v5.0.4,test_metrics.py,python,"Test_fidelity.test_mixed_state_inequality(self, dimension)",class_method,,,,"Class method: Test_fidelity.test_mixed_state_inequality(self, dimension)",qutip,qutip,v5.0.4,,,,,,,Test_fidelity,test_mixed_state_inequality,"(self, dimension)",,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,"[pytest.mark.parametrize('right_dm', [True, False], ids=['mixed', 'pure'])] Test_fidelity.test_orthogonal(self, left_dm, right_dm, dimension)",class_method,,,,"Class method: [pytest.mark.parametrize('right_dm', [True, False], ids=['mixed', 'pure'])] Test_fidelity.test_orthogonal(self, left_dm, right_dm, dimension)",qutip,qutip,v5.0.4,,,,,,,Test_fidelity,test_orthogonal,"(self, left_dm, right_dm, dimension)",,,,,,,,,"pytest.mark.parametrize('right_dm', [True, False], ids=['mixed', 'pure'])"
qutip_qutip_v5.0.4,test_metrics.py,python,"[pytest.mark.parametrize('left_dm', [True, False], ids=['mixed', 'pure'])] Test_fidelity.test_orthogonal(self, left_dm, right_dm, dimension)",class_method,,,,"Class method: [pytest.mark.parametrize('left_dm', [True, False], ids=['mixed', 'pure'])] Test_fidelity.test_orthogonal(self, left_dm, right_dm, dimension)",qutip,qutip,v5.0.4,,,,,,,Test_fidelity,test_orthogonal,"(self, left_dm, right_dm, dimension)",,,,,,,,,"pytest.mark.parametrize('left_dm', [True, False], ids=['mixed', 'pure'])"
qutip_qutip_v5.0.4,test_metrics.py,python,"Test_fidelity.test_invariant_under_unitary_transformation(self, dimension)",class_method,,,,"Class method: Test_fidelity.test_invariant_under_unitary_transformation(self, dimension)",qutip,qutip,v5.0.4,,,,,,,Test_fidelity,test_invariant_under_unitary_transformation,"(self, dimension)",,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,"Test_fidelity.test_state_with_itself(self, state)",class_method,,,,"Class method: Test_fidelity.test_state_with_itself(self, state)",qutip,qutip,v5.0.4,,,,,,,Test_fidelity,test_state_with_itself,"(self, state)",,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,"Test_fidelity.test_bounded(self, left, right, dimension)",class_method,,,,"Class method: Test_fidelity.test_bounded(self, left, right, dimension)",qutip,qutip,v5.0.4,,,,,,,Test_fidelity,test_bounded,"(self, left, right, dimension)",,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,"Test_fidelity.test_pure_state_equivalent_to_overlap(self, dimension)",class_method,,,,"Class method: Test_fidelity.test_pure_state_equivalent_to_overlap(self, dimension)",qutip,qutip,v5.0.4,,,,,,,Test_fidelity,test_pure_state_equivalent_to_overlap,"(self, dimension)",,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,"[pytest.mark.parametrize(['left', 'right', 'expected'], [
        pytest.param(ket_0, ket_p, np.sqrt(0.5), id=""|0>,|+>""),
        pytest.param(ket_0, ket_1, 0, id=""|0>,|1>""),
        pytest.param(ket_0, max_mixed, np.sqrt(0.5), id=""|0>,id/2""),
        pytest.param(ket_p, ket_py, np.sqrt(0.125 + (0.5+np.sqrt(0.125))**2),
                     id=""|+>,|+'>""),
    ])] Test_fidelity.test_known_cases(self, left, right, expected)",class_method,,,,"Class method: [pytest.mark.parametrize(['left', 'right', 'expected'], [
        pytest.param(ket_0, ket_p, np.sqrt(0.5), id=""|0>,|+>""),
        pytest.param(ket_0, ket_1, 0, id=""|0>,|1>""),
        pytest.param(ket_0, max_mixed, np.sqrt(0.5), id=""|0>,id/2""),
        pytest.param(ket_p, ket_py, np.sqrt(0.125 + (0.5+np.sqrt(0.125))**2),
                     id=""|+>,|+'>""),
    ])] Test_fidelity.test_known_cases(self, left, right, expected)",qutip,qutip,v5.0.4,,,,,,,Test_fidelity,test_known_cases,"(self, left, right, expected)",,,,,,,,,"pytest.mark.parametrize(['left', 'right', 'expected'], [
        pytest.param(ket_0, ket_p, np.sqrt(0.5), id=""|0>,|+>""),
        pytest.param(ket_0, ket_1, 0, id=""|0>,|1>""),
        pytest.param(ket_0, max_mixed, np.sqrt(0.5), id=""|0>,id/2""),
        pytest.param(ket_p, ket_py, np.sqrt(0.125 + (0.5+np.sqrt(0.125))**2),
                     id=""|+>,|+'>""),
    ])"
qutip_qutip_v5.0.4,test_metrics.py,python,"Test_tracedist.test_state_with_itself(self, state)",class_method,,,,"Class method: Test_tracedist.test_state_with_itself(self, state)",qutip,qutip,v5.0.4,,,,,,,Test_tracedist,test_state_with_itself,"(self, state)",,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,"[pytest.mark.parametrize('right_dm', [True, False], ids=['mixed', 'pure'])] Test_tracedist.test_orthogonal(self, left_dm, right_dm, dimension)",class_method,,,,"Class method: [pytest.mark.parametrize('right_dm', [True, False], ids=['mixed', 'pure'])] Test_tracedist.test_orthogonal(self, left_dm, right_dm, dimension)",qutip,qutip,v5.0.4,,,,,,,Test_tracedist,test_orthogonal,"(self, left_dm, right_dm, dimension)",,,,,,,,,"pytest.mark.parametrize('right_dm', [True, False], ids=['mixed', 'pure'])"
qutip_qutip_v5.0.4,test_metrics.py,python,"[pytest.mark.parametrize('left_dm', [True, False], ids=['mixed', 'pure'])] Test_tracedist.test_orthogonal(self, left_dm, right_dm, dimension)",class_method,,,,"Class method: [pytest.mark.parametrize('left_dm', [True, False], ids=['mixed', 'pure'])] Test_tracedist.test_orthogonal(self, left_dm, right_dm, dimension)",qutip,qutip,v5.0.4,,,,,,,Test_tracedist,test_orthogonal,"(self, left_dm, right_dm, dimension)",,,,,,,,,"pytest.mark.parametrize('left_dm', [True, False], ids=['mixed', 'pure'])"
qutip_qutip_v5.0.4,test_metrics.py,python,"Test_tracedist.test_invariant_under_unitary_transformation(self, dimension)",class_method,,,,"Class method: Test_tracedist.test_invariant_under_unitary_transformation(self, dimension)",qutip,qutip,v5.0.4,,,,,,,Test_tracedist,test_invariant_under_unitary_transformation,"(self, dimension)",,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,"[pytest.mark.parametrize('right_dm', [True, False], ids=['mixed', 'pure'])] Test_hellinger_dist.test_orthogonal(self, left_dm, right_dm, dimension)",class_method,,,,"Class method: [pytest.mark.parametrize('right_dm', [True, False], ids=['mixed', 'pure'])] Test_hellinger_dist.test_orthogonal(self, left_dm, right_dm, dimension)",qutip,qutip,v5.0.4,,,,,,,Test_hellinger_dist,test_orthogonal,"(self, left_dm, right_dm, dimension)",,,,,,,,,"pytest.mark.parametrize('right_dm', [True, False], ids=['mixed', 'pure'])"
qutip_qutip_v5.0.4,test_metrics.py,python,"[pytest.mark.parametrize('left_dm', [True, False], ids=['mixed', 'pure'])] Test_hellinger_dist.test_orthogonal(self, left_dm, right_dm, dimension)",class_method,,,,"Class method: [pytest.mark.parametrize('left_dm', [True, False], ids=['mixed', 'pure'])] Test_hellinger_dist.test_orthogonal(self, left_dm, right_dm, dimension)",qutip,qutip,v5.0.4,,,,,,,Test_hellinger_dist,test_orthogonal,"(self, left_dm, right_dm, dimension)",,,,,,,,,"pytest.mark.parametrize('left_dm', [True, False], ids=['mixed', 'pure'])"
qutip_qutip_v5.0.4,test_metrics.py,python,"Test_hellinger_dist.test_state_with_itself(self, state)",class_method,,,,"Class method: Test_hellinger_dist.test_state_with_itself(self, state)",qutip,qutip,v5.0.4,,,,,,,Test_hellinger_dist,test_state_with_itself,"(self, state)",,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,"Test_hellinger_dist.test_known_cases_pure_states(self, dimension)",class_method,,,,"Class method: Test_hellinger_dist.test_known_cases_pure_states(self, dimension)",qutip,qutip,v5.0.4,,,,,,,Test_hellinger_dist,test_known_cases_pure_states,"(self, dimension)",,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,"[pytest.mark.parametrize('dimension', [2, 5, 10, 25])] Test_hellinger_dist.test_monotonicity(self, dimension)",class_method,,,,"Class method: [pytest.mark.parametrize('dimension', [2, 5, 10, 25])] Test_hellinger_dist.test_monotonicity(self, dimension)",qutip,qutip,v5.0.4,,,,,,,Test_hellinger_dist,test_monotonicity,"(self, dimension)",,,,,,,,,"pytest.mark.parametrize('dimension', [2, 5, 10, 25])"
qutip_qutip_v5.0.4,test_metrics.py,python,"Test_average_gate_fidelity.test_identity(self, dimension)",class_method,,,,"Class method: Test_average_gate_fidelity.test_identity(self, dimension)",qutip,qutip,v5.0.4,,,,,,,Test_average_gate_fidelity,test_identity,"(self, dimension)",,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,"[pytest.mark.parametrize('dimension', [2, 5, 10, 20])] Test_average_gate_fidelity.test_bounded(self, dimension)",class_method,,,,"Class method: [pytest.mark.parametrize('dimension', [2, 5, 10, 20])] Test_average_gate_fidelity.test_bounded(self, dimension)",qutip,qutip,v5.0.4,,,,,,,Test_average_gate_fidelity,test_bounded,"(self, dimension)",,,,,,,,,"pytest.mark.parametrize('dimension', [2, 5, 10, 20])"
qutip_qutip_v5.0.4,test_metrics.py,python,"[pytest.mark.parametrize('dimension', [2, 5, 10, 20])] Test_average_gate_fidelity.test_unitaries_equal_1(self, dimension)",class_method,,,,"Class method: [pytest.mark.parametrize('dimension', [2, 5, 10, 20])] Test_average_gate_fidelity.test_unitaries_equal_1(self, dimension)",qutip,qutip,v5.0.4,,,,,,,Test_average_gate_fidelity,test_unitaries_equal_1,"(self, dimension)",,,,,,,,,"pytest.mark.parametrize('dimension', [2, 5, 10, 20])"
qutip_qutip_v5.0.4,test_metrics.py,python,Test_average_gate_fidelity.test_average_gate_fidelity_against_legacy_implementation(self),class_method,,,,Class method: Test_average_gate_fidelity.test_average_gate_fidelity_against_legacy_implementation(self),qutip,qutip,v5.0.4,,,,,,,Test_average_gate_fidelity,test_average_gate_fidelity_against_legacy_implementation,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,Test_hilbert_dist.test_known_cases(self),class_method,,,,Class method: Test_hilbert_dist.test_known_cases(self),qutip,qutip,v5.0.4,,,,,,,Test_hilbert_dist,test_known_cases,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,"[pytest.mark.parametrize(['operator', 'expected'], [
        pytest.param(to_super(sigmax()), 1, id=""sigmax""),
        pytest.param(0.25 * sum(to_super(x) for x in paulis), 0, id=""paulis""),
        pytest.param(0.5 * (to_super(qeye(2)) + to_super(sigmax())), 1/3,
                     id=""id+sigmax""),
    ])] Test_unitarity.test_known_cases(self, operator, expected)",class_method,,,,"Class method: [pytest.mark.parametrize(['operator', 'expected'], [
        pytest.param(to_super(sigmax()), 1, id=""sigmax""),
        pytest.param(0.25 * sum(to_super(x) for x in paulis), 0, id=""paulis""),
        pytest.param(0.5 * (to_super(qeye(2)) + to_super(sigmax())), 1/3,
                     id=""id+sigmax""),
    ])] Test_unitarity.test_known_cases(self, operator, expected)",qutip,qutip,v5.0.4,,,,,,,Test_unitarity,test_known_cases,"(self, operator, expected)",,,,,,,,,"pytest.mark.parametrize(['operator', 'expected'], [
        pytest.param(to_super(sigmax()), 1, id=""sigmax""),
        pytest.param(0.25 * sum(to_super(x) for x in paulis), 0, id=""paulis""),
        pytest.param(0.5 * (to_super(qeye(2)) + to_super(sigmax())), 1/3,
                     id=""id+sigmax""),
    ])"
qutip_qutip_v5.0.4,test_metrics.py,python,"[pytest.mark.parametrize('n_qubits', [1, 2, 3, 4, 5])] Test_unitarity.test_bounded(self, n_qubits)",class_method,,,,"Class method: [pytest.mark.parametrize('n_qubits', [1, 2, 3, 4, 5])] Test_unitarity.test_bounded(self, n_qubits)",qutip,qutip,v5.0.4,,,,,,,Test_unitarity,test_bounded,"(self, n_qubits)",,,,,,,,,"pytest.mark.parametrize('n_qubits', [1, 2, 3, 4, 5])"
qutip_qutip_v5.0.4,test_metrics.py,python,"TestComparisons.test_inequality_tracedist_to_fidelity(self, left, right)",class_method,,,,"Class method: TestComparisons.test_inequality_tracedist_to_fidelity(self, left, right)",qutip,qutip,v5.0.4,,,,,,,TestComparisons,test_inequality_tracedist_to_fidelity,"(self, left, right)",,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,"TestComparisons.test_inequality_hellinger_dist_to_bures_dist(self, left, right)",class_method,,,,"Class method: TestComparisons.test_inequality_hellinger_dist_to_bures_dist(self, left, right)",qutip,qutip,v5.0.4,,,,,,,TestComparisons,test_inequality_hellinger_dist_to_bures_dist,"(self, left, right)",,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,"[pytest.fixture(params=[2, 3])] Test_dnorm.dimension(self, request)",class_method,,,,"Class method: [pytest.fixture(params=[2, 3])] Test_dnorm.dimension(self, request)",qutip,qutip,v5.0.4,,,,,,,Test_dnorm,dimension,"(self, request)",,,,,,,,,"pytest.fixture(params=[2, 3])"
qutip_qutip_v5.0.4,test_metrics.py,python,"[pytest.fixture(params=[True, False], ids=['sparse', 'dense'])] Test_dnorm.sparse(self, request)",class_method,,,,"Class method: [pytest.fixture(params=[True, False], ids=['sparse', 'dense'])] Test_dnorm.sparse(self, request)",qutip,qutip,v5.0.4,,,,,,,Test_dnorm,sparse,"(self, request)",,,,,,,,,"pytest.fixture(params=[True, False], ids=['sparse', 'dense'])"
qutip_qutip_v5.0.4,test_metrics.py,python,"[pytest.mark.parametrize(""variable"", [0.1, 0.5, 0.9])] Test_dnorm.test_sparse_against_dense_adc(self, variable)",class_method,,,,"Class method: [pytest.mark.parametrize(""variable"", [0.1, 0.5, 0.9])] Test_dnorm.test_sparse_against_dense_adc(self, variable)",qutip,qutip,v5.0.4,,,,,,,Test_dnorm,test_sparse_against_dense_adc,"(self, variable)",,,,,,,,,"pytest.mark.parametrize(""variable"", [0.1, 0.5, 0.9])"
qutip_qutip_v5.0.4,test_metrics.py,python,"[pytest.mark.repeat(3)] Test_dnorm.test_sparse_against_dense_random(self, dimension)",class_method,,,,"Class method: [pytest.mark.repeat(3)] Test_dnorm.test_sparse_against_dense_random(self, dimension)",qutip,qutip,v5.0.4,,,,,,,Test_dnorm,test_sparse_against_dense_random,"(self, dimension)",,,,,,,,,pytest.mark.repeat(3)
qutip_qutip_v5.0.4,test_metrics.py,python,"Test_dnorm.test_bounded(self, dimension, sparse)",class_method,,,,"Class method: Test_dnorm.test_bounded(self, dimension, sparse)",qutip,qutip,v5.0.4,,,,,,,Test_dnorm,test_bounded,"(self, dimension, sparse)",,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,"Test_dnorm.test_qubit_simple_known_cases(self, sparse)",class_method,,,,"Class method: Test_dnorm.test_qubit_simple_known_cases(self, sparse)",qutip,qutip,v5.0.4,,,,,,,Test_dnorm,test_qubit_simple_known_cases,"(self, sparse)",,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,"[pytest.mark.parametrize([""variable"", ""expected"", ""generator""], [
        [1.0e-3, 3.141591e-03, overrotation],
        [3.1e-3, 9.738899e-03, overrotation],
        [1.0e-2, 3.141463e-02, overrotation],
        [3.1e-2, 9.735089e-02, overrotation],
        [1.0e-1, 3.128689e-01, overrotation],
        [3.1e-1, 9.358596e-01, overrotation],
        [1.0e-3, 2.000000e-03, had_mixture],
        [3.1e-3, 6.200000e-03, had_mixture],
        [1.0e-2, 2.000000e-02, had_mixture],
        [3.1e-2, 6.200000e-02, had_mixture],
        [1.0e-1, 2.000000e-01, had_mixture],
        [3.1e-1, 6.200000e-01, had_mixture],
        [1.0e-3, 2.000000e-03, swap_map],
        [3.1e-3, 6.199997e-03, swap_map],
        [1.0e-2, 1.999992e-02, swap_map],
        [3.1e-2, 6.199752e-02, swap_map],
        [1.0e-1, 1.999162e-01, swap_map],
        [3.1e-1, 6.173918e-01, swap_map],
    ])] Test_dnorm.test_qubit_known_cases(self, variable, expected, generator, sparse)",class_method,,,,"Class method: [pytest.mark.parametrize([""variable"", ""expected"", ""generator""], [
        [1.0e-3, 3.141591e-03, overrotation],
        [3.1e-3, 9.738899e-03, overrotation],
        [1.0e-2, 3.141463e-02, overrotation],
        [3.1e-2, 9.735089e-02, overrotation],
        [1.0e-1, 3.128689e-01, overrotation],
        [3.1e-1, 9.358596e-01, overrotation],
        [1.0e-3, 2.000000e-03, had_mixture],
        [3.1e-3, 6.200000e-03, had_mixture],
        [1.0e-2, 2.000000e-02, had_mixture],
        [3.1e-2, 6.200000e-02, had_mixture],
        [1.0e-1, 2.000000e-01, had_mixture],
        [3.1e-1, 6.200000e-01, had_mixture],
        [1.0e-3, 2.000000e-03, swap_map],
        [3.1e-3, 6.199997e-03, swap_map],
        [1.0e-2, 1.999992e-02, swap_map],
        [3.1e-2, 6.199752e-02, swap_map],
        [1.0e-1, 1.999162e-01, swap_map],
        [3.1e-1, 6.173918e-01, swap_map],
    ])] Test_dnorm.test_qubit_known_cases(self, variable, expected, generator, sparse)",qutip,qutip,v5.0.4,,,,,,,Test_dnorm,test_qubit_known_cases,"(self, variable, expected, generator, sparse)",,,,,,,,,"pytest.mark.parametrize([""variable"", ""expected"", ""generator""], [
        [1.0e-3, 3.141591e-03, overrotation],
        [3.1e-3, 9.738899e-03, overrotation],
        [1.0e-2, 3.141463e-02, overrotation],
        [3.1e-2, 9.735089e-02, overrotation],
        [1.0e-1, 3.128689e-01, overrotation],
        [3.1e-1, 9.358596e-01, overrotation],
        [1.0e-3, 2.000000e-03, had_mixture],
        [3.1e-3, 6.200000e-03, had_mixture],
        [1.0e-2, 2.000000e-02, had_mixture],
        [3.1e-2, 6.200000e-02, had_mixture],
        [1.0e-1, 2.000000e-01, had_mixture],
        [3.1e-1, 6.200000e-01, had_mixture],
        [1.0e-3, 2.000000e-03, swap_map],
        [3.1e-3, 6.199997e-03, swap_map],
        [1.0e-2, 1.999992e-02, swap_map],
        [3.1e-2, 6.199752e-02, swap_map],
        [1.0e-1, 1.999162e-01, swap_map],
        [3.1e-1, 6.173918e-01, swap_map],
    ])"
qutip_qutip_v5.0.4,test_metrics.py,python,"Test_dnorm.test_qubit_scalar(self, dimension)",class_method,,,,"Class method: Test_dnorm.test_qubit_scalar(self, dimension)",qutip,qutip,v5.0.4,,,,,,,Test_dnorm,test_qubit_scalar,"(self, dimension)",,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,"Test_dnorm.test_qubit_triangle(self, dimension)",class_method,,,,"Class method: Test_dnorm.test_qubit_triangle(self, dimension)",qutip,qutip,v5.0.4,,,,,,,Test_dnorm,test_qubit_triangle,"(self, dimension)",,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,"[pytest.mark.repeat(3)] Test_dnorm.test_force_solve(self, dimension, generator)",class_method,,,,"Class method: [pytest.mark.repeat(3)] Test_dnorm.test_force_solve(self, dimension, generator)",qutip,qutip,v5.0.4,,,,,,,Test_dnorm,test_force_solve,"(self, dimension, generator)",,,,,,,,,pytest.mark.repeat(3)
qutip_qutip_v5.0.4,test_metrics.py,python,"[pytest.mark.parametrize(""generator"", [
        pytest.param(rand_super_bcsz, id=""super""),
        pytest.param(rand_unitary, id=""unitary""),
    ])] Test_dnorm.test_force_solve(self, dimension, generator)",class_method,,,,"Class method: [pytest.mark.parametrize(""generator"", [
        pytest.param(rand_super_bcsz, id=""super""),
        pytest.param(rand_unitary, id=""unitary""),
    ])] Test_dnorm.test_force_solve(self, dimension, generator)",qutip,qutip,v5.0.4,,,,,,,Test_dnorm,test_force_solve,"(self, dimension, generator)",,,,,,,,,"pytest.mark.parametrize(""generator"", [
        pytest.param(rand_super_bcsz, id=""super""),
        pytest.param(rand_unitary, id=""unitary""),
    ])"
qutip_qutip_v5.0.4,test_metrics.py,python,"[pytest.mark.repeat(3)] Test_dnorm.test_cptp(self, dimension, sparse)",class_method,,,,"Class method: [pytest.mark.repeat(3)] Test_dnorm.test_cptp(self, dimension, sparse)",qutip,qutip,v5.0.4,,,,,,,Test_dnorm,test_cptp,"(self, dimension, sparse)",,,,,,,,,pytest.mark.repeat(3)
qutip_qutip_v5.0.4,test_metrics.py,python,Test_fidelity,class,,,,Class: Test_fidelity,qutip,qutip,v5.0.4,,,,,,,Test_fidelity,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,Test_tracedist,class,,,,Class: Test_tracedist,qutip,qutip,v5.0.4,,,,,,,Test_tracedist,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,Test_hellinger_dist,class,,,,Class: Test_hellinger_dist,qutip,qutip,v5.0.4,,,,,,,Test_hellinger_dist,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,Test_average_gate_fidelity,class,,,,Class: Test_average_gate_fidelity,qutip,qutip,v5.0.4,,,,,,,Test_average_gate_fidelity,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,Test_hilbert_dist,class,,,,Class: Test_hilbert_dist,qutip,qutip,v5.0.4,,,,,,,Test_hilbert_dist,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,Test_unitarity,class,,,,Class: Test_unitarity,qutip,qutip,v5.0.4,,,,,,,Test_unitarity,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,TestComparisons,class,,,,Class: TestComparisons,qutip,qutip,v5.0.4,,,,,,,TestComparisons,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,Test_dnorm,class,,,,Class: Test_dnorm,qutip,qutip,v5.0.4,,,,,,,Test_dnorm,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,overrotation(x),function,,,,Function: overrotation(x),qutip,qutip,v5.0.4,,,,overrotation,(x),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,had_mixture(x),function,,,,Function: had_mixture(x),qutip,qutip,v5.0.4,,,,had_mixture,(x),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,swap_map(x),function,,,,Function: swap_map(x),qutip,qutip,v5.0.4,,,,swap_map,(x),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,adc_choi(x),function,,,,Function: adc_choi(x),qutip,qutip,v5.0.4,,,,adc_choi,(x),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,test_process_fidelity_identical_unitaries(),function,,,,Function: test_process_fidelity_identical_unitaries(),qutip,qutip,v5.0.4,,,,test_process_fidelity_identical_unitaries,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,test_process_fidelity_consistency(),function,,,,Function: test_process_fidelity_consistency(),qutip,qutip,v5.0.4,,,,test_process_fidelity_consistency,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,test_process_fidelity_unitary_invariance(),function,,,,Function: test_process_fidelity_unitary_invariance(),qutip,qutip,v5.0.4,,,,test_process_fidelity_unitary_invariance,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,test_hilbert_space_dims_chi(),function,,,,Function: test_hilbert_space_dims_chi(),qutip,qutip,v5.0.4,,,,test_hilbert_space_dims_chi,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,left = right = state,constant,left = right = state,left,right = state,Constant: left = right = state,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,"paulis = [qeye(2), sigmax(), sigmay(), sigmaz()]",constant,"paulis = [qeye(2), sigmax(), sigmay(), sigmaz()]",paulis,"[qeye(2), sigmax(), sigmay(), sigmaz()]","Constant: paulis = [qeye(2), sigmax(), sigmay(), sigmaz()]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,platform,import,,,,Import: platform,qutip,qutip,v5.0.4,import platform,,platform,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,Qobj from qutip,import,,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",qutip,Qobj,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,tensor from qutip,import,,,,Import: tensor from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",qutip,tensor,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,fock_dm from qutip,import,,,,Import: fock_dm from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",qutip,fock_dm,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,basis from qutip,import,,,,Import: basis from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",qutip,basis,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,destroy from qutip,import,,,,Import: destroy from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",qutip,destroy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,qdiags from qutip,import,,,,Import: qdiags from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",qutip,qdiags,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,sigmax from qutip,import,,,,Import: sigmax from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",qutip,sigmax,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,sigmay from qutip,import,,,,Import: sigmay from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",qutip,sigmay,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,sigmaz from qutip,import,,,,Import: sigmaz from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",qutip,sigmaz,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,qeye from qutip,import,,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",qutip,qeye,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,rand_ket from qutip,import,,,,Import: rand_ket from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",qutip,rand_ket,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,rand_super_bcsz from qutip,import,,,,Import: rand_super_bcsz from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",qutip,rand_super_bcsz,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,rand_dm from qutip,import,,,,Import: rand_dm from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",qutip,rand_dm,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,rand_unitary from qutip,import,,,,Import: rand_unitary from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",qutip,rand_unitary,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,to_super from qutip,import,,,,Import: to_super from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",qutip,to_super,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,to_choi from qutip,import,,,,Import: to_choi from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",qutip,to_choi,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,kraus_to_choi from qutip,import,,,,Import: kraus_to_choi from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",qutip,kraus_to_choi,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,to_chi from qutip,import,,,,Import: to_chi from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",qutip,to_chi,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,to_kraus from qutip,import,,,,Import: to_kraus from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, tensor, fock_dm, basis, destroy, qdiags, sigmax, sigmay, sigmaz,
    qeye, rand_ket, rand_super_bcsz, rand_dm,
    rand_unitary, to_super, to_choi, kraus_to_choi,
    to_chi, to_kraus,
)",qutip,to_kraus,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,fidelity from qutip,import,,,,Import: fidelity from qutip,qutip,qutip,v5.0.4,"from qutip import (
    fidelity, tracedist, hellinger_dist, dnorm, average_gate_fidelity,
    unitarity, hilbert_dist, bures_dist, process_fidelity,
)",qutip,fidelity,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,tracedist from qutip,import,,,,Import: tracedist from qutip,qutip,qutip,v5.0.4,"from qutip import (
    fidelity, tracedist, hellinger_dist, dnorm, average_gate_fidelity,
    unitarity, hilbert_dist, bures_dist, process_fidelity,
)",qutip,tracedist,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,hellinger_dist from qutip,import,,,,Import: hellinger_dist from qutip,qutip,qutip,v5.0.4,"from qutip import (
    fidelity, tracedist, hellinger_dist, dnorm, average_gate_fidelity,
    unitarity, hilbert_dist, bures_dist, process_fidelity,
)",qutip,hellinger_dist,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,dnorm from qutip,import,,,,Import: dnorm from qutip,qutip,qutip,v5.0.4,"from qutip import (
    fidelity, tracedist, hellinger_dist, dnorm, average_gate_fidelity,
    unitarity, hilbert_dist, bures_dist, process_fidelity,
)",qutip,dnorm,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,average_gate_fidelity from qutip,import,,,,Import: average_gate_fidelity from qutip,qutip,qutip,v5.0.4,"from qutip import (
    fidelity, tracedist, hellinger_dist, dnorm, average_gate_fidelity,
    unitarity, hilbert_dist, bures_dist, process_fidelity,
)",qutip,average_gate_fidelity,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,unitarity from qutip,import,,,,Import: unitarity from qutip,qutip,qutip,v5.0.4,"from qutip import (
    fidelity, tracedist, hellinger_dist, dnorm, average_gate_fidelity,
    unitarity, hilbert_dist, bures_dist, process_fidelity,
)",qutip,unitarity,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,hilbert_dist from qutip,import,,,,Import: hilbert_dist from qutip,qutip,qutip,v5.0.4,"from qutip import (
    fidelity, tracedist, hellinger_dist, dnorm, average_gate_fidelity,
    unitarity, hilbert_dist, bures_dist, process_fidelity,
)",qutip,hilbert_dist,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,bures_dist from qutip,import,,,,Import: bures_dist from qutip,qutip,qutip,v5.0.4,"from qutip import (
    fidelity, tracedist, hellinger_dist, dnorm, average_gate_fidelity,
    unitarity, hilbert_dist, bures_dist, process_fidelity,
)",qutip,bures_dist,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,process_fidelity from qutip,import,,,,Import: process_fidelity from qutip,qutip,qutip,v5.0.4,"from qutip import (
    fidelity, tracedist, hellinger_dist, dnorm, average_gate_fidelity,
    unitarity, hilbert_dist, bures_dist, process_fidelity,
)",qutip,process_fidelity,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,snot from qutip.core.gates,local_import,,,,Import: snot from qutip.core.gates,qutip,qutip,v5.0.4,"from qutip.core.gates import snot, swap",qutip.core.gates,snot,,,qutip.core.gates,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,swap from qutip.core.gates,local_import,,,,Import: swap from qutip.core.gates,qutip,qutip,v5.0.4,"from qutip.core.gates import snot, swap",qutip.core.gates,swap,,,qutip.core.gates,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_metrics.py,python,_hilbert_space_dims from qutip.core.metrics,local_import,,,,Import: _hilbert_space_dims from qutip.core.metrics,qutip,qutip,v5.0.4,from qutip.core.metrics import _hilbert_space_dims,qutip.core.metrics,_hilbert_space_dims,,,qutip.core.metrics,,,,,,,,,,,,
,test_metrics.py,python,,,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_metrics.py,python,,,,,,Directory: qutip\tests\core\test_metrics.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,test_jmat_12(),function,,,,Function: test_jmat_12(),qutip,qutip,v5.0.4,,,,test_jmat_12,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,test_jmat_32(),function,,,,Function: test_jmat_32(),qutip,qutip,v5.0.4,,,,test_jmat_32,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,test_jmat_raise(),function,,,,Function: test_jmat_raise(),qutip,qutip,v5.0.4,,,,test_jmat_raise,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,test_qzero_rectangular(),function,,,,Function: test_qzero_rectangular(),qutip,qutip,v5.0.4,,,,test_qzero_rectangular,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,test_position(),function,,,,Function: test_position(),qutip,qutip,v5.0.4,,,,test_position,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,test_momentum(),function,,,,Function: test_momentum(),qutip,qutip,v5.0.4,,,,test_momentum,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,test_squeeze(),function,,,,Function: test_squeeze(),qutip,qutip,v5.0.4,,,,test_squeeze,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,test_squeezing(),function,,,,Function: test_squeezing(),qutip,qutip,v5.0.4,,,,test_squeezing,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,test_displace(),function,,,,Function: test_displace(),qutip,qutip,v5.0.4,,,,test_displace,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,test_commutator(),function,,,,Function: test_commutator(),qutip,qutip,v5.0.4,,,,test_commutator,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,test_qutrit_ops(),function,,,,Function: test_qutrit_ops(),qutip,qutip,v5.0.4,,,,test_qutrit_ops,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,_id_func(val),function,,,,Function: _id_func(val),qutip,qutip,v5.0.4,,,,_id_func,(val),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,"_check_meta(object, dtype)",function,,,,"Function: _check_meta(object, dtype)",qutip,qutip,v5.0.4,,,,_check_meta,"(object, dtype)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,test_qeye_like_error(),function,,,,Function: test_qeye_like_error(),qutip,qutip,v5.0.4,,,,test_qeye_like_error,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,N = 5,constant,N = 5,N,5,Constant: N = 5,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,"dtype_names = [""dense"", ""csr""] + list(qutip.data.to.dtypes)",constant,"dtype_names = [""dense"", ""csr""] + list(qutip.data.to.dtypes)",dtype_names,"[""dense"", ""csr""] + list(qutip.data.to.dtypes)","Constant: dtype_names = [""dense"", ""csr""] + list(qutip.data.to.dtypes)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,numbers,import,,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,,numbers,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
,test_operators.py,python,,,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_operators.py,python,,,,,,Directory: qutip\tests\core\test_operators.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_ptrace.py,python,"expected(qobj, sel)",function,,,,"Function: expected(qobj, sel)",qutip,qutip,v5.0.4,,,,expected,"(qobj, sel)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_ptrace.py,python,"test_ptrace_noncompound_rand(dtype, dm)",function,,,,"Function: test_ptrace_noncompound_rand(dtype, dm)",qutip,qutip,v5.0.4,,,,test_ptrace_noncompound_rand,"(dtype, dm)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_ptrace.py,python,itertools,import,,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,,itertools,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_ptrace.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_ptrace.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_ptrace.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_ptrace.py,python,data from qutip.core,local_import,,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,qutip.core,data,,,qutip.core,,,,,,,,,,,,
,test_ptrace.py,python,,,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_ptrace.py,python,,,,,,Directory: qutip\tests\core\test_ptrace.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,TestQobjHermicity.test_standard(self),class_method,,,,Class method: TestQobjHermicity.test_standard(self),qutip,qutip,v5.0.4,,,,,,,TestQobjHermicity,test_standard,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,TestQobjHermicity.test_addition(self),class_method,,,,Class method: TestQobjHermicity.test_addition(self),qutip,qutip,v5.0.4,,,,,,,TestQobjHermicity,test_addition,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,TestQobjHermicity.test_multiplication(self),class_method,,,,Class method: TestQobjHermicity.test_multiplication(self),qutip,qutip,v5.0.4,,,,,,,TestQobjHermicity,test_multiplication,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,"MockerScalar.__mul__(self, other)",class_method,,,,"Class method: MockerScalar.__mul__(self, other)",qutip,qutip,v5.0.4,,,,,,,MockerScalar,__mul__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,"MockerScalar.__rmul__(self, other)",class_method,,,,"Class method: MockerScalar.__rmul__(self, other)",qutip,qutip,v5.0.4,,,,,,,MockerScalar,__rmul__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,"MockerScalar.__rtruediv__(self, other)",class_method,,,,"Class method: MockerScalar.__rtruediv__(self, other)",qutip,qutip,v5.0.4,,,,,,,MockerScalar,__rtruediv__,"(self, other)",,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,TestTruncNeg.test_positive_operator(self),class_method,,,,Class method: TestTruncNeg.test_positive_operator(self),qutip,qutip,v5.0.4,,,,,,,TestTruncNeg,test_positive_operator,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,TestTruncNeg.test_diagonal_operator(self),class_method,,,,Class method: TestTruncNeg.test_diagonal_operator(self),qutip,qutip,v5.0.4,,,,,,,TestTruncNeg,test_diagonal_operator,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,TestTruncNeg.test_nondiagonal_operator(self),class_method,,,,Class method: TestTruncNeg.test_nondiagonal_operator(self),qutip,qutip,v5.0.4,,,,,,,TestTruncNeg,test_nondiagonal_operator,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,TestTruncNeg.test_sgs_known_good(self),class_method,,,,Class method: TestTruncNeg.test_sgs_known_good(self),qutip,qutip,v5.0.4,,,,,,,TestTruncNeg,test_sgs_known_good,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,TestQobjHermicity,class,,,,Class: TestQobjHermicity,qutip,qutip,v5.0.4,,,,,,,TestQobjHermicity,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,MockerScalar(),class,,,,Class: MockerScalar(),qutip,qutip,v5.0.4,,,,,,,MockerScalar,,,,,,,,,(),,
qutip_qutip_v5.0.4,test_qobj.py,python,TestTruncNeg,class,,,,Class: TestTruncNeg,qutip,qutip,v5.0.4,,,,,,,TestTruncNeg,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,_random_not_singular(N),function,,,,Function: _random_not_singular(N),qutip,qutip,v5.0.4,,,,_random_not_singular,(N),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,"assert_hermicity(oper, hermicity)",function,,,,"Function: assert_hermicity(oper, hermicity)",qutip,qutip,v5.0.4,,,,assert_hermicity,"(oper, hermicity)",,,,,,,,,"# Check the cached isherm, if any exists.",,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjData(),function,,,,Function: test_QobjData(),qutip,qutip,v5.0.4,,,,test_QobjData,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjType(),function,,,,Function: test_QobjType(),qutip,qutip,v5.0.4,,,,test_QobjType,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,"assert_unitarity(oper, unitarity)",function,,,,"Function: assert_unitarity(oper, unitarity)",qutip,qutip,v5.0.4,,,,assert_unitarity,"(oper, unitarity)",,,,,,,,,"# Check the cached isunitary.",,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjUnitaryOper(),function,,,,Function: test_QobjUnitaryOper(),qutip,qutip,v5.0.4,,,,test_QobjUnitaryOper,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjDimsShape(),function,,,,Function: test_QobjDimsShape(),qutip,qutip,v5.0.4,,,,test_QobjDimsShape,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjMulNonsquareDims(),function,,,,Function: test_QobjMulNonsquareDims(),qutip,qutip,v5.0.4,,,,test_QobjMulNonsquareDims,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjAddition(),function,,,,Function: test_QobjAddition(),qutip,qutip,v5.0.4,,,,test_QobjAddition,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjSubtraction(),function,,,,Function: test_QobjSubtraction(),qutip,qutip,v5.0.4,,,,test_QobjSubtraction,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjMultiplication(),function,,,,Function: test_QobjMultiplication(),qutip,qutip,v5.0.4,,,,test_QobjMultiplication,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjNotImplemented(),function,,,,Function: test_QobjNotImplemented(),qutip,qutip,v5.0.4,,,,test_QobjNotImplemented,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjDivision(),function,,,,Function: test_QobjDivision(),qutip,qutip,v5.0.4,,,,test_QobjDivision,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjPower(),function,,,,Function: test_QobjPower(),qutip,qutip,v5.0.4,,,,test_QobjPower,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjNeg(),function,,,,Function: test_QobjNeg(),qutip,qutip,v5.0.4,,,,test_QobjNeg,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjEquals(),function,,,,Function: test_QobjEquals(),qutip,qutip,v5.0.4,,,,test_QobjEquals,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjGetItem(),function,,,,Function: test_QobjGetItem(),qutip,qutip,v5.0.4,,,,test_QobjGetItem,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_CheckMulType(),function,,,,Function: test_CheckMulType(),qutip,qutip,v5.0.4,,,,test_CheckMulType,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_operator_ket_superrep(),function,,,,Function: test_operator_ket_superrep(),qutip,qutip,v5.0.4,,,,test_operator_ket_superrep,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjConjugate(),function,,,,Function: test_QobjConjugate(),qutip,qutip,v5.0.4,,,,test_QobjConjugate,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjDagger(),function,,,,Function: test_QobjDagger(),qutip,qutip,v5.0.4,,,,test_QobjDagger,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjDiagonals(),function,,,,Function: test_QobjDiagonals(),qutip,qutip,v5.0.4,,,,test_QobjDiagonals,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjEigenEnergies(),function,,,,Function: test_QobjEigenEnergies(),qutip,qutip,v5.0.4,,,,test_QobjEigenEnergies,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjEigenStates(),function,,,,Function: test_QobjEigenStates(),qutip,qutip,v5.0.4,,,,test_QobjEigenStates,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjExpm(),function,,,,Function: test_QobjExpm(),qutip,qutip,v5.0.4,,,,test_QobjExpm,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjExpmExplicitlySparse(),function,,,,Function: test_QobjExpmExplicitlySparse(),qutip,qutip,v5.0.4,,,,test_QobjExpmExplicitlySparse,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjExpmZeroOper(),function,,,,Function: test_QobjExpmZeroOper(),qutip,qutip,v5.0.4,,,,test_QobjExpmZeroOper,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjLogm(),function,,,,Function: test_QobjLogm(),qutip,qutip,v5.0.4,,,,test_QobjLogm,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjLogmExplicitlySparse(),function,,,,Function: test_QobjLogmExplicitlySparse(),qutip,qutip,v5.0.4,,,,test_QobjLogmExplicitlySparse,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjLogmZeroOper(),function,,,,Function: test_QobjLogmZeroOper(),qutip,qutip,v5.0.4,,,,test_QobjLogmZeroOper,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_Qobj_sqrtm(),function,,,,Function: test_Qobj_sqrtm(),qutip,qutip,v5.0.4,,,,test_Qobj_sqrtm,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_Qobj_inv(),function,,,,Function: test_Qobj_inv(),qutip,qutip,v5.0.4,,,,test_Qobj_inv,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjFull(),function,,,,Function: test_QobjFull(),qutip,qutip,v5.0.4,,,,test_QobjFull,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjNorm(),function,,,,Function: test_QobjNorm(),qutip,qutip,v5.0.4,,,,test_QobjNorm,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjPurity(),function,,,,Function: test_QobjPurity(),qutip,qutip,v5.0.4,,,,test_QobjPurity,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_QobjPermute(datatype),function,,,,Function: test_QobjPermute(datatype),qutip,qutip,v5.0.4,,,,test_QobjPermute,(datatype),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_KetType(),function,,,,Function: test_KetType(),qutip,qutip,v5.0.4,,,,test_KetType,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_BraType(),function,,,,Function: test_BraType(),qutip,qutip,v5.0.4,,,,test_BraType,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_OperType(),function,,,,Function: test_OperType(),qutip,qutip,v5.0.4,,,,test_OperType,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_SuperType(),function,,,,Function: test_SuperType(),qutip,qutip,v5.0.4,,,,test_SuperType,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_isherm_skew(),function,,,,Function: test_isherm_skew(),qutip,qutip,v5.0.4,,,,test_isherm_skew,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_super_tensor_operket(),function,,,,Function: test_super_tensor_operket(),qutip,qutip,v5.0.4,,,,test_super_tensor_operket,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_super_tensor_property(),function,,,,Function: test_super_tensor_property(),qutip,qutip,v5.0.4,,,,test_super_tensor_property,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_composite_oper(),function,,,,Function: test_composite_oper(),qutip,qutip,v5.0.4,,,,test_composite_oper,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_composite_vec(),function,,,,Function: test_composite_vec(),qutip,qutip,v5.0.4,,,,test_composite_vec,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,"trunc_neg_case(qobj, method, expected=None)",function,,,,"Function: trunc_neg_case(qobj, method, expected=None)",qutip,qutip,v5.0.4,,,,trunc_neg_case,"(qobj, method, expected=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_cosm(),function,,,,Function: test_cosm(),qutip,qutip,v5.0.4,,,,test_cosm,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_sinm(),function,,,,Function: test_sinm(),qutip,qutip,v5.0.4,,,,test_sinm,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_call(),function,,,,Function: test_call(),qutip,qutip,v5.0.4,,,,test_call,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_mat_elem(),function,,,,Function: test_mat_elem(),qutip,qutip,v5.0.4,,,,test_mat_elem,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_projection(),function,,,,Function: test_projection(),qutip,qutip,v5.0.4,,,,test_projection,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_overlap(),function,,,,Function: test_overlap(),qutip,qutip,v5.0.4,,,,test_overlap,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_unit(),function,,,,Function: test_unit(),qutip,qutip,v5.0.4,,,,test_unit,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_trace(),function,,,,Function: test_trace(),qutip,qutip,v5.0.4,,,,test_trace,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_no_real_attribute(monkeypatch),function,,,,Function: test_no_real_attribute(monkeypatch),qutip,qutip,v5.0.4,,,,test_no_real_attribute,(monkeypatch),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,test_groundstate(),function,,,,Function: test_groundstate(),qutip,qutip,v5.0.4,,,,test_groundstate,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,numbers,import,,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,,numbers,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,operator,import,,,,Import: operator,qutip,qutip,v5.0.4,import operator,,operator,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,scipy.sparse,import,,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse,,scipy.sparse,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,scipy.linalg,import,,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg,,scipy.linalg,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobj.py,python,data from qutip.core,local_import,,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,qutip.core,data,,,qutip.core,,,,,,,,,,,,
,test_qobj.py,python,,,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_qobj.py,python,,,,,,Directory: qutip\tests\core\test_qobj.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,[instance] Pseudo_qevo.cte = cte,class_field,,,,Class field: [instance] Pseudo_qevo.cte = cte,qutip,qutip,v5.0.4,,,,,,,Pseudo_qevo,__init__,"(self, cte, qobj, func, string, args)",self.cte = cte,self.cte = cte,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,[instance] Pseudo_qevo.qobj = qobj,class_field,,,,Class field: [instance] Pseudo_qevo.qobj = qobj,qutip,qutip,v5.0.4,,,,,,,Pseudo_qevo,__init__,"(self, cte, qobj, func, string, args)",self.qobj = qobj,self.qobj = qobj,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,[instance] Pseudo_qevo.func = func,class_field,,,,Class field: [instance] Pseudo_qevo.func = func,qutip,qutip,v5.0.4,,,,,,,Pseudo_qevo,__init__,"(self, cte, qobj, func, string, args)",self.func = func,self.func = func,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,[instance] Pseudo_qevo.str = string,class_field,,,,Class field: [instance] Pseudo_qevo.str = string,qutip,qutip,v5.0.4,,,,,,,Pseudo_qevo,__init__,"(self, cte, qobj, func, string, args)",self.str = string,self.str = string,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,[instance] Pseudo_qevo.args = args,class_field,,,,Class field: [instance] Pseudo_qevo.args = args,qutip,qutip,v5.0.4,,,,,,,Pseudo_qevo,__init__,"(self, cte, qobj, func, string, args)",self.args = args,self.args = args,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,[instance] Feedback_Checker_Coefficient.state = None,class_field,,,,Class field: [instance] Feedback_Checker_Coefficient.state = None,qutip,qutip,v5.0.4,,,,,,,Feedback_Checker_Coefficient,__init__,"(self, stacked=True)",self.state = None,self.state = None,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,[instance] Feedback_Checker_Coefficient.stacked = stacked,class_field,,,,Class field: [instance] Feedback_Checker_Coefficient.stacked = stacked,qutip,qutip,v5.0.4,,,,,,,Feedback_Checker_Coefficient,__init__,"(self, stacked=True)",self.stacked = stacked,self.stacked = stacked,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,"Pseudo_qevo.__init__(self, cte, qobj, func, string, args)",class_method,,,,"Class method: Pseudo_qevo.__init__(self, cte, qobj, func, string, args)",qutip,qutip,v5.0.4,,,,,,,Pseudo_qevo,__init__,"(self, cte, qobj, func, string, args)",,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,Pseudo_qevo.array(self),class_method,,,,Class method: Pseudo_qevo.array(self),qutip,qutip,v5.0.4,,,,,,,Pseudo_qevo,array,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,Pseudo_qevo.logarray(self),class_method,,,,Class method: Pseudo_qevo.logarray(self),qutip,qutip,v5.0.4,,,,,,,Pseudo_qevo,logarray,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,Pseudo_qevo.func_coeff(self),class_method,,,,Class method: Pseudo_qevo.func_coeff(self),qutip,qutip,v5.0.4,,,,,,,Pseudo_qevo,func_coeff,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,Pseudo_qevo.string(self),class_method,,,,Class method: Pseudo_qevo.string(self),qutip,qutip,v5.0.4,,,,,,,Pseudo_qevo,string,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,Pseudo_qevo.func_call(self),class_method,,,,Class method: Pseudo_qevo.func_call(self),qutip,qutip,v5.0.4,,,,,,,Pseudo_qevo,func_call,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,"Pseudo_qevo.__call__(self, t, args={})",class_method,,,,"Class method: Pseudo_qevo.__call__(self, t, args={})",qutip,qutip,v5.0.4,,,,,,,Pseudo_qevo,__call__,"(self, t, args={})",,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,"Pseudo_qevo.__getitem__(self, which)",class_method,,,,"Class method: Pseudo_qevo.__getitem__(self, which)",qutip,qutip,v5.0.4,,,,,,,Pseudo_qevo,__getitem__,"(self, which)",,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,[property] Pseudo_qevo._dims(self),class_method,,,,Class method: [property] Pseudo_qevo._dims(self),qutip,qutip,v5.0.4,,,,,,,Pseudo_qevo,_dims,(self),,,,,,,,,property
qutip_qutip_v5.0.4,test_qobjevo.py,python,"Feedback_Checker_Coefficient.__init__(self, stacked=True)",class_method,,,,"Class method: Feedback_Checker_Coefficient.__init__(self, stacked=True)",qutip,qutip,v5.0.4,,,,,,,Feedback_Checker_Coefficient,__init__,"(self, stacked=True)",,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,"Feedback_Checker_Coefficient.__call__(self, t, data=None, qobj=None, e_val=None)",class_method,,,,"Class method: Feedback_Checker_Coefficient.__call__(self, t, data=None, qobj=None, e_val=None)",qutip,qutip,v5.0.4,,,,,,,Feedback_Checker_Coefficient,__call__,"(self, t, data=None, qobj=None, e_val=None)",,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,Pseudo_qevo,class,,,,Class: Pseudo_qevo,qutip,qutip,v5.0.4,,,,,,,Pseudo_qevo,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,Feedback_Checker_Coefficient,class,,,,Class: Feedback_Checker_Coefficient,qutip,qutip,v5.0.4,,,,,,,Feedback_Checker_Coefficient,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,"_real(t, args)",function,,,,"Function: _real(t, args)",qutip,qutip,v5.0.4,,,,_real,"(t, args)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,"_cplx(t, args)",function,,,,"Function: _cplx(t, args)",qutip,qutip,v5.0.4,,,,_cplx,"(t, args)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,"_assert_qobjevo_equivalent(obj1, obj2, tol=1e-8)",function,,,,"Function: _assert_qobjevo_equivalent(obj1, obj2, tol=1e-8)",qutip,qutip,v5.0.4,,,,_assert_qobjevo_equivalent,"(obj1, obj2, tol=1e-8)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,"_assert_qobj_almost_eq(obj1, obj2, tol=1e-10)",function,,,,"Function: _assert_qobj_almost_eq(obj1, obj2, tol=1e-10)",qutip,qutip,v5.0.4,,,,_assert_qobj_almost_eq,"(obj1, obj2, tol=1e-10)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,"_assert_qobjevo_different(obj1, obj2)",function,,,,"Function: _assert_qobjevo_different(obj1, obj2)",qutip,qutip,v5.0.4,,,,_assert_qobjevo_different,"(obj1, obj2)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,"_div(a, b)",function,,,,"Function: _div(a, b)",qutip,qutip,v5.0.4,,,,_div,"(a, b)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,"test_call(pseudo_qevo, coeff_type)",function,,,,"Function: test_call(pseudo_qevo, coeff_type)",qutip,qutip,v5.0.4,,,,test_call,"(pseudo_qevo, coeff_type)",,,,,,,,,"# test creation of QobjEvo and call",,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,test_QobjEvo_repr(),function,,,,Function: test_QobjEvo_repr(),qutip,qutip,v5.0.4,,,,test_QobjEvo_repr,(),,,,,,,,,"# case_n: cases with Objects of QobjEvo with unique __repr__",,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,test_QobjEvo_repr(),function,,,,Function: test_QobjEvo_repr(),qutip,qutip,v5.0.4,,,,test_QobjEvo_repr,(),,,,,,,,,"# expected_repr_n: are the Expected result from the __repr__",,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,test_copy(all_qevo),function,,,,Function: test_copy(all_qevo),qutip,qutip,v5.0.4,,,,test_copy,(all_qevo),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,binop_coeff(all_qevo),function,,,,Function: binop_coeff(all_qevo),qutip,qutip,v5.0.4,,,,binop_coeff,(all_qevo),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,test_copy_side_effects(all_qevo),function,,,,Function: test_copy_side_effects(all_qevo),qutip,qutip,v5.0.4,,,,test_copy_side_effects,(all_qevo),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,test_QobjEvo_pickle(all_qevo),function,,,,Function: test_QobjEvo_pickle(all_qevo),qutip,qutip,v5.0.4,,,,test_QobjEvo_pickle,(all_qevo),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,test_QobjEvo_restore(all_qevo),function,,,,Function: test_QobjEvo_restore(all_qevo),qutip,qutip,v5.0.4,,,,test_QobjEvo_restore,(all_qevo),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,test_mul_vec(all_qevo),function,,,,Function: test_mul_vec(all_qevo),qutip,qutip,v5.0.4,,,,test_mul_vec,(all_qevo),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,test_matmul(all_qevo),function,,,,Function: test_matmul(all_qevo),qutip,qutip,v5.0.4,,,,test_matmul,(all_qevo),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,test_expect_psi(all_qevo),function,,,,Function: test_expect_psi(all_qevo),qutip,qutip,v5.0.4,,,,test_expect_psi,(all_qevo),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,test_expect_rho(all_qevo),function,,,,Function: test_expect_rho(all_qevo),qutip,qutip,v5.0.4,,,,test_expect_rho,(all_qevo),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,test_compress(),function,,,,Function: test_compress(),qutip,qutip,v5.0.4,,,,test_compress,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,test_QobjEvo_step_coeff(),function,,,,Function: test_QobjEvo_step_coeff(),qutip,qutip,v5.0.4,,,,test_QobjEvo_step_coeff,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,test_QobjEvo_isherm_flag_knowcase(),function,,,,Function: test_QobjEvo_isherm_flag_knowcase(),qutip,qutip,v5.0.4,,,,test_QobjEvo_isherm_flag_knowcase,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,test_feedback_oper(),function,,,,Function: test_feedback_oper(),qutip,qutip,v5.0.4,,,,test_feedback_oper,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,test_feedback_super(),function,,,,Function: test_feedback_super(),qutip,qutip,v5.0.4,,,,test_feedback_super,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,test_qobjevo_mixed(),function,,,,Function: test_qobjevo_mixed(),qutip,qutip,v5.0.4,,,,test_qobjevo_mixed,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,N = 3,constant,N = 3,N,3,Constant: N = 3,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,"args = {'w1': 1, ""w2"": 2}",constant,"args = {'w1': 1, ""w2"": 2}",args,"{'w1': 1, ""w2"": 2}","Constant: args = {'w1': 1, ""w2"": 2}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,"TESTTIMES = np.linspace(0.001, 1.0, 10)",constant,"TESTTIMES = np.linspace(0.001, 1.0, 10)",TESTTIMES,"np.linspace(0.001, 1.0, 10)","Constant: TESTTIMES = np.linspace(0.001, 1.0, 10)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,"real_qevo = Pseudo_qevo(
    rand_stochastic(N).to(_data.CSR),
    rand_stochastic(N).to(_data.CSR),
    _real, ""sin(t*w1)"", args)",constant,"real_qevo = Pseudo_qevo(
    rand_stochastic(N).to(_data.CSR),
    rand_stochastic(N).to(_data.CSR),
    _real, ""sin(t*w1)"", args)",real_qevo,"Pseudo_qevo(
    rand_stochastic(N).to(_data.CSR),
    rand_stochastic(N).to(_data.CSR),
    _real, ""sin(t*w1)"", args)","Constant: real_qevo = Pseudo_qevo(
    rand_stochastic(N).to(_data.CSR),
    rand_stochastic(N).to(_data.CSR),
    _real, ""sin(t*w1)"", args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,"herm_qevo = Pseudo_qevo(
    rand_herm(N).to(_data.Dense),
    rand_herm(N).to(_data.Dense),
    _real, ""sin(t*w1)"", args)",constant,"herm_qevo = Pseudo_qevo(
    rand_herm(N).to(_data.Dense),
    rand_herm(N).to(_data.Dense),
    _real, ""sin(t*w1)"", args)",herm_qevo,"Pseudo_qevo(
    rand_herm(N).to(_data.Dense),
    rand_herm(N).to(_data.Dense),
    _real, ""sin(t*w1)"", args)","Constant: herm_qevo = Pseudo_qevo(
    rand_herm(N).to(_data.Dense),
    rand_herm(N).to(_data.Dense),
    _real, ""sin(t*w1)"", args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,"cplx_qevo = Pseudo_qevo(
    rand_stochastic(N).to(_data.Dense),
    rand_stochastic(N).to(_data.CSR) + rand_stochastic(N).to(_data.CSR) * 1j,
    _cplx, ""exp(1j*t*w2)"", args)",constant,"cplx_qevo = Pseudo_qevo(
    rand_stochastic(N).to(_data.Dense),
    rand_stochastic(N).to(_data.CSR) + rand_stochastic(N).to(_data.CSR) * 1j,
    _cplx, ""exp(1j*t*w2)"", args)",cplx_qevo,"Pseudo_qevo(
    rand_stochastic(N).to(_data.Dense),
    rand_stochastic(N).to(_data.CSR) + rand_stochastic(N).to(_data.CSR) * 1j,
    _cplx, ""exp(1j*t*w2)"", args)","Constant: cplx_qevo = Pseudo_qevo(
    rand_stochastic(N).to(_data.Dense),
    rand_stochastic(N).to(_data.CSR) + rand_stochastic(N).to(_data.CSR) * 1j,
    _cplx, ""exp(1j*t*w2)"", args)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,operator,import,,,,Import: operator,qutip,qutip,v5.0.4,import operator,,operator,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,Qobj from qutip,import,,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qutip,Qobj,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,QobjEvo from qutip,import,,,,Import: QobjEvo from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qutip,QobjEvo,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,coefficient from qutip,import,,,,Import: coefficient from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qutip,coefficient,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,qeye from qutip,import,,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qutip,qeye,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,sigmax from qutip,import,,,,Import: sigmax from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qutip,sigmax,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,sigmaz from qutip,import,,,,Import: sigmaz from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qutip,sigmaz,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,num from qutip,import,,,,Import: num from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qutip,num,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,rand_stochastic from qutip,import,,,,Import: rand_stochastic from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qutip,rand_stochastic,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,rand_herm from qutip,import,,,,Import: rand_herm from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qutip,rand_herm,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,rand_ket from qutip,import,,,,Import: rand_ket from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qutip,rand_ket,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,liouvillian from qutip,import,,,,Import: liouvillian from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qutip,liouvillian,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,basis from qutip,import,,,,Import: basis from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qutip,basis,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,spre from qutip,import,,,,Import: spre from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qutip,spre,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,spost from qutip,import,,,,Import: spost from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qutip,spost,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,to_choi from qutip,import,,,,Import: to_choi from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qutip,to_choi,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,expect from qutip,import,,,,Import: expect from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qutip,expect,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,rand_ket from qutip,import,,,,Import: rand_ket from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qutip,rand_ket,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,rand_dm from qutip,import,,,,Import: rand_dm from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qutip,rand_dm,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,operator_to_vector from qutip,import,,,,Import: operator_to_vector from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qutip,operator_to_vector,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,SESolver from qutip,import,,,,Import: SESolver from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qutip,SESolver,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,MESolver from qutip,import,,,,Import: MESolver from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, QobjEvo, coefficient, qeye, sigmax, sigmaz, num, rand_stochastic,
    rand_herm, rand_ket, liouvillian, basis, spre, spost, to_choi, expect,
    rand_ket, rand_dm, operator_to_vector, SESolver, MESolver
)",qutip,MESolver,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,qutip.core.data,import,,,,Import: qutip.core.data,qutip,qutip,v5.0.4,import qutip.core.data as _data,,qutip.core.data,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,assert_allclose from numpy.testing,local_import,,,,Import: assert_allclose from numpy.testing,qutip,qutip,v5.0.4,from numpy.testing import assert_allclose,numpy.testing,assert_allclose,,,numpy.testing,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qobjevo.py,python,data from qutip.core,local_import,,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,qutip.core,data,,,qutip.core,,,,,,,,,,,,
,test_qobjevo.py,python,,,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_qobjevo.py,python,,,,,,Directory: qutip\tests\core\test_qobjevo.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_states.py,python,test_basis_error_type(),function,,,,Function: test_basis_error_type(),qutip,qutip,v5.0.4,,,,test_basis_error_type,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_states.py,python,test_CoherentState(),function,,,,Function: test_CoherentState(),qutip,qutip,v5.0.4,,,,test_CoherentState,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_states.py,python,test_CoherentDensityMatrix(),function,,,,Function: test_CoherentDensityMatrix(),qutip,qutip,v5.0.4,,,,test_CoherentDensityMatrix,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_states.py,python,test_thermal(),function,,,,Function: test_thermal(),qutip,qutip,v5.0.4,,,,test_thermal,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_states.py,python,test_TripletStateNorm(),function,,,,Function: test_TripletStateNorm(),qutip,qutip,v5.0.4,,,,test_TripletStateNorm,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_states.py,python,test_ket2dm(),function,,,,Function: test_ket2dm(),qutip,qutip,v5.0.4,,,,test_ket2dm,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_states.py,python,test_qstate_error(),function,,,,Function: test_qstate_error(),qutip,qutip,v5.0.4,,,,test_qstate_error,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_states.py,python,test_w_states(),function,,,,Function: test_w_states(),qutip,qutip,v5.0.4,,,,test_w_states,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_states.py,python,test_ghz_states(),function,,,,Function: test_ghz_states(),qutip,qutip,v5.0.4,,,,test_ghz_states,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_states.py,python,test_bell_state(),function,,,,Function: test_bell_state(),qutip,qutip,v5.0.4,,,,test_bell_state,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_states.py,python,_id_func(val),function,,,,Function: _id_func(val),qutip,qutip,v5.0.4,,,,_id_func,(val),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_states.py,python,dtype_names = list(qutip.data.to._str2type.keys()) + list(qutip.data.to.dtypes),constant,dtype_names = list(qutip.data.to._str2type.keys()) + list(qutip.data.to.dtypes),dtype_names,list(qutip.data.to._str2type.keys()) + list(qutip.data.to.dtypes),Constant: dtype_names = list(qutip.data.to._str2type.keys()) + list(qutip.data.to.dtypes),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_states.py,python,dtype_types = list(qutip.data.to._str2type.values()) + list(qutip.data.to.dtypes),constant,dtype_types = list(qutip.data.to._str2type.values()) + list(qutip.data.to.dtypes),dtype_types,list(qutip.data.to._str2type.values()) + list(qutip.data.to.dtypes),Constant: dtype_types = list(qutip.data.to._str2type.values()) + list(qutip.data.to.dtypes),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_states.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_states.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_states.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_states.py,python,partial from functools,import,,,,Import: partial from functools,qutip,qutip,v5.0.4,from functools import partial,functools,partial,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_states.py,python,combinations from itertools,import,,,,Import: combinations from itertools,qutip,qutip,v5.0.4,from itertools import combinations,itertools,combinations,,,,,,,,,,,,,,,
,test_states.py,python,,,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_states.py,python,,,,,,Directory: qutip\tests\core\test_states.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,TestSuper_td.N = 3,class_field,,,,Class field: TestSuper_td.N = 3,qutip,qutip,v5.0.4,,,,,,,TestSuper_td,,,N = 3,,,,,N,,3,
qutip_qutip_v5.0.4,test_superoper.py,python,"TestSuper_td.t1 = qutip.QobjEvo([qutip.qeye(N)*(1 + 0.1j),
                        [qutip.create(N) * (1 - 0.1j), f]])",class_field,,,,"Class field: TestSuper_td.t1 = qutip.QobjEvo([qutip.qeye(N)*(1 + 0.1j),
                        [qutip.create(N) * (1 - 0.1j), f]])",qutip,qutip,v5.0.4,,,,,,,TestSuper_td,,,"t1 = qutip.QobjEvo([qutip.qeye(N)*(1 + 0.1j),
                        [qutip.create(N) * (1 - 0.1j), f]])",,,,,t1,,"qutip.QobjEvo([qutip.qeye(N)*(1 + 0.1j),
                        [qutip.create(N) * (1 - 0.1j), f]])",
qutip_qutip_v5.0.4,test_superoper.py,python,TestSuper_td.t2 = qutip.QobjEvo([qutip.destroy(N) * (1 - 0.2j)]),class_field,,,,Class field: TestSuper_td.t2 = qutip.QobjEvo([qutip.destroy(N) * (1 - 0.2j)]),qutip,qutip,v5.0.4,,,,,,,TestSuper_td,,,t2 = qutip.QobjEvo([qutip.destroy(N) * (1 - 0.2j)]),,,,,t2,,qutip.QobjEvo([qutip.destroy(N) * (1 - 0.2j)]),
qutip_qutip_v5.0.4,test_superoper.py,python,"TestSuper_td.t3 = qutip.QobjEvo([[qutip.num(N) * (1 + 0.2j), f]])",class_field,,,,"Class field: TestSuper_td.t3 = qutip.QobjEvo([[qutip.num(N) * (1 + 0.2j), f]])",qutip,qutip,v5.0.4,,,,,,,TestSuper_td,,,"t3 = qutip.QobjEvo([[qutip.num(N) * (1 + 0.2j), f]])",,,,,t3,,"qutip.QobjEvo([[qutip.num(N) * (1 + 0.2j), f]])",
qutip_qutip_v5.0.4,test_superoper.py,python,TestSuper_td.q1 = qutip.qeye(N) * (1 + 0.3j),class_field,,,,Class field: TestSuper_td.q1 = qutip.qeye(N) * (1 + 0.3j),qutip,qutip,v5.0.4,,,,,,,TestSuper_td,,,q1 = qutip.qeye(N) * (1 + 0.3j),,,,,q1,,qutip.qeye(N) * (1 + 0.3j),
qutip_qutip_v5.0.4,test_superoper.py,python,TestSuper_td.q2 = qutip.destroy(N) * (1 - 0.3j),class_field,,,,Class field: TestSuper_td.q2 = qutip.destroy(N) * (1 - 0.3j),qutip,qutip,v5.0.4,,,,,,,TestSuper_td,,,q2 = qutip.destroy(N) * (1 - 0.3j),,,,,q2,,qutip.destroy(N) * (1 - 0.3j),
qutip_qutip_v5.0.4,test_superoper.py,python,TestSuper_td.q3 = qutip.num(N) * (1 + 0.4j),class_field,,,,Class field: TestSuper_td.q3 = qutip.num(N) * (1 + 0.4j),qutip,qutip,v5.0.4,,,,,,,TestSuper_td,,,q3 = qutip.num(N) * (1 + 0.4j),,,,,q3,,qutip.num(N) * (1 + 0.4j),
qutip_qutip_v5.0.4,test_superoper.py,python,TestMatVec.testOperatorVector(self),class_method,,,,Class method: TestMatVec.testOperatorVector(self),qutip,qutip,v5.0.4,,,,,,,TestMatVec,testOperatorVector,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,TestMatVec.testsuperrep(self),class_method,,,,Class method: TestMatVec.testsuperrep(self),qutip,qutip,v5.0.4,,,,,,,TestMatVec,testsuperrep,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,TestMatVec.testOperatorVectorTensor(self),class_method,,,,Class method: TestMatVec.testOperatorVectorTensor(self),qutip,qutip,v5.0.4,,,,,,,TestMatVec,testOperatorVectorTensor,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,TestMatVec.testOperatorVectorNotSquare(self),class_method,,,,Class method: TestMatVec.testOperatorVectorNotSquare(self),qutip,qutip,v5.0.4,,,,,,,TestMatVec,testOperatorVectorNotSquare,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,TestMatVec.testOperatorSpreAppl(self),class_method,,,,Class method: TestMatVec.testOperatorSpreAppl(self),qutip,qutip,v5.0.4,,,,,,,TestMatVec,testOperatorSpreAppl,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,TestMatVec.testOperatorSpostAppl(self),class_method,,,,Class method: TestMatVec.testOperatorSpostAppl(self),qutip,qutip,v5.0.4,,,,,,,TestMatVec,testOperatorSpostAppl,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,TestMatVec.testOperatorUnitaryTransform(self),class_method,,,,Class method: TestMatVec.testOperatorUnitaryTransform(self),qutip,qutip,v5.0.4,,,,,,,TestMatVec,testOperatorUnitaryTransform,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,TestMatVec.testMatrixVecMat(self),class_method,,,,Class method: TestMatVec.testMatrixVecMat(self),qutip,qutip,v5.0.4,,,,,,,TestMatVec,testMatrixVecMat,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,TestMatVec.testVecMatVec(self),class_method,,,,Class method: TestMatVec.testVecMatVec(self),qutip,qutip,v5.0.4,,,,,,,TestMatVec,testVecMatVec,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,TestMatVec.testVecMatIndexConversion(self),class_method,,,,Class method: TestMatVec.testVecMatIndexConversion(self),qutip,qutip,v5.0.4,,,,,,,TestMatVec,testVecMatIndexConversion,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,TestMatVec.testVecMatIndexCompability(self),class_method,,,,Class method: TestMatVec.testVecMatIndexCompability(self),qutip,qutip,v5.0.4,,,,,,,TestMatVec,testVecMatIndexCompability,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,TestMatVec.test_reshuffle(self),class_method,,,,Class method: TestMatVec.test_reshuffle(self),qutip,qutip,v5.0.4,,,,,,,TestMatVec,test_reshuffle,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,TestMatVec.test_sprepost(self),class_method,,,,Class method: TestMatVec.test_sprepost(self),qutip,qutip,v5.0.4,,,,,,,TestMatVec,test_sprepost,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,"[pytest.mark.parametrize(""dtype"", [_data.CSR, _data.Dense])] TestMatVec.test_operation_dtype(self, dtype, operation)",class_method,,,,"Class method: [pytest.mark.parametrize(""dtype"", [_data.CSR, _data.Dense])] TestMatVec.test_operation_dtype(self, dtype, operation)",qutip,qutip,v5.0.4,,,,,,,TestMatVec,test_operation_dtype,"(self, dtype, operation)",,,,,,,,,"pytest.mark.parametrize(""dtype"", [_data.CSR, _data.Dense])"
qutip_qutip_v5.0.4,test_superoper.py,python,"[pytest.mark.parametrize(""operation"", [qutip.spre,
                                           qutip.spost,
                                           qutip.liouvillian,
                                           qutip.lindblad_dissipator])] TestMatVec.test_operation_dtype(self, dtype, operation)",class_method,,,,"Class method: [pytest.mark.parametrize(""operation"", [qutip.spre,
                                           qutip.spost,
                                           qutip.liouvillian,
                                           qutip.lindblad_dissipator])] TestMatVec.test_operation_dtype(self, dtype, operation)",qutip,qutip,v5.0.4,,,,,,,TestMatVec,test_operation_dtype,"(self, dtype, operation)",,,,,,,,,"pytest.mark.parametrize(""operation"", [qutip.spre,
                                           qutip.spost,
                                           qutip.liouvillian,
                                           qutip.lindblad_dissipator])"
qutip_qutip_v5.0.4,test_superoper.py,python,"[pytest.mark.parametrize(""dtype"", [_data.CSR, _data.Dense])] TestMatVec.test_sprepost_dtype(self, dtype)",class_method,,,,"Class method: [pytest.mark.parametrize(""dtype"", [_data.CSR, _data.Dense])] TestMatVec.test_sprepost_dtype(self, dtype)",qutip,qutip,v5.0.4,,,,,,,TestMatVec,test_sprepost_dtype,"(self, dtype)",,,,,,,,,"pytest.mark.parametrize(""dtype"", [_data.CSR, _data.Dense])"
qutip_qutip_v5.0.4,test_superoper.py,python,TestMatVec.testLiouvillianImplem(self),class_method,,,,Class method: TestMatVec.testLiouvillianImplem(self),qutip,qutip,v5.0.4,,,,,,,TestMatVec,testLiouvillianImplem,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,TestSuper_td.test_spre_td(self),class_method,,,,Class method: TestSuper_td.test_spre_td(self),qutip,qutip,v5.0.4,,,,,,,TestSuper_td,test_spre_td,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,TestSuper_td.test_spost_td(self),class_method,,,,Class method: TestSuper_td.test_spost_td(self),qutip,qutip,v5.0.4,,,,,,,TestSuper_td,test_spost_td,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,TestSuper_td.test_sprepost_td(self),class_method,,,,Class method: TestSuper_td.test_sprepost_td(self),qutip,qutip,v5.0.4,,,,,,,TestSuper_td,test_sprepost_td,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,TestSuper_td.test_operator_vector_td(self),class_method,,,,Class method: TestSuper_td.test_operator_vector_td(self),qutip,qutip,v5.0.4,,,,,,,TestSuper_td,test_operator_vector_td,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,TestSuper_td.test_liouvillian_td(self),class_method,,,,Class method: TestSuper_td.test_liouvillian_td(self),qutip,qutip,v5.0.4,,,,,,,TestSuper_td,test_liouvillian_td,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,TestSuper_td.test_lindblad_dissipator_td(self),class_method,,,,Class method: TestSuper_td.test_lindblad_dissipator_td(self),qutip,qutip,v5.0.4,,,,,,,TestSuper_td,test_lindblad_dissipator_td,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,TestMatVec,class,,,,Class: TestMatVec,qutip,qutip,v5.0.4,,,,,,,TestMatVec,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,TestSuper_td,class,,,,Class: TestSuper_td,qutip,qutip,v5.0.4,,,,,,,TestSuper_td,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,"f(t, args)",function,,,,"Function: f(t, args)",qutip,qutip,v5.0.4,,,,f,"(t, args)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,"liouvillian_ref(H, c_ops=())",function,,,,"Function: liouvillian_ref(H, c_ops=())",qutip,qutip,v5.0.4,,,,liouvillian_ref,"(H, c_ops=())",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,scipy.linalg,import,,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg,,scipy.linalg,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superoper.py,python,data from qutip.core,local_import,,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,qutip.core,data,,,qutip.core,,,,,,,,,,,,
,test_superoper.py,python,,,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_superoper.py,python,,,,,,Directory: qutip\tests\core\test_superoper.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,TestSuperopReps.a = create(2).dag(),class_field,,,,Class field: TestSuperopReps.a = create(2).dag(),qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,,,a = create(2).dag(),,,,,a,,create(2).dag(),
qutip_qutip_v5.0.4,test_superop_reps.py,python,"TestSuperopReps.S = sprepost(a, a.dag())",class_field,,,,"Class field: TestSuperopReps.S = sprepost(a, a.dag())",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,,,"S = sprepost(a, a.dag())",,,,,S,,"sprepost(a, a.dag())",
qutip_qutip_v5.0.4,test_superop_reps.py,python,"TestSuperopReps.S_ = sprepost(a, a)",class_field,,,,"Class field: TestSuperopReps.S_ = sprepost(a, a)",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,,,"S_ = sprepost(a, a)",,,,,S_,,"sprepost(a, a)",
qutip_qutip_v5.0.4,test_superop_reps.py,python,"TestSuperopReps.S_U = (
        to_super(tensor(sigmax(), identity(2))) +
        to_super(tensor(identity(2), sigmay()))
    ) / 2",class_field,,,,"Class field: TestSuperopReps.S_U = (
        to_super(tensor(sigmax(), identity(2))) +
        to_super(tensor(identity(2), sigmay()))
    ) / 2",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,,,"S_U = (
        to_super(tensor(sigmax(), identity(2))) +
        to_super(tensor(identity(2), sigmay()))
    ) / 2",,,,,S_U,,"(
        to_super(tensor(sigmax(), identity(2))) +
        to_super(tensor(identity(2), sigmay()))
    ) / 2",
qutip_qutip_v5.0.4,test_superop_reps.py,python,"TestSuperopReps.ptr_swap = Qobj(swap(), dims=[[[2], [2]]]*2, superrep='choi')",class_field,,,,"Class field: TestSuperopReps.ptr_swap = Qobj(swap(), dims=[[[2], [2]]]*2, superrep='choi')",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,,,"ptr_swap = Qobj(swap(), dims=[[[2], [2]]]*2, superrep='choi')",,,,,ptr_swap,,"Qobj(swap(), dims=[[[2], [2]]]*2, superrep='choi')",
qutip_qutip_v5.0.4,test_superop_reps.py,python,"TestSuperopReps.subnorm_map = Qobj(identity(4) * 0.9, dims=[[[2], [2]]]*2,
                       superrep='super')",class_field,,,,"Class field: TestSuperopReps.subnorm_map = Qobj(identity(4) * 0.9, dims=[[[2], [2]]]*2,
                       superrep='super')",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,,,"subnorm_map = Qobj(identity(4) * 0.9, dims=[[[2], [2]]]*2,
                       superrep='super')",,,,,subnorm_map,,"Qobj(identity(4) * 0.9, dims=[[[2], [2]]]*2,
                       superrep='super')",
qutip_qutip_v5.0.4,test_superop_reps.py,python,"TestSuperopReps.chi_sigmax = [
        [0, 0, 0, 0],
        [0, 4, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]",class_field,,,,"Class field: TestSuperopReps.chi_sigmax = [
        [0, 0, 0, 0],
        [0, 4, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,,,"chi_sigmax = [
        [0, 0, 0, 0],
        [0, 4, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]",,,,,chi_sigmax,,"[
        [0, 0, 0, 0],
        [0, 4, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]",
qutip_qutip_v5.0.4,test_superop_reps.py,python,"TestSuperopReps.chi_diag2 = [
        [4, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]",class_field,,,,"Class field: TestSuperopReps.chi_diag2 = [
        [4, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,,,"chi_diag2 = [
        [4, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]",,,,,chi_diag2,,"[
        [4, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]",
qutip_qutip_v5.0.4,test_superop_reps.py,python,TestSuperopReps.rotX_pi_4 = (-1j * sigmax() * np.pi / 4).expm(),class_field,,,,Class field: TestSuperopReps.rotX_pi_4 = (-1j * sigmax() * np.pi / 4).expm(),qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,,,rotX_pi_4 = (-1j * sigmax() * np.pi / 4).expm(),,,,,rotX_pi_4,,(-1j * sigmax() * np.pi / 4).expm(),
qutip_qutip_v5.0.4,test_superop_reps.py,python,"TestSuperopReps.chi_rotX_pi_4 = [
        [2, 2j, 0, 0],
        [-2j, 2, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]",class_field,,,,"Class field: TestSuperopReps.chi_rotX_pi_4 = [
        [2, 2j, 0, 0],
        [-2j, 2, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,,,"chi_rotX_pi_4 = [
        [2, 2j, 0, 0],
        [-2j, 2, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]",,,,,chi_rotX_pi_4,,"[
        [2, 2j, 0, 0],
        [-2j, 2, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]",
qutip_qutip_v5.0.4,test_superop_reps.py,python,"TestSuperopReps.test_SuperChoiSuper(self, superoperator)",class_method,,,,"Class method: TestSuperopReps.test_SuperChoiSuper(self, superoperator)",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,test_SuperChoiSuper,"(self, superoperator)",,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,"[pytest.mark.parametrize('dimension', [2, 4])] TestSuperopReps.test_SuperChoiChiSuper(self, dimension)",class_method,,,,"Class method: [pytest.mark.parametrize('dimension', [2, 4])] TestSuperopReps.test_SuperChoiChiSuper(self, dimension)",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,test_SuperChoiChiSuper,"(self, dimension)",,,,,,,,,"pytest.mark.parametrize('dimension', [2, 4])"
qutip_qutip_v5.0.4,test_superop_reps.py,python,"TestSuperopReps.test_ChoiKrausChoi(self, superoperator)",class_method,,,,"Class method: TestSuperopReps.test_ChoiKrausChoi(self, superoperator)",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,test_ChoiKrausChoi,"(self, superoperator)",,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,TestSuperopReps.test_NonSquareKrausSuperChoi(self),class_method,,,,Class method: TestSuperopReps.test_NonSquareKrausSuperChoi(self),qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,test_NonSquareKrausSuperChoi,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,TestSuperopReps.test_NeglectSmallKraus(self),class_method,,,,Class method: TestSuperopReps.test_NeglectSmallKraus(self),qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,test_NeglectSmallKraus,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,"TestSuperopReps.test_SuperPreservesSelf(self, superoperator)",class_method,,,,"Class method: TestSuperopReps.test_SuperPreservesSelf(self, superoperator)",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,test_SuperPreservesSelf,"(self, superoperator)",,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,"TestSuperopReps.test_ChoiPreservesSelf(self, superoperator)",class_method,,,,"Class method: TestSuperopReps.test_ChoiPreservesSelf(self, superoperator)",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,test_ChoiPreservesSelf,"(self, superoperator)",,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,"TestSuperopReps.test_random_iscptp(self, superoperator)",class_method,,,,"Class method: TestSuperopReps.test_random_iscptp(self, superoperator)",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,test_random_iscptp,"(self, superoperator)",,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,"[pytest.mark.parametrize(['qobj', 'hp', 'cp', 'tp'], [
        pytest.param(sprepost(destroy(2), create(2)), True, True, False),
        pytest.param(sprepost(destroy(2), destroy(2)), False, False, False),
        pytest.param(qeye(2), True, True, True),
        pytest.param(sigmax(), True, True, True),
        pytest.param(tensor(sigmax(), qeye(2)), True, True, True),
        pytest.param(0.5 * (to_super(tensor(sigmax(), qeye(2)))
                            + to_super(tensor(qeye(2), sigmay()))),
                     True, True, True,
                     id=""linear combination of bipartite unitaries""),
        pytest.param(Qobj(swap(), dims=[[[2],[2]]]*2, superrep='choi'),
                     True, False, True,
                     id=""partial transpose map""),
        pytest.param(Qobj(qeye(4)*0.9, dims=[[[2],[2]]]*2), True, True, False,
                     id=""subnormalized map""),
        pytest.param(basis(2, 0), False, False, False, id=""ket""),
    ])] TestSuperopReps.test_known_iscptp(self, qobj, hp, cp, tp)",class_method,,,,"Class method: [pytest.mark.parametrize(['qobj', 'hp', 'cp', 'tp'], [
        pytest.param(sprepost(destroy(2), create(2)), True, True, False),
        pytest.param(sprepost(destroy(2), destroy(2)), False, False, False),
        pytest.param(qeye(2), True, True, True),
        pytest.param(sigmax(), True, True, True),
        pytest.param(tensor(sigmax(), qeye(2)), True, True, True),
        pytest.param(0.5 * (to_super(tensor(sigmax(), qeye(2)))
                            + to_super(tensor(qeye(2), sigmay()))),
                     True, True, True,
                     id=""linear combination of bipartite unitaries""),
        pytest.param(Qobj(swap(), dims=[[[2],[2]]]*2, superrep='choi'),
                     True, False, True,
                     id=""partial transpose map""),
        pytest.param(Qobj(qeye(4)*0.9, dims=[[[2],[2]]]*2), True, True, False,
                     id=""subnormalized map""),
        pytest.param(basis(2, 0), False, False, False, id=""ket""),
    ])] TestSuperopReps.test_known_iscptp(self, qobj, hp, cp, tp)",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,test_known_iscptp,"(self, qobj, hp, cp, tp)",,,,,,,,,"pytest.mark.parametrize(['qobj', 'hp', 'cp', 'tp'], [
        pytest.param(sprepost(destroy(2), create(2)), True, True, False),
        pytest.param(sprepost(destroy(2), destroy(2)), False, False, False),
        pytest.param(qeye(2), True, True, True),
        pytest.param(sigmax(), True, True, True),
        pytest.param(tensor(sigmax(), qeye(2)), True, True, True),
        pytest.param(0.5 * (to_super(tensor(sigmax(), qeye(2)))
                            + to_super(tensor(qeye(2), sigmay()))),
                     True, True, True,
                     id=""linear combination of bipartite unitaries""),
        pytest.param(Qobj(swap(), dims=[[[2],[2]]]*2, superrep='choi'),
                     True, False, True,
                     id=""partial transpose map""),
        pytest.param(Qobj(qeye(4)*0.9, dims=[[[2],[2]]]*2), True, True, False,
                     id=""subnormalized map""),
        pytest.param(basis(2, 0), False, False, False, id=""ket""),
    ])"
qutip_qutip_v5.0.4,test_superop_reps.py,python,TestSuperopReps.test_choi_tr(self),class_method,,,,Class method: TestSuperopReps.test_choi_tr(self),qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,test_choi_tr,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,"[pytest.mark.parametrize(['qobj',  'shouldhp', 'shouldcp', 'shouldtp'], [
        pytest.param(S, True, True, False, id=""conjugatio by create op""),
        pytest.param(S_, False, False, False, id=""single off-diag""),
        pytest.param(identity(2), True, True, True, id=""Identity""),
        pytest.param(sigmax(), True, True, True, id=""Pauli X""),
        pytest.param(
            tensor(sigmax(), identity(2)), True, True, True,
            id=""bipartite system"",
        ),
        pytest.param(
            S_U, True, True, True, id=""linear combination of bip. unitaries"",
        ),
        pytest.param(ptr_swap,  True, False, True, id=""partial transpose map""),
        pytest.param(subnorm_map, True, True, False, id=""subnorm map""),
        pytest.param(basis(2), False, False, False, id=""not an operator""),

    ])] TestSuperopReps.test_known_iscptp(self, qobj, shouldhp, shouldcp, shouldtp)",class_method,,,,"Class method: [pytest.mark.parametrize(['qobj',  'shouldhp', 'shouldcp', 'shouldtp'], [
        pytest.param(S, True, True, False, id=""conjugatio by create op""),
        pytest.param(S_, False, False, False, id=""single off-diag""),
        pytest.param(identity(2), True, True, True, id=""Identity""),
        pytest.param(sigmax(), True, True, True, id=""Pauli X""),
        pytest.param(
            tensor(sigmax(), identity(2)), True, True, True,
            id=""bipartite system"",
        ),
        pytest.param(
            S_U, True, True, True, id=""linear combination of bip. unitaries"",
        ),
        pytest.param(ptr_swap,  True, False, True, id=""partial transpose map""),
        pytest.param(subnorm_map, True, True, False, id=""subnorm map""),
        pytest.param(basis(2), False, False, False, id=""not an operator""),

    ])] TestSuperopReps.test_known_iscptp(self, qobj, shouldhp, shouldcp, shouldtp)",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,test_known_iscptp,"(self, qobj, shouldhp, shouldcp, shouldtp)",,,,,,,,,"pytest.mark.parametrize(['qobj',  'shouldhp', 'shouldcp', 'shouldtp'], [
        pytest.param(S, True, True, False, id=""conjugatio by create op""),
        pytest.param(S_, False, False, False, id=""single off-diag""),
        pytest.param(identity(2), True, True, True, id=""Identity""),
        pytest.param(sigmax(), True, True, True, id=""Pauli X""),
        pytest.param(
            tensor(sigmax(), identity(2)), True, True, True,
            id=""bipartite system"",
        ),
        pytest.param(
            S_U, True, True, True, id=""linear combination of bip. unitaries"",
        ),
        pytest.param(ptr_swap,  True, False, True, id=""partial transpose map""),
        pytest.param(subnorm_map, True, True, False, id=""subnorm map""),
        pytest.param(basis(2), False, False, False, id=""not an operator""),

    ])"
qutip_qutip_v5.0.4,test_superop_reps.py,python,"TestSuperopReps.test_choi_tr(self, dimension)",class_method,,,,"Class method: TestSuperopReps.test_choi_tr(self, dimension)",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,test_choi_tr,"(self, dimension)",,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,"TestSuperopReps.test_stinespring_cp(self, dimension)",class_method,,,,"Class method: TestSuperopReps.test_stinespring_cp(self, dimension)",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,test_stinespring_cp,"(self, dimension)",,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,"[pytest.mark.repeat(3)] TestSuperopReps.test_stinespring_agrees(self, dimension)",class_method,,,,"Class method: [pytest.mark.repeat(3)] TestSuperopReps.test_stinespring_agrees(self, dimension)",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,test_stinespring_agrees,"(self, dimension)",,,,,,,,,pytest.mark.repeat(3)
qutip_qutip_v5.0.4,test_superop_reps.py,python,"TestSuperopReps.test_stinespring_dims(self, dimension)",class_method,,,,"Class method: TestSuperopReps.test_stinespring_dims(self, dimension)",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,test_stinespring_dims,"(self, dimension)",,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,"[pytest.mark.parametrize('dimension', [2, 4, 8])] TestSuperopReps.test_chi_choi_roundtrip(self, dimension)",class_method,,,,"Class method: [pytest.mark.parametrize('dimension', [2, 4, 8])] TestSuperopReps.test_chi_choi_roundtrip(self, dimension)",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,test_chi_choi_roundtrip,"(self, dimension)",,,,,,,,,"pytest.mark.parametrize('dimension', [2, 4, 8])"
qutip_qutip_v5.0.4,test_superop_reps.py,python,"[pytest.mark.parametrize(['superop', 'chi_expected'], [
        pytest.param(sigmax(), chi_sigmax),
        pytest.param(to_super(sigmax()), chi_sigmax),
        pytest.param(qeye(2), chi_diag2),
        pytest.param(rotX_pi_4, chi_rotX_pi_4)
    ])] TestSuperopReps.test_chi_known(self, superop, chi_expected)",class_method,,,,"Class method: [pytest.mark.parametrize(['superop', 'chi_expected'], [
        pytest.param(sigmax(), chi_sigmax),
        pytest.param(to_super(sigmax()), chi_sigmax),
        pytest.param(qeye(2), chi_diag2),
        pytest.param(rotX_pi_4, chi_rotX_pi_4)
    ])] TestSuperopReps.test_chi_known(self, superop, chi_expected)",qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,test_chi_known,"(self, superop, chi_expected)",,,,,,,,,"pytest.mark.parametrize(['superop', 'chi_expected'], [
        pytest.param(sigmax(), chi_sigmax),
        pytest.param(to_super(sigmax()), chi_sigmax),
        pytest.param(qeye(2), chi_diag2),
        pytest.param(rotX_pi_4, chi_rotX_pi_4)
    ])"
qutip_qutip_v5.0.4,test_superop_reps.py,python,TestSuperopReps,class,,,,Class: TestSuperopReps,qutip,qutip,v5.0.4,,,,,,,TestSuperopReps,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,"assert_kraus_equivalence(a, b, tol=tol)",function,,,,"Function: assert_kraus_equivalence(a, b, tol=tol)",qutip,qutip,v5.0.4,,,,assert_kraus_equivalence,"(a, b, tol=tol)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,tol = 1e-8,constant,tol = 1e-8,tol,1e-8,Constant: tol = 1e-8,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,Qobj from qutip,import,,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,Qobj,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,basis from qutip,import,,,,Import: basis from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,basis,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,identity from qutip,import,,,,Import: identity from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,identity,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,sigmax from qutip,import,,,,Import: sigmax from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,sigmax,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,sigmay from qutip,import,,,,Import: sigmay from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,sigmay,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,qeye from qutip,import,,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,qeye,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,create from qutip,import,,,,Import: create from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,create,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,rand_super from qutip,import,,,,Import: rand_super from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,rand_super,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,rand_super_bcsz from qutip,import,,,,Import: rand_super_bcsz from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,rand_super_bcsz,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,rand_dm from qutip,import,,,,Import: rand_dm from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,rand_dm,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,tensor from qutip,import,,,,Import: tensor from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,tensor,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,super_tensor from qutip,import,,,,Import: super_tensor from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,super_tensor,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,kraus_to_choi from qutip,import,,,,Import: kraus_to_choi from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,kraus_to_choi,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,to_super from qutip,import,,,,Import: to_super from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,to_super,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,to_choi from qutip,import,,,,Import: to_choi from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,to_choi,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,to_kraus from qutip,import,,,,Import: to_kraus from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,to_kraus,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,to_chi from qutip,import,,,,Import: to_chi from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,to_chi,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,to_stinespring from qutip,import,,,,Import: to_stinespring from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,to_stinespring,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,operator_to_vector from qutip,import,,,,Import: operator_to_vector from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,operator_to_vector,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,vector_to_operator from qutip,import,,,,Import: vector_to_operator from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,vector_to_operator,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,sprepost from qutip,import,,,,Import: sprepost from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,sprepost,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,destroy from qutip,import,,,,Import: destroy from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,destroy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,CoreOptions from qutip,import,,,,Import: CoreOptions from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, basis, identity, sigmax, sigmay, qeye, create, rand_super,
    rand_super_bcsz, rand_dm, tensor, super_tensor, kraus_to_choi,
    to_super, to_choi, to_kraus, to_chi, to_stinespring, operator_to_vector,
    vector_to_operator, sprepost, destroy, CoreOptions
)",qutip,CoreOptions,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_superop_reps.py,python,swap from qutip.core.gates,local_import,,,,Import: swap from qutip.core.gates,qutip,qutip,v5.0.4,from qutip.core.gates import swap,qutip.core.gates,swap,,,qutip.core.gates,,,,,,,,,,,,
,test_superop_reps.py,python,,,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_superop_reps.py,python,,,,,,Directory: qutip\tests\core\test_superop_reps.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,"[pytest.mark.parametrize(
        'permutation',
        tuple(itertools.chain(*[
            itertools.permutations(range(k)) for k in [2, 3, 4]
        ])),
        ids=_permutation_id)] Test_expand_operator.test_permutation_without_expansion(self, permutation)",class_method,,,,"Class method: [pytest.mark.parametrize(
        'permutation',
        tuple(itertools.chain(*[
            itertools.permutations(range(k)) for k in [2, 3, 4]
        ])),
        ids=_permutation_id)] Test_expand_operator.test_permutation_without_expansion(self, permutation)",qutip,qutip,v5.0.4,,,,,,,Test_expand_operator,test_permutation_without_expansion,"(self, permutation)",,,,,,,,,"pytest.mark.parametrize(
        'permutation',
        tuple(itertools.chain(*[
            itertools.permutations(range(k)) for k in [2, 3, 4]
        ])),
        ids=_permutation_id)"
qutip_qutip_v5.0.4,test_tensor.py,python,"[pytest.mark.parametrize('n_targets', range(1, 5))] Test_expand_operator.test_general_qubit_expansion(self, n_targets)",class_method,,,,"Class method: [pytest.mark.parametrize('n_targets', range(1, 5))] Test_expand_operator.test_general_qubit_expansion(self, n_targets)",qutip,qutip,v5.0.4,,,,,,,Test_expand_operator,test_general_qubit_expansion,"(self, n_targets)",,,,,,,,,"pytest.mark.parametrize('n_targets', range(1, 5))"
qutip_qutip_v5.0.4,test_tensor.py,python,Test_expand_operator.test_cnot_explicit(self),class_method,,,,Class method: Test_expand_operator.test_cnot_explicit(self),qutip,qutip,v5.0.4,,,,,,,Test_expand_operator,test_cnot_explicit,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,"[pytest.mark.parametrize('dimensions', [
        pytest.param([3, 4, 5], id=""standard""),
        pytest.param([3, 3, 4, 4, 2], id=""standard""),
        pytest.param([1, 2, 3], id=""1D space""),
    ])] Test_expand_operator.test_non_qubit_systems(self, dimensions)",class_method,,,,"Class method: [pytest.mark.parametrize('dimensions', [
        pytest.param([3, 4, 5], id=""standard""),
        pytest.param([3, 3, 4, 4, 2], id=""standard""),
        pytest.param([1, 2, 3], id=""1D space""),
    ])] Test_expand_operator.test_non_qubit_systems(self, dimensions)",qutip,qutip,v5.0.4,,,,,,,Test_expand_operator,test_non_qubit_systems,"(self, dimensions)",,,,,,,,,"pytest.mark.parametrize('dimensions', [
        pytest.param([3, 4, 5], id=""standard""),
        pytest.param([3, 3, 4, 4, 2], id=""standard""),
        pytest.param([1, 2, 3], id=""1D space""),
    ])"
qutip_qutip_v5.0.4,test_tensor.py,python,Test_expand_operator.test_dtype(self),class_method,,,,Class method: Test_expand_operator.test_dtype(self),qutip,qutip,v5.0.4,,,,,,,Test_expand_operator,test_dtype,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,Test_expand_operator,class,,,,Class: Test_expand_operator,qutip,qutip,v5.0.4,,,,,,,Test_expand_operator,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,test_tensor_contract_ident(),function,,,,Function: test_tensor_contract_ident(),qutip,qutip,v5.0.4,,,,test_tensor_contract_ident,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,"case_tensor_contract_other(left, right, pairs,
                               expected_dims, expected_data)",function,,,,"Function: case_tensor_contract_other(left, right, pairs,
                               expected_dims, expected_data)",qutip,qutip,v5.0.4,,,,case_tensor_contract_other,"(left, right, pairs,
                               expected_dims, expected_data)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,test_tensor_contract_other(),function,,,,Function: test_tensor_contract_other(),qutip,qutip,v5.0.4,,,,test_tensor_contract_other,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,"case_tensor_swap(qobj, pairs, expected_dims, expected_data=None)",function,,,,"Function: case_tensor_swap(qobj, pairs, expected_dims, expected_data=None)",qutip,qutip,v5.0.4,,,,case_tensor_swap,"(qobj, pairs, expected_dims, expected_data=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,test_tensor_swap_other(),function,,,,Function: test_tensor_swap_other(),qutip,qutip,v5.0.4,,,,test_tensor_swap_other,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,test_tensor_qobjevo(),function,,,,Function: test_tensor_qobjevo(),qutip,qutip,v5.0.4,,,,test_tensor_qobjevo,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,test_tensor_qobjevo_non_square(),function,,,,Function: test_tensor_qobjevo_non_square(),qutip,qutip,v5.0.4,,,,test_tensor_qobjevo_non_square,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,test_tensor_qobjevo_multiple(),function,,,,Function: test_tensor_qobjevo_multiple(),qutip,qutip,v5.0.4,,,,test_tensor_qobjevo_multiple,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,test_tensor_and(),function,,,,Function: test_tensor_and(),qutip,qutip,v5.0.4,,,,test_tensor_and,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,_permutation_id(permutation),function,,,,Function: _permutation_id(permutation),qutip,qutip,v5.0.4,,,,_permutation_id,(permutation),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,"_tensor_with_entanglement(all_qubits, entangled, entangled_locations)",function,,,,"Function: _tensor_with_entanglement(all_qubits, entangled, entangled_locations)",qutip,qutip,v5.0.4,,,,_tensor_with_entanglement,"(all_qubits, entangled, entangled_locations)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,_apply_permutation(permutation),function,,,,Function: _apply_permutation(permutation),qutip,qutip,v5.0.4,,,,_apply_permutation,(permutation),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,functools,import,,,,Import: functools,qutip,qutip,v5.0.4,import functools,,functools,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,itertools,import,,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,,itertools,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,Qobj from qutip,import,,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",qutip,Qobj,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,identity from qutip,import,,,,Import: identity from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",qutip,identity,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,sigmax from qutip,import,,,,Import: sigmax from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",qutip,sigmax,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,to_super from qutip,import,,,,Import: to_super from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",qutip,to_super,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,to_choi from qutip,import,,,,Import: to_choi from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",qutip,to_choi,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,rand_super_bcsz from qutip,import,,,,Import: rand_super_bcsz from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",qutip,rand_super_bcsz,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,basis from qutip,import,,,,Import: basis from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",qutip,basis,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,tensor_contract from qutip,import,,,,Import: tensor_contract from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",qutip,tensor_contract,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,tensor_swap from qutip,import,,,,Import: tensor_swap from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",qutip,tensor_swap,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,num from qutip,import,,,,Import: num from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",qutip,num,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,QobjEvo from qutip,import,,,,Import: QobjEvo from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",qutip,QobjEvo,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,destroy from qutip,import,,,,Import: destroy from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",qutip,destroy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,tensor from qutip,import,,,,Import: tensor from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",qutip,tensor,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,expand_operator from qutip,import,,,,Import: expand_operator from qutip,qutip,qutip,v5.0.4,"from qutip import (
    Qobj, identity, sigmax, to_super, to_choi, rand_super_bcsz, basis,
    tensor_contract, tensor_swap, num, QobjEvo, destroy, tensor,
    expand_operator
)",qutip,expand_operator,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,assert_equal from numpy.testing,local_import,,,,Import: assert_equal from numpy.testing,qutip,qutip,v5.0.4,"from numpy.testing import assert_equal, assert_",numpy.testing,assert_equal,,,numpy.testing,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_tensor.py,python,assert_ from numpy.testing,local_import,,,,Import: assert_ from numpy.testing,qutip,qutip,v5.0.4,"from numpy.testing import assert_equal, assert_",numpy.testing,assert_,,,numpy.testing,,,,,,,,,,,,
,test_tensor.py,python,,,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_tensor.py,python,,,,,,Directory: qutip\tests\core\test_tensor.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: qutip\tests\core,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: qutip\tests\core\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conftest.py,python,shuffle_indices_scipy_csr(matrix),function,,,,Function: shuffle_indices_scipy_csr(matrix),qutip,qutip,v5.0.4,,,,shuffle_indices_scipy_csr,(matrix),,,,,,,,,,,,,
qutip_qutip_v5.0.4,conftest.py,python,"random_scipy_dia(shape, density, sort=False)",function,,,,"Function: random_scipy_dia(shape, density, sort=False)",qutip,qutip,v5.0.4,,,,random_scipy_dia,"(shape, density, sort=False)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,conftest.py,python,"random_scipy_csr(shape, density, sorted_)",function,,,,"Function: random_scipy_csr(shape, density, sorted_)",qutip,qutip,v5.0.4,,,,random_scipy_csr,"(shape, density, sorted_)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,conftest.py,python,"random_numpy_dense(shape, fortran)",function,,,,"Function: random_numpy_dense(shape, fortran)",qutip,qutip,v5.0.4,,,,random_numpy_dense,"(shape, fortran)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,conftest.py,python,"random_csr(shape, density, sorted_)",function,,,,"Function: random_csr(shape, density, sorted_)",qutip,qutip,v5.0.4,,,,random_csr,"(shape, density, sorted_)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,conftest.py,python,"random_dense(shape, fortran)",function,,,,"Function: random_dense(shape, fortran)",qutip,qutip,v5.0.4,,,,random_dense,"(shape, fortran)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,conftest.py,python,"random_diag(shape, density, sort=False)",function,,,,"Function: random_diag(shape, density, sort=False)",qutip,qutip,v5.0.4,,,,random_diag,"(shape, density, sort=False)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,conftest.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conftest.py,python,scipy.sparse,import,,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse,,scipy.sparse,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,conftest.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
,conftest.py,python,,,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,conftest.py,python,,,,,,Directory: qutip\tests\core\data\conftest.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_convert.py,python,"TestConvert.specialisations = [
        pytest.param(data.dense.from_csr, data.CSR, data.Dense),
        pytest.param(data.dense.from_dia, data.Dia, data.Dense),
        pytest.param(data.csr.from_dense, data.Dense, data.CSR),
        pytest.param(data.csr.from_dia, data.Dia, data.CSR),
        pytest.param(data.dia.from_dense, data.Dense, data.Dia),
        pytest.param(data.dia.from_csr, data.CSR, data.Dia),
    ]",class_field,,,,"Class field: TestConvert.specialisations = [
        pytest.param(data.dense.from_csr, data.CSR, data.Dense),
        pytest.param(data.dense.from_dia, data.Dia, data.Dense),
        pytest.param(data.csr.from_dense, data.Dense, data.CSR),
        pytest.param(data.csr.from_dia, data.Dia, data.CSR),
        pytest.param(data.dia.from_dense, data.Dense, data.Dia),
        pytest.param(data.dia.from_csr, data.CSR, data.Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,TestConvert,,,"specialisations = [
        pytest.param(data.dense.from_csr, data.CSR, data.Dense),
        pytest.param(data.dense.from_dia, data.Dia, data.Dense),
        pytest.param(data.csr.from_dense, data.Dense, data.CSR),
        pytest.param(data.csr.from_dia, data.Dia, data.CSR),
        pytest.param(data.dia.from_dense, data.Dense, data.Dia),
        pytest.param(data.dia.from_csr, data.CSR, data.Dia),
    ]",,,,,specialisations,,"[
        pytest.param(data.dense.from_csr, data.CSR, data.Dense),
        pytest.param(data.dense.from_dia, data.Dia, data.Dense),
        pytest.param(data.csr.from_dense, data.Dense, data.CSR),
        pytest.param(data.csr.from_dia, data.Dia, data.CSR),
        pytest.param(data.dia.from_dense, data.Dense, data.Dia),
        pytest.param(data.dia.from_csr, data.CSR, data.Dia),
    ]",
qutip_qutip_v5.0.4,test_convert.py,python,"TestConvert.op_numpy(self, mat)",class_method,,,,"Class method: TestConvert.op_numpy(self, mat)",qutip,qutip,v5.0.4,,,,,,,TestConvert,op_numpy,"(self, mat)",,,,,,,,,
qutip_qutip_v5.0.4,test_convert.py,python,TestConvert(UnaryOpMixin),class,,,,Class: TestConvert(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestConvert,,,,,,,,,(UnaryOpMixin),,
qutip_qutip_v5.0.4,test_convert.py,python,test_init_empty_data(),function,,,,Function: test_init_empty_data(),qutip,qutip,v5.0.4,,,,test_init_empty_data,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_convert.py,python,dtype_names = list(data.to._str2type.keys()) + list(data.to.dtypes),constant,dtype_names = list(data.to._str2type.keys()) + list(data.to.dtypes),dtype_names,list(data.to._str2type.keys()) + list(data.to.dtypes),Constant: dtype_names = list(data.to._str2type.keys()) + list(data.to.dtypes),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_convert.py,python,dtype_types = list(data.to._str2type.values()) + list(data.to.dtypes),constant,dtype_types = list(data.to._str2type.values()) + list(data.to.dtypes),dtype_types,list(data.to._str2type.values()) + list(data.to.dtypes),Constant: dtype_types = list(data.to._str2type.values()) + list(data.to.dtypes),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_convert.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_convert.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_convert.py,python,sparse from scipy,import,,,,Import: sparse from scipy,qutip,qutip,v5.0.4,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_convert.py,python,data from qutip,import,,,,Import: data from qutip,qutip,qutip,v5.0.4,from qutip import data,qutip,data,,,,,,,,,,,,,,,
,test_convert.py,python,,,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_convert.py,python,,,,,,Directory: qutip\tests\core\data\test_convert.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,"[instance] _blocks.rows = np.array(rows, dtype=data.base.idxint_dtype)",class_field,,,,"Class field: [instance] _blocks.rows = np.array(rows, dtype=data.base.idxint_dtype)",qutip,qutip,v5.0.4,,,,,,,_blocks,__init__,"(self, rows, cols, ops, n_blocks=2, block_size=2)","self.rows = np.array(rows, dtype=data.base.idxint_dtype)","self.rows = np.array(rows, dtype=data.base.idxint_dtype)",,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,"[instance] _blocks.cols = np.array(cols, dtype=data.base.idxint_dtype)",class_field,,,,"Class field: [instance] _blocks.cols = np.array(cols, dtype=data.base.idxint_dtype)",qutip,qutip,v5.0.4,,,,,,,_blocks,__init__,"(self, rows, cols, ops, n_blocks=2, block_size=2)","self.cols = np.array(cols, dtype=data.base.idxint_dtype)","self.cols = np.array(cols, dtype=data.base.idxint_dtype)",,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,"[instance] _blocks.ops = np.array(ops, dtype=object)",class_field,,,,"Class field: [instance] _blocks.ops = np.array(ops, dtype=object)",qutip,qutip,v5.0.4,,,,,,,_blocks,__init__,"(self, rows, cols, ops, n_blocks=2, block_size=2)","self.ops = np.array(ops, dtype=object)","self.ops = np.array(ops, dtype=object)",,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,[instance] _blocks.n_blocks = n_blocks,class_field,,,,Class field: [instance] _blocks.n_blocks = n_blocks,qutip,qutip,v5.0.4,,,,,,,_blocks,__init__,"(self, rows, cols, ops, n_blocks=2, block_size=2)",self.n_blocks = n_blocks,self.n_blocks = n_blocks,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,[instance] _blocks.block_size = block_size,class_field,,,,Class field: [instance] _blocks.block_size = block_size,qutip,qutip,v5.0.4,,,,,,,_blocks,__init__,"(self, rows, cols, ops, n_blocks=2, block_size=2)",self.block_size = block_size,self.block_size = block_size,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,"TestClassMethods.test_init_from_tuple(self, scipy_csr)",class_method,,,,"Class method: TestClassMethods.test_init_from_tuple(self, scipy_csr)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_init_from_tuple,"(self, scipy_csr)",,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,"[pytest.mark.parametrize('d_type', (
        _dtype_complex + _dtype_float + _dtype_int + _dtype_uint
    ))] TestClassMethods.test_init_from_tuple_allowed_dtypes(self, d_type, c_type, r_type)",class_method,,,,"Class method: [pytest.mark.parametrize('d_type', (
        _dtype_complex + _dtype_float + _dtype_int + _dtype_uint
    ))] TestClassMethods.test_init_from_tuple_allowed_dtypes(self, d_type, c_type, r_type)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_init_from_tuple_allowed_dtypes,"(self, d_type, c_type, r_type)",,,,,,,,,"pytest.mark.parametrize('d_type', (
        _dtype_complex + _dtype_float + _dtype_int + _dtype_uint
    ))"
qutip_qutip_v5.0.4,test_csr.py,python,"[pytest.mark.parametrize('c_type', _dtype_int + _dtype_uint)] TestClassMethods.test_init_from_tuple_allowed_dtypes(self, d_type, c_type, r_type)",class_method,,,,"Class method: [pytest.mark.parametrize('c_type', _dtype_int + _dtype_uint)] TestClassMethods.test_init_from_tuple_allowed_dtypes(self, d_type, c_type, r_type)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_init_from_tuple_allowed_dtypes,"(self, d_type, c_type, r_type)",,,,,,,,,"pytest.mark.parametrize('c_type', _dtype_int + _dtype_uint)"
qutip_qutip_v5.0.4,test_csr.py,python,"[pytest.mark.parametrize('r_type', _dtype_int + _dtype_uint)] TestClassMethods.test_init_from_tuple_allowed_dtypes(self, d_type, c_type, r_type)",class_method,,,,"Class method: [pytest.mark.parametrize('r_type', _dtype_int + _dtype_uint)] TestClassMethods.test_init_from_tuple_allowed_dtypes(self, d_type, c_type, r_type)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_init_from_tuple_allowed_dtypes,"(self, d_type, c_type, r_type)",,,,,,,,,"pytest.mark.parametrize('r_type', _dtype_int + _dtype_uint)"
qutip_qutip_v5.0.4,test_csr.py,python,"TestClassMethods.test_init_from_scipy(self, scipy_csr)",class_method,,,,"Class method: TestClassMethods.test_init_from_scipy(self, scipy_csr)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_init_from_scipy,"(self, scipy_csr)",,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,"[pytest.mark.parametrize(['arg', 'kwargs', 'error'], [
        pytest.param((), {}, ValueError, id=""arg 0 tuple""),
        pytest.param((None,), {}, ValueError, id=""arg 1 tuple""),
        pytest.param((None,)*2, {}, ValueError, id=""arg 2 tuple""),
        pytest.param((None,)*3, {}, TypeError, id=""arg None tuple""),
        pytest.param((None,)*4, {}, ValueError, id=""arg 4 tuple""),
        pytest.param(_valid_scipy(), {'shape': ()}, ValueError,
                     id=""scipy-shape 0 tuple""),
        pytest.param(_valid_scipy(), {'shape': (1,)}, ValueError,
                     id=""scipy-shape 1 tuple""),
        pytest.param(_valid_scipy(), {'shape': (None, None)}, ValueError,
                     id=""scipy-shape None tuple""),
        pytest.param(_valid_scipy(), {'shape': [2, 2]}, ValueError,
                     id=""scipy-shape list""),
        pytest.param(_valid_scipy(), {'shape': (1, 2, 3)}, ValueError,
                     id=""scipy-shape 3 tuple""),
        pytest.param(_valid_arg(), {'shape': ()}, ValueError,
                     id=""arg-shape 0 tuple""),
        pytest.param(_valid_arg(), {'shape': (1,)}, ValueError,
                     id=""arg-shape 1 tuple""),
        pytest.param(_valid_arg(), {'shape': (None, None)}, ValueError,
                     id=""arg-shape None tuple""),
        pytest.param(_valid_arg(), {'shape': [2, 2]}, TypeError,
                     id=""arg-shape list""),
        pytest.param(_valid_arg(), {'shape': (1, 2, 3)}, ValueError,
                     id=""arg-shape 3 tuple""),
        pytest.param(_valid_arg(), {'shape': (-1, -1)}, ValueError,
                     id=""arg-negative shape""),
    ])] TestClassMethods.test_init_from_wrong_input(self, arg, kwargs, error)",class_method,,,,"Class method: [pytest.mark.parametrize(['arg', 'kwargs', 'error'], [
        pytest.param((), {}, ValueError, id=""arg 0 tuple""),
        pytest.param((None,), {}, ValueError, id=""arg 1 tuple""),
        pytest.param((None,)*2, {}, ValueError, id=""arg 2 tuple""),
        pytest.param((None,)*3, {}, TypeError, id=""arg None tuple""),
        pytest.param((None,)*4, {}, ValueError, id=""arg 4 tuple""),
        pytest.param(_valid_scipy(), {'shape': ()}, ValueError,
                     id=""scipy-shape 0 tuple""),
        pytest.param(_valid_scipy(), {'shape': (1,)}, ValueError,
                     id=""scipy-shape 1 tuple""),
        pytest.param(_valid_scipy(), {'shape': (None, None)}, ValueError,
                     id=""scipy-shape None tuple""),
        pytest.param(_valid_scipy(), {'shape': [2, 2]}, ValueError,
                     id=""scipy-shape list""),
        pytest.param(_valid_scipy(), {'shape': (1, 2, 3)}, ValueError,
                     id=""scipy-shape 3 tuple""),
        pytest.param(_valid_arg(), {'shape': ()}, ValueError,
                     id=""arg-shape 0 tuple""),
        pytest.param(_valid_arg(), {'shape': (1,)}, ValueError,
                     id=""arg-shape 1 tuple""),
        pytest.param(_valid_arg(), {'shape': (None, None)}, ValueError,
                     id=""arg-shape None tuple""),
        pytest.param(_valid_arg(), {'shape': [2, 2]}, TypeError,
                     id=""arg-shape list""),
        pytest.param(_valid_arg(), {'shape': (1, 2, 3)}, ValueError,
                     id=""arg-shape 3 tuple""),
        pytest.param(_valid_arg(), {'shape': (-1, -1)}, ValueError,
                     id=""arg-negative shape""),
    ])] TestClassMethods.test_init_from_wrong_input(self, arg, kwargs, error)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_init_from_wrong_input,"(self, arg, kwargs, error)",,,,,,,,,"pytest.mark.parametrize(['arg', 'kwargs', 'error'], [
        pytest.param((), {}, ValueError, id=""arg 0 tuple""),
        pytest.param((None,), {}, ValueError, id=""arg 1 tuple""),
        pytest.param((None,)*2, {}, ValueError, id=""arg 2 tuple""),
        pytest.param((None,)*3, {}, TypeError, id=""arg None tuple""),
        pytest.param((None,)*4, {}, ValueError, id=""arg 4 tuple""),
        pytest.param(_valid_scipy(), {'shape': ()}, ValueError,
                     id=""scipy-shape 0 tuple""),
        pytest.param(_valid_scipy(), {'shape': (1,)}, ValueError,
                     id=""scipy-shape 1 tuple""),
        pytest.param(_valid_scipy(), {'shape': (None, None)}, ValueError,
                     id=""scipy-shape None tuple""),
        pytest.param(_valid_scipy(), {'shape': [2, 2]}, ValueError,
                     id=""scipy-shape list""),
        pytest.param(_valid_scipy(), {'shape': (1, 2, 3)}, ValueError,
                     id=""scipy-shape 3 tuple""),
        pytest.param(_valid_arg(), {'shape': ()}, ValueError,
                     id=""arg-shape 0 tuple""),
        pytest.param(_valid_arg(), {'shape': (1,)}, ValueError,
                     id=""arg-shape 1 tuple""),
        pytest.param(_valid_arg(), {'shape': (None, None)}, ValueError,
                     id=""arg-shape None tuple""),
        pytest.param(_valid_arg(), {'shape': [2, 2]}, TypeError,
                     id=""arg-shape list""),
        pytest.param(_valid_arg(), {'shape': (1, 2, 3)}, ValueError,
                     id=""arg-shape 3 tuple""),
        pytest.param(_valid_arg(), {'shape': (-1, -1)}, ValueError,
                     id=""arg-negative shape""),
    ])"
qutip_qutip_v5.0.4,test_csr.py,python,"TestClassMethods.test_copy_returns_a_correct_copy(self, data_csr)",class_method,,,,"Class method: TestClassMethods.test_copy_returns_a_correct_copy(self, data_csr)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_copy_returns_a_correct_copy,"(self, data_csr)",,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,"TestClassMethods.test_as_scipy_returns_a_view(self, data_csr)",class_method,,,,"Class method: TestClassMethods.test_as_scipy_returns_a_view(self, data_csr)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_as_scipy_returns_a_view,"(self, data_csr)",,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,"TestClassMethods.test_as_scipy_caches_result(self, data_csr)",class_method,,,,"Class method: TestClassMethods.test_as_scipy_caches_result(self, data_csr)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_as_scipy_caches_result,"(self, data_csr)",,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,"TestClassMethods.test_as_scipy_of_csr_from_scipy_is_different(self, scipy_csr)",class_method,,,,"Class method: TestClassMethods.test_as_scipy_of_csr_from_scipy_is_different(self, scipy_csr)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_as_scipy_of_csr_from_scipy_is_different,"(self, scipy_csr)",,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,"TestClassMethods.test_as_scipy_of_copy_is_different(self, data_csr)",class_method,,,,"Class method: TestClassMethods.test_as_scipy_of_copy_is_different(self, data_csr)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_as_scipy_of_copy_is_different,"(self, data_csr)",,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,"TestClassMethods.test_as_scipy_is_correct_result(self, scipy_csr)",class_method,,,,"Class method: TestClassMethods.test_as_scipy_is_correct_result(self, scipy_csr)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_as_scipy_is_correct_result,"(self, scipy_csr)",,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,"TestClassMethods.test_as_scipy_of_uninitialised_is_empty(self, shape, density)",class_method,,,,"Class method: TestClassMethods.test_as_scipy_of_uninitialised_is_empty(self, shape, density)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_as_scipy_of_uninitialised_is_empty,"(self, shape, density)",,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,"TestClassMethods.test_to_array_is_correct_result(self, data_csr)",class_method,,,,"Class method: TestClassMethods.test_to_array_is_correct_result(self, data_csr)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_to_array_is_correct_result,"(self, data_csr)",,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,"TestClassMethods.test_sorted_indices(self, data_csr)",class_method,,,,"Class method: TestClassMethods.test_sorted_indices(self, data_csr)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_sorted_indices,"(self, data_csr)",,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,"TestFactoryMethods.test_empty(self, shape, density)",class_method,,,,"Class method: TestFactoryMethods.test_empty(self, shape, density)",qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,test_empty,"(self, shape, density)",,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,"TestFactoryMethods.test_zeros(self, shape)",class_method,,,,"Class method: TestFactoryMethods.test_zeros(self, shape)",qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,test_zeros,"(self, shape)",,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,"[pytest.mark.parametrize('dimension', [1, 5, 100])] TestFactoryMethods.test_identity(self, dimension, scale)",class_method,,,,"Class method: [pytest.mark.parametrize('dimension', [1, 5, 100])] TestFactoryMethods.test_identity(self, dimension, scale)",qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,test_identity,"(self, dimension, scale)",,,,,,,,,"pytest.mark.parametrize('dimension', [1, 5, 100])"
qutip_qutip_v5.0.4,test_csr.py,python,"[pytest.mark.parametrize(
        'scale',
        [None, 2, -0.1, 1.5, 1.5+1j],
        ids=['none', 'int', 'negative', 'float', 'complex']
    )] TestFactoryMethods.test_identity(self, dimension, scale)",class_method,,,,"Class method: [pytest.mark.parametrize(
        'scale',
        [None, 2, -0.1, 1.5, 1.5+1j],
        ids=['none', 'int', 'negative', 'float', 'complex']
    )] TestFactoryMethods.test_identity(self, dimension, scale)",qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,test_identity,"(self, dimension, scale)",,,,,,,,,"pytest.mark.parametrize(
        'scale',
        [None, 2, -0.1, 1.5, 1.5+1j],
        ids=['none', 'int', 'negative', 'float', 'complex']
    )"
qutip_qutip_v5.0.4,test_csr.py,python,"[pytest.mark.parametrize(['diagonals', 'offsets', 'shape'], [
        pytest.param([2j, 3, 5, 9], None, None, id='main diagonal'),
        pytest.param([1], None, None, id='1x1'),
        pytest.param([[0.2j, 0.3]], None, None, id='main diagonal list'),
        pytest.param([0.2j, 0.3], 2, None, id='superdiagonal'),
        pytest.param([0.2j, 0.3], -2, None, id='subdiagonal'),
        pytest.param([[0.2, 0.3, 0.4], [0.1, 0.9]], [-2, 3], None,
                     id='two diagonals'),
        pytest.param([1, 2, 3], 0, (3, 5), id='main wide'),
        pytest.param([1, 2, 3], 0, (5, 3), id='main tall'),
        pytest.param([[1, 2, 3], [4, 5]], [-1, -2], (4, 8), id='two wide sub'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [1, 2], (4, 8),
                     id='two wide super'),
        pytest.param([[1, 2, 3], [4, 5]], [1, 2], (8, 4), id='two tall super'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [-1, -2], (8, 4),
                     id='two tall sub'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, -1, -2], (4, 4),
                     id='out of order'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, 1, -2], (4, 4),
                     id='sum duplicates'),
    ])] TestFactoryMethods.test_diags(self, diagonals, offsets, shape)",class_method,,,,"Class method: [pytest.mark.parametrize(['diagonals', 'offsets', 'shape'], [
        pytest.param([2j, 3, 5, 9], None, None, id='main diagonal'),
        pytest.param([1], None, None, id='1x1'),
        pytest.param([[0.2j, 0.3]], None, None, id='main diagonal list'),
        pytest.param([0.2j, 0.3], 2, None, id='superdiagonal'),
        pytest.param([0.2j, 0.3], -2, None, id='subdiagonal'),
        pytest.param([[0.2, 0.3, 0.4], [0.1, 0.9]], [-2, 3], None,
                     id='two diagonals'),
        pytest.param([1, 2, 3], 0, (3, 5), id='main wide'),
        pytest.param([1, 2, 3], 0, (5, 3), id='main tall'),
        pytest.param([[1, 2, 3], [4, 5]], [-1, -2], (4, 8), id='two wide sub'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [1, 2], (4, 8),
                     id='two wide super'),
        pytest.param([[1, 2, 3], [4, 5]], [1, 2], (8, 4), id='two tall super'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [-1, -2], (8, 4),
                     id='two tall sub'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, -1, -2], (4, 4),
                     id='out of order'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, 1, -2], (4, 4),
                     id='sum duplicates'),
    ])] TestFactoryMethods.test_diags(self, diagonals, offsets, shape)",qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,test_diags,"(self, diagonals, offsets, shape)",,,,,,,,,"pytest.mark.parametrize(['diagonals', 'offsets', 'shape'], [
        pytest.param([2j, 3, 5, 9], None, None, id='main diagonal'),
        pytest.param([1], None, None, id='1x1'),
        pytest.param([[0.2j, 0.3]], None, None, id='main diagonal list'),
        pytest.param([0.2j, 0.3], 2, None, id='superdiagonal'),
        pytest.param([0.2j, 0.3], -2, None, id='subdiagonal'),
        pytest.param([[0.2, 0.3, 0.4], [0.1, 0.9]], [-2, 3], None,
                     id='two diagonals'),
        pytest.param([1, 2, 3], 0, (3, 5), id='main wide'),
        pytest.param([1, 2, 3], 0, (5, 3), id='main tall'),
        pytest.param([[1, 2, 3], [4, 5]], [-1, -2], (4, 8), id='two wide sub'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [1, 2], (4, 8),
                     id='two wide super'),
        pytest.param([[1, 2, 3], [4, 5]], [1, 2], (8, 4), id='two tall super'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [-1, -2], (8, 4),
                     id='two tall sub'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, -1, -2], (4, 4),
                     id='out of order'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, 1, -2], (4, 4),
                     id='sum duplicates'),
    ])"
qutip_qutip_v5.0.4,test_csr.py,python,"[pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((1, 1), (0, 0), None, id='minimal'),
        pytest.param((10, 10), (5, 5), 1.j, id='on diagonal'),
        pytest.param((10, 10), (1, 5), 1., id='upper'),
        pytest.param((10, 10), (5, 1), 2., id='lower'),
        pytest.param((10, 1), (5, 0), None, id='column'),
        pytest.param((1, 10), (0, 5), -5j, id='row'),
        pytest.param((10, 2), (5, 1), 1+2j, id='tall'),
        pytest.param((2, 10), (1, 5), 10, id='wide'),
    ])] TestFactoryMethods.test_one_element(self, shape, position, value)",class_method,,,,"Class method: [pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((1, 1), (0, 0), None, id='minimal'),
        pytest.param((10, 10), (5, 5), 1.j, id='on diagonal'),
        pytest.param((10, 10), (1, 5), 1., id='upper'),
        pytest.param((10, 10), (5, 1), 2., id='lower'),
        pytest.param((10, 1), (5, 0), None, id='column'),
        pytest.param((1, 10), (0, 5), -5j, id='row'),
        pytest.param((10, 2), (5, 1), 1+2j, id='tall'),
        pytest.param((2, 10), (1, 5), 10, id='wide'),
    ])] TestFactoryMethods.test_one_element(self, shape, position, value)",qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,test_one_element,"(self, shape, position, value)",,,,,,,,,"pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((1, 1), (0, 0), None, id='minimal'),
        pytest.param((10, 10), (5, 5), 1.j, id='on diagonal'),
        pytest.param((10, 10), (1, 5), 1., id='upper'),
        pytest.param((10, 10), (5, 1), 2., id='lower'),
        pytest.param((10, 1), (5, 0), None, id='column'),
        pytest.param((1, 10), (0, 5), -5j, id='row'),
        pytest.param((10, 2), (5, 1), 1+2j, id='tall'),
        pytest.param((2, 10), (1, 5), 10, id='wide'),
    ])"
qutip_qutip_v5.0.4,test_csr.py,python,"[pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((0, 0), (0, 0), None, id='zero shape'),
        pytest.param((10, -2), (5, 0), 1.j, id='neg shape'),
        pytest.param((10, 10), (10, 5), 1., id='outside'),
        pytest.param((10, 10), (5, -1), 2., id='outside neg'),
    ])] TestFactoryMethods.test_one_element_error(self, shape, position, value)",class_method,,,,"Class method: [pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((0, 0), (0, 0), None, id='zero shape'),
        pytest.param((10, -2), (5, 0), 1.j, id='neg shape'),
        pytest.param((10, 10), (10, 5), 1., id='outside'),
        pytest.param((10, 10), (5, -1), 2., id='outside neg'),
    ])] TestFactoryMethods.test_one_element_error(self, shape, position, value)",qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,test_one_element_error,"(self, shape, position, value)",,,,,,,,,"pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((0, 0), (0, 0), None, id='zero shape'),
        pytest.param((10, -2), (5, 0), 1.j, id='neg shape'),
        pytest.param((10, 10), (10, 5), 1., id='outside'),
        pytest.param((10, 10), (5, -1), 2., id='outside neg'),
    ])"
qutip_qutip_v5.0.4,test_csr.py,python,"_blocks.__init__(self, rows, cols, ops, n_blocks=2, block_size=2)",class_method,,,,"Class method: _blocks.__init__(self, rows, cols, ops, n_blocks=2, block_size=2)",qutip,qutip,v5.0.4,,,,,,,_blocks,__init__,"(self, rows, cols, ops, n_blocks=2, block_size=2)",,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,_blocks.from_csr_blocks(self),class_method,,,,Class method: _blocks.from_csr_blocks(self),qutip,qutip,v5.0.4,,,,,,,_blocks,from_csr_blocks,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,"[pytest.mark.parametrize(['blocks'], [
        pytest.param(_blocks((0, 1), (0,), 1), id='rows neq ops'),
        pytest.param(_blocks((0,), (0, 1), 1), id='cols neq ops'),
    ])] TestFromCSRBlocks.test_input_length_error(self, blocks)",class_method,,,,"Class method: [pytest.mark.parametrize(['blocks'], [
        pytest.param(_blocks((0, 1), (0,), 1), id='rows neq ops'),
        pytest.param(_blocks((0,), (0, 1), 1), id='cols neq ops'),
    ])] TestFromCSRBlocks.test_input_length_error(self, blocks)",qutip,qutip,v5.0.4,,,,,,,TestFromCSRBlocks,test_input_length_error,"(self, blocks)",,,,,,,,,"pytest.mark.parametrize(['blocks'], [
        pytest.param(_blocks((0, 1), (0,), 1), id='rows neq ops'),
        pytest.param(_blocks((0,), (0, 1), 1), id='cols neq ops'),
    ])"
qutip_qutip_v5.0.4,test_csr.py,python,TestFromCSRBlocks.test_op_shape_error(self),class_method,,,,Class method: TestFromCSRBlocks.test_op_shape_error(self),qutip,qutip,v5.0.4,,,,,,,TestFromCSRBlocks,test_op_shape_error,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,"[pytest.mark.parametrize(['blocks'], [
        pytest.param(_blocks((1, 0), (0, 1), 2), id='rows not ordered'),
        pytest.param(_blocks((1, 1), (1, 0), 2), id='cols not ordered'),
        pytest.param(_blocks((1, 0), (1, 0), 2), id='non-unique block'),
    ])] TestFromCSRBlocks.test_op_ordering_error(self, blocks)",class_method,,,,"Class method: [pytest.mark.parametrize(['blocks'], [
        pytest.param(_blocks((1, 0), (0, 1), 2), id='rows not ordered'),
        pytest.param(_blocks((1, 1), (1, 0), 2), id='cols not ordered'),
        pytest.param(_blocks((1, 0), (1, 0), 2), id='non-unique block'),
    ])] TestFromCSRBlocks.test_op_ordering_error(self, blocks)",qutip,qutip,v5.0.4,,,,,,,TestFromCSRBlocks,test_op_ordering_error,"(self, blocks)",,,,,,,,,"pytest.mark.parametrize(['blocks'], [
        pytest.param(_blocks((1, 0), (0, 1), 2), id='rows not ordered'),
        pytest.param(_blocks((1, 1), (1, 0), 2), id='cols not ordered'),
        pytest.param(_blocks((1, 0), (1, 0), 2), id='non-unique block'),
    ])"
qutip_qutip_v5.0.4,test_csr.py,python,"[pytest.mark.parametrize(['blocks'], [
        pytest.param(_blocks((), (), ()), id='no ops'),
        pytest.param(_blocks((0, 1), (1, 0), 2), id='zero ops'),
    ])] TestFromCSRBlocks.test_zeros_output_fast_paths(self, blocks)",class_method,,,,"Class method: [pytest.mark.parametrize(['blocks'], [
        pytest.param(_blocks((), (), ()), id='no ops'),
        pytest.param(_blocks((0, 1), (1, 0), 2), id='zero ops'),
    ])] TestFromCSRBlocks.test_zeros_output_fast_paths(self, blocks)",qutip,qutip,v5.0.4,,,,,,,TestFromCSRBlocks,test_zeros_output_fast_paths,"(self, blocks)",,,,,,,,,"pytest.mark.parametrize(['blocks'], [
        pytest.param(_blocks((), (), ()), id='no ops'),
        pytest.param(_blocks((0, 1), (1, 0), 2), id='zero ops'),
    ])"
qutip_qutip_v5.0.4,test_csr.py,python,TestFromCSRBlocks.test_construct_identity_with_empty(self),class_method,,,,Class method: TestFromCSRBlocks.test_construct_identity_with_empty(self),qutip,qutip,v5.0.4,,,,,,,TestFromCSRBlocks,test_construct_identity_with_empty,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,TestFromCSRBlocks.test_construct_identity_with_zeros(self),class_method,,,,Class method: TestFromCSRBlocks.test_construct_identity_with_zeros(self),qutip,qutip,v5.0.4,,,,,,,TestFromCSRBlocks,test_construct_identity_with_zeros,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,TestFromCSRBlocks.test_construct_kron(self),class_method,,,,Class method: TestFromCSRBlocks.test_construct_kron(self),qutip,qutip,v5.0.4,,,,,,,TestFromCSRBlocks,test_construct_kron,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,TestClassMethods,class,,,,Class: TestClassMethods,qutip,qutip,v5.0.4,,,,,,,TestClassMethods,,,,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,TestFactoryMethods,class,,,,Class: TestFactoryMethods,qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,,,,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,TestFromCSRBlocks,class,,,,Class: TestFromCSRBlocks,qutip,qutip,v5.0.4,,,,,,,TestFromCSRBlocks,,,,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,_blocks,class,,,,Class: _blocks,qutip,qutip,v5.0.4,,,,,,,_blocks,,,,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,_valid_scipy(),function,,,,Function: _valid_scipy(),qutip,qutip,v5.0.4,,,,_valid_scipy,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,_valid_arg(),function,,,,Function: _valid_arg(),qutip,qutip,v5.0.4,,,,_valid_arg,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,test_tidyup(),function,,,,Function: test_tidyup(),qutip,qutip,v5.0.4,,,,test_tidyup,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,_dtype_complex = ['complex128'],constant,_dtype_complex = ['complex128'],_dtype_complex,['complex128'],Constant: _dtype_complex = ['complex128'],qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,_dtype_float = ['float64'],constant,_dtype_float = ['float64'],_dtype_float,['float64'],Constant: _dtype_float = ['float64'],qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,"_dtype_int = ['int32', 'int64']",constant,"_dtype_int = ['int32', 'int64']",_dtype_int,"['int32', 'int64']","Constant: _dtype_int = ['int32', 'int64']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,_dtype_uint = ['uint32'],constant,_dtype_uint = ['uint32'],_dtype_uint,['uint32'],Constant: _dtype_uint = ['uint32'],qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,scipy.sparse,import,,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse,,scipy.sparse,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,qeye from qutip,import,,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import qeye, CoreOptions",qutip,qeye,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,CoreOptions from qutip,import,,,,Import: CoreOptions from qutip,qutip,qutip,v5.0.4,"from qutip import qeye, CoreOptions",qutip,CoreOptions,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,data from qutip.core,local_import,,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data,qutip.core,data,,,qutip.core,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_csr.py,python,csr from qutip.core.data,local_import,,,,Import: csr from qutip.core.data,qutip,qutip,v5.0.4,from qutip.core.data import csr,qutip.core.data,csr,,,qutip.core.data,,,,,,,,,,,,
,test_csr.py,python,,,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_csr.py,python,,,,,,Directory: qutip\tests\core\data\test_csr.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dense.py,python,"TestClassMethods.test_init_from_ndarray(self, numpy_dense)",class_method,,,,"Class method: TestClassMethods.test_init_from_ndarray(self, numpy_dense)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_init_from_ndarray,"(self, numpy_dense)",,,,,,,,,
qutip_qutip_v5.0.4,test_dense.py,python,"[pytest.mark.parametrize('dtype', ['complex128',
                                       'float64',
                                       'int32', 'int64',
                                       'uint32'])] TestClassMethods.test_init_from_ndarray_other_dtype(self, shape, dtype)",class_method,,,,"Class method: [pytest.mark.parametrize('dtype', ['complex128',
                                       'float64',
                                       'int32', 'int64',
                                       'uint32'])] TestClassMethods.test_init_from_ndarray_other_dtype(self, shape, dtype)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_init_from_ndarray_other_dtype,"(self, shape, dtype)",,,,,,,,,"pytest.mark.parametrize('dtype', ['complex128',
                                       'float64',
                                       'int32', 'int64',
                                       'uint32'])"
qutip_qutip_v5.0.4,test_dense.py,python,"[pytest.mark.parametrize(['arg', 'kwargs', 'error'], [
        pytest.param(_valid_numpy(), {'shape': ()}, ValueError,
                     id=""numpy-shape 0 tuple""),
        pytest.param(_valid_numpy(), {'shape': (1,)}, ValueError,
                     id=""numpy-shape 1 tuple""),
        pytest.param(_valid_numpy(), {'shape': (None, None)}, ValueError,
                     id=""numpy-shape None tuple""),
        pytest.param(_valid_numpy(), {'shape': [2, 2]}, ValueError,
                     id=""numpy-shape list""),
        pytest.param(_valid_numpy(), {'shape': (1, 2, 3)}, ValueError,
                     id=""numpy-shape 3 tuple""),
        pytest.param(_valid_numpy(), {'shape': (-1, 1)}, ValueError,
                     id=""numpy-negative shape""),
        pytest.param(_valid_numpy(), {'shape': (-4, -4)}, ValueError,
                     id=""numpy-both negative shape""),
        pytest.param(_valid_numpy(), {'shape': (1213, 1217)}, ValueError,
                     id=""numpy-different shape""),
    ])] TestClassMethods.test_init_from_wrong_input(self, arg, kwargs, error)",class_method,,,,"Class method: [pytest.mark.parametrize(['arg', 'kwargs', 'error'], [
        pytest.param(_valid_numpy(), {'shape': ()}, ValueError,
                     id=""numpy-shape 0 tuple""),
        pytest.param(_valid_numpy(), {'shape': (1,)}, ValueError,
                     id=""numpy-shape 1 tuple""),
        pytest.param(_valid_numpy(), {'shape': (None, None)}, ValueError,
                     id=""numpy-shape None tuple""),
        pytest.param(_valid_numpy(), {'shape': [2, 2]}, ValueError,
                     id=""numpy-shape list""),
        pytest.param(_valid_numpy(), {'shape': (1, 2, 3)}, ValueError,
                     id=""numpy-shape 3 tuple""),
        pytest.param(_valid_numpy(), {'shape': (-1, 1)}, ValueError,
                     id=""numpy-negative shape""),
        pytest.param(_valid_numpy(), {'shape': (-4, -4)}, ValueError,
                     id=""numpy-both negative shape""),
        pytest.param(_valid_numpy(), {'shape': (1213, 1217)}, ValueError,
                     id=""numpy-different shape""),
    ])] TestClassMethods.test_init_from_wrong_input(self, arg, kwargs, error)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_init_from_wrong_input,"(self, arg, kwargs, error)",,,,,,,,,"pytest.mark.parametrize(['arg', 'kwargs', 'error'], [
        pytest.param(_valid_numpy(), {'shape': ()}, ValueError,
                     id=""numpy-shape 0 tuple""),
        pytest.param(_valid_numpy(), {'shape': (1,)}, ValueError,
                     id=""numpy-shape 1 tuple""),
        pytest.param(_valid_numpy(), {'shape': (None, None)}, ValueError,
                     id=""numpy-shape None tuple""),
        pytest.param(_valid_numpy(), {'shape': [2, 2]}, ValueError,
                     id=""numpy-shape list""),
        pytest.param(_valid_numpy(), {'shape': (1, 2, 3)}, ValueError,
                     id=""numpy-shape 3 tuple""),
        pytest.param(_valid_numpy(), {'shape': (-1, 1)}, ValueError,
                     id=""numpy-negative shape""),
        pytest.param(_valid_numpy(), {'shape': (-4, -4)}, ValueError,
                     id=""numpy-both negative shape""),
        pytest.param(_valid_numpy(), {'shape': (1213, 1217)}, ValueError,
                     id=""numpy-different shape""),
    ])"
qutip_qutip_v5.0.4,test_dense.py,python,"TestClassMethods.test_copy_returns_a_correct_copy(self, data_dense)",class_method,,,,"Class method: TestClassMethods.test_copy_returns_a_correct_copy(self, data_dense)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_copy_returns_a_correct_copy,"(self, data_dense)",,,,,,,,,
qutip_qutip_v5.0.4,test_dense.py,python,"TestClassMethods.test_as_ndarray_returns_a_view(self, data_dense)",class_method,,,,"Class method: TestClassMethods.test_as_ndarray_returns_a_view(self, data_dense)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_as_ndarray_returns_a_view,"(self, data_dense)",,,,,,,,,
qutip_qutip_v5.0.4,test_dense.py,python,"TestClassMethods.test_as_ndarray_caches_result(self, data_dense)",class_method,,,,"Class method: TestClassMethods.test_as_ndarray_caches_result(self, data_dense)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_as_ndarray_caches_result,"(self, data_dense)",,,,,,,,,
qutip_qutip_v5.0.4,test_dense.py,python,"TestClassMethods.test_as_ndarray_of_dense_from_ndarray_is_different(self, numpy_dense)",class_method,,,,"Class method: TestClassMethods.test_as_ndarray_of_dense_from_ndarray_is_different(self, numpy_dense)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_as_ndarray_of_dense_from_ndarray_is_different,"(self, numpy_dense)",,,,,,,,,
qutip_qutip_v5.0.4,test_dense.py,python,"TestClassMethods.test_as_ndarray_of_copy_is_different(self, data_dense)",class_method,,,,"Class method: TestClassMethods.test_as_ndarray_of_copy_is_different(self, data_dense)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_as_ndarray_of_copy_is_different,"(self, data_dense)",,,,,,,,,
qutip_qutip_v5.0.4,test_dense.py,python,"TestClassMethods.test_as_ndarray_is_correct_result(self, numpy_dense)",class_method,,,,"Class method: TestClassMethods.test_as_ndarray_is_correct_result(self, numpy_dense)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_as_ndarray_is_correct_result,"(self, numpy_dense)",,,,,,,,,
qutip_qutip_v5.0.4,test_dense.py,python,"TestClassMethods.test_to_array_is_correct_result(self, data_dense)",class_method,,,,"Class method: TestClassMethods.test_to_array_is_correct_result(self, data_dense)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_to_array_is_correct_result,"(self, data_dense)",,,,,,,,,
qutip_qutip_v5.0.4,test_dense.py,python,"[pytest.mark.parametrize('new_fortran', [
        pytest.param(-1, id='swap'),
        pytest.param(False, id='C'),
        pytest.param(True, id='Fortran'),
    ])] TestClassMethods.test_reorder(self, data_dense, new_fortran)",class_method,,,,"Class method: [pytest.mark.parametrize('new_fortran', [
        pytest.param(-1, id='swap'),
        pytest.param(False, id='C'),
        pytest.param(True, id='Fortran'),
    ])] TestClassMethods.test_reorder(self, data_dense, new_fortran)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_reorder,"(self, data_dense, new_fortran)",,,,,,,,,"pytest.mark.parametrize('new_fortran', [
        pytest.param(-1, id='swap'),
        pytest.param(False, id='C'),
        pytest.param(True, id='Fortran'),
    ])"
qutip_qutip_v5.0.4,test_dense.py,python,"TestFactoryMethods.test_empty(self, shape)",class_method,,,,"Class method: TestFactoryMethods.test_empty(self, shape)",qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,test_empty,"(self, shape)",,,,,,,,,
qutip_qutip_v5.0.4,test_dense.py,python,"TestFactoryMethods.test_zeros(self, shape)",class_method,,,,"Class method: TestFactoryMethods.test_zeros(self, shape)",qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,test_zeros,"(self, shape)",,,,,,,,,
qutip_qutip_v5.0.4,test_dense.py,python,"[pytest.mark.parametrize('dimension', [1, 5, 100])] TestFactoryMethods.test_identity(self, dimension, scale)",class_method,,,,"Class method: [pytest.mark.parametrize('dimension', [1, 5, 100])] TestFactoryMethods.test_identity(self, dimension, scale)",qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,test_identity,"(self, dimension, scale)",,,,,,,,,"pytest.mark.parametrize('dimension', [1, 5, 100])"
qutip_qutip_v5.0.4,test_dense.py,python,"[pytest.mark.parametrize(
        'scale',
        [None, 2, -0.1, 1.5, 1.5+1j],
        ids=['none', 'int', 'negative', 'float', 'complex']
    )] TestFactoryMethods.test_identity(self, dimension, scale)",class_method,,,,"Class method: [pytest.mark.parametrize(
        'scale',
        [None, 2, -0.1, 1.5, 1.5+1j],
        ids=['none', 'int', 'negative', 'float', 'complex']
    )] TestFactoryMethods.test_identity(self, dimension, scale)",qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,test_identity,"(self, dimension, scale)",,,,,,,,,"pytest.mark.parametrize(
        'scale',
        [None, 2, -0.1, 1.5, 1.5+1j],
        ids=['none', 'int', 'negative', 'float', 'complex']
    )"
qutip_qutip_v5.0.4,test_dense.py,python,"[pytest.mark.parametrize(['diagonals', 'offsets', 'shape'], [
        pytest.param([2j, 3, 5, 9], None, None, id='main diagonal'),
        pytest.param([1], None, None, id='1x1'),
        pytest.param([[0.2j, 0.3]], None, None, id='main diagonal list'),
        pytest.param([0.2j, 0.3], 2, None, id='superdiagonal'),
        pytest.param([0.2j, 0.3], -2, None, id='subdiagonal'),
        pytest.param([[0.2, 0.3, 0.4], [0.1, 0.9]], [-2, 3], None,
                     id='two diagonals'),
        pytest.param([1, 2, 3], 0, (3, 5), id='main wide'),
        pytest.param([1, 2, 3], 0, (5, 3), id='main tall'),
        pytest.param([[1, 2, 3], [4, 5]], [-1, -2], (4, 8), id='two wide sub'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [1, 2], (4, 8),
                     id='two wide super'),
        pytest.param([[1, 2, 3], [4, 5]], [1, 2], (8, 4), id='two tall super'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [-1, -2], (8, 4),
                     id='two tall sub'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, -1, -2], (4, 4),
                     id='out of order'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, 1, -2], (4, 4),
                     id='sum duplicates'),
    ])] TestFactoryMethods.test_diags(self, diagonals, offsets, shape)",class_method,,,,"Class method: [pytest.mark.parametrize(['diagonals', 'offsets', 'shape'], [
        pytest.param([2j, 3, 5, 9], None, None, id='main diagonal'),
        pytest.param([1], None, None, id='1x1'),
        pytest.param([[0.2j, 0.3]], None, None, id='main diagonal list'),
        pytest.param([0.2j, 0.3], 2, None, id='superdiagonal'),
        pytest.param([0.2j, 0.3], -2, None, id='subdiagonal'),
        pytest.param([[0.2, 0.3, 0.4], [0.1, 0.9]], [-2, 3], None,
                     id='two diagonals'),
        pytest.param([1, 2, 3], 0, (3, 5), id='main wide'),
        pytest.param([1, 2, 3], 0, (5, 3), id='main tall'),
        pytest.param([[1, 2, 3], [4, 5]], [-1, -2], (4, 8), id='two wide sub'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [1, 2], (4, 8),
                     id='two wide super'),
        pytest.param([[1, 2, 3], [4, 5]], [1, 2], (8, 4), id='two tall super'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [-1, -2], (8, 4),
                     id='two tall sub'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, -1, -2], (4, 4),
                     id='out of order'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, 1, -2], (4, 4),
                     id='sum duplicates'),
    ])] TestFactoryMethods.test_diags(self, diagonals, offsets, shape)",qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,test_diags,"(self, diagonals, offsets, shape)",,,,,,,,,"pytest.mark.parametrize(['diagonals', 'offsets', 'shape'], [
        pytest.param([2j, 3, 5, 9], None, None, id='main diagonal'),
        pytest.param([1], None, None, id='1x1'),
        pytest.param([[0.2j, 0.3]], None, None, id='main diagonal list'),
        pytest.param([0.2j, 0.3], 2, None, id='superdiagonal'),
        pytest.param([0.2j, 0.3], -2, None, id='subdiagonal'),
        pytest.param([[0.2, 0.3, 0.4], [0.1, 0.9]], [-2, 3], None,
                     id='two diagonals'),
        pytest.param([1, 2, 3], 0, (3, 5), id='main wide'),
        pytest.param([1, 2, 3], 0, (5, 3), id='main tall'),
        pytest.param([[1, 2, 3], [4, 5]], [-1, -2], (4, 8), id='two wide sub'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [1, 2], (4, 8),
                     id='two wide super'),
        pytest.param([[1, 2, 3], [4, 5]], [1, 2], (8, 4), id='two tall super'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [-1, -2], (8, 4),
                     id='two tall sub'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, -1, -2], (4, 4),
                     id='out of order'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, 1, -2], (4, 4),
                     id='sum duplicates'),
    ])"
qutip_qutip_v5.0.4,test_dense.py,python,"[pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((1, 1), (0, 0), None, id='minimal'),
        pytest.param((10, 10), (5, 5), 1.j, id='on diagonal'),
        pytest.param((10, 10), (1, 5), 1., id='upper'),
        pytest.param((10, 10), (5, 1), 2., id='lower'),
        pytest.param((10, 1), (5, 0), None, id='column'),
        pytest.param((1, 10), (0, 5), -5.j, id='row'),
        pytest.param((10, 2), (5, 1), 1+2j, id='tall'),
        pytest.param((2, 10), (1, 5), 10, id='wide'),
    ])] TestFactoryMethods.test_one_element(self, shape, position, value)",class_method,,,,"Class method: [pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((1, 1), (0, 0), None, id='minimal'),
        pytest.param((10, 10), (5, 5), 1.j, id='on diagonal'),
        pytest.param((10, 10), (1, 5), 1., id='upper'),
        pytest.param((10, 10), (5, 1), 2., id='lower'),
        pytest.param((10, 1), (5, 0), None, id='column'),
        pytest.param((1, 10), (0, 5), -5.j, id='row'),
        pytest.param((10, 2), (5, 1), 1+2j, id='tall'),
        pytest.param((2, 10), (1, 5), 10, id='wide'),
    ])] TestFactoryMethods.test_one_element(self, shape, position, value)",qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,test_one_element,"(self, shape, position, value)",,,,,,,,,"pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((1, 1), (0, 0), None, id='minimal'),
        pytest.param((10, 10), (5, 5), 1.j, id='on diagonal'),
        pytest.param((10, 10), (1, 5), 1., id='upper'),
        pytest.param((10, 10), (5, 1), 2., id='lower'),
        pytest.param((10, 1), (5, 0), None, id='column'),
        pytest.param((1, 10), (0, 5), -5.j, id='row'),
        pytest.param((10, 2), (5, 1), 1+2j, id='tall'),
        pytest.param((2, 10), (1, 5), 10, id='wide'),
    ])"
qutip_qutip_v5.0.4,test_dense.py,python,"[pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((0, 0), (0, 0), None, id='zero shape'),
        pytest.param((10, -2), (5, 0), 1.j, id='neg shape'),
        pytest.param((10, 10), (10, 5), 1., id='outside'),
        pytest.param((10, 10), (5, -1), 2., id='outside neg'),
    ])] TestFactoryMethods.test_one_element_error(self, shape, position, value)",class_method,,,,"Class method: [pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((0, 0), (0, 0), None, id='zero shape'),
        pytest.param((10, -2), (5, 0), 1.j, id='neg shape'),
        pytest.param((10, 10), (10, 5), 1., id='outside'),
        pytest.param((10, 10), (5, -1), 2., id='outside neg'),
    ])] TestFactoryMethods.test_one_element_error(self, shape, position, value)",qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,test_one_element_error,"(self, shape, position, value)",,,,,,,,,"pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((0, 0), (0, 0), None, id='zero shape'),
        pytest.param((10, -2), (5, 0), 1.j, id='neg shape'),
        pytest.param((10, 10), (10, 5), 1., id='outside'),
        pytest.param((10, 10), (5, -1), 2., id='outside neg'),
    ])"
qutip_qutip_v5.0.4,test_dense.py,python,TestClassMethods,class,,,,Class: TestClassMethods,qutip,qutip,v5.0.4,,,,,,,TestClassMethods,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dense.py,python,TestFactoryMethods,class,,,,Class: TestFactoryMethods,qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dense.py,python,_valid_numpy(),function,,,,Function: _valid_numpy(),qutip,qutip,v5.0.4,,,,_valid_numpy,(),,,,,,,,,"# Arbitrary valid numpy array.",,,,
qutip_qutip_v5.0.4,test_dense.py,python,test_OrderEfficiencyWarning(),function,,,,Function: test_OrderEfficiencyWarning(),qutip,qutip,v5.0.4,,,,test_OrderEfficiencyWarning,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dense.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dense.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dense.py,python,data from qutip.core,local_import,,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data,qutip.core,data,,,qutip.core,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dense.py,python,dense from qutip.core.data,local_import,,,,Import: dense from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import dense, csr",qutip.core.data,dense,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dense.py,python,csr from qutip.core.data,local_import,,,,Import: csr from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import dense, csr",qutip.core.data,csr,,,qutip.core.data,,,,,,,,,,,,
,test_dense.py,python,,,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_dense.py,python,,,,,,Directory: qutip\tests\core\data\test_dense.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,"TestClassMethods.test_init_from_scipy(self, scipy_dia)",class_method,,,,"Class method: TestClassMethods.test_init_from_scipy(self, scipy_dia)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_init_from_scipy,"(self, scipy_dia)",,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,"TestClassMethods.test_init_from_tuple(self, scipy_dia)",class_method,,,,"Class method: TestClassMethods.test_init_from_tuple(self, scipy_dia)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_init_from_tuple,"(self, scipy_dia)",,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,"[pytest.mark.parametrize('d_type', (
        _dtype_complex + _dtype_float + _dtype_int + _dtype_uint
    ))] TestClassMethods.test_init_from_tuple_allowed_dtypes(self, d_type, o_type)",class_method,,,,"Class method: [pytest.mark.parametrize('d_type', (
        _dtype_complex + _dtype_float + _dtype_int + _dtype_uint
    ))] TestClassMethods.test_init_from_tuple_allowed_dtypes(self, d_type, o_type)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_init_from_tuple_allowed_dtypes,"(self, d_type, o_type)",,,,,,,,,"pytest.mark.parametrize('d_type', (
        _dtype_complex + _dtype_float + _dtype_int + _dtype_uint
    ))"
qutip_qutip_v5.0.4,test_dia.py,python,"[pytest.mark.parametrize('o_type', _dtype_int + _dtype_uint)] TestClassMethods.test_init_from_tuple_allowed_dtypes(self, d_type, o_type)",class_method,,,,"Class method: [pytest.mark.parametrize('o_type', _dtype_int + _dtype_uint)] TestClassMethods.test_init_from_tuple_allowed_dtypes(self, d_type, o_type)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_init_from_tuple_allowed_dtypes,"(self, d_type, o_type)",,,,,,,,,"pytest.mark.parametrize('o_type', _dtype_int + _dtype_uint)"
qutip_qutip_v5.0.4,test_dia.py,python,"[pytest.mark.parametrize(['arg', 'kwargs', 'error'], [
        pytest.param((), {}, ValueError, id=""arg 0 tuple""),
        pytest.param((None,), {}, ValueError, id=""arg 1 tuple""),
        pytest.param((None,)*2, {}, TypeError, id=""arg None tuple""),
        pytest.param((None,)*3, {}, ValueError, id=""arg 3 tuple""),
        pytest.param(_valid_scipy(), {'shape': ()}, ValueError,
                     id=""scipy-shape 0 tuple""),
        pytest.param(_valid_scipy(), {'shape': (1,)}, ValueError,
                     id=""scipy-shape 1 tuple""),
        pytest.param(_valid_scipy(), {'shape': (None, None)}, ValueError,
                     id=""scipy-shape None tuple""),
        pytest.param(_valid_scipy(), {'shape': [2, 2]}, ValueError,
                     id=""scipy-shape list""),
        pytest.param(_valid_scipy(), {'shape': (1, 2, 3)}, ValueError,
                     id=""scipy-shape 3 tuple""),
        pytest.param(_valid_arg(), {'shape': ()}, ValueError,
                     id=""arg-shape 0 tuple""),
        pytest.param(_valid_arg(), {'shape': (1,)}, ValueError,
                     id=""arg-shape 1 tuple""),
        pytest.param(_valid_arg(), {'shape': (None, None)}, ValueError,
                     id=""arg-shape None tuple""),
        pytest.param(_valid_arg(), {'shape': [2, 2]}, TypeError,
                     id=""arg-shape list""),
        pytest.param(_valid_arg(), {'shape': (1, 2, 3)}, ValueError,
                     id=""arg-shape 3 tuple""),
        pytest.param(_valid_arg(), {'shape': (-1, -1)}, ValueError,
                     id=""arg-negative shape""),
    ])] TestClassMethods.test_init_from_wrong_input(self, arg, kwargs, error)",class_method,,,,"Class method: [pytest.mark.parametrize(['arg', 'kwargs', 'error'], [
        pytest.param((), {}, ValueError, id=""arg 0 tuple""),
        pytest.param((None,), {}, ValueError, id=""arg 1 tuple""),
        pytest.param((None,)*2, {}, TypeError, id=""arg None tuple""),
        pytest.param((None,)*3, {}, ValueError, id=""arg 3 tuple""),
        pytest.param(_valid_scipy(), {'shape': ()}, ValueError,
                     id=""scipy-shape 0 tuple""),
        pytest.param(_valid_scipy(), {'shape': (1,)}, ValueError,
                     id=""scipy-shape 1 tuple""),
        pytest.param(_valid_scipy(), {'shape': (None, None)}, ValueError,
                     id=""scipy-shape None tuple""),
        pytest.param(_valid_scipy(), {'shape': [2, 2]}, ValueError,
                     id=""scipy-shape list""),
        pytest.param(_valid_scipy(), {'shape': (1, 2, 3)}, ValueError,
                     id=""scipy-shape 3 tuple""),
        pytest.param(_valid_arg(), {'shape': ()}, ValueError,
                     id=""arg-shape 0 tuple""),
        pytest.param(_valid_arg(), {'shape': (1,)}, ValueError,
                     id=""arg-shape 1 tuple""),
        pytest.param(_valid_arg(), {'shape': (None, None)}, ValueError,
                     id=""arg-shape None tuple""),
        pytest.param(_valid_arg(), {'shape': [2, 2]}, TypeError,
                     id=""arg-shape list""),
        pytest.param(_valid_arg(), {'shape': (1, 2, 3)}, ValueError,
                     id=""arg-shape 3 tuple""),
        pytest.param(_valid_arg(), {'shape': (-1, -1)}, ValueError,
                     id=""arg-negative shape""),
    ])] TestClassMethods.test_init_from_wrong_input(self, arg, kwargs, error)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_init_from_wrong_input,"(self, arg, kwargs, error)",,,,,,,,,"pytest.mark.parametrize(['arg', 'kwargs', 'error'], [
        pytest.param((), {}, ValueError, id=""arg 0 tuple""),
        pytest.param((None,), {}, ValueError, id=""arg 1 tuple""),
        pytest.param((None,)*2, {}, TypeError, id=""arg None tuple""),
        pytest.param((None,)*3, {}, ValueError, id=""arg 3 tuple""),
        pytest.param(_valid_scipy(), {'shape': ()}, ValueError,
                     id=""scipy-shape 0 tuple""),
        pytest.param(_valid_scipy(), {'shape': (1,)}, ValueError,
                     id=""scipy-shape 1 tuple""),
        pytest.param(_valid_scipy(), {'shape': (None, None)}, ValueError,
                     id=""scipy-shape None tuple""),
        pytest.param(_valid_scipy(), {'shape': [2, 2]}, ValueError,
                     id=""scipy-shape list""),
        pytest.param(_valid_scipy(), {'shape': (1, 2, 3)}, ValueError,
                     id=""scipy-shape 3 tuple""),
        pytest.param(_valid_arg(), {'shape': ()}, ValueError,
                     id=""arg-shape 0 tuple""),
        pytest.param(_valid_arg(), {'shape': (1,)}, ValueError,
                     id=""arg-shape 1 tuple""),
        pytest.param(_valid_arg(), {'shape': (None, None)}, ValueError,
                     id=""arg-shape None tuple""),
        pytest.param(_valid_arg(), {'shape': [2, 2]}, TypeError,
                     id=""arg-shape list""),
        pytest.param(_valid_arg(), {'shape': (1, 2, 3)}, ValueError,
                     id=""arg-shape 3 tuple""),
        pytest.param(_valid_arg(), {'shape': (-1, -1)}, ValueError,
                     id=""arg-negative shape""),
    ])"
qutip_qutip_v5.0.4,test_dia.py,python,"TestClassMethods.test_copy_returns_a_correct_copy(self, data_diag)",class_method,,,,"Class method: TestClassMethods.test_copy_returns_a_correct_copy(self, data_diag)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_copy_returns_a_correct_copy,"(self, data_diag)",,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,"TestClassMethods.test_as_scipy_returns_a_view(self, data_diag)",class_method,,,,"Class method: TestClassMethods.test_as_scipy_returns_a_view(self, data_diag)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_as_scipy_returns_a_view,"(self, data_diag)",,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,"TestClassMethods.test_as_scipy_caches_result(self, data_diag)",class_method,,,,"Class method: TestClassMethods.test_as_scipy_caches_result(self, data_diag)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_as_scipy_caches_result,"(self, data_diag)",,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,"TestClassMethods.test_as_scipy_of_dia_from_scipy_is_different(self, scipy_dia)",class_method,,,,"Class method: TestClassMethods.test_as_scipy_of_dia_from_scipy_is_different(self, scipy_dia)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_as_scipy_of_dia_from_scipy_is_different,"(self, scipy_dia)",,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,"TestClassMethods.test_as_scipy_of_copy_is_different(self, data_diag)",class_method,,,,"Class method: TestClassMethods.test_as_scipy_of_copy_is_different(self, data_diag)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_as_scipy_of_copy_is_different,"(self, data_diag)",,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,"TestClassMethods.test_as_scipy_is_correct_result(self, scipy_dia)",class_method,,,,"Class method: TestClassMethods.test_as_scipy_is_correct_result(self, scipy_dia)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_as_scipy_is_correct_result,"(self, scipy_dia)",,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,"TestClassMethods.test_as_scipy_of_uninitialised_is_empty(self, shape)",class_method,,,,"Class method: TestClassMethods.test_as_scipy_of_uninitialised_is_empty(self, shape)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_as_scipy_of_uninitialised_is_empty,"(self, shape)",,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,"TestClassMethods.test_to_array_is_correct_result(self, data_diag)",class_method,,,,"Class method: TestClassMethods.test_to_array_is_correct_result(self, data_diag)",qutip,qutip,v5.0.4,,,,,,,TestClassMethods,test_to_array_is_correct_result,"(self, data_diag)",,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,"TestFactoryMethods.test_empty(self, shape, density)",class_method,,,,"Class method: TestFactoryMethods.test_empty(self, shape, density)",qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,test_empty,"(self, shape, density)",,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,"TestFactoryMethods.test_zeros(self, shape)",class_method,,,,"Class method: TestFactoryMethods.test_zeros(self, shape)",qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,test_zeros,"(self, shape)",,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,"[pytest.mark.parametrize('dimension', [1, 5, 100])] TestFactoryMethods.test_identity(self, dimension, scale)",class_method,,,,"Class method: [pytest.mark.parametrize('dimension', [1, 5, 100])] TestFactoryMethods.test_identity(self, dimension, scale)",qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,test_identity,"(self, dimension, scale)",,,,,,,,,"pytest.mark.parametrize('dimension', [1, 5, 100])"
qutip_qutip_v5.0.4,test_dia.py,python,"[pytest.mark.parametrize(
        'scale',
        [None, 2, -0.1, 1.5, 1.5+1j],
        ids=['none', 'int', 'negative', 'float', 'complex']
    )] TestFactoryMethods.test_identity(self, dimension, scale)",class_method,,,,"Class method: [pytest.mark.parametrize(
        'scale',
        [None, 2, -0.1, 1.5, 1.5+1j],
        ids=['none', 'int', 'negative', 'float', 'complex']
    )] TestFactoryMethods.test_identity(self, dimension, scale)",qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,test_identity,"(self, dimension, scale)",,,,,,,,,"pytest.mark.parametrize(
        'scale',
        [None, 2, -0.1, 1.5, 1.5+1j],
        ids=['none', 'int', 'negative', 'float', 'complex']
    )"
qutip_qutip_v5.0.4,test_dia.py,python,"[pytest.mark.parametrize(['diagonals', 'offsets', 'shape'], [
        pytest.param([2j, 3, 5, 9], None, None, id='main diagonal'),
        pytest.param([1], None, None, id='1x1'),
        pytest.param([[0.2j, 0.3]], None, None, id='main diagonal list'),
        pytest.param([0.2j, 0.3], 2, None, id='superdiagonal'),
        pytest.param([0.2j, 0.3], -2, None, id='subdiagonal'),
        pytest.param([[0.2, 0.3, 0.4], [0.1, 0.9]], [-2, 3], None,
                     id='two diagonals'),
        pytest.param([1, 2, 3], 0, (3, 5), id='main wide'),
        pytest.param([1, 2, 3], 0, (5, 3), id='main tall'),
        pytest.param([[1, 2, 3], [4, 5]], [-1, -2], (4, 8), id='two wide sub'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [1, 2], (4, 8),
                     id='two wide super'),
        pytest.param([[1, 2, 3], [4, 5]], [1, 2], (8, 4), id='two tall super'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [-1, -2], (8, 4),
                     id='two tall sub'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, -1, -2], (4, 4),
                     id='out of order'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, 1, -2], (4, 4),
                     id='sum duplicates'),
    ])] TestFactoryMethods.test_diags(self, diagonals, offsets, shape)",class_method,,,,"Class method: [pytest.mark.parametrize(['diagonals', 'offsets', 'shape'], [
        pytest.param([2j, 3, 5, 9], None, None, id='main diagonal'),
        pytest.param([1], None, None, id='1x1'),
        pytest.param([[0.2j, 0.3]], None, None, id='main diagonal list'),
        pytest.param([0.2j, 0.3], 2, None, id='superdiagonal'),
        pytest.param([0.2j, 0.3], -2, None, id='subdiagonal'),
        pytest.param([[0.2, 0.3, 0.4], [0.1, 0.9]], [-2, 3], None,
                     id='two diagonals'),
        pytest.param([1, 2, 3], 0, (3, 5), id='main wide'),
        pytest.param([1, 2, 3], 0, (5, 3), id='main tall'),
        pytest.param([[1, 2, 3], [4, 5]], [-1, -2], (4, 8), id='two wide sub'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [1, 2], (4, 8),
                     id='two wide super'),
        pytest.param([[1, 2, 3], [4, 5]], [1, 2], (8, 4), id='two tall super'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [-1, -2], (8, 4),
                     id='two tall sub'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, -1, -2], (4, 4),
                     id='out of order'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, 1, -2], (4, 4),
                     id='sum duplicates'),
    ])] TestFactoryMethods.test_diags(self, diagonals, offsets, shape)",qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,test_diags,"(self, diagonals, offsets, shape)",,,,,,,,,"pytest.mark.parametrize(['diagonals', 'offsets', 'shape'], [
        pytest.param([2j, 3, 5, 9], None, None, id='main diagonal'),
        pytest.param([1], None, None, id='1x1'),
        pytest.param([[0.2j, 0.3]], None, None, id='main diagonal list'),
        pytest.param([0.2j, 0.3], 2, None, id='superdiagonal'),
        pytest.param([0.2j, 0.3], -2, None, id='subdiagonal'),
        pytest.param([[0.2, 0.3, 0.4], [0.1, 0.9]], [-2, 3], None,
                     id='two diagonals'),
        pytest.param([1, 2, 3], 0, (3, 5), id='main wide'),
        pytest.param([1, 2, 3], 0, (5, 3), id='main tall'),
        pytest.param([[1, 2, 3], [4, 5]], [-1, -2], (4, 8), id='two wide sub'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [1, 2], (4, 8),
                     id='two wide super'),
        pytest.param([[1, 2, 3], [4, 5]], [1, 2], (8, 4), id='two tall super'),
        pytest.param([[1, 2, 3, 4], [4, 5, 4j, 1j]], [-1, -2], (8, 4),
                     id='two tall sub'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, -1, -2], (4, 4),
                     id='out of order'),
        pytest.param([[1, 2, 3], [4, 5, 6], [1, 2]], [1, 1, -2], (4, 4),
                     id='sum duplicates'),
    ])"
qutip_qutip_v5.0.4,test_dia.py,python,"[pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((1, 1), (0, 0), None, id='minimal'),
        pytest.param((10, 10), (5, 5), 1.j, id='on diagonal'),
        pytest.param((10, 10), (1, 5), 1., id='upper'),
        pytest.param((10, 10), (5, 1), 2., id='lower'),
        pytest.param((10, 1), (5, 0), None, id='column'),
        pytest.param((1, 10), (0, 5), -5.j, id='row'),
        pytest.param((10, 2), (5, 1), 1+2j, id='tall'),
        pytest.param((2, 10), (1, 5), 10, id='wide'),
    ])] TestFactoryMethods.test_one_element(self, shape, position, value)",class_method,,,,"Class method: [pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((1, 1), (0, 0), None, id='minimal'),
        pytest.param((10, 10), (5, 5), 1.j, id='on diagonal'),
        pytest.param((10, 10), (1, 5), 1., id='upper'),
        pytest.param((10, 10), (5, 1), 2., id='lower'),
        pytest.param((10, 1), (5, 0), None, id='column'),
        pytest.param((1, 10), (0, 5), -5.j, id='row'),
        pytest.param((10, 2), (5, 1), 1+2j, id='tall'),
        pytest.param((2, 10), (1, 5), 10, id='wide'),
    ])] TestFactoryMethods.test_one_element(self, shape, position, value)",qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,test_one_element,"(self, shape, position, value)",,,,,,,,,"pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((1, 1), (0, 0), None, id='minimal'),
        pytest.param((10, 10), (5, 5), 1.j, id='on diagonal'),
        pytest.param((10, 10), (1, 5), 1., id='upper'),
        pytest.param((10, 10), (5, 1), 2., id='lower'),
        pytest.param((10, 1), (5, 0), None, id='column'),
        pytest.param((1, 10), (0, 5), -5.j, id='row'),
        pytest.param((10, 2), (5, 1), 1+2j, id='tall'),
        pytest.param((2, 10), (1, 5), 10, id='wide'),
    ])"
qutip_qutip_v5.0.4,test_dia.py,python,"[pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((0, 0), (0, 0), None, id='zero shape'),
        pytest.param((10, -2), (5, 0), 1.j, id='neg shape'),
        pytest.param((10, 10), (10, 5), 1., id='outside'),
        pytest.param((10, 10), (5, -1), 2., id='outside neg'),
    ])] TestFactoryMethods.test_one_element_error(self, shape, position, value)",class_method,,,,"Class method: [pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((0, 0), (0, 0), None, id='zero shape'),
        pytest.param((10, -2), (5, 0), 1.j, id='neg shape'),
        pytest.param((10, 10), (10, 5), 1., id='outside'),
        pytest.param((10, 10), (5, -1), 2., id='outside neg'),
    ])] TestFactoryMethods.test_one_element_error(self, shape, position, value)",qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,test_one_element_error,"(self, shape, position, value)",,,,,,,,,"pytest.mark.parametrize(['shape', 'position', 'value'], [
        pytest.param((0, 0), (0, 0), None, id='zero shape'),
        pytest.param((10, -2), (5, 0), 1.j, id='neg shape'),
        pytest.param((10, 10), (10, 5), 1., id='outside'),
        pytest.param((10, 10), (5, -1), 2., id='outside neg'),
    ])"
qutip_qutip_v5.0.4,test_dia.py,python,TestClassMethods,class,,,,Class: TestClassMethods,qutip,qutip,v5.0.4,,,,,,,TestClassMethods,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,TestFactoryMethods,class,,,,Class: TestFactoryMethods,qutip,qutip,v5.0.4,,,,,,,TestFactoryMethods,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,_valid_scipy(),function,,,,Function: _valid_scipy(),qutip,qutip,v5.0.4,,,,_valid_scipy,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,_valid_arg(),function,,,,Function: _valid_arg(),qutip,qutip,v5.0.4,,,,_valid_arg,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,test_tidyup(data_diag),function,,,,Function: test_tidyup(data_diag),qutip,qutip,v5.0.4,,,,test_tidyup,(data_diag),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,test_autotidyup(),function,,,,Function: test_autotidyup(),qutip,qutip,v5.0.4,,,,test_autotidyup,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,_dtype_complex = ['complex128'],constant,_dtype_complex = ['complex128'],_dtype_complex,['complex128'],Constant: _dtype_complex = ['complex128'],qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,_dtype_float = ['float64'],constant,_dtype_float = ['float64'],_dtype_float,['float64'],Constant: _dtype_float = ['float64'],qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,"_dtype_int = ['int32', 'int64']",constant,"_dtype_int = ['int32', 'int64']",_dtype_int,"['int32', 'int64']","Constant: _dtype_int = ['int32', 'int64']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,_dtype_uint = ['uint32'],constant,_dtype_uint = ['uint32'],_dtype_uint,['uint32'],Constant: _dtype_uint = ['uint32'],qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,scipy.sparse,import,,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse,,scipy.sparse,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,data from qutip.core,local_import,,,,Import: data from qutip.core,qutip,qutip,v5.0.4,"from qutip.core import data, qeye, CoreOptions",qutip.core,data,,,qutip.core,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,qeye from qutip.core,local_import,,,,Import: qeye from qutip.core,qutip,qutip,v5.0.4,"from qutip.core import data, qeye, CoreOptions",qutip.core,qeye,,,qutip.core,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,CoreOptions from qutip.core,local_import,,,,Import: CoreOptions from qutip.core,qutip,qutip,v5.0.4,"from qutip.core import data, qeye, CoreOptions",qutip.core,CoreOptions,,,qutip.core,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,dia from qutip.core.data,local_import,,,,Import: dia from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import dia, Dense, Dia",qutip.core.data,dia,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,Dense from qutip.core.data,local_import,,,,Import: Dense from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import dia, Dense, Dia",qutip.core.data,Dense,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dia.py,python,Dia from qutip.core.data,local_import,,,,Import: Dia from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import dia, Dense, Dia",qutip.core.data,Dia,,,qutip.core.data,,,,,,,,,,,,
,test_dia.py,python,,,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_dia.py,python,,,,,,Directory: qutip\tests\core\data\test_dia.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dispatch.py,python,"func.__name__ = ""dummy name""",class_field,,,,"Class field: func.__name__ = ""dummy name""",qutip,qutip,v5.0.4,,,,,,,func,,,"__name__ = ""dummy name""",,,,,__name__,,"""dummy name""",
qutip_qutip_v5.0.4,test_dispatch.py,python,"func.__name__ = """"",class_field,,,,"Class field: func.__name__ = """"",qutip,qutip,v5.0.4,,,,,,,func,,,"__name__ = """"",,,,,__name__,,"""""",
qutip_qutip_v5.0.4,test_dispatch.py,python,[instance] func.count = 0,class_field,,,,Class field: [instance] func.count = 0,qutip,qutip,v5.0.4,,,,,,,func,__init__,(self),self.count = 0,self.count = 0,,,,,,,
qutip_qutip_v5.0.4,test_dispatch.py,python,"pseudo_dipatched.__init__(self, types, output)",class_method,,,,"Class method: pseudo_dipatched.__init__(self, types, output)",qutip,qutip,v5.0.4,,,,,,,pseudo_dipatched,__init__,"(self, types, output)",,,,,,,,,
qutip_qutip_v5.0.4,test_dispatch.py,python,"pseudo_dipatched.__call__(self, *args, **kwargs)",class_method,,,,"Class method: pseudo_dipatched.__call__(self, *args, **kwargs)",qutip,qutip,v5.0.4,,,,,,,pseudo_dipatched,__call__,"(self, *args, **kwargs)",,,,,,,,,
qutip_qutip_v5.0.4,test_dispatch.py,python,"func.__call__(self, a, /)",class_method,,,,"Class method: func.__call__(self, a, /)",qutip,qutip,v5.0.4,,,,,,,func,__call__,"(self, a, /)",,,,,,,,,
qutip_qutip_v5.0.4,test_dispatch.py,python,func.__init__(self),class_method,,,,Class method: func.__init__(self),qutip,qutip,v5.0.4,,,,,,,func,__init__,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_dispatch.py,python,"func.__call__(self, a=None, b=None, /)",class_method,,,,"Class method: func.__call__(self, a=None, b=None, /)",qutip,qutip,v5.0.4,,,,,,,func,__call__,"(self, a=None, b=None, /)",,,,,,,,,
qutip_qutip_v5.0.4,test_dispatch.py,python,pseudo_dipatched,class,,,,Class: pseudo_dipatched,qutip,qutip,v5.0.4,,,,,,,pseudo_dipatched,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dispatch.py,python,func(),class,,,,Class: func(),qutip,qutip,v5.0.4,,,,,,,func,,,,,,,,,(),,
qutip_qutip_v5.0.4,test_dispatch.py,python,func(),class,,,,Class: func(),qutip,qutip,v5.0.4,,,,,,,func,,,,,,,,,(),,
qutip_qutip_v5.0.4,test_dispatch.py,python,_test_name(arg),function,,,,Function: _test_name(arg),qutip,qutip,v5.0.4,,,,_test_name,(arg),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dispatch.py,python,test_Data_low_priority_one_dispatch(),function,,,,Function: test_Data_low_priority_one_dispatch(),qutip,qutip,v5.0.4,,,,test_Data_low_priority_one_dispatch,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dispatch.py,python,test_Data_low_priority_two_dispatch(),function,,,,Function: test_Data_low_priority_two_dispatch(),qutip,qutip,v5.0.4,,,,test_Data_low_priority_two_dispatch,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dispatch.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dispatch.py,python,itertools,import,,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,,itertools,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dispatch.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dispatch.py,python,qutip.core.data,import,,,,Import: qutip.core.data,qutip,qutip,v5.0.4,import qutip.core.data as _data,,qutip.core.data,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dispatch.py,python,Dispatcher from qutip.core.data.dispatch,local_import,,,,Import: Dispatcher from qutip.core.data.dispatch,qutip,qutip,v5.0.4,"from qutip.core.data.dispatch import Dispatcher, _constructed_specialisation",qutip.core.data.dispatch,Dispatcher,,,qutip.core.data.dispatch,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_dispatch.py,python,_constructed_specialisation from qutip.core.data.dispatch,local_import,,,,Import: _constructed_specialisation from qutip.core.data.dispatch,qutip,qutip,v5.0.4,"from qutip.core.data.dispatch import Dispatcher, _constructed_specialisation",qutip.core.data.dispatch,_constructed_specialisation,,,qutip.core.data.dispatch,,,,,,,,,,,,
,test_dispatch.py,python,,,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_dispatch.py,python,,,,,,Directory: qutip\tests\core\data\test_dispatch.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,TestExpect._dim = 100,class_field,,,,Class field: TestExpect._dim = 100,qutip,qutip,v5.0.4,,,,,,,TestExpect,,,_dim = 100,,,,,_dim,,100,
qutip_qutip_v5.0.4,test_expect.py,python,"TestExpect._ket = pytest.param((_dim, 1), id=""ket"")",class_field,,,,"Class field: TestExpect._ket = pytest.param((_dim, 1), id=""ket"")",qutip,qutip,v5.0.4,,,,,,,TestExpect,,,"_ket = pytest.param((_dim, 1), id=""ket"")",,,,,_ket,,"pytest.param((_dim, 1), id=""ket"")",
qutip_qutip_v5.0.4,test_expect.py,python,"TestExpect._dm = pytest.param((_dim, _dim), id=""dm"")",class_field,,,,"Class field: TestExpect._dm = pytest.param((_dim, _dim), id=""dm"")",qutip,qutip,v5.0.4,,,,,,,TestExpect,,,"_dm = pytest.param((_dim, _dim), id=""dm"")",,,,,_dm,,"pytest.param((_dim, _dim), id=""dm"")",
qutip_qutip_v5.0.4,test_expect.py,python,"TestExpect._op = pytest.param((_dim, _dim), id=""op"")",class_field,,,,"Class field: TestExpect._op = pytest.param((_dim, _dim), id=""op"")",qutip,qutip,v5.0.4,,,,,,,TestExpect,,,"_op = pytest.param((_dim, _dim), id=""op"")",,,,,_op,,"pytest.param((_dim, _dim), id=""op"")",
qutip_qutip_v5.0.4,test_expect.py,python,"TestExpect._bra = pytest.param((1, _dim), id=""bra"")",class_field,,,,"Class field: TestExpect._bra = pytest.param((1, _dim), id=""bra"")",qutip,qutip,v5.0.4,,,,,,,TestExpect,,,"_bra = pytest.param((1, _dim), id=""bra"")",,,,,_bra,,"pytest.param((1, _dim), id=""bra"")",
qutip_qutip_v5.0.4,test_expect.py,python,"TestExpect._nonsquare = pytest.param((2, _dim), id=""nonsquare"")",class_field,,,,"Class field: TestExpect._nonsquare = pytest.param((2, _dim), id=""nonsquare"")",qutip,qutip,v5.0.4,,,,,,,TestExpect,,,"_nonsquare = pytest.param((2, _dim), id=""nonsquare"")",,,,,_nonsquare,,"pytest.param((2, _dim), id=""nonsquare"")",
qutip_qutip_v5.0.4,test_expect.py,python,"TestExpect._not_op = [_bra, _ket, _nonsquare]",class_field,,,,"Class field: TestExpect._not_op = [_bra, _ket, _nonsquare]",qutip,qutip,v5.0.4,,,,,,,TestExpect,,,"_not_op = [_bra, _ket, _nonsquare]",,,,,_not_op,,"[_bra, _ket, _nonsquare]",
qutip_qutip_v5.0.4,test_expect.py,python,"TestExpect.shapes = [
        (_op, _ket),
        (_op, _dm),
    ]",class_field,,,,"Class field: TestExpect.shapes = [
        (_op, _ket),
        (_op, _dm),
    ]",qutip,qutip,v5.0.4,,,,,,,TestExpect,,,"shapes = [
        (_op, _ket),
        (_op, _dm),
    ]",,,,,shapes,,"[
        (_op, _ket),
        (_op, _dm),
    ]",
qutip_qutip_v5.0.4,test_expect.py,python,"TestExpect.bad_shapes = list(product(_not_op, [_ket, _dm]))",class_field,,,,"Class field: TestExpect.bad_shapes = list(product(_not_op, [_ket, _dm]))",qutip,qutip,v5.0.4,,,,,,,TestExpect,,,"bad_shapes = list(product(_not_op, [_ket, _dm]))",,,,,bad_shapes,,"list(product(_not_op, [_ket, _dm]))",
qutip_qutip_v5.0.4,test_expect.py,python,"TestExpect.specialisations = [
        pytest.param(data.expect_csr, CSR, CSR, complex),
        pytest.param(data.expect_dense, Dense, Dense, complex),
        pytest.param(data.expect_csr_dense, CSR, Dense, complex),
        pytest.param(data.expect_dia, Dia, Dia, complex),
        pytest.param(data.expect_dia_dense, Dia, Dense, complex),
        pytest.param(data.expect_data, Dense, CSR, complex),
    ]",class_field,,,,"Class field: TestExpect.specialisations = [
        pytest.param(data.expect_csr, CSR, CSR, complex),
        pytest.param(data.expect_dense, Dense, Dense, complex),
        pytest.param(data.expect_csr_dense, CSR, Dense, complex),
        pytest.param(data.expect_dia, Dia, Dia, complex),
        pytest.param(data.expect_dia_dense, Dia, Dense, complex),
        pytest.param(data.expect_data, Dense, CSR, complex),
    ]",qutip,qutip,v5.0.4,,,,,,,TestExpect,,,"specialisations = [
        pytest.param(data.expect_csr, CSR, CSR, complex),
        pytest.param(data.expect_dense, Dense, Dense, complex),
        pytest.param(data.expect_csr_dense, CSR, Dense, complex),
        pytest.param(data.expect_dia, Dia, Dia, complex),
        pytest.param(data.expect_dia_dense, Dia, Dense, complex),
        pytest.param(data.expect_data, Dense, CSR, complex),
    ]",,,,,specialisations,,"[
        pytest.param(data.expect_csr, CSR, CSR, complex),
        pytest.param(data.expect_dense, Dense, Dense, complex),
        pytest.param(data.expect_csr_dense, CSR, Dense, complex),
        pytest.param(data.expect_dia, Dia, Dia, complex),
        pytest.param(data.expect_dia_dense, Dia, Dense, complex),
        pytest.param(data.expect_data, Dense, CSR, complex),
    ]",
qutip_qutip_v5.0.4,test_expect.py,python,TestExpectSuper._dim = 100,class_field,,,,Class field: TestExpectSuper._dim = 100,qutip,qutip,v5.0.4,,,,,,,TestExpectSuper,,,_dim = 100,,,,,_dim,,100,
qutip_qutip_v5.0.4,test_expect.py,python,"TestExpectSuper._super_ket = pytest.param((_dim, 1), id=""super_ket"")",class_field,,,,"Class field: TestExpectSuper._super_ket = pytest.param((_dim, 1), id=""super_ket"")",qutip,qutip,v5.0.4,,,,,,,TestExpectSuper,,,"_super_ket = pytest.param((_dim, 1), id=""super_ket"")",,,,,_super_ket,,"pytest.param((_dim, 1), id=""super_ket"")",
qutip_qutip_v5.0.4,test_expect.py,python,"TestExpectSuper._super_op = pytest.param((_dim, _dim), id=""super_op"")",class_field,,,,"Class field: TestExpectSuper._super_op = pytest.param((_dim, _dim), id=""super_op"")",qutip,qutip,v5.0.4,,,,,,,TestExpectSuper,,,"_super_op = pytest.param((_dim, _dim), id=""super_op"")",,,,,_super_op,,"pytest.param((_dim, _dim), id=""super_op"")",
qutip_qutip_v5.0.4,test_expect.py,python,"TestExpectSuper._bra = pytest.param((1, _dim), id=""row_stacked"")",class_field,,,,"Class field: TestExpectSuper._bra = pytest.param((1, _dim), id=""row_stacked"")",qutip,qutip,v5.0.4,,,,,,,TestExpectSuper,,,"_bra = pytest.param((1, _dim), id=""row_stacked"")",,,,,_bra,,"pytest.param((1, _dim), id=""row_stacked"")",
qutip_qutip_v5.0.4,test_expect.py,python,"TestExpectSuper._nonsquare = pytest.param((2, _dim), id=""nonsquare"")",class_field,,,,"Class field: TestExpectSuper._nonsquare = pytest.param((2, _dim), id=""nonsquare"")",qutip,qutip,v5.0.4,,,,,,,TestExpectSuper,,,"_nonsquare = pytest.param((2, _dim), id=""nonsquare"")",,,,,_nonsquare,,"pytest.param((2, _dim), id=""nonsquare"")",
qutip_qutip_v5.0.4,test_expect.py,python,"TestExpectSuper._not_super_ket = [_super_op, _bra, _nonsquare]",class_field,,,,"Class field: TestExpectSuper._not_super_ket = [_super_op, _bra, _nonsquare]",qutip,qutip,v5.0.4,,,,,,,TestExpectSuper,,,"_not_super_ket = [_super_op, _bra, _nonsquare]",,,,,_not_super_ket,,"[_super_op, _bra, _nonsquare]",
qutip_qutip_v5.0.4,test_expect.py,python,"TestExpectSuper._not_super_op = [_super_ket, _bra, _nonsquare]",class_field,,,,"Class field: TestExpectSuper._not_super_op = [_super_ket, _bra, _nonsquare]",qutip,qutip,v5.0.4,,,,,,,TestExpectSuper,,,"_not_super_op = [_super_ket, _bra, _nonsquare]",,,,,_not_super_op,,"[_super_ket, _bra, _nonsquare]",
qutip_qutip_v5.0.4,test_expect.py,python,"TestExpectSuper.shapes = [(_super_op, _super_ket), ]",class_field,,,,"Class field: TestExpectSuper.shapes = [(_super_op, _super_ket), ]",qutip,qutip,v5.0.4,,,,,,,TestExpectSuper,,,"shapes = [(_super_op, _super_ket), ]",,,,,shapes,,"[(_super_op, _super_ket), ]",
qutip_qutip_v5.0.4,test_expect.py,python,"TestExpectSuper.bad_shapes = list(product(_not_super_op, [_super_ket]))",class_field,,,,"Class field: TestExpectSuper.bad_shapes = list(product(_not_super_op, [_super_ket]))",qutip,qutip,v5.0.4,,,,,,,TestExpectSuper,,,"bad_shapes = list(product(_not_super_op, [_super_ket]))",,,,,bad_shapes,,"list(product(_not_super_op, [_super_ket]))",
qutip_qutip_v5.0.4,test_expect.py,python,"TestExpectSuper.specialisations = [
        pytest.param(data.expect_super_dense, Dense, Dense, complex),
        pytest.param(data.expect_super_csr, CSR, CSR, complex),
        pytest.param(data.expect_super_csr_dense, CSR, Dense, complex),
        pytest.param(data.expect_super_dia, Dia, Dia, complex),
        pytest.param(data.expect_super_dia_dense, Dia, Dense, complex),
        pytest.param(data.expect_super_data, CSR, Dense, complex),
    ]",class_field,,,,"Class field: TestExpectSuper.specialisations = [
        pytest.param(data.expect_super_dense, Dense, Dense, complex),
        pytest.param(data.expect_super_csr, CSR, CSR, complex),
        pytest.param(data.expect_super_csr_dense, CSR, Dense, complex),
        pytest.param(data.expect_super_dia, Dia, Dia, complex),
        pytest.param(data.expect_super_dia_dense, Dia, Dense, complex),
        pytest.param(data.expect_super_data, CSR, Dense, complex),
    ]",qutip,qutip,v5.0.4,,,,,,,TestExpectSuper,,,"specialisations = [
        pytest.param(data.expect_super_dense, Dense, Dense, complex),
        pytest.param(data.expect_super_csr, CSR, CSR, complex),
        pytest.param(data.expect_super_csr_dense, CSR, Dense, complex),
        pytest.param(data.expect_super_dia, Dia, Dia, complex),
        pytest.param(data.expect_super_dia_dense, Dia, Dense, complex),
        pytest.param(data.expect_super_data, CSR, Dense, complex),
    ]",,,,,specialisations,,"[
        pytest.param(data.expect_super_dense, Dense, Dense, complex),
        pytest.param(data.expect_super_csr, CSR, CSR, complex),
        pytest.param(data.expect_super_csr_dense, CSR, Dense, complex),
        pytest.param(data.expect_super_dia, Dia, Dia, complex),
        pytest.param(data.expect_super_dia_dense, Dia, Dense, complex),
        pytest.param(data.expect_super_data, CSR, Dense, complex),
    ]",
qutip_qutip_v5.0.4,test_expect.py,python,"TestExpect.op_numpy(self, op, state)",class_method,,,,"Class method: TestExpect.op_numpy(self, op, state)",qutip,qutip,v5.0.4,,,,,,,TestExpect,op_numpy,"(self, op, state)",,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,"TestExpectSuper.op_numpy(self, op, state)",class_method,,,,"Class method: TestExpectSuper.op_numpy(self, op, state)",qutip,qutip,v5.0.4,,,,,,,TestExpectSuper,op_numpy,"(self, op, state)",,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,TestExpect(BinaryOpMixin),class,,,,Class: TestExpect(BinaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestExpect,,,,,,,,,(BinaryOpMixin),,
qutip_qutip_v5.0.4,test_expect.py,python,TestExpectSuper(BinaryOpMixin),class,,,,Class: TestExpectSuper(BinaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestExpectSuper,,,,,,,,,(BinaryOpMixin),,
qutip_qutip_v5.0.4,test_expect.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,data from qutip,import,,,,Import: data from qutip,qutip,qutip,v5.0.4,from qutip import data,qutip,data,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,product from itertools,import,,,,Import: product from itertools,qutip,qutip,v5.0.4,from itertools import product,itertools,product,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,CSR from qutip.core.data,local_import,,,,Import: CSR from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",qutip.core.data,CSR,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,Dense from qutip.core.data,local_import,,,,Import: Dense from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",qutip.core.data,Dense,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_expect.py,python,Dia from qutip.core.data,local_import,,,,Import: Dia from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",qutip.core.data,Dia,,,qutip.core.data,,,,,,,,,,,,
,test_expect.py,python,,,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_expect.py,python,,,,,,Directory: qutip\tests\core\data\test_expect.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,"TestSolve.op_numpy(self, A, b)",class_method,,,,"Class method: TestSolve.op_numpy(self, A, b)",qutip,qutip,v5.0.4,,,,,,,TestSolve,op_numpy,"(self, A, b)",,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,"TestSolve._gen_op(self, N, dtype)",class_method,,,,"Class method: TestSolve._gen_op(self, N, dtype)",qutip,qutip,v5.0.4,,,,,,,TestSolve,_gen_op,"(self, N, dtype)",,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,"TestSolve._gen_ket(self, N, dtype)",class_method,,,,"Class method: TestSolve._gen_ket(self, N, dtype)",qutip,qutip,v5.0.4,,,,,,,TestSolve,_gen_ket,"(self, N, dtype)",,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,"[pytest.mark.parametrize(['method', ""opt""], [
        (""spsolve"", {}),
        (""splu"", {""csc"": True}),
        (""gmres"", {""atol"": 1e-8}),
        (""lsqr"", {}),
        (""solve"", {}),
        (""lstsq"", {}),
        pytest.param(""mkl_spsolve"", {}, marks=skip_no_mkl),
    ],
        ids=[
            ""spsolve"", ""splu"", ""gmres"", ""lsqr"", ""solve"", ""lstsq"", ""mkl_spsolve""
        ]
    )] TestSolve.test_mathematically_correct_sparse(self, method, opt, dtype)",class_method,,,,"Class method: [pytest.mark.parametrize(['method', ""opt""], [
        (""spsolve"", {}),
        (""splu"", {""csc"": True}),
        (""gmres"", {""atol"": 1e-8}),
        (""lsqr"", {}),
        (""solve"", {}),
        (""lstsq"", {}),
        pytest.param(""mkl_spsolve"", {}, marks=skip_no_mkl),
    ],
        ids=[
            ""spsolve"", ""splu"", ""gmres"", ""lsqr"", ""solve"", ""lstsq"", ""mkl_spsolve""
        ]
    )] TestSolve.test_mathematically_correct_sparse(self, method, opt, dtype)",qutip,qutip,v5.0.4,,,,,,,TestSolve,test_mathematically_correct_sparse,"(self, method, opt, dtype)",,,,,,,,,"pytest.mark.parametrize(['method', ""opt""], [
        (""spsolve"", {}),
        (""splu"", {""csc"": True}),
        (""gmres"", {""atol"": 1e-8}),
        (""lsqr"", {}),
        (""solve"", {}),
        (""lstsq"", {}),
        pytest.param(""mkl_spsolve"", {}, marks=skip_no_mkl),
    ],
        ids=[
            ""spsolve"", ""splu"", ""gmres"", ""lsqr"", ""solve"", ""lstsq"", ""mkl_spsolve""
        ]
    )"
qutip_qutip_v5.0.4,test_linalg.py,python,"[pytest.mark.parametrize('dtype', [CSR, Dia])] TestSolve.test_mathematically_correct_sparse(self, method, opt, dtype)",class_method,,,,"Class method: [pytest.mark.parametrize('dtype', [CSR, Dia])] TestSolve.test_mathematically_correct_sparse(self, method, opt, dtype)",qutip,qutip,v5.0.4,,,,,,,TestSolve,test_mathematically_correct_sparse,"(self, method, opt, dtype)",,,,,,,,,"pytest.mark.parametrize('dtype', [CSR, Dia])"
qutip_qutip_v5.0.4,test_linalg.py,python,"[pytest.mark.parametrize(['method', ""opt""], [
        (""solve"", {}),
        (""lstsq"", {}),
    ])] TestSolve.test_mathematically_correct_Dense(self, method, opt)",class_method,,,,"Class method: [pytest.mark.parametrize(['method', ""opt""], [
        (""solve"", {}),
        (""lstsq"", {}),
    ])] TestSolve.test_mathematically_correct_Dense(self, method, opt)",qutip,qutip,v5.0.4,,,,,,,TestSolve,test_mathematically_correct_Dense,"(self, method, opt)",,,,,,,,,"pytest.mark.parametrize(['method', ""opt""], [
        (""solve"", {}),
        (""lstsq"", {}),
    ])"
qutip_qutip_v5.0.4,test_linalg.py,python,TestSolve.test_singular(self),class_method,,,,Class method: TestSolve.test_singular(self),qutip,qutip,v5.0.4,,,,,,,TestSolve,test_singular,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,TestSolve.test_incorrect_shape_non_square(self),class_method,,,,Class method: TestSolve.test_incorrect_shape_non_square(self),qutip,qutip,v5.0.4,,,,,,,TestSolve,test_incorrect_shape_non_square,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,TestSolve.test_incorrect_shape_mismatch(self),class_method,,,,Class method: TestSolve.test_incorrect_shape_mismatch(self),qutip,qutip,v5.0.4,,,,,,,TestSolve,test_incorrect_shape_mismatch,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,"TestSVD.op_numpy(self, A)",class_method,,,,"Class method: TestSVD.op_numpy(self, A)",qutip,qutip,v5.0.4,,,,,,,TestSVD,op_numpy,"(self, A)",,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,"TestSVD._gen_dm(self, N, rank, dtype)",class_method,,,,"Class method: TestSVD._gen_dm(self, N, rank, dtype)",qutip,qutip,v5.0.4,,,,,,,TestSVD,_gen_dm,"(self, N, rank, dtype)",,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,"TestSVD._gen_non_square(self, N)",class_method,,,,"Class method: TestSVD._gen_non_square(self, N)",qutip,qutip,v5.0.4,,,,,,,TestSVD,_gen_non_square,"(self, N)",,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,"[pytest.mark.parametrize(""shape"", [""square"", ""non-square""])] TestSVD.test_mathematically_correct_svd(self, shape)",class_method,,,,"Class method: [pytest.mark.parametrize(""shape"", [""square"", ""non-square""])] TestSVD.test_mathematically_correct_svd(self, shape)",qutip,qutip,v5.0.4,,,,,,,TestSVD,test_mathematically_correct_svd,"(self, shape)",,,,,,,,,"pytest.mark.parametrize(""shape"", [""square"", ""non-square""])"
qutip_qutip_v5.0.4,test_linalg.py,python,TestSVD.test_mathematically_correct_svd_csr(self),class_method,,,,Class method: TestSVD.test_mathematically_correct_svd_csr(self),qutip,qutip,v5.0.4,,,,,,,TestSVD,test_mathematically_correct_svd_csr,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,TestSolve(),class,,,,Class: TestSolve(),qutip,qutip,v5.0.4,,,,,,,TestSolve,,,,,,,,,(),,
qutip_qutip_v5.0.4,test_linalg.py,python,TestSVD(),class,,,,Class: TestSVD(),qutip,qutip,v5.0.4,,,,,,,TestSVD,,,,,,,,,(),,
qutip_qutip_v5.0.4,test_linalg.py,python,"skip_no_mkl = pytest.mark.skipif(
    not settings.has_mkl, reason=""mkl not available""
)",constant,"skip_no_mkl = pytest.mark.skipif(
    not settings.has_mkl, reason=""mkl not available""
)",skip_no_mkl,"pytest.mark.skipif(
    not settings.has_mkl, reason=""mkl not available""
)","Constant: skip_no_mkl = pytest.mark.skipif(
    not settings.has_mkl, reason=""mkl not available""
)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,qutip.settings,import,,,,Import: qutip.settings,qutip,qutip,v5.0.4,import qutip.settings as settings,,qutip.settings,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,scipy,import,,,,Import: scipy,qutip,qutip,v5.0.4,import scipy,,scipy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,warnings,import,,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,,warnings,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,data from qutip.core,local_import,,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,qutip.core,data,,,qutip.core,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,Data from qutip.core.data,local_import,,,,Import: Data from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import Data, Dense, CSR, Dia",qutip.core.data,Data,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,Dense from qutip.core.data,local_import,,,,Import: Dense from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import Data, Dense, CSR, Dia",qutip.core.data,Dense,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,CSR from qutip.core.data,local_import,,,,Import: CSR from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import Data, Dense, CSR, Dia",qutip.core.data,CSR,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_linalg.py,python,Dia from qutip.core.data,local_import,,,,Import: Dia from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import Data, Dense, CSR, Dia",qutip.core.data,Dia,,,qutip.core.data,,,,,,,,,,,,
,test_linalg.py,python,,,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_linalg.py,python,,,,,,Directory: qutip\tests\core\data\test_linalg.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,_GenericOpMixin.atol = 1e-10,class_field,,,,Class field: _GenericOpMixin.atol = 1e-10,qutip,qutip,v5.0.4,,,,,,,_GenericOpMixin,,,atol = 1e-10,,,,,atol,,1e-10,
qutip_qutip_v5.0.4,test_mathematics.py,python,_GenericOpMixin.rtol = 1e-7,class_field,,,,Class field: _GenericOpMixin.rtol = 1e-7,qutip,qutip,v5.0.4,,,,,,,_GenericOpMixin,,,rtol = 1e-7,,,,,rtol,,1e-7,
qutip_qutip_v5.0.4,test_mathematics.py,python,_GenericOpMixin.shapes = [],class_field,,,,Class field: _GenericOpMixin.shapes = [],qutip,qutip,v5.0.4,,,,,,,_GenericOpMixin,,,shapes = [],,,,,shapes,,[],
qutip_qutip_v5.0.4,test_mathematics.py,python,_GenericOpMixin.bad_shapes = [],class_field,,,,Class field: _GenericOpMixin.bad_shapes = [],qutip,qutip,v5.0.4,,,,,,,_GenericOpMixin,,,bad_shapes = [],,,,,bad_shapes,,[],
qutip_qutip_v5.0.4,test_mathematics.py,python,_GenericOpMixin.specialisations = [],class_field,,,,Class field: _GenericOpMixin.specialisations = [],qutip,qutip,v5.0.4,,,,,,,_GenericOpMixin,,,specialisations = [],,,,,specialisations,,[],
qutip_qutip_v5.0.4,test_mathematics.py,python,"UnaryOpMixin.shapes = [(x,) for x in shapes_unary()]",class_field,,,,"Class field: UnaryOpMixin.shapes = [(x,) for x in shapes_unary()]",qutip,qutip,v5.0.4,,,,,,,UnaryOpMixin,,,"shapes = [(x,) for x in shapes_unary()]",,,,,shapes,,"[(x,) for x in shapes_unary()]",
qutip_qutip_v5.0.4,test_mathematics.py,python,UnaryOpMixin.bad_shapes = [],class_field,,,,Class field: UnaryOpMixin.bad_shapes = [],qutip,qutip,v5.0.4,,,,,,,UnaryOpMixin,,,bad_shapes = [],,,,,bad_shapes,,[],
qutip_qutip_v5.0.4,test_mathematics.py,python,"UnaryScalarOpMixin.shapes = [(x,) for x in shapes_unary()]",class_field,,,,"Class field: UnaryScalarOpMixin.shapes = [(x,) for x in shapes_unary()]",qutip,qutip,v5.0.4,,,,,,,UnaryScalarOpMixin,,,"shapes = [(x,) for x in shapes_unary()]",,,,,shapes,,"[(x,) for x in shapes_unary()]",
qutip_qutip_v5.0.4,test_mathematics.py,python,TestAdd.shapes = shapes_binary_identical(),class_field,,,,Class field: TestAdd.shapes = shapes_binary_identical(),qutip,qutip,v5.0.4,,,,,,,TestAdd,,,shapes = shapes_binary_identical(),,,,,shapes,,shapes_binary_identical(),
qutip_qutip_v5.0.4,test_mathematics.py,python,TestAdd.bad_shapes = shapes_binary_bad_identical(),class_field,,,,Class field: TestAdd.bad_shapes = shapes_binary_bad_identical(),qutip,qutip,v5.0.4,,,,,,,TestAdd,,,bad_shapes = shapes_binary_bad_identical(),,,,,bad_shapes,,shapes_binary_bad_identical(),
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestAdd.specialisations = [
        pytest.param(data.add_csr, CSR, CSR, CSR),
        pytest.param(data.add_dense, Dense, Dense, Dense),
        pytest.param(data.add_dia, Dia, Dia, Dia),
    ]",class_field,,,,"Class field: TestAdd.specialisations = [
        pytest.param(data.add_csr, CSR, CSR, CSR),
        pytest.param(data.add_dense, Dense, Dense, Dense),
        pytest.param(data.add_dia, Dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,TestAdd,,,"specialisations = [
        pytest.param(data.add_csr, CSR, CSR, CSR),
        pytest.param(data.add_dense, Dense, Dense, Dense),
        pytest.param(data.add_dia, Dia, Dia, Dia),
    ]",,,,,specialisations,,"[
        pytest.param(data.add_csr, CSR, CSR, CSR),
        pytest.param(data.add_dense, Dense, Dense, Dense),
        pytest.param(data.add_dia, Dia, Dia, Dia),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestAdjoint.specialisations = [
        pytest.param(data.adjoint_csr, CSR, CSR),
        pytest.param(data.adjoint_dense, Dense, Dense),
        pytest.param(data.adjoint_dia, Dia, Dia),
    ]",class_field,,,,"Class field: TestAdjoint.specialisations = [
        pytest.param(data.adjoint_csr, CSR, CSR),
        pytest.param(data.adjoint_dense, Dense, Dense),
        pytest.param(data.adjoint_dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,TestAdjoint,,,"specialisations = [
        pytest.param(data.adjoint_csr, CSR, CSR),
        pytest.param(data.adjoint_dense, Dense, Dense),
        pytest.param(data.adjoint_dia, Dia, Dia),
    ]",,,,,specialisations,,"[
        pytest.param(data.adjoint_csr, CSR, CSR),
        pytest.param(data.adjoint_dense, Dense, Dense),
        pytest.param(data.adjoint_dia, Dia, Dia),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestConj.specialisations = [
        pytest.param(data.conj_csr, CSR, CSR),
        pytest.param(data.conj_dense, Dense, Dense),
        pytest.param(data.conj_dia, Dia, Dia),
    ]",class_field,,,,"Class field: TestConj.specialisations = [
        pytest.param(data.conj_csr, CSR, CSR),
        pytest.param(data.conj_dense, Dense, Dense),
        pytest.param(data.conj_dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,TestConj,,,"specialisations = [
        pytest.param(data.conj_csr, CSR, CSR),
        pytest.param(data.conj_dense, Dense, Dense),
        pytest.param(data.conj_dia, Dia, Dia),
    ]",,,,,specialisations,,"[
        pytest.param(data.conj_csr, CSR, CSR),
        pytest.param(data.conj_dense, Dense, Dense),
        pytest.param(data.conj_dia, Dia, Dia),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,TestInner._dim = 100,class_field,,,,Class field: TestInner._dim = 100,qutip,qutip,v5.0.4,,,,,,,TestInner,,,_dim = 100,,,,,_dim,,100,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInner._scalar = pytest.param((1, 1), id=""scalar"")",class_field,,,,"Class field: TestInner._scalar = pytest.param((1, 1), id=""scalar"")",qutip,qutip,v5.0.4,,,,,,,TestInner,,,"_scalar = pytest.param((1, 1), id=""scalar"")",,,,,_scalar,,"pytest.param((1, 1), id=""scalar"")",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInner._bra = pytest.param((1, _dim), id=""bra"")",class_field,,,,"Class field: TestInner._bra = pytest.param((1, _dim), id=""bra"")",qutip,qutip,v5.0.4,,,,,,,TestInner,,,"_bra = pytest.param((1, _dim), id=""bra"")",,,,,_bra,,"pytest.param((1, _dim), id=""bra"")",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInner._ket = pytest.param((_dim, 1), id=""ket"")",class_field,,,,"Class field: TestInner._ket = pytest.param((_dim, 1), id=""ket"")",qutip,qutip,v5.0.4,,,,,,,TestInner,,,"_ket = pytest.param((_dim, 1), id=""ket"")",,,,,_ket,,"pytest.param((_dim, 1), id=""ket"")",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInner._op = pytest.param((_dim, _dim), id=""square"")",class_field,,,,"Class field: TestInner._op = pytest.param((_dim, _dim), id=""square"")",qutip,qutip,v5.0.4,,,,,,,TestInner,,,"_op = pytest.param((_dim, _dim), id=""square"")",,,,,_op,,"pytest.param((_dim, _dim), id=""square"")",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInner.shapes = [
        (_bra, _ket),
        (_ket, _ket),
    ]",class_field,,,,"Class field: TestInner.shapes = [
        (_bra, _ket),
        (_ket, _ket),
    ]",qutip,qutip,v5.0.4,,,,,,,TestInner,,,"shapes = [
        (_bra, _ket),
        (_ket, _ket),
    ]",,,,,shapes,,"[
        (_bra, _ket),
        (_ket, _ket),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInner.bad_shapes = [
        (_bra, _bra),
        (_ket, _bra),
        (_op, _ket),
        (_op, _bra),
        (_bra, _op),
        (_ket, _op),
    ]",class_field,,,,"Class field: TestInner.bad_shapes = [
        (_bra, _bra),
        (_ket, _bra),
        (_op, _ket),
        (_op, _bra),
        (_bra, _op),
        (_ket, _op),
    ]",qutip,qutip,v5.0.4,,,,,,,TestInner,,,"bad_shapes = [
        (_bra, _bra),
        (_ket, _bra),
        (_op, _ket),
        (_op, _bra),
        (_bra, _op),
        (_ket, _op),
    ]",,,,,bad_shapes,,"[
        (_bra, _bra),
        (_ket, _bra),
        (_op, _ket),
        (_op, _bra),
        (_bra, _op),
        (_ket, _op),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInner.specialisations = [
        pytest.param(data.inner_csr, CSR, CSR, complex),
        pytest.param(data.inner_dia, Dia, Dia, complex),
        pytest.param(data.inner_dense, Dense, Dense, complex),
        pytest.param(data.inner_data, Dense, Dense, complex),
        pytest.param(data.inner_data, CSR, CSR, complex),
    ]",class_field,,,,"Class field: TestInner.specialisations = [
        pytest.param(data.inner_csr, CSR, CSR, complex),
        pytest.param(data.inner_dia, Dia, Dia, complex),
        pytest.param(data.inner_dense, Dense, Dense, complex),
        pytest.param(data.inner_data, Dense, Dense, complex),
        pytest.param(data.inner_data, CSR, CSR, complex),
    ]",qutip,qutip,v5.0.4,,,,,,,TestInner,,,"specialisations = [
        pytest.param(data.inner_csr, CSR, CSR, complex),
        pytest.param(data.inner_dia, Dia, Dia, complex),
        pytest.param(data.inner_dense, Dense, Dense, complex),
        pytest.param(data.inner_data, Dense, Dense, complex),
        pytest.param(data.inner_data, CSR, CSR, complex),
    ]",,,,,specialisations,,"[
        pytest.param(data.inner_csr, CSR, CSR, complex),
        pytest.param(data.inner_dia, Dia, Dia, complex),
        pytest.param(data.inner_dense, Dense, Dense, complex),
        pytest.param(data.inner_data, Dense, Dense, complex),
        pytest.param(data.inner_data, CSR, CSR, complex),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,TestInnerOp._dim = 100,class_field,,,,Class field: TestInnerOp._dim = 100,qutip,qutip,v5.0.4,,,,,,,TestInnerOp,,,_dim = 100,,,,,_dim,,100,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInnerOp._scalar = pytest.param((1, 1), id=""scalar"")",class_field,,,,"Class field: TestInnerOp._scalar = pytest.param((1, 1), id=""scalar"")",qutip,qutip,v5.0.4,,,,,,,TestInnerOp,,,"_scalar = pytest.param((1, 1), id=""scalar"")",,,,,_scalar,,"pytest.param((1, 1), id=""scalar"")",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInnerOp._bra = pytest.param((1, _dim), id=""bra"")",class_field,,,,"Class field: TestInnerOp._bra = pytest.param((1, _dim), id=""bra"")",qutip,qutip,v5.0.4,,,,,,,TestInnerOp,,,"_bra = pytest.param((1, _dim), id=""bra"")",,,,,_bra,,"pytest.param((1, _dim), id=""bra"")",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInnerOp._ket = pytest.param((_dim, 1), id=""ket"")",class_field,,,,"Class field: TestInnerOp._ket = pytest.param((_dim, 1), id=""ket"")",qutip,qutip,v5.0.4,,,,,,,TestInnerOp,,,"_ket = pytest.param((_dim, 1), id=""ket"")",,,,,_ket,,"pytest.param((_dim, 1), id=""ket"")",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInnerOp._op = pytest.param((_dim, _dim), id=""square"")",class_field,,,,"Class field: TestInnerOp._op = pytest.param((_dim, _dim), id=""square"")",qutip,qutip,v5.0.4,,,,,,,TestInnerOp,,,"_op = pytest.param((_dim, _dim), id=""square"")",,,,,_op,,"pytest.param((_dim, _dim), id=""square"")",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInnerOp.shapes = [
        (_bra, _op, _ket),
        (_ket, _op, _ket),
    ]",class_field,,,,"Class field: TestInnerOp.shapes = [
        (_bra, _op, _ket),
        (_ket, _op, _ket),
    ]",qutip,qutip,v5.0.4,,,,,,,TestInnerOp,,,"shapes = [
        (_bra, _op, _ket),
        (_ket, _op, _ket),
    ]",,,,,shapes,,"[
        (_bra, _op, _ket),
        (_ket, _op, _ket),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInnerOp.bad_shapes = [
        (_bra, _op, _bra),
        (_ket, _op, _bra),
        (_op, _op, _ket),
        (_op, _op, _bra),
        (_bra, _op, _op),
        (_ket, _op, _op),
        (_bra, _bra, _ket),
        (_ket, _bra, _ket),
        (_bra, _ket, _ket),
        (_ket, _ket, _ket),
    ]",class_field,,,,"Class field: TestInnerOp.bad_shapes = [
        (_bra, _op, _bra),
        (_ket, _op, _bra),
        (_op, _op, _ket),
        (_op, _op, _bra),
        (_bra, _op, _op),
        (_ket, _op, _op),
        (_bra, _bra, _ket),
        (_ket, _bra, _ket),
        (_bra, _ket, _ket),
        (_ket, _ket, _ket),
    ]",qutip,qutip,v5.0.4,,,,,,,TestInnerOp,,,"bad_shapes = [
        (_bra, _op, _bra),
        (_ket, _op, _bra),
        (_op, _op, _ket),
        (_op, _op, _bra),
        (_bra, _op, _op),
        (_ket, _op, _op),
        (_bra, _bra, _ket),
        (_ket, _bra, _ket),
        (_bra, _ket, _ket),
        (_ket, _ket, _ket),
    ]",,,,,bad_shapes,,"[
        (_bra, _op, _bra),
        (_ket, _op, _bra),
        (_op, _op, _ket),
        (_op, _op, _bra),
        (_bra, _op, _op),
        (_ket, _op, _op),
        (_bra, _bra, _ket),
        (_ket, _bra, _ket),
        (_bra, _ket, _ket),
        (_ket, _ket, _ket),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInnerOp.specialisations = [
        pytest.param(data.inner_op_csr, CSR, CSR, CSR, complex),
        pytest.param(data.inner_op_dia, Dia, Dia, Dia, complex),
        pytest.param(data.inner_op_dense, Dense, Dense, Dense, complex),
        pytest.param(data.inner_op_data, Dense, CSR, Dense, complex),
    ]",class_field,,,,"Class field: TestInnerOp.specialisations = [
        pytest.param(data.inner_op_csr, CSR, CSR, CSR, complex),
        pytest.param(data.inner_op_dia, Dia, Dia, Dia, complex),
        pytest.param(data.inner_op_dense, Dense, Dense, Dense, complex),
        pytest.param(data.inner_op_data, Dense, CSR, Dense, complex),
    ]",qutip,qutip,v5.0.4,,,,,,,TestInnerOp,,,"specialisations = [
        pytest.param(data.inner_op_csr, CSR, CSR, CSR, complex),
        pytest.param(data.inner_op_dia, Dia, Dia, Dia, complex),
        pytest.param(data.inner_op_dense, Dense, Dense, Dense, complex),
        pytest.param(data.inner_op_data, Dense, CSR, Dense, complex),
    ]",,,,,specialisations,,"[
        pytest.param(data.inner_op_csr, CSR, CSR, CSR, complex),
        pytest.param(data.inner_op_dia, Dia, Dia, Dia, complex),
        pytest.param(data.inner_op_dense, Dense, Dense, Dense, complex),
        pytest.param(data.inner_op_data, Dense, CSR, Dense, complex),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,TestKron.shapes = shapes_binary_unrestricted(dim=5),class_field,,,,Class field: TestKron.shapes = shapes_binary_unrestricted(dim=5),qutip,qutip,v5.0.4,,,,,,,TestKron,,,shapes = shapes_binary_unrestricted(dim=5),,,,,shapes,,shapes_binary_unrestricted(dim=5),
qutip_qutip_v5.0.4,test_mathematics.py,python,TestKron.bad_shapes = shapes_binary_bad_unrestricted(dim=5),class_field,,,,Class field: TestKron.bad_shapes = shapes_binary_bad_unrestricted(dim=5),qutip,qutip,v5.0.4,,,,,,,TestKron,,,bad_shapes = shapes_binary_bad_unrestricted(dim=5),,,,,bad_shapes,,shapes_binary_bad_unrestricted(dim=5),
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestKron.specialisations = [
        pytest.param(data.kron_csr, CSR, CSR, CSR),
        pytest.param(data.kron_dense, Dense, Dense, Dense),
        pytest.param(data.kron_dia, Dia, Dia, Dia),
    ]",class_field,,,,"Class field: TestKron.specialisations = [
        pytest.param(data.kron_csr, CSR, CSR, CSR),
        pytest.param(data.kron_dense, Dense, Dense, Dense),
        pytest.param(data.kron_dia, Dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,TestKron,,,"specialisations = [
        pytest.param(data.kron_csr, CSR, CSR, CSR),
        pytest.param(data.kron_dense, Dense, Dense, Dense),
        pytest.param(data.kron_dia, Dia, Dia, Dia),
    ]",,,,,specialisations,,"[
        pytest.param(data.kron_csr, CSR, CSR, CSR),
        pytest.param(data.kron_dense, Dense, Dense, Dense),
        pytest.param(data.kron_dia, Dia, Dia, Dia),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,TestKronT.shapes = shapes_binary_unrestricted(dim=5),class_field,,,,Class field: TestKronT.shapes = shapes_binary_unrestricted(dim=5),qutip,qutip,v5.0.4,,,,,,,TestKronT,,,shapes = shapes_binary_unrestricted(dim=5),,,,,shapes,,shapes_binary_unrestricted(dim=5),
qutip_qutip_v5.0.4,test_mathematics.py,python,TestKronT.bad_shapes = shapes_binary_bad_unrestricted(dim=5),class_field,,,,Class field: TestKronT.bad_shapes = shapes_binary_bad_unrestricted(dim=5),qutip,qutip,v5.0.4,,,,,,,TestKronT,,,bad_shapes = shapes_binary_bad_unrestricted(dim=5),,,,,bad_shapes,,shapes_binary_bad_unrestricted(dim=5),
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestKronT.specialisations = [
        pytest.param(data.kron_transpose_data, CSR, CSR, CSR),
        pytest.param(data.kron_transpose_dense, Dense, Dense, Dense),
    ]",class_field,,,,"Class field: TestKronT.specialisations = [
        pytest.param(data.kron_transpose_data, CSR, CSR, CSR),
        pytest.param(data.kron_transpose_dense, Dense, Dense, Dense),
    ]",qutip,qutip,v5.0.4,,,,,,,TestKronT,,,"specialisations = [
        pytest.param(data.kron_transpose_data, CSR, CSR, CSR),
        pytest.param(data.kron_transpose_dense, Dense, Dense, Dense),
    ]",,,,,specialisations,,"[
        pytest.param(data.kron_transpose_data, CSR, CSR, CSR),
        pytest.param(data.kron_transpose_dense, Dense, Dense, Dense),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,TestMatmul.shapes = shapes_binary_matmul(),class_field,,,,Class field: TestMatmul.shapes = shapes_binary_matmul(),qutip,qutip,v5.0.4,,,,,,,TestMatmul,,,shapes = shapes_binary_matmul(),,,,,shapes,,shapes_binary_matmul(),
qutip_qutip_v5.0.4,test_mathematics.py,python,TestMatmul.bad_shapes = shapes_binary_bad_matmul(),class_field,,,,Class field: TestMatmul.bad_shapes = shapes_binary_bad_matmul(),qutip,qutip,v5.0.4,,,,,,,TestMatmul,,,bad_shapes = shapes_binary_bad_matmul(),,,,,bad_shapes,,shapes_binary_bad_matmul(),
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestMatmul.specialisations = [
        pytest.param(data.matmul_csr, CSR, CSR, CSR),
        pytest.param(data.matmul_csr_dense_dense, CSR, Dense, Dense),
        pytest.param(data.matmul_dense, Dense, Dense, Dense),
        pytest.param(data.matmul_dia, Dia, Dia, Dia),
        pytest.param(data.matmul_dia_dense_dense, Dia, Dense, Dense),
        pytest.param(data.matmul_dense_dia_dense, Dense, Dia, Dense),
    ]",class_field,,,,"Class field: TestMatmul.specialisations = [
        pytest.param(data.matmul_csr, CSR, CSR, CSR),
        pytest.param(data.matmul_csr_dense_dense, CSR, Dense, Dense),
        pytest.param(data.matmul_dense, Dense, Dense, Dense),
        pytest.param(data.matmul_dia, Dia, Dia, Dia),
        pytest.param(data.matmul_dia_dense_dense, Dia, Dense, Dense),
        pytest.param(data.matmul_dense_dia_dense, Dense, Dia, Dense),
    ]",qutip,qutip,v5.0.4,,,,,,,TestMatmul,,,"specialisations = [
        pytest.param(data.matmul_csr, CSR, CSR, CSR),
        pytest.param(data.matmul_csr_dense_dense, CSR, Dense, Dense),
        pytest.param(data.matmul_dense, Dense, Dense, Dense),
        pytest.param(data.matmul_dia, Dia, Dia, Dia),
        pytest.param(data.matmul_dia_dense_dense, Dia, Dense, Dense),
        pytest.param(data.matmul_dense_dia_dense, Dense, Dia, Dense),
    ]",,,,,specialisations,,"[
        pytest.param(data.matmul_csr, CSR, CSR, CSR),
        pytest.param(data.matmul_csr_dense_dense, CSR, Dense, Dense),
        pytest.param(data.matmul_dense, Dense, Dense, Dense),
        pytest.param(data.matmul_dia, Dia, Dia, Dia),
        pytest.param(data.matmul_dia_dense_dense, Dia, Dense, Dense),
        pytest.param(data.matmul_dense_dia_dense, Dense, Dia, Dense),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,TestMultiply.shapes = shapes_binary_identical(),class_field,,,,Class field: TestMultiply.shapes = shapes_binary_identical(),qutip,qutip,v5.0.4,,,,,,,TestMultiply,,,shapes = shapes_binary_identical(),,,,,shapes,,shapes_binary_identical(),
qutip_qutip_v5.0.4,test_mathematics.py,python,TestMultiply.bad_shapes = shapes_binary_bad_identical(),class_field,,,,Class field: TestMultiply.bad_shapes = shapes_binary_bad_identical(),qutip,qutip,v5.0.4,,,,,,,TestMultiply,,,bad_shapes = shapes_binary_bad_identical(),,,,,bad_shapes,,shapes_binary_bad_identical(),
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestMultiply.specialisations = [
        pytest.param(data.multiply_csr, CSR, CSR, CSR),
        pytest.param(data.multiply_dense, Dense, Dense, Dense),
        pytest.param(data.multiply_dia, Dia, Dia, Dia),
    ]",class_field,,,,"Class field: TestMultiply.specialisations = [
        pytest.param(data.multiply_csr, CSR, CSR, CSR),
        pytest.param(data.multiply_dense, Dense, Dense, Dense),
        pytest.param(data.multiply_dia, Dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,TestMultiply,,,"specialisations = [
        pytest.param(data.multiply_csr, CSR, CSR, CSR),
        pytest.param(data.multiply_dense, Dense, Dense, Dense),
        pytest.param(data.multiply_dia, Dia, Dia, Dia),
    ]",,,,,specialisations,,"[
        pytest.param(data.multiply_csr, CSR, CSR, CSR),
        pytest.param(data.multiply_dense, Dense, Dense, Dense),
        pytest.param(data.multiply_dia, Dia, Dia, Dia),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestMul.specialisations = [
        pytest.param(data.mul_csr, CSR, CSR),
        pytest.param(data.mul_dense, Dense, Dense),
        pytest.param(data.mul_dia, Dia, Dia),
    ]",class_field,,,,"Class field: TestMul.specialisations = [
        pytest.param(data.mul_csr, CSR, CSR),
        pytest.param(data.mul_dense, Dense, Dense),
        pytest.param(data.mul_dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,TestMul,,,"specialisations = [
        pytest.param(data.mul_csr, CSR, CSR),
        pytest.param(data.mul_dense, Dense, Dense),
        pytest.param(data.mul_dia, Dia, Dia),
    ]",,,,,specialisations,,"[
        pytest.param(data.mul_csr, CSR, CSR),
        pytest.param(data.mul_dense, Dense, Dense),
        pytest.param(data.mul_dia, Dia, Dia),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestNeg.specialisations = [
        pytest.param(data.neg_csr, CSR, CSR),
        pytest.param(data.neg_dense, Dense, Dense),
        pytest.param(data.neg_dia, Dia, Dia),
    ]",class_field,,,,"Class field: TestNeg.specialisations = [
        pytest.param(data.neg_csr, CSR, CSR),
        pytest.param(data.neg_dense, Dense, Dense),
        pytest.param(data.neg_dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,TestNeg,,,"specialisations = [
        pytest.param(data.neg_csr, CSR, CSR),
        pytest.param(data.neg_dense, Dense, Dense),
        pytest.param(data.neg_dia, Dia, Dia),
    ]",,,,,specialisations,,"[
        pytest.param(data.neg_csr, CSR, CSR),
        pytest.param(data.neg_dense, Dense, Dense),
        pytest.param(data.neg_dia, Dia, Dia),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,TestSub.shapes = shapes_binary_identical(),class_field,,,,Class field: TestSub.shapes = shapes_binary_identical(),qutip,qutip,v5.0.4,,,,,,,TestSub,,,shapes = shapes_binary_identical(),,,,,shapes,,shapes_binary_identical(),
qutip_qutip_v5.0.4,test_mathematics.py,python,TestSub.bad_shapes = shapes_binary_bad_identical(),class_field,,,,Class field: TestSub.bad_shapes = shapes_binary_bad_identical(),qutip,qutip,v5.0.4,,,,,,,TestSub,,,bad_shapes = shapes_binary_bad_identical(),,,,,bad_shapes,,shapes_binary_bad_identical(),
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestSub.specialisations = [
        pytest.param(data.sub_csr, CSR, CSR, CSR),
        pytest.param(data.sub_dense, Dense, Dense, Dense),
        pytest.param(data.sub_dia, Dia, Dia, Dia),
    ]",class_field,,,,"Class field: TestSub.specialisations = [
        pytest.param(data.sub_csr, CSR, CSR, CSR),
        pytest.param(data.sub_dense, Dense, Dense, Dense),
        pytest.param(data.sub_dia, Dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,TestSub,,,"specialisations = [
        pytest.param(data.sub_csr, CSR, CSR, CSR),
        pytest.param(data.sub_dense, Dense, Dense, Dense),
        pytest.param(data.sub_dia, Dia, Dia, Dia),
    ]",,,,,specialisations,,"[
        pytest.param(data.sub_csr, CSR, CSR, CSR),
        pytest.param(data.sub_dense, Dense, Dense, Dense),
        pytest.param(data.sub_dia, Dia, Dia, Dia),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,TestTrace.shapes = shapes_square(),class_field,,,,Class field: TestTrace.shapes = shapes_square(),qutip,qutip,v5.0.4,,,,,,,TestTrace,,,shapes = shapes_square(),,,,,shapes,,shapes_square(),
qutip_qutip_v5.0.4,test_mathematics.py,python,TestTrace.bad_shapes = shapes_not_square(),class_field,,,,Class field: TestTrace.bad_shapes = shapes_not_square(),qutip,qutip,v5.0.4,,,,,,,TestTrace,,,bad_shapes = shapes_not_square(),,,,,bad_shapes,,shapes_not_square(),
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestTrace.specialisations = [
        pytest.param(data.trace_csr, CSR, complex),
        pytest.param(data.trace_dense, Dense, complex),
        pytest.param(data.trace_dia, Dia, complex),
    ]",class_field,,,,"Class field: TestTrace.specialisations = [
        pytest.param(data.trace_csr, CSR, complex),
        pytest.param(data.trace_dense, Dense, complex),
        pytest.param(data.trace_dia, Dia, complex),
    ]",qutip,qutip,v5.0.4,,,,,,,TestTrace,,,"specialisations = [
        pytest.param(data.trace_csr, CSR, complex),
        pytest.param(data.trace_dense, Dense, complex),
        pytest.param(data.trace_dia, Dia, complex),
    ]",,,,,specialisations,,"[
        pytest.param(data.trace_csr, CSR, complex),
        pytest.param(data.trace_dense, Dense, complex),
        pytest.param(data.trace_dia, Dia, complex),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestTrace_oper_ket.shapes = [
        (pytest.param((100, 1), id=""oper-ket""),),
    ]",class_field,,,,"Class field: TestTrace_oper_ket.shapes = [
        (pytest.param((100, 1), id=""oper-ket""),),
    ]",qutip,qutip,v5.0.4,,,,,,,TestTrace_oper_ket,,,"shapes = [
        (pytest.param((100, 1), id=""oper-ket""),),
    ]",,,,,shapes,,"[
        (pytest.param((100, 1), id=""oper-ket""),),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestTrace_oper_ket.bad_shapes = [
        (pytest.param((1, 100), id=""bra""),),
        (pytest.param((99, 1), id=""ket""),),
        (pytest.param((99, 99), id=""ket""),),
        (pytest.param((2, 99), id=""nonsquare""),),
    ]",class_field,,,,"Class field: TestTrace_oper_ket.bad_shapes = [
        (pytest.param((1, 100), id=""bra""),),
        (pytest.param((99, 1), id=""ket""),),
        (pytest.param((99, 99), id=""ket""),),
        (pytest.param((2, 99), id=""nonsquare""),),
    ]",qutip,qutip,v5.0.4,,,,,,,TestTrace_oper_ket,,,"bad_shapes = [
        (pytest.param((1, 100), id=""bra""),),
        (pytest.param((99, 1), id=""ket""),),
        (pytest.param((99, 99), id=""ket""),),
        (pytest.param((2, 99), id=""nonsquare""),),
    ]",,,,,bad_shapes,,"[
        (pytest.param((1, 100), id=""bra""),),
        (pytest.param((99, 1), id=""ket""),),
        (pytest.param((99, 99), id=""ket""),),
        (pytest.param((2, 99), id=""nonsquare""),),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestTrace_oper_ket.specialisations = [
        pytest.param(data.trace_oper_ket_csr, CSR, complex),
        pytest.param(data.trace_oper_ket_dense, Dense, complex),
        pytest.param(data.trace_oper_ket_dia, Dia, complex),
        pytest.param(data.trace_oper_ket_data, CSR, complex),
        pytest.param(data.trace_oper_ket_data, Dense, complex),
    ]",class_field,,,,"Class field: TestTrace_oper_ket.specialisations = [
        pytest.param(data.trace_oper_ket_csr, CSR, complex),
        pytest.param(data.trace_oper_ket_dense, Dense, complex),
        pytest.param(data.trace_oper_ket_dia, Dia, complex),
        pytest.param(data.trace_oper_ket_data, CSR, complex),
        pytest.param(data.trace_oper_ket_data, Dense, complex),
    ]",qutip,qutip,v5.0.4,,,,,,,TestTrace_oper_ket,,,"specialisations = [
        pytest.param(data.trace_oper_ket_csr, CSR, complex),
        pytest.param(data.trace_oper_ket_dense, Dense, complex),
        pytest.param(data.trace_oper_ket_dia, Dia, complex),
        pytest.param(data.trace_oper_ket_data, CSR, complex),
        pytest.param(data.trace_oper_ket_data, Dense, complex),
    ]",,,,,specialisations,,"[
        pytest.param(data.trace_oper_ket_csr, CSR, complex),
        pytest.param(data.trace_oper_ket_dense, Dense, complex),
        pytest.param(data.trace_oper_ket_dia, Dia, complex),
        pytest.param(data.trace_oper_ket_data, CSR, complex),
        pytest.param(data.trace_oper_ket_data, Dense, complex),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,TestPow.shapes = shapes_square(),class_field,,,,Class field: TestPow.shapes = shapes_square(),qutip,qutip,v5.0.4,,,,,,,TestPow,,,shapes = shapes_square(),,,,,shapes,,shapes_square(),
qutip_qutip_v5.0.4,test_mathematics.py,python,TestPow.bad_shapes = shapes_not_square(),class_field,,,,Class field: TestPow.bad_shapes = shapes_not_square(),qutip,qutip,v5.0.4,,,,,,,TestPow,,,bad_shapes = shapes_not_square(),,,,,bad_shapes,,shapes_not_square(),
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestPow.specialisations = [
        pytest.param(data.pow_csr, CSR, CSR),
        pytest.param(data.pow_dense, Dense, Dense),
        pytest.param(data.pow_dia, Dia, Dia),
    ]",class_field,,,,"Class field: TestPow.specialisations = [
        pytest.param(data.pow_csr, CSR, CSR),
        pytest.param(data.pow_dense, Dense, Dense),
        pytest.param(data.pow_dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,TestPow,,,"specialisations = [
        pytest.param(data.pow_csr, CSR, CSR),
        pytest.param(data.pow_dense, Dense, Dense),
        pytest.param(data.pow_dia, Dia, Dia),
    ]",,,,,specialisations,,"[
        pytest.param(data.pow_csr, CSR, CSR),
        pytest.param(data.pow_dense, Dense, Dense),
        pytest.param(data.pow_dia, Dia, Dia),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,TestExpm.shapes = shapes_square(),class_field,,,,Class field: TestExpm.shapes = shapes_square(),qutip,qutip,v5.0.4,,,,,,,TestExpm,,,shapes = shapes_square(),,,,,shapes,,shapes_square(),
qutip_qutip_v5.0.4,test_mathematics.py,python,TestExpm.bad_shapes = shapes_not_square(),class_field,,,,Class field: TestExpm.bad_shapes = shapes_not_square(),qutip,qutip,v5.0.4,,,,,,,TestExpm,,,bad_shapes = shapes_not_square(),,,,,bad_shapes,,shapes_not_square(),
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestExpm.specialisations = [
        pytest.param(data.expm_csr, CSR, CSR),
        pytest.param(data.expm_csr_dense, CSR, Dense),
        pytest.param(data.expm_dense, Dense, Dense),
        pytest.param(data.expm_dia, Dia, Dia),
    ]",class_field,,,,"Class field: TestExpm.specialisations = [
        pytest.param(data.expm_csr, CSR, CSR),
        pytest.param(data.expm_csr_dense, CSR, Dense),
        pytest.param(data.expm_dense, Dense, Dense),
        pytest.param(data.expm_dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,TestExpm,,,"specialisations = [
        pytest.param(data.expm_csr, CSR, CSR),
        pytest.param(data.expm_csr_dense, CSR, Dense),
        pytest.param(data.expm_dense, Dense, Dense),
        pytest.param(data.expm_dia, Dia, Dia),
    ]",,,,,specialisations,,"[
        pytest.param(data.expm_csr, CSR, CSR),
        pytest.param(data.expm_csr_dense, CSR, Dense),
        pytest.param(data.expm_dense, Dense, Dense),
        pytest.param(data.expm_dia, Dia, Dia),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,TestLogm.shapes = shapes_square(),class_field,,,,Class field: TestLogm.shapes = shapes_square(),qutip,qutip,v5.0.4,,,,,,,TestLogm,,,shapes = shapes_square(),,,,,shapes,,shapes_square(),
qutip_qutip_v5.0.4,test_mathematics.py,python,TestLogm.bad_shapes = shapes_not_square(),class_field,,,,Class field: TestLogm.bad_shapes = shapes_not_square(),qutip,qutip,v5.0.4,,,,,,,TestLogm,,,bad_shapes = shapes_not_square(),,,,,bad_shapes,,shapes_not_square(),
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestLogm.specialisations = [
        pytest.param(data.logm_dense, Dense, Dense),
    ]",class_field,,,,"Class field: TestLogm.specialisations = [
        pytest.param(data.logm_dense, Dense, Dense),
    ]",qutip,qutip,v5.0.4,,,,,,,TestLogm,,,"specialisations = [
        pytest.param(data.logm_dense, Dense, Dense),
    ]",,,,,specialisations,,"[
        pytest.param(data.logm_dense, Dense, Dense),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestTranspose.specialisations = [
        pytest.param(data.transpose_csr, CSR, CSR),
        pytest.param(data.transpose_dense, Dense, Dense),
        pytest.param(data.transpose_dia, Dia, Dia),
    ]",class_field,,,,"Class field: TestTranspose.specialisations = [
        pytest.param(data.transpose_csr, CSR, CSR),
        pytest.param(data.transpose_dense, Dense, Dense),
        pytest.param(data.transpose_dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,TestTranspose,,,"specialisations = [
        pytest.param(data.transpose_csr, CSR, CSR),
        pytest.param(data.transpose_dense, Dense, Dense),
        pytest.param(data.transpose_dia, Dia, Dia),
    ]",,,,,specialisations,,"[
        pytest.param(data.transpose_csr, CSR, CSR),
        pytest.param(data.transpose_dense, Dense, Dense),
        pytest.param(data.transpose_dia, Dia, Dia),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestProject.shapes = [
        (pytest.param((1, 1), id=""scalar""),),
        (pytest.param((1, 100), id=""bra""),),
        (pytest.param((100, 1), id=""ket""),),
    ]",class_field,,,,"Class field: TestProject.shapes = [
        (pytest.param((1, 1), id=""scalar""),),
        (pytest.param((1, 100), id=""bra""),),
        (pytest.param((100, 1), id=""ket""),),
    ]",qutip,qutip,v5.0.4,,,,,,,TestProject,,,"shapes = [
        (pytest.param((1, 1), id=""scalar""),),
        (pytest.param((1, 100), id=""bra""),),
        (pytest.param((100, 1), id=""ket""),),
    ]",,,,,shapes,,"[
        (pytest.param((1, 1), id=""scalar""),),
        (pytest.param((1, 100), id=""bra""),),
        (pytest.param((100, 1), id=""ket""),),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestProject.bad_shapes = [
        (pytest.param((10, 10), id=""square""),),
        (pytest.param((2, 10), id=""nonsquare""),),
    ]",class_field,,,,"Class field: TestProject.bad_shapes = [
        (pytest.param((10, 10), id=""square""),),
        (pytest.param((2, 10), id=""nonsquare""),),
    ]",qutip,qutip,v5.0.4,,,,,,,TestProject,,,"bad_shapes = [
        (pytest.param((10, 10), id=""square""),),
        (pytest.param((2, 10), id=""nonsquare""),),
    ]",,,,,bad_shapes,,"[
        (pytest.param((10, 10), id=""square""),),
        (pytest.param((2, 10), id=""nonsquare""),),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestProject.specialisations = [
        pytest.param(data.project_csr, CSR, CSR),
        pytest.param(data.project_dia, Dia, Dia),
        pytest.param(data.project_dense, Dense, Dense),
    ]",class_field,,,,"Class field: TestProject.specialisations = [
        pytest.param(data.project_csr, CSR, CSR),
        pytest.param(data.project_dia, Dia, Dia),
        pytest.param(data.project_dense, Dense, Dense),
    ]",qutip,qutip,v5.0.4,,,,,,,TestProject,,,"specialisations = [
        pytest.param(data.project_csr, CSR, CSR),
        pytest.param(data.project_dia, Dia, Dia),
        pytest.param(data.project_dense, Dense, Dense),
    ]",,,,,specialisations,,"[
        pytest.param(data.project_csr, CSR, CSR),
        pytest.param(data.project_dia, Dia, Dia),
        pytest.param(data.project_dense, Dense, Dense),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInv.shapes = [
        (pytest.param((1, 1), id=""scalar""),),
        (pytest.param((10, 10), id=""square""),),
    ]",class_field,,,,"Class field: TestInv.shapes = [
        (pytest.param((1, 1), id=""scalar""),),
        (pytest.param((10, 10), id=""square""),),
    ]",qutip,qutip,v5.0.4,,,,,,,TestInv,,,"shapes = [
        (pytest.param((1, 1), id=""scalar""),),
        (pytest.param((10, 10), id=""square""),),
    ]",,,,,shapes,,"[
        (pytest.param((1, 1), id=""scalar""),),
        (pytest.param((10, 10), id=""square""),),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInv.bad_shapes = [
        (pytest.param((2, 10), id=""nonsquare""),),
        (pytest.param((1, 100), id=""bra""),),
        (pytest.param((100, 1), id=""ket""),),
    ]",class_field,,,,"Class field: TestInv.bad_shapes = [
        (pytest.param((2, 10), id=""nonsquare""),),
        (pytest.param((1, 100), id=""bra""),),
        (pytest.param((100, 1), id=""ket""),),
    ]",qutip,qutip,v5.0.4,,,,,,,TestInv,,,"bad_shapes = [
        (pytest.param((2, 10), id=""nonsquare""),),
        (pytest.param((1, 100), id=""bra""),),
        (pytest.param((100, 1), id=""ket""),),
    ]",,,,,bad_shapes,,"[
        (pytest.param((2, 10), id=""nonsquare""),),
        (pytest.param((1, 100), id=""bra""),),
        (pytest.param((100, 1), id=""ket""),),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInv.specialisations = [
        pytest.param(_inv_csr, CSR, CSR),
        pytest.param(_inv_dense, Dense, Dense),
    ]",class_field,,,,"Class field: TestInv.specialisations = [
        pytest.param(_inv_csr, CSR, CSR),
        pytest.param(_inv_dense, Dense, Dense),
    ]",qutip,qutip,v5.0.4,,,,,,,TestInv,,,"specialisations = [
        pytest.param(_inv_csr, CSR, CSR),
        pytest.param(_inv_dense, Dense, Dense),
    ]",,,,,specialisations,,"[
        pytest.param(_inv_csr, CSR, CSR),
        pytest.param(_inv_dense, Dense, Dense),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestZeros_like.specialisations = [
        pytest.param(data.zeros_like_data, CSR, CSR),
        pytest.param(data.zeros_like_dense, Dense, Dense),
    ]",class_field,,,,"Class field: TestZeros_like.specialisations = [
        pytest.param(data.zeros_like_data, CSR, CSR),
        pytest.param(data.zeros_like_dense, Dense, Dense),
    ]",qutip,qutip,v5.0.4,,,,,,,TestZeros_like,,,"specialisations = [
        pytest.param(data.zeros_like_data, CSR, CSR),
        pytest.param(data.zeros_like_dense, Dense, Dense),
    ]",,,,,specialisations,,"[
        pytest.param(data.zeros_like_data, CSR, CSR),
        pytest.param(data.zeros_like_dense, Dense, Dense),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,TestIdentity_like.shapes = shapes_square(),class_field,,,,Class field: TestIdentity_like.shapes = shapes_square(),qutip,qutip,v5.0.4,,,,,,,TestIdentity_like,,,shapes = shapes_square(),,,,,shapes,,shapes_square(),
qutip_qutip_v5.0.4,test_mathematics.py,python,TestIdentity_like.bad_shapes = shapes_not_square(),class_field,,,,Class field: TestIdentity_like.bad_shapes = shapes_not_square(),qutip,qutip,v5.0.4,,,,,,,TestIdentity_like,,,bad_shapes = shapes_not_square(),,,,,bad_shapes,,shapes_not_square(),
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestIdentity_like.specialisations = [
        pytest.param(data.identity_like_data, CSR, CSR),
        pytest.param(data.identity_like_dense, Dense, Dense),
    ]",class_field,,,,"Class field: TestIdentity_like.specialisations = [
        pytest.param(data.identity_like_data, CSR, CSR),
        pytest.param(data.identity_like_dense, Dense, Dense),
    ]",qutip,qutip,v5.0.4,,,,,,,TestIdentity_like,,,"specialisations = [
        pytest.param(data.identity_like_data, CSR, CSR),
        pytest.param(data.identity_like_dense, Dense, Dense),
    ]",,,,,specialisations,,"[
        pytest.param(data.identity_like_data, CSR, CSR),
        pytest.param(data.identity_like_dense, Dense, Dense),
    ]",
qutip_qutip_v5.0.4,test_mathematics.py,python,"_GenericOpMixin.op_numpy(self, *args)",class_method,,,,"Class method: _GenericOpMixin.op_numpy(self, *args)",qutip,qutip,v5.0.4,,,,,,,_GenericOpMixin,op_numpy,"(self, *args)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"_GenericOpMixin.generate_mathematically_correct(self, metafunc)",class_method,,,,"Class method: _GenericOpMixin.generate_mathematically_correct(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,_GenericOpMixin,generate_mathematically_correct,"(self, metafunc)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"_GenericOpMixin.generate_incorrect_shape_raises(self, metafunc)",class_method,,,,"Class method: _GenericOpMixin.generate_incorrect_shape_raises(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,_GenericOpMixin,generate_incorrect_shape_raises,"(self, metafunc)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"_GenericOpMixin.pytest_generate_tests(self, metafunc)",class_method,,,,"Class method: _GenericOpMixin.pytest_generate_tests(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,_GenericOpMixin,pytest_generate_tests,"(self, metafunc)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"UnaryOpMixin.test_mathematically_correct(self, op, data_m, out_type)",class_method,,,,"Class method: UnaryOpMixin.test_mathematically_correct(self, op, data_m, out_type)",qutip,qutip,v5.0.4,,,,,,,UnaryOpMixin,test_mathematically_correct,"(self, op, data_m, out_type)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"UnaryOpMixin.test_incorrect_shape_raises(self, op, data_m)",class_method,,,,"Class method: UnaryOpMixin.test_incorrect_shape_raises(self, op, data_m)",qutip,qutip,v5.0.4,,,,,,,UnaryOpMixin,test_incorrect_shape_raises,"(self, op, data_m)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"[pytest.mark.parametrize('scalar', [
        pytest.param(0, id='zero'),
        pytest.param(4.5, id='real'),
        pytest.param(3j, id='complex'),
    ])] UnaryScalarOpMixin.test_mathematically_correct(self, op, data_m, scalar, out_type)",class_method,,,,"Class method: [pytest.mark.parametrize('scalar', [
        pytest.param(0, id='zero'),
        pytest.param(4.5, id='real'),
        pytest.param(3j, id='complex'),
    ])] UnaryScalarOpMixin.test_mathematically_correct(self, op, data_m, scalar, out_type)",qutip,qutip,v5.0.4,,,,,,,UnaryScalarOpMixin,test_mathematically_correct,"(self, op, data_m, scalar, out_type)",,,,,,,,,"pytest.mark.parametrize('scalar', [
        pytest.param(0, id='zero'),
        pytest.param(4.5, id='real'),
        pytest.param(3j, id='complex'),
    ])"
qutip_qutip_v5.0.4,test_mathematics.py,python,"BinaryOpMixin.test_mathematically_correct(self, op, data_l, data_r, out_type)",class_method,,,,"Class method: BinaryOpMixin.test_mathematically_correct(self, op, data_l, data_r, out_type)",qutip,qutip,v5.0.4,,,,,,,BinaryOpMixin,test_mathematically_correct,"(self, op, data_l, data_r, out_type)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"BinaryOpMixin.test_incorrect_shape_raises(self, op, data_l, data_r)",class_method,,,,"Class method: BinaryOpMixin.test_incorrect_shape_raises(self, op, data_l, data_r)",qutip,qutip,v5.0.4,,,,,,,BinaryOpMixin,test_incorrect_shape_raises,"(self, op, data_l, data_r)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TernaryOpMixin.test_mathematically_correct(self, op,
                                    data_l, data_m, data_r,
                                    out_type)",class_method,,,,"Class method: TernaryOpMixin.test_mathematically_correct(self, op,
                                    data_l, data_m, data_r,
                                    out_type)",qutip,qutip,v5.0.4,,,,,,,TernaryOpMixin,test_mathematically_correct,"(self, op,
                                    data_l, data_m, data_r,
                                    out_type)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TernaryOpMixin.test_incorrect_shape_raises(self, op, data_l, data_m, data_r)",class_method,,,,"Class method: TernaryOpMixin.test_incorrect_shape_raises(self, op, data_l, data_m, data_r)",qutip,qutip,v5.0.4,,,,,,,TernaryOpMixin,test_incorrect_shape_raises,"(self, op, data_l, data_m, data_r)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestAdd.op_numpy(self, left, right, scale)",class_method,,,,"Class method: TestAdd.op_numpy(self, left, right, scale)",qutip,qutip,v5.0.4,,,,,,,TestAdd,op_numpy,"(self, left, right, scale)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"[pytest.mark.parametrize('scale', [None, 0.2, 0.5j],
                             ids=['unscaled', 'scale[real]', 'scale[complex]'])] TestAdd.test_mathematically_correct(self, op, data_l, data_r, out_type, scale)",class_method,,,,"Class method: [pytest.mark.parametrize('scale', [None, 0.2, 0.5j],
                             ids=['unscaled', 'scale[real]', 'scale[complex]'])] TestAdd.test_mathematically_correct(self, op, data_l, data_r, out_type, scale)",qutip,qutip,v5.0.4,,,,,,,TestAdd,test_mathematically_correct,"(self, op, data_l, data_r, out_type, scale)",,,,,,,,,"pytest.mark.parametrize('scale', [None, 0.2, 0.5j],
                             ids=['unscaled', 'scale[real]', 'scale[complex]'])"
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestAdjoint.op_numpy(self, matrix)",class_method,,,,"Class method: TestAdjoint.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,TestAdjoint,op_numpy,"(self, matrix)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestConj.op_numpy(self, matrix)",class_method,,,,"Class method: TestConj.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,TestConj,op_numpy,"(self, matrix)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInner.op_numpy(self, left, right, scalar_is_ket=False)",class_method,,,,"Class method: TestInner.op_numpy(self, left, right, scalar_is_ket=False)",qutip,qutip,v5.0.4,,,,,,,TestInner,op_numpy,"(self, left, right, scalar_is_ket=False)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInner.generate_scalar_is_ket(self, metafunc)",class_method,,,,"Class method: TestInner.generate_scalar_is_ket(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,TestInner,generate_scalar_is_ket,"(self, metafunc)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInner.test_scalar_is_ket(self, op, data_l, data_r, out_type, scalar_is_ket)",class_method,,,,"Class method: TestInner.test_scalar_is_ket(self, op, data_l, data_r, out_type, scalar_is_ket)",qutip,qutip,v5.0.4,,,,,,,TestInner,test_scalar_is_ket,"(self, op, data_l, data_r, out_type, scalar_is_ket)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInnerOp.op_numpy(self, left, mid, right, scalar_is_ket=False)",class_method,,,,"Class method: TestInnerOp.op_numpy(self, left, mid, right, scalar_is_ket=False)",qutip,qutip,v5.0.4,,,,,,,TestInnerOp,op_numpy,"(self, left, mid, right, scalar_is_ket=False)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInnerOp.generate_scalar_is_ket(self, metafunc)",class_method,,,,"Class method: TestInnerOp.generate_scalar_is_ket(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,TestInnerOp,generate_scalar_is_ket,"(self, metafunc)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInnerOp.test_scalar_is_ket(self, op, data_l, data_m, data_r, out_type,
                           scalar_is_ket)",class_method,,,,"Class method: TestInnerOp.test_scalar_is_ket(self, op, data_l, data_m, data_r, out_type,
                           scalar_is_ket)",qutip,qutip,v5.0.4,,,,,,,TestInnerOp,test_scalar_is_ket,"(self, op, data_l, data_m, data_r, out_type,
                           scalar_is_ket)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestKron.op_numpy(self, left, right)",class_method,,,,"Class method: TestKron.op_numpy(self, left, right)",qutip,qutip,v5.0.4,,,,,,,TestKron,op_numpy,"(self, left, right)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestKronT.op_numpy(self, left, right)",class_method,,,,"Class method: TestKronT.op_numpy(self, left, right)",qutip,qutip,v5.0.4,,,,,,,TestKronT,op_numpy,"(self, left, right)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestMatmul.op_numpy(self, left, right)",class_method,,,,"Class method: TestMatmul.op_numpy(self, left, right)",qutip,qutip,v5.0.4,,,,,,,TestMatmul,op_numpy,"(self, left, right)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestMultiply.op_numpy(self, left, right)",class_method,,,,"Class method: TestMultiply.op_numpy(self, left, right)",qutip,qutip,v5.0.4,,,,,,,TestMultiply,op_numpy,"(self, left, right)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestMul.op_numpy(self, matrix, scalar)",class_method,,,,"Class method: TestMul.op_numpy(self, matrix, scalar)",qutip,qutip,v5.0.4,,,,,,,TestMul,op_numpy,"(self, matrix, scalar)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestNeg.op_numpy(self, matrix)",class_method,,,,"Class method: TestNeg.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,TestNeg,op_numpy,"(self, matrix)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestSub.op_numpy(self, left, right)",class_method,,,,"Class method: TestSub.op_numpy(self, left, right)",qutip,qutip,v5.0.4,,,,,,,TestSub,op_numpy,"(self, left, right)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestTrace.op_numpy(self, matrix)",class_method,,,,"Class method: TestTrace.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,TestTrace,op_numpy,"(self, matrix)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestTrace_oper_ket.op_numpy(self, matrix)",class_method,,,,"Class method: TestTrace_oper_ket.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,TestTrace_oper_ket,op_numpy,"(self, matrix)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestPow.op_numpy(self, matrix, n)",class_method,,,,"Class method: TestPow.op_numpy(self, matrix, n)",qutip,qutip,v5.0.4,,,,,,,TestPow,op_numpy,"(self, matrix, n)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"[pytest.mark.parametrize(""n"", [0, 1, 10], ids=[""n_0"", ""n_1"", ""n_10""])] TestPow.test_mathematically_correct(self, op, data_m, out_type, n)",class_method,,,,"Class method: [pytest.mark.parametrize(""n"", [0, 1, 10], ids=[""n_0"", ""n_1"", ""n_10""])] TestPow.test_mathematically_correct(self, op, data_m, out_type, n)",qutip,qutip,v5.0.4,,,,,,,TestPow,test_mathematically_correct,"(self, op, data_m, out_type, n)",,,,,,,,,"pytest.mark.parametrize(""n"", [0, 1, 10], ids=[""n_0"", ""n_1"", ""n_10""])"
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestPow.test_incorrect_shape_raises(self, op, data_m)",class_method,,,,"Class method: TestPow.test_incorrect_shape_raises(self, op, data_m)",qutip,qutip,v5.0.4,,,,,,,TestPow,test_incorrect_shape_raises,"(self, op, data_m)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestExpm.op_numpy(self, matrix)",class_method,,,,"Class method: TestExpm.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,TestExpm,op_numpy,"(self, matrix)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestLogm.op_numpy(self, matrix)",class_method,,,,"Class method: TestLogm.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,TestLogm,op_numpy,"(self, matrix)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestTranspose.op_numpy(self, matrix)",class_method,,,,"Class method: TestTranspose.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,TestTranspose,op_numpy,"(self, matrix)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestProject.op_numpy(self, matrix)",class_method,,,,"Class method: TestProject.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,TestProject,op_numpy,"(self, matrix)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestInv.op_numpy(self, matrix)",class_method,,,,"Class method: TestInv.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,TestInv,op_numpy,"(self, matrix)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestZeros_like.op_numpy(self, matrix)",class_method,,,,"Class method: TestZeros_like.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,TestZeros_like,op_numpy,"(self, matrix)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"TestIdentity_like.op_numpy(self, matrix)",class_method,,,,"Class method: TestIdentity_like.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,TestIdentity_like,op_numpy,"(self, matrix)",,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,_GenericOpMixin,class,,,,Class: _GenericOpMixin,qutip,qutip,v5.0.4,,,,,,,_GenericOpMixin,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,UnaryOpMixin(_GenericOpMixin),class,,,,Class: UnaryOpMixin(_GenericOpMixin),qutip,qutip,v5.0.4,,,,,,,UnaryOpMixin,,,,,,,,,(_GenericOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,UnaryScalarOpMixin(_GenericOpMixin),class,,,,Class: UnaryScalarOpMixin(_GenericOpMixin),qutip,qutip,v5.0.4,,,,,,,UnaryScalarOpMixin,,,,,,,,,(_GenericOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,BinaryOpMixin(_GenericOpMixin),class,,,,Class: BinaryOpMixin(_GenericOpMixin),qutip,qutip,v5.0.4,,,,,,,BinaryOpMixin,,,,,,,,,(_GenericOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TernaryOpMixin(_GenericOpMixin),class,,,,Class: TernaryOpMixin(_GenericOpMixin),qutip,qutip,v5.0.4,,,,,,,TernaryOpMixin,,,,,,,,,(_GenericOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestAdd(BinaryOpMixin),class,,,,Class: TestAdd(BinaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestAdd,,,,,,,,,(BinaryOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestAdjoint(UnaryOpMixin),class,,,,Class: TestAdjoint(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestAdjoint,,,,,,,,,(UnaryOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestConj(UnaryOpMixin),class,,,,Class: TestConj(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestConj,,,,,,,,,(UnaryOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestInner(BinaryOpMixin),class,,,,Class: TestInner(BinaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestInner,,,,,,,,,(BinaryOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestInnerOp(TernaryOpMixin),class,,,,Class: TestInnerOp(TernaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestInnerOp,,,,,,,,,(TernaryOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestKron(BinaryOpMixin),class,,,,Class: TestKron(BinaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestKron,,,,,,,,,(BinaryOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestKronT(BinaryOpMixin),class,,,,Class: TestKronT(BinaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestKronT,,,,,,,,,(BinaryOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestMatmul(BinaryOpMixin),class,,,,Class: TestMatmul(BinaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestMatmul,,,,,,,,,(BinaryOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestMultiply(BinaryOpMixin),class,,,,Class: TestMultiply(BinaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestMultiply,,,,,,,,,(BinaryOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestMul(UnaryScalarOpMixin),class,,,,Class: TestMul(UnaryScalarOpMixin),qutip,qutip,v5.0.4,,,,,,,TestMul,,,,,,,,,(UnaryScalarOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestNeg(UnaryOpMixin),class,,,,Class: TestNeg(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestNeg,,,,,,,,,(UnaryOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestSub(BinaryOpMixin),class,,,,Class: TestSub(BinaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestSub,,,,,,,,,(BinaryOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestTrace(UnaryOpMixin),class,,,,Class: TestTrace(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestTrace,,,,,,,,,(UnaryOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestTrace_oper_ket(UnaryOpMixin),class,,,,Class: TestTrace_oper_ket(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestTrace_oper_ket,,,,,,,,,(UnaryOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestPow(UnaryOpMixin),class,,,,Class: TestPow(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestPow,,,,,,,,,(UnaryOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestExpm(UnaryOpMixin),class,,,,Class: TestExpm(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestExpm,,,,,,,,,(UnaryOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestLogm(UnaryOpMixin),class,,,,Class: TestLogm(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestLogm,,,,,,,,,(UnaryOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestTranspose(UnaryOpMixin),class,,,,Class: TestTranspose(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestTranspose,,,,,,,,,(UnaryOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestProject(UnaryOpMixin),class,,,,Class: TestProject(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestProject,,,,,,,,,(UnaryOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestInv(UnaryOpMixin),class,,,,Class: TestInv(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestInv,,,,,,,,,(UnaryOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestZeros_like(UnaryOpMixin),class,,,,Class: TestZeros_like(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestZeros_like,,,,,,,,,(UnaryOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,TestIdentity_like(UnaryOpMixin),class,,,,Class: TestIdentity_like(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestIdentity_like,,,,,,,,,(UnaryOpMixin),,
qutip_qutip_v5.0.4,test_mathematics.py,python,shapes_unary(dim=100),function,,,,Function: shapes_unary(dim=100),qutip,qutip,v5.0.4,,,,shapes_unary,(dim=100),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,shapes_binary_identical(dim=100),function,,,,Function: shapes_binary_identical(dim=100),qutip,qutip,v5.0.4,,,,shapes_binary_identical,(dim=100),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,shapes_binary_bad_identical(dim=100),function,,,,Function: shapes_binary_bad_identical(dim=100),qutip,qutip,v5.0.4,,,,shapes_binary_bad_identical,(dim=100),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,shapes_binary_unrestricted(dim=100),function,,,,Function: shapes_binary_unrestricted(dim=100),qutip,qutip,v5.0.4,,,,shapes_binary_unrestricted,(dim=100),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,shapes_binary_bad_unrestricted(dim=100),function,,,,Function: shapes_binary_bad_unrestricted(dim=100),qutip,qutip,v5.0.4,,,,shapes_binary_bad_unrestricted,(dim=100),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,shapes_binary_matmul(dim=100),function,,,,Function: shapes_binary_matmul(dim=100),qutip,qutip,v5.0.4,,,,shapes_binary_matmul,(dim=100),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,shapes_binary_bad_matmul(dim=100),function,,,,Function: shapes_binary_bad_matmul(dim=100),qutip,qutip,v5.0.4,,,,shapes_binary_bad_matmul,(dim=100),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,shapes_square(dim=100),function,,,,Function: shapes_square(dim=100),qutip,qutip,v5.0.4,,,,shapes_square,(dim=100),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,shapes_not_square(dim=100),function,,,,Function: shapes_not_square(dim=100),qutip,qutip,v5.0.4,,,,shapes_not_square,(dim=100),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,cases_csr(shape),function,,,,Function: cases_csr(shape),qutip,qutip,v5.0.4,,,,cases_csr,(shape),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,cases_dense(shape),function,,,,Function: cases_dense(shape),qutip,qutip,v5.0.4,,,,cases_dense,(shape),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,cases_diag(shape),function,,,,Function: cases_diag(shape),qutip,qutip,v5.0.4,,,,cases_diag,(shape),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"cases_type_shape_product(cases_lookup, op, types, shapes, out_type=None)",function,,,,"Function: cases_type_shape_product(cases_lookup, op, types, shapes, out_type=None)",qutip,qutip,v5.0.4,,,,cases_type_shape_product,"(cases_lookup, op, types, shapes, out_type=None)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,_inv_dense(matrix),function,,,,Function: _inv_dense(matrix),qutip,qutip,v5.0.4,,,,_inv_dense,(matrix),,,,,,,,,"# Add a diagonal so `matrix` is not singular",,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,_inv_csr(matrix),function,,,,Function: _inv_csr(matrix),qutip,qutip,v5.0.4,,,,_inv_csr,(matrix),,,,,,,,,"# Add a diagonal so `matrix` is not singular",,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,_ParameterSet = type(pytest.param()),constant,_ParameterSet = type(pytest.param()),_ParameterSet,type(pytest.param()),Constant: _ParameterSet = type(pytest.param()),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"_ALL_CASES = {
    CSR: cases_csr,
    Dia: cases_diag,
    Dense: cases_dense,
}",constant,"_ALL_CASES = {
    CSR: cases_csr,
    Dia: cases_diag,
    Dense: cases_dense,
}",_ALL_CASES,"{
    CSR: cases_csr,
    Dia: cases_diag,
    Dense: cases_dense,
}","Constant: _ALL_CASES = {
    CSR: cases_csr,
    Dia: cases_diag,
    Dense: cases_dense,
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,"_RANDOM = {
    CSR: lambda shape: [lambda: conftest.random_csr(shape, 0.5, True)],
    Dense: lambda shape: [lambda: conftest.random_dense(shape, False)],
    Dia: lambda shape: [lambda: conftest.random_diag(shape, 0.5)],
}",constant,"_RANDOM = {
    CSR: lambda shape: [lambda: conftest.random_csr(shape, 0.5, True)],
    Dense: lambda shape: [lambda: conftest.random_dense(shape, False)],
    Dia: lambda shape: [lambda: conftest.random_diag(shape, 0.5)],
}",_RANDOM,"{
    CSR: lambda shape: [lambda: conftest.random_csr(shape, 0.5, True)],
    Dense: lambda shape: [lambda: conftest.random_dense(shape, False)],
    Dia: lambda shape: [lambda: conftest.random_diag(shape, 0.5)],
}","Constant: _RANDOM = {
    CSR: lambda shape: [lambda: conftest.random_csr(shape, 0.5, True)],
    Dense: lambda shape: [lambda: conftest.random_dense(shape, False)],
    Dia: lambda shape: [lambda: conftest.random_diag(shape, 0.5)],
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,itertools,import,,,,Import: itertools,qutip,qutip,v5.0.4,import itertools,,itertools,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,scipy,import,,,,Import: scipy,qutip,qutip,v5.0.4,import scipy,,scipy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,data from qutip.core,local_import,,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data,qutip.core,data,,,qutip.core,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,Data from qutip.core.data,local_import,,,,Import: Data from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import Data, Dense, CSR, Dia",qutip.core.data,Data,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,Dense from qutip.core.data,local_import,,,,Import: Dense from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import Data, Dense, CSR, Dia",qutip.core.data,Dense,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,CSR from qutip.core.data,local_import,,,,Import: CSR from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import Data, Dense, CSR, Dia",qutip.core.data,CSR,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mathematics.py,python,Dia from qutip.core.data,local_import,,,,Import: Dia from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import Data, Dense, CSR, Dia",qutip.core.data,Dia,,,qutip.core.data,,,,,,,,,,,,
,test_mathematics.py,python,,,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_mathematics.py,python,,,,,,Directory: qutip\tests\core\data\test_mathematics.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_norm.py,python,"TestOneNorm.specialisations = [
        pytest.param(data.norm.one_csr, CSR, numbers.Number),
        pytest.param(data.norm.one_dia, Dia, numbers.Number),
        pytest.param(data.norm.one_dense, Dense, numbers.Number),
    ]",class_field,,,,"Class field: TestOneNorm.specialisations = [
        pytest.param(data.norm.one_csr, CSR, numbers.Number),
        pytest.param(data.norm.one_dia, Dia, numbers.Number),
        pytest.param(data.norm.one_dense, Dense, numbers.Number),
    ]",qutip,qutip,v5.0.4,,,,,,,TestOneNorm,,,"specialisations = [
        pytest.param(data.norm.one_csr, CSR, numbers.Number),
        pytest.param(data.norm.one_dia, Dia, numbers.Number),
        pytest.param(data.norm.one_dense, Dense, numbers.Number),
    ]",,,,,specialisations,,"[
        pytest.param(data.norm.one_csr, CSR, numbers.Number),
        pytest.param(data.norm.one_dia, Dia, numbers.Number),
        pytest.param(data.norm.one_dense, Dense, numbers.Number),
    ]",
qutip_qutip_v5.0.4,test_norm.py,python,"TestFrobeniusNorm.specialisations = [
        pytest.param(data.norm.frobenius_csr, CSR, numbers.Number),
        pytest.param(data.norm.frobenius_dia, Dia, numbers.Number),
        pytest.param(data.norm.frobenius_dense, Dense, numbers.Number),
    ]",class_field,,,,"Class field: TestFrobeniusNorm.specialisations = [
        pytest.param(data.norm.frobenius_csr, CSR, numbers.Number),
        pytest.param(data.norm.frobenius_dia, Dia, numbers.Number),
        pytest.param(data.norm.frobenius_dense, Dense, numbers.Number),
    ]",qutip,qutip,v5.0.4,,,,,,,TestFrobeniusNorm,,,"specialisations = [
        pytest.param(data.norm.frobenius_csr, CSR, numbers.Number),
        pytest.param(data.norm.frobenius_dia, Dia, numbers.Number),
        pytest.param(data.norm.frobenius_dense, Dense, numbers.Number),
    ]",,,,,specialisations,,"[
        pytest.param(data.norm.frobenius_csr, CSR, numbers.Number),
        pytest.param(data.norm.frobenius_dia, Dia, numbers.Number),
        pytest.param(data.norm.frobenius_dense, Dense, numbers.Number),
    ]",
qutip_qutip_v5.0.4,test_norm.py,python,"TestMaxNorm.specialisations = [
        pytest.param(data.norm.max_csr, CSR, numbers.Number),
        pytest.param(data.norm.max_dia, Dia, numbers.Number),
        pytest.param(data.norm.max_dense, Dense, numbers.Number),
    ]",class_field,,,,"Class field: TestMaxNorm.specialisations = [
        pytest.param(data.norm.max_csr, CSR, numbers.Number),
        pytest.param(data.norm.max_dia, Dia, numbers.Number),
        pytest.param(data.norm.max_dense, Dense, numbers.Number),
    ]",qutip,qutip,v5.0.4,,,,,,,TestMaxNorm,,,"specialisations = [
        pytest.param(data.norm.max_csr, CSR, numbers.Number),
        pytest.param(data.norm.max_dia, Dia, numbers.Number),
        pytest.param(data.norm.max_dense, Dense, numbers.Number),
    ]",,,,,specialisations,,"[
        pytest.param(data.norm.max_csr, CSR, numbers.Number),
        pytest.param(data.norm.max_dia, Dia, numbers.Number),
        pytest.param(data.norm.max_dense, Dense, numbers.Number),
    ]",
qutip_qutip_v5.0.4,test_norm.py,python,"TestL2Norm.shapes = [
        (x,) for x in testing.shapes_unary() if (x.values[0][0] == 1
                                                 or x.values[0][1] == 1)
    ]",class_field,,,,"Class field: TestL2Norm.shapes = [
        (x,) for x in testing.shapes_unary() if (x.values[0][0] == 1
                                                 or x.values[0][1] == 1)
    ]",qutip,qutip,v5.0.4,,,,,,,TestL2Norm,,,"shapes = [
        (x,) for x in testing.shapes_unary() if (x.values[0][0] == 1
                                                 or x.values[0][1] == 1)
    ]",,,,,shapes,,"[
        (x,) for x in testing.shapes_unary() if (x.values[0][0] == 1
                                                 or x.values[0][1] == 1)
    ]",
qutip_qutip_v5.0.4,test_norm.py,python,"TestL2Norm.bad_shapes = [
        (x,) for x in testing.shapes_unary() if not (x.values[0][0] == 1
                                                     or x.values[0][1] == 1)
    ]",class_field,,,,"Class field: TestL2Norm.bad_shapes = [
        (x,) for x in testing.shapes_unary() if not (x.values[0][0] == 1
                                                     or x.values[0][1] == 1)
    ]",qutip,qutip,v5.0.4,,,,,,,TestL2Norm,,,"bad_shapes = [
        (x,) for x in testing.shapes_unary() if not (x.values[0][0] == 1
                                                     or x.values[0][1] == 1)
    ]",,,,,bad_shapes,,"[
        (x,) for x in testing.shapes_unary() if not (x.values[0][0] == 1
                                                     or x.values[0][1] == 1)
    ]",
qutip_qutip_v5.0.4,test_norm.py,python,"TestL2Norm.specialisations = [
        pytest.param(data.norm.l2_csr, CSR, numbers.Number),
        pytest.param(data.norm.l2_dia, Dia, numbers.Number),
        pytest.param(data.norm.l2_dense, Dense, numbers.Number),
    ]",class_field,,,,"Class field: TestL2Norm.specialisations = [
        pytest.param(data.norm.l2_csr, CSR, numbers.Number),
        pytest.param(data.norm.l2_dia, Dia, numbers.Number),
        pytest.param(data.norm.l2_dense, Dense, numbers.Number),
    ]",qutip,qutip,v5.0.4,,,,,,,TestL2Norm,,,"specialisations = [
        pytest.param(data.norm.l2_csr, CSR, numbers.Number),
        pytest.param(data.norm.l2_dia, Dia, numbers.Number),
        pytest.param(data.norm.l2_dense, Dense, numbers.Number),
    ]",,,,,specialisations,,"[
        pytest.param(data.norm.l2_csr, CSR, numbers.Number),
        pytest.param(data.norm.l2_dia, Dia, numbers.Number),
        pytest.param(data.norm.l2_dense, Dense, numbers.Number),
    ]",
qutip_qutip_v5.0.4,test_norm.py,python,"TestTraceNorm.specialisations = [
        pytest.param(data.norm.trace_csr, CSR, numbers.Number),
        pytest.param(data.norm.trace_dense, Dense, numbers.Number),
    ]",class_field,,,,"Class field: TestTraceNorm.specialisations = [
        pytest.param(data.norm.trace_csr, CSR, numbers.Number),
        pytest.param(data.norm.trace_dense, Dense, numbers.Number),
    ]",qutip,qutip,v5.0.4,,,,,,,TestTraceNorm,,,"specialisations = [
        pytest.param(data.norm.trace_csr, CSR, numbers.Number),
        pytest.param(data.norm.trace_dense, Dense, numbers.Number),
    ]",,,,,specialisations,,"[
        pytest.param(data.norm.trace_csr, CSR, numbers.Number),
        pytest.param(data.norm.trace_dense, Dense, numbers.Number),
    ]",
qutip_qutip_v5.0.4,test_norm.py,python,"TestOneNorm.op_numpy(self, matrix)",class_method,,,,"Class method: TestOneNorm.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,TestOneNorm,op_numpy,"(self, matrix)",,,,,,,,,
qutip_qutip_v5.0.4,test_norm.py,python,"TestFrobeniusNorm.op_numpy(self, matrix)",class_method,,,,"Class method: TestFrobeniusNorm.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,TestFrobeniusNorm,op_numpy,"(self, matrix)",,,,,,,,,
qutip_qutip_v5.0.4,test_norm.py,python,"TestMaxNorm.op_numpy(self, matrix)",class_method,,,,"Class method: TestMaxNorm.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,TestMaxNorm,op_numpy,"(self, matrix)",,,,,,,,,
qutip_qutip_v5.0.4,test_norm.py,python,"TestL2Norm.op_numpy(self, matrix)",class_method,,,,"Class method: TestL2Norm.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,TestL2Norm,op_numpy,"(self, matrix)",,,,,,,,,
qutip_qutip_v5.0.4,test_norm.py,python,"TestTraceNorm.op_numpy(self, matrix)",class_method,,,,"Class method: TestTraceNorm.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,TestTraceNorm,op_numpy,"(self, matrix)",,,,,,,,,
qutip_qutip_v5.0.4,test_norm.py,python,TestOneNorm(testing.UnaryOpMixin),class,,,,Class: TestOneNorm(testing.UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestOneNorm,,,,,,,,,(testing.UnaryOpMixin),,
qutip_qutip_v5.0.4,test_norm.py,python,TestFrobeniusNorm(testing.UnaryOpMixin),class,,,,Class: TestFrobeniusNorm(testing.UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestFrobeniusNorm,,,,,,,,,(testing.UnaryOpMixin),,
qutip_qutip_v5.0.4,test_norm.py,python,TestMaxNorm(testing.UnaryOpMixin),class,,,,Class: TestMaxNorm(testing.UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestMaxNorm,,,,,,,,,(testing.UnaryOpMixin),,
qutip_qutip_v5.0.4,test_norm.py,python,TestL2Norm(testing.UnaryOpMixin),class,,,,Class: TestL2Norm(testing.UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestL2Norm,,,,,,,,,(testing.UnaryOpMixin),,
qutip_qutip_v5.0.4,test_norm.py,python,TestTraceNorm(testing.UnaryOpMixin),class,,,,Class: TestTraceNorm(testing.UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestTraceNorm,,,,,,,,,(testing.UnaryOpMixin),,
qutip_qutip_v5.0.4,test_norm.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_norm.py,python,scipy.linalg,import,,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg,,scipy.linalg,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_norm.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_norm.py,python,data from qutip,import,,,,Import: data from qutip,qutip,qutip,v5.0.4,from qutip import data,qutip,data,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_norm.py,python,numbers,import,,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,,numbers,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_norm.py,python,CSR from qutip.core.data,local_import,,,,Import: CSR from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",qutip.core.data,CSR,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_norm.py,python,Dense from qutip.core.data,local_import,,,,Import: Dense from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",qutip.core.data,Dense,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_norm.py,python,Dia from qutip.core.data,local_import,,,,Import: Dia from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",qutip.core.data,Dia,,,qutip.core.data,,,,,,,,,,,,
,test_norm.py,python,,,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_norm.py,python,,,,,,Directory: qutip\tests\core\data\test_norm.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,settings from qutip,import,,,,Import: settings from qutip,qutip,qutip,v5.0.4,from qutip import settings,qutip,settings,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_operators.py,python,data from qutip.core,local_import,,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,qutip.core,data,,,qutip.core,,,,,,,,,,,,
,test_operators.py,python,,,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_operators.py,python,,,,,,Directory: qutip\tests\core\data\test_operators.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_properties.py,python,Test_isherm.tol = 1e-12,class_field,,,,Class field: Test_isherm.tol = 1e-12,qutip,qutip,v5.0.4,,,,,,,Test_isherm,,,tol = 1e-12,,,,,tol,,1e-12,
qutip_qutip_v5.0.4,test_properties.py,python,"[pytest.mark.repeat(20)] Test_isherm.test_random_equal_structure(self, datatype, size, density)",class_method,,,,"Class method: [pytest.mark.repeat(20)] Test_isherm.test_random_equal_structure(self, datatype, size, density)",qutip,qutip,v5.0.4,,,,,,,Test_isherm,test_random_equal_structure,"(self, datatype, size, density)",,,,,,,,,pytest.mark.repeat(20)
qutip_qutip_v5.0.4,test_properties.py,python,"[pytest.mark.parametrize(""density"", (0.1, 0.8))] Test_isherm.test_random_equal_structure(self, datatype, size, density)",class_method,,,,"Class method: [pytest.mark.parametrize(""density"", (0.1, 0.8))] Test_isherm.test_random_equal_structure(self, datatype, size, density)",qutip,qutip,v5.0.4,,,,,,,Test_isherm,test_random_equal_structure,"(self, datatype, size, density)",,,,,,,,,"pytest.mark.parametrize(""density"", (0.1, 0.8))"
qutip_qutip_v5.0.4,test_properties.py,python,"[pytest.mark.parametrize(""size"", (10, 100))] Test_isherm.test_random_equal_structure(self, datatype, size, density)",class_method,,,,"Class method: [pytest.mark.parametrize(""size"", (10, 100))] Test_isherm.test_random_equal_structure(self, datatype, size, density)",qutip,qutip,v5.0.4,,,,,,,Test_isherm,test_random_equal_structure,"(self, datatype, size, density)",,,,,,,,,"pytest.mark.parametrize(""size"", (10, 100))"
qutip_qutip_v5.0.4,test_properties.py,python,"[pytest.mark.parametrize(""cols"", (2, 4))] Test_isherm.test_nonsquare_shapes(self, datatype, rows, cols)",class_method,,,,"Class method: [pytest.mark.parametrize(""cols"", (2, 4))] Test_isherm.test_nonsquare_shapes(self, datatype, rows, cols)",qutip,qutip,v5.0.4,,,,,,,Test_isherm,test_nonsquare_shapes,"(self, datatype, rows, cols)",,,,,,,,,"pytest.mark.parametrize(""cols"", (2, 4))"
qutip_qutip_v5.0.4,test_properties.py,python,"[pytest.mark.parametrize(""rows"", (1, 5))] Test_isherm.test_nonsquare_shapes(self, datatype, rows, cols)",class_method,,,,"Class method: [pytest.mark.parametrize(""rows"", (1, 5))] Test_isherm.test_nonsquare_shapes(self, datatype, rows, cols)",qutip,qutip,v5.0.4,,,,,,,Test_isherm,test_nonsquare_shapes,"(self, datatype, rows, cols)",,,,,,,,,"pytest.mark.parametrize(""rows"", (1, 5))"
qutip_qutip_v5.0.4,test_properties.py,python,"Test_isherm.test_diagonal_elements(self, datatype)",class_method,,,,"Class method: Test_isherm.test_diagonal_elements(self, datatype)",qutip,qutip,v5.0.4,,,,,,,Test_isherm,test_diagonal_elements,"(self, datatype)",,,,,,,,,
qutip_qutip_v5.0.4,test_properties.py,python,"Test_isherm.test_compare_implicit_zero_structure(self, datatype)",class_method,,,,"Class method: Test_isherm.test_compare_implicit_zero_structure(self, datatype)",qutip,qutip,v5.0.4,,,,,,,Test_isherm,test_compare_implicit_zero_structure,"(self, datatype)",,,,,,,,,
qutip_qutip_v5.0.4,test_properties.py,python,"[pytest.mark.parametrize(""density"", np.linspace(0.2, 1, 17))] Test_isherm.test_compare_implicit_zero_random(self, datatype, density)",class_method,,,,"Class method: [pytest.mark.parametrize(""density"", np.linspace(0.2, 1, 17))] Test_isherm.test_compare_implicit_zero_random(self, datatype, density)",qutip,qutip,v5.0.4,,,,,,,Test_isherm,test_compare_implicit_zero_random,"(self, datatype, density)",,,,,,,,,"pytest.mark.parametrize(""density"", np.linspace(0.2, 1, 17))"
qutip_qutip_v5.0.4,test_properties.py,python,"Test_isherm.test_structure_detection(self, datatype)",class_method,,,,"Class method: Test_isherm.test_structure_detection(self, datatype)",qutip,qutip,v5.0.4,,,,,,,Test_isherm,test_structure_detection,"(self, datatype)",,,,,,,,,
qutip_qutip_v5.0.4,test_properties.py,python,"[pytest.mark.parametrize(""shape"",
        [(10, 1), (2, 5), (5, 2), (5, 5)]
    )] Test_isdiag.test_isdiag(self, shape, datatype)",class_method,,,,"Class method: [pytest.mark.parametrize(""shape"",
        [(10, 1), (2, 5), (5, 2), (5, 5)]
    )] Test_isdiag.test_isdiag(self, shape, datatype)",qutip,qutip,v5.0.4,,,,,,,Test_isdiag,test_isdiag,"(self, shape, datatype)",,,,,,,,,"pytest.mark.parametrize(""shape"",
        [(10, 1), (2, 5), (5, 2), (5, 5)]
    )"
qutip_qutip_v5.0.4,test_properties.py,python,"TestIsEqual.op_numpy(self, left, right, atol, rtol)",class_method,,,,"Class method: TestIsEqual.op_numpy(self, left, right, atol, rtol)",qutip,qutip,v5.0.4,,,,,,,TestIsEqual,op_numpy,"(self, left, right, atol, rtol)",,,,,,,,,
qutip_qutip_v5.0.4,test_properties.py,python,TestIsEqual.rand_dense(shape),class_method,,,,Class method: TestIsEqual.rand_dense(shape),qutip,qutip,v5.0.4,,,,,,,TestIsEqual,rand_dense,(shape),,,,,,,,,
qutip_qutip_v5.0.4,test_properties.py,python,TestIsEqual.rand_diag(shape),class_method,,,,Class method: TestIsEqual.rand_diag(shape),qutip,qutip,v5.0.4,,,,,,,TestIsEqual,rand_diag,(shape),,,,,,,,,
qutip_qutip_v5.0.4,test_properties.py,python,TestIsEqual.rand_csr(shape),class_method,,,,Class method: TestIsEqual.rand_csr(shape),qutip,qutip,v5.0.4,,,,,,,TestIsEqual,rand_csr,(shape),,,,,,,,,
qutip_qutip_v5.0.4,test_properties.py,python,"[pytest.mark.parametrize(""factory"", [rand_dense, rand_diag, rand_csr])] TestIsEqual.test_same_shape(self, factory, shape)",class_method,,,,"Class method: [pytest.mark.parametrize(""factory"", [rand_dense, rand_diag, rand_csr])] TestIsEqual.test_same_shape(self, factory, shape)",qutip,qutip,v5.0.4,,,,,,,TestIsEqual,test_same_shape,"(self, factory, shape)",,,,,,,,,"pytest.mark.parametrize(""factory"", [rand_dense, rand_diag, rand_csr])"
qutip_qutip_v5.0.4,test_properties.py,python,"[pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])] TestIsEqual.test_same_shape(self, factory, shape)",class_method,,,,"Class method: [pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])] TestIsEqual.test_same_shape(self, factory, shape)",qutip,qutip,v5.0.4,,,,,,,TestIsEqual,test_same_shape,"(self, factory, shape)",,,,,,,,,"pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])"
qutip_qutip_v5.0.4,test_properties.py,python,"[pytest.mark.parametrize(""factory"", [rand_dense, rand_diag, rand_csr])] TestIsEqual.test_different_shape(self, factory, shapeA, shapeB)",class_method,,,,"Class method: [pytest.mark.parametrize(""factory"", [rand_dense, rand_diag, rand_csr])] TestIsEqual.test_different_shape(self, factory, shapeA, shapeB)",qutip,qutip,v5.0.4,,,,,,,TestIsEqual,test_different_shape,"(self, factory, shapeA, shapeB)",,,,,,,,,"pytest.mark.parametrize(""factory"", [rand_dense, rand_diag, rand_csr])"
qutip_qutip_v5.0.4,test_properties.py,python,"[pytest.mark.parametrize(""shapeA"", [(1, 10), (9, 9), (10, 2)])] TestIsEqual.test_different_shape(self, factory, shapeA, shapeB)",class_method,,,,"Class method: [pytest.mark.parametrize(""shapeA"", [(1, 10), (9, 9), (10, 2)])] TestIsEqual.test_different_shape(self, factory, shapeA, shapeB)",qutip,qutip,v5.0.4,,,,,,,TestIsEqual,test_different_shape,"(self, factory, shapeA, shapeB)",,,,,,,,,"pytest.mark.parametrize(""shapeA"", [(1, 10), (9, 9), (10, 2)])"
qutip_qutip_v5.0.4,test_properties.py,python,"[pytest.mark.parametrize(""shapeB"", [(1, 9), (10, 10), (10, 1)])] TestIsEqual.test_different_shape(self, factory, shapeA, shapeB)",class_method,,,,"Class method: [pytest.mark.parametrize(""shapeB"", [(1, 9), (10, 10), (10, 1)])] TestIsEqual.test_different_shape(self, factory, shapeA, shapeB)",qutip,qutip,v5.0.4,,,,,,,TestIsEqual,test_different_shape,"(self, factory, shapeA, shapeB)",,,,,,,,,"pytest.mark.parametrize(""shapeB"", [(1, 9), (10, 10), (10, 1)])"
qutip_qutip_v5.0.4,test_properties.py,python,"[pytest.mark.parametrize(""rtol"", [1e-6, 100])] TestIsEqual.test_rtol(self, factory, shape, rtol)",class_method,,,,"Class method: [pytest.mark.parametrize(""rtol"", [1e-6, 100])] TestIsEqual.test_rtol(self, factory, shape, rtol)",qutip,qutip,v5.0.4,,,,,,,TestIsEqual,test_rtol,"(self, factory, shape, rtol)",,,,,,,,,"pytest.mark.parametrize(""rtol"", [1e-6, 100])"
qutip_qutip_v5.0.4,test_properties.py,python,"[pytest.mark.parametrize(""factory"", [rand_dense, rand_diag, rand_csr])] TestIsEqual.test_rtol(self, factory, shape, rtol)",class_method,,,,"Class method: [pytest.mark.parametrize(""factory"", [rand_dense, rand_diag, rand_csr])] TestIsEqual.test_rtol(self, factory, shape, rtol)",qutip,qutip,v5.0.4,,,,,,,TestIsEqual,test_rtol,"(self, factory, shape, rtol)",,,,,,,,,"pytest.mark.parametrize(""factory"", [rand_dense, rand_diag, rand_csr])"
qutip_qutip_v5.0.4,test_properties.py,python,"[pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])] TestIsEqual.test_rtol(self, factory, shape, rtol)",class_method,,,,"Class method: [pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])] TestIsEqual.test_rtol(self, factory, shape, rtol)",qutip,qutip,v5.0.4,,,,,,,TestIsEqual,test_rtol,"(self, factory, shape, rtol)",,,,,,,,,"pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])"
qutip_qutip_v5.0.4,test_properties.py,python,"[pytest.mark.parametrize(""atol"", [1e-14, 1e-6, 100])] TestIsEqual.test_atol(self, factory, shape, atol)",class_method,,,,"Class method: [pytest.mark.parametrize(""atol"", [1e-14, 1e-6, 100])] TestIsEqual.test_atol(self, factory, shape, atol)",qutip,qutip,v5.0.4,,,,,,,TestIsEqual,test_atol,"(self, factory, shape, atol)",,,,,,,,,"pytest.mark.parametrize(""atol"", [1e-14, 1e-6, 100])"
qutip_qutip_v5.0.4,test_properties.py,python,"[pytest.mark.parametrize(""factory"", [rand_dense, rand_diag, rand_csr])] TestIsEqual.test_atol(self, factory, shape, atol)",class_method,,,,"Class method: [pytest.mark.parametrize(""factory"", [rand_dense, rand_diag, rand_csr])] TestIsEqual.test_atol(self, factory, shape, atol)",qutip,qutip,v5.0.4,,,,,,,TestIsEqual,test_atol,"(self, factory, shape, atol)",,,,,,,,,"pytest.mark.parametrize(""factory"", [rand_dense, rand_diag, rand_csr])"
qutip_qutip_v5.0.4,test_properties.py,python,"[pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])] TestIsEqual.test_atol(self, factory, shape, atol)",class_method,,,,"Class method: [pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])] TestIsEqual.test_atol(self, factory, shape, atol)",qutip,qutip,v5.0.4,,,,,,,TestIsEqual,test_atol,"(self, factory, shape, atol)",,,,,,,,,"pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])"
qutip_qutip_v5.0.4,test_properties.py,python,"[pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])] TestIsEqual.test_csr_mismatch_sort(self, shape)",class_method,,,,"Class method: [pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])] TestIsEqual.test_csr_mismatch_sort(self, shape)",qutip,qutip,v5.0.4,,,,,,,TestIsEqual,test_csr_mismatch_sort,"(self, shape)",,,,,,,,,"pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])"
qutip_qutip_v5.0.4,test_properties.py,python,"[pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])] TestIsEqual.test_dia_mismatch_sort(self, shape)",class_method,,,,"Class method: [pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])] TestIsEqual.test_dia_mismatch_sort(self, shape)",qutip,qutip,v5.0.4,,,,,,,TestIsEqual,test_dia_mismatch_sort,"(self, shape)",,,,,,,,,"pytest.mark.parametrize(""shape"", [(1, 20), (20, 20), (20, 2)])"
qutip_qutip_v5.0.4,test_properties.py,python,Test_isherm,class,,,,Class: Test_isherm,qutip,qutip,v5.0.4,,,,,,,Test_isherm,,,,,,,,,,,
qutip_qutip_v5.0.4,test_properties.py,python,Test_isdiag,class,,,,Class: Test_isdiag,qutip,qutip,v5.0.4,,,,,,,Test_isdiag,,,,,,,,,,,
qutip_qutip_v5.0.4,test_properties.py,python,TestIsEqual,class,,,,Class: TestIsEqual,qutip,qutip,v5.0.4,,,,,,,TestIsEqual,,,,,,,,,,,
qutip_qutip_v5.0.4,test_properties.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_properties.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_properties.py,python,data from qutip,import,,,,Import: data from qutip,qutip,qutip,v5.0.4,from qutip import data as _data,qutip,data,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_properties.py,python,CoreOptions from qutip,import,,,,Import: CoreOptions from qutip,qutip,qutip,v5.0.4,from qutip import CoreOptions,qutip,CoreOptions,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_properties.py,python,clean_dia from qutip.core.data.dia,local_import,,,,Import: clean_dia from qutip.core.data.dia,qutip,qutip,v5.0.4,from qutip.core.data.dia import clean_dia,qutip.core.data.dia,clean_dia,,,qutip.core.data.dia,,,,,,,,,,,,
,test_properties.py,python,,,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_properties.py,python,,,,,,Directory: qutip\tests\core\data\test_properties.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_ptrace.py,python,TestPtrace.dims = [2] * 7,class_field,,,,Class field: TestPtrace.dims = [2] * 7,qutip,qutip,v5.0.4,,,,,,,TestPtrace,,,dims = [2] * 7,,,,,dims,,[2] * 7,
qutip_qutip_v5.0.4,test_ptrace.py,python,"TestPtrace.shapes = [(pytest.param((np.prod(dims), np.prod(dims))),)]",class_field,,,,"Class field: TestPtrace.shapes = [(pytest.param((np.prod(dims), np.prod(dims))),)]",qutip,qutip,v5.0.4,,,,,,,TestPtrace,,,"shapes = [(pytest.param((np.prod(dims), np.prod(dims))),)]",,,,,shapes,,"[(pytest.param((np.prod(dims), np.prod(dims))),)]",
qutip_qutip_v5.0.4,test_ptrace.py,python,TestPtrace.bad_shapes = testing.shapes_not_square(np.prod(dims)),class_field,,,,Class field: TestPtrace.bad_shapes = testing.shapes_not_square(np.prod(dims)),qutip,qutip,v5.0.4,,,,,,,TestPtrace,,,bad_shapes = testing.shapes_not_square(np.prod(dims)),,,,,bad_shapes,,testing.shapes_not_square(np.prod(dims)),
qutip_qutip_v5.0.4,test_ptrace.py,python,"TestPtrace.specialisations = [
        pytest.param(data.ptrace_csr, CSR, CSR),
        pytest.param(data.ptrace_csr_dense, CSR, Dense),
        pytest.param(data.ptrace_dense, Dense, Dense),
        pytest.param(data.ptrace_dia, Dia, Dia),
    ]",class_field,,,,"Class field: TestPtrace.specialisations = [
        pytest.param(data.ptrace_csr, CSR, CSR),
        pytest.param(data.ptrace_csr_dense, CSR, Dense),
        pytest.param(data.ptrace_dense, Dense, Dense),
        pytest.param(data.ptrace_dia, Dia, Dia),
    ]",qutip,qutip,v5.0.4,,,,,,,TestPtrace,,,"specialisations = [
        pytest.param(data.ptrace_csr, CSR, CSR),
        pytest.param(data.ptrace_csr_dense, CSR, Dense),
        pytest.param(data.ptrace_dense, Dense, Dense),
        pytest.param(data.ptrace_dia, Dia, Dia),
    ]",,,,,specialisations,,"[
        pytest.param(data.ptrace_csr, CSR, CSR),
        pytest.param(data.ptrace_csr_dense, CSR, Dense),
        pytest.param(data.ptrace_dense, Dense, Dense),
        pytest.param(data.ptrace_dia, Dia, Dia),
    ]",
qutip_qutip_v5.0.4,test_ptrace.py,python,"TestPtrace.op_numpy(self, matrix, dims, sel)",class_method,,,,"Class method: TestPtrace.op_numpy(self, matrix, dims, sel)",qutip,qutip,v5.0.4,,,,,,,TestPtrace,op_numpy,"(self, matrix, dims, sel)",,,,,,,,,
qutip_qutip_v5.0.4,test_ptrace.py,python,"[pytest.mark.parametrize(
        ""sel"",
        [[0], [0, 3, 6], [0, 6, 3], list(range(len(dims))), []],
        ids=[
            ""keep_one"",
            ""keep_multiple_sorted"",
            ""keep_multiple_unsorted"",
            ""trace_none"",
            ""trace_all"",
        ],
    )] TestPtrace.test_mathematically_correct(self, op, data_m, out_type, sel)",class_method,,,,"Class method: [pytest.mark.parametrize(
        ""sel"",
        [[0], [0, 3, 6], [0, 6, 3], list(range(len(dims))), []],
        ids=[
            ""keep_one"",
            ""keep_multiple_sorted"",
            ""keep_multiple_unsorted"",
            ""trace_none"",
            ""trace_all"",
        ],
    )] TestPtrace.test_mathematically_correct(self, op, data_m, out_type, sel)",qutip,qutip,v5.0.4,,,,,,,TestPtrace,test_mathematically_correct,"(self, op, data_m, out_type, sel)",,,,,,,,,"pytest.mark.parametrize(
        ""sel"",
        [[0], [0, 3, 6], [0, 6, 3], list(range(len(dims))), []],
        ids=[
            ""keep_one"",
            ""keep_multiple_sorted"",
            ""keep_multiple_unsorted"",
            ""trace_none"",
            ""trace_all"",
        ],
    )"
qutip_qutip_v5.0.4,test_ptrace.py,python,"TestPtrace.test_incorrect_shape_raises(self, op, data_m)",class_method,,,,"Class method: TestPtrace.test_incorrect_shape_raises(self, op, data_m)",qutip,qutip,v5.0.4,,,,,,,TestPtrace,test_incorrect_shape_raises,"(self, op, data_m)",,,,,,,,,
qutip_qutip_v5.0.4,test_ptrace.py,python,"[pytest.mark.parametrize(
        ""dims"",
        [[2], [0], [-2, -2] + [2] * 5, [1.2, 2.2, 3.3]],
        ids=[
            ""dims_different_to_shape"",
            ""dims_0"",
            ""dims_prod_is_shape_but_negative"",
            ""dims_is_not_int"",
        ],
    )] TestPtrace.test_incorrect_dims_raises(self, op, data_m, out_type, dims)",class_method,,,,"Class method: [pytest.mark.parametrize(
        ""dims"",
        [[2], [0], [-2, -2] + [2] * 5, [1.2, 2.2, 3.3]],
        ids=[
            ""dims_different_to_shape"",
            ""dims_0"",
            ""dims_prod_is_shape_but_negative"",
            ""dims_is_not_int"",
        ],
    )] TestPtrace.test_incorrect_dims_raises(self, op, data_m, out_type, dims)",qutip,qutip,v5.0.4,,,,,,,TestPtrace,test_incorrect_dims_raises,"(self, op, data_m, out_type, dims)",,,,,,,,,"pytest.mark.parametrize(
        ""dims"",
        [[2], [0], [-2, -2] + [2] * 5, [1.2, 2.2, 3.3]],
        ids=[
            ""dims_different_to_shape"",
            ""dims_0"",
            ""dims_prod_is_shape_but_negative"",
            ""dims_is_not_int"",
        ],
    )"
qutip_qutip_v5.0.4,test_ptrace.py,python,"TestPtrace.generate_incorrect_dims_raises(self, metafunc)",class_method,,,,"Class method: TestPtrace.generate_incorrect_dims_raises(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,TestPtrace,generate_incorrect_dims_raises,"(self, metafunc)",,,,,,,,,
qutip_qutip_v5.0.4,test_ptrace.py,python,"[pytest.mark.parametrize(
        ""sel"",
        [[2, 10], [-1, 2]],
        ids=[
            ""sel_value_larger_than_dims"",
            ""sel_value_negative"",
        ],
    )] TestPtrace.test_incorrect_sel_raises(self, op, data_m, out_type, sel)",class_method,,,,"Class method: [pytest.mark.parametrize(
        ""sel"",
        [[2, 10], [-1, 2]],
        ids=[
            ""sel_value_larger_than_dims"",
            ""sel_value_negative"",
        ],
    )] TestPtrace.test_incorrect_sel_raises(self, op, data_m, out_type, sel)",qutip,qutip,v5.0.4,,,,,,,TestPtrace,test_incorrect_sel_raises,"(self, op, data_m, out_type, sel)",,,,,,,,,"pytest.mark.parametrize(
        ""sel"",
        [[2, 10], [-1, 2]],
        ids=[
            ""sel_value_larger_than_dims"",
            ""sel_value_negative"",
        ],
    )"
qutip_qutip_v5.0.4,test_ptrace.py,python,"TestPtrace.generate_incorrect_sel_raises(self, metafunc)",class_method,,,,"Class method: TestPtrace.generate_incorrect_sel_raises(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,TestPtrace,generate_incorrect_sel_raises,"(self, metafunc)",,,,,,,,,
qutip_qutip_v5.0.4,test_ptrace.py,python,TestPtrace(testing.UnaryOpMixin),class,,,,Class: TestPtrace(testing.UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestPtrace,,,,,,,,,(testing.UnaryOpMixin),,
qutip_qutip_v5.0.4,test_ptrace.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_ptrace.py,python,scipy.linalg,import,,,,Import: scipy.linalg,qutip,qutip,v5.0.4,import scipy.linalg,,scipy.linalg,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_ptrace.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_ptrace.py,python,data from qutip,import,,,,Import: data from qutip,qutip,qutip,v5.0.4,from qutip import data,qutip,data,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_ptrace.py,python,CSR from qutip.core.data,local_import,,,,Import: CSR from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",qutip.core.data,CSR,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_ptrace.py,python,Dense from qutip.core.data,local_import,,,,Import: Dense from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",qutip.core.data,Dense,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_ptrace.py,python,Dia from qutip.core.data,local_import,,,,Import: Dia from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",qutip.core.data,Dia,,,qutip.core.data,,,,,,,,,,,,
,test_ptrace.py,python,,,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_ptrace.py,python,,,,,,Directory: qutip\tests\core\data\test_ptrace.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_reshape.py,python,"TestSplitColumns.specialisations = [
        pytest.param(data.split_columns_csr, CSR, list),
        pytest.param(data.split_columns_dia, Dia, list),
        pytest.param(data.split_columns_dense, Dense, list),
    ]",class_field,,,,"Class field: TestSplitColumns.specialisations = [
        pytest.param(data.split_columns_csr, CSR, list),
        pytest.param(data.split_columns_dia, Dia, list),
        pytest.param(data.split_columns_dense, Dense, list),
    ]",qutip,qutip,v5.0.4,,,,,,,TestSplitColumns,,,"specialisations = [
        pytest.param(data.split_columns_csr, CSR, list),
        pytest.param(data.split_columns_dia, Dia, list),
        pytest.param(data.split_columns_dense, Dense, list),
    ]",,,,,specialisations,,"[
        pytest.param(data.split_columns_csr, CSR, list),
        pytest.param(data.split_columns_dia, Dia, list),
        pytest.param(data.split_columns_dense, Dense, list),
    ]",
qutip_qutip_v5.0.4,test_reshape.py,python,"TestColumnStack.specialisations = [
        pytest.param(data.column_stack_csr, CSR, CSR),
        pytest.param(data.column_stack_dia, Dia, Dia),
        pytest.param(data.column_stack_dense, Dense, Dense),
    ]",class_field,,,,"Class field: TestColumnStack.specialisations = [
        pytest.param(data.column_stack_csr, CSR, CSR),
        pytest.param(data.column_stack_dia, Dia, Dia),
        pytest.param(data.column_stack_dense, Dense, Dense),
    ]",qutip,qutip,v5.0.4,,,,,,,TestColumnStack,,,"specialisations = [
        pytest.param(data.column_stack_csr, CSR, CSR),
        pytest.param(data.column_stack_dia, Dia, Dia),
        pytest.param(data.column_stack_dense, Dense, Dense),
    ]",,,,,specialisations,,"[
        pytest.param(data.column_stack_csr, CSR, CSR),
        pytest.param(data.column_stack_dia, Dia, Dia),
        pytest.param(data.column_stack_dense, Dense, Dense),
    ]",
qutip_qutip_v5.0.4,test_reshape.py,python,"TestColumnUnstack.shapes = [
        (pytest.param((10, 1), id=""ket""), ),
    ]",class_field,,,,"Class field: TestColumnUnstack.shapes = [
        (pytest.param((10, 1), id=""ket""), ),
    ]",qutip,qutip,v5.0.4,,,,,,,TestColumnUnstack,,,"shapes = [
        (pytest.param((10, 1), id=""ket""), ),
    ]",,,,,shapes,,"[
        (pytest.param((10, 1), id=""ket""), ),
    ]",
qutip_qutip_v5.0.4,test_reshape.py,python,"TestColumnUnstack.bad_shapes = [
        (pytest.param((1, 10), id=""bra""), ),
        (pytest.param((10, 10), id=""square""), ),
        (pytest.param((2, 10), id=""non_square""), ),
    ]",class_field,,,,"Class field: TestColumnUnstack.bad_shapes = [
        (pytest.param((1, 10), id=""bra""), ),
        (pytest.param((10, 10), id=""square""), ),
        (pytest.param((2, 10), id=""non_square""), ),
    ]",qutip,qutip,v5.0.4,,,,,,,TestColumnUnstack,,,"bad_shapes = [
        (pytest.param((1, 10), id=""bra""), ),
        (pytest.param((10, 10), id=""square""), ),
        (pytest.param((2, 10), id=""non_square""), ),
    ]",,,,,bad_shapes,,"[
        (pytest.param((1, 10), id=""bra""), ),
        (pytest.param((10, 10), id=""square""), ),
        (pytest.param((2, 10), id=""non_square""), ),
    ]",
qutip_qutip_v5.0.4,test_reshape.py,python,"TestColumnUnstack.specialisations = [
        pytest.param(data.column_unstack_csr, CSR, CSR),
        pytest.param(data.column_unstack_dia, Dia, Dia),
        pytest.param(data.column_unstack_dense, Dense, Dense),
    ]",class_field,,,,"Class field: TestColumnUnstack.specialisations = [
        pytest.param(data.column_unstack_csr, CSR, CSR),
        pytest.param(data.column_unstack_dia, Dia, Dia),
        pytest.param(data.column_unstack_dense, Dense, Dense),
    ]",qutip,qutip,v5.0.4,,,,,,,TestColumnUnstack,,,"specialisations = [
        pytest.param(data.column_unstack_csr, CSR, CSR),
        pytest.param(data.column_unstack_dia, Dia, Dia),
        pytest.param(data.column_unstack_dense, Dense, Dense),
    ]",,,,,specialisations,,"[
        pytest.param(data.column_unstack_csr, CSR, CSR),
        pytest.param(data.column_unstack_dia, Dia, Dia),
        pytest.param(data.column_unstack_dense, Dense, Dense),
    ]",
qutip_qutip_v5.0.4,test_reshape.py,python,"TestReshape.shapes = [
        (pytest.param((1, 100), id=""bra""), ),
        (pytest.param((100, 1), id=""ket""), ),
        (pytest.param((2, 50), id=""non_square""), ),
        (pytest.param((10, 10), id=""square""), ),
    ]",class_field,,,,"Class field: TestReshape.shapes = [
        (pytest.param((1, 100), id=""bra""), ),
        (pytest.param((100, 1), id=""ket""), ),
        (pytest.param((2, 50), id=""non_square""), ),
        (pytest.param((10, 10), id=""square""), ),
    ]",qutip,qutip,v5.0.4,,,,,,,TestReshape,,,"shapes = [
        (pytest.param((1, 100), id=""bra""), ),
        (pytest.param((100, 1), id=""ket""), ),
        (pytest.param((2, 50), id=""non_square""), ),
        (pytest.param((10, 10), id=""square""), ),
    ]",,,,,shapes,,"[
        (pytest.param((1, 100), id=""bra""), ),
        (pytest.param((100, 1), id=""ket""), ),
        (pytest.param((2, 50), id=""non_square""), ),
        (pytest.param((10, 10), id=""square""), ),
    ]",
qutip_qutip_v5.0.4,test_reshape.py,python,"TestReshape.specialisations = [
        pytest.param(data.reshape_dense, Dense, Dense),
        pytest.param(data.reshape_dia, Dia, Dia),
        pytest.param(data.reshape_csr, CSR, CSR),
    ]",class_field,,,,"Class field: TestReshape.specialisations = [
        pytest.param(data.reshape_dense, Dense, Dense),
        pytest.param(data.reshape_dia, Dia, Dia),
        pytest.param(data.reshape_csr, CSR, CSR),
    ]",qutip,qutip,v5.0.4,,,,,,,TestReshape,,,"specialisations = [
        pytest.param(data.reshape_dense, Dense, Dense),
        pytest.param(data.reshape_dia, Dia, Dia),
        pytest.param(data.reshape_csr, CSR, CSR),
    ]",,,,,specialisations,,"[
        pytest.param(data.reshape_dense, Dense, Dense),
        pytest.param(data.reshape_dia, Dia, Dia),
        pytest.param(data.reshape_csr, CSR, CSR),
    ]",
qutip_qutip_v5.0.4,test_reshape.py,python,"TestSplitColumns.op_numpy(self, matrix)",class_method,,,,"Class method: TestSplitColumns.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,TestSplitColumns,op_numpy,"(self, matrix)",,,,,,,,,
qutip_qutip_v5.0.4,test_reshape.py,python,"TestColumnStack.op_numpy(self, matrix)",class_method,,,,"Class method: TestColumnStack.op_numpy(self, matrix)",qutip,qutip,v5.0.4,,,,,,,TestColumnStack,op_numpy,"(self, matrix)",,,,,,,,,
qutip_qutip_v5.0.4,test_reshape.py,python,"TestColumnUnstack.op_numpy(self, matrix, rows)",class_method,,,,"Class method: TestColumnUnstack.op_numpy(self, matrix, rows)",qutip,qutip,v5.0.4,,,,,,,TestColumnUnstack,op_numpy,"(self, matrix, rows)",,,,,,,,,
qutip_qutip_v5.0.4,test_reshape.py,python,"[pytest.mark.parametrize('rows', [2, 5])] TestColumnUnstack.test_mathematically_correct(self, op, data_m, rows, out_type)",class_method,,,,"Class method: [pytest.mark.parametrize('rows', [2, 5])] TestColumnUnstack.test_mathematically_correct(self, op, data_m, rows, out_type)",qutip,qutip,v5.0.4,,,,,,,TestColumnUnstack,test_mathematically_correct,"(self, op, data_m, rows, out_type)",,,,,,,,,"pytest.mark.parametrize('rows', [2, 5])"
qutip_qutip_v5.0.4,test_reshape.py,python,"TestColumnUnstack.test_incorrect_shape_raises(self, op, data_m)",class_method,,,,"Class method: TestColumnUnstack.test_incorrect_shape_raises(self, op, data_m)",qutip,qutip,v5.0.4,,,,,,,TestColumnUnstack,test_incorrect_shape_raises,"(self, op, data_m)",,,,,,,,,
qutip_qutip_v5.0.4,test_reshape.py,python,"[pytest.mark.parametrize('rows', [-1, 0, 3], ids=['negative', 'zero',
                                                      'invalid'])] TestColumnUnstack.test_incorrect_rows_raises(self, op, data_m, out_type, rows)",class_method,,,,"Class method: [pytest.mark.parametrize('rows', [-1, 0, 3], ids=['negative', 'zero',
                                                      'invalid'])] TestColumnUnstack.test_incorrect_rows_raises(self, op, data_m, out_type, rows)",qutip,qutip,v5.0.4,,,,,,,TestColumnUnstack,test_incorrect_rows_raises,"(self, op, data_m, out_type, rows)",,,,,,,,,"pytest.mark.parametrize('rows', [-1, 0, 3], ids=['negative', 'zero',
                                                      'invalid'])"
qutip_qutip_v5.0.4,test_reshape.py,python,"TestColumnUnstack.generate_incorrect_rows_raises(self, metafunc)",class_method,,,,"Class method: TestColumnUnstack.generate_incorrect_rows_raises(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,TestColumnUnstack,generate_incorrect_rows_raises,"(self, metafunc)",,,,,,,,,
qutip_qutip_v5.0.4,test_reshape.py,python,"TestReshape.op_numpy(self, matrix, rows, columns)",class_method,,,,"Class method: TestReshape.op_numpy(self, matrix, rows, columns)",qutip,qutip,v5.0.4,,,,,,,TestReshape,op_numpy,"(self, matrix, rows, columns)",,,,,,,,,
qutip_qutip_v5.0.4,test_reshape.py,python,"[pytest.mark.parametrize('rows, columns', [(5, 20), (10, 10)])] TestReshape.test_mathematically_correct(self, op, data_m, rows, columns, out_type)",class_method,,,,"Class method: [pytest.mark.parametrize('rows, columns', [(5, 20), (10, 10)])] TestReshape.test_mathematically_correct(self, op, data_m, rows, columns, out_type)",qutip,qutip,v5.0.4,,,,,,,TestReshape,test_mathematically_correct,"(self, op, data_m, rows, columns, out_type)",,,,,,,,,"pytest.mark.parametrize('rows, columns', [(5, 20), (10, 10)])"
qutip_qutip_v5.0.4,test_reshape.py,python,"[pytest.mark.parametrize('rows, columns', [(-2, -50), (-50, -2), (3, 10)],
                             ids=[""negative1"", ""negative2"", ""invalid""])] TestReshape.test_incorrect_rows_raises(self, op, data_m, out_type, rows, columns)",class_method,,,,"Class method: [pytest.mark.parametrize('rows, columns', [(-2, -50), (-50, -2), (3, 10)],
                             ids=[""negative1"", ""negative2"", ""invalid""])] TestReshape.test_incorrect_rows_raises(self, op, data_m, out_type, rows, columns)",qutip,qutip,v5.0.4,,,,,,,TestReshape,test_incorrect_rows_raises,"(self, op, data_m, out_type, rows, columns)",,,,,,,,,"pytest.mark.parametrize('rows, columns', [(-2, -50), (-50, -2), (3, 10)],
                             ids=[""negative1"", ""negative2"", ""invalid""])"
qutip_qutip_v5.0.4,test_reshape.py,python,"TestReshape.generate_incorrect_rows_raises(self, metafunc)",class_method,,,,"Class method: TestReshape.generate_incorrect_rows_raises(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,TestReshape,generate_incorrect_rows_raises,"(self, metafunc)",,,,,,,,,
qutip_qutip_v5.0.4,test_reshape.py,python,TestSplitColumns(UnaryOpMixin),class,,,,Class: TestSplitColumns(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestSplitColumns,,,,,,,,,(UnaryOpMixin),,
qutip_qutip_v5.0.4,test_reshape.py,python,TestColumnStack(UnaryOpMixin),class,,,,Class: TestColumnStack(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestColumnStack,,,,,,,,,(UnaryOpMixin),,
qutip_qutip_v5.0.4,test_reshape.py,python,TestColumnUnstack(UnaryOpMixin),class,,,,Class: TestColumnUnstack(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestColumnUnstack,,,,,,,,,(UnaryOpMixin),,
qutip_qutip_v5.0.4,test_reshape.py,python,TestReshape(UnaryOpMixin),class,,,,Class: TestReshape(UnaryOpMixin),qutip,qutip,v5.0.4,,,,,,,TestReshape,,,,,,,,,(UnaryOpMixin),,
qutip_qutip_v5.0.4,test_reshape.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_reshape.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_reshape.py,python,data from qutip,import,,,,Import: data from qutip,qutip,qutip,v5.0.4,from qutip import data,qutip,data,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_reshape.py,python,CSR from qutip.core.data,local_import,,,,Import: CSR from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",qutip.core.data,CSR,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_reshape.py,python,Dense from qutip.core.data,local_import,,,,Import: Dense from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",qutip.core.data,Dense,,,qutip.core.data,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_reshape.py,python,Dia from qutip.core.data,local_import,,,,Import: Dia from qutip.core.data,qutip,qutip,v5.0.4,"from qutip.core.data import CSR, Dense, Dia",qutip.core.data,Dia,,,qutip.core.data,,,,,,,,,,,,
,test_reshape.py,python,,,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_reshape.py,python,,,,,,Directory: qutip\tests\core\data\test_reshape.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: qutip\tests\core\data,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: qutip\tests\core\data\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: qutip\tests\piqs,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: qutip\tests\piqs\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brmesolve.py,python,pauli_spin_operators(),function,,,,Function: pauli_spin_operators(),qutip,qutip,v5.0.4,,,,pauli_spin_operators,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brmesolve.py,python,"_harmonic_oscillator_spectrum_frequency(n_th, w0, kappa)",function,,,,"Function: _harmonic_oscillator_spectrum_frequency(n_th, w0, kappa)",qutip,qutip,v5.0.4,,,,_harmonic_oscillator_spectrum_frequency,"(n_th, w0, kappa)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brmesolve.py,python,"_harmonic_oscillator_c_ops(n_th, kappa, dimension)",function,,,,"Function: _harmonic_oscillator_c_ops(n_th, kappa, dimension)",qutip,qutip,v5.0.4,,,,_harmonic_oscillator_c_ops,"(n_th, kappa, dimension)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brmesolve.py,python,test_jaynes_cummings_zero_temperature_spectral_callable(),function,,,,Function: test_jaynes_cummings_zero_temperature_spectral_callable(),qutip,qutip,v5.0.4,,,,test_jaynes_cummings_zero_temperature_spectral_callable,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brmesolve.py,python,test_tensor_system(),function,,,,Function: test_tensor_system(),qutip,qutip,v5.0.4,,,,test_tensor_system,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brmesolve.py,python,test_solver_accepts_list_hamiltonian(),function,,,,Function: test_solver_accepts_list_hamiltonian(),qutip,qutip,v5.0.4,,,,test_solver_accepts_list_hamiltonian,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brmesolve.py,python,test_jaynes_cummings_zero_temperature_spectral_str(),function,,,,Function: test_jaynes_cummings_zero_temperature_spectral_str(),qutip,qutip,v5.0.4,,,,test_jaynes_cummings_zero_temperature_spectral_str,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brmesolve.py,python,"_mixed_string(kappa, _)",function,,,,"Function: _mixed_string(kappa, _)",qutip,qutip,v5.0.4,,,,_mixed_string,"(kappa, _)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brmesolve.py,python,"_separate_strings(kappa, _)",function,,,,"Function: _separate_strings(kappa, _)",qutip,qutip,v5.0.4,,,,_separate_strings,"(kappa, _)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brmesolve.py,python,"_string_w_interpolating_t(kappa, times)",function,,,,"Function: _string_w_interpolating_t(kappa, times)",qutip,qutip,v5.0.4,,,,_string_w_interpolating_t,"(kappa, times)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brmesolve.py,python,test_time_dependent_spline_in_c_ops(),function,,,,Function: test_time_dependent_spline_in_c_ops(),qutip,qutip,v5.0.4,,,,test_time_dependent_spline_in_c_ops,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brmesolve.py,python,test_feedback(),function,,,,Function: test_feedback(),qutip,qutip,v5.0.4,,,,test_feedback,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brmesolve.py,python,_simple_qubit_gamma = 0.25,constant,_simple_qubit_gamma = 0.25,_simple_qubit_gamma,0.25,Constant: _simple_qubit_gamma = 0.25,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brmesolve.py,python,"coeff = qutip.coefficient(lambda t, w: _simple_qubit_gamma * (w >= 0),
                          args={'w':0})",constant,"coeff = qutip.coefficient(lambda t, w: _simple_qubit_gamma * (w >= 0),
                          args={'w':0})",coeff,"qutip.coefficient(lambda t, w: _simple_qubit_gamma * (w >= 0),
                          args={'w':0})","Constant: coeff = qutip.coefficient(lambda t, w: _simple_qubit_gamma * (w >= 0),
                          args={'w':0})",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brmesolve.py,python,_m_c_op = np.sqrt(_simple_qubit_gamma) * qutip.sigmam(),constant,_m_c_op = np.sqrt(_simple_qubit_gamma) * qutip.sigmam(),_m_c_op,np.sqrt(_simple_qubit_gamma) * qutip.sigmam(),Constant: _m_c_op = np.sqrt(_simple_qubit_gamma) * qutip.sigmam(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brmesolve.py,python,_z_c_op = np.sqrt(_simple_qubit_gamma) * qutip.sigmaz(),constant,_z_c_op = np.sqrt(_simple_qubit_gamma) * qutip.sigmaz(),_z_c_op,np.sqrt(_simple_qubit_gamma) * qutip.sigmaz(),Constant: _z_c_op = np.sqrt(_simple_qubit_gamma) * qutip.sigmaz(),qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brmesolve.py,python,"_x_a_op = [qutip.sigmax(), coeff]",constant,"_x_a_op = [qutip.sigmax(), coeff]",_x_a_op,"[qutip.sigmax(), coeff]","Constant: _x_a_op = [qutip.sigmax(), coeff]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brmesolve.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brmesolve.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brmesolve.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_brmesolve.py,python,brmesolve from qutip.solver.brmesolve,local_import,,,,Import: brmesolve from qutip.solver.brmesolve,qutip,qutip,v5.0.4,from qutip.solver.brmesolve import brmesolve,qutip.solver.brmesolve,brmesolve,,,qutip.solver.brmesolve,,,,,,,,,,,,
,test_brmesolve.py,python,,,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_brmesolve.py,python,,,,,,Directory: qutip\tests\solver\test_brmesolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,"TestTimeDependence.test_varying_coefficient_hamiltonian_2ls(self, dependence_2ls)",class_method,,,,"Class method: TestTimeDependence.test_varying_coefficient_hamiltonian_2ls(self, dependence_2ls)",qutip,qutip,v5.0.4,,,,,,,TestTimeDependence,test_varying_coefficient_hamiltonian_2ls,"(self, dependence_2ls)",,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,TestTimeDependence.test_hamiltonian_from_function_2ls(self),class_method,,,,Class method: TestTimeDependence.test_hamiltonian_from_function_2ls(self),qutip,qutip,v5.0.4,,,,,,,TestTimeDependence,test_hamiltonian_from_function_2ls,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,"[pytest.mark.slow] TestTimeDependence.test_varying_coefficient_hamiltonian_c_ops_2ls(self, dependence_2ls)",class_method,,,,"Class method: [pytest.mark.slow] TestTimeDependence.test_varying_coefficient_hamiltonian_c_ops_2ls(self, dependence_2ls)",qutip,qutip,v5.0.4,,,,,,,TestTimeDependence,test_varying_coefficient_hamiltonian_c_ops_2ls,"(self, dependence_2ls)",,,,,,,,,pytest.mark.slow
qutip_qutip_v5.0.4,test_correlation.py,python,"[pytest.mark.slow] TestTimeDependence.test_coefficient_c_ops_3ls(self, dependence_3ls)",class_method,,,,"Class method: [pytest.mark.slow] TestTimeDependence.test_coefficient_c_ops_3ls(self, dependence_3ls)",qutip,qutip,v5.0.4,,,,,,,TestTimeDependence,test_coefficient_c_ops_3ls,"(self, dependence_3ls)",,,,,,,,,pytest.mark.slow
qutip_qutip_v5.0.4,test_correlation.py,python,"[pytest.mark.parametrize(""dependence_3ls"", [
        pytest.param(_coefficient_string, id=""string""),
        pytest.param(_coefficient_function(_3ls_times, _3ls_args), id=""numpy""),
        pytest.param(_coefficient_function, id=""function""),
    ])] TestTimeDependence.test_coefficient_c_ops_3ls(self, dependence_3ls)",class_method,,,,"Class method: [pytest.mark.parametrize(""dependence_3ls"", [
        pytest.param(_coefficient_string, id=""string""),
        pytest.param(_coefficient_function(_3ls_times, _3ls_args), id=""numpy""),
        pytest.param(_coefficient_function, id=""function""),
    ])] TestTimeDependence.test_coefficient_c_ops_3ls(self, dependence_3ls)",qutip,qutip,v5.0.4,,,,,,,TestTimeDependence,test_coefficient_c_ops_3ls,"(self, dependence_3ls)",,,,,,,,,"pytest.mark.parametrize(""dependence_3ls"", [
        pytest.param(_coefficient_string, id=""string""),
        pytest.param(_coefficient_function(_3ls_times, _3ls_args), id=""numpy""),
        pytest.param(_coefficient_function, id=""function""),
    ])"
qutip_qutip_v5.0.4,test_correlation.py,python,TestTimeDependence,class,,,,Class: TestTimeDependence,qutip,qutip,v5.0.4,,,,,,,TestTimeDependence,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,_spectrum_wrapper(solver),function,,,,Function: _spectrum_wrapper(solver),qutip,qutip,v5.0.4,,,,_spectrum_wrapper,(solver),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,"_spectrum_fft(H, c_ops, a, b)",function,,,,"Function: _spectrum_fft(H, c_ops, a, b)",qutip,qutip,v5.0.4,,,,_spectrum_fft,"(H, c_ops, a, b)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,"_trapz_2d(z, xy)",function,,,,"Function: _trapz_2d(z, xy)",qutip,qutip,v5.0.4,,,,_trapz_2d,"(z, xy)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,"_n_correlation(times, n)",function,,,,"Function: _n_correlation(times, n)",qutip,qutip,v5.0.4,,,,_n_correlation,"(times, n)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,"_coefficient_function(t, args)",function,,,,"Function: _coefficient_function(t, args)",qutip,qutip,v5.0.4,,,,_coefficient_function,"(t, args)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,"_h_qobj_function(t, args)",function,,,,"Function: _h_qobj_function(t, args)",qutip,qutip,v5.0.4,,,,_h_qobj_function,"(t, args)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,"_2ls_g2_0(H, c_ops)",function,,,,"Function: _2ls_g2_0(H, c_ops)",qutip,qutip,v5.0.4,,,,_2ls_g2_0,"(H, c_ops)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,_step(t),function,,,,Function: _step(t),qutip,qutip,v5.0.4,,,,_step,(t),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,test_hamiltonian_order_unimportant(),function,,,,Function: test_hamiltonian_order_unimportant(),qutip,qutip,v5.0.4,,,,test_hamiltonian_order_unimportant,(),,,,,,,,,"# Testing for regression on issue 1048.",,,,
qutip_qutip_v5.0.4,test_correlation.py,python,test_correlation_timedependant_op(),function,,,,Function: test_correlation_timedependant_op(),qutip,qutip,v5.0.4,,,,test_correlation_timedependant_op,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,test_alternative_solver(),function,,,,Function: test_alternative_solver(),qutip,qutip,v5.0.4,,,,test_alternative_solver,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,test_G1(),function,,,,Function: test_G1(),qutip,qutip,v5.0.4,,,,test_G1,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,test_G2(),function,,,,Function: test_G2(),qutip,qutip,v5.0.4,,,,test_G2,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,"pytestmark = [pytest.mark.usefixtures(""in_temporary_directory"")]",constant,"pytestmark = [pytest.mark.usefixtures(""in_temporary_directory"")]",pytestmark,"[pytest.mark.usefixtures(""in_temporary_directory"")]","Constant: pytestmark = [pytest.mark.usefixtures(""in_temporary_directory"")]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,_equivalence_dimension = 15,constant,_equivalence_dimension = 15,_equivalence_dimension,15,Constant: _equivalence_dimension = 15,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,"_equivalence_fock = qutip.fock(_equivalence_dimension, 1)",constant,"_equivalence_fock = qutip.fock(_equivalence_dimension, 1)",_equivalence_fock,"qutip.fock(_equivalence_dimension, 1)","Constant: _equivalence_fock = qutip.fock(_equivalence_dimension, 1)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,"_equivalence_coherent = qutip.coherent_dm(_equivalence_dimension, 2)",constant,"_equivalence_coherent = qutip.coherent_dm(_equivalence_dimension, 2)",_equivalence_coherent,"qutip.coherent_dm(_equivalence_dimension, 2)","Constant: _equivalence_coherent = qutip.coherent_dm(_equivalence_dimension, 2)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,"_coefficient_string = ""exp(-(t-t_off)**2 / (2 * tp*tp))""",constant,"_coefficient_string = ""exp(-(t-t_off)**2 / (2 * tp*tp))""",_coefficient_string,"""exp(-(t-t_off)**2 / (2 * tp*tp))""","Constant: _coefficient_string = ""exp(-(t-t_off)**2 / (2 * tp*tp))""",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,"_2ls_args = {'H0': 2*qutip.sigmax(), 't_off': 1, 'tp': 0.5}",constant,"_2ls_args = {'H0': 2*qutip.sigmax(), 't_off': 1, 'tp': 0.5}",_2ls_args,"{'H0': 2*qutip.sigmax(), 't_off': 1, 'tp': 0.5}","Constant: _2ls_args = {'H0': 2*qutip.sigmax(), 't_off': 1, 'tp': 0.5}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,"_2ls_times = np.linspace(0, 5, 51)",constant,"_2ls_times = np.linspace(0, 5, 51)",_2ls_times,"np.linspace(0, 5, 51)","Constant: _2ls_times = np.linspace(0, 5, 51)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,"_3ls_args = {'t_off': 2, 'tp': 1}",constant,"_3ls_args = {'t_off': 2, 'tp': 1}",_3ls_args,"{'t_off': 2, 'tp': 1}","Constant: _3ls_args = {'t_off': 2, 'tp': 1}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,"_3ls_times = np.linspace(0, 6, 20)",constant,"_3ls_times = np.linspace(0, 6, 20)",_3ls_times,"np.linspace(0, 6, 20)","Constant: _3ls_times = np.linspace(0, 6, 20)",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,functools,import,,,,Import: functools,qutip,qutip,v5.0.4,import functools,,functools,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,product from itertools,import,,,,Import: product from itertools,qutip,qutip,v5.0.4,from itertools import product,itertools,product,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_correlation.py,python,trapezoid from scipy.integrate,local_import,,,,Import: trapezoid from scipy.integrate,qutip,qutip,v5.0.4,from scipy.integrate import trapezoid,scipy.integrate,trapezoid,,,scipy.integrate,,,,,,,,,,,,
,test_correlation.py,python,,,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_correlation.py,python,,,,,,Directory: qutip\tests\solver\test_correlation.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_countstat.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_countstat.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_countstat.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
,test_countstat.py,python,,,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_countstat.py,python,,,,,,Directory: qutip\tests\solver\test_countstat.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,TestFloquet.testFloquetBasis(self),class_method,,,,Class method: TestFloquet.testFloquetBasis(self),qutip,qutip,v5.0.4,,,,,,,TestFloquet,testFloquetBasis,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,TestFloquet.testFloquetUnitary(self),class_method,,,,Class method: TestFloquet.testFloquetUnitary(self),qutip,qutip,v5.0.4,,,,,,,TestFloquet,testFloquetUnitary,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,TestFloquet.testFloquetMasterEquation1(self),class_method,,,,Class method: TestFloquet.testFloquetMasterEquation1(self),qutip,qutip,v5.0.4,,,,,,,TestFloquet,testFloquetMasterEquation1,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,TestFloquet.testFloquetMasterEquation2(self),class_method,,,,Class method: TestFloquet.testFloquetMasterEquation2(self),qutip,qutip,v5.0.4,,,,,,,TestFloquet,testFloquetMasterEquation2,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,"[pytest.mark.parametrize(""kmax"", [5, 25, 100])] TestFloquet.testFloquetMasterEquation3(self, kmax)",class_method,,,,"Class method: [pytest.mark.parametrize(""kmax"", [5, 25, 100])] TestFloquet.testFloquetMasterEquation3(self, kmax)",qutip,qutip,v5.0.4,,,,,,,TestFloquet,testFloquetMasterEquation3,"(self, kmax)",,,,,,,,,"pytest.mark.parametrize(""kmax"", [5, 25, 100])"
qutip_qutip_v5.0.4,test_floquet.py,python,TestFloquet.testFloquetMasterEquation_multiple_coupling(self),class_method,,,,Class method: TestFloquet.testFloquetMasterEquation_multiple_coupling(self),qutip,qutip,v5.0.4,,,,,,,TestFloquet,testFloquetMasterEquation_multiple_coupling,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,TestFloquet.testFloquetRates(self),class_method,,,,Class method: TestFloquet.testFloquetRates(self),qutip,qutip,v5.0.4,,,,,,,TestFloquet,testFloquetRates,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,TestFloquet,class,,,,Class: TestFloquet,qutip,qutip,v5.0.4,,,,,,,TestFloquet,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,"_convert_c_ops(c_op_fmmesolve, noise_spectrum, vp, ep)",function,,,,"Function: _convert_c_ops(c_op_fmmesolve, noise_spectrum, vp, ep)",qutip,qutip,v5.0.4,,,,_convert_c_ops,"(c_op_fmmesolve, noise_spectrum, vp, ep)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,test_fsesolve_fallback(),function,,,,Function: test_fsesolve_fallback(),qutip,qutip,v5.0.4,,,,test_fsesolve_fallback,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,sigmax from qutip,import,,,,Import: sigmax from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",qutip,sigmax,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,sigmay from qutip,import,,,,Import: sigmay from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",qutip,sigmay,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,sigmaz from qutip,import,,,,Import: sigmaz from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",qutip,sigmaz,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,sigmap from qutip,import,,,,Import: sigmap from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",qutip,sigmap,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,sigmam from qutip,import,,,,Import: sigmam from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",qutip,sigmam,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,rand_ket from qutip,import,,,,Import: rand_ket from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",qutip,rand_ket,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,num from qutip,import,,,,Import: num from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",qutip,num,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,destroy from qutip,import,,,,Import: destroy from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",qutip,destroy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,mesolve from qutip,import,,,,Import: mesolve from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",qutip,mesolve,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,expect from qutip,import,,,,Import: expect from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",qutip,expect,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,sesolve from qutip,import,,,,Import: sesolve from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",qutip,sesolve,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,Qobj from qutip,import,,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",qutip,Qobj,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,QobjEvo from qutip,import,,,,Import: QobjEvo from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",qutip,QobjEvo,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,coefficient from qutip,import,,,,Import: coefficient from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz,  sigmap, sigmam,
    rand_ket, num, destroy,
    mesolve, expect, sesolve,
    Qobj, QobjEvo, coefficient
 )",qutip,coefficient,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,FloquetBasis from qutip.solver.floquet,local_import,,,,Import: FloquetBasis from qutip.solver.floquet,qutip,qutip,v5.0.4,"from qutip.solver.floquet import (
    FloquetBasis, floquet_tensor, fmmesolve, FMESolver,
    _floquet_delta_tensor, _floquet_X_matrices, fsesolve
)",qutip.solver.floquet,FloquetBasis,,,qutip.solver.floquet,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,floquet_tensor from qutip.solver.floquet,local_import,,,,Import: floquet_tensor from qutip.solver.floquet,qutip,qutip,v5.0.4,"from qutip.solver.floquet import (
    FloquetBasis, floquet_tensor, fmmesolve, FMESolver,
    _floquet_delta_tensor, _floquet_X_matrices, fsesolve
)",qutip.solver.floquet,floquet_tensor,,,qutip.solver.floquet,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,fmmesolve from qutip.solver.floquet,local_import,,,,Import: fmmesolve from qutip.solver.floquet,qutip,qutip,v5.0.4,"from qutip.solver.floquet import (
    FloquetBasis, floquet_tensor, fmmesolve, FMESolver,
    _floquet_delta_tensor, _floquet_X_matrices, fsesolve
)",qutip.solver.floquet,fmmesolve,,,qutip.solver.floquet,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,FMESolver from qutip.solver.floquet,local_import,,,,Import: FMESolver from qutip.solver.floquet,qutip,qutip,v5.0.4,"from qutip.solver.floquet import (
    FloquetBasis, floquet_tensor, fmmesolve, FMESolver,
    _floquet_delta_tensor, _floquet_X_matrices, fsesolve
)",qutip.solver.floquet,FMESolver,,,qutip.solver.floquet,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,_floquet_delta_tensor from qutip.solver.floquet,local_import,,,,Import: _floquet_delta_tensor from qutip.solver.floquet,qutip,qutip,v5.0.4,"from qutip.solver.floquet import (
    FloquetBasis, floquet_tensor, fmmesolve, FMESolver,
    _floquet_delta_tensor, _floquet_X_matrices, fsesolve
)",qutip.solver.floquet,_floquet_delta_tensor,,,qutip.solver.floquet,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,_floquet_X_matrices from qutip.solver.floquet,local_import,,,,Import: _floquet_X_matrices from qutip.solver.floquet,qutip,qutip,v5.0.4,"from qutip.solver.floquet import (
    FloquetBasis, floquet_tensor, fmmesolve, FMESolver,
    _floquet_delta_tensor, _floquet_X_matrices, fsesolve
)",qutip.solver.floquet,_floquet_X_matrices,,,qutip.solver.floquet,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_floquet.py,python,fsesolve from qutip.solver.floquet,local_import,,,,Import: fsesolve from qutip.solver.floquet,qutip,qutip,v5.0.4,"from qutip.solver.floquet import (
    FloquetBasis, floquet_tensor, fmmesolve, FMESolver,
    _floquet_delta_tensor, _floquet_X_matrices, fsesolve
)",qutip.solver.floquet,fsesolve,,,qutip.solver.floquet,,,,,,,,,,,,
,test_floquet.py,python,,,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_floquet.py,python,,,,,,Directory: qutip\tests\solver\test_floquet.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,[instance] callable_qobj.oper = oper,class_field,,,,Class field: [instance] callable_qobj.oper = oper,qutip,qutip,v5.0.4,,,,,,,callable_qobj,__init__,"(self, oper, coeff=None)",self.oper = oper,self.oper = oper,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,[instance] callable_qobj.coeff = coeff,class_field,,,,Class field: [instance] callable_qobj.coeff = coeff,qutip,qutip,v5.0.4,,,,,,,callable_qobj,__init__,"(self, oper, coeff=None)",self.coeff = coeff,self.coeff = coeff,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,StatesAndExpectOutputCase.size = 10,class_field,,,,Class field: StatesAndExpectOutputCase.size = 10,qutip,qutip,v5.0.4,,,,,,,StatesAndExpectOutputCase,,,size = 10,,,,,size,,10,
qutip_qutip_v5.0.4,test_mcsolve.py,python,StatesAndExpectOutputCase.h = qutip.num(size),class_field,,,,Class field: StatesAndExpectOutputCase.h = qutip.num(size),qutip,qutip,v5.0.4,,,,,,,StatesAndExpectOutputCase,,,h = qutip.num(size),,,,,h,,qutip.num(size),
qutip_qutip_v5.0.4,test_mcsolve.py,python,"StatesAndExpectOutputCase.state = qutip.basis(size, size-1)",class_field,,,,"Class field: StatesAndExpectOutputCase.state = qutip.basis(size, size-1)",qutip,qutip,v5.0.4,,,,,,,StatesAndExpectOutputCase,,,"state = qutip.basis(size, size-1)",,,,,state,,"qutip.basis(size, size-1)",
qutip_qutip_v5.0.4,test_mcsolve.py,python,"StatesAndExpectOutputCase.times = np.linspace(0, 1, 101)",class_field,,,,"Class field: StatesAndExpectOutputCase.times = np.linspace(0, 1, 101)",qutip,qutip,v5.0.4,,,,,,,StatesAndExpectOutputCase,,,"times = np.linspace(0, 1, 101)",,,,,times,,"np.linspace(0, 1, 101)",
qutip_qutip_v5.0.4,test_mcsolve.py,python,StatesAndExpectOutputCase.e_ops = [qutip.num(size)],class_field,,,,Class field: StatesAndExpectOutputCase.e_ops = [qutip.num(size)],qutip,qutip,v5.0.4,,,,,,,StatesAndExpectOutputCase,,,e_ops = [qutip.num(size)],,,,,e_ops,,[qutip.num(size)],
qutip_qutip_v5.0.4,test_mcsolve.py,python,StatesAndExpectOutputCase.ntraj = 2000,class_field,,,,Class field: StatesAndExpectOutputCase.ntraj = 2000,qutip,qutip,v5.0.4,,,,,,,StatesAndExpectOutputCase,,,ntraj = 2000,,,,,ntraj,,2000,
qutip_qutip_v5.0.4,test_mcsolve.py,python,"TestSeeds.sizes = [6, 6, 6]",class_field,,,,"Class field: TestSeeds.sizes = [6, 6, 6]",qutip,qutip,v5.0.4,,,,,,,TestSeeds,,,"sizes = [6, 6, 6]",,,,,sizes,,"[6, 6, 6]",
qutip_qutip_v5.0.4,test_mcsolve.py,python,"TestSeeds.dampings = [0.1, 0.4, 0.1]",class_field,,,,"Class field: TestSeeds.dampings = [0.1, 0.4, 0.1]",qutip,qutip,v5.0.4,,,,,,,TestSeeds,,,"dampings = [0.1, 0.4, 0.1]",,,,,dampings,,"[0.1, 0.4, 0.1]",
qutip_qutip_v5.0.4,test_mcsolve.py,python,TestSeeds.ntraj = 25,class_field,,,,Class field: TestSeeds.ntraj = 25,qutip,qutip,v5.0.4,,,,,,,TestSeeds,,,ntraj = 25,,,,,ntraj,,25,
qutip_qutip_v5.0.4,test_mcsolve.py,python,TestSeeds.a = [qutip.destroy(size) for size in sizes],class_field,,,,Class field: TestSeeds.a = [qutip.destroy(size) for size in sizes],qutip,qutip,v5.0.4,,,,,,,TestSeeds,,,a = [qutip.destroy(size) for size in sizes],,,,,a,,[qutip.destroy(size) for size in sizes],
qutip_qutip_v5.0.4,test_mcsolve.py,python,"TestSeeds.H = 1j * (qutip.tensor(a[0], a[1].dag(), a[2].dag())
              - qutip.tensor(a[0].dag(), a[1], a[2]))",class_field,,,,"Class field: TestSeeds.H = 1j * (qutip.tensor(a[0], a[1].dag(), a[2].dag())
              - qutip.tensor(a[0].dag(), a[1], a[2]))",qutip,qutip,v5.0.4,,,,,,,TestSeeds,,,"H = 1j * (qutip.tensor(a[0], a[1].dag(), a[2].dag())
              - qutip.tensor(a[0].dag(), a[1], a[2]))",,,,,H,,"1j * (qutip.tensor(a[0], a[1].dag(), a[2].dag())
              - qutip.tensor(a[0].dag(), a[1], a[2]))",
qutip_qutip_v5.0.4,test_mcsolve.py,python,"TestSeeds.state = qutip.tensor(qutip.coherent(sizes[0], np.sqrt(2)),
                         qutip.basis(sizes[1:], [0, 0]))",class_field,,,,"Class field: TestSeeds.state = qutip.tensor(qutip.coherent(sizes[0], np.sqrt(2)),
                         qutip.basis(sizes[1:], [0, 0]))",qutip,qutip,v5.0.4,,,,,,,TestSeeds,,,"state = qutip.tensor(qutip.coherent(sizes[0], np.sqrt(2)),
                         qutip.basis(sizes[1:], [0, 0]))",,,,,state,,"qutip.tensor(qutip.coherent(sizes[0], np.sqrt(2)),
                         qutip.basis(sizes[1:], [0, 0]))",
qutip_qutip_v5.0.4,test_mcsolve.py,python,"TestSeeds.times = np.linspace(0, 10, 2)",class_field,,,,"Class field: TestSeeds.times = np.linspace(0, 10, 2)",qutip,qutip,v5.0.4,,,,,,,TestSeeds,,,"times = np.linspace(0, 10, 2)",,,,,times,,"np.linspace(0, 10, 2)",
qutip_qutip_v5.0.4,test_mcsolve.py,python,"TestSeeds.c_ops = [
        np.sqrt(2*dampings[0]) * qutip.tensor(a[0], qutip.qeye(sizes[1:])),
        (np.sqrt(2*dampings[1])
         * qutip.tensor(qutip.qeye(sizes[0]), a[1], qutip.qeye(sizes[2]))),
        np.sqrt(2*dampings[2]) * qutip.tensor(qutip.qeye(sizes[:2]), a[2]),
    ]",class_field,,,,"Class field: TestSeeds.c_ops = [
        np.sqrt(2*dampings[0]) * qutip.tensor(a[0], qutip.qeye(sizes[1:])),
        (np.sqrt(2*dampings[1])
         * qutip.tensor(qutip.qeye(sizes[0]), a[1], qutip.qeye(sizes[2]))),
        np.sqrt(2*dampings[2]) * qutip.tensor(qutip.qeye(sizes[:2]), a[2]),
    ]",qutip,qutip,v5.0.4,,,,,,,TestSeeds,,,"c_ops = [
        np.sqrt(2*dampings[0]) * qutip.tensor(a[0], qutip.qeye(sizes[1:])),
        (np.sqrt(2*dampings[1])
         * qutip.tensor(qutip.qeye(sizes[0]), a[1], qutip.qeye(sizes[2]))),
        np.sqrt(2*dampings[2]) * qutip.tensor(qutip.qeye(sizes[:2]), a[2]),
    ]",,,,,c_ops,,"[
        np.sqrt(2*dampings[0]) * qutip.tensor(a[0], qutip.qeye(sizes[1:])),
        (np.sqrt(2*dampings[1])
         * qutip.tensor(qutip.qeye(sizes[0]), a[1], qutip.qeye(sizes[2]))),
        np.sqrt(2*dampings[2]) * qutip.tensor(qutip.qeye(sizes[:2]), a[2]),
    ]",
qutip_qutip_v5.0.4,test_mcsolve.py,python,"callable_qobj.__init__(self, oper, coeff=None)",class_method,,,,"Class method: callable_qobj.__init__(self, oper, coeff=None)",qutip,qutip,v5.0.4,,,,,,,callable_qobj,__init__,"(self, oper, coeff=None)",,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,"callable_qobj.__call__(self, t, args)",class_method,,,,"Class method: callable_qobj.__call__(self, t, args)",qutip,qutip,v5.0.4,,,,,,,callable_qobj,__call__,"(self, t, args)",,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,"StatesAndExpectOutputCase._assert_states(self, result, expected, tol)",class_method,,,,"Class method: StatesAndExpectOutputCase._assert_states(self, result, expected, tol)",qutip,qutip,v5.0.4,,,,,,,StatesAndExpectOutputCase,_assert_states,"(self, result, expected, tol)",,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,"StatesAndExpectOutputCase._assert_expect(self, result, expected, tol)",class_method,,,,"Class method: StatesAndExpectOutputCase._assert_expect(self, result, expected, tol)",qutip,qutip,v5.0.4,,,,,,,StatesAndExpectOutputCase,_assert_expect,"(self, result, expected, tol)",,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,"[pytest.mark.parametrize(""improved_sampling"", [True, False])] StatesAndExpectOutputCase.test_states_and_expect(self, hamiltonian, args, c_ops, expected, tol,
                               improved_sampling)",class_method,,,,"Class method: [pytest.mark.parametrize(""improved_sampling"", [True, False])] StatesAndExpectOutputCase.test_states_and_expect(self, hamiltonian, args, c_ops, expected, tol,
                               improved_sampling)",qutip,qutip,v5.0.4,,,,,,,StatesAndExpectOutputCase,test_states_and_expect,"(self, hamiltonian, args, c_ops, expected, tol,
                               improved_sampling)",,,,,,,,,"pytest.mark.parametrize(""improved_sampling"", [True, False])"
qutip_qutip_v5.0.4,test_mcsolve.py,python,"TestNoCollapse.pytest_generate_tests(self, metafunc)",class_method,,,,"Class method: TestNoCollapse.pytest_generate_tests(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,TestNoCollapse,pytest_generate_tests,"(self, metafunc)",,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,"[pytest.mark.parametrize(""improved_sampling"", [True, False])] TestNoCollapse.test_states_only(self, hamiltonian, args, c_ops, expected, tol,
                         improved_sampling)",class_method,,,,"Class method: [pytest.mark.parametrize(""improved_sampling"", [True, False])] TestNoCollapse.test_states_only(self, hamiltonian, args, c_ops, expected, tol,
                         improved_sampling)",qutip,qutip,v5.0.4,,,,,,,TestNoCollapse,test_states_only,"(self, hamiltonian, args, c_ops, expected, tol,
                         improved_sampling)",,,,,,,,,"pytest.mark.parametrize(""improved_sampling"", [True, False])"
qutip_qutip_v5.0.4,test_mcsolve.py,python,"[pytest.mark.parametrize(""improved_sampling"", [True, False])] TestNoCollapse.test_expect_only(self, hamiltonian, args, c_ops, expected, tol,
                         improved_sampling)",class_method,,,,"Class method: [pytest.mark.parametrize(""improved_sampling"", [True, False])] TestNoCollapse.test_expect_only(self, hamiltonian, args, c_ops, expected, tol,
                         improved_sampling)",qutip,qutip,v5.0.4,,,,,,,TestNoCollapse,test_expect_only,"(self, hamiltonian, args, c_ops, expected, tol,
                         improved_sampling)",,,,,,,,,"pytest.mark.parametrize(""improved_sampling"", [True, False])"
qutip_qutip_v5.0.4,test_mcsolve.py,python,"TestConstantCollapse.pytest_generate_tests(self, metafunc)",class_method,,,,"Class method: TestConstantCollapse.pytest_generate_tests(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,TestConstantCollapse,pytest_generate_tests,"(self, metafunc)",,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,"TestTimeDependentCollapse.pytest_generate_tests(self, metafunc)",class_method,,,,"Class method: TestTimeDependentCollapse.pytest_generate_tests(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,TestTimeDependentCollapse,pytest_generate_tests,"(self, metafunc)",,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,"[pytest.mark.parametrize(""improved_sampling"", [True, False])] TestSeeds.test_seeds_can_be_reused(self, improved_sampling)",class_method,,,,"Class method: [pytest.mark.parametrize(""improved_sampling"", [True, False])] TestSeeds.test_seeds_can_be_reused(self, improved_sampling)",qutip,qutip,v5.0.4,,,,,,,TestSeeds,test_seeds_can_be_reused,"(self, improved_sampling)",,,,,,,,,"pytest.mark.parametrize(""improved_sampling"", [True, False])"
qutip_qutip_v5.0.4,test_mcsolve.py,python,"[pytest.mark.parametrize(""improved_sampling"", [True, False])] TestSeeds.test_seeds_are_not_reused_by_default(self, improved_sampling)",class_method,,,,"Class method: [pytest.mark.parametrize(""improved_sampling"", [True, False])] TestSeeds.test_seeds_are_not_reused_by_default(self, improved_sampling)",qutip,qutip,v5.0.4,,,,,,,TestSeeds,test_seeds_are_not_reused_by_default,"(self, improved_sampling)",,,,,,,,,"pytest.mark.parametrize(""improved_sampling"", [True, False])"
qutip_qutip_v5.0.4,test_mcsolve.py,python,"[pytest.mark.parametrize(""seed"", [1, np.random.SeedSequence(2)])] TestSeeds.test_seed_type(self, seed, improved_sampling)",class_method,,,,"Class method: [pytest.mark.parametrize(""seed"", [1, np.random.SeedSequence(2)])] TestSeeds.test_seed_type(self, seed, improved_sampling)",qutip,qutip,v5.0.4,,,,,,,TestSeeds,test_seed_type,"(self, seed, improved_sampling)",,,,,,,,,"pytest.mark.parametrize(""seed"", [1, np.random.SeedSequence(2)])"
qutip_qutip_v5.0.4,test_mcsolve.py,python,"[pytest.mark.parametrize(""improved_sampling"", [True, False])] TestSeeds.test_seed_type(self, seed, improved_sampling)",class_method,,,,"Class method: [pytest.mark.parametrize(""improved_sampling"", [True, False])] TestSeeds.test_seed_type(self, seed, improved_sampling)",qutip,qutip,v5.0.4,,,,,,,TestSeeds,test_seed_type,"(self, seed, improved_sampling)",,,,,,,,,"pytest.mark.parametrize(""improved_sampling"", [True, False])"
qutip_qutip_v5.0.4,test_mcsolve.py,python,"[pytest.mark.parametrize(""improved_sampling"", [True, False])] TestSeeds.test_bad_seed(self, improved_sampling)",class_method,,,,"Class method: [pytest.mark.parametrize(""improved_sampling"", [True, False])] TestSeeds.test_bad_seed(self, improved_sampling)",qutip,qutip,v5.0.4,,,,,,,TestSeeds,test_bad_seed,"(self, improved_sampling)",,,,,,,,,"pytest.mark.parametrize(""improved_sampling"", [True, False])"
qutip_qutip_v5.0.4,test_mcsolve.py,python,"[pytest.mark.parametrize(""improved_sampling"", [True, False])] TestSeeds.test_generator(self, improved_sampling)",class_method,,,,"Class method: [pytest.mark.parametrize(""improved_sampling"", [True, False])] TestSeeds.test_generator(self, improved_sampling)",qutip,qutip,v5.0.4,,,,,,,TestSeeds,test_generator,"(self, improved_sampling)",,,,,,,,,"pytest.mark.parametrize(""improved_sampling"", [True, False])"
qutip_qutip_v5.0.4,test_mcsolve.py,python,TestSeeds.test_stepping(self),class_method,,,,Class method: TestSeeds.test_stepping(self),qutip,qutip,v5.0.4,,,,,,,TestSeeds,test_stepping,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,callable_qobj,class,,,,Class: callable_qobj,qutip,qutip,v5.0.4,,,,,,,callable_qobj,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,StatesAndExpectOutputCase,class,,,,Class: StatesAndExpectOutputCase,qutip,qutip,v5.0.4,,,,,,,StatesAndExpectOutputCase,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,TestNoCollapse(StatesAndExpectOutputCase),class,,,,Class: TestNoCollapse(StatesAndExpectOutputCase),qutip,qutip,v5.0.4,,,,,,,TestNoCollapse,,,,,,,,,(StatesAndExpectOutputCase),,
qutip_qutip_v5.0.4,test_mcsolve.py,python,TestConstantCollapse(StatesAndExpectOutputCase),class,,,,Class: TestConstantCollapse(StatesAndExpectOutputCase),qutip,qutip,v5.0.4,,,,,,,TestConstantCollapse,,,,,,,,,(StatesAndExpectOutputCase),,
qutip_qutip_v5.0.4,test_mcsolve.py,python,TestTimeDependentCollapse(StatesAndExpectOutputCase),class,,,,Class: TestTimeDependentCollapse(StatesAndExpectOutputCase),qutip,qutip,v5.0.4,,,,,,,TestTimeDependentCollapse,,,,,,,,,(StatesAndExpectOutputCase),,
qutip_qutip_v5.0.4,test_mcsolve.py,python,TestSeeds,class,,,,Class: TestSeeds,qutip,qutip,v5.0.4,,,,,,,TestSeeds,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,"_return_constant(t, args)",function,,,,"Function: _return_constant(t, args)",qutip,qutip,v5.0.4,,,,_return_constant,"(t, args)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,"_return_decay(t, args)",function,,,,"Function: _return_decay(t, args)",qutip,qutip,v5.0.4,,,,_return_decay,"(t, args)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,test_stored_collapse_operators_and_times(),function,,,,Function: test_stored_collapse_operators_and_times(),qutip,qutip,v5.0.4,,,,test_stored_collapse_operators_and_times,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,test_MCSolver_run(),function,,,,Function: test_MCSolver_run(),qutip,qutip,v5.0.4,,,,test_MCSolver_run,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,test_MCSolver_stepping(),function,,,,Function: test_MCSolver_stepping(),qutip,qutip,v5.0.4,,,,test_MCSolver_stepping,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,"_coeff_collapse(t, A)",function,,,,"Function: _coeff_collapse(t, A)",qutip,qutip,v5.0.4,,,,_coeff_collapse,"(t, A)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,copy from copy,import,,,,Import: copy from copy,qutip,qutip,v5.0.4,from copy import copy,copy,copy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,mcsolve from qutip.solver.mcsolve,local_import,,,,Import: mcsolve from qutip.solver.mcsolve,qutip,qutip,v5.0.4,"from qutip.solver.mcsolve import mcsolve, MCSolver",qutip.solver.mcsolve,mcsolve,,,qutip.solver.mcsolve,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,MCSolver from qutip.solver.mcsolve,local_import,,,,Import: MCSolver from qutip.solver.mcsolve,qutip,qutip,v5.0.4,"from qutip.solver.mcsolve import mcsolve, MCSolver",qutip.solver.mcsolve,MCSolver,,,qutip.solver.mcsolve,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mcsolve.py,python,Solver from qutip.solver.solver_base,local_import,,,,Import: Solver from qutip.solver.solver_base,qutip,qutip,v5.0.4,from qutip.solver.solver_base import Solver,qutip.solver.solver_base,Solver,,,qutip.solver.solver_base,,,,,,,,,,,,
,test_mcsolve.py,python,,,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_mcsolve.py,python,,,,,,Directory: qutip\tests\solver\test_mcsolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,TestMESolveDecay.N = 10,class_field,,,,Class field: TestMESolveDecay.N = 10,qutip,qutip,v5.0.4,,,,,,,TestMESolveDecay,,,N = 10,,,,,N,,10,
qutip_qutip_v5.0.4,test_mesolve.py,python,TestMESolveDecay.a = qutip.destroy(N),class_field,,,,Class field: TestMESolveDecay.a = qutip.destroy(N),qutip,qutip,v5.0.4,,,,,,,TestMESolveDecay,,,a = qutip.destroy(N),,,,,a,,qutip.destroy(N),
qutip_qutip_v5.0.4,test_mesolve.py,python,TestMESolveDecay.kappa = 0.2,class_field,,,,Class field: TestMESolveDecay.kappa = 0.2,qutip,qutip,v5.0.4,,,,,,,TestMESolveDecay,,,kappa = 0.2,,,,,kappa,,0.2,
qutip_qutip_v5.0.4,test_mesolve.py,python,"TestMESolveDecay.tlist = np.linspace(0, 10, 201)",class_field,,,,"Class field: TestMESolveDecay.tlist = np.linspace(0, 10, 201)",qutip,qutip,v5.0.4,,,,,,,TestMESolveDecay,,,"tlist = np.linspace(0, 10, 201)",,,,,tlist,,"np.linspace(0, 10, 201)",
qutip_qutip_v5.0.4,test_mesolve.py,python,TestMESolveDecay.ada = a.dag() * a,class_field,,,,Class field: TestMESolveDecay.ada = a.dag() * a,qutip,qutip,v5.0.4,,,,,,,TestMESolveDecay,,,ada = a.dag() * a,,,,,ada,,a.dag() * a,
qutip_qutip_v5.0.4,test_mesolve.py,python,TestMESolveDecay.c_ops_1 = c_ops,class_field,,,,Class field: TestMESolveDecay.c_ops_1 = c_ops,qutip,qutip,v5.0.4,,,,,,,TestMESolveDecay,,,c_ops_1 = c_ops,,,,,c_ops_1,,c_ops,
qutip_qutip_v5.0.4,test_mesolve.py,python,"TestMESolveStepFuncCoeff.options = {""method"": ""dop853"", ""nsteps"": 1e8, ""progress_bar"": None}",class_field,,,,"Class field: TestMESolveStepFuncCoeff.options = {""method"": ""dop853"", ""nsteps"": 1e8, ""progress_bar"": None}",qutip,qutip,v5.0.4,,,,,,,TestMESolveStepFuncCoeff,,,"options = {""method"": ""dop853"", ""nsteps"": 1e8, ""progress_bar"": None}",,,,,options,,"{""method"": ""dop853"", ""nsteps"": 1e8, ""progress_bar"": None}",
qutip_qutip_v5.0.4,test_mesolve.py,python,"[pytest.fixture(params=[
        pytest.param([ada, lambda t, args: 1], id='Hlist_func'),
        pytest.param([ada, '1'], id='Hlist_str'),
        pytest.param([ada, np.ones_like(tlist)], id='Hlist_array'),
        pytest.param(qutip.QobjEvo([ada, '1']), id='HQobjEvo'),
        pytest.param(lambda t, args: qutip.create(10) * qutip.destroy(10),
                     id='func'),
    ])] TestMESolveDecay.H(self, request)",class_method,,,,"Class method: [pytest.fixture(params=[
        pytest.param([ada, lambda t, args: 1], id='Hlist_func'),
        pytest.param([ada, '1'], id='Hlist_str'),
        pytest.param([ada, np.ones_like(tlist)], id='Hlist_array'),
        pytest.param(qutip.QobjEvo([ada, '1']), id='HQobjEvo'),
        pytest.param(lambda t, args: qutip.create(10) * qutip.destroy(10),
                     id='func'),
    ])] TestMESolveDecay.H(self, request)",qutip,qutip,v5.0.4,,,,,,,TestMESolveDecay,H,"(self, request)",,,,,,,,,"pytest.fixture(params=[
        pytest.param([ada, lambda t, args: 1], id='Hlist_func'),
        pytest.param([ada, '1'], id='Hlist_str'),
        pytest.param([ada, np.ones_like(tlist)], id='Hlist_array'),
        pytest.param(qutip.QobjEvo([ada, '1']), id='HQobjEvo'),
        pytest.param(lambda t, args: qutip.create(10) * qutip.destroy(10),
                     id='func'),
    ])"
qutip_qutip_v5.0.4,test_mesolve.py,python,"[pytest.fixture(params=[
        pytest.param(np.sqrt(kappa) * a,
                     id='const'),
        pytest.param(lambda t, args: (np.sqrt(args['kappa'])
                                      * qutip.destroy(10)),
                     id='func'),
        pytest.param([a, lambda t, args: np.sqrt(args['kappa'])],
                     id='list_func'),
        pytest.param([a, 'sqrt(kappa)'],
                     id='list_str'),
        pytest.param([a, np.sqrt(kappa) * np.ones_like(tlist)],
                     id='list_array'),
        pytest.param(qutip.QobjEvo([a, 'sqrt(kappa)'], args={'kappa': kappa}),
                     id='QobjEvo'),
    ])] TestMESolveDecay.cte_c_ops(self, request)",class_method,,,,"Class method: [pytest.fixture(params=[
        pytest.param(np.sqrt(kappa) * a,
                     id='const'),
        pytest.param(lambda t, args: (np.sqrt(args['kappa'])
                                      * qutip.destroy(10)),
                     id='func'),
        pytest.param([a, lambda t, args: np.sqrt(args['kappa'])],
                     id='list_func'),
        pytest.param([a, 'sqrt(kappa)'],
                     id='list_str'),
        pytest.param([a, np.sqrt(kappa) * np.ones_like(tlist)],
                     id='list_array'),
        pytest.param(qutip.QobjEvo([a, 'sqrt(kappa)'], args={'kappa': kappa}),
                     id='QobjEvo'),
    ])] TestMESolveDecay.cte_c_ops(self, request)",qutip,qutip,v5.0.4,,,,,,,TestMESolveDecay,cte_c_ops,"(self, request)",,,,,,,,,"pytest.fixture(params=[
        pytest.param(np.sqrt(kappa) * a,
                     id='const'),
        pytest.param(lambda t, args: (np.sqrt(args['kappa'])
                                      * qutip.destroy(10)),
                     id='func'),
        pytest.param([a, lambda t, args: np.sqrt(args['kappa'])],
                     id='list_func'),
        pytest.param([a, 'sqrt(kappa)'],
                     id='list_str'),
        pytest.param([a, np.sqrt(kappa) * np.ones_like(tlist)],
                     id='list_array'),
        pytest.param(qutip.QobjEvo([a, 'sqrt(kappa)'], args={'kappa': kappa}),
                     id='QobjEvo'),
    ])"
qutip_qutip_v5.0.4,test_mesolve.py,python,"[pytest.fixture(params=[
        pytest.param([a, lambda t, args: np.sqrt(args['kappa'] * np.exp(-t))],
                  id='list_func'),
        pytest.param([a, 'sqrt(kappa * exp(-t))'],
                  id='list_str'),
        pytest.param([a, np.sqrt(kappa * np.exp(-tlist))],
                  id='list_array'),
        pytest.param(qutip.QobjEvo([a, 'sqrt(kappa * exp(-t))'],
                          args={'kappa': kappa}),
                  id='QobjEvo'),
        pytest.param(lambda t, args: (np.sqrt(args['kappa'] * np.exp(-t)) *
                                      qutip.destroy(10)),
                     id='func'),
    ])] TestMESolveDecay.c_ops(self, request)",class_method,,,,"Class method: [pytest.fixture(params=[
        pytest.param([a, lambda t, args: np.sqrt(args['kappa'] * np.exp(-t))],
                  id='list_func'),
        pytest.param([a, 'sqrt(kappa * exp(-t))'],
                  id='list_str'),
        pytest.param([a, np.sqrt(kappa * np.exp(-tlist))],
                  id='list_array'),
        pytest.param(qutip.QobjEvo([a, 'sqrt(kappa * exp(-t))'],
                          args={'kappa': kappa}),
                  id='QobjEvo'),
        pytest.param(lambda t, args: (np.sqrt(args['kappa'] * np.exp(-t)) *
                                      qutip.destroy(10)),
                     id='func'),
    ])] TestMESolveDecay.c_ops(self, request)",qutip,qutip,v5.0.4,,,,,,,TestMESolveDecay,c_ops,"(self, request)",,,,,,,,,"pytest.fixture(params=[
        pytest.param([a, lambda t, args: np.sqrt(args['kappa'] * np.exp(-t))],
                  id='list_func'),
        pytest.param([a, 'sqrt(kappa * exp(-t))'],
                  id='list_str'),
        pytest.param([a, np.sqrt(kappa * np.exp(-tlist))],
                  id='list_array'),
        pytest.param(qutip.QobjEvo([a, 'sqrt(kappa * exp(-t))'],
                          args={'kappa': kappa}),
                  id='QobjEvo'),
        pytest.param(lambda t, args: (np.sqrt(args['kappa'] * np.exp(-t)) *
                                      qutip.destroy(10)),
                     id='func'),
    ])"
qutip_qutip_v5.0.4,test_mesolve.py,python,"TestMESolveDecay.testME_CteDecay(self, cte_c_ops)",class_method,,,,"Class method: TestMESolveDecay.testME_CteDecay(self, cte_c_ops)",qutip,qutip,v5.0.4,,,,,,,TestMESolveDecay,testME_CteDecay,"(self, cte_c_ops)",,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,"[pytest.mark.parametrize('method',
                             all_ode_method, ids=all_ode_method)] TestMESolveDecay.testME_TDDecay(self, c_ops, method)",class_method,,,,"Class method: [pytest.mark.parametrize('method',
                             all_ode_method, ids=all_ode_method)] TestMESolveDecay.testME_TDDecay(self, c_ops, method)",qutip,qutip,v5.0.4,,,,,,,TestMESolveDecay,testME_TDDecay,"(self, c_ops, method)",,,,,,,,,"pytest.mark.parametrize('method',
                             all_ode_method, ids=all_ode_method)"
qutip_qutip_v5.0.4,test_mesolve.py,python,"TestMESolveDecay.testME_2TDDecay(self, c_ops, c_ops_1)",class_method,,,,"Class method: TestMESolveDecay.testME_2TDDecay(self, c_ops, c_ops_1)",qutip,qutip,v5.0.4,,,,,,,TestMESolveDecay,testME_2TDDecay,"(self, c_ops, c_ops_1)",,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,"TestMESolveDecay.testME_TDH_TDDecay(self, H, c_ops)",class_method,,,,"Class method: TestMESolveDecay.testME_TDH_TDDecay(self, H, c_ops)",qutip,qutip,v5.0.4,,,,,,,TestMESolveDecay,testME_TDH_TDDecay,"(self, H, c_ops)",,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,"TestMESolveDecay.testME_TDH_longTDDecay(self, H, c_ops)",class_method,,,,"Class method: TestMESolveDecay.testME_TDH_longTDDecay(self, H, c_ops)",qutip,qutip,v5.0.4,,,,,,,TestMESolveDecay,testME_TDH_longTDDecay,"(self, H, c_ops)",,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,"TestMESolveDecay.testME_TDDecayUnitary(self, c_ops)",class_method,,,,"Class method: TestMESolveDecay.testME_TDDecayUnitary(self, c_ops)",qutip,qutip,v5.0.4,,,,,,,TestMESolveDecay,testME_TDDecayUnitary,"(self, c_ops)",,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,"TestMESolveDecay.testME_TDDecayliouvillian(self, c_ops)",class_method,,,,"Class method: TestMESolveDecay.testME_TDDecayliouvillian(self, c_ops)",qutip,qutip,v5.0.4,,,,,,,TestMESolveDecay,testME_TDDecayliouvillian,"(self, c_ops)",,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,"[pytest.mark.parametrize(['state_type'], [
        pytest.param(""ket"", id=""ket""),
        pytest.param(""dm"", id=""dm""),
        pytest.param(""unitary"", id=""unitary""),
    ])] TestMESolveDecay.test_mesolve_normalization(self, state_type)",class_method,,,,"Class method: [pytest.mark.parametrize(['state_type'], [
        pytest.param(""ket"", id=""ket""),
        pytest.param(""dm"", id=""dm""),
        pytest.param(""unitary"", id=""unitary""),
    ])] TestMESolveDecay.test_mesolve_normalization(self, state_type)",qutip,qutip,v5.0.4,,,,,,,TestMESolveDecay,test_mesolve_normalization,"(self, state_type)",,,,,,,,,"pytest.mark.parametrize(['state_type'], [
        pytest.param(""ket"", id=""ket""),
        pytest.param(""dm"", id=""dm""),
        pytest.param(""unitary"", id=""unitary""),
    ])"
qutip_qutip_v5.0.4,test_mesolve.py,python,TestMESolveDecay.test_mesolver_pickling(self),class_method,,,,Class method: TestMESolveDecay.test_mesolver_pickling(self),qutip,qutip,v5.0.4,,,,,,,TestMESolveDecay,test_mesolver_pickling,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,"[pytest.mark.parametrize('method',
                             all_ode_method, ids=all_ode_method)] TestMESolveDecay.test_mesolver_stepping(self, method)",class_method,,,,"Class method: [pytest.mark.parametrize('method',
                             all_ode_method, ids=all_ode_method)] TestMESolveDecay.test_mesolver_stepping(self, method)",qutip,qutip,v5.0.4,,,,,,,TestMESolveDecay,test_mesolver_stepping,"(self, method)",,,,,,,,,"pytest.mark.parametrize('method',
                             all_ode_method, ids=all_ode_method)"
qutip_qutip_v5.0.4,test_mesolve.py,python,"TestJCModelEvolution.qubit_integrate(self, tlist, psi0, epsilon, delta, g1, g2)",class_method,,,,"Class method: TestJCModelEvolution.qubit_integrate(self, tlist, psi0, epsilon, delta, g1, g2)",qutip,qutip,v5.0.4,,,,,,,TestJCModelEvolution,qubit_integrate,"(self, tlist, psi0, epsilon, delta, g1, g2)",,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,"TestJCModelEvolution.jc_steadystate(self, N, wc, wa, g, kappa, gamma,
                       pump, psi0, use_rwa, tlist)",class_method,,,,"Class method: TestJCModelEvolution.jc_steadystate(self, N, wc, wa, g, kappa, gamma,
                       pump, psi0, use_rwa, tlist)",qutip,qutip,v5.0.4,,,,,,,TestJCModelEvolution,jc_steadystate,"(self, N, wc, wa, g, kappa, gamma,
                       pump, psi0, use_rwa, tlist)",,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,"TestJCModelEvolution.jc_integrate(self, N, wc, wa, g, kappa, gamma,
                     pump, psi0, use_rwa, tlist, oper_evo=False)",class_method,,,,"Class method: TestJCModelEvolution.jc_integrate(self, N, wc, wa, g, kappa, gamma,
                     pump, psi0, use_rwa, tlist, oper_evo=False)",qutip,qutip,v5.0.4,,,,,,,TestJCModelEvolution,jc_integrate,"(self, N, wc, wa, g, kappa, gamma,
                     pump, psi0, use_rwa, tlist, oper_evo=False)",,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,TestJCModelEvolution.testSuperJC(self),class_method,,,,Class method: TestJCModelEvolution.testSuperJC(self),qutip,qutip,v5.0.4,,,,,,,TestJCModelEvolution,testSuperJC,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,TestJCModelEvolution.testQubitDynamics1(self),class_method,,,,Class method: TestJCModelEvolution.testQubitDynamics1(self),qutip,qutip,v5.0.4,,,,,,,TestJCModelEvolution,testQubitDynamics1,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,TestJCModelEvolution.testQubitDynamics2(self),class_method,,,,Class method: TestJCModelEvolution.testQubitDynamics2(self),qutip,qutip,v5.0.4,,,,,,,TestJCModelEvolution,testQubitDynamics2,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,TestJCModelEvolution.testCavity1(self),class_method,,,,Class method: TestJCModelEvolution.testCavity1(self),qutip,qutip,v5.0.4,,,,,,,TestJCModelEvolution,testCavity1,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,TestJCModelEvolution.testCavity2(self),class_method,,,,Class method: TestJCModelEvolution.testCavity2(self),qutip,qutip,v5.0.4,,,,,,,TestJCModelEvolution,testCavity2,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,TestJCModelEvolution.testCavity3(self),class_method,,,,Class method: TestJCModelEvolution.testCavity3(self),qutip,qutip,v5.0.4,,,,,,,TestJCModelEvolution,testCavity3,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,"TestMESolveStepFuncCoeff.python_coeff(self, t, args)",class_method,,,,"Class method: TestMESolveStepFuncCoeff.python_coeff(self, t, args)",qutip,qutip,v5.0.4,,,,,,,TestMESolveStepFuncCoeff,python_coeff,"(self, t, args)",,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,"[pytest.mark.parametrize('method',
                             all_ode_method, ids=all_ode_method)] TestMESolveStepFuncCoeff.test_py_coeff(self, method)",class_method,,,,"Class method: [pytest.mark.parametrize('method',
                             all_ode_method, ids=all_ode_method)] TestMESolveStepFuncCoeff.test_py_coeff(self, method)",qutip,qutip,v5.0.4,,,,,,,TestMESolveStepFuncCoeff,test_py_coeff,"(self, method)",,,,,,,,,"pytest.mark.parametrize('method',
                             all_ode_method, ids=all_ode_method)"
qutip_qutip_v5.0.4,test_mesolve.py,python,TestMESolveStepFuncCoeff.test_array_cte_coeff(self),class_method,,,,Class method: TestMESolveStepFuncCoeff.test_array_cte_coeff(self),qutip,qutip,v5.0.4,,,,,,,TestMESolveStepFuncCoeff,test_array_cte_coeff,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,TestMESolveStepFuncCoeff.test_array_t_coeff(self),class_method,,,,Class method: TestMESolveStepFuncCoeff.test_array_t_coeff(self),qutip,qutip,v5.0.4,,,,,,,TestMESolveStepFuncCoeff,test_array_t_coeff,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,TestMESolveStepFuncCoeff.test_array_str_coeff(self),class_method,,,,Class method: TestMESolveStepFuncCoeff.test_array_str_coeff(self),qutip,qutip,v5.0.4,,,,,,,TestMESolveStepFuncCoeff,test_array_str_coeff,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,TestMESolveStepFuncCoeff.test_array_str_py_coeff(self),class_method,,,,Class method: TestMESolveStepFuncCoeff.test_array_str_py_coeff(self),qutip,qutip,v5.0.4,,,,,,,TestMESolveStepFuncCoeff,test_array_str_py_coeff,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,TestMESolveDecay,class,,,,Class: TestMESolveDecay,qutip,qutip,v5.0.4,,,,,,,TestMESolveDecay,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,TestJCModelEvolution,class,,,,Class: TestJCModelEvolution,qutip,qutip,v5.0.4,,,,,,,TestJCModelEvolution,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,TestMESolveStepFuncCoeff,class,,,,Class: TestMESolveStepFuncCoeff,qutip,qutip,v5.0.4,,,,,,,TestMESolveStepFuncCoeff,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,"fidelitycheck(out1, out2, rho0vec)",function,,,,"Function: fidelitycheck(out1, out2, rho0vec)",qutip,qutip,v5.0.4,,,,fidelitycheck,"(out1, out2, rho0vec)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,test_num_collapse_set(),function,,,,Function: test_num_collapse_set(),qutip,qutip,v5.0.4,,,,test_num_collapse_set,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,test_mesolve_bad_H(),function,,,,Function: test_mesolve_bad_H(),qutip,qutip,v5.0.4,,,,test_mesolve_bad_H,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,test_mesolve_bad_state(),function,,,,Function: test_mesolve_bad_state(),qutip,qutip,v5.0.4,,,,test_mesolve_bad_state,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,test_mesolve_bad_options(),function,,,,Function: test_mesolve_bad_options(),qutip,qutip,v5.0.4,,,,test_mesolve_bad_options,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,test_feedback(),function,,,,Function: test_feedback(),qutip,qutip,v5.0.4,,,,test_feedback,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,"all_ode_method = [
    method for method, integrator in MESolver.avail_integrators().items()
    if integrator.support_time_dependant
]",constant,"all_ode_method = [
    method for method, integrator in MESolver.avail_integrators().items()
    if integrator.support_time_dependant
]",all_ode_method,"[
    method for method, integrator in MESolver.avail_integrators().items()
    if integrator.support_time_dependant
]","Constant: all_ode_method = [
    method for method, integrator in MESolver.avail_integrators().items()
    if integrator.support_time_dependant
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,FunctionType from types,import,,,,Import: FunctionType from types,qutip,qutip,v5.0.4,from types import FunctionType,types,FunctionType,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,pickle,import,,,,Import: pickle,qutip,qutip,v5.0.4,import pickle,,pickle,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,mesolve from qutip.solver.mesolve,local_import,,,,Import: mesolve from qutip.solver.mesolve,qutip,qutip,v5.0.4,"from qutip.solver.mesolve import mesolve, MESolver",qutip.solver.mesolve,mesolve,,,qutip.solver.mesolve,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,MESolver from qutip.solver.mesolve,local_import,,,,Import: MESolver from qutip.solver.mesolve,qutip,qutip,v5.0.4,"from qutip.solver.mesolve import mesolve, MESolver",qutip.solver.mesolve,MESolver,,,qutip.solver.mesolve,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,Solver from qutip.solver.solver_base,local_import,,,,Import: Solver from qutip.solver.solver_base,qutip,qutip,v5.0.4,from qutip.solver.solver_base import Solver,qutip.solver.solver_base,Solver,,,qutip.solver.solver_base,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_mesolve.py,python,WARN_MISSING_MODULE from qutip.core.coefficient,local_import,,,,Import: WARN_MISSING_MODULE from qutip.core.coefficient,qutip,qutip,v5.0.4,from qutip.core.coefficient import WARN_MISSING_MODULE,qutip.core.coefficient,WARN_MISSING_MODULE,,,qutip.core.coefficient,,,,,,,,,,,,
,test_mesolve.py,python,,,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_mesolve.py,python,,,,,,Directory: qutip\tests\solver\test_mesolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,[instance] callable_qobj.oper = oper,class_field,,,,Class field: [instance] callable_qobj.oper = oper,qutip,qutip,v5.0.4,,,,,,,callable_qobj,__init__,"(self, oper, coeff=None)",self.oper = oper,self.oper = oper,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,[instance] callable_qobj.coeff = coeff,class_field,,,,Class field: [instance] callable_qobj.coeff = coeff,qutip,qutip,v5.0.4,,,,,,,callable_qobj,__init__,"(self, oper, coeff=None)",self.coeff = coeff,self.coeff = coeff,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,StatesAndExpectOutputCase.size = 10,class_field,,,,Class field: StatesAndExpectOutputCase.size = 10,qutip,qutip,v5.0.4,,,,,,,StatesAndExpectOutputCase,,,size = 10,,,,,size,,10,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,StatesAndExpectOutputCase.h = qutip.num(size),class_field,,,,Class field: StatesAndExpectOutputCase.h = qutip.num(size),qutip,qutip,v5.0.4,,,,,,,StatesAndExpectOutputCase,,,h = qutip.num(size),,,,,h,,qutip.num(size),
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"StatesAndExpectOutputCase.state = qutip.basis(size, size-1)",class_field,,,,"Class field: StatesAndExpectOutputCase.state = qutip.basis(size, size-1)",qutip,qutip,v5.0.4,,,,,,,StatesAndExpectOutputCase,,,"state = qutip.basis(size, size-1)",,,,,state,,"qutip.basis(size, size-1)",
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"StatesAndExpectOutputCase.times = np.linspace(0, 1, 101)",class_field,,,,"Class field: StatesAndExpectOutputCase.times = np.linspace(0, 1, 101)",qutip,qutip,v5.0.4,,,,,,,StatesAndExpectOutputCase,,,"times = np.linspace(0, 1, 101)",,,,,times,,"np.linspace(0, 1, 101)",
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,StatesAndExpectOutputCase.e_ops = [qutip.num(size)],class_field,,,,Class field: StatesAndExpectOutputCase.e_ops = [qutip.num(size)],qutip,qutip,v5.0.4,,,,,,,StatesAndExpectOutputCase,,,e_ops = [qutip.num(size)],,,,,e_ops,,[qutip.num(size)],
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,StatesAndExpectOutputCase.ntraj = 2000,class_field,,,,Class field: StatesAndExpectOutputCase.ntraj = 2000,qutip,qutip,v5.0.4,,,,,,,StatesAndExpectOutputCase,,,ntraj = 2000,,,,,ntraj,,2000,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"TestSeeds.sizes = [6, 6, 6]",class_field,,,,"Class field: TestSeeds.sizes = [6, 6, 6]",qutip,qutip,v5.0.4,,,,,,,TestSeeds,,,"sizes = [6, 6, 6]",,,,,sizes,,"[6, 6, 6]",
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"TestSeeds.dampings = [0.1, 0.4, 0.1]",class_field,,,,"Class field: TestSeeds.dampings = [0.1, 0.4, 0.1]",qutip,qutip,v5.0.4,,,,,,,TestSeeds,,,"dampings = [0.1, 0.4, 0.1]",,,,,dampings,,"[0.1, 0.4, 0.1]",
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,TestSeeds.ntraj = 25,class_field,,,,Class field: TestSeeds.ntraj = 25,qutip,qutip,v5.0.4,,,,,,,TestSeeds,,,ntraj = 25,,,,,ntraj,,25,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,TestSeeds.a = [qutip.destroy(size) for size in sizes],class_field,,,,Class field: TestSeeds.a = [qutip.destroy(size) for size in sizes],qutip,qutip,v5.0.4,,,,,,,TestSeeds,,,a = [qutip.destroy(size) for size in sizes],,,,,a,,[qutip.destroy(size) for size in sizes],
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"TestSeeds.H = 1j * (qutip.tensor(a[0], a[1].dag(), a[2].dag())
              - qutip.tensor(a[0].dag(), a[1], a[2]))",class_field,,,,"Class field: TestSeeds.H = 1j * (qutip.tensor(a[0], a[1].dag(), a[2].dag())
              - qutip.tensor(a[0].dag(), a[1], a[2]))",qutip,qutip,v5.0.4,,,,,,,TestSeeds,,,"H = 1j * (qutip.tensor(a[0], a[1].dag(), a[2].dag())
              - qutip.tensor(a[0].dag(), a[1], a[2]))",,,,,H,,"1j * (qutip.tensor(a[0], a[1].dag(), a[2].dag())
              - qutip.tensor(a[0].dag(), a[1], a[2]))",
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"TestSeeds.state = qutip.tensor(qutip.coherent(sizes[0], np.sqrt(2)),
                         qutip.basis(sizes[1:], [0, 0]))",class_field,,,,"Class field: TestSeeds.state = qutip.tensor(qutip.coherent(sizes[0], np.sqrt(2)),
                         qutip.basis(sizes[1:], [0, 0]))",qutip,qutip,v5.0.4,,,,,,,TestSeeds,,,"state = qutip.tensor(qutip.coherent(sizes[0], np.sqrt(2)),
                         qutip.basis(sizes[1:], [0, 0]))",,,,,state,,"qutip.tensor(qutip.coherent(sizes[0], np.sqrt(2)),
                         qutip.basis(sizes[1:], [0, 0]))",
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"TestSeeds.times = np.linspace(0, 10, 2)",class_field,,,,"Class field: TestSeeds.times = np.linspace(0, 10, 2)",qutip,qutip,v5.0.4,,,,,,,TestSeeds,,,"times = np.linspace(0, 10, 2)",,,,,times,,"np.linspace(0, 10, 2)",
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"TestSeeds.ops_and_rates = [
        (qutip.tensor(a[0], qutip.qeye(sizes[1:])), 2 * dampings[0]),
        (
            qutip.tensor(qutip.qeye(sizes[0]), a[1], qutip.qeye(sizes[2])),
            2 * dampings[1],
        ),
        (qutip.tensor(qutip.qeye(sizes[:2]), a[2]), 2 * dampings[2]),
    ]",class_field,,,,"Class field: TestSeeds.ops_and_rates = [
        (qutip.tensor(a[0], qutip.qeye(sizes[1:])), 2 * dampings[0]),
        (
            qutip.tensor(qutip.qeye(sizes[0]), a[1], qutip.qeye(sizes[2])),
            2 * dampings[1],
        ),
        (qutip.tensor(qutip.qeye(sizes[:2]), a[2]), 2 * dampings[2]),
    ]",qutip,qutip,v5.0.4,,,,,,,TestSeeds,,,"ops_and_rates = [
        (qutip.tensor(a[0], qutip.qeye(sizes[1:])), 2 * dampings[0]),
        (
            qutip.tensor(qutip.qeye(sizes[0]), a[1], qutip.qeye(sizes[2])),
            2 * dampings[1],
        ),
        (qutip.tensor(qutip.qeye(sizes[:2]), a[2]), 2 * dampings[2]),
    ]",,,,,ops_and_rates,,"[
        (qutip.tensor(a[0], qutip.qeye(sizes[1:])), 2 * dampings[0]),
        (
            qutip.tensor(qutip.qeye(sizes[0]), a[1], qutip.qeye(sizes[2])),
            2 * dampings[1],
        ),
        (qutip.tensor(qutip.qeye(sizes[:2]), a[2]), 2 * dampings[2]),
    ]",
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"callable_qobj.__init__(self, oper, coeff=None)",class_method,,,,"Class method: callable_qobj.__init__(self, oper, coeff=None)",qutip,qutip,v5.0.4,,,,,,,callable_qobj,__init__,"(self, oper, coeff=None)",,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"callable_qobj.__call__(self, t, args)",class_method,,,,"Class method: callable_qobj.__call__(self, t, args)",qutip,qutip,v5.0.4,,,,,,,callable_qobj,__call__,"(self, t, args)",,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"StatesAndExpectOutputCase._assert_states(self, result, expected, tol)",class_method,,,,"Class method: StatesAndExpectOutputCase._assert_states(self, result, expected, tol)",qutip,qutip,v5.0.4,,,,,,,StatesAndExpectOutputCase,_assert_states,"(self, result, expected, tol)",,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"StatesAndExpectOutputCase._assert_expect(self, result, expected, tol)",class_method,,,,"Class method: StatesAndExpectOutputCase._assert_expect(self, result, expected, tol)",qutip,qutip,v5.0.4,,,,,,,StatesAndExpectOutputCase,_assert_expect,"(self, result, expected, tol)",,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"StatesAndExpectOutputCase.test_states_and_expect(
        self, hamiltonian, args, ops_and_rates, expected, tol
    )",class_method,,,,"Class method: StatesAndExpectOutputCase.test_states_and_expect(
        self, hamiltonian, args, ops_and_rates, expected, tol
    )",qutip,qutip,v5.0.4,,,,,,,StatesAndExpectOutputCase,test_states_and_expect,"(
        self, hamiltonian, args, ops_and_rates, expected, tol
    )",,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"TestNoCollapse.pytest_generate_tests(self, metafunc)",class_method,,,,"Class method: TestNoCollapse.pytest_generate_tests(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,TestNoCollapse,pytest_generate_tests,"(self, metafunc)",,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"TestNoCollapse.test_states_only(
        self, hamiltonian, args, ops_and_rates, expected, tol
    )",class_method,,,,"Class method: TestNoCollapse.test_states_only(
        self, hamiltonian, args, ops_and_rates, expected, tol
    )",qutip,qutip,v5.0.4,,,,,,,TestNoCollapse,test_states_only,"(
        self, hamiltonian, args, ops_and_rates, expected, tol
    )",,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"TestNoCollapse.test_expect_only(
        self, hamiltonian, args, ops_and_rates, expected, tol
    )",class_method,,,,"Class method: TestNoCollapse.test_expect_only(
        self, hamiltonian, args, ops_and_rates, expected, tol
    )",qutip,qutip,v5.0.4,,,,,,,TestNoCollapse,test_expect_only,"(
        self, hamiltonian, args, ops_and_rates, expected, tol
    )",,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"TestConstantCollapse.pytest_generate_tests(self, metafunc)",class_method,,,,"Class method: TestConstantCollapse.pytest_generate_tests(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,TestConstantCollapse,pytest_generate_tests,"(self, metafunc)",,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"TestTimeDependentCollapse.pytest_generate_tests(self, metafunc)",class_method,,,,"Class method: TestTimeDependentCollapse.pytest_generate_tests(self, metafunc)",qutip,qutip,v5.0.4,,,,,,,TestTimeDependentCollapse,pytest_generate_tests,"(self, metafunc)",,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,TestSeeds.test_seeds_can_be_reused(self),class_method,,,,Class method: TestSeeds.test_seeds_can_be_reused(self),qutip,qutip,v5.0.4,,,,,,,TestSeeds,test_seeds_can_be_reused,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,TestSeeds.test_seeds_are_not_reused_by_default(self),class_method,,,,Class method: TestSeeds.test_seeds_are_not_reused_by_default(self),qutip,qutip,v5.0.4,,,,,,,TestSeeds,test_seeds_are_not_reused_by_default,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"[pytest.mark.parametrize('seed', [1, np.random.SeedSequence(2)])] TestSeeds.test_seed_type(self, seed)",class_method,,,,"Class method: [pytest.mark.parametrize('seed', [1, np.random.SeedSequence(2)])] TestSeeds.test_seed_type(self, seed)",qutip,qutip,v5.0.4,,,,,,,TestSeeds,test_seed_type,"(self, seed)",,,,,,,,,"pytest.mark.parametrize('seed', [1, np.random.SeedSequence(2)])"
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,TestSeeds.test_bad_seed(self),class_method,,,,Class method: TestSeeds.test_bad_seed(self),qutip,qutip,v5.0.4,,,,,,,TestSeeds,test_bad_seed,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,TestSeeds.test_generator(self),class_method,,,,Class method: TestSeeds.test_generator(self),qutip,qutip,v5.0.4,,,,,,,TestSeeds,test_generator,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,TestSeeds.test_stepping(self),class_method,,,,Class method: TestSeeds.test_stepping(self),qutip,qutip,v5.0.4,,,,,,,TestSeeds,test_stepping,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,callable_qobj,class,,,,Class: callable_qobj,qutip,qutip,v5.0.4,,,,,,,callable_qobj,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,StatesAndExpectOutputCase,class,,,,Class: StatesAndExpectOutputCase,qutip,qutip,v5.0.4,,,,,,,StatesAndExpectOutputCase,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,TestNoCollapse(StatesAndExpectOutputCase),class,,,,Class: TestNoCollapse(StatesAndExpectOutputCase),qutip,qutip,v5.0.4,,,,,,,TestNoCollapse,,,,,,,,,(StatesAndExpectOutputCase),,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,TestConstantCollapse(StatesAndExpectOutputCase),class,,,,Class: TestConstantCollapse(StatesAndExpectOutputCase),qutip,qutip,v5.0.4,,,,,,,TestConstantCollapse,,,,,,,,,(StatesAndExpectOutputCase),,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,TestTimeDependentCollapse(StatesAndExpectOutputCase),class,,,,Class: TestTimeDependentCollapse(StatesAndExpectOutputCase),qutip,qutip,v5.0.4,,,,,,,TestTimeDependentCollapse,,,,,,,,,(StatesAndExpectOutputCase),,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,TestSeeds,class,,,,Class: TestSeeds,qutip,qutip,v5.0.4,,,,,,,TestSeeds,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,test_agreement_with_mesolve_for_negative_rates(),function,,,,Function: test_agreement_with_mesolve_for_negative_rates(),qutip,qutip,v5.0.4,,,,test_agreement_with_mesolve_for_negative_rates,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,test_completeness_relation(),function,,,,Function: test_completeness_relation(),qutip,qutip,v5.0.4,,,,test_completeness_relation,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,test_solver_pickleable(),function,,,,Function: test_solver_pickleable(),qutip,qutip,v5.0.4,,,,test_solver_pickleable,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"_assert_functions_equal(f1, f2)",function,,,,"Function: _assert_functions_equal(f1, f2)",qutip,qutip,v5.0.4,,,,_assert_functions_equal,"(f1, f2)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"_return_constant(t, args)",function,,,,"Function: _return_constant(t, args)",qutip,qutip,v5.0.4,,,,_return_constant,"(t, args)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"_return_decay(t, args)",function,,,,"Function: _return_decay(t, args)",qutip,qutip,v5.0.4,,,,_return_decay,"(t, args)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,test_stored_collapse_operators_and_times(),function,,,,Function: test_stored_collapse_operators_and_times(),qutip,qutip,v5.0.4,,,,test_stored_collapse_operators_and_times,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,test_timeout(),function,,,,Function: test_timeout(),qutip,qutip,v5.0.4,,,,test_timeout,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,test_super_H(),function,,,,Function: test_super_H(),qutip,qutip,v5.0.4,,,,test_super_H,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,test_NonMarkovianMCSolver_run(),function,,,,Function: test_NonMarkovianMCSolver_run(),qutip,qutip,v5.0.4,,,,test_NonMarkovianMCSolver_run,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,test_NonMarkovianMCSolver_stepping(),function,,,,Function: test_NonMarkovianMCSolver_stepping(),qutip,qutip,v5.0.4,,,,test_NonMarkovianMCSolver_stepping,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"_dynamic(t, args)",function,,,,"Function: _dynamic(t, args)",qutip,qutip,v5.0.4,,,,_dynamic,"(t, args)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,copy from copy,import,,,,Import: copy from copy,qutip,qutip,v5.0.4,from copy import copy,copy,copy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,nm_mcsolve from qutip.solver.nm_mcsolve,local_import,,,,Import: nm_mcsolve from qutip.solver.nm_mcsolve,qutip,qutip,v5.0.4,"from qutip.solver.nm_mcsolve import nm_mcsolve, NonMarkovianMCSolver",qutip.solver.nm_mcsolve,nm_mcsolve,,,qutip.solver.nm_mcsolve,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,NonMarkovianMCSolver from qutip.solver.nm_mcsolve,local_import,,,,Import: NonMarkovianMCSolver from qutip.solver.nm_mcsolve,qutip,qutip,v5.0.4,"from qutip.solver.nm_mcsolve import nm_mcsolve, NonMarkovianMCSolver",qutip.solver.nm_mcsolve,NonMarkovianMCSolver,,,qutip.solver.nm_mcsolve,,,,,,,,,,,,
,test_nm_mcsolve.py,python,,,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_nm_mcsolve.py,python,,,,,,Directory: qutip\tests\solver\test_nm_mcsolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_options.py,python,test_default(),function,,,,Function: test_default(),qutip,qutip,v5.0.4,,,,test_default,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_options.py,python,test_SolverOptions_dictlike(),function,,,,Function: test_SolverOptions_dictlike(),qutip,qutip,v5.0.4,,,,test_SolverOptions_dictlike,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_options.py,python,test_del(),function,,,,Function: test_del(),qutip,qutip,v5.0.4,,,,test_del,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_options.py,python,test_SolverOptions_Feedback(),function,,,,Function: test_SolverOptions_Feedback(),qutip,qutip,v5.0.4,,,,test_SolverOptions_Feedback,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_options.py,python,test_error(),function,,,,Function: test_error(),qutip,qutip,v5.0.4,,,,test_error,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_options.py,python,test_print(),function,,,,Function: test_print(),qutip,qutip,v5.0.4,,,,test_print,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_options.py,python,test_in_solver(),function,,,,Function: test_in_solver(),qutip,qutip,v5.0.4,,,,test_in_solver,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_options.py,python,test_options_update_solver(),function,,,,Function: test_options_update_solver(),qutip,qutip,v5.0.4,,,,test_options_update_solver,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_options.py,python,"default = {
    ""opt1"": False,
    ""opt2"": True,
    ""opt3"": None,
}",constant,"default = {
    ""opt1"": False,
    ""opt2"": True,
    ""opt3"": None,
}",default,"{
    ""opt1"": False,
    ""opt2"": True,
    ""opt3"": None,
}","Constant: default = {
    ""opt1"": False,
    ""opt2"": True,
    ""opt3"": None,
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_options.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_options.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_options.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_options.py,python,_SolverOptions from qutip.solver.options,local_import,,,,Import: _SolverOptions from qutip.solver.options,qutip,qutip,v5.0.4,from qutip.solver.options import _SolverOptions,qutip.solver.options,_SolverOptions,,,qutip.solver.options,,,,,,,,,,,,
,test_options.py,python,,,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_options.py,python,,,,,,Directory: qutip\tests\solver\test_options.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_parallel.py,python,CustomException(Exception),class,,,,Class: CustomException(Exception),qutip,qutip,v5.0.4,,,,,,,CustomException,,,,,,,,,(Exception),,
qutip_qutip_v5.0.4,test_parallel.py,python,_func1(x),function,,,,Function: _func1(x),qutip,qutip,v5.0.4,,,,_func1,(x),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_parallel.py,python,"_func2(x, a, b, c, d=0, e=0, f=0)",function,,,,"Function: _func2(x, a, b, c, d=0, e=0, f=0)",qutip,qutip,v5.0.4,,,,_func2,"(x, a, b, c, d=0, e=0, f=0)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_parallel.py,python,func(i),function,,,,Function: func(i),qutip,qutip,v5.0.4,,,,func,(i),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_parallel.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_parallel.py,python,time,import,,,,Import: time,qutip,qutip,v5.0.4,import time,,time,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_parallel.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_parallel.py,python,threading,import,,,,Import: threading,qutip,qutip,v5.0.4,import threading,,threading,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_parallel.py,python,parallel_map from qutip.solver.parallel,local_import,,,,Import: parallel_map from qutip.solver.parallel,qutip,qutip,v5.0.4,"from qutip.solver.parallel import (
    parallel_map, serial_map, loky_pmap, mpi_pmap, MapExceptions
)",qutip.solver.parallel,parallel_map,,,qutip.solver.parallel,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_parallel.py,python,serial_map from qutip.solver.parallel,local_import,,,,Import: serial_map from qutip.solver.parallel,qutip,qutip,v5.0.4,"from qutip.solver.parallel import (
    parallel_map, serial_map, loky_pmap, mpi_pmap, MapExceptions
)",qutip.solver.parallel,serial_map,,,qutip.solver.parallel,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_parallel.py,python,loky_pmap from qutip.solver.parallel,local_import,,,,Import: loky_pmap from qutip.solver.parallel,qutip,qutip,v5.0.4,"from qutip.solver.parallel import (
    parallel_map, serial_map, loky_pmap, mpi_pmap, MapExceptions
)",qutip.solver.parallel,loky_pmap,,,qutip.solver.parallel,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_parallel.py,python,mpi_pmap from qutip.solver.parallel,local_import,,,,Import: mpi_pmap from qutip.solver.parallel,qutip,qutip,v5.0.4,"from qutip.solver.parallel import (
    parallel_map, serial_map, loky_pmap, mpi_pmap, MapExceptions
)",qutip.solver.parallel,mpi_pmap,,,qutip.solver.parallel,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_parallel.py,python,MapExceptions from qutip.solver.parallel,local_import,,,,Import: MapExceptions from qutip.solver.parallel,qutip,qutip,v5.0.4,"from qutip.solver.parallel import (
    parallel_map, serial_map, loky_pmap, mpi_pmap, MapExceptions
)",qutip.solver.parallel,MapExceptions,,,qutip.solver.parallel,,,,,,,,,,,,
,test_parallel.py,python,,,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_parallel.py,python,,,,,,Directory: qutip\tests\solver\test_parallel.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,testPropHOB(),function,,,,Function: testPropHOB(),qutip,qutip,v5.0.4,,,,testPropHOB,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,testPropObj(),function,,,,Function: testPropObj(),qutip,qutip,v5.0.4,,,,testPropObj,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,func(t),function,,,,Function: func(t),qutip,qutip,v5.0.4,,,,func,(t),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,testPropHOTd(),function,,,,Function: testPropHOTd(),qutip,qutip,v5.0.4,,,,testPropHOTd,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,testPropObjTd(),function,,,,Function: testPropObjTd(),qutip,qutip,v5.0.4,,,,testPropObjTd,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,testPropHOSteady(),function,,,,Function: testPropHOSteady(),qutip,qutip,v5.0.4,,,,testPropHOSteady,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,testPropHDims(),function,,,,Function: testPropHDims(),qutip,qutip,v5.0.4,,,,testPropHDims,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,testPropHSuper(),function,,,,Function: testPropHSuper(),qutip,qutip,v5.0.4,,,,testPropHSuper,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,testPropEvo(),function,,,,Function: testPropEvo(),qutip,qutip,v5.0.4,,,,testPropEvo,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,"_make_se(H, a)",function,,,,"Function: _make_se(H, a)",qutip,qutip,v5.0.4,,,,_make_se,"(H, a)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,"_make_me(H, a)",function,,,,"Function: _make_me(H, a)",qutip,qutip,v5.0.4,,,,_make_me,"(H, a)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,"_make_br(H, a)",function,,,,"Function: _make_br(H, a)",qutip,qutip,v5.0.4,,,,_make_br,"(H, a)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,testPropMCSolver(),function,,,,Function: testPropMCSolver(),qutip,qutip,v5.0.4,,,,testPropMCSolver,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,destroy from qutip,import,,,,Import: destroy from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",qutip,destroy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,propagator from qutip,import,,,,Import: propagator from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",qutip,propagator,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,Propagator from qutip,import,,,,Import: Propagator from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",qutip,Propagator,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,propagator_steadystate from qutip,import,,,,Import: propagator_steadystate from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",qutip,propagator_steadystate,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,steadystate from qutip,import,,,,Import: steadystate from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",qutip,steadystate,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,tensor from qutip,import,,,,Import: tensor from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",qutip,tensor,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,qeye from qutip,import,,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",qutip,qeye,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,basis from qutip,import,,,,Import: basis from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",qutip,basis,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,QobjEvo from qutip,import,,,,Import: QobjEvo from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",qutip,QobjEvo,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,sesolve from qutip,import,,,,Import: sesolve from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",qutip,sesolve,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,liouvillian from qutip,import,,,,Import: liouvillian from qutip,qutip,qutip,v5.0.4,"from qutip import (destroy, propagator, Propagator, propagator_steadystate,
                   steadystate, tensor, qeye, basis, QobjEvo, sesolve,
                   liouvillian)",qutip,liouvillian,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,trapezoid from scipy.integrate,local_import,,,,Import: trapezoid from scipy.integrate,qutip,qutip,v5.0.4,from scipy.integrate import trapezoid,scipy.integrate,trapezoid,,,scipy.integrate,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,BRSolver from qutip.solver.brmesolve,local_import,,,,Import: BRSolver from qutip.solver.brmesolve,qutip,qutip,v5.0.4,from qutip.solver.brmesolve import BRSolver,qutip.solver.brmesolve,BRSolver,,,qutip.solver.brmesolve,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,MESolver from qutip.solver.mesolve,local_import,,,,Import: MESolver from qutip.solver.mesolve,qutip,qutip,v5.0.4,from qutip.solver.mesolve import MESolver,qutip.solver.mesolve,MESolver,,,qutip.solver.mesolve,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,SESolver from qutip.solver.sesolve,local_import,,,,Import: SESolver from qutip.solver.sesolve,qutip,qutip,v5.0.4,from qutip.solver.sesolve import SESolver,qutip.solver.sesolve,SESolver,,,qutip.solver.sesolve,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_propagator.py,python,MCSolver from qutip.solver.mcsolve,local_import,,,,Import: MCSolver from qutip.solver.mcsolve,qutip,qutip,v5.0.4,from qutip.solver.mcsolve import MCSolver,qutip.solver.mcsolve,MCSolver,,,qutip.solver.mcsolve,,,,,,,,,,,,
,test_propagator.py,python,,,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_propagator.py,python,,,,,,Directory: qutip\tests\solver\test_propagator.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qubit_evolution.py,python,"_qubit_integrate(tlist, psi0, epsilon, delta, g1, g2, solver)",function,,,,"Function: _qubit_integrate(tlist, psi0, epsilon, delta, g1, g2, solver)",qutip,qutip,v5.0.4,,,,_qubit_integrate,"(tlist, psi0, epsilon, delta, g1, g2, solver)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qubit_evolution.py,python,test_MESolverCase1(),function,,,,Function: test_MESolverCase1(),qutip,qutip,v5.0.4,,,,test_MESolverCase1,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qubit_evolution.py,python,test_MESolverCase2(),function,,,,Function: test_MESolverCase2(),qutip,qutip,v5.0.4,,,,test_MESolverCase2,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qubit_evolution.py,python,test_MCSolverCase1(),function,,,,Function: test_MCSolverCase1(),qutip,qutip,v5.0.4,,,,test_MCSolverCase1,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qubit_evolution.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qubit_evolution.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qubit_evolution.py,python,sigmax from qutip,import,,,,Import: sigmax from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz, sigmam, mesolve, mcsolve, basis,
)",qutip,sigmax,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qubit_evolution.py,python,sigmay from qutip,import,,,,Import: sigmay from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz, sigmam, mesolve, mcsolve, basis,
)",qutip,sigmay,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qubit_evolution.py,python,sigmaz from qutip,import,,,,Import: sigmaz from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz, sigmam, mesolve, mcsolve, basis,
)",qutip,sigmaz,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qubit_evolution.py,python,sigmam from qutip,import,,,,Import: sigmam from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz, sigmam, mesolve, mcsolve, basis,
)",qutip,sigmam,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qubit_evolution.py,python,mesolve from qutip,import,,,,Import: mesolve from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz, sigmam, mesolve, mcsolve, basis,
)",qutip,mesolve,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qubit_evolution.py,python,mcsolve from qutip,import,,,,Import: mcsolve from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz, sigmam, mesolve, mcsolve, basis,
)",qutip,mcsolve,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_qubit_evolution.py,python,basis from qutip,import,,,,Import: basis from qutip,qutip,qutip,v5.0.4,"from qutip import (
    sigmax, sigmay, sigmaz, sigmam, mesolve, mcsolve, basis,
)",qutip,basis,,,,,,,,,,,,,,,
,test_qubit_evolution.py,python,,,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_qubit_evolution.py,python,,,,,,Directory: qutip\tests\solver\test_qubit_evolution.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_results.py,python,"[pytest.mark.parametrize([""N"", ""e_ops"", ""options""], [
        pytest.param(10, (), {}, id=""no-e-ops""),
        pytest.param(
            10, qutip.create(10), {""store_states"": True}, id=""store-states"",
        )
    ])] TestResult.test_states(self, N, e_ops, options)",class_method,,,,"Class method: [pytest.mark.parametrize([""N"", ""e_ops"", ""options""], [
        pytest.param(10, (), {}, id=""no-e-ops""),
        pytest.param(
            10, qutip.create(10), {""store_states"": True}, id=""store-states"",
        )
    ])] TestResult.test_states(self, N, e_ops, options)",qutip,qutip,v5.0.4,,,,,,,TestResult,test_states,"(self, N, e_ops, options)",,,,,,,,,"pytest.mark.parametrize([""N"", ""e_ops"", ""options""], [
        pytest.param(10, (), {}, id=""no-e-ops""),
        pytest.param(
            10, qutip.create(10), {""store_states"": True}, id=""store-states"",
        )
    ])"
qutip_qutip_v5.0.4,test_results.py,python,"[pytest.mark.parametrize([""N"", ""e_ops"", ""options""], [
        pytest.param(10, (), {
            ""store_states"": False, ""store_final_state"": True
        }, id=""no-e-ops""),
        pytest.param(10, qutip.create(10), {
            ""store_final_state"": True,
        }, id=""with-eops""),
    ])] TestResult.test_final_state_only(self, N, e_ops, options)",class_method,,,,"Class method: [pytest.mark.parametrize([""N"", ""e_ops"", ""options""], [
        pytest.param(10, (), {
            ""store_states"": False, ""store_final_state"": True
        }, id=""no-e-ops""),
        pytest.param(10, qutip.create(10), {
            ""store_final_state"": True,
        }, id=""with-eops""),
    ])] TestResult.test_final_state_only(self, N, e_ops, options)",qutip,qutip,v5.0.4,,,,,,,TestResult,test_final_state_only,"(self, N, e_ops, options)",,,,,,,,,"pytest.mark.parametrize([""N"", ""e_ops"", ""options""], [
        pytest.param(10, (), {
            ""store_states"": False, ""store_final_state"": True
        }, id=""no-e-ops""),
        pytest.param(10, qutip.create(10), {
            ""store_final_state"": True,
        }, id=""with-eops""),
    ])"
qutip_qutip_v5.0.4,test_results.py,python,"[pytest.mark.parametrize([""N"", ""e_ops"", ""results""], [
        pytest.param(
            10, qutip.num(10), {0: np.arange(10)}, id=""single-e-op"",
        ),
        pytest.param(
            10,
            [qutip.num(10), qutip.qeye(10)],
            {0: np.arange(10), 1: np.ones(10)},
            id=""list-e-ops"",
        ),
        pytest.param(
            10,
            {""a"": qutip.num(10), ""b"": qutip.qeye(10)},
            {""a"": np.arange(10), ""b"": np.ones(10)},
            id=""dict-e-ops"",
        ),
        pytest.param(
            5, qutip.QobjEvo(qutip.num(5)), {0: np.arange(5)}, id=""qobjevo"",
        ),
        pytest.param(
            5, e_op_state_by_time,
            {0: [i * qutip.basis(5, i) for i in range(5)]},
            id=""function"",
        )
    ])] TestResult.test_expect_and_e_ops(self, N, e_ops, results)",class_method,,,,"Class method: [pytest.mark.parametrize([""N"", ""e_ops"", ""results""], [
        pytest.param(
            10, qutip.num(10), {0: np.arange(10)}, id=""single-e-op"",
        ),
        pytest.param(
            10,
            [qutip.num(10), qutip.qeye(10)],
            {0: np.arange(10), 1: np.ones(10)},
            id=""list-e-ops"",
        ),
        pytest.param(
            10,
            {""a"": qutip.num(10), ""b"": qutip.qeye(10)},
            {""a"": np.arange(10), ""b"": np.ones(10)},
            id=""dict-e-ops"",
        ),
        pytest.param(
            5, qutip.QobjEvo(qutip.num(5)), {0: np.arange(5)}, id=""qobjevo"",
        ),
        pytest.param(
            5, e_op_state_by_time,
            {0: [i * qutip.basis(5, i) for i in range(5)]},
            id=""function"",
        )
    ])] TestResult.test_expect_and_e_ops(self, N, e_ops, results)",qutip,qutip,v5.0.4,,,,,,,TestResult,test_expect_and_e_ops,"(self, N, e_ops, results)",,,,,,,,,"pytest.mark.parametrize([""N"", ""e_ops"", ""results""], [
        pytest.param(
            10, qutip.num(10), {0: np.arange(10)}, id=""single-e-op"",
        ),
        pytest.param(
            10,
            [qutip.num(10), qutip.qeye(10)],
            {0: np.arange(10), 1: np.ones(10)},
            id=""list-e-ops"",
        ),
        pytest.param(
            10,
            {""a"": qutip.num(10), ""b"": qutip.qeye(10)},
            {""a"": np.arange(10), ""b"": np.ones(10)},
            id=""dict-e-ops"",
        ),
        pytest.param(
            5, qutip.QobjEvo(qutip.num(5)), {0: np.arange(5)}, id=""qobjevo"",
        ),
        pytest.param(
            5, e_op_state_by_time,
            {0: [i * qutip.basis(5, i) for i in range(5)]},
            id=""function"",
        )
    ])"
qutip_qutip_v5.0.4,test_results.py,python,TestResult.test_add_processor(self),class_method,,,,Class method: TestResult.test_add_processor(self),qutip,qutip,v5.0.4,,,,,,,TestResult,test_add_processor,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_results.py,python,TestResult.test_repr_minimal(self),class_method,,,,Class method: TestResult.test_repr_minimal(self),qutip,qutip,v5.0.4,,,,,,,TestResult,test_repr_minimal,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_results.py,python,TestResult.test_repr_full(self),class_method,,,,Class method: TestResult.test_repr_full(self),qutip,qutip,v5.0.4,,,,,,,TestResult,test_repr_full,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_results.py,python,"TestMultiTrajResult._fill_trajectories(self, multiresult, N, ntraj,
                           collapse=False, noise=0, dm=False)",class_method,,,,"Class method: TestMultiTrajResult._fill_trajectories(self, multiresult, N, ntraj,
                           collapse=False, noise=0, dm=False)",qutip,qutip,v5.0.4,,,,,,,TestMultiTrajResult,_fill_trajectories,"(self, multiresult, N, ntraj,
                           collapse=False, noise=0, dm=False)",,,,,,,,,
qutip_qutip_v5.0.4,test_results.py,python,"TestMultiTrajResult._expect_check_types(self, multiresult)",class_method,,,,"Class method: TestMultiTrajResult._expect_check_types(self, multiresult)",qutip,qutip,v5.0.4,,,,,,,TestMultiTrajResult,_expect_check_types,"(self, multiresult)",,,,,,,,,
qutip_qutip_v5.0.4,test_results.py,python,"[pytest.mark.parametrize('keep_runs_results', [True, False])] TestMultiTrajResult.test_McResult(self, dm, keep_runs_results)",class_method,,,,"Class method: [pytest.mark.parametrize('keep_runs_results', [True, False])] TestMultiTrajResult.test_McResult(self, dm, keep_runs_results)",qutip,qutip,v5.0.4,,,,,,,TestMultiTrajResult,test_McResult,"(self, dm, keep_runs_results)",,,,,,,,,"pytest.mark.parametrize('keep_runs_results', [True, False])"
qutip_qutip_v5.0.4,test_results.py,python,"[pytest.mark.parametrize('dm', [True, False])] TestMultiTrajResult.test_McResult(self, dm, keep_runs_results)",class_method,,,,"Class method: [pytest.mark.parametrize('dm', [True, False])] TestMultiTrajResult.test_McResult(self, dm, keep_runs_results)",qutip,qutip,v5.0.4,,,,,,,TestMultiTrajResult,test_McResult,"(self, dm, keep_runs_results)",,,,,,,,,"pytest.mark.parametrize('dm', [True, False])"
qutip_qutip_v5.0.4,test_results.py,python,"[pytest.mark.parametrize('keep_runs_results', [True, False])] TestMultiTrajResult.test_multitraj_expect(self, keep_runs_results, e_ops, results)",class_method,,,,"Class method: [pytest.mark.parametrize('keep_runs_results', [True, False])] TestMultiTrajResult.test_multitraj_expect(self, keep_runs_results, e_ops, results)",qutip,qutip,v5.0.4,,,,,,,TestMultiTrajResult,test_multitraj_expect,"(self, keep_runs_results, e_ops, results)",,,,,,,,,"pytest.mark.parametrize('keep_runs_results', [True, False])"
qutip_qutip_v5.0.4,test_results.py,python,"[pytest.mark.parametrize([""e_ops"", ""results""], [
        pytest.param(qutip.num(5), [np.arange(5)], id=""single-e-op""),
        pytest.param(
            {""a"": qutip.num(5), ""b"": qutip.qeye(5)},
            [np.arange(5), np.ones(5)],
            id=""dict-e-ops"",
        ),
        pytest.param(qutip.QobjEvo(qutip.num(5)), [np.arange(5)], id=""qobjevo""),
        pytest.param(e_op_num, [np.arange(5)], id=""function""),
        pytest.param(
            [qutip.num(5), e_op_num],
            [np.arange(5), np.arange(5)],
            id=""list-e-ops"",
        ),
    ])] TestMultiTrajResult.test_multitraj_expect(self, keep_runs_results, e_ops, results)",class_method,,,,"Class method: [pytest.mark.parametrize([""e_ops"", ""results""], [
        pytest.param(qutip.num(5), [np.arange(5)], id=""single-e-op""),
        pytest.param(
            {""a"": qutip.num(5), ""b"": qutip.qeye(5)},
            [np.arange(5), np.ones(5)],
            id=""dict-e-ops"",
        ),
        pytest.param(qutip.QobjEvo(qutip.num(5)), [np.arange(5)], id=""qobjevo""),
        pytest.param(e_op_num, [np.arange(5)], id=""function""),
        pytest.param(
            [qutip.num(5), e_op_num],
            [np.arange(5), np.arange(5)],
            id=""list-e-ops"",
        ),
    ])] TestMultiTrajResult.test_multitraj_expect(self, keep_runs_results, e_ops, results)",qutip,qutip,v5.0.4,,,,,,,TestMultiTrajResult,test_multitraj_expect,"(self, keep_runs_results, e_ops, results)",,,,,,,,,"pytest.mark.parametrize([""e_ops"", ""results""], [
        pytest.param(qutip.num(5), [np.arange(5)], id=""single-e-op""),
        pytest.param(
            {""a"": qutip.num(5), ""b"": qutip.qeye(5)},
            [np.arange(5), np.ones(5)],
            id=""dict-e-ops"",
        ),
        pytest.param(qutip.QobjEvo(qutip.num(5)), [np.arange(5)], id=""qobjevo""),
        pytest.param(e_op_num, [np.arange(5)], id=""function""),
        pytest.param(
            [qutip.num(5), e_op_num],
            [np.arange(5), np.arange(5)],
            id=""list-e-ops"",
        ),
    ])"
qutip_qutip_v5.0.4,test_results.py,python,"[pytest.mark.parametrize('keep_runs_results', [True, False])] TestMultiTrajResult.test_multitraj_state(self, keep_runs_results, dm)",class_method,,,,"Class method: [pytest.mark.parametrize('keep_runs_results', [True, False])] TestMultiTrajResult.test_multitraj_state(self, keep_runs_results, dm)",qutip,qutip,v5.0.4,,,,,,,TestMultiTrajResult,test_multitraj_state,"(self, keep_runs_results, dm)",,,,,,,,,"pytest.mark.parametrize('keep_runs_results', [True, False])"
qutip_qutip_v5.0.4,test_results.py,python,"[pytest.mark.parametrize('dm', [True, False])] TestMultiTrajResult.test_multitraj_state(self, keep_runs_results, dm)",class_method,,,,"Class method: [pytest.mark.parametrize('dm', [True, False])] TestMultiTrajResult.test_multitraj_state(self, keep_runs_results, dm)",qutip,qutip,v5.0.4,,,,,,,TestMultiTrajResult,test_multitraj_state,"(self, keep_runs_results, dm)",,,,,,,,,"pytest.mark.parametrize('dm', [True, False])"
qutip_qutip_v5.0.4,test_results.py,python,"[pytest.mark.parametrize('keep_runs_results', [True, False])] TestMultiTrajResult.test_multitraj_targettol(self, keep_runs_results, targettol)",class_method,,,,"Class method: [pytest.mark.parametrize('keep_runs_results', [True, False])] TestMultiTrajResult.test_multitraj_targettol(self, keep_runs_results, targettol)",qutip,qutip,v5.0.4,,,,,,,TestMultiTrajResult,test_multitraj_targettol,"(self, keep_runs_results, targettol)",,,,,,,,,"pytest.mark.parametrize('keep_runs_results', [True, False])"
qutip_qutip_v5.0.4,test_results.py,python,"[pytest.mark.parametrize('targettol', [
        pytest.param(0.1, id='atol'),
        pytest.param([0.001, 0.1], id='rtol'),
        pytest.param([[0.001, 0.1], [0.1, 0]], id='tol_per_e_op'),
    ])] TestMultiTrajResult.test_multitraj_targettol(self, keep_runs_results, targettol)",class_method,,,,"Class method: [pytest.mark.parametrize('targettol', [
        pytest.param(0.1, id='atol'),
        pytest.param([0.001, 0.1], id='rtol'),
        pytest.param([[0.001, 0.1], [0.1, 0]], id='tol_per_e_op'),
    ])] TestMultiTrajResult.test_multitraj_targettol(self, keep_runs_results, targettol)",qutip,qutip,v5.0.4,,,,,,,TestMultiTrajResult,test_multitraj_targettol,"(self, keep_runs_results, targettol)",,,,,,,,,"pytest.mark.parametrize('targettol', [
        pytest.param(0.1, id='atol'),
        pytest.param([0.001, 0.1], id='rtol'),
        pytest.param([[0.001, 0.1], [0.1, 0]], id='tol_per_e_op'),
    ])"
qutip_qutip_v5.0.4,test_results.py,python,TestMultiTrajResult.test_multitraj_steadystate(self),class_method,,,,Class method: TestMultiTrajResult.test_multitraj_steadystate(self),qutip,qutip,v5.0.4,,,,,,,TestMultiTrajResult,test_multitraj_steadystate,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_results.py,python,"[pytest.mark.parametrize('keep_runs_results', [True, False])] TestMultiTrajResult.test_repr(self, keep_runs_results)",class_method,,,,"Class method: [pytest.mark.parametrize('keep_runs_results', [True, False])] TestMultiTrajResult.test_repr(self, keep_runs_results)",qutip,qutip,v5.0.4,,,,,,,TestMultiTrajResult,test_repr,"(self, keep_runs_results)",,,,,,,,,"pytest.mark.parametrize('keep_runs_results', [True, False])"
qutip_qutip_v5.0.4,test_results.py,python,"[pytest.mark.parametrize('keep_runs_results', [True, False])] TestMultiTrajResult.test_merge_result(self, keep_runs_results)",class_method,,,,"Class method: [pytest.mark.parametrize('keep_runs_results', [True, False])] TestMultiTrajResult.test_merge_result(self, keep_runs_results)",qutip,qutip,v5.0.4,,,,,,,TestMultiTrajResult,test_merge_result,"(self, keep_runs_results)",,,,,,,,,"pytest.mark.parametrize('keep_runs_results', [True, False])"
qutip_qutip_v5.0.4,test_results.py,python,TestResult,class,,,,Class: TestResult,qutip,qutip,v5.0.4,,,,,,,TestResult,,,,,,,,,,,
qutip_qutip_v5.0.4,test_results.py,python,TestMultiTrajResult,class,,,,Class: TestMultiTrajResult,qutip,qutip,v5.0.4,,,,,,,TestMultiTrajResult,,,,,,,,,,,
qutip_qutip_v5.0.4,test_results.py,python,fill_options(**kwargs),function,,,,Function: fill_options(**kwargs),qutip,qutip,v5.0.4,,,,fill_options,(**kwargs),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_results.py,python,"e_op_state_by_time(t, state)",function,,,,"Function: e_op_state_by_time(t, state)",qutip,qutip,v5.0.4,,,,e_op_state_by_time,"(t, state)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_results.py,python,"e_op_num(t, state)",function,,,,"Function: e_op_num(t, state)",qutip,qutip,v5.0.4,,,,e_op_num,"(t, state)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_results.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_results.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_results.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_results.py,python,Result from qutip.solver.result,local_import,,,,Import: Result from qutip.solver.result,qutip,qutip,v5.0.4,"from qutip.solver.result import Result, MultiTrajResult, McResult",qutip.solver.result,Result,,,qutip.solver.result,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_results.py,python,MultiTrajResult from qutip.solver.result,local_import,,,,Import: MultiTrajResult from qutip.solver.result,qutip,qutip,v5.0.4,"from qutip.solver.result import Result, MultiTrajResult, McResult",qutip.solver.result,MultiTrajResult,,,qutip.solver.result,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_results.py,python,McResult from qutip.solver.result,local_import,,,,Import: McResult from qutip.solver.result,qutip,qutip,v5.0.4,"from qutip.solver.result import Result, MultiTrajResult, McResult",qutip.solver.result,McResult,,,qutip.solver.result,,,,,,,,,,,,
,test_results.py,python,,,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_results.py,python,,,,,,Directory: qutip\tests\solver\test_results.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sesolve.py,python,TestSeSolve.H0 = 0.2 * np.pi * qutip.sigmaz(),class_field,,,,Class field: TestSeSolve.H0 = 0.2 * np.pi * qutip.sigmaz(),qutip,qutip,v5.0.4,,,,,,,TestSeSolve,,,H0 = 0.2 * np.pi * qutip.sigmaz(),,,,,H0,,0.2 * np.pi * qutip.sigmaz(),
qutip_qutip_v5.0.4,test_sesolve.py,python,TestSeSolve.H1 = np.pi * qutip.sigmax(),class_field,,,,Class field: TestSeSolve.H1 = np.pi * qutip.sigmax(),qutip,qutip,v5.0.4,,,,,,,TestSeSolve,,,H1 = np.pi * qutip.sigmax(),,,,,H1,,np.pi * qutip.sigmax(),
qutip_qutip_v5.0.4,test_sesolve.py,python,"TestSeSolve.tlist = np.linspace(0, 20, 200)",class_field,,,,"Class field: TestSeSolve.tlist = np.linspace(0, 20, 200)",qutip,qutip,v5.0.4,,,,,,,TestSeSolve,,,"tlist = np.linspace(0, 20, 200)",,,,,tlist,,"np.linspace(0, 20, 200)",
qutip_qutip_v5.0.4,test_sesolve.py,python,TestSeSolve.args = {'alpha': 0.5},class_field,,,,Class field: TestSeSolve.args = {'alpha': 0.5},qutip,qutip,v5.0.4,,,,,,,TestSeSolve,,,args = {'alpha': 0.5},,,,,args,,{'alpha': 0.5},
qutip_qutip_v5.0.4,test_sesolve.py,python,TestSeSolve.w_a = 0.35,class_field,,,,Class field: TestSeSolve.w_a = 0.35,qutip,qutip,v5.0.4,,,,,,,TestSeSolve,,,w_a = 0.35,,,,,w_a,,0.35,
qutip_qutip_v5.0.4,test_sesolve.py,python,TestSeSolve.a = 0.5,class_field,,,,Class field: TestSeSolve.a = 0.5,qutip,qutip,v5.0.4,,,,,,,TestSeSolve,,,a = 0.5,,,,,a,,0.5,
qutip_qutip_v5.0.4,test_sesolve.py,python,"[pytest.mark.parametrize(['unitary_op'], [
        pytest.param(None, id=""state""),
        pytest.param(qutip.qeye(2), id=""unitary""),
    ])] TestSeSolve.test_sesolve(self, H, analytical, unitary_op)",class_method,,,,"Class method: [pytest.mark.parametrize(['unitary_op'], [
        pytest.param(None, id=""state""),
        pytest.param(qutip.qeye(2), id=""unitary""),
    ])] TestSeSolve.test_sesolve(self, H, analytical, unitary_op)",qutip,qutip,v5.0.4,,,,,,,TestSeSolve,test_sesolve,"(self, H, analytical, unitary_op)",,,,,,,,,"pytest.mark.parametrize(['unitary_op'], [
        pytest.param(None, id=""state""),
        pytest.param(qutip.qeye(2), id=""unitary""),
    ])"
qutip_qutip_v5.0.4,test_sesolve.py,python,"[pytest.mark.parametrize(['H', 'analytical'], [
        pytest.param(H1, lambda t, _: t, id='const_H'),
        pytest.param(lambda t, alpha: (np.pi * qutip.sigmax()
                                       * np.exp(-alpha * t)),
                     _analytic, id='func_H'),
        pytest.param([[H1, lambda t, args: np.exp(-args['alpha'] * t)]],
                     _analytic, id='list_func_H'),
        pytest.param([[H1, 'exp(-alpha*t)']],
                     _analytic, id='list_str_H'),
        pytest.param([[H1, np.exp(-args['alpha'] * tlist)]],
                     _analytic, id='list_array_H'),
        pytest.param(qutip.QobjEvo([[H1, 'exp(-alpha*t)']], args=args),
                     _analytic, id='QobjEvo_H'),
    ])] TestSeSolve.test_sesolve(self, H, analytical, unitary_op)",class_method,,,,"Class method: [pytest.mark.parametrize(['H', 'analytical'], [
        pytest.param(H1, lambda t, _: t, id='const_H'),
        pytest.param(lambda t, alpha: (np.pi * qutip.sigmax()
                                       * np.exp(-alpha * t)),
                     _analytic, id='func_H'),
        pytest.param([[H1, lambda t, args: np.exp(-args['alpha'] * t)]],
                     _analytic, id='list_func_H'),
        pytest.param([[H1, 'exp(-alpha*t)']],
                     _analytic, id='list_str_H'),
        pytest.param([[H1, np.exp(-args['alpha'] * tlist)]],
                     _analytic, id='list_array_H'),
        pytest.param(qutip.QobjEvo([[H1, 'exp(-alpha*t)']], args=args),
                     _analytic, id='QobjEvo_H'),
    ])] TestSeSolve.test_sesolve(self, H, analytical, unitary_op)",qutip,qutip,v5.0.4,,,,,,,TestSeSolve,test_sesolve,"(self, H, analytical, unitary_op)",,,,,,,,,"pytest.mark.parametrize(['H', 'analytical'], [
        pytest.param(H1, lambda t, _: t, id='const_H'),
        pytest.param(lambda t, alpha: (np.pi * qutip.sigmax()
                                       * np.exp(-alpha * t)),
                     _analytic, id='func_H'),
        pytest.param([[H1, lambda t, args: np.exp(-args['alpha'] * t)]],
                     _analytic, id='list_func_H'),
        pytest.param([[H1, 'exp(-alpha*t)']],
                     _analytic, id='list_str_H'),
        pytest.param([[H1, np.exp(-args['alpha'] * tlist)]],
                     _analytic, id='list_array_H'),
        pytest.param(qutip.QobjEvo([[H1, 'exp(-alpha*t)']], args=args),
                     _analytic, id='QobjEvo_H'),
    ])"
qutip_qutip_v5.0.4,test_sesolve.py,python,"[pytest.mark.parametrize(['state_type'], [
        pytest.param(""ket"", id=""ket""),
        pytest.param(""unitary"", id=""unitary""),
    ])] TestSeSolve.test_sesolve_normalization(self, state_type)",class_method,,,,"Class method: [pytest.mark.parametrize(['state_type'], [
        pytest.param(""ket"", id=""ket""),
        pytest.param(""unitary"", id=""unitary""),
    ])] TestSeSolve.test_sesolve_normalization(self, state_type)",qutip,qutip,v5.0.4,,,,,,,TestSeSolve,test_sesolve_normalization,"(self, state_type)",,,,,,,,,"pytest.mark.parametrize(['state_type'], [
        pytest.param(""ket"", id=""ket""),
        pytest.param(""unitary"", id=""unitary""),
    ])"
qutip_qutip_v5.0.4,test_sesolve.py,python,"[pytest.mark.parametrize(['unitary_op'], [
        pytest.param(None, id=""state""),
        pytest.param(qutip.qeye(2), id=""unitary""),
    ])] TestSeSolve.test_sesolve_method(self, method, unitary_op)",class_method,,,,"Class method: [pytest.mark.parametrize(['unitary_op'], [
        pytest.param(None, id=""state""),
        pytest.param(qutip.qeye(2), id=""unitary""),
    ])] TestSeSolve.test_sesolve_method(self, method, unitary_op)",qutip,qutip,v5.0.4,,,,,,,TestSeSolve,test_sesolve_method,"(self, method, unitary_op)",,,,,,,,,"pytest.mark.parametrize(['unitary_op'], [
        pytest.param(None, id=""state""),
        pytest.param(qutip.qeye(2), id=""unitary""),
    ])"
qutip_qutip_v5.0.4,test_sesolve.py,python,"[pytest.mark.parametrize('method', all_ode_method, ids=all_ode_method)] TestSeSolve.test_sesolve_method(self, method, unitary_op)",class_method,,,,"Class method: [pytest.mark.parametrize('method', all_ode_method, ids=all_ode_method)] TestSeSolve.test_sesolve_method(self, method, unitary_op)",qutip,qutip,v5.0.4,,,,,,,TestSeSolve,test_sesolve_method,"(self, method, unitary_op)",,,,,,,,,"pytest.mark.parametrize('method', all_ode_method, ids=all_ode_method)"
qutip_qutip_v5.0.4,test_sesolve.py,python,"[pytest.mark.parametrize('normalize', [True, False],
                             ids=['Normalized', ''])] TestSeSolve.test_compare_evolution(self, H, normalize, args, tol=5e-5)",class_method,,,,"Class method: [pytest.mark.parametrize('normalize', [True, False],
                             ids=['Normalized', ''])] TestSeSolve.test_compare_evolution(self, H, normalize, args, tol=5e-5)",qutip,qutip,v5.0.4,,,,,,,TestSeSolve,test_compare_evolution,"(self, H, normalize, args, tol=5e-5)",,,,,,,,,"pytest.mark.parametrize('normalize', [True, False],
                             ids=['Normalized', ''])"
qutip_qutip_v5.0.4,test_sesolve.py,python,"[pytest.mark.parametrize(['H', 'args'],
        [pytest.param(H0 + H1, {}, id='const_H'),
         pytest.param(lambda t, a, w_a: (
             a * t * 0.2 * np.pi * qutip.sigmaz() +
             np.cos(w_a * t) * np.pi * qutip.sigmax()
         ), {'a':a, 'w_a':w_a}, id='func_H'),
         pytest.param([
             [H0, lambda t, args: args['a']*t],
             [H1, lambda t, args: np.cos(args['w_a']*t)]
         ], {'a':a, 'w_a':w_a}, id='list_func_H'),
         pytest.param([H0, [H1, 'cos(w_a*t)']], {'w_a':w_a}, id='list_str_H'),
    ])] TestSeSolve.test_compare_evolution(self, H, normalize, args, tol=5e-5)",class_method,,,,"Class method: [pytest.mark.parametrize(['H', 'args'],
        [pytest.param(H0 + H1, {}, id='const_H'),
         pytest.param(lambda t, a, w_a: (
             a * t * 0.2 * np.pi * qutip.sigmaz() +
             np.cos(w_a * t) * np.pi * qutip.sigmax()
         ), {'a':a, 'w_a':w_a}, id='func_H'),
         pytest.param([
             [H0, lambda t, args: args['a']*t],
             [H1, lambda t, args: np.cos(args['w_a']*t)]
         ], {'a':a, 'w_a':w_a}, id='list_func_H'),
         pytest.param([H0, [H1, 'cos(w_a*t)']], {'w_a':w_a}, id='list_str_H'),
    ])] TestSeSolve.test_compare_evolution(self, H, normalize, args, tol=5e-5)",qutip,qutip,v5.0.4,,,,,,,TestSeSolve,test_compare_evolution,"(self, H, normalize, args, tol=5e-5)",,,,,,,,,"pytest.mark.parametrize(['H', 'args'],
        [pytest.param(H0 + H1, {}, id='const_H'),
         pytest.param(lambda t, a, w_a: (
             a * t * 0.2 * np.pi * qutip.sigmaz() +
             np.cos(w_a * t) * np.pi * qutip.sigmax()
         ), {'a':a, 'w_a':w_a}, id='func_H'),
         pytest.param([
             [H0, lambda t, args: args['a']*t],
             [H1, lambda t, args: np.cos(args['w_a']*t)]
         ], {'a':a, 'w_a':w_a}, id='list_func_H'),
         pytest.param([H0, [H1, 'cos(w_a*t)']], {'w_a':w_a}, id='list_str_H'),
    ])"
qutip_qutip_v5.0.4,test_sesolve.py,python,TestSeSolve.test_sesolver_args(self),class_method,,,,Class method: TestSeSolve.test_sesolver_args(self),qutip,qutip,v5.0.4,,,,,,,TestSeSolve,test_sesolver_args,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_sesolve.py,python,TestSeSolve.test_sesolver_pickling(self),class_method,,,,Class method: TestSeSolve.test_sesolver_pickling(self),qutip,qutip,v5.0.4,,,,,,,TestSeSolve,test_sesolver_pickling,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_sesolve.py,python,"[pytest.mark.parametrize('method', all_ode_method, ids=all_ode_method)] TestSeSolve.test_sesolver_stepping(self, method)",class_method,,,,"Class method: [pytest.mark.parametrize('method', all_ode_method, ids=all_ode_method)] TestSeSolve.test_sesolver_stepping(self, method)",qutip,qutip,v5.0.4,,,,,,,TestSeSolve,test_sesolver_stepping,"(self, method)",,,,,,,,,"pytest.mark.parametrize('method', all_ode_method, ids=all_ode_method)"
qutip_qutip_v5.0.4,test_sesolve.py,python,TestSeSolve(),class,,,,Class: TestSeSolve(),qutip,qutip,v5.0.4,,,,,,,TestSeSolve,,,,,,,,,(),,
qutip_qutip_v5.0.4,test_sesolve.py,python,"_analytic(t, alpha)",function,,,,"Function: _analytic(t, alpha)",qutip,qutip,v5.0.4,,,,_analytic,"(t, alpha)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sesolve.py,python,test_sesolve_bad_H(),function,,,,Function: test_sesolve_bad_H(),qutip,qutip,v5.0.4,,,,test_sesolve_bad_H,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sesolve.py,python,test_sesolve_bad_state(),function,,,,Function: test_sesolve_bad_state(),qutip,qutip,v5.0.4,,,,test_sesolve_bad_state,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sesolve.py,python,test_sesolve_step_no_start(),function,,,,Function: test_sesolve_step_no_start(),qutip,qutip,v5.0.4,,,,test_sesolve_step_no_start,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sesolve.py,python,test_krylovsolve_error(),function,,,,Function: test_krylovsolve_error(),qutip,qutip,v5.0.4,,,,test_krylovsolve_error,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sesolve.py,python,test_feedback(),function,,,,Function: test_feedback(),qutip,qutip,v5.0.4,,,,test_feedback,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sesolve.py,python,"all_ode_method = [
    method for method, integrator in SESolver.avail_integrators().items()
    if integrator.support_time_dependant
]",constant,"all_ode_method = [
    method for method, integrator in SESolver.avail_integrators().items()
    if integrator.support_time_dependant
]",all_ode_method,"[
    method for method, integrator in SESolver.avail_integrators().items()
    if integrator.support_time_dependant
]","Constant: all_ode_method = [
    method for method, integrator in SESolver.avail_integrators().items()
    if integrator.support_time_dependant
]",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sesolve.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sesolve.py,python,pickle,import,,,,Import: pickle,qutip,qutip,v5.0.4,import pickle,,pickle,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sesolve.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sesolve.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sesolve.py,python,sesolve from qutip.solver.sesolve,local_import,,,,Import: sesolve from qutip.solver.sesolve,qutip,qutip,v5.0.4,"from qutip.solver.sesolve import sesolve, SESolver",qutip.solver.sesolve,sesolve,,,qutip.solver.sesolve,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sesolve.py,python,SESolver from qutip.solver.sesolve,local_import,,,,Import: SESolver from qutip.solver.sesolve,qutip,qutip,v5.0.4,"from qutip.solver.sesolve import sesolve, SESolver",qutip.solver.sesolve,SESolver,,,qutip.solver.sesolve,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sesolve.py,python,krylovsolve from qutip.solver.krylovsolve,local_import,,,,Import: krylovsolve from qutip.solver.krylovsolve,qutip,qutip,v5.0.4,from qutip.solver.krylovsolve import krylovsolve,qutip.solver.krylovsolve,krylovsolve,,,qutip.solver.krylovsolve,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sesolve.py,python,Solver from qutip.solver.solver_base,local_import,,,,Import: Solver from qutip.solver.solver_base,qutip,qutip,v5.0.4,from qutip.solver.solver_base import Solver,qutip.solver.solver_base,Solver,,,qutip.solver.solver_base,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sesolve.py,python,WARN_MISSING_MODULE from qutip.core.coefficient,local_import,,,,Import: WARN_MISSING_MODULE from qutip.core.coefficient,qutip,qutip,v5.0.4,from qutip.core.coefficient import WARN_MISSING_MODULE,qutip.core.coefficient,WARN_MISSING_MODULE,,,qutip.core.coefficient,,,,,,,,,,,,
,test_sesolve.py,python,,,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_sesolve.py,python,,,,,,Directory: qutip\tests\solver\test_sesolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,"get_error_order(system, state, method, plot=False, **kw)",function,,,,"Function: get_error_order(system, state, method, plot=False, **kw)",qutip,qutip,v5.0.4,,,,get_error_order,"(system, state, method, plot=False, **kw)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,"_make_oper(kind, N)",function,,,,"Function: _make_oper(kind, N)",qutip,qutip,v5.0.4,,,,_make_oper,"(kind, N)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,"get_error_order_integrator(integrator, ref_integrator, state, plot=False)",function,,,,"Function: get_error_order_integrator(integrator, ref_integrator, state, plot=False)",qutip,qutip,v5.0.4,,,,get_error_order_integrator,"(integrator, ref_integrator, state, plot=False)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,product from itertools,import,,,,Import: product from itertools,qutip,qutip,v5.0.4,from itertools import product,itertools,product,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,qeye from qutip,import,,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import (qeye, destroy, QobjEvo, rand_ket, rand_herm, create, Qobj,
                   operator_to_vector, fock_dm)",qutip,qeye,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,destroy from qutip,import,,,,Import: destroy from qutip,qutip,qutip,v5.0.4,"from qutip import (qeye, destroy, QobjEvo, rand_ket, rand_herm, create, Qobj,
                   operator_to_vector, fock_dm)",qutip,destroy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,QobjEvo from qutip,import,,,,Import: QobjEvo from qutip,qutip,qutip,v5.0.4,"from qutip import (qeye, destroy, QobjEvo, rand_ket, rand_herm, create, Qobj,
                   operator_to_vector, fock_dm)",qutip,QobjEvo,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,rand_ket from qutip,import,,,,Import: rand_ket from qutip,qutip,qutip,v5.0.4,"from qutip import (qeye, destroy, QobjEvo, rand_ket, rand_herm, create, Qobj,
                   operator_to_vector, fock_dm)",qutip,rand_ket,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,rand_herm from qutip,import,,,,Import: rand_herm from qutip,qutip,qutip,v5.0.4,"from qutip import (qeye, destroy, QobjEvo, rand_ket, rand_herm, create, Qobj,
                   operator_to_vector, fock_dm)",qutip,rand_herm,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,create from qutip,import,,,,Import: create from qutip,qutip,qutip,v5.0.4,"from qutip import (qeye, destroy, QobjEvo, rand_ket, rand_herm, create, Qobj,
                   operator_to_vector, fock_dm)",qutip,create,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,Qobj from qutip,import,,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import (qeye, destroy, QobjEvo, rand_ket, rand_herm, create, Qobj,
                   operator_to_vector, fock_dm)",qutip,Qobj,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,operator_to_vector from qutip,import,,,,Import: operator_to_vector from qutip,qutip,qutip,v5.0.4,"from qutip import (qeye, destroy, QobjEvo, rand_ket, rand_herm, create, Qobj,
                   operator_to_vector, fock_dm)",qutip,operator_to_vector,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,fock_dm from qutip,import,,,,Import: fock_dm from qutip,qutip,qutip,v5.0.4,"from qutip import (qeye, destroy, QobjEvo, rand_ket, rand_herm, create, Qobj,
                   operator_to_vector, fock_dm)",qutip,fock_dm,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,qutip.solver.sode._sode,import,,,,Import: qutip.solver.sode._sode,qutip,qutip,v5.0.4,import qutip.solver.sode._sode as _sode,,qutip.solver.sode._sode,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,data from qutip.core,local_import,,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,qutip.core,data,,,qutip.core,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,SimpleStochasticSystem from qutip.solver.sode.ssystem,local_import,,,,Import: SimpleStochasticSystem from qutip.solver.sode.ssystem,qutip,qutip,v5.0.4,"from qutip.solver.sode.ssystem import (
    SimpleStochasticSystem, StochasticOpenSystem, StochasticClosedSystem
)",qutip.solver.sode.ssystem,SimpleStochasticSystem,,,qutip.solver.sode.ssystem,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,StochasticOpenSystem from qutip.solver.sode.ssystem,local_import,,,,Import: StochasticOpenSystem from qutip.solver.sode.ssystem,qutip,qutip,v5.0.4,"from qutip.solver.sode.ssystem import (
    SimpleStochasticSystem, StochasticOpenSystem, StochasticClosedSystem
)",qutip.solver.sode.ssystem,StochasticOpenSystem,,,qutip.solver.sode.ssystem,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,StochasticClosedSystem from qutip.solver.sode.ssystem,local_import,,,,Import: StochasticClosedSystem from qutip.solver.sode.ssystem,qutip,qutip,v5.0.4,"from qutip.solver.sode.ssystem import (
    SimpleStochasticSystem, StochasticOpenSystem, StochasticClosedSystem
)",qutip.solver.sode.ssystem,StochasticClosedSystem,,,qutip.solver.sode.ssystem,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,_Noise from qutip.solver.sode._noise,local_import,,,,Import: _Noise from qutip.solver.sode._noise,qutip,qutip,v5.0.4,from qutip.solver.sode._noise import _Noise,qutip.solver.sode._noise,_Noise,,,qutip.solver.sode._noise,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,SMESolver from qutip.solver.stochastic,local_import,,,,Import: SMESolver from qutip.solver.stochastic,qutip,qutip,v5.0.4,"from qutip.solver.stochastic import SMESolver, _StochasticRHS",qutip.solver.stochastic,SMESolver,,,qutip.solver.stochastic,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_sode_method.py,python,_StochasticRHS from qutip.solver.stochastic,local_import,,,,Import: _StochasticRHS from qutip.solver.stochastic,qutip,qutip,v5.0.4,"from qutip.solver.stochastic import SMESolver, _StochasticRHS",qutip.solver.stochastic,_StochasticRHS,,,qutip.solver.stochastic,,,,,,,,,,,,
,test_sode_method.py,python,,,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_sode_method.py,python,,,,,,Directory: qutip\tests\solver\test_sode_method.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_steadystate.py,python,test_rcm(),function,,,,Function: test_rcm(),qutip,qutip,v5.0.4,,,,test_rcm,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_steadystate.py,python,test_wbm(),function,,,,Function: test_wbm(),qutip,qutip,v5.0.4,,,,test_wbm,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_steadystate.py,python,test_bad_options_steadystate(),function,,,,Function: test_bad_options_steadystate(),qutip,qutip,v5.0.4,,,,test_bad_options_steadystate,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_steadystate.py,python,test_bad_options_pseudo_inverse(),function,,,,Function: test_bad_options_pseudo_inverse(),qutip,qutip,v5.0.4,,,,test_bad_options_pseudo_inverse,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_steadystate.py,python,test_bad_system(),function,,,,Function: test_bad_system(),qutip,qutip,v5.0.4,,,,test_bad_system,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_steadystate.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_steadystate.py,python,scipy,import,,,,Import: scipy,qutip,qutip,v5.0.4,import scipy,,scipy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_steadystate.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_steadystate.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_steadystate.py,python,warnings,import,,,,Import: warnings,qutip,qutip,v5.0.4,import warnings,,warnings,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_steadystate.py,python,version from packaging,import,,,,Import: version from packaging,qutip,qutip,v5.0.4,from packaging import version as pac_version,packaging,version,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_steadystate.py,python,qutip.core.data,import,,,,Import: qutip.core.data,qutip,qutip,v5.0.4,import qutip.core.data as _data,,qutip.core.data,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_steadystate.py,python,_permute_rcm from qutip.solver.steadystate,local_import,,,,Import: _permute_rcm from qutip.solver.steadystate,qutip,qutip,v5.0.4,"from qutip.solver.steadystate import _permute_rcm, _permute_wbm",qutip.solver.steadystate,_permute_rcm,,,qutip.solver.steadystate,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_steadystate.py,python,_permute_wbm from qutip.solver.steadystate,local_import,,,,Import: _permute_wbm from qutip.solver.steadystate,qutip,qutip,v5.0.4,"from qutip.solver.steadystate import _permute_rcm, _permute_wbm",qutip.solver.steadystate,_permute_wbm,,,qutip.solver.steadystate,,,,,,,,,,,,
,test_steadystate.py,python,,,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_steadystate.py,python,,,,,,Directory: qutip\tests\solver\test_steadystate.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,"f(t, w)",function,,,,"Function: f(t, w)",qutip,qutip,v5.0.4,,,,f,"(t, w)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,"_make_system(N, system)",function,,,,"Function: _make_system(N, system)",qutip,qutip,v5.0.4,,,,_make_system,"(N, system)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,test_reuse_seeds(),function,,,,Function: test_reuse_seeds(),qutip,qutip,v5.0.4,,,,test_reuse_seeds,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,test_feedback(),function,,,,Function: test_feedback(),qutip,qutip,v5.0.4,,,,test_feedback,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,test_deprecation_warnings(),function,,,,Function: test_deprecation_warnings(),qutip,qutip,v5.0.4,,,,test_deprecation_warnings,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,mesolve from qutip,import,,,,Import: mesolve from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",qutip,mesolve,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,liouvillian from qutip,import,,,,Import: liouvillian from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",qutip,liouvillian,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,QobjEvo from qutip,import,,,,Import: QobjEvo from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",qutip,QobjEvo,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,spre from qutip,import,,,,Import: spre from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",qutip,spre,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,spost from qutip,import,,,,Import: spost from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",qutip,spost,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,destroy from qutip,import,,,,Import: destroy from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",qutip,destroy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,coherent from qutip,import,,,,Import: coherent from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",qutip,coherent,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,qeye from qutip,import,,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",qutip,qeye,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,fock_dm from qutip,import,,,,Import: fock_dm from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",qutip,fock_dm,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,num from qutip,import,,,,Import: num from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",qutip,num,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,basis from qutip,import,,,,Import: basis from qutip,qutip,qutip,v5.0.4,"from qutip import (
    mesolve, liouvillian, QobjEvo, spre, spost,
    destroy, coherent, qeye, fock_dm, num, basis
)",qutip,basis,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,smesolve from qutip.solver.stochastic,local_import,,,,Import: smesolve from qutip.solver.stochastic,qutip,qutip,v5.0.4,"from qutip.solver.stochastic import smesolve, ssesolve, SMESolver, SSESolver",qutip.solver.stochastic,smesolve,,,qutip.solver.stochastic,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,ssesolve from qutip.solver.stochastic,local_import,,,,Import: ssesolve from qutip.solver.stochastic,qutip,qutip,v5.0.4,"from qutip.solver.stochastic import smesolve, ssesolve, SMESolver, SSESolver",qutip.solver.stochastic,ssesolve,,,qutip.solver.stochastic,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,SMESolver from qutip.solver.stochastic,local_import,,,,Import: SMESolver from qutip.solver.stochastic,qutip,qutip,v5.0.4,"from qutip.solver.stochastic import smesolve, ssesolve, SMESolver, SSESolver",qutip.solver.stochastic,SMESolver,,,qutip.solver.stochastic,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,SSESolver from qutip.solver.stochastic,local_import,,,,Import: SSESolver from qutip.solver.stochastic,qutip,qutip,v5.0.4,"from qutip.solver.stochastic import smesolve, ssesolve, SMESolver, SSESolver",qutip.solver.stochastic,SSESolver,,,qutip.solver.stochastic,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_stochastic.py,python,data from qutip.core,local_import,,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,qutip.core,data,,,qutip.core,,,,,,,,,,,,
,test_stochastic.py,python,,,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_stochastic.py,python,,,,,,Directory: qutip\tests\solver\test_stochastic.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_transfertensor.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_transfertensor.py,python,qutip,import,,,,Import: qutip,qutip,qutip,v5.0.4,import qutip,,qutip,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_transfertensor.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_transfertensor.py,python,ttmsolve from qutip.solver.nonmarkov.transfertensor,local_import,,,,Import: ttmsolve from qutip.solver.nonmarkov.transfertensor,qutip,qutip,v5.0.4,from qutip.solver.nonmarkov.transfertensor import ttmsolve,qutip.solver.nonmarkov.transfertensor,ttmsolve,,,qutip.solver.nonmarkov.transfertensor,,,,,,,,,,,,
,test_transfertensor.py,python,,,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_transfertensor.py,python,,,,,,Directory: qutip\tests\solver\test_transfertensor.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: qutip\tests\solver,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: qutip\tests\solver\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,[instance] RateSet.coeffs = coeffs,class_field,,,,Class field: [instance] RateSet.coeffs = coeffs,qutip,qutip,v5.0.4,,,,,,,RateSet,__init__,"(self, coeffs, tlist)",self.coeffs = coeffs,self.coeffs = coeffs,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,[instance] RateSet.tlist = tlist,class_field,,,,Class field: [instance] RateSet.tlist = tlist,qutip,qutip,v5.0.4,,,,,,,RateSet,__init__,"(self, coeffs, tlist)",self.tlist = tlist,self.tlist = tlist,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"RateSet.__init__(self, coeffs, tlist)",class_method,,,,"Class method: RateSet.__init__(self, coeffs, tlist)",qutip,qutip,v5.0.4,,,,,,,RateSet,__init__,"(self, coeffs, tlist)",,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"[staticmethod] TestRateShiftCoefficient.assert_f_equals_rate_shift(f, coeffs, tlist, **kw)",class_method,,,,"Class method: [staticmethod] TestRateShiftCoefficient.assert_f_equals_rate_shift(f, coeffs, tlist, **kw)",qutip,qutip,v5.0.4,,,,,,,TestRateShiftCoefficient,assert_f_equals_rate_shift,"(f, coeffs, tlist, **kw)",,,,,,,,,staticmethod
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"TestRateShiftCoefficient.test_call(self, rates)",class_method,,,,"Class method: TestRateShiftCoefficient.test_call(self, rates)",qutip,qutip,v5.0.4,,,,,,,TestRateShiftCoefficient,test_call,"(self, rates)",,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"TestRateShiftCoefficient.test_as_double(self, rates)",class_method,,,,"Class method: TestRateShiftCoefficient.test_as_double(self, rates)",qutip,qutip,v5.0.4,,,,,,,TestRateShiftCoefficient,test_as_double,"(self, rates)",,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"TestRateShiftCoefficient.test_copy(self, rates)",class_method,,,,"Class method: TestRateShiftCoefficient.test_copy(self, rates)",qutip,qutip,v5.0.4,,,,,,,TestRateShiftCoefficient,test_copy,"(self, rates)",,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,TestRateShiftCoefficient.test_replace_arguments(self),class_method,,,,Class method: TestRateShiftCoefficient.test_replace_arguments(self),qutip,qutip,v5.0.4,,,,,,,TestRateShiftCoefficient,test_replace_arguments,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,TestRateShiftCoefficient.test_reduce(self),class_method,,,,Class method: TestRateShiftCoefficient.test_reduce(self),qutip,qutip,v5.0.4,,,,,,,TestRateShiftCoefficient,test_reduce,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"[staticmethod] TestSqrtRealCoefficient.assert_f_equals_sqrt_real(f, coeff, tlist, **kw)",class_method,,,,"Class method: [staticmethod] TestSqrtRealCoefficient.assert_f_equals_sqrt_real(f, coeff, tlist, **kw)",qutip,qutip,v5.0.4,,,,,,,TestSqrtRealCoefficient,assert_f_equals_sqrt_real,"(f, coeff, tlist, **kw)",,,,,,,,,staticmethod
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,TestSqrtRealCoefficient.test_call(self),class_method,,,,Class method: TestSqrtRealCoefficient.test_call(self),qutip,qutip,v5.0.4,,,,,,,TestSqrtRealCoefficient,test_call,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,TestSqrtRealCoefficient.test_copy(self),class_method,,,,Class method: TestSqrtRealCoefficient.test_copy(self),qutip,qutip,v5.0.4,,,,,,,TestSqrtRealCoefficient,test_copy,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,TestSqrtRealCoefficient.test_replace_arguments(self),class_method,,,,Class method: TestSqrtRealCoefficient.test_replace_arguments(self),qutip,qutip,v5.0.4,,,,,,,TestSqrtRealCoefficient,test_replace_arguments,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,TestSqrtRealCoefficient.test_reduce(self),class_method,,,,Class method: TestSqrtRealCoefficient.test_reduce(self),qutip,qutip,v5.0.4,,,,,,,TestSqrtRealCoefficient,test_reduce,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,RateSet,class,,,,Class: RateSet,qutip,qutip,v5.0.4,,,,,,,RateSet,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,TestRateShiftCoefficient,class,,,,Class: TestRateShiftCoefficient,qutip,qutip,v5.0.4,,,,,,,TestRateShiftCoefficient,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,TestSqrtRealCoefficient,class,,,,Class: TestSqrtRealCoefficient,qutip,qutip,v5.0.4,,,,,,,TestSqrtRealCoefficient,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"assert_functions_equal(f, g, tlist, rtol=1e-12, atol=1e-12)",function,,,,"Function: assert_functions_equal(f, g, tlist, rtol=1e-12, atol=1e-12)",qutip,qutip,v5.0.4,,,,assert_functions_equal,"(f, g, tlist, rtol=1e-12, atol=1e-12)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,"rate_set(coeffs, *, tlist=np.linspace(0, 1, 20), args=None, **kw)",function,,,,"Function: rate_set(coeffs, *, tlist=np.linspace(0, 1, 20), args=None, **kw)",qutip,qutip,v5.0.4,,,,rate_set,"(coeffs, *, tlist=np.linspace(0, 1, 20), args=None, **kw)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,sin_t(t),function,,,,Function: sin_t(t),qutip,qutip,v5.0.4,,,,sin_t,(t),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,numbers,import,,,,Import: numbers,qutip,qutip,v5.0.4,import numbers,,numbers,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,pickle,import,,,,Import: pickle,qutip,qutip,v5.0.4,import pickle,,pickle,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,coefficient from qutip,import,,,,Import: coefficient from qutip,qutip,qutip,v5.0.4,from qutip import coefficient,qutip,coefficient,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,ConstantCoefficient from qutip.core.coefficient,local_import,,,,Import: ConstantCoefficient from qutip.core.coefficient,qutip,qutip,v5.0.4,from qutip.core.coefficient import ConstantCoefficient,qutip.core.coefficient,ConstantCoefficient,,,qutip.core.coefficient,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,RateShiftCoefficient from qutip.solver.cy.nm_mcsolve,local_import,,,,Import: RateShiftCoefficient from qutip.solver.cy.nm_mcsolve,qutip,qutip,v5.0.4,"from qutip.solver.cy.nm_mcsolve import (
    RateShiftCoefficient, SqrtRealCoefficient,
)",qutip.solver.cy.nm_mcsolve,RateShiftCoefficient,,,qutip.solver.cy.nm_mcsolve,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_nm_mcsolve.py,python,SqrtRealCoefficient from qutip.solver.cy.nm_mcsolve,local_import,,,,Import: SqrtRealCoefficient from qutip.solver.cy.nm_mcsolve,qutip,qutip,v5.0.4,"from qutip.solver.cy.nm_mcsolve import (
    RateShiftCoefficient, SqrtRealCoefficient,
)",qutip.solver.cy.nm_mcsolve,SqrtRealCoefficient,,,qutip.solver.cy.nm_mcsolve,,,,,,,,,,,,
,test_nm_mcsolve.py,python,,,,,,File: qutip\tests\solver\cy,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_nm_mcsolve.py,python,,,,,,Directory: qutip\tests\solver\cy\test_nm_mcsolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,TestBathExponent.test_create(self),class_method,,,,Class method: TestBathExponent.test_create(self),qutip,qutip,v5.0.4,,,,,,,TestBathExponent,test_create,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,TestBathExponent.test_repr(self),class_method,,,,Class method: TestBathExponent.test_repr(self),qutip,qutip,v5.0.4,,,,,,,TestBathExponent,test_repr,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,TestBath.test_create(self),class_method,,,,Class method: TestBath.test_create(self),qutip,qutip,v5.0.4,,,,,,,TestBath,test_create,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,TestBosonicBath.test_create(self),class_method,,,,Class method: TestBosonicBath.test_create(self),qutip,qutip,v5.0.4,,,,,,,TestBosonicBath,test_create,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,TestBosonicBath.test_combine(self),class_method,,,,Class method: TestBosonicBath.test_combine(self),qutip,qutip,v5.0.4,,,,,,,TestBosonicBath,test_combine,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,TestDrudeLorentzBath.test_create(self),class_method,,,,Class method: TestDrudeLorentzBath.test_create(self),qutip,qutip,v5.0.4,,,,,,,TestDrudeLorentzBath,test_create,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,"[pytest.mark.parametrize(['combine'], [
        pytest.param(True, id=""combine""),
        pytest.param(False, id=""no-combine""),
    ])] TestDrudeLorentzBath.test_terminator(self, combine)",class_method,,,,"Class method: [pytest.mark.parametrize(['combine'], [
        pytest.param(True, id=""combine""),
        pytest.param(False, id=""no-combine""),
    ])] TestDrudeLorentzBath.test_terminator(self, combine)",qutip,qutip,v5.0.4,,,,,,,TestDrudeLorentzBath,test_terminator,"(self, combine)",,,,,,,,,"pytest.mark.parametrize(['combine'], [
        pytest.param(True, id=""combine""),
        pytest.param(False, id=""no-combine""),
    ])"
qutip_qutip_v5.0.4,test_bofin_baths.py,python,TestDrudeLorentzPadeBath.test_create(self),class_method,,,,Class method: TestDrudeLorentzPadeBath.test_create(self),qutip,qutip,v5.0.4,,,,,,,TestDrudeLorentzPadeBath,test_create,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,"[pytest.mark.parametrize(['combine'], [
        pytest.param(True, id=""combine""),
        pytest.param(False, id=""no-combine""),
    ])] TestDrudeLorentzPadeBath.test_terminator(self, combine)",class_method,,,,"Class method: [pytest.mark.parametrize(['combine'], [
        pytest.param(True, id=""combine""),
        pytest.param(False, id=""no-combine""),
    ])] TestDrudeLorentzPadeBath.test_terminator(self, combine)",qutip,qutip,v5.0.4,,,,,,,TestDrudeLorentzPadeBath,test_terminator,"(self, combine)",,,,,,,,,"pytest.mark.parametrize(['combine'], [
        pytest.param(True, id=""combine""),
        pytest.param(False, id=""no-combine""),
    ])"
qutip_qutip_v5.0.4,test_bofin_baths.py,python,TestUnderDampedBath.test_create(self),class_method,,,,Class method: TestUnderDampedBath.test_create(self),qutip,qutip,v5.0.4,,,,,,,TestUnderDampedBath,test_create,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,TestFermionicBath.test_create(self),class_method,,,,Class method: TestFermionicBath.test_create(self),qutip,qutip,v5.0.4,,,,,,,TestFermionicBath,test_create,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,TestLorentzianBath.test_create(self),class_method,,,,Class method: TestLorentzianBath.test_create(self),qutip,qutip,v5.0.4,,,,,,,TestLorentzianBath,test_create,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,TestLorentzianPadeBath.test_create(self),class_method,,,,Class method: TestLorentzianPadeBath.test_create(self),qutip,qutip,v5.0.4,,,,,,,TestLorentzianPadeBath,test_create,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,TestBathExponent,class,,,,Class: TestBathExponent,qutip,qutip,v5.0.4,,,,,,,TestBathExponent,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,TestBath,class,,,,Class: TestBath,qutip,qutip,v5.0.4,,,,,,,TestBath,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,TestBosonicBath,class,,,,Class: TestBosonicBath,qutip,qutip,v5.0.4,,,,,,,TestBosonicBath,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,TestDrudeLorentzBath,class,,,,Class: TestDrudeLorentzBath,qutip,qutip,v5.0.4,,,,,,,TestDrudeLorentzBath,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,TestDrudeLorentzPadeBath,class,,,,Class: TestDrudeLorentzPadeBath,qutip,qutip,v5.0.4,,,,,,,TestDrudeLorentzPadeBath,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,TestUnderDampedBath,class,,,,Class: TestUnderDampedBath,qutip,qutip,v5.0.4,,,,,,,TestUnderDampedBath,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,TestFermionicBath,class,,,,Class: TestFermionicBath,qutip,qutip,v5.0.4,,,,,,,TestFermionicBath,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,TestLorentzianBath,class,,,,Class: TestLorentzianBath,qutip,qutip,v5.0.4,,,,,,,TestLorentzianBath,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,TestLorentzianPadeBath,class,,,,Class: TestLorentzianPadeBath,qutip,qutip,v5.0.4,,,,,,,TestLorentzianPadeBath,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,"isequal(Q1, Q2, tol)",function,,,,"Function: isequal(Q1, Q2, tol)",qutip,qutip,v5.0.4,,,,isequal,"(Q1, Q2, tol)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,"check_exponent(
    exp, type, dim, Q, ck, vk, ck2=None, sigma_bar_k_offset=None, tag=None,
)",function,,,,"Function: check_exponent(
    exp, type, dim, Q, ck, vk, ck2=None, sigma_bar_k_offset=None, tag=None,
)",qutip,qutip,v5.0.4,,,,check_exponent,"(
    exp, type, dim, Q, ck, vk, ck2=None, sigma_bar_k_offset=None, tag=None,
)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,spre from qutip,import,,,,Import: spre from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, sigmax, sigmaz",qutip,spre,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,spost from qutip,import,,,,Import: spost from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, sigmax, sigmaz",qutip,spost,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,sigmax from qutip,import,,,,Import: sigmax from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, sigmax, sigmaz",qutip,sigmax,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,sigmaz from qutip,import,,,,Import: sigmaz from qutip,qutip,qutip,v5.0.4,"from qutip import spre, spost, sigmax, sigmaz",qutip,sigmaz,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,data from qutip.core,local_import,,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,qutip.core,data,,,qutip.core,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,BathExponent from qutip.solver.heom.bofin_baths,local_import,,,,Import: BathExponent from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",qutip.solver.heom.bofin_baths,BathExponent,,,qutip.solver.heom.bofin_baths,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,Bath from qutip.solver.heom.bofin_baths,local_import,,,,Import: Bath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",qutip.solver.heom.bofin_baths,Bath,,,qutip.solver.heom.bofin_baths,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,BosonicBath from qutip.solver.heom.bofin_baths,local_import,,,,Import: BosonicBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",qutip.solver.heom.bofin_baths,BosonicBath,,,qutip.solver.heom.bofin_baths,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,DrudeLorentzBath from qutip.solver.heom.bofin_baths,local_import,,,,Import: DrudeLorentzBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",qutip.solver.heom.bofin_baths,DrudeLorentzBath,,,qutip.solver.heom.bofin_baths,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,DrudeLorentzPadeBath from qutip.solver.heom.bofin_baths,local_import,,,,Import: DrudeLorentzPadeBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",qutip.solver.heom.bofin_baths,DrudeLorentzPadeBath,,,qutip.solver.heom.bofin_baths,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,UnderDampedBath from qutip.solver.heom.bofin_baths,local_import,,,,Import: UnderDampedBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",qutip.solver.heom.bofin_baths,UnderDampedBath,,,qutip.solver.heom.bofin_baths,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,FermionicBath from qutip.solver.heom.bofin_baths,local_import,,,,Import: FermionicBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",qutip.solver.heom.bofin_baths,FermionicBath,,,qutip.solver.heom.bofin_baths,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,LorentzianBath from qutip.solver.heom.bofin_baths,local_import,,,,Import: LorentzianBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",qutip.solver.heom.bofin_baths,LorentzianBath,,,qutip.solver.heom.bofin_baths,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_baths.py,python,LorentzianPadeBath from qutip.solver.heom.bofin_baths,local_import,,,,Import: LorentzianPadeBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",qutip.solver.heom.bofin_baths,LorentzianPadeBath,,,qutip.solver.heom.bofin_baths,,,,,,,,,,,,
,test_bofin_baths.py,python,,,,,,File: qutip\tests\solver\heom,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_bofin_baths.py,python,,,,,,Directory: qutip\tests\solver\heom\test_bofin_baths.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] DrudeLorentzPureDephasingModel.lam = lam,class_field,,,,Class field: [instance] DrudeLorentzPureDephasingModel.lam = lam,qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPureDephasingModel,__init__,"(self, lam, gamma, T, Nk)",self.lam = lam,self.lam = lam,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] DrudeLorentzPureDephasingModel.gamma = gamma,class_field,,,,Class field: [instance] DrudeLorentzPureDephasingModel.gamma = gamma,qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPureDephasingModel,__init__,"(self, lam, gamma, T, Nk)",self.gamma = gamma,self.gamma = gamma,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] DrudeLorentzPureDephasingModel.T = T,class_field,,,,Class field: [instance] DrudeLorentzPureDephasingModel.T = T,qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPureDephasingModel,__init__,"(self, lam, gamma, T, Nk)",self.T = T,self.T = T,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] DrudeLorentzPureDephasingModel.Nk = Nk,class_field,,,,Class field: [instance] DrudeLorentzPureDephasingModel.Nk = Nk,qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPureDephasingModel,__init__,"(self, lam, gamma, T, Nk)",self.Nk = Nk,self.Nk = Nk,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[instance] DrudeLorentzPureDephasingModel.H = Qobj(1e-5 * np.ones((2, 2)))",class_field,,,,"Class field: [instance] DrudeLorentzPureDephasingModel.H = Qobj(1e-5 * np.ones((2, 2)))",qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPureDephasingModel,__init__,"(self, lam, gamma, T, Nk)","self.H = Qobj(1e-5 * np.ones((2, 2)))","self.H = Qobj(1e-5 * np.ones((2, 2)))",,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] DrudeLorentzPureDephasingModel.Q = sigmaz(),class_field,,,,Class field: [instance] DrudeLorentzPureDephasingModel.Q = sigmaz(),qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPureDephasingModel,__init__,"(self, lam, gamma, T, Nk)",self.Q = sigmaz(),self.Q = sigmaz(),,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] UnderdampedPureDephasingModel.lam = lam,class_field,,,,Class field: [instance] UnderdampedPureDephasingModel.lam = lam,qutip,qutip,v5.0.4,,,,,,,UnderdampedPureDephasingModel,__init__,"(self, lam,  gamma, w0, T, Nk)",self.lam = lam,self.lam = lam,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] UnderdampedPureDephasingModel.gamma = gamma,class_field,,,,Class field: [instance] UnderdampedPureDephasingModel.gamma = gamma,qutip,qutip,v5.0.4,,,,,,,UnderdampedPureDephasingModel,__init__,"(self, lam,  gamma, w0, T, Nk)",self.gamma = gamma,self.gamma = gamma,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] UnderdampedPureDephasingModel.w0 = w0,class_field,,,,Class field: [instance] UnderdampedPureDephasingModel.w0 = w0,qutip,qutip,v5.0.4,,,,,,,UnderdampedPureDephasingModel,__init__,"(self, lam,  gamma, w0, T, Nk)",self.w0 = w0,self.w0 = w0,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] UnderdampedPureDephasingModel.T = T,class_field,,,,Class field: [instance] UnderdampedPureDephasingModel.T = T,qutip,qutip,v5.0.4,,,,,,,UnderdampedPureDephasingModel,__init__,"(self, lam,  gamma, w0, T, Nk)",self.T = T,self.T = T,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] UnderdampedPureDephasingModel.Nk = Nk,class_field,,,,Class field: [instance] UnderdampedPureDephasingModel.Nk = Nk,qutip,qutip,v5.0.4,,,,,,,UnderdampedPureDephasingModel,__init__,"(self, lam,  gamma, w0, T, Nk)",self.Nk = Nk,self.Nk = Nk,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[instance] UnderdampedPureDephasingModel.H = Qobj(1e-5 * np.ones((2, 2)))",class_field,,,,"Class field: [instance] UnderdampedPureDephasingModel.H = Qobj(1e-5 * np.ones((2, 2)))",qutip,qutip,v5.0.4,,,,,,,UnderdampedPureDephasingModel,__init__,"(self, lam,  gamma, w0, T, Nk)","self.H = Qobj(1e-5 * np.ones((2, 2)))","self.H = Qobj(1e-5 * np.ones((2, 2)))",,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] UnderdampedPureDephasingModel.Q = sigmaz(),class_field,,,,Class field: [instance] UnderdampedPureDephasingModel.Q = sigmaz(),qutip,qutip,v5.0.4,,,,,,,UnderdampedPureDephasingModel,__init__,"(self, lam,  gamma, w0, T, Nk)",self.Q = sigmaz(),self.Q = sigmaz(),,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] BosonicMode.N = N,class_field,,,,Class field: [instance] BosonicMode.N = N,qutip,qutip,v5.0.4,,,,,,,BosonicMode,__init__,"(self, N, Lambda, Omega, gamma_b)",self.N = N,self.N = N,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] BosonicMode.Lambda = Lambda,class_field,,,,Class field: [instance] BosonicMode.Lambda = Lambda,qutip,qutip,v5.0.4,,,,,,,BosonicMode,__init__,"(self, N, Lambda, Omega, gamma_b)",self.Lambda = Lambda,self.Lambda = Lambda,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] BosonicMode.Omega = Omega,class_field,,,,Class field: [instance] BosonicMode.Omega = Omega,qutip,qutip,v5.0.4,,,,,,,BosonicMode,__init__,"(self, N, Lambda, Omega, gamma_b)",self.Omega = Omega,self.Omega = Omega,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] BosonicMode.gamma_b = gamma_b,class_field,,,,Class field: [instance] BosonicMode.gamma_b = gamma_b,qutip,qutip,v5.0.4,,,,,,,BosonicMode,__init__,"(self, N, Lambda, Omega, gamma_b)",self.gamma_b = gamma_b,self.gamma_b = gamma_b,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] DiscreteLevelCurrentModel.e1 = e1,class_field,,,,Class field: [instance] DiscreteLevelCurrentModel.e1 = e1,qutip,qutip,v5.0.4,,,,,,,DiscreteLevelCurrentModel,__init__,"(self, gamma, W, T, lmax, theta=2., e1=1., bosonic_mode=None)",self.e1 = e1,self.e1 = e1,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] DiscreteLevelCurrentModel.gamma = gamma,class_field,,,,Class field: [instance] DiscreteLevelCurrentModel.gamma = gamma,qutip,qutip,v5.0.4,,,,,,,DiscreteLevelCurrentModel,__init__,"(self, gamma, W, T, lmax, theta=2., e1=1., bosonic_mode=None)",self.gamma = gamma,self.gamma = gamma,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] DiscreteLevelCurrentModel.W = W,class_field,,,,Class field: [instance] DiscreteLevelCurrentModel.W = W,qutip,qutip,v5.0.4,,,,,,,DiscreteLevelCurrentModel,__init__,"(self, gamma, W, T, lmax, theta=2., e1=1., bosonic_mode=None)",self.W = W,self.W = W,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] DiscreteLevelCurrentModel.T = T,class_field,,,,Class field: [instance] DiscreteLevelCurrentModel.T = T,qutip,qutip,v5.0.4,,,,,,,DiscreteLevelCurrentModel,__init__,"(self, gamma, W, T, lmax, theta=2., e1=1., bosonic_mode=None)",self.T = T,self.T = T,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] DiscreteLevelCurrentModel.lmax = lmax,class_field,,,,Class field: [instance] DiscreteLevelCurrentModel.lmax = lmax,qutip,qutip,v5.0.4,,,,,,,DiscreteLevelCurrentModel,__init__,"(self, gamma, W, T, lmax, theta=2., e1=1., bosonic_mode=None)",self.lmax = lmax,self.lmax = lmax,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] DiscreteLevelCurrentModel.beta = 1. / T,class_field,,,,Class field: [instance] DiscreteLevelCurrentModel.beta = 1. / T,qutip,qutip,v5.0.4,,,,,,,DiscreteLevelCurrentModel,__init__,"(self, gamma, W, T, lmax, theta=2., e1=1., bosonic_mode=None)",self.beta = 1. / T,self.beta = 1. / T,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] DiscreteLevelCurrentModel.theta = theta,class_field,,,,Class field: [instance] DiscreteLevelCurrentModel.theta = theta,qutip,qutip,v5.0.4,,,,,,,DiscreteLevelCurrentModel,__init__,"(self, gamma, W, T, lmax, theta=2., e1=1., bosonic_mode=None)",self.theta = theta,self.theta = theta,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,[instance] DiscreteLevelCurrentModel.bosonic_mode = bosonic_mode,class_field,,,,Class field: [instance] DiscreteLevelCurrentModel.bosonic_mode = bosonic_mode,qutip,qutip,v5.0.4,,,,,,,DiscreteLevelCurrentModel,__init__,"(self, gamma, W, T, lmax, theta=2., e1=1., bosonic_mode=None)",self.bosonic_mode = bosonic_mode,self.bosonic_mode = bosonic_mode,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"TestHierarchyADOs.mk_exponents(self, dims)",class_method,,,,"Class method: TestHierarchyADOs.mk_exponents(self, dims)",qutip,qutip,v5.0.4,,,,,,,TestHierarchyADOs,mk_exponents,"(self, dims)",,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHierarchyADOs.test_create(self),class_method,,,,Class method: TestHierarchyADOs.test_create(self),qutip,qutip,v5.0.4,,,,,,,TestHierarchyADOs,test_create,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHierarchyADOs.test_state_idx(self),class_method,,,,Class method: TestHierarchyADOs.test_state_idx(self),qutip,qutip,v5.0.4,,,,,,,TestHierarchyADOs,test_state_idx,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHierarchyADOs.test_next(self),class_method,,,,Class method: TestHierarchyADOs.test_next(self),qutip,qutip,v5.0.4,,,,,,,TestHierarchyADOs,test_next,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHierarchyADOs.test_prev(self),class_method,,,,Class method: TestHierarchyADOs.test_prev(self),qutip,qutip,v5.0.4,,,,,,,TestHierarchyADOs,test_prev,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHierarchyADOs.test_exps(self),class_method,,,,Class method: TestHierarchyADOs.test_exps(self),qutip,qutip,v5.0.4,,,,,,,TestHierarchyADOs,test_exps,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHierarchyADOs.test_filter_by_nothing(self),class_method,,,,Class method: TestHierarchyADOs.test_filter_by_nothing(self),qutip,qutip,v5.0.4,,,,,,,TestHierarchyADOs,test_filter_by_nothing,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHierarchyADOs.test_filter_by_level(self),class_method,,,,Class method: TestHierarchyADOs.test_filter_by_level(self),qutip,qutip,v5.0.4,,,,,,,TestHierarchyADOs,test_filter_by_level,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHierarchyADOs.test_filter_by_exponents(self),class_method,,,,Class method: TestHierarchyADOs.test_filter_by_exponents(self),qutip,qutip,v5.0.4,,,,,,,TestHierarchyADOs,test_filter_by_exponents,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"TestHierarchyADOsState.mk_ados(self, bath_dims, max_depth)",class_method,,,,"Class method: TestHierarchyADOsState.mk_ados(self, bath_dims, max_depth)",qutip,qutip,v5.0.4,,,,,,,TestHierarchyADOsState,mk_ados,"(self, bath_dims, max_depth)",,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"TestHierarchyADOsState.mk_rho_and_soln(self, ados, rho_dims)",class_method,,,,"Class method: TestHierarchyADOsState.mk_rho_and_soln(self, ados, rho_dims)",qutip,qutip,v5.0.4,,,,,,,TestHierarchyADOsState,mk_rho_and_soln,"(self, ados, rho_dims)",,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHierarchyADOsState.test_create(self),class_method,,,,Class method: TestHierarchyADOsState.test_create(self),qutip,qutip,v5.0.4,,,,,,,TestHierarchyADOsState,test_create,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHierarchyADOsState.test_extract(self),class_method,,,,Class method: TestHierarchyADOsState.test_extract(self),qutip,qutip,v5.0.4,,,,,,,TestHierarchyADOsState,test_extract,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"DrudeLorentzPureDephasingModel.__init__(self, lam, gamma, T, Nk)",class_method,,,,"Class method: DrudeLorentzPureDephasingModel.__init__(self, lam, gamma, T, Nk)",qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPureDephasingModel,__init__,"(self, lam, gamma, T, Nk)",,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,DrudeLorentzPureDephasingModel.rho(self),class_method,,,,Class method: DrudeLorentzPureDephasingModel.rho(self),qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPureDephasingModel,rho,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"DrudeLorentzPureDephasingModel.state_results(self, states)",class_method,,,,"Class method: DrudeLorentzPureDephasingModel.state_results(self, states)",qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPureDephasingModel,state_results,"(self, states)",,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"DrudeLorentzPureDephasingModel.analytic_results(self, tlist)",class_method,,,,"Class method: DrudeLorentzPureDephasingModel.analytic_results(self, tlist)",qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPureDephasingModel,analytic_results,"(self, tlist)",,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,DrudeLorentzPureDephasingModel.bath_coefficients(self),class_method,,,,Class method: DrudeLorentzPureDephasingModel.bath_coefficients(self),qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPureDephasingModel,bath_coefficients,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"UnderdampedPureDephasingModel.__init__(self, lam,  gamma, w0, T, Nk)",class_method,,,,"Class method: UnderdampedPureDephasingModel.__init__(self, lam,  gamma, w0, T, Nk)",qutip,qutip,v5.0.4,,,,,,,UnderdampedPureDephasingModel,__init__,"(self, lam,  gamma, w0, T, Nk)",,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,UnderdampedPureDephasingModel.rho(self),class_method,,,,Class method: UnderdampedPureDephasingModel.rho(self),qutip,qutip,v5.0.4,,,,,,,UnderdampedPureDephasingModel,rho,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"UnderdampedPureDephasingModel.state_results(self, states)",class_method,,,,"Class method: UnderdampedPureDephasingModel.state_results(self, states)",qutip,qutip,v5.0.4,,,,,,,UnderdampedPureDephasingModel,state_results,"(self, states)",,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"UnderdampedPureDephasingModel.analytic_results(self, tlist)",class_method,,,,"Class method: UnderdampedPureDephasingModel.analytic_results(self, tlist)",qutip,qutip,v5.0.4,,,,,,,UnderdampedPureDephasingModel,analytic_results,"(self, tlist)",,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"BosonicMode.__init__(self, N, Lambda, Omega, gamma_b)",class_method,,,,"Class method: BosonicMode.__init__(self, N, Lambda, Omega, gamma_b)",qutip,qutip,v5.0.4,,,,,,,BosonicMode,__init__,"(self, N, Lambda, Omega, gamma_b)",,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,BosonicMode.bath_coefficients(self),class_method,,,,Class method: BosonicMode.bath_coefficients(self),qutip,qutip,v5.0.4,,,,,,,BosonicMode,bath_coefficients,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"DiscreteLevelCurrentModel.__init__(self, gamma, W, T, lmax, theta=2., e1=1., bosonic_mode=None)",class_method,,,,"Class method: DiscreteLevelCurrentModel.__init__(self, gamma, W, T, lmax, theta=2., e1=1., bosonic_mode=None)",qutip,qutip,v5.0.4,,,,,,,DiscreteLevelCurrentModel,__init__,"(self, gamma, W, T, lmax, theta=2., e1=1., bosonic_mode=None)",,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"DiscreteLevelCurrentModel.rho(self, rho_fermion=None)",class_method,,,,"Class method: DiscreteLevelCurrentModel.rho(self, rho_fermion=None)",qutip,qutip,v5.0.4,,,,,,,DiscreteLevelCurrentModel,rho,"(self, rho_fermion=None)",,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"DiscreteLevelCurrentModel.sys_occupation(self, state)",class_method,,,,"Class method: DiscreteLevelCurrentModel.sys_occupation(self, state)",qutip,qutip,v5.0.4,,,,,,,DiscreteLevelCurrentModel,sys_occupation,"(self, state)",,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"DiscreteLevelCurrentModel.state_current(self, ado_state, tags=None)",class_method,,,,"Class method: DiscreteLevelCurrentModel.state_current(self, ado_state, tags=None)",qutip,qutip,v5.0.4,,,,,,,DiscreteLevelCurrentModel,state_current,"(self, ado_state, tags=None)",,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,DiscreteLevelCurrentModel.analytic_current(self),class_method,,,,Class method: DiscreteLevelCurrentModel.analytic_current(self),qutip,qutip,v5.0.4,,,,,,,DiscreteLevelCurrentModel,analytic_current,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,DiscreteLevelCurrentModel.bath_coefficients(self),class_method,,,,Class method: DiscreteLevelCurrentModel.bath_coefficients(self),qutip,qutip,v5.0.4,,,,,,,DiscreteLevelCurrentModel,bath_coefficients,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHEOMSolver.test_create_bosonic(self),class_method,,,,Class method: TestHEOMSolver.test_create_bosonic(self),qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,test_create_bosonic,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHEOMSolver.test_create_fermionic(self),class_method,,,,Class method: TestHEOMSolver.test_create_fermionic(self),qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,test_create_fermionic,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHEOMSolver.test_create_mixed_bosonic_and_fermionic(self),class_method,,,,Class method: TestHEOMSolver.test_create_mixed_bosonic_and_fermionic(self),qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,test_create_mixed_bosonic_and_fermionic,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHEOMSolver.test_create_bath_errors(self),class_method,,,,Class method: TestHEOMSolver.test_create_bath_errors(self),qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,test_create_bath_errors,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHEOMSolver.test_create_h_sys_errors(self),class_method,,,,Class method: TestHEOMSolver.test_create_h_sys_errors(self),qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,test_create_h_sys_errors,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[pytest.mark.parametrize(['method'], [
        pytest.param(""run"", id=""run""),
        pytest.param(""start"", id=""start""),
    ])] TestHEOMSolver.test_invalid_rho0_errors(self, method)",class_method,,,,"Class method: [pytest.mark.parametrize(['method'], [
        pytest.param(""run"", id=""run""),
        pytest.param(""start"", id=""start""),
    ])] TestHEOMSolver.test_invalid_rho0_errors(self, method)",qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,test_invalid_rho0_errors,"(self, method)",,,,,,,,,"pytest.mark.parametrize(['method'], [
        pytest.param(""run"", id=""run""),
        pytest.param(""start"", id=""start""),
    ])"
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj"", id=""qobj""),
        pytest.param(""qobjevo_const"", id=""qobjevo_const""),
        pytest.param(""qobjevo_timedep"", id=""qobjevo_timedep""),
    ])] TestHEOMSolver.test_pure_dephasing_model_bosonic_bath(
        self, evo, liouvillianize, atol=1e-3
    )",class_method,,,,"Class method: [pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj"", id=""qobj""),
        pytest.param(""qobjevo_const"", id=""qobjevo_const""),
        pytest.param(""qobjevo_timedep"", id=""qobjevo_timedep""),
    ])] TestHEOMSolver.test_pure_dephasing_model_bosonic_bath(
        self, evo, liouvillianize, atol=1e-3
    )",qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,test_pure_dephasing_model_bosonic_bath,"(
        self, evo, liouvillianize, atol=1e-3
    )",,,,,,,,,"pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj"", id=""qobj""),
        pytest.param(""qobjevo_const"", id=""qobjevo_const""),
        pytest.param(""qobjevo_timedep"", id=""qobjevo_timedep""),
    ])"
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])] TestHEOMSolver.test_pure_dephasing_model_bosonic_bath(
        self, evo, liouvillianize, atol=1e-3
    )",class_method,,,,"Class method: [pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])] TestHEOMSolver.test_pure_dephasing_model_bosonic_bath(
        self, evo, liouvillianize, atol=1e-3
    )",qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,test_pure_dephasing_model_bosonic_bath,"(
        self, evo, liouvillianize, atol=1e-3
    )",,,,,,,,,"pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])"
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"TestHEOMSolver.test_steady_state_bosonic_bath(
        self, atol=1e-3
    )",class_method,,,,"Class method: TestHEOMSolver.test_steady_state_bosonic_bath(
        self, atol=1e-3
    )",qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,test_steady_state_bosonic_bath,"(
        self, atol=1e-3
    )",,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[pytest.mark.parametrize(['terminator'], [
        pytest.param(True, id=""terminator""),
        pytest.param(False, id=""noterminator""),
    ])] TestHEOMSolver.test_pure_dephasing_model_drude_lorentz_baths(
        self, terminator, bath_cls, atol=1e-3
    )",class_method,,,,"Class method: [pytest.mark.parametrize(['terminator'], [
        pytest.param(True, id=""terminator""),
        pytest.param(False, id=""noterminator""),
    ])] TestHEOMSolver.test_pure_dephasing_model_drude_lorentz_baths(
        self, terminator, bath_cls, atol=1e-3
    )",qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,test_pure_dephasing_model_drude_lorentz_baths,"(
        self, terminator, bath_cls, atol=1e-3
    )",,,,,,,,,"pytest.mark.parametrize(['terminator'], [
        pytest.param(True, id=""terminator""),
        pytest.param(False, id=""noterminator""),
    ])"
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[pytest.mark.parametrize(['bath_cls'], [
        pytest.param(DrudeLorentzBath, id=""matsubara""),
        pytest.param(DrudeLorentzPadeBath, id=""pade""),
    ])] TestHEOMSolver.test_pure_dephasing_model_drude_lorentz_baths(
        self, terminator, bath_cls, atol=1e-3
    )",class_method,,,,"Class method: [pytest.mark.parametrize(['bath_cls'], [
        pytest.param(DrudeLorentzBath, id=""matsubara""),
        pytest.param(DrudeLorentzPadeBath, id=""pade""),
    ])] TestHEOMSolver.test_pure_dephasing_model_drude_lorentz_baths(
        self, terminator, bath_cls, atol=1e-3
    )",qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,test_pure_dephasing_model_drude_lorentz_baths,"(
        self, terminator, bath_cls, atol=1e-3
    )",,,,,,,,,"pytest.mark.parametrize(['bath_cls'], [
        pytest.param(DrudeLorentzBath, id=""matsubara""),
        pytest.param(DrudeLorentzPadeBath, id=""pade""),
    ])"
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"TestHEOMSolver.test_underdamped_pure_dephasing_model_underdamped_bath(
        self, atol=1e-3
    )",class_method,,,,"Class method: TestHEOMSolver.test_underdamped_pure_dephasing_model_underdamped_bath(
        self, atol=1e-3
    )",qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,test_underdamped_pure_dephasing_model_underdamped_bath,"(
        self, atol=1e-3
    )",,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj""),
        pytest.param(""qobjevo_const""),
        pytest.param(""qobjevo_timedep""),
    ])] TestHEOMSolver.test_discrete_level_model_fermionic_bath(self, evo, liouvillianize)",class_method,,,,"Class method: [pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj""),
        pytest.param(""qobjevo_const""),
        pytest.param(""qobjevo_timedep""),
    ])] TestHEOMSolver.test_discrete_level_model_fermionic_bath(self, evo, liouvillianize)",qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,test_discrete_level_model_fermionic_bath,"(self, evo, liouvillianize)",,,,,,,,,"pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj""),
        pytest.param(""qobjevo_const""),
        pytest.param(""qobjevo_timedep""),
    ])"
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])] TestHEOMSolver.test_discrete_level_model_fermionic_bath(self, evo, liouvillianize)",class_method,,,,"Class method: [pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])] TestHEOMSolver.test_discrete_level_model_fermionic_bath(self, evo, liouvillianize)",qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,test_discrete_level_model_fermionic_bath,"(self, evo, liouvillianize)",,,,,,,,,"pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])"
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[pytest.mark.parametrize(['bath_cls', 'analytic_current'], [
        pytest.param(LorentzianBath, 0.001101, id=""matsubara""),
        pytest.param(LorentzianPadeBath, 0.000813, id=""pade""),
    ])] TestHEOMSolver.test_discrete_level_model_lorentzian_baths(
        self, bath_cls, analytic_current, atol=1e-3
    )",class_method,,,,"Class method: [pytest.mark.parametrize(['bath_cls', 'analytic_current'], [
        pytest.param(LorentzianBath, 0.001101, id=""matsubara""),
        pytest.param(LorentzianPadeBath, 0.000813, id=""pade""),
    ])] TestHEOMSolver.test_discrete_level_model_lorentzian_baths(
        self, bath_cls, analytic_current, atol=1e-3
    )",qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,test_discrete_level_model_lorentzian_baths,"(
        self, bath_cls, analytic_current, atol=1e-3
    )",,,,,,,,,"pytest.mark.parametrize(['bath_cls', 'analytic_current'], [
        pytest.param(LorentzianBath, 0.001101, id=""matsubara""),
        pytest.param(LorentzianPadeBath, 0.000813, id=""pade""),
    ])"
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj""),
        pytest.param(""qobjevo_const""),
        pytest.param(""qobjevo_timedep""),
    ])] TestHEOMSolver.test_discrete_level_model_fermionic_bath_with_decoupled_bosonic_bath(
        self, evo, liouvillianize
    )",class_method,,,,"Class method: [pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj""),
        pytest.param(""qobjevo_const""),
        pytest.param(""qobjevo_timedep""),
    ])] TestHEOMSolver.test_discrete_level_model_fermionic_bath_with_decoupled_bosonic_bath(
        self, evo, liouvillianize
    )",qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,test_discrete_level_model_fermionic_bath_with_decoupled_bosonic_bath,"(
        self, evo, liouvillianize
    )",,,,,,,,,"pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj""),
        pytest.param(""qobjevo_const""),
        pytest.param(""qobjevo_timedep""),
    ])"
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])] TestHEOMSolver.test_discrete_level_model_fermionic_bath_with_decoupled_bosonic_bath(
        self, evo, liouvillianize
    )",class_method,,,,"Class method: [pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])] TestHEOMSolver.test_discrete_level_model_fermionic_bath_with_decoupled_bosonic_bath(
        self, evo, liouvillianize
    )",qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,test_discrete_level_model_fermionic_bath_with_decoupled_bosonic_bath,"(
        self, evo, liouvillianize
    )",,,,,,,,,"pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])"
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj""),
        pytest.param(""qobjevo_const""),
        pytest.param(""qobjevo_timedep""),
    ])] TestHEOMSolver.test_discrete_level_model_fermionic_bath_with_coupled_bosonic_bath(
        self, evo, liouvillianize
    )",class_method,,,,"Class method: [pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj""),
        pytest.param(""qobjevo_const""),
        pytest.param(""qobjevo_timedep""),
    ])] TestHEOMSolver.test_discrete_level_model_fermionic_bath_with_coupled_bosonic_bath(
        self, evo, liouvillianize
    )",qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,test_discrete_level_model_fermionic_bath_with_coupled_bosonic_bath,"(
        self, evo, liouvillianize
    )",,,,,,,,,"pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj""),
        pytest.param(""qobjevo_const""),
        pytest.param(""qobjevo_timedep""),
    ])"
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])] TestHEOMSolver.test_discrete_level_model_fermionic_bath_with_coupled_bosonic_bath(
        self, evo, liouvillianize
    )",class_method,,,,"Class method: [pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])] TestHEOMSolver.test_discrete_level_model_fermionic_bath_with_coupled_bosonic_bath(
        self, evo, liouvillianize
    )",qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,test_discrete_level_model_fermionic_bath_with_coupled_bosonic_bath,"(
        self, evo, liouvillianize
    )",,,,,,,,,"pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])"
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[pytest.mark.parametrize(['ado_format'], [
        pytest.param(""hierarchy-ados-state"", id=""hierarchy-ados-state""),
        pytest.param(""numpy"", id=""numpy""),
    ])] TestHEOMSolver.test_ado_input_and_return(self, ado_format)",class_method,,,,"Class method: [pytest.mark.parametrize(['ado_format'], [
        pytest.param(""hierarchy-ados-state"", id=""hierarchy-ados-state""),
        pytest.param(""numpy"", id=""numpy""),
    ])] TestHEOMSolver.test_ado_input_and_return(self, ado_format)",qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,test_ado_input_and_return,"(self, ado_format)",,,,,,,,,"pytest.mark.parametrize(['ado_format'], [
        pytest.param(""hierarchy-ados-state"", id=""hierarchy-ados-state""),
        pytest.param(""numpy"", id=""numpy""),
    ])"
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHEOMSolver.test_solving_with_step(self),class_method,,,,Class method: TestHEOMSolver.test_solving_with_step(self),qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,test_solving_with_step,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj"", id=""qobj""),
        pytest.param(""listevo_const"", id=""listevo_const""),
        pytest.param(""qobjevo_const"", id=""qobjevo_const""),
        pytest.param(""qobjevo_timedep"", id=""qobjevo_timedep""),
    ])] TestHeomsolveFunction.test_heomsolve_with_pure_dephasing_model(
        self, evo, liouvillianize, atol=1e-3
    )",class_method,,,,"Class method: [pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj"", id=""qobj""),
        pytest.param(""listevo_const"", id=""listevo_const""),
        pytest.param(""qobjevo_const"", id=""qobjevo_const""),
        pytest.param(""qobjevo_timedep"", id=""qobjevo_timedep""),
    ])] TestHeomsolveFunction.test_heomsolve_with_pure_dephasing_model(
        self, evo, liouvillianize, atol=1e-3
    )",qutip,qutip,v5.0.4,,,,,,,TestHeomsolveFunction,test_heomsolve_with_pure_dephasing_model,"(
        self, evo, liouvillianize, atol=1e-3
    )",,,,,,,,,"pytest.mark.parametrize(['evo'], [
        pytest.param(""qobj"", id=""qobj""),
        pytest.param(""listevo_const"", id=""listevo_const""),
        pytest.param(""qobjevo_const"", id=""qobjevo_const""),
        pytest.param(""qobjevo_timedep"", id=""qobjevo_timedep""),
    ])"
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])] TestHeomsolveFunction.test_heomsolve_with_pure_dephasing_model(
        self, evo, liouvillianize, atol=1e-3
    )",class_method,,,,"Class method: [pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])] TestHeomsolveFunction.test_heomsolve_with_pure_dephasing_model(
        self, evo, liouvillianize, atol=1e-3
    )",qutip,qutip,v5.0.4,,,,,,,TestHeomsolveFunction,test_heomsolve_with_pure_dephasing_model,"(
        self, evo, liouvillianize, atol=1e-3
    )",,,,,,,,,"pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])"
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[pytest.mark.parametrize(['bnd_cut_approx', 'atol'], [
        pytest.param(True, 1e-4, id=""bnd_cut_approx""),
        pytest.param(False,  1e-3, id=""no_bnd_cut_approx""),
    ])] TestHSolverDL.test_pure_dephasing_model(
        self, bnd_cut_approx, atol, evo, combine, liouvillianize,
    )",class_method,,,,"Class method: [pytest.mark.parametrize(['bnd_cut_approx', 'atol'], [
        pytest.param(True, 1e-4, id=""bnd_cut_approx""),
        pytest.param(False,  1e-3, id=""no_bnd_cut_approx""),
    ])] TestHSolverDL.test_pure_dephasing_model(
        self, bnd_cut_approx, atol, evo, combine, liouvillianize,
    )",qutip,qutip,v5.0.4,,,,,,,TestHSolverDL,test_pure_dephasing_model,"(
        self, bnd_cut_approx, atol, evo, combine, liouvillianize,
    )",,,,,,,,,"pytest.mark.parametrize(['bnd_cut_approx', 'atol'], [
        pytest.param(True, 1e-4, id=""bnd_cut_approx""),
        pytest.param(False,  1e-3, id=""no_bnd_cut_approx""),
    ])"
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[pytest.mark.parametrize(['evo', 'combine'], [
        pytest.param(""qobj"", True, id=""qobj-combined""),
        pytest.param(""qobjevo_const"", True, id=""qobjevo-const-combined""),
        pytest.param(""listevo_const"", True, id=""listevo-const-combined""),
        pytest.param(""qobjevo_timedep"", True, id=""qobjevo-timedep-combined""),
        pytest.param(
            ""qobjevo_timedep"", False, id=""qobjevo-timedep-uncombined"",
        ),
    ])] TestHSolverDL.test_pure_dephasing_model(
        self, bnd_cut_approx, atol, evo, combine, liouvillianize,
    )",class_method,,,,"Class method: [pytest.mark.parametrize(['evo', 'combine'], [
        pytest.param(""qobj"", True, id=""qobj-combined""),
        pytest.param(""qobjevo_const"", True, id=""qobjevo-const-combined""),
        pytest.param(""listevo_const"", True, id=""listevo-const-combined""),
        pytest.param(""qobjevo_timedep"", True, id=""qobjevo-timedep-combined""),
        pytest.param(
            ""qobjevo_timedep"", False, id=""qobjevo-timedep-uncombined"",
        ),
    ])] TestHSolverDL.test_pure_dephasing_model(
        self, bnd_cut_approx, atol, evo, combine, liouvillianize,
    )",qutip,qutip,v5.0.4,,,,,,,TestHSolverDL,test_pure_dephasing_model,"(
        self, bnd_cut_approx, atol, evo, combine, liouvillianize,
    )",,,,,,,,,"pytest.mark.parametrize(['evo', 'combine'], [
        pytest.param(""qobj"", True, id=""qobj-combined""),
        pytest.param(""qobjevo_const"", True, id=""qobjevo-const-combined""),
        pytest.param(""listevo_const"", True, id=""listevo-const-combined""),
        pytest.param(""qobjevo_timedep"", True, id=""qobjevo-timedep-combined""),
        pytest.param(
            ""qobjevo_timedep"", False, id=""qobjevo-timedep-uncombined"",
        ),
    ])"
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])] TestHSolverDL.test_pure_dephasing_model(
        self, bnd_cut_approx, atol, evo, combine, liouvillianize,
    )",class_method,,,,"Class method: [pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])] TestHSolverDL.test_pure_dephasing_model(
        self, bnd_cut_approx, atol, evo, combine, liouvillianize,
    )",qutip,qutip,v5.0.4,,,,,,,TestHSolverDL,test_pure_dephasing_model,"(
        self, bnd_cut_approx, atol, evo, combine, liouvillianize,
    )",,,,,,,,,"pytest.mark.parametrize(['liouvillianize'], [
        pytest.param(False, id=""hamiltonian""),
        pytest.param(True, id=""liouvillian""),
    ])"
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[pytest.mark.parametrize(['bnd_cut_approx', 'tol'], [
        pytest.param(True, 1e-4, id=""bnd_cut_approx""),
        pytest.param(False, 1e-3, id=""renorm""),
    ])] TestHSolverDL.test_hsolverdl_backwards_compatibility(self, bnd_cut_approx, tol)",class_method,,,,"Class method: [pytest.mark.parametrize(['bnd_cut_approx', 'tol'], [
        pytest.param(True, 1e-4, id=""bnd_cut_approx""),
        pytest.param(False, 1e-3, id=""renorm""),
    ])] TestHSolverDL.test_hsolverdl_backwards_compatibility(self, bnd_cut_approx, tol)",qutip,qutip,v5.0.4,,,,,,,TestHSolverDL,test_hsolverdl_backwards_compatibility,"(self, bnd_cut_approx, tol)",,,,,,,,,"pytest.mark.parametrize(['bnd_cut_approx', 'tol'], [
        pytest.param(True, 1e-4, id=""bnd_cut_approx""),
        pytest.param(False, 1e-3, id=""renorm""),
    ])"
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[pytest.mark.filterwarnings(""ignore:_zvode.*Excess work done:UserWarning"")] TestHSolverDL.test_integration_error(self)",class_method,,,,"Class method: [pytest.mark.filterwarnings(""ignore:_zvode.*Excess work done:UserWarning"")] TestHSolverDL.test_integration_error(self)",qutip,qutip,v5.0.4,,,,,,,TestHSolverDL,test_integration_error,(self),,,,,,,,,"pytest.mark.filterwarnings(""ignore:_zvode.*Excess work done:UserWarning"")"
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"TestHEOMResult.mk_ados(self, bath_dims, max_depth)",class_method,,,,"Class method: TestHEOMResult.mk_ados(self, bath_dims, max_depth)",qutip,qutip,v5.0.4,,,,,,,TestHEOMResult,mk_ados,"(self, bath_dims, max_depth)",,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"TestHEOMResult.mk_rho_and_soln(self, ados, rho_dims)",class_method,,,,"Class method: TestHEOMResult.mk_rho_and_soln(self, ados, rho_dims)",qutip,qutip,v5.0.4,,,,,,,TestHEOMResult,mk_rho_and_soln,"(self, ados, rho_dims)",,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHEOMResult.test_create_ado_states_attribute(self),class_method,,,,Class method: TestHEOMResult.test_create_ado_states_attribute(self),qutip,qutip,v5.0.4,,,,,,,TestHEOMResult,test_create_ado_states_attribute,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"[pytest.mark.parametrize(['e_op_type'], [
        pytest.param(""qobj"", id=""qobj""),
        pytest.param(""qobjevo"", id=""qobjevo""),
        pytest.param(""callable"", id=""callable""),
    ])] TestHEOMResult.test_e_ops(self, e_op_type)",class_method,,,,"Class method: [pytest.mark.parametrize(['e_op_type'], [
        pytest.param(""qobj"", id=""qobj""),
        pytest.param(""qobjevo"", id=""qobjevo""),
        pytest.param(""callable"", id=""callable""),
    ])] TestHEOMResult.test_e_ops(self, e_op_type)",qutip,qutip,v5.0.4,,,,,,,TestHEOMResult,test_e_ops,"(self, e_op_type)",,,,,,,,,"pytest.mark.parametrize(['e_op_type'], [
        pytest.param(""qobj"", id=""qobj""),
        pytest.param(""qobjevo"", id=""qobjevo""),
        pytest.param(""callable"", id=""callable""),
    ])"
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHEOMResult.test_store_state(self),class_method,,,,Class method: TestHEOMResult.test_store_state(self),qutip,qutip,v5.0.4,,,,,,,TestHEOMResult,test_store_state,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHEOMResult.test_store_ados(self),class_method,,,,Class method: TestHEOMResult.test_store_ados(self),qutip,qutip,v5.0.4,,,,,,,TestHEOMResult,test_store_ados,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,Test_GatherHEOMRHS.test_simple_gather(self),class_method,,,,Class method: Test_GatherHEOMRHS.test_simple_gather(self),qutip,qutip,v5.0.4,,,,,,,Test_GatherHEOMRHS,test_simple_gather,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHierarchyADOs,class,,,,Class: TestHierarchyADOs,qutip,qutip,v5.0.4,,,,,,,TestHierarchyADOs,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHierarchyADOsState,class,,,,Class: TestHierarchyADOsState,qutip,qutip,v5.0.4,,,,,,,TestHierarchyADOsState,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,DrudeLorentzPureDephasingModel,class,,,,Class: DrudeLorentzPureDephasingModel,qutip,qutip,v5.0.4,,,,,,,DrudeLorentzPureDephasingModel,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,UnderdampedPureDephasingModel,class,,,,Class: UnderdampedPureDephasingModel,qutip,qutip,v5.0.4,,,,,,,UnderdampedPureDephasingModel,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,BosonicMode,class,,,,Class: BosonicMode,qutip,qutip,v5.0.4,,,,,,,BosonicMode,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,DiscreteLevelCurrentModel,class,,,,Class: DiscreteLevelCurrentModel,qutip,qutip,v5.0.4,,,,,,,DiscreteLevelCurrentModel,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHEOMSolver,class,,,,Class: TestHEOMSolver,qutip,qutip,v5.0.4,,,,,,,TestHEOMSolver,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHeomsolveFunction,class,,,,Class: TestHeomsolveFunction,qutip,qutip,v5.0.4,,,,,,,TestHeomsolveFunction,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHSolverDL,class,,,,Class: TestHSolverDL,qutip,qutip,v5.0.4,,,,,,,TestHSolverDL,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,TestHEOMResult,class,,,,Class: TestHEOMResult,qutip,qutip,v5.0.4,,,,,,,TestHEOMResult,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,Test_GatherHEOMRHS,class,,,,Class: Test_GatherHEOMRHS,qutip,qutip,v5.0.4,,,,,,,Test_GatherHEOMRHS,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,fill_options(**kwargs),function,,,,Function: fill_options(**kwargs),qutip,qutip,v5.0.4,,,,fill_options,(**kwargs),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,assert_raises_steady_state_time_dependent(hsolver),function,,,,Function: assert_raises_steady_state_time_dependent(hsolver),qutip,qutip,v5.0.4,,,,assert_raises_steady_state_time_dependent,(hsolver),,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"hamiltonian_to_sys(H, evo, liouvillianize)",function,,,,"Function: hamiltonian_to_sys(H, evo, liouvillianize)",qutip,qutip,v5.0.4,,,,hamiltonian_to_sys,"(H, evo, liouvillianize)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,"_HAMILTONIAN_EVO_KINDS = {
    ""qobj"": lambda H: H,
    ""qobjevo_const"": lambda H: QobjEvo([H]),
    ""qobjevo_timedep"": lambda H: QobjEvo([H, lambda t: 1.0]),
    ""listevo_const"": lambda H: [H],
}",constant,"_HAMILTONIAN_EVO_KINDS = {
    ""qobj"": lambda H: H,
    ""qobjevo_const"": lambda H: QobjEvo([H]),
    ""qobjevo_timedep"": lambda H: QobjEvo([H, lambda t: 1.0]),
    ""listevo_const"": lambda H: [H],
}",_HAMILTONIAN_EVO_KINDS,"{
    ""qobj"": lambda H: H,
    ""qobjevo_const"": lambda H: QobjEvo([H]),
    ""qobjevo_timedep"": lambda H: QobjEvo([H, lambda t: 1.0]),
    ""listevo_const"": lambda H: [H],
}","Constant: _HAMILTONIAN_EVO_KINDS = {
    ""qobj"": lambda H: H,
    ""qobjevo_const"": lambda H: QobjEvo([H]),
    ""qobjevo_timedep"": lambda H: QobjEvo([H, lambda t: 1.0]),
    ""listevo_const"": lambda H: [H],
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,basis from qutip,import,,,,Import: basis from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",qutip,basis,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,destroy from qutip,import,,,,Import: destroy from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",qutip,destroy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,expect from qutip,import,,,,Import: expect from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",qutip,expect,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,liouvillian from qutip,import,,,,Import: liouvillian from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",qutip,liouvillian,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,qeye from qutip,import,,,,Import: qeye from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",qutip,qeye,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,sigmax from qutip,import,,,,Import: sigmax from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",qutip,sigmax,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,sigmaz from qutip,import,,,,Import: sigmaz from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",qutip,sigmaz,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,sigmay from qutip,import,,,,Import: sigmay from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",qutip,sigmay,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,tensor from qutip,import,,,,Import: tensor from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",qutip,tensor,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,Qobj from qutip,import,,,,Import: Qobj from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",qutip,Qobj,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,QobjEvo from qutip,import,,,,Import: QobjEvo from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",qutip,QobjEvo,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,fidelity from qutip,import,,,,Import: fidelity from qutip,qutip,qutip,v5.0.4,"from qutip import (
    basis, destroy, expect, liouvillian, qeye, sigmax, sigmaz, sigmay,
    tensor, Qobj, QobjEvo, fidelity
)",qutip,fidelity,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,eigvalsh from numpy.linalg,local_import,,,,Import: eigvalsh from numpy.linalg,qutip,qutip,v5.0.4,from numpy.linalg import eigvalsh,numpy.linalg,eigvalsh,,,numpy.linalg,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,quad from scipy.integrate,local_import,,,,Import: quad from scipy.integrate,qutip,qutip,v5.0.4,from scipy.integrate import quad,scipy.integrate,quad,,,scipy.integrate,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,data from qutip.core,local_import,,,,Import: data from qutip.core,qutip,qutip,v5.0.4,from qutip.core import data as _data,qutip.core,data,,,qutip.core,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,BathExponent from qutip.solver.heom.bofin_baths,local_import,,,,Import: BathExponent from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",qutip.solver.heom.bofin_baths,BathExponent,,,qutip.solver.heom.bofin_baths,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,Bath from qutip.solver.heom.bofin_baths,local_import,,,,Import: Bath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",qutip.solver.heom.bofin_baths,Bath,,,qutip.solver.heom.bofin_baths,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,BosonicBath from qutip.solver.heom.bofin_baths,local_import,,,,Import: BosonicBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",qutip.solver.heom.bofin_baths,BosonicBath,,,qutip.solver.heom.bofin_baths,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,DrudeLorentzBath from qutip.solver.heom.bofin_baths,local_import,,,,Import: DrudeLorentzBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",qutip.solver.heom.bofin_baths,DrudeLorentzBath,,,qutip.solver.heom.bofin_baths,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,DrudeLorentzPadeBath from qutip.solver.heom.bofin_baths,local_import,,,,Import: DrudeLorentzPadeBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",qutip.solver.heom.bofin_baths,DrudeLorentzPadeBath,,,qutip.solver.heom.bofin_baths,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,UnderDampedBath from qutip.solver.heom.bofin_baths,local_import,,,,Import: UnderDampedBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",qutip.solver.heom.bofin_baths,UnderDampedBath,,,qutip.solver.heom.bofin_baths,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,FermionicBath from qutip.solver.heom.bofin_baths,local_import,,,,Import: FermionicBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",qutip.solver.heom.bofin_baths,FermionicBath,,,qutip.solver.heom.bofin_baths,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,LorentzianBath from qutip.solver.heom.bofin_baths,local_import,,,,Import: LorentzianBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",qutip.solver.heom.bofin_baths,LorentzianBath,,,qutip.solver.heom.bofin_baths,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,LorentzianPadeBath from qutip.solver.heom.bofin_baths,local_import,,,,Import: LorentzianPadeBath from qutip.solver.heom.bofin_baths,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_baths import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
)",qutip.solver.heom.bofin_baths,LorentzianPadeBath,,,qutip.solver.heom.bofin_baths,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,heomsolve from qutip.solver.heom.bofin_solvers,local_import,,,,Import: heomsolve from qutip.solver.heom.bofin_solvers,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_solvers import (
    heomsolve,
    HierarchyADOs,
    HierarchyADOsState,
    HEOMResult,
    HEOMSolver,
    HSolverDL,
    _GatherHEOMRHS,
)",qutip.solver.heom.bofin_solvers,heomsolve,,,qutip.solver.heom.bofin_solvers,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,HierarchyADOs from qutip.solver.heom.bofin_solvers,local_import,,,,Import: HierarchyADOs from qutip.solver.heom.bofin_solvers,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_solvers import (
    heomsolve,
    HierarchyADOs,
    HierarchyADOsState,
    HEOMResult,
    HEOMSolver,
    HSolverDL,
    _GatherHEOMRHS,
)",qutip.solver.heom.bofin_solvers,HierarchyADOs,,,qutip.solver.heom.bofin_solvers,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,HierarchyADOsState from qutip.solver.heom.bofin_solvers,local_import,,,,Import: HierarchyADOsState from qutip.solver.heom.bofin_solvers,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_solvers import (
    heomsolve,
    HierarchyADOs,
    HierarchyADOsState,
    HEOMResult,
    HEOMSolver,
    HSolverDL,
    _GatherHEOMRHS,
)",qutip.solver.heom.bofin_solvers,HierarchyADOsState,,,qutip.solver.heom.bofin_solvers,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,HEOMResult from qutip.solver.heom.bofin_solvers,local_import,,,,Import: HEOMResult from qutip.solver.heom.bofin_solvers,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_solvers import (
    heomsolve,
    HierarchyADOs,
    HierarchyADOsState,
    HEOMResult,
    HEOMSolver,
    HSolverDL,
    _GatherHEOMRHS,
)",qutip.solver.heom.bofin_solvers,HEOMResult,,,qutip.solver.heom.bofin_solvers,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,HEOMSolver from qutip.solver.heom.bofin_solvers,local_import,,,,Import: HEOMSolver from qutip.solver.heom.bofin_solvers,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_solvers import (
    heomsolve,
    HierarchyADOs,
    HierarchyADOsState,
    HEOMResult,
    HEOMSolver,
    HSolverDL,
    _GatherHEOMRHS,
)",qutip.solver.heom.bofin_solvers,HEOMSolver,,,qutip.solver.heom.bofin_solvers,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,HSolverDL from qutip.solver.heom.bofin_solvers,local_import,,,,Import: HSolverDL from qutip.solver.heom.bofin_solvers,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_solvers import (
    heomsolve,
    HierarchyADOs,
    HierarchyADOsState,
    HEOMResult,
    HEOMSolver,
    HSolverDL,
    _GatherHEOMRHS,
)",qutip.solver.heom.bofin_solvers,HSolverDL,,,qutip.solver.heom.bofin_solvers,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,_GatherHEOMRHS from qutip.solver.heom.bofin_solvers,local_import,,,,Import: _GatherHEOMRHS from qutip.solver.heom.bofin_solvers,qutip,qutip,v5.0.4,"from qutip.solver.heom.bofin_solvers import (
    heomsolve,
    HierarchyADOs,
    HierarchyADOsState,
    HEOMResult,
    HEOMSolver,
    HSolverDL,
    _GatherHEOMRHS,
)",qutip.solver.heom.bofin_solvers,_GatherHEOMRHS,,,qutip.solver.heom.bofin_solvers,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_bofin_solvers.py,python,IntegratorException from qutip.solver,local_import,,,,Import: IntegratorException from qutip.solver,qutip,qutip,v5.0.4,"from qutip.solver import (
    IntegratorException,
)",qutip.solver,IntegratorException,,,qutip.solver,,,,,,,,,,,,
,test_bofin_solvers.py,python,,,,,,File: qutip\tests\solver\heom,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_bofin_solvers.py,python,,,,,,Directory: qutip\tests\solver\heom\test_bofin_solvers.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_heom.py,python,TestBathAPI.test_api(self),class_method,,,,Class method: TestBathAPI.test_api(self),qutip,qutip,v5.0.4,,,,,,,TestBathAPI,test_api,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_heom.py,python,TestSolverAPI.test_api(self),class_method,,,,Class method: TestSolverAPI.test_api(self),qutip,qutip,v5.0.4,,,,,,,TestSolverAPI,test_api,(self),,,,,,,,,
qutip_qutip_v5.0.4,test_heom.py,python,TestBathAPI,class,,,,Class: TestBathAPI,qutip,qutip,v5.0.4,,,,,,,TestBathAPI,,,,,,,,,,,
qutip_qutip_v5.0.4,test_heom.py,python,TestSolverAPI,class,,,,Class: TestSolverAPI,qutip,qutip,v5.0.4,,,,,,,TestSolverAPI,,,,,,,,,,,
qutip_qutip_v5.0.4,test_heom.py,python,pytest,import,,,,Import: pytest,qutip,qutip,v5.0.4,import pytest,,pytest,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_heom.py,python,BathExponent from qutip.solver.heom,local_import,,,,Import: BathExponent from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",qutip.solver.heom,BathExponent,,,qutip.solver.heom,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_heom.py,python,Bath from qutip.solver.heom,local_import,,,,Import: Bath from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",qutip.solver.heom,Bath,,,qutip.solver.heom,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_heom.py,python,BosonicBath from qutip.solver.heom,local_import,,,,Import: BosonicBath from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",qutip.solver.heom,BosonicBath,,,qutip.solver.heom,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_heom.py,python,DrudeLorentzBath from qutip.solver.heom,local_import,,,,Import: DrudeLorentzBath from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",qutip.solver.heom,DrudeLorentzBath,,,qutip.solver.heom,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_heom.py,python,DrudeLorentzPadeBath from qutip.solver.heom,local_import,,,,Import: DrudeLorentzPadeBath from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",qutip.solver.heom,DrudeLorentzPadeBath,,,qutip.solver.heom,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_heom.py,python,UnderDampedBath from qutip.solver.heom,local_import,,,,Import: UnderDampedBath from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",qutip.solver.heom,UnderDampedBath,,,qutip.solver.heom,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_heom.py,python,FermionicBath from qutip.solver.heom,local_import,,,,Import: FermionicBath from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",qutip.solver.heom,FermionicBath,,,qutip.solver.heom,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_heom.py,python,LorentzianBath from qutip.solver.heom,local_import,,,,Import: LorentzianBath from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",qutip.solver.heom,LorentzianBath,,,qutip.solver.heom,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_heom.py,python,LorentzianPadeBath from qutip.solver.heom,local_import,,,,Import: LorentzianPadeBath from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",qutip.solver.heom,LorentzianPadeBath,,,qutip.solver.heom,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_heom.py,python,heomsolve from qutip.solver.heom,local_import,,,,Import: heomsolve from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",qutip.solver.heom,heomsolve,,,qutip.solver.heom,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_heom.py,python,HEOMSolver from qutip.solver.heom,local_import,,,,Import: HEOMSolver from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",qutip.solver.heom,HEOMSolver,,,qutip.solver.heom,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_heom.py,python,HEOMResult from qutip.solver.heom,local_import,,,,Import: HEOMResult from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",qutip.solver.heom,HEOMResult,,,qutip.solver.heom,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_heom.py,python,HSolverDL from qutip.solver.heom,local_import,,,,Import: HSolverDL from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",qutip.solver.heom,HSolverDL,,,qutip.solver.heom,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_heom.py,python,HierarchyADOs from qutip.solver.heom,local_import,,,,Import: HierarchyADOs from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",qutip.solver.heom,HierarchyADOs,,,qutip.solver.heom,,,,,,,,,,,,
qutip_qutip_v5.0.4,test_heom.py,python,HierarchyADOsState from qutip.solver.heom,local_import,,,,Import: HierarchyADOsState from qutip.solver.heom,qutip,qutip,v5.0.4,"from qutip.solver.heom import (
    BathExponent,
    Bath,
    BosonicBath,
    DrudeLorentzBath,
    DrudeLorentzPadeBath,
    UnderDampedBath,
    FermionicBath,
    LorentzianBath,
    LorentzianPadeBath,
    heomsolve,
    HEOMSolver,
    HEOMResult,
    HSolverDL,
    HierarchyADOs,
    HierarchyADOsState,
)",qutip.solver.heom,HierarchyADOsState,,,qutip.solver.heom,,,,,,,,,,,,
,test_heom.py,python,,,,,,File: qutip\tests\solver\heom,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,test_heom.py,python,,,,,,Directory: qutip\tests\solver\heom\test_heom.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: qutip\tests\solver\heom,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: qutip\tests\solver\heom\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,"[instance] BaseProgressBar._start(iterations, chunk_size)",class_field,,,,"Class field: [instance] BaseProgressBar._start(iterations, chunk_size)",qutip,qutip,v5.0.4,,,,,,,BaseProgressBar,__init__,"(self, iterations=0, chunk_size=10, **kwargs)","self._start(iterations, chunk_size)","self._start(iterations, chunk_size)",,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,[instance] EnhancedTextProgressBar.fill_char = '*',class_field,,,,Class field: [instance] EnhancedTextProgressBar.fill_char = '*',qutip,qutip,v5.0.4,,,,,,,EnhancedTextProgressBar,__init__,"(self, iterations=0, chunk_size=10, **kwargs)",self.fill_char = '*',self.fill_char = '*',,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,[instance] EnhancedTextProgressBar.width = 25,class_field,,,,Class field: [instance] EnhancedTextProgressBar.width = 25,qutip,qutip,v5.0.4,,,,,,,EnhancedTextProgressBar,__init__,"(self, iterations=0, chunk_size=10, **kwargs)",self.width = 25,self.width = 25,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,"[instance] TqdmProgressBar.pbar = tqdm(total=iterations, **kwargs)",class_field,,,,"Class field: [instance] TqdmProgressBar.pbar = tqdm(total=iterations, **kwargs)",qutip,qutip,v5.0.4,,,,,,,TqdmProgressBar,__init__,"(self, iterations=0, chunk_size=10, **kwargs)","self.pbar = tqdm(total=iterations, **kwargs)","self.pbar = tqdm(total=iterations, **kwargs)",,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,[instance] TqdmProgressBar.t_start = time.time(),class_field,,,,Class field: [instance] TqdmProgressBar.t_start = time.time(),qutip,qutip,v5.0.4,,,,,,,TqdmProgressBar,__init__,"(self, iterations=0, chunk_size=10, **kwargs)",self.t_start = time.time(),self.t_start = time.time(),,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,[instance] TqdmProgressBar.t_done = t_start - 1,class_field,,,,Class field: [instance] TqdmProgressBar.t_done = t_start - 1,qutip,qutip,v5.0.4,,,,,,,TqdmProgressBar,__init__,"(self, iterations=0, chunk_size=10, **kwargs)",self.t_done = self.t_start - 1,self.t_done = self.t_start - 1,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,[instance] HTMLProgressBar.display = display,class_field,,,,Class field: [instance] HTMLProgressBar.display = display,qutip,qutip,v5.0.4,,,,,,,HTMLProgressBar,__init__,"(self, iterations=0, chunk_size=1.0, **kwargs)",self.display = display,self.display = display,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,[instance] HTMLProgressBar.Javascript = Javascript,class_field,,,,Class field: [instance] HTMLProgressBar.Javascript = Javascript,qutip,qutip,v5.0.4,,,,,,,HTMLProgressBar,__init__,"(self, iterations=0, chunk_size=1.0, **kwargs)",self.Javascript = Javascript,self.Javascript = Javascript,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,[instance] HTMLProgressBar.divid = str(uuid.uuid4()),class_field,,,,Class field: [instance] HTMLProgressBar.divid = str(uuid.uuid4()),qutip,qutip,v5.0.4,,,,,,,HTMLProgressBar,__init__,"(self, iterations=0, chunk_size=1.0, **kwargs)",self.divid = str(uuid.uuid4()),self.divid = str(uuid.uuid4()),,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,[instance] HTMLProgressBar.textid = str(uuid.uuid4()),class_field,,,,Class field: [instance] HTMLProgressBar.textid = str(uuid.uuid4()),qutip,qutip,v5.0.4,,,,,,,HTMLProgressBar,__init__,"(self, iterations=0, chunk_size=1.0, **kwargs)",self.textid = str(uuid.uuid4()),self.textid = str(uuid.uuid4()),,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,"[instance] HTMLProgressBar.pb = HTML(
            '<div style=""border: 2px solid grey; width: 600px"">\n  '
            f'<div id=""{divid}"" '
            'style=""background-color: rgba(121,195,106,0.75); '
            'width:0%"">&nbsp;</div>\n'
            '</div>\n'
            f'<p id=""{textid}""></p>\n'
        )",class_field,,,,"Class field: [instance] HTMLProgressBar.pb = HTML(
            '<div style=""border: 2px solid grey; width: 600px"">\n  '
            f'<div id=""{divid}"" '
            'style=""background-color: rgba(121,195,106,0.75); '
            'width:0%"">&nbsp;</div>\n'
            '</div>\n'
            f'<p id=""{textid}""></p>\n'
        )",qutip,qutip,v5.0.4,,,,,,,HTMLProgressBar,__init__,"(self, iterations=0, chunk_size=1.0, **kwargs)","self.pb = HTML(
            '<div style=""border: 2px solid grey; width: 600px"">\n  '
            f'<div id=""{self.divid}"" '
            'style=""background-color: rgba(121,195,106,0.75); '
            'width:0%"">&nbsp;</div>\n'
            '</div>\n'
            f'<p id=""{self.textid}""></p>\n'
        )","self.pb = HTML(
            '<div style=""border: 2px solid grey; width: 600px"">\n  '
            f'<div id=""{self.divid}"" '
            'style=""background-color: rgba(121,195,106,0.75); '
            'width:0%"">&nbsp;</div>\n'
            '</div>\n'
            f'<p id=""{self.textid}""></p>\n'
        )",,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,[instance] HTMLProgressBar.display(pb),class_field,,,,Class field: [instance] HTMLProgressBar.display(pb),qutip,qutip,v5.0.4,,,,,,,HTMLProgressBar,__init__,"(self, iterations=0, chunk_size=1.0, **kwargs)",self.display(self.pb),self.display(self.pb),,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,"BaseProgressBar.__init__(self, iterations=0, chunk_size=10, **kwargs)",class_method,,,,"Class method: BaseProgressBar.__init__(self, iterations=0, chunk_size=10, **kwargs)",qutip,qutip,v5.0.4,,,,,,,BaseProgressBar,__init__,"(self, iterations=0, chunk_size=10, **kwargs)",,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,"BaseProgressBar._start(self, iterations, chunk_size=10, **kwargs)",class_method,,,,"Class method: BaseProgressBar._start(self, iterations, chunk_size=10, **kwargs)",qutip,qutip,v5.0.4,,,,,,,BaseProgressBar,_start,"(self, iterations, chunk_size=10, **kwargs)",,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,BaseProgressBar.update(self),class_method,,,,Class method: BaseProgressBar.update(self),qutip,qutip,v5.0.4,,,,,,,BaseProgressBar,update,(self),,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,BaseProgressBar.total_time(self),class_method,,,,Class method: BaseProgressBar.total_time(self),qutip,qutip,v5.0.4,,,,,,,BaseProgressBar,total_time,(self),,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,BaseProgressBar.time_elapsed(self),class_method,,,,Class method: BaseProgressBar.time_elapsed(self),qutip,qutip,v5.0.4,,,,,,,BaseProgressBar,time_elapsed,(self),,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,"BaseProgressBar.time_remaining_est(self, p)",class_method,,,,"Class method: BaseProgressBar.time_remaining_est(self, p)",qutip,qutip,v5.0.4,,,,,,,BaseProgressBar,time_remaining_est,"(self, p)",,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,BaseProgressBar.finished(self),class_method,,,,Class method: BaseProgressBar.finished(self),qutip,qutip,v5.0.4,,,,,,,BaseProgressBar,finished,(self),,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,"TextProgressBar.__init__(self, iterations=0, chunk_size=10, **kwargs)",class_method,,,,"Class method: TextProgressBar.__init__(self, iterations=0, chunk_size=10, **kwargs)",qutip,qutip,v5.0.4,,,,,,,TextProgressBar,__init__,"(self, iterations=0, chunk_size=10, **kwargs)",,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,TextProgressBar.update(self),class_method,,,,Class method: TextProgressBar.update(self),qutip,qutip,v5.0.4,,,,,,,TextProgressBar,update,(self),,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,TextProgressBar.finished(self),class_method,,,,Class method: TextProgressBar.finished(self),qutip,qutip,v5.0.4,,,,,,,TextProgressBar,finished,(self),,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,"EnhancedTextProgressBar.__init__(self, iterations=0, chunk_size=10, **kwargs)",class_method,,,,"Class method: EnhancedTextProgressBar.__init__(self, iterations=0, chunk_size=10, **kwargs)",qutip,qutip,v5.0.4,,,,,,,EnhancedTextProgressBar,__init__,"(self, iterations=0, chunk_size=10, **kwargs)",,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,EnhancedTextProgressBar.update(self),class_method,,,,Class method: EnhancedTextProgressBar.update(self),qutip,qutip,v5.0.4,,,,,,,EnhancedTextProgressBar,update,(self),,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,EnhancedTextProgressBar.finished(self),class_method,,,,Class method: EnhancedTextProgressBar.finished(self),qutip,qutip,v5.0.4,,,,,,,EnhancedTextProgressBar,finished,(self),,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,"TqdmProgressBar.__init__(self, iterations=0, chunk_size=10, **kwargs)",class_method,,,,"Class method: TqdmProgressBar.__init__(self, iterations=0, chunk_size=10, **kwargs)",qutip,qutip,v5.0.4,,,,,,,TqdmProgressBar,__init__,"(self, iterations=0, chunk_size=10, **kwargs)",,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,TqdmProgressBar.update(self),class_method,,,,Class method: TqdmProgressBar.update(self),qutip,qutip,v5.0.4,,,,,,,TqdmProgressBar,update,(self),,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,TqdmProgressBar.finished(self),class_method,,,,Class method: TqdmProgressBar.finished(self),qutip,qutip,v5.0.4,,,,,,,TqdmProgressBar,finished,(self),,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,"HTMLProgressBar.__init__(self, iterations=0, chunk_size=1.0, **kwargs)",class_method,,,,"Class method: HTMLProgressBar.__init__(self, iterations=0, chunk_size=1.0, **kwargs)",qutip,qutip,v5.0.4,,,,,,,HTMLProgressBar,__init__,"(self, iterations=0, chunk_size=1.0, **kwargs)",,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,HTMLProgressBar.update(self),class_method,,,,Class method: HTMLProgressBar.update(self),qutip,qutip,v5.0.4,,,,,,,HTMLProgressBar,update,(self),,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,HTMLProgressBar.finished(self),class_method,,,,Class method: HTMLProgressBar.finished(self),qutip,qutip,v5.0.4,,,,,,,HTMLProgressBar,finished,(self),,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,BaseProgressBar(object),class,,,,Class: BaseProgressBar(object),qutip,qutip,v5.0.4,,,,,,,BaseProgressBar,,,,,,,,,(object),,
qutip_qutip_v5.0.4,progressbar.py,python,TextProgressBar(BaseProgressBar),class,,,,Class: TextProgressBar(BaseProgressBar),qutip,qutip,v5.0.4,,,,,,,TextProgressBar,,,,,,,,,(BaseProgressBar),,
qutip_qutip_v5.0.4,progressbar.py,python,EnhancedTextProgressBar(BaseProgressBar),class,,,,Class: EnhancedTextProgressBar(BaseProgressBar),qutip,qutip,v5.0.4,,,,,,,EnhancedTextProgressBar,,,,,,,,,(BaseProgressBar),,
qutip_qutip_v5.0.4,progressbar.py,python,TqdmProgressBar(BaseProgressBar),class,,,,Class: TqdmProgressBar(BaseProgressBar),qutip,qutip,v5.0.4,,,,,,,TqdmProgressBar,,,,,,,,,(BaseProgressBar),,
qutip_qutip_v5.0.4,progressbar.py,python,HTMLProgressBar(BaseProgressBar),class,,,,Class: HTMLProgressBar(BaseProgressBar),qutip,qutip,v5.0.4,,,,,,,HTMLProgressBar,,,,,,,,,(BaseProgressBar),,
qutip_qutip_v5.0.4,progressbar.py,python,"__all__ = ['BaseProgressBar', 'TextProgressBar',
           'EnhancedTextProgressBar', 'TqdmProgressBar',
           'HTMLProgressBar', 'progress_bars']",constant,"__all__ = ['BaseProgressBar', 'TextProgressBar',
           'EnhancedTextProgressBar', 'TqdmProgressBar',
           'HTMLProgressBar', 'progress_bars']",__all__,"['BaseProgressBar', 'TextProgressBar',
           'EnhancedTextProgressBar', 'TqdmProgressBar',
           'HTMLProgressBar', 'progress_bars']","Constant: __all__ = ['BaseProgressBar', 'TextProgressBar',
           'EnhancedTextProgressBar', 'TqdmProgressBar',
           'HTMLProgressBar', 'progress_bars']",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,"progress_bars = {
    ""Enhanced"": EnhancedTextProgressBar,
    ""enhanced"": EnhancedTextProgressBar,
    ""Text"": TextProgressBar,
    ""text"": TextProgressBar,
    True: TextProgressBar,
    ""Tqdm"": TqdmProgressBar,
    ""tqdm"": TqdmProgressBar,
    ""Html"": HTMLProgressBar,
    ""html"": HTMLProgressBar,
    ""base"": BaseProgressBar,
    """": BaseProgressBar,
    False: BaseProgressBar,
    None: BaseProgressBar,
}",constant,"progress_bars = {
    ""Enhanced"": EnhancedTextProgressBar,
    ""enhanced"": EnhancedTextProgressBar,
    ""Text"": TextProgressBar,
    ""text"": TextProgressBar,
    True: TextProgressBar,
    ""Tqdm"": TqdmProgressBar,
    ""tqdm"": TqdmProgressBar,
    ""Html"": HTMLProgressBar,
    ""html"": HTMLProgressBar,
    ""base"": BaseProgressBar,
    """": BaseProgressBar,
    False: BaseProgressBar,
    None: BaseProgressBar,
}",progress_bars,"{
    ""Enhanced"": EnhancedTextProgressBar,
    ""enhanced"": EnhancedTextProgressBar,
    ""Text"": TextProgressBar,
    ""text"": TextProgressBar,
    True: TextProgressBar,
    ""Tqdm"": TqdmProgressBar,
    ""tqdm"": TqdmProgressBar,
    ""Html"": HTMLProgressBar,
    ""html"": HTMLProgressBar,
    ""base"": BaseProgressBar,
    """": BaseProgressBar,
    False: BaseProgressBar,
    None: BaseProgressBar,
}","Constant: progress_bars = {
    ""Enhanced"": EnhancedTextProgressBar,
    ""enhanced"": EnhancedTextProgressBar,
    ""Text"": TextProgressBar,
    ""text"": TextProgressBar,
    True: TextProgressBar,
    ""Tqdm"": TqdmProgressBar,
    ""tqdm"": TqdmProgressBar,
    ""Html"": HTMLProgressBar,
    ""html"": HTMLProgressBar,
    ""base"": BaseProgressBar,
    """": BaseProgressBar,
    False: BaseProgressBar,
    None: BaseProgressBar,
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,time,import,,,,Import: time,qutip,qutip,v5.0.4,import time,,time,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,datetime,import,,,,Import: datetime,qutip,qutip,v5.0.4,import datetime,,datetime,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,sys,import,,,,Import: sys,qutip,qutip,v5.0.4,import sys,,sys,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,progressbar.py,python,settings from qutip,import,,,,Import: settings from qutip,qutip,qutip,v5.0.4,from qutip import settings,qutip,settings,,,,,,,,,,,,,,,
,progressbar.py,python,,,,,,File: qutip\ui,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,progressbar.py,python,,,,,,Directory: qutip\ui\progressbar.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spmv.py,python,"mkl_spmv(A, x)",function,,,,"Function: mkl_spmv(A, x)",qutip,qutip,v5.0.4,,,,mkl_spmv,"(A, x)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,spmv.py,python,zcsrgemv = qset.mkl_lib.mkl_cspblas_zcsrgemv,constant,zcsrgemv = qset.mkl_lib.mkl_cspblas_zcsrgemv,zcsrgemv,qset.mkl_lib.mkl_cspblas_zcsrgemv,Constant: zcsrgemv = qset.mkl_lib.mkl_cspblas_zcsrgemv,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spmv.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spmv.py,python,POINTER from ctypes,import,,,,Import: POINTER from ctypes,qutip,qutip,v5.0.4,"from ctypes import POINTER, c_int, c_char, byref",ctypes,POINTER,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spmv.py,python,c_int from ctypes,import,,,,Import: c_int from ctypes,qutip,qutip,v5.0.4,"from ctypes import POINTER, c_int, c_char, byref",ctypes,c_int,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spmv.py,python,c_char from ctypes,import,,,,Import: c_char from ctypes,qutip,qutip,v5.0.4,"from ctypes import POINTER, c_int, c_char, byref",ctypes,c_char,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spmv.py,python,byref from ctypes,import,,,,Import: byref from ctypes,qutip,qutip,v5.0.4,"from ctypes import POINTER, c_int, c_char, byref",ctypes,byref,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spmv.py,python,qutip.settings,import,,,,Import: qutip.settings,qutip,qutip,v5.0.4,import qutip.settings as qset,,qutip.settings,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spmv.py,python,ndpointer from numpy.ctypeslib,local_import,,,,Import: ndpointer from numpy.ctypeslib,qutip,qutip,v5.0.4,from numpy.ctypeslib import ndpointer,numpy.ctypeslib,ndpointer,,,numpy.ctypeslib,,,,,,,,,,,,
,spmv.py,python,,,,,,File: qutip\_mkl,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,spmv.py,python,,,,,,Directory: qutip\_mkl\spmv.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,[instance] mkl_lu._np_pt = np_pt,class_field,,,,Class field: [instance] mkl_lu._np_pt = np_pt,qutip,qutip,v5.0.4,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._np_pt = np_pt,self._np_pt = np_pt,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,[instance] mkl_lu._dim = dim,class_field,,,,Class field: [instance] mkl_lu._dim = dim,qutip,qutip,v5.0.4,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._dim = dim,self._dim = dim,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,[instance] mkl_lu._is_complex = is_complex,class_field,,,,Class field: [instance] mkl_lu._is_complex = is_complex,qutip,qutip,v5.0.4,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._is_complex = is_complex,self._is_complex = is_complex,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,[instance] mkl_lu._data = data,class_field,,,,Class field: [instance] mkl_lu._data = data,qutip,qutip,v5.0.4,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._data = data,self._data = data,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,[instance] mkl_lu._indptr = indptr,class_field,,,,Class field: [instance] mkl_lu._indptr = indptr,qutip,qutip,v5.0.4,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._indptr = indptr,self._indptr = indptr,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,[instance] mkl_lu._indices = indices,class_field,,,,Class field: [instance] mkl_lu._indices = indices,qutip,qutip,v5.0.4,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._indices = indices,self._indices = indices,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,[instance] mkl_lu._iparm = iparm,class_field,,,,Class field: [instance] mkl_lu._iparm = iparm,qutip,qutip,v5.0.4,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._iparm = iparm,self._iparm = iparm,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,[instance] mkl_lu._np_iparm = np_iparm,class_field,,,,Class field: [instance] mkl_lu._np_iparm = np_iparm,qutip,qutip,v5.0.4,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._np_iparm = np_iparm,self._np_iparm = np_iparm,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,[instance] mkl_lu._mtype = mtype,class_field,,,,Class field: [instance] mkl_lu._mtype = mtype,qutip,qutip,v5.0.4,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._mtype = mtype,self._mtype = mtype,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,[instance] mkl_lu._perm = perm,class_field,,,,Class field: [instance] mkl_lu._perm = perm,qutip,qutip,v5.0.4,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._perm = perm,self._perm = perm,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,[instance] mkl_lu._np_perm = np_perm,class_field,,,,Class field: [instance] mkl_lu._np_perm = np_perm,qutip,qutip,v5.0.4,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._np_perm = np_perm,self._np_perm = np_perm,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,[instance] mkl_lu._factor_time = factor_time,class_field,,,,Class field: [instance] mkl_lu._factor_time = factor_time,qutip,qutip,v5.0.4,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._factor_time = factor_time,self._factor_time = factor_time,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,[instance] mkl_lu._solve_time = None,class_field,,,,Class field: [instance] mkl_lu._solve_time = None,qutip,qutip,v5.0.4,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",self._solve_time = None,self._solve_time = None,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,"mkl_lu.__init__(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",class_method,,,,"Class method: mkl_lu.__init__(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",qutip,qutip,v5.0.4,,,,,,,mkl_lu,__init__,"(self, np_pt=None, dim=None, is_complex=None, data=None,
                 indptr=None, indices=None, iparm=None, np_iparm=None,
                 mtype=None, perm=None, np_perm=None, factor_time=None)",,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,"mkl_lu.solve(self, b, verbose=None)",class_method,,,,"Class method: mkl_lu.solve(self, b, verbose=None)",qutip,qutip,v5.0.4,,,,,,,mkl_lu,solve,"(self, b, verbose=None)",,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,mkl_lu.info(self),class_method,,,,Class method: mkl_lu.info(self),qutip,qutip,v5.0.4,,,,,,,mkl_lu,info,(self),,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,mkl_lu.delete(self),class_method,,,,Class method: mkl_lu.delete(self),qutip,qutip,v5.0.4,,,,,,,mkl_lu,delete,(self),,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,mkl_lu,class,,,,Class: mkl_lu,qutip,qutip,v5.0.4,,,,,,,mkl_lu,,,,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,"_pardiso_parameters(hermitian, has_perm,
                        max_iter_refine,
                        scaling_vectors,
                        weighted_matching)",function,,,,"Function: _pardiso_parameters(hermitian, has_perm,
                        max_iter_refine,
                        scaling_vectors,
                        weighted_matching)",qutip,qutip,v5.0.4,,,,_pardiso_parameters,"(hermitian, has_perm,
                        max_iter_refine,
                        scaling_vectors,
                        weighted_matching)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,_default_solver_args(),function,,,,Function: _default_solver_args(),qutip,qutip,v5.0.4,,,,_default_solver_args,(),,,,,,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,"_mkl_matrix_type(dtype, solver_args)",function,,,,"Function: _mkl_matrix_type(dtype, solver_args)",qutip,qutip,v5.0.4,,,,_mkl_matrix_type,"(dtype, solver_args)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,"mkl_splu(A, perm=None, verbose=False, **kwargs)",function,,,,"Function: mkl_splu(A, perm=None, verbose=False, **kwargs)",qutip,qutip,v5.0.4,,,,mkl_splu,"(A, perm=None, verbose=False, **kwargs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,"mkl_spsolve(A, b, perm=None, verbose=False, **kwargs)",function,,,,"Function: mkl_spsolve(A, b, perm=None, verbose=False, **kwargs)",qutip,qutip,v5.0.4,,,,mkl_spsolve,"(A, b, perm=None, verbose=False, **kwargs)",,,,,,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,pardiso = qset.mkl_lib.pardiso,constant,pardiso = qset.mkl_lib.pardiso,pardiso,qset.mkl_lib.pardiso,Constant: pardiso = qset.mkl_lib.pardiso,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,pardiso_delete = qset.mkl_lib.pardiso_handle_delete,constant,pardiso_delete = qset.mkl_lib.pardiso_handle_delete,pardiso_delete,qset.mkl_lib.pardiso_handle_delete,Constant: pardiso_delete = qset.mkl_lib.pardiso_handle_delete,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,"pardiso_error_msgs = {
    '-1': 'Input inconsistant',
    '-2': 'Out of memory',
    '-3': 'Reordering problem',
    '-4':
        'Zero pivot, numerical factorization or iterative refinement problem',
    '-5': 'Unclassified internal error',
    '-6': 'Reordering failed',
    '-7': 'Diagonal matrix is singular',
    '-8': '32-bit integer overflow',
    '-9': 'Not enough memory for OOC',
    '-10': 'Error opening OOC files',
    '-11': 'Read/write error with OOC files',
    '-12': 'Pardiso-64 called from 32-bit library',
}",constant,"pardiso_error_msgs = {
    '-1': 'Input inconsistant',
    '-2': 'Out of memory',
    '-3': 'Reordering problem',
    '-4':
        'Zero pivot, numerical factorization or iterative refinement problem',
    '-5': 'Unclassified internal error',
    '-6': 'Reordering failed',
    '-7': 'Diagonal matrix is singular',
    '-8': '32-bit integer overflow',
    '-9': 'Not enough memory for OOC',
    '-10': 'Error opening OOC files',
    '-11': 'Read/write error with OOC files',
    '-12': 'Pardiso-64 called from 32-bit library',
}",pardiso_error_msgs,"{
    '-1': 'Input inconsistant',
    '-2': 'Out of memory',
    '-3': 'Reordering problem',
    '-4':
        'Zero pivot, numerical factorization or iterative refinement problem',
    '-5': 'Unclassified internal error',
    '-6': 'Reordering failed',
    '-7': 'Diagonal matrix is singular',
    '-8': '32-bit integer overflow',
    '-9': 'Not enough memory for OOC',
    '-10': 'Error opening OOC files',
    '-11': 'Read/write error with OOC files',
    '-12': 'Pardiso-64 called from 32-bit library',
}","Constant: pardiso_error_msgs = {
    '-1': 'Input inconsistant',
    '-2': 'Out of memory',
    '-3': 'Reordering problem',
    '-4':
        'Zero pivot, numerical factorization or iterative refinement problem',
    '-5': 'Unclassified internal error',
    '-6': 'Reordering failed',
    '-7': 'Diagonal matrix is singular',
    '-8': '32-bit integer overflow',
    '-9': 'Not enough memory for OOC',
    '-10': 'Error opening OOC files',
    '-11': 'Read/write error with OOC files',
    '-12': 'Pardiso-64 called from 32-bit library',
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,"_MATRIX_TYPE_NAMES = {
    4: 'Complex Hermitian positive-definite',
    -4: 'Complex Hermitian indefinite',
    2: 'Real symmetric positive-definite',
    -2: 'Real symmetric indefinite',
    11: 'Real non-symmetric',
    13: 'Complex non-symmetric',
}",constant,"_MATRIX_TYPE_NAMES = {
    4: 'Complex Hermitian positive-definite',
    -4: 'Complex Hermitian indefinite',
    2: 'Real symmetric positive-definite',
    -2: 'Real symmetric indefinite',
    11: 'Real non-symmetric',
    13: 'Complex non-symmetric',
}",_MATRIX_TYPE_NAMES,"{
    4: 'Complex Hermitian positive-definite',
    -4: 'Complex Hermitian indefinite',
    2: 'Real symmetric positive-definite',
    -2: 'Real symmetric indefinite',
    11: 'Real non-symmetric',
    13: 'Complex non-symmetric',
}","Constant: _MATRIX_TYPE_NAMES = {
    4: 'Complex Hermitian positive-definite',
    -4: 'Complex Hermitian indefinite',
    2: 'Real symmetric positive-definite',
    -2: 'Real symmetric indefinite',
    11: 'Real non-symmetric',
    13: 'Complex non-symmetric',
}",qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,sys,import,,,,Import: sys,qutip,qutip,v5.0.4,import sys,,sys,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,numpy,import,,,,Import: numpy,qutip,qutip,v5.0.4,import numpy as np,,numpy,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,scipy.sparse,import,,,,Import: scipy.sparse,qutip,qutip,v5.0.4,import scipy.sparse as sp,,scipy.sparse,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,c_int from ctypes,import,,,,Import: c_int from ctypes,qutip,qutip,v5.0.4,"from ctypes import c_int, byref",ctypes,c_int,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,byref from ctypes,import,,,,Import: byref from ctypes,qutip,qutip,v5.0.4,"from ctypes import c_int, byref",ctypes,byref,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,time,import,,,,Import: time,qutip,qutip,v5.0.4,import time,,time,,,,,,,,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,ndpointer from numpy.ctypeslib,local_import,,,,Import: ndpointer from numpy.ctypeslib,qutip,qutip,v5.0.4,from numpy.ctypeslib import ndpointer,numpy.ctypeslib,ndpointer,,,numpy.ctypeslib,,,,,,,,,,,,
qutip_qutip_v5.0.4,spsolve.py,python,settings from qutip.settings,local_import,,,,Import: settings from qutip.settings,qutip,qutip,v5.0.4,from qutip.settings import settings as qset,qutip.settings,settings,,,qutip.settings,,,,,,,,,,,,
,spsolve.py,python,,,,,,File: qutip\_mkl,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,spsolve.py,python,,,,,,Directory: qutip\_mkl\spsolve.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: qutip\_mkl,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: qutip\_mkl\__init__.py,qutip,qutip,v5.0.4,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,min-deps.py,python,min_dep(req: Requirement) -> Requirement,function,,,,Function: min_dep(req: Requirement) -> Requirement,scverse,scanpy,1.10.1,,,,min_dep,(req: Requirement),,,,,,,,Requirement,,,,,
scverse_scanpy_1.10.1,min-deps.py,python,"extract_min_deps(
    dependencies: Iterable[Requirement], *, pyproject
) -> Generator[Requirement, None, None]",function,,,,"Function: extract_min_deps(
    dependencies: Iterable[Requirement], *, pyproject
) -> Generator[Requirement, None, None]",scverse,scanpy,1.10.1,,,,extract_min_deps,"(
    dependencies: Iterable[Requirement], *, pyproject
)",,,,,,,,"Generator[Requirement, None, None]",,,,,
scverse_scanpy_1.10.1,min-deps.py,python,main(),function,,,,Function: main(),scverse,scanpy,1.10.1,,,,main,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,min-deps.py,python,argparse,import,,,,Import: argparse,scverse,scanpy,1.10.1,import argparse,,argparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,min-deps.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,,sys,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,min-deps.py,python,deque from collections,import,,,,Import: deque from collections,scverse,scanpy,1.10.1,from collections import deque,collections,deque,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,min-deps.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,min-deps.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,min-deps.py,python,Requirement from packaging.requirements,local_import,,,,Import: Requirement from packaging.requirements,scverse,scanpy,1.10.1,from packaging.requirements import Requirement,packaging.requirements,Requirement,,,packaging.requirements,,,,,,,,,,,,
scverse_scanpy_1.10.1,min-deps.py,python,Version from packaging.version,local_import,,,,Import: Version from packaging.version,scverse,scanpy,1.10.1,from packaging.version import Version,packaging.version,Version,,,packaging.version,,,,,,,,,,,,
,min-deps.py,python,,,,,,File: ci\scripts,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,min-deps.py,python,,,,,,Directory: ci\scripts\min-deps.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,setup(app: Sphinx),function,,,,Function: setup(app: Sphinx),scverse,scanpy,1.10.1,,,,setup,(app: Sphinx),,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,HERE = Path(__file__).parent,constant,HERE = Path(__file__).parent,HERE,Path(__file__).parent,Constant: HERE = Path(__file__).parent,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,nitpicky = True,constant,nitpicky = True,nitpicky,True,Constant: nitpicky = True,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"needs_sphinx = ""4.0""",constant,"needs_sphinx = ""4.0""",needs_sphinx,"""4.0""","Constant: needs_sphinx = ""4.0""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"suppress_warnings = [
    ""myst.header"",  # https://github.com/executablebooks/MyST-Parser/issues/262
]",constant,"suppress_warnings = [
    ""myst.header"",  # https://github.com/executablebooks/MyST-Parser/issues/262
]",suppress_warnings,"[
    ""myst.header"",  # https://github.com/executablebooks/MyST-Parser/issues/262
]","Constant: suppress_warnings = [
    ""myst.header"",  # https://github.com/executablebooks/MyST-Parser/issues/262
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"project = ""Scanpy""",constant,"project = ""Scanpy""",project,"""Scanpy""","Constant: project = ""Scanpy""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"author = ""Scanpy development team""",constant,"author = ""Scanpy development team""",author,"""Scanpy development team""","Constant: author = ""Scanpy development team""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"repository_url = ""https://github.com/scverse/scanpy""",constant,"repository_url = ""https://github.com/scverse/scanpy""",repository_url,"""https://github.com/scverse/scanpy""","Constant: repository_url = ""https://github.com/scverse/scanpy""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"copyright = f""{datetime.now():%Y}, the Scanpy development team""",constant,"copyright = f""{datetime.now():%Y}, the Scanpy development team""",copyright,"f""{datetime.now():%Y}, the Scanpy development team""","Constant: copyright = f""{datetime.now():%Y}, the Scanpy development team""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"version = scanpy.__version__.replace("".dirty"", """")",constant,"version = scanpy.__version__.replace("".dirty"", """")",version,"scanpy.__version__.replace("".dirty"", """")","Constant: version = scanpy.__version__.replace("".dirty"", """")",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,release = version,constant,release = version,release,version,Constant: release = version,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"bibtex_bibfiles = [""references.bib""]",constant,"bibtex_bibfiles = [""references.bib""]",bibtex_bibfiles,"[""references.bib""]","Constant: bibtex_bibfiles = [""references.bib""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"bibtex_reference_style = ""author_year""",constant,"bibtex_reference_style = ""author_year""",bibtex_reference_style,"""author_year""","Constant: bibtex_reference_style = ""author_year""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"templates_path = [""_templates""]",constant,"templates_path = [""_templates""]",templates_path,"[""_templates""]","Constant: templates_path = [""_templates""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"master_doc = ""index""",constant,"master_doc = ""index""",master_doc,"""index""","Constant: master_doc = ""index""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"default_role = ""literal""",constant,"default_role = ""literal""",default_role,"""literal""","Constant: default_role = ""literal""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"exclude_patterns = [""_build"", ""Thumbs.db"", "".DS_Store"", ""**.ipynb_checkpoints""]",constant,"exclude_patterns = [""_build"", ""Thumbs.db"", "".DS_Store"", ""**.ipynb_checkpoints""]",exclude_patterns,"[""_build"", ""Thumbs.db"", "".DS_Store"", ""**.ipynb_checkpoints""]","Constant: exclude_patterns = [""_build"", ""Thumbs.db"", "".DS_Store"", ""**.ipynb_checkpoints""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"extensions = [
    ""myst_nb"",
    ""sphinx_copybutton"",
    ""sphinx.ext.autodoc"",
    ""sphinx.ext.intersphinx"",
    ""sphinx.ext.doctest"",
    ""sphinx.ext.coverage"",
    ""sphinx.ext.mathjax"",
    ""sphinx.ext.napoleon"",
    ""sphinx.ext.autosummary"",
    ""sphinx.ext.extlinks"",
    ""sphinxcontrib.bibtex"",
    ""matplotlib.sphinxext.plot_directive"",
    ""sphinx_autodoc_typehints"",  # needs to be after napoleon
    ""git_ref"",  # needs to be before scanpydoc.rtd_github_links
    ""scanpydoc"",  # needs to be before sphinx.ext.linkcode
    ""sphinx.ext.linkcode"",
    ""sphinx_design"",
    ""sphinx_search.extension"",
    ""sphinxext.opengraph"",
    *[p.stem for p in (HERE / ""extensions"").glob(""*.py"") if p.stem not in {""git_ref""}],
]",constant,"extensions = [
    ""myst_nb"",
    ""sphinx_copybutton"",
    ""sphinx.ext.autodoc"",
    ""sphinx.ext.intersphinx"",
    ""sphinx.ext.doctest"",
    ""sphinx.ext.coverage"",
    ""sphinx.ext.mathjax"",
    ""sphinx.ext.napoleon"",
    ""sphinx.ext.autosummary"",
    ""sphinx.ext.extlinks"",
    ""sphinxcontrib.bibtex"",
    ""matplotlib.sphinxext.plot_directive"",
    ""sphinx_autodoc_typehints"",  # needs to be after napoleon
    ""git_ref"",  # needs to be before scanpydoc.rtd_github_links
    ""scanpydoc"",  # needs to be before sphinx.ext.linkcode
    ""sphinx.ext.linkcode"",
    ""sphinx_design"",
    ""sphinx_search.extension"",
    ""sphinxext.opengraph"",
    *[p.stem for p in (HERE / ""extensions"").glob(""*.py"") if p.stem not in {""git_ref""}],
]",extensions,"[
    ""myst_nb"",
    ""sphinx_copybutton"",
    ""sphinx.ext.autodoc"",
    ""sphinx.ext.intersphinx"",
    ""sphinx.ext.doctest"",
    ""sphinx.ext.coverage"",
    ""sphinx.ext.mathjax"",
    ""sphinx.ext.napoleon"",
    ""sphinx.ext.autosummary"",
    ""sphinx.ext.extlinks"",
    ""sphinxcontrib.bibtex"",
    ""matplotlib.sphinxext.plot_directive"",
    ""sphinx_autodoc_typehints"",  # needs to be after napoleon
    ""git_ref"",  # needs to be before scanpydoc.rtd_github_links
    ""scanpydoc"",  # needs to be before sphinx.ext.linkcode
    ""sphinx.ext.linkcode"",
    ""sphinx_design"",
    ""sphinx_search.extension"",
    ""sphinxext.opengraph"",
    *[p.stem for p in (HERE / ""extensions"").glob(""*.py"") if p.stem not in {""git_ref""}],
]","Constant: extensions = [
    ""myst_nb"",
    ""sphinx_copybutton"",
    ""sphinx.ext.autodoc"",
    ""sphinx.ext.intersphinx"",
    ""sphinx.ext.doctest"",
    ""sphinx.ext.coverage"",
    ""sphinx.ext.mathjax"",
    ""sphinx.ext.napoleon"",
    ""sphinx.ext.autosummary"",
    ""sphinx.ext.extlinks"",
    ""sphinxcontrib.bibtex"",
    ""matplotlib.sphinxext.plot_directive"",
    ""sphinx_autodoc_typehints"",  # needs to be after napoleon
    ""git_ref"",  # needs to be before scanpydoc.rtd_github_links
    ""scanpydoc"",  # needs to be before sphinx.ext.linkcode
    ""sphinx.ext.linkcode"",
    ""sphinx_design"",
    ""sphinx_search.extension"",
    ""sphinxext.opengraph"",
    *[p.stem for p in (HERE / ""extensions"").glob(""*.py"") if p.stem not in {""git_ref""}],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,autosummary_generate = True,constant,autosummary_generate = True,autosummary_generate,True,Constant: autosummary_generate = True,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"autodoc_member_order = ""bysource""",constant,"autodoc_member_order = ""bysource""",autodoc_member_order,"""bysource""","Constant: autodoc_member_order = ""bysource""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,napoleon_google_docstring = False,constant,napoleon_google_docstring = False,napoleon_google_docstring,False,Constant: napoleon_google_docstring = False,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,napoleon_numpy_docstring = True,constant,napoleon_numpy_docstring = True,napoleon_numpy_docstring,True,Constant: napoleon_numpy_docstring = True,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,napoleon_include_init_with_doc = False,constant,napoleon_include_init_with_doc = False,napoleon_include_init_with_doc,False,Constant: napoleon_include_init_with_doc = False,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,napoleon_use_rtype = True,constant,napoleon_use_rtype = True,napoleon_use_rtype,True,Constant: napoleon_use_rtype = True,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,napoleon_use_param = True,constant,napoleon_use_param = True,napoleon_use_param,True,Constant: napoleon_use_param = True,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"napoleon_custom_sections = [(""Params"", ""Parameters"")]",constant,"napoleon_custom_sections = [(""Params"", ""Parameters"")]",napoleon_custom_sections,"[(""Params"", ""Parameters"")]","Constant: napoleon_custom_sections = [(""Params"", ""Parameters"")]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,todo_include_todos = False,constant,todo_include_todos = False,todo_include_todos,False,Constant: todo_include_todos = False,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"api_dir = HERE / ""api""",constant,"api_dir = HERE / ""api""",api_dir,"HERE / ""api""","Constant: api_dir = HERE / ""api""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"myst_enable_extensions = [
    ""amsmath"",
    ""colon_fence"",
    ""deflist"",
    ""dollarmath"",
    ""html_image"",
    ""html_admonition"",
]",constant,"myst_enable_extensions = [
    ""amsmath"",
    ""colon_fence"",
    ""deflist"",
    ""dollarmath"",
    ""html_image"",
    ""html_admonition"",
]",myst_enable_extensions,"[
    ""amsmath"",
    ""colon_fence"",
    ""deflist"",
    ""dollarmath"",
    ""html_image"",
    ""html_admonition"",
]","Constant: myst_enable_extensions = [
    ""amsmath"",
    ""colon_fence"",
    ""deflist"",
    ""dollarmath"",
    ""html_image"",
    ""html_admonition"",
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"myst_url_schemes = (""http"", ""https"", ""mailto"", ""ftp"")",constant,"myst_url_schemes = (""http"", ""https"", ""mailto"", ""ftp"")",myst_url_schemes,"(""http"", ""https"", ""mailto"", ""ftp"")","Constant: myst_url_schemes = (""http"", ""https"", ""mailto"", ""ftp"")",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"nb_output_stderr = ""remove""",constant,"nb_output_stderr = ""remove""",nb_output_stderr,"""remove""","Constant: nb_output_stderr = ""remove""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"nb_execution_mode = ""off""",constant,"nb_execution_mode = ""off""",nb_execution_mode,"""off""","Constant: nb_execution_mode = ""off""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,nb_merge_streams = True,constant,nb_merge_streams = True,nb_merge_streams,True,Constant: nb_merge_streams = True,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"ogp_site_url = ""https://scanpy.readthedocs.io/en/stable/""",constant,"ogp_site_url = ""https://scanpy.readthedocs.io/en/stable/""",ogp_site_url,"""https://scanpy.readthedocs.io/en/stable/""","Constant: ogp_site_url = ""https://scanpy.readthedocs.io/en/stable/""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"ogp_image = ""https://scanpy.readthedocs.io/en/stable/_static/Scanpy_Logo_BrightFG.svg""",constant,"ogp_image = ""https://scanpy.readthedocs.io/en/stable/_static/Scanpy_Logo_BrightFG.svg""",ogp_image,"""https://scanpy.readthedocs.io/en/stable/_static/Scanpy_Logo_BrightFG.svg""","Constant: ogp_image = ""https://scanpy.readthedocs.io/en/stable/_static/Scanpy_Logo_BrightFG.svg""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"typehints_defaults = ""braces""",constant,"typehints_defaults = ""braces""",typehints_defaults,"""braces""","Constant: typehints_defaults = ""braces""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"pygments_style = ""default""",constant,"pygments_style = ""default""",pygments_style,"""default""","Constant: pygments_style = ""default""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"pygments_dark_style = ""native""",constant,"pygments_dark_style = ""native""",pygments_dark_style,"""native""","Constant: pygments_dark_style = ""native""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"intersphinx_mapping = dict(
    anndata=(""https://anndata.readthedocs.io/en/stable/"", None),
    bbknn=(""https://bbknn.readthedocs.io/en/latest/"", None),
    cuml=(""https://docs.rapids.ai/api/cuml/stable/"", None),
    cycler=(""https://matplotlib.org/cycler/"", None),
    dask=(""https://docs.dask.org/en/stable/"", None),
    dask_ml=(""https://ml.dask.org/"", None),
    h5py=(""https://docs.h5py.org/en/stable/"", None),
    ipython=(""https://ipython.readthedocs.io/en/stable/"", None),
    igraph=(""https://python.igraph.org/en/stable/api/"", None),
    leidenalg=(""https://leidenalg.readthedocs.io/en/latest/"", None),
    louvain=(""https://louvain-igraph.readthedocs.io/en/latest/"", None),
    matplotlib=(""https://matplotlib.org/stable/"", None),
    networkx=(""https://networkx.org/documentation/stable/"", None),
    numpy=(""https://numpy.org/doc/stable/"", None),
    pandas=(""https://pandas.pydata.org/pandas-docs/stable/"", None),
    pynndescent=(""https://pynndescent.readthedocs.io/en/latest/"", None),
    pytest=(""https://docs.pytest.org/en/latest/"", None),
    python=(""https://docs.python.org/3"", None),
    rapids_singlecell=(""https://rapids-singlecell.readthedocs.io/en/latest/"", None),
    scipy=(""https://docs.scipy.org/doc/scipy/"", None),
    seaborn=(""https://seaborn.pydata.org/"", None),
    sklearn=(""https://scikit-learn.org/stable/"", None),
)",constant,"intersphinx_mapping = dict(
    anndata=(""https://anndata.readthedocs.io/en/stable/"", None),
    bbknn=(""https://bbknn.readthedocs.io/en/latest/"", None),
    cuml=(""https://docs.rapids.ai/api/cuml/stable/"", None),
    cycler=(""https://matplotlib.org/cycler/"", None),
    dask=(""https://docs.dask.org/en/stable/"", None),
    dask_ml=(""https://ml.dask.org/"", None),
    h5py=(""https://docs.h5py.org/en/stable/"", None),
    ipython=(""https://ipython.readthedocs.io/en/stable/"", None),
    igraph=(""https://python.igraph.org/en/stable/api/"", None),
    leidenalg=(""https://leidenalg.readthedocs.io/en/latest/"", None),
    louvain=(""https://louvain-igraph.readthedocs.io/en/latest/"", None),
    matplotlib=(""https://matplotlib.org/stable/"", None),
    networkx=(""https://networkx.org/documentation/stable/"", None),
    numpy=(""https://numpy.org/doc/stable/"", None),
    pandas=(""https://pandas.pydata.org/pandas-docs/stable/"", None),
    pynndescent=(""https://pynndescent.readthedocs.io/en/latest/"", None),
    pytest=(""https://docs.pytest.org/en/latest/"", None),
    python=(""https://docs.python.org/3"", None),
    rapids_singlecell=(""https://rapids-singlecell.readthedocs.io/en/latest/"", None),
    scipy=(""https://docs.scipy.org/doc/scipy/"", None),
    seaborn=(""https://seaborn.pydata.org/"", None),
    sklearn=(""https://scikit-learn.org/stable/"", None),
)",intersphinx_mapping,"dict(
    anndata=(""https://anndata.readthedocs.io/en/stable/"", None),
    bbknn=(""https://bbknn.readthedocs.io/en/latest/"", None),
    cuml=(""https://docs.rapids.ai/api/cuml/stable/"", None),
    cycler=(""https://matplotlib.org/cycler/"", None),
    dask=(""https://docs.dask.org/en/stable/"", None),
    dask_ml=(""https://ml.dask.org/"", None),
    h5py=(""https://docs.h5py.org/en/stable/"", None),
    ipython=(""https://ipython.readthedocs.io/en/stable/"", None),
    igraph=(""https://python.igraph.org/en/stable/api/"", None),
    leidenalg=(""https://leidenalg.readthedocs.io/en/latest/"", None),
    louvain=(""https://louvain-igraph.readthedocs.io/en/latest/"", None),
    matplotlib=(""https://matplotlib.org/stable/"", None),
    networkx=(""https://networkx.org/documentation/stable/"", None),
    numpy=(""https://numpy.org/doc/stable/"", None),
    pandas=(""https://pandas.pydata.org/pandas-docs/stable/"", None),
    pynndescent=(""https://pynndescent.readthedocs.io/en/latest/"", None),
    pytest=(""https://docs.pytest.org/en/latest/"", None),
    python=(""https://docs.python.org/3"", None),
    rapids_singlecell=(""https://rapids-singlecell.readthedocs.io/en/latest/"", None),
    scipy=(""https://docs.scipy.org/doc/scipy/"", None),
    seaborn=(""https://seaborn.pydata.org/"", None),
    sklearn=(""https://scikit-learn.org/stable/"", None),
)","Constant: intersphinx_mapping = dict(
    anndata=(""https://anndata.readthedocs.io/en/stable/"", None),
    bbknn=(""https://bbknn.readthedocs.io/en/latest/"", None),
    cuml=(""https://docs.rapids.ai/api/cuml/stable/"", None),
    cycler=(""https://matplotlib.org/cycler/"", None),
    dask=(""https://docs.dask.org/en/stable/"", None),
    dask_ml=(""https://ml.dask.org/"", None),
    h5py=(""https://docs.h5py.org/en/stable/"", None),
    ipython=(""https://ipython.readthedocs.io/en/stable/"", None),
    igraph=(""https://python.igraph.org/en/stable/api/"", None),
    leidenalg=(""https://leidenalg.readthedocs.io/en/latest/"", None),
    louvain=(""https://louvain-igraph.readthedocs.io/en/latest/"", None),
    matplotlib=(""https://matplotlib.org/stable/"", None),
    networkx=(""https://networkx.org/documentation/stable/"", None),
    numpy=(""https://numpy.org/doc/stable/"", None),
    pandas=(""https://pandas.pydata.org/pandas-docs/stable/"", None),
    pynndescent=(""https://pynndescent.readthedocs.io/en/latest/"", None),
    pytest=(""https://docs.pytest.org/en/latest/"", None),
    python=(""https://docs.python.org/3"", None),
    rapids_singlecell=(""https://rapids-singlecell.readthedocs.io/en/latest/"", None),
    scipy=(""https://docs.scipy.org/doc/scipy/"", None),
    seaborn=(""https://seaborn.pydata.org/"", None),
    sklearn=(""https://scikit-learn.org/stable/"", None),
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"html_theme = ""scanpydoc""",constant,"html_theme = ""scanpydoc""",html_theme,"""scanpydoc""","Constant: html_theme = ""scanpydoc""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"html_theme_options = {
    ""repository_url"": repository_url,
    ""use_repository_button"": True,
}",constant,"html_theme_options = {
    ""repository_url"": repository_url,
    ""use_repository_button"": True,
}",html_theme_options,"{
    ""repository_url"": repository_url,
    ""use_repository_button"": True,
}","Constant: html_theme_options = {
    ""repository_url"": repository_url,
    ""use_repository_button"": True,
}",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"html_static_path = [""_static""]",constant,"html_static_path = [""_static""]",html_static_path,"[""_static""]","Constant: html_static_path = [""_static""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,html_show_sphinx = False,constant,html_show_sphinx = False,html_show_sphinx,False,Constant: html_show_sphinx = False,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"html_logo = ""_static/img/Scanpy_Logo_BrightFG.svg""",constant,"html_logo = ""_static/img/Scanpy_Logo_BrightFG.svg""",html_logo,"""_static/img/Scanpy_Logo_BrightFG.svg""","Constant: html_logo = ""_static/img/Scanpy_Logo_BrightFG.svg""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"html_title = ""scanpy""",constant,"html_title = ""scanpy""",html_title,"""scanpy""","Constant: html_title = ""scanpy""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"htmlhelp_basename = f""{project}doc""",constant,"htmlhelp_basename = f""{project}doc""",htmlhelp_basename,"f""{project}doc""","Constant: htmlhelp_basename = f""{project}doc""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"doc_title = f""{project} Documentation""",constant,"doc_title = f""{project} Documentation""",doc_title,"f""{project} Documentation""","Constant: doc_title = f""{project} Documentation""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"latex_documents = [(master_doc, f""{project}.tex"", doc_title, author, ""manual"")]",constant,"latex_documents = [(master_doc, f""{project}.tex"", doc_title, author, ""manual"")]",latex_documents,"[(master_doc, f""{project}.tex"", doc_title, author, ""manual"")]","Constant: latex_documents = [(master_doc, f""{project}.tex"", doc_title, author, ""manual"")]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"man_pages = [(master_doc, project, doc_title, [author], 1)]",constant,"man_pages = [(master_doc, project, doc_title, [author], 1)]",man_pages,"[(master_doc, project, doc_title, [author], 1)]","Constant: man_pages = [(master_doc, project, doc_title, [author], 1)]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"texinfo_documents = [
    (
        master_doc,
        project,
        doc_title,
        author,
        project,
        ""One line description of project."",
        ""Miscellaneous"",
    )
]",constant,"texinfo_documents = [
    (
        master_doc,
        project,
        doc_title,
        author,
        project,
        ""One line description of project."",
        ""Miscellaneous"",
    )
]",texinfo_documents,"[
    (
        master_doc,
        project,
        doc_title,
        author,
        project,
        ""One line description of project."",
        ""Miscellaneous"",
    )
]","Constant: texinfo_documents = [
    (
        master_doc,
        project,
        doc_title,
        author,
        project,
        ""One line description of project."",
        ""Miscellaneous"",
    )
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"qualname_overrides = {
    ""sklearn.neighbors._dist_metrics.DistanceMetric"": ""sklearn.metrics.DistanceMetric"",
    ""scanpy.plotting._matrixplot.MatrixPlot"": ""scanpy.pl.MatrixPlot"",
    ""scanpy.plotting._dotplot.DotPlot"": ""scanpy.pl.DotPlot"",
    ""scanpy.plotting._stacked_violin.StackedViolin"": ""scanpy.pl.StackedViolin"",
    ""pandas.core.series.Series"": ""pandas.Series"",
}",constant,"qualname_overrides = {
    ""sklearn.neighbors._dist_metrics.DistanceMetric"": ""sklearn.metrics.DistanceMetric"",
    ""scanpy.plotting._matrixplot.MatrixPlot"": ""scanpy.pl.MatrixPlot"",
    ""scanpy.plotting._dotplot.DotPlot"": ""scanpy.pl.DotPlot"",
    ""scanpy.plotting._stacked_violin.StackedViolin"": ""scanpy.pl.StackedViolin"",
    ""pandas.core.series.Series"": ""pandas.Series"",
}",qualname_overrides,"{
    ""sklearn.neighbors._dist_metrics.DistanceMetric"": ""sklearn.metrics.DistanceMetric"",
    ""scanpy.plotting._matrixplot.MatrixPlot"": ""scanpy.pl.MatrixPlot"",
    ""scanpy.plotting._dotplot.DotPlot"": ""scanpy.pl.DotPlot"",
    ""scanpy.plotting._stacked_violin.StackedViolin"": ""scanpy.pl.StackedViolin"",
    ""pandas.core.series.Series"": ""pandas.Series"",
}","Constant: qualname_overrides = {
    ""sklearn.neighbors._dist_metrics.DistanceMetric"": ""sklearn.metrics.DistanceMetric"",
    ""scanpy.plotting._matrixplot.MatrixPlot"": ""scanpy.pl.MatrixPlot"",
    ""scanpy.plotting._dotplot.DotPlot"": ""scanpy.pl.DotPlot"",
    ""scanpy.plotting._stacked_violin.StackedViolin"": ""scanpy.pl.StackedViolin"",
    ""pandas.core.series.Series"": ""pandas.Series"",
}",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"nitpick_ignore = [
    # Technical issues
    (""py:class"", ""numpy.int64""),  # documented as “attribute”
    # Will probably be documented
    (""py:class"", ""scanpy._settings.Verbosity""),
    (""py:class"", ""scanpy.neighbors.OnFlySymMatrix""),
    (""py:class"", ""scanpy.plotting._baseplot_class.BasePlot""),
    # Currently undocumented
    # https://github.com/mwaskom/seaborn/issues/1810
    (""py:class"", ""seaborn.matrix.ClusterGrid""),
    (""py:class"", ""samalg.SAM""),
    # Won’t be documented
    (""py:class"", ""scanpy.plotting._utils._AxesSubplot""),
    (""py:class"", ""scanpy._utils.Empty""),
    (""py:class"", ""numpy.random.mtrand.RandomState""),
    (""py:class"", ""scanpy.neighbors._types.KnnTransformerLike""),
    # Will work once scipy 1.8 is released
    (""py:class"", ""scipy.sparse.base.spmatrix""),
    (""py:class"", ""scipy.sparse.csr.csr_matrix""),
]",constant,"nitpick_ignore = [
    # Technical issues
    (""py:class"", ""numpy.int64""),  # documented as “attribute”
    # Will probably be documented
    (""py:class"", ""scanpy._settings.Verbosity""),
    (""py:class"", ""scanpy.neighbors.OnFlySymMatrix""),
    (""py:class"", ""scanpy.plotting._baseplot_class.BasePlot""),
    # Currently undocumented
    # https://github.com/mwaskom/seaborn/issues/1810
    (""py:class"", ""seaborn.matrix.ClusterGrid""),
    (""py:class"", ""samalg.SAM""),
    # Won’t be documented
    (""py:class"", ""scanpy.plotting._utils._AxesSubplot""),
    (""py:class"", ""scanpy._utils.Empty""),
    (""py:class"", ""numpy.random.mtrand.RandomState""),
    (""py:class"", ""scanpy.neighbors._types.KnnTransformerLike""),
    # Will work once scipy 1.8 is released
    (""py:class"", ""scipy.sparse.base.spmatrix""),
    (""py:class"", ""scipy.sparse.csr.csr_matrix""),
]",nitpick_ignore,"[
    # Technical issues
    (""py:class"", ""numpy.int64""),  # documented as “attribute”
    # Will probably be documented
    (""py:class"", ""scanpy._settings.Verbosity""),
    (""py:class"", ""scanpy.neighbors.OnFlySymMatrix""),
    (""py:class"", ""scanpy.plotting._baseplot_class.BasePlot""),
    # Currently undocumented
    # https://github.com/mwaskom/seaborn/issues/1810
    (""py:class"", ""seaborn.matrix.ClusterGrid""),
    (""py:class"", ""samalg.SAM""),
    # Won’t be documented
    (""py:class"", ""scanpy.plotting._utils._AxesSubplot""),
    (""py:class"", ""scanpy._utils.Empty""),
    (""py:class"", ""numpy.random.mtrand.RandomState""),
    (""py:class"", ""scanpy.neighbors._types.KnnTransformerLike""),
    # Will work once scipy 1.8 is released
    (""py:class"", ""scipy.sparse.base.spmatrix""),
    (""py:class"", ""scipy.sparse.csr.csr_matrix""),
]","Constant: nitpick_ignore = [
    # Technical issues
    (""py:class"", ""numpy.int64""),  # documented as “attribute”
    # Will probably be documented
    (""py:class"", ""scanpy._settings.Verbosity""),
    (""py:class"", ""scanpy.neighbors.OnFlySymMatrix""),
    (""py:class"", ""scanpy.plotting._baseplot_class.BasePlot""),
    # Currently undocumented
    # https://github.com/mwaskom/seaborn/issues/1810
    (""py:class"", ""seaborn.matrix.ClusterGrid""),
    (""py:class"", ""samalg.SAM""),
    # Won’t be documented
    (""py:class"", ""scanpy.plotting._utils._AxesSubplot""),
    (""py:class"", ""scanpy._utils.Empty""),
    (""py:class"", ""numpy.random.mtrand.RandomState""),
    (""py:class"", ""scanpy.neighbors._types.KnnTransformerLike""),
    # Will work once scipy 1.8 is released
    (""py:class"", ""scipy.sparse.base.spmatrix""),
    (""py:class"", ""scipy.sparse.csr.csr_matrix""),
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,plot_include_source = True,constant,plot_include_source = True,plot_include_source,True,Constant: plot_include_source = True,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"plot_formats = [(""png"", 90)]",constant,"plot_formats = [(""png"", 90)]",plot_formats,"[(""png"", 90)]","Constant: plot_formats = [(""png"", 90)]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,plot_html_show_formats = False,constant,plot_html_show_formats = False,plot_html_show_formats,False,Constant: plot_html_show_formats = False,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,plot_html_show_source_link = False,constant,plot_html_show_source_link = False,plot_html_show_source_link,False,Constant: plot_html_show_source_link = False,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,plot_working_directory = HERE.parent,constant,plot_working_directory = HERE.parent,plot_working_directory,HERE.parent,Constant: plot_working_directory = HERE.parent,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,"extlinks = {
    ""issue"": (""https://github.com/scverse/scanpy/issues/%s"", ""issue%s""),
    ""pr"": (""https://github.com/scverse/scanpy/pull/%s"", ""pr%s""),
}",constant,"extlinks = {
    ""issue"": (""https://github.com/scverse/scanpy/issues/%s"", ""issue%s""),
    ""pr"": (""https://github.com/scverse/scanpy/pull/%s"", ""pr%s""),
}",extlinks,"{
    ""issue"": (""https://github.com/scverse/scanpy/issues/%s"", ""issue%s""),
    ""pr"": (""https://github.com/scverse/scanpy/pull/%s"", ""pr%s""),
}","Constant: extlinks = {
    ""issue"": (""https://github.com/scverse/scanpy/issues/%s"", ""issue%s""),
    ""pr"": (""https://github.com/scverse/scanpy/pull/%s"", ""pr%s""),
}",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,,sys,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,datetime from datetime,import,,,,Import: datetime from datetime,scverse,scanpy,1.10.1,from datetime import datetime,datetime,datetime,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,matplotlib,import,,,,Import: matplotlib,scverse,scanpy,1.10.1,import matplotlib,,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conf.py,python,Version from packaging.version,local_import,,,,Import: Version from packaging.version,scverse,scanpy,1.10.1,from packaging.version import Version,packaging.version,Version,,,packaging.version,,,,,,,,,,,,
,conf.py,python,,,,,,File: docs,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,conf.py,python,,,,,,Directory: docs\conf.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cite.py,python,"cite_role(  # noqa: PLR0917
    name: str,
    rawsource: str,
    text: str,
    lineno: int,
    inliner: Inliner,
    options: Mapping[str, Any] = MappingProxyType({}),
    content: Sequence[str] = (),
) -> tuple[list[nodes.Node], list[nodes.system_message]]",function,,,,"Function: cite_role(  # noqa: PLR0917
    name: str,
    rawsource: str,
    text: str,
    lineno: int,
    inliner: Inliner,
    options: Mapping[str, Any] = MappingProxyType({}),
    content: Sequence[str] = (),
) -> tuple[list[nodes.Node], list[nodes.system_message]]",scverse,scanpy,1.10.1,,,,cite_role,"(  # noqa: PLR0917
    name: str,
    rawsource: str,
    text: str,
    lineno: int,
    inliner: Inliner,
    options: Mapping[str, Any] = MappingProxyType({}),
    content: Sequence[str] = (),
)",,,,,,,,"tuple[list[nodes.Node], list[nodes.system_message]]",,,,,
scverse_scanpy_1.10.1,cite.py,python,setup(app: Sphinx),function,,,,Function: setup(app: Sphinx),scverse,scanpy,1.10.1,,,,setup,(app: Sphinx),,,,,,,,,,,,,
scverse_scanpy_1.10.1,cite.py,python,MappingProxyType from types,import,,,,Import: MappingProxyType from types,scverse,scanpy,1.10.1,from types import MappingProxyType,types,MappingProxyType,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cite.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cite.py,python,nodes from docutils,import,,,,Import: nodes from docutils,scverse,scanpy,1.10.1,"from docutils import nodes, utils",docutils,nodes,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cite.py,python,utils from docutils,import,,,,Import: utils from docutils,scverse,scanpy,1.10.1,"from docutils import nodes, utils",docutils,utils,,,,,,,,,,,,,,,
,cite.py,python,,,,,,File: docs\extensions,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,cite.py,python,,,,,,Directory: docs\extensions\cite.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,debug_docstrings.py,python,"pd_new(app, what, name, obj, options, lines)",function,,,,"Function: pd_new(app, what, name, obj, options, lines)",scverse,scanpy,1.10.1,,,,pd_new,"(app, what, name, obj, options, lines)",,,,,,,,,"# noqa: PLR0917",,,,
scverse_scanpy_1.10.1,debug_docstrings.py,python,setup(app: Sphinx),function,,,,Function: setup(app: Sphinx),scverse,scanpy,1.10.1,,,,setup,(app: Sphinx),,,,,,,,,,,,,
scverse_scanpy_1.10.1,debug_docstrings.py,python,_pd_orig = sphinx.ext.napoleon._process_docstring,constant,_pd_orig = sphinx.ext.napoleon._process_docstring,_pd_orig,sphinx.ext.napoleon._process_docstring,Constant: _pd_orig = sphinx.ext.napoleon._process_docstring,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,debug_docstrings.py,python,os,import,,,,Import: os,scverse,scanpy,1.10.1,import os,,os,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,debug_docstrings.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,debug_docstrings.py,python,sphinx.ext.napoleon,import,,,,Import: sphinx.ext.napoleon,scverse,scanpy,1.10.1,import sphinx.ext.napoleon,,sphinx.ext.napoleon,,,,,,,,,,,,,,,
,debug_docstrings.py,python,,,,,,File: docs\extensions,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,debug_docstrings.py,python,,,,,,Directory: docs\extensions\debug_docstrings.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,function_images.py,python,"insert_function_images(  # noqa: PLR0917
    app: Sphinx, what: str, name: str, obj: Any, options: Options, lines: list[str]
)",function,,,,"Function: insert_function_images(  # noqa: PLR0917
    app: Sphinx, what: str, name: str, obj: Any, options: Options, lines: list[str]
)",scverse,scanpy,1.10.1,,,,insert_function_images,"(  # noqa: PLR0917
    app: Sphinx, what: str, name: str, obj: Any, options: Options, lines: list[str]
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,function_images.py,python,setup(app: Sphinx),function,,,,Function: setup(app: Sphinx),scverse,scanpy,1.10.1,,,,setup,(app: Sphinx),,,,,,,,,,,,,
scverse_scanpy_1.10.1,function_images.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,function_images.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,function_images.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",typing,Any,,,,,,,,,,,,,,,
,function_images.py,python,,,,,,File: docs\extensions,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,function_images.py,python,,,,,,Directory: docs\extensions\function_images.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,git_ref.py,python,git(*args: str) -> str,function,,,,Function: git(*args: str) -> str,scverse,scanpy,1.10.1,,,,git,(*args: str),,,,,,,,str,,,,,
scverse_scanpy_1.10.1,git_ref.py,python,"set_ref(app: Sphinx, config: Config)",function,,,,"Function: set_ref(app: Sphinx, config: Config)",scverse,scanpy,1.10.1,,,,set_ref,"(app: Sphinx, config: Config)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,git_ref.py,python,setup(app: Sphinx) -> None,function,,,,Function: setup(app: Sphinx) -> None,scverse,scanpy,1.10.1,,,,setup,(app: Sphinx),,,,,,,,,,,,,
scverse_scanpy_1.10.1,git_ref.py,python,re,import,,,,Import: re,scverse,scanpy,1.10.1,import re,,re,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,git_ref.py,python,subprocess,import,,,,Import: subprocess,scverse,scanpy,1.10.1,import subprocess,,subprocess,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,git_ref.py,python,lru_cache from functools,import,,,,Import: lru_cache from functools,scverse,scanpy,1.10.1,from functools import lru_cache,functools,lru_cache,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,git_ref.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
,git_ref.py,python,,,,,,File: docs\extensions,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,git_ref.py,python,,,,,,Directory: docs\extensions\git_ref.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,has_attr_test.py,python,"has_member(obj_path: str, attr: str) -> bool",function,,,,"Function: has_member(obj_path: str, attr: str) -> bool",scverse,scanpy,1.10.1,,,,has_member,"(obj_path: str, attr: str)",,,,,,,,bool,"# https://jinja.palletsprojects.com/en/3.0.x/api/#custom-tests",,,,
scverse_scanpy_1.10.1,has_attr_test.py,python,setup(app: Sphinx),function,,,,Function: setup(app: Sphinx),scverse,scanpy,1.10.1,,,,setup,(app: Sphinx),,,,,,,,,,,,,
scverse_scanpy_1.10.1,has_attr_test.py,python,get_annotations from inspect,import,,,,Import: get_annotations from inspect,scverse,scanpy,1.10.1,from inspect import get_annotations,inspect,get_annotations,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,has_attr_test.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,has_attr_test.py,python,DEFAULT_NAMESPACE from jinja2.defaults,local_import,,,,Import: DEFAULT_NAMESPACE from jinja2.defaults,scverse,scanpy,1.10.1,from jinja2.defaults import DEFAULT_NAMESPACE,jinja2.defaults,DEFAULT_NAMESPACE,,,jinja2.defaults,,,,,,,,,,,,
scverse_scanpy_1.10.1,has_attr_test.py,python,import_string from jinja2.utils,local_import,,,,Import: import_string from jinja2.utils,scverse,scanpy,1.10.1,from jinja2.utils import import_string,jinja2.utils,import_string,,,jinja2.utils,,,,,,,,,,,,
,has_attr_test.py,python,,,,,,File: docs\extensions,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,has_attr_test.py,python,,,,,,Directory: docs\extensions\has_attr_test.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,param_police.py,python,"scanpy_log_param_types(self, fields, field_role=""param"", type_role=""type"")",function,,,,"Function: scanpy_log_param_types(self, fields, field_role=""param"", type_role=""type"")",scverse,scanpy,1.10.1,,,,scanpy_log_param_types,"(self, fields, field_role=""param"", type_role=""type"")",,,,,,,,,,,,,
scverse_scanpy_1.10.1,param_police.py,python,"show_param_warnings(app, exception)",function,,,,"Function: show_param_warnings(app, exception)",scverse,scanpy,1.10.1,,,,show_param_warnings,"(app, exception)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,param_police.py,python,setup(app: Sphinx),function,,,,Function: setup(app: Sphinx),scverse,scanpy,1.10.1,,,,setup,(app: Sphinx),,,,,,,,,,,,,
scverse_scanpy_1.10.1,param_police.py,python,_format_docutils_params_orig = NumpyDocstring._format_docutils_params,constant,_format_docutils_params_orig = NumpyDocstring._format_docutils_params,_format_docutils_params_orig,NumpyDocstring._format_docutils_params,Constant: _format_docutils_params_orig = NumpyDocstring._format_docutils_params,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,param_police.py,python,param_warnings = {},constant,param_warnings = {},param_warnings,{},Constant: param_warnings = {},scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,param_police.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,param_police.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,param_police.py,python,NumpyDocstring from sphinx.ext.napoleon,local_import,,,,Import: NumpyDocstring from sphinx.ext.napoleon,scverse,scanpy,1.10.1,from sphinx.ext.napoleon import NumpyDocstring,sphinx.ext.napoleon,NumpyDocstring,,,sphinx.ext.napoleon,,,,,,,,,,,,
,param_police.py,python,,,,,,File: docs\extensions,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,param_police.py,python,,,,,,Directory: docs\extensions\param_police.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,[instance] _DelegatingSubparsersAction.command = _command,class_field,,,,Class field: [instance] _DelegatingSubparsersAction.command = _command,scverse,scanpy,1.10.1,,,,,,,_DelegatingSubparsersAction,__init__,"(self, *args, _command: str, _runargs: dict[str, Any], **kwargs)",self.command = _command,self.command = _command,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,"[instance] _DelegatingSubparsersAction._name_parser_map = choices = _CommandDelegator(
            _command, self, **_runargs
        )",class_field,,,,"Class field: [instance] _DelegatingSubparsersAction._name_parser_map = choices = _CommandDelegator(
            _command, self, **_runargs
        )",scverse,scanpy,1.10.1,,,,,,,_DelegatingSubparsersAction,__init__,"(self, *args, _command: str, _runargs: dict[str, Any], **kwargs)","self._name_parser_map = self.choices = _CommandDelegator(
            _command, self, **_runargs
        )","self._name_parser_map = self.choices = _CommandDelegator(
            _command, self, **_runargs
        )",,,,,,,
scverse_scanpy_1.10.1,cli.py,python,[instance] _CommandDelegator.command = command,class_field,,,,Class field: [instance] _CommandDelegator.command = command,scverse,scanpy,1.10.1,,,,,,,_CommandDelegator,__init__,"(self, command: str, action: _DelegatingSubparsersAction, **runargs)",self.command = command,self.command = command,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,[instance] _CommandDelegator.action = action,class_field,,,,Class field: [instance] _CommandDelegator.action = action,scverse,scanpy,1.10.1,,,,,,,_CommandDelegator,__init__,"(self, command: str, action: _DelegatingSubparsersAction, **runargs)",self.action = action,self.action = action,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,[instance] _CommandDelegator.parser_map = {},class_field,,,,Class field: [instance] _CommandDelegator.parser_map = {},scverse,scanpy,1.10.1,,,,,,,_CommandDelegator,__init__,"(self, command: str, action: _DelegatingSubparsersAction, **runargs)",self.parser_map = {},self.parser_map = {},,,,,,,
scverse_scanpy_1.10.1,cli.py,python,[instance] _CommandDelegator.runargs = runargs,class_field,,,,Class field: [instance] _CommandDelegator.runargs = runargs,scverse,scanpy,1.10.1,,,,,,,_CommandDelegator,__init__,"(self, command: str, action: _DelegatingSubparsersAction, **runargs)",self.runargs = runargs,self.runargs = runargs,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,[instance] _DelegatingParser.cd = cd,class_field,,,,Class field: [instance] _DelegatingParser.cd = cd,scverse,scanpy,1.10.1,,,,,,,_DelegatingParser,__init__,"(self, cd: _CommandDelegator, subcmd: str)",self.cd = cd,self.cd = cd,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,[instance] _DelegatingParser.subcmd = subcmd,class_field,,,,Class field: [instance] _DelegatingParser.subcmd = subcmd,scverse,scanpy,1.10.1,,,,,,,_DelegatingParser,__init__,"(self, cd: _CommandDelegator, subcmd: str)",self.subcmd = subcmd,self.subcmd = subcmd,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,"_DelegatingSubparsersAction.__init__(self, *args, _command: str, _runargs: dict[str, Any], **kwargs)",class_method,,,,"Class method: _DelegatingSubparsersAction.__init__(self, *args, _command: str, _runargs: dict[str, Any], **kwargs)",scverse,scanpy,1.10.1,,,,,,,_DelegatingSubparsersAction,__init__,"(self, *args, _command: str, _runargs: dict[str, Any], **kwargs)",,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,"_CommandDelegator.__init__(self, command: str, action: _DelegatingSubparsersAction, **runargs)",class_method,,,,"Class method: _CommandDelegator.__init__(self, command: str, action: _DelegatingSubparsersAction, **runargs)",scverse,scanpy,1.10.1,,,,,,,_CommandDelegator,__init__,"(self, command: str, action: _DelegatingSubparsersAction, **runargs)",,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,"_CommandDelegator.__contains__(self, k: str) -> bool",class_method,,,,"Class method: _CommandDelegator.__contains__(self, k: str) -> bool",scverse,scanpy,1.10.1,,,,,,,_CommandDelegator,__contains__,"(self, k: str)",,,bool,,,,,,
scverse_scanpy_1.10.1,cli.py,python,"_CommandDelegator.__getitem__(self, k: str) -> ArgumentParser",class_method,,,,"Class method: _CommandDelegator.__getitem__(self, k: str) -> ArgumentParser",scverse,scanpy,1.10.1,,,,,,,_CommandDelegator,__getitem__,"(self, k: str)",,,ArgumentParser,,,,,,
scverse_scanpy_1.10.1,cli.py,python,"_CommandDelegator.__setitem__(self, k: str, v: ArgumentParser) -> None",class_method,,,,"Class method: _CommandDelegator.__setitem__(self, k: str, v: ArgumentParser) -> None",scverse,scanpy,1.10.1,,,,,,,_CommandDelegator,__setitem__,"(self, k: str, v: ArgumentParser)",,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,"_CommandDelegator.__delitem__(self, k: str) -> None",class_method,,,,"Class method: _CommandDelegator.__delitem__(self, k: str) -> None",scverse,scanpy,1.10.1,,,,,,,_CommandDelegator,__delitem__,"(self, k: str)",,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,"_CommandDelegator.__iter__(self) -> Generator[str, None, None]",class_method,,,,"Class method: _CommandDelegator.__iter__(self) -> Generator[str, None, None]",scverse,scanpy,1.10.1,,,,,,,_CommandDelegator,__iter__,(self),,,"Generator[str, None, None]",,,,,,
scverse_scanpy_1.10.1,cli.py,python,_CommandDelegator.__len__(self) -> int,class_method,,,,Class method: _CommandDelegator.__len__(self) -> int,scverse,scanpy,1.10.1,,,,,,,_CommandDelegator,__len__,(self),,,int,,,,,,
scverse_scanpy_1.10.1,cli.py,python,_CommandDelegator.__hash__(self) -> int,class_method,,,,Class method: _CommandDelegator.__hash__(self) -> int,scverse,scanpy,1.10.1,,,,,,,_CommandDelegator,__hash__,(self),,,int,,,,,,
scverse_scanpy_1.10.1,cli.py,python,"_CommandDelegator.__eq__(self, other: Mapping[str, ArgumentParser])",class_method,,,,"Class method: _CommandDelegator.__eq__(self, other: Mapping[str, ArgumentParser])",scverse,scanpy,1.10.1,,,,,,,_CommandDelegator,__eq__,"(self, other: Mapping[str, ArgumentParser])",,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,[property] _CommandDelegator.commands(self) -> frozenset[str],class_method,,,,Class method: [property] _CommandDelegator.commands(self) -> frozenset[str],scverse,scanpy,1.10.1,,,,,,,_CommandDelegator,commands,(self),,,frozenset[str],,,,,,property
scverse_scanpy_1.10.1,cli.py,python,[lru_cache] _CommandDelegator.commands(self) -> frozenset[str],class_method,,,,Class method: [lru_cache] _CommandDelegator.commands(self) -> frozenset[str],scverse,scanpy,1.10.1,,,,,,,_CommandDelegator,commands,(self),,,frozenset[str],,,,,,lru_cache
scverse_scanpy_1.10.1,cli.py,python,"_DelegatingParser.__init__(self, cd: _CommandDelegator, subcmd: str)",class_method,,,,"Class method: _DelegatingParser.__init__(self, cd: _CommandDelegator, subcmd: str)",scverse,scanpy,1.10.1,,,,,,,_DelegatingParser,__init__,"(self, cd: _CommandDelegator, subcmd: str)",,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,"_DelegatingParser.parse_known_args(
        self,
        args: Sequence[str] | None = None,
        namespace: Namespace | None = None,
    ) -> tuple[Namespace, list[str]]",class_method,,,,"Class method: _DelegatingParser.parse_known_args(
        self,
        args: Sequence[str] | None = None,
        namespace: Namespace | None = None,
    ) -> tuple[Namespace, list[str]]",scverse,scanpy,1.10.1,,,,,,,_DelegatingParser,parse_known_args,"(
        self,
        args: Sequence[str] | None = None,
        namespace: Namespace | None = None,
    )",,,"tuple[Namespace, list[str]]",,,,,,
scverse_scanpy_1.10.1,cli.py,python,_DelegatingSubparsersAction(_SubParsersAction),class,,,,Class: _DelegatingSubparsersAction(_SubParsersAction),scverse,scanpy,1.10.1,,,,,,,_DelegatingSubparsersAction,,,,,,,,,(_SubParsersAction),,
scverse_scanpy_1.10.1,cli.py,python,_CommandDelegator(cabc.MutableMapping),class,,,,Class: _CommandDelegator(cabc.MutableMapping),scverse,scanpy,1.10.1,,,,,,,_CommandDelegator,,,,,,,,,(cabc.MutableMapping),,
scverse_scanpy_1.10.1,cli.py,python,_DelegatingParser(ArgumentParser),class,,,,Class: _DelegatingParser(ArgumentParser),scverse,scanpy,1.10.1,,,,,,,_DelegatingParser,,,,,,,,,(ArgumentParser),,
scverse_scanpy_1.10.1,cli.py,python,_cmd_settings() -> None,function,,,,Function: _cmd_settings() -> None,scverse,scanpy,1.10.1,,,,_cmd_settings,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,"main(
    argv: Sequence[str] | None = None, *, check: bool = True, **runargs
) -> CompletedProcess | None",function,,,,"Function: main(
    argv: Sequence[str] | None = None, *, check: bool = True, **runargs
) -> CompletedProcess | None",scverse,scanpy,1.10.1,,,,main,"(
    argv: Sequence[str] | None = None, *, check: bool = True, **runargs
)",,,,,,,,CompletedProcess | None,,,,,
scverse_scanpy_1.10.1,cli.py,python,console_main(),function,,,,Function: console_main(),scverse,scanpy,1.10.1,,,,console_main,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,collections.abc,import,,,,Import: collections.abc,scverse,scanpy,1.10.1,import collections.abc as cabc,,collections.abc,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,os,import,,,,Import: os,scverse,scanpy,1.10.1,import os,,os,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,,sys,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,ArgumentParser from argparse,import,,,,Import: ArgumentParser from argparse,scverse,scanpy,1.10.1,"from argparse import ArgumentParser, Namespace, _SubParsersAction",argparse,ArgumentParser,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,Namespace from argparse,import,,,,Import: Namespace from argparse,scverse,scanpy,1.10.1,"from argparse import ArgumentParser, Namespace, _SubParsersAction",argparse,Namespace,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,_SubParsersAction from argparse,import,,,,Import: _SubParsersAction from argparse,scverse,scanpy,1.10.1,"from argparse import ArgumentParser, Namespace, _SubParsersAction",argparse,_SubParsersAction,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,lru_cache from functools,import,,,,Import: lru_cache from functools,scverse,scanpy,1.10.1,"from functools import lru_cache, partial",functools,lru_cache,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,"from functools import lru_cache, partial",functools,partial,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,which from shutil,import,,,,Import: which from shutil,scverse,scanpy,1.10.1,from shutil import which,shutil,which,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,CompletedProcess from subprocess,import,,,,Import: CompletedProcess from subprocess,scverse,scanpy,1.10.1,"from subprocess import CompletedProcess, run",subprocess,CompletedProcess,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,run from subprocess,import,,,,Import: run from subprocess,scverse,scanpy,1.10.1,"from subprocess import CompletedProcess, run",subprocess,run,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,cli.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",typing,Any,,,,,,,,,,,,,,,
,cli.py,python,,,,,,File: scanpy,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,cli.py,python,,,,,,Directory: scanpy\cli.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,[instance] _RootLogger.propagate = False,class_field,,,,Class field: [instance] _RootLogger.propagate = False,scverse,scanpy,1.10.1,,,,,,,_RootLogger,__init__,"(self, level)",self.propagate = False,self.propagate = False,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"_RootLogger.__init__(self, level)",class_method,,,,"Class method: _RootLogger.__init__(self, level)",scverse,scanpy,1.10.1,,,,,,,_RootLogger,__init__,"(self, level)",,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"_RootLogger.log(
        self,
        level: int,
        msg: str,
        *,
        extra: dict | None = None,
        time: datetime | None = None,
        deep: str | None = None,
    ) -> datetime",class_method,,,,"Class method: _RootLogger.log(
        self,
        level: int,
        msg: str,
        *,
        extra: dict | None = None,
        time: datetime | None = None,
        deep: str | None = None,
    ) -> datetime",scverse,scanpy,1.10.1,,,,,,,_RootLogger,log,"(
        self,
        level: int,
        msg: str,
        *,
        extra: dict | None = None,
        time: datetime | None = None,
        deep: str | None = None,
    )",,,datetime,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"_RootLogger.critical(self, msg, *, time=None, deep=None, extra=None) -> datetime",class_method,,,,"Class method: _RootLogger.critical(self, msg, *, time=None, deep=None, extra=None) -> datetime",scverse,scanpy,1.10.1,,,,,,,_RootLogger,critical,"(self, msg, *, time=None, deep=None, extra=None)",,,datetime,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"_RootLogger.error(self, msg, *, time=None, deep=None, extra=None) -> datetime",class_method,,,,"Class method: _RootLogger.error(self, msg, *, time=None, deep=None, extra=None) -> datetime",scverse,scanpy,1.10.1,,,,,,,_RootLogger,error,"(self, msg, *, time=None, deep=None, extra=None)",,,datetime,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"_RootLogger.warning(self, msg, *, time=None, deep=None, extra=None) -> datetime",class_method,,,,"Class method: _RootLogger.warning(self, msg, *, time=None, deep=None, extra=None) -> datetime",scverse,scanpy,1.10.1,,,,,,,_RootLogger,warning,"(self, msg, *, time=None, deep=None, extra=None)",,,datetime,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"_RootLogger.info(self, msg, *, time=None, deep=None, extra=None) -> datetime",class_method,,,,"Class method: _RootLogger.info(self, msg, *, time=None, deep=None, extra=None) -> datetime",scverse,scanpy,1.10.1,,,,,,,_RootLogger,info,"(self, msg, *, time=None, deep=None, extra=None)",,,datetime,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"_RootLogger.hint(self, msg, *, time=None, deep=None, extra=None) -> datetime",class_method,,,,"Class method: _RootLogger.hint(self, msg, *, time=None, deep=None, extra=None) -> datetime",scverse,scanpy,1.10.1,,,,,,,_RootLogger,hint,"(self, msg, *, time=None, deep=None, extra=None)",,,datetime,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"_RootLogger.debug(self, msg, *, time=None, deep=None, extra=None) -> datetime",class_method,,,,"Class method: _RootLogger.debug(self, msg, *, time=None, deep=None, extra=None) -> datetime",scverse,scanpy,1.10.1,,,,,,,_RootLogger,debug,"(self, msg, *, time=None, deep=None, extra=None)",,,datetime,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"_LogFormatter.__init__(
        self, fmt=""{levelname}: {message}"", datefmt=""%Y-%m-%d %H:%M"", style=""{""
    )",class_method,,,,"Class method: _LogFormatter.__init__(
        self, fmt=""{levelname}: {message}"", datefmt=""%Y-%m-%d %H:%M"", style=""{""
    )",scverse,scanpy,1.10.1,,,,,,,_LogFormatter,__init__,"(
        self, fmt=""{levelname}: {message}"", datefmt=""%Y-%m-%d %H:%M"", style=""{""
    )",,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"_LogFormatter.format(self, record: logging.LogRecord)",class_method,,,,"Class method: _LogFormatter.format(self, record: logging.LogRecord)",scverse,scanpy,1.10.1,,,,,,,_LogFormatter,format,"(self, record: logging.LogRecord)",,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,_RootLogger(logging.RootLogger),class,,,,Class: _RootLogger(logging.RootLogger),scverse,scanpy,1.10.1,,,,,,,_RootLogger,,,,,,,,,(logging.RootLogger),,
scverse_scanpy_1.10.1,logging.py,python,_LogFormatter(logging.Formatter),class,,,,Class: _LogFormatter(logging.Formatter),scverse,scanpy,1.10.1,,,,,,,_LogFormatter,,,,,,,,,(logging.Formatter),,
scverse_scanpy_1.10.1,logging.py,python,_set_log_file(settings: ScanpyConfig),function,,,,Function: _set_log_file(settings: ScanpyConfig),scverse,scanpy,1.10.1,,,,_set_log_file,(settings: ScanpyConfig),,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"_set_log_level(settings: ScanpyConfig, level: int)",function,,,,"Function: _set_log_level(settings: ScanpyConfig, level: int)",scverse,scanpy,1.10.1,,,,_set_log_level,"(settings: ScanpyConfig, level: int)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,_versions_dependencies(dependencies),function,,,,Function: _versions_dependencies(dependencies),scverse,scanpy,1.10.1,,,,_versions_dependencies,(dependencies),,,,,,,,,"# this is not the same as the requirements!",,,,
scverse_scanpy_1.10.1,logging.py,python,"print_header(*, file=None)",function,,,,"Function: print_header(*, file=None)",scverse,scanpy,1.10.1,,,,print_header,"(*, file=None)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"print_versions(*, file: IO[str] | None = None)",function,,,,"Function: print_versions(*, file: IO[str] | None = None)",scverse,scanpy,1.10.1,,,,print_versions,"(*, file: IO[str] | None = None)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"print_version_and_date(*, file=None)",function,,,,"Function: print_version_and_date(*, file=None)",scverse,scanpy,1.10.1,,,,print_version_and_date,"(*, file=None)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,_copy_docs_and_signature(fn),function,,,,Function: _copy_docs_and_signature(fn),scverse,scanpy,1.10.1,,,,_copy_docs_and_signature,(fn),,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"error(
    msg: str,
    *,
    time: datetime = None,
    deep: str | None = None,
    extra: dict | None = None,
) -> datetime",function,,,,"Function: error(
    msg: str,
    *,
    time: datetime = None,
    deep: str | None = None,
    extra: dict | None = None,
) -> datetime",scverse,scanpy,1.10.1,,,,error,"(
    msg: str,
    *,
    time: datetime = None,
    deep: str | None = None,
    extra: dict | None = None,
)",,,,,,,,datetime,,,,,
scverse_scanpy_1.10.1,logging.py,python,"__all__ = [""print_versions""]",constant,"__all__ = [""print_versions""]",__all__,"[""print_versions""]","Constant: __all__ = [""print_versions""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,HINT = (INFO + DEBUG) // 2,constant,HINT = (INFO + DEBUG) // 2,HINT,(INFO + DEBUG) // 2,Constant: HINT = (INFO + DEBUG) // 2,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,print_memory_usage = anndata.logging.print_memory_usage,constant,print_memory_usage = anndata.logging.print_memory_usage,print_memory_usage,anndata.logging.print_memory_usage,Constant: print_memory_usage = anndata.logging.print_memory_usage,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,get_memory_usage = anndata.logging.get_memory_usage,constant,get_memory_usage = anndata.logging.get_memory_usage,get_memory_usage,anndata.logging.get_memory_usage,Constant: get_memory_usage = anndata.logging.get_memory_usage,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,"_DEPENDENCIES_NUMERICS = [
    ""anndata"",  # anndata actually shouldn't, but as long as it's in development
    ""umap"",
    ""numpy"",
    ""scipy"",
    ""pandas"",
    (""sklearn"", ""scikit-learn""),
    ""statsmodels"",
    ""igraph"",
    ""louvain"",
    ""leidenalg"",
    ""pynndescent"",
]",constant,"_DEPENDENCIES_NUMERICS = [
    ""anndata"",  # anndata actually shouldn't, but as long as it's in development
    ""umap"",
    ""numpy"",
    ""scipy"",
    ""pandas"",
    (""sklearn"", ""scikit-learn""),
    ""statsmodels"",
    ""igraph"",
    ""louvain"",
    ""leidenalg"",
    ""pynndescent"",
]",_DEPENDENCIES_NUMERICS,"[
    ""anndata"",  # anndata actually shouldn't, but as long as it's in development
    ""umap"",
    ""numpy"",
    ""scipy"",
    ""pandas"",
    (""sklearn"", ""scikit-learn""),
    ""statsmodels"",
    ""igraph"",
    ""louvain"",
    ""leidenalg"",
    ""pynndescent"",
]","Constant: _DEPENDENCIES_NUMERICS = [
    ""anndata"",  # anndata actually shouldn't, but as long as it's in development
    ""umap"",
    ""numpy"",
    ""scipy"",
    ""pandas"",
    (""sklearn"", ""scikit-learn""),
    ""statsmodels"",
    ""igraph"",
    ""louvain"",
    ""leidenalg"",
    ""pynndescent"",
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,logging,import,,,,Import: logging,scverse,scanpy,1.10.1,import logging,,logging,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,,sys,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,datetime from datetime,import,,,,Import: datetime from datetime,scverse,scanpy,1.10.1,"from datetime import datetime, timedelta, timezone",datetime,datetime,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,timedelta from datetime,import,,,,Import: timedelta from datetime,scverse,scanpy,1.10.1,"from datetime import datetime, timedelta, timezone",datetime,timedelta,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,timezone from datetime,import,,,,Import: timezone from datetime,scverse,scanpy,1.10.1,"from datetime import datetime, timedelta, timezone",datetime,timezone,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,"from functools import partial, update_wrapper",functools,partial,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,update_wrapper from functools,import,,,,Import: update_wrapper from functools,scverse,scanpy,1.10.1,"from functools import partial, update_wrapper",functools,update_wrapper,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,CRITICAL from logging,import,,,,Import: CRITICAL from logging,scverse,scanpy,1.10.1,"from logging import CRITICAL, DEBUG, ERROR, INFO, WARNING",logging,CRITICAL,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,DEBUG from logging,import,,,,Import: DEBUG from logging,scverse,scanpy,1.10.1,"from logging import CRITICAL, DEBUG, ERROR, INFO, WARNING",logging,DEBUG,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,ERROR from logging,import,,,,Import: ERROR from logging,scverse,scanpy,1.10.1,"from logging import CRITICAL, DEBUG, ERROR, INFO, WARNING",logging,ERROR,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,INFO from logging,import,,,,Import: INFO from logging,scverse,scanpy,1.10.1,"from logging import CRITICAL, DEBUG, ERROR, INFO, WARNING",logging,INFO,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,WARNING from logging,import,,,,Import: WARNING from logging,scverse,scanpy,1.10.1,"from logging import CRITICAL, DEBUG, ERROR, INFO, WARNING",logging,WARNING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,IO from typing,import,,,,Import: IO from typing,scverse,scanpy,1.10.1,"from typing import IO, TYPE_CHECKING",typing,IO,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import IO, TYPE_CHECKING",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,logging.py,python,anndata.logging,import,,,,Import: anndata.logging,scverse,scanpy,1.10.1,import anndata.logging,,anndata.logging,,,,,,,,,,,,,,,
,logging.py,python,,,,,,File: scanpy,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,logging.py,python,,,,,,Directory: scanpy\logging.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"_read_legacy_10x_h5(filename, *, genome=None, start=None)",function,,,,"Function: _read_legacy_10x_h5(filename, *, genome=None, start=None)",scverse,scanpy,1.10.1,,,,_read_legacy_10x_h5,"(filename, *, genome=None, start=None)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"_collect_datasets(dsets: dict, group: h5py.Group)",function,,,,"Function: _collect_datasets(dsets: dict, group: h5py.Group)",scverse,scanpy,1.10.1,,,,_collect_datasets,"(dsets: dict, group: h5py.Group)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"_read_v3_10x_h5(filename, *, start=None)",function,,,,"Function: _read_v3_10x_h5(filename, *, start=None)",scverse,scanpy,1.10.1,,,,_read_v3_10x_h5,"(filename, *, start=None)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"read_visium(
    path: Path | str,
    genome: str | None = None,
    *,
    count_file: str = ""filtered_feature_bc_matrix.h5"",
    library_id: str | None = None,
    load_images: bool | None = True,
    source_image_path: Path | str | None = None,
) -> AnnData",function,,,,"Function: read_visium(
    path: Path | str,
    genome: str | None = None,
    *,
    count_file: str = ""filtered_feature_bc_matrix.h5"",
    library_id: str | None = None,
    load_images: bool | None = True,
    source_image_path: Path | str | None = None,
) -> AnnData",scverse,scanpy,1.10.1,,,,read_visium,"(
    path: Path | str,
    genome: str | None = None,
    *,
    count_file: str = ""filtered_feature_bc_matrix.h5"",
    library_id: str | None = None,
    load_images: bool | None = True,
    source_image_path: Path | str | None = None,
)",,,,,,,,AnnData,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"_read_10x_mtx(
    path: Path,
    *,
    var_names: Literal[""gene_symbols"", ""gene_ids""] = ""gene_symbols"",
    make_unique: bool = True,
    cache: bool = False,
    cache_compression: Literal[""gzip"", ""lzf""] | None | Empty = _empty,
    prefix: str = """",
    is_legacy: bool,
) -> AnnData",function,,,,"Function: _read_10x_mtx(
    path: Path,
    *,
    var_names: Literal[""gene_symbols"", ""gene_ids""] = ""gene_symbols"",
    make_unique: bool = True,
    cache: bool = False,
    cache_compression: Literal[""gzip"", ""lzf""] | None | Empty = _empty,
    prefix: str = """",
    is_legacy: bool,
) -> AnnData",scverse,scanpy,1.10.1,,,,_read_10x_mtx,"(
    path: Path,
    *,
    var_names: Literal[""gene_symbols"", ""gene_ids""] = ""gene_symbols"",
    make_unique: bool = True,
    cache: bool = False,
    cache_compression: Literal[""gzip"", ""lzf""] | None | Empty = _empty,
    prefix: str = """",
    is_legacy: bool,
)",,,,,,,,AnnData,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"read_params(
    filename: Path | str, asheader: bool = False
) -> dict[str, int | float | bool | str | None]",function,,,,"Function: read_params(
    filename: Path | str, asheader: bool = False
) -> dict[str, int | float | bool | str | None]",scverse,scanpy,1.10.1,,,,read_params,"(
    filename: Path | str, asheader: bool = False
)",,,,,,,,"dict[str, int | float | bool | str | None]",,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"write_params(path: Path | str, *args, **maps)",function,,,,"Function: write_params(path: Path | str, *args, **maps)",scverse,scanpy,1.10.1,,,,write_params,"(path: Path | str, *args, **maps)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"_read(
    filename: Path,
    *,
    backed=None,
    sheet=None,
    ext=None,
    delimiter=None,
    first_column_names=None,
    backup_url=None,
    cache=False,
    cache_compression=None,
    suppress_cache_warning=False,
    **kwargs,
)",function,,,,"Function: _read(
    filename: Path,
    *,
    backed=None,
    sheet=None,
    ext=None,
    delimiter=None,
    first_column_names=None,
    backup_url=None,
    cache=False,
    cache_compression=None,
    suppress_cache_warning=False,
    **kwargs,
)",scverse,scanpy,1.10.1,,,,_read,"(
    filename: Path,
    *,
    backed=None,
    sheet=None,
    ext=None,
    delimiter=None,
    first_column_names=None,
    backup_url=None,
    cache=False,
    cache_compression=None,
    suppress_cache_warning=False,
    **kwargs,
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,_slugify(path: str | PurePath) -> str,function,,,,Function: _slugify(path: str | PurePath) -> str,scverse,scanpy,1.10.1,,,,_slugify,(path: str | PurePath),,,,,,,,str,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,_read_softgz(filename: str | bytes | Path | BinaryIO) -> AnnData,function,,,,Function: _read_softgz(filename: str | bytes | Path | BinaryIO) -> AnnData,scverse,scanpy,1.10.1,,,,_read_softgz,(filename: str | bytes | Path | BinaryIO),,,,,,,,AnnData,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,is_float(string: str) -> float,function,,,,Function: is_float(string: str) -> float,scverse,scanpy,1.10.1,,,,is_float,(string: str),,,,,,,,float,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,is_int(string: str) -> bool,function,,,,Function: is_int(string: str) -> bool,scverse,scanpy,1.10.1,,,,is_int,(string: str),,,,,,,,bool,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"convert_bool(string: str) -> tuple[bool, bool]",function,,,,"Function: convert_bool(string: str) -> tuple[bool, bool]",scverse,scanpy,1.10.1,,,,convert_bool,(string: str),,,,,,,,"tuple[bool, bool]",,,,,
scverse_scanpy_1.10.1,readwrite.py,python,convert_string(string: str) -> int | float | bool | str | None,function,,,,Function: convert_string(string: str) -> int | float | bool | str | None,scverse,scanpy,1.10.1,,,,convert_string,(string: str),,,,,,,,int | float | bool | str | None,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,get_used_files(),function,,,,Function: get_used_files(),scverse,scanpy,1.10.1,,,,get_used_files,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"_get_filename_from_key(key, ext=None) -> Path",function,,,,"Function: _get_filename_from_key(key, ext=None) -> Path",scverse,scanpy,1.10.1,,,,_get_filename_from_key,"(key, ext=None)",,,,,,,,Path,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"_download(url: str, path: Path)",function,,,,"Function: _download(url: str, path: Path)",scverse,scanpy,1.10.1,,,,_download,"(url: str, path: Path)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"_check_datafile_present_and_download(path, backup_url=None)",function,,,,"Function: _check_datafile_present_and_download(path, backup_url=None)",scverse,scanpy,1.10.1,,,,_check_datafile_present_and_download,"(path, backup_url=None)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"is_valid_filename(filename: Path, return_ext=False)",function,,,,"Function: is_valid_filename(filename: Path, return_ext=False)",scverse,scanpy,1.10.1,,,,is_valid_filename,"(filename: Path, return_ext=False)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"text_exts = {
    ""csv"",
    ""tsv"",
    ""tab"",
    ""data"",
    ""txt"",  # these four are all equivalent
}",constant,"text_exts = {
    ""csv"",
    ""tsv"",
    ""tab"",
    ""data"",
    ""txt"",  # these four are all equivalent
}",text_exts,"{
    ""csv"",
    ""tsv"",
    ""tab"",
    ""data"",
    ""txt"",  # these four are all equivalent
}","Constant: text_exts = {
    ""csv"",
    ""tsv"",
    ""tab"",
    ""data"",
    ""txt"",  # these four are all equivalent
}",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,"avail_exts = {
    ""anndata"",
    ""xlsx"",
    ""h5"",
    ""h5ad"",
    ""mtx"",
    ""mtx.gz"",
    ""soft.gz"",
    ""loom"",
} | text_exts",constant,"avail_exts = {
    ""anndata"",
    ""xlsx"",
    ""h5"",
    ""h5ad"",
    ""mtx"",
    ""mtx.gz"",
    ""soft.gz"",
    ""loom"",
} | text_exts",avail_exts,"{
    ""anndata"",
    ""xlsx"",
    ""h5"",
    ""h5ad"",
    ""mtx"",
    ""mtx.gz"",
    ""soft.gz"",
    ""loom"",
} | text_exts","Constant: avail_exts = {
    ""anndata"",
    ""xlsx"",
    ""h5"",
    ""h5ad"",
    ""mtx"",
    ""mtx.gz"",
    ""soft.gz"",
    ""loom"",
} | text_exts",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,json,import,,,,Import: json,scverse,scanpy,1.10.1,import json,,json,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,"from pathlib import Path, PurePath",pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,PurePath from pathlib,import,,,,Import: PurePath from pathlib,scverse,scanpy,1.10.1,"from pathlib import Path, PurePath",pathlib,PurePath,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,BinaryIO from typing,import,,,,Import: BinaryIO from typing,scverse,scanpy,1.10.1,"from typing import BinaryIO, Literal",typing,BinaryIO,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import BinaryIO, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,anndata.utils,import,,,,Import: anndata.utils,scverse,scanpy,1.10.1,import anndata.utils,,anndata.utils,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,h5py,import,,,,Import: h5py,scverse,scanpy,1.10.1,import h5py,,h5py,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
)",anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,read_csv from anndata,import,,,,Import: read_csv from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
)",anndata,read_csv,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,read_excel from anndata,import,,,,Import: read_excel from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
)",anndata,read_excel,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,read_h5ad from anndata,import,,,,Import: read_h5ad from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
)",anndata,read_h5ad,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,read_hdf from anndata,import,,,,Import: read_hdf from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
)",anndata,read_hdf,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,read_loom from anndata,import,,,,Import: read_loom from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
)",anndata,read_loom,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,read_mtx from anndata,import,,,,Import: read_mtx from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
)",anndata,read_mtx,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,read_text from anndata,import,,,,Import: read_text from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
)",anndata,read_text,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,readwrite.py,python,imread from matplotlib.image,local_import,,,,Import: imread from matplotlib.image,scverse,scanpy,1.10.1,from matplotlib.image import imread,matplotlib.image,imread,,,matplotlib.image,,,,,,,,,,,,
,readwrite.py,python,,,,,,File: scanpy,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,readwrite.py,python,,,,,,Directory: scanpy\readwrite.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,chdir.path: Path,class_field,,,,Class field: chdir.path: Path,scverse,scanpy,1.10.1,,,,,,,chdir,,,path: Path,,,,,path,,,
scverse_scanpy_1.10.1,_compat.py,python,chdir._old_cwd: list[Path] = field(default_factory=list),class_field,,,,Class field: chdir._old_cwd: list[Path] = field(default_factory=list),scverse,scanpy,1.10.1,,,,,,,chdir,,,_old_cwd: list[Path] = field(default_factory=list),,,,,_old_cwd,,field(default_factory=list),
scverse_scanpy_1.10.1,_compat.py,python,chdir.__enter__(self) -> None,class_method,,,,Class method: chdir.__enter__(self) -> None,scverse,scanpy,1.10.1,,,,,,,chdir,__enter__,(self),,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,"chdir.__exit__(self, *_excinfo) -> None",class_method,,,,"Class method: chdir.__exit__(self, *_excinfo) -> None",scverse,scanpy,1.10.1,,,,,,,chdir,__exit__,"(self, *_excinfo)",,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,DaskArray,class,,,,Class: DaskArray,scverse,scanpy,1.10.1,,,,,,,DaskArray,,,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,ZappyArray,class,,,,Class: ZappyArray,scverse,scanpy,1.10.1,,,,,,,ZappyArray,,,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,chdir(AbstractContextManager),class,,,,Class: chdir(AbstractContextManager),scverse,scanpy,1.10.1,,,,,,,chdir,,,,,,,,,(AbstractContextManager),,
scverse_scanpy_1.10.1,_compat.py,python,fullname(typ: type) -> str,function,,,,Function: fullname(typ: type) -> str,scverse,scanpy,1.10.1,,,,fullname,(typ: type),,,,,,,,str,,,,,
scverse_scanpy_1.10.1,_compat.py,python,pkg_metadata(package),function,,,,Function: pkg_metadata(package),scverse,scanpy,1.10.1,,,,pkg_metadata,(package),,,,,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,"__all__ = [
    ""cache"",
    ""DaskArray"",
    ""ZappyArray"",
    ""fullname"",
    ""pkg_metadata"",
    ""pkg_version"",
]",constant,"__all__ = [
    ""cache"",
    ""DaskArray"",
    ""ZappyArray"",
    ""fullname"",
    ""pkg_metadata"",
    ""pkg_version"",
]",__all__,"[
    ""cache"",
    ""DaskArray"",
    ""ZappyArray"",
    ""fullname"",
    ""pkg_metadata"",
    ""pkg_version"",
]","Constant: __all__ = [
    ""cache"",
    ""DaskArray"",
    ""ZappyArray"",
    ""fullname"",
    ""pkg_metadata"",
    ""pkg_version"",
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,"old_positionals = partial(legacy_api, category=FutureWarning)",constant,"old_positionals = partial(legacy_api, category=FutureWarning)",old_positionals,"partial(legacy_api, category=FutureWarning)","Constant: old_positionals = partial(legacy_api, category=FutureWarning)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,dataclass from dataclasses,import,,,,Import: dataclass from dataclasses,scverse,scanpy,1.10.1,"from dataclasses import dataclass, field",dataclasses,dataclass,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,field from dataclasses,import,,,,Import: field from dataclasses,scverse,scanpy,1.10.1,"from dataclasses import dataclass, field",dataclasses,field,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,functools,partial,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,legacy_api from legacy_api_wrap,import,,,,Import: legacy_api from legacy_api_wrap,scverse,scanpy,1.10.1,from legacy_api_wrap import legacy_api,legacy_api_wrap,legacy_api,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_compat.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,packaging,version,,,,,,,,,,,,,,,
,_compat.py,python,,,,,,File: scanpy,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_compat.py,python,,,,,,Directory: scanpy\_compat.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,Verbosity.error = 0,class_field,,,,Class field: Verbosity.error = 0,scverse,scanpy,1.10.1,,,,,,,Verbosity,,,error = 0,,,,,error,,0,
scverse_scanpy_1.10.1,_settings.py,python,Verbosity.warning = 1,class_field,,,,Class field: Verbosity.warning = 1,scverse,scanpy,1.10.1,,,,,,,Verbosity,,,warning = 1,,,,,warning,,1,
scverse_scanpy_1.10.1,_settings.py,python,Verbosity.info = 2,class_field,,,,Class field: Verbosity.info = 2,scverse,scanpy,1.10.1,,,,,,,Verbosity,,,info = 2,,,,,info,,2,
scverse_scanpy_1.10.1,_settings.py,python,Verbosity.hint = 3,class_field,,,,Class field: Verbosity.hint = 3,scverse,scanpy,1.10.1,,,,,,,Verbosity,,,hint = 3,,,,,hint,,3,
scverse_scanpy_1.10.1,_settings.py,python,Verbosity.debug = 4,class_field,,,,Class field: Verbosity.debug = 4,scverse,scanpy,1.10.1,,,,,,,Verbosity,,,debug = 4,,,,,debug,,4,
scverse_scanpy_1.10.1,_settings.py,python,ScanpyConfig.N_PCS: int,class_field,,,,Class field: ScanpyConfig.N_PCS: int,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,,,N_PCS: int,,,,,N_PCS,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig._root_logger = _RootLogger(logging.INFO),class_field,,,,Class field: [instance] ScanpyConfig._root_logger = _RootLogger(logging.INFO),scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self._root_logger = _RootLogger(logging.INFO),self._root_logger = _RootLogger(logging.INFO),,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.logfile = logfile,class_field,,,,Class field: [instance] ScanpyConfig.logfile = logfile,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.logfile = logfile,self.logfile = logfile,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.verbosity = verbosity,class_field,,,,Class field: [instance] ScanpyConfig.verbosity = verbosity,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.verbosity = verbosity,self.verbosity = verbosity,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.plot_suffix = plot_suffix,class_field,,,,Class field: [instance] ScanpyConfig.plot_suffix = plot_suffix,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.plot_suffix = plot_suffix,self.plot_suffix = plot_suffix,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.file_format_data = file_format_data,class_field,,,,Class field: [instance] ScanpyConfig.file_format_data = file_format_data,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.file_format_data = file_format_data,self.file_format_data = file_format_data,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.file_format_figs = file_format_figs,class_field,,,,Class field: [instance] ScanpyConfig.file_format_figs = file_format_figs,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.file_format_figs = file_format_figs,self.file_format_figs = file_format_figs,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.autosave = autosave,class_field,,,,Class field: [instance] ScanpyConfig.autosave = autosave,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.autosave = autosave,self.autosave = autosave,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.autoshow = autoshow,class_field,,,,Class field: [instance] ScanpyConfig.autoshow = autoshow,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.autoshow = autoshow,self.autoshow = autoshow,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.writedir = writedir,class_field,,,,Class field: [instance] ScanpyConfig.writedir = writedir,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.writedir = writedir,self.writedir = writedir,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.cachedir = cachedir,class_field,,,,Class field: [instance] ScanpyConfig.cachedir = cachedir,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.cachedir = cachedir,self.cachedir = cachedir,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.datasetdir = datasetdir,class_field,,,,Class field: [instance] ScanpyConfig.datasetdir = datasetdir,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.datasetdir = datasetdir,self.datasetdir = datasetdir,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.figdir = figdir,class_field,,,,Class field: [instance] ScanpyConfig.figdir = figdir,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.figdir = figdir,self.figdir = figdir,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.cache_compression = cache_compression,class_field,,,,Class field: [instance] ScanpyConfig.cache_compression = cache_compression,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.cache_compression = cache_compression,self.cache_compression = cache_compression,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.max_memory = max_memory,class_field,,,,Class field: [instance] ScanpyConfig.max_memory = max_memory,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.max_memory = max_memory,self.max_memory = max_memory,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.n_jobs = n_jobs,class_field,,,,Class field: [instance] ScanpyConfig.n_jobs = n_jobs,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.n_jobs = n_jobs,self.n_jobs = n_jobs,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.categories_to_ignore = categories_to_ignore,class_field,,,,Class field: [instance] ScanpyConfig.categories_to_ignore = categories_to_ignore,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.categories_to_ignore = categories_to_ignore,self.categories_to_ignore = categories_to_ignore,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig._frameon = _frameon,class_field,,,,Class field: [instance] ScanpyConfig._frameon = _frameon,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self._frameon = _frameon,self._frameon = _frameon,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig._vector_friendly = _vector_friendly,class_field,,,,Class field: [instance] ScanpyConfig._vector_friendly = _vector_friendly,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self._vector_friendly = _vector_friendly,self._vector_friendly = _vector_friendly,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig._low_resolution_warning = _low_resolution_warning,class_field,,,,Class field: [instance] ScanpyConfig._low_resolution_warning = _low_resolution_warning,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self._low_resolution_warning = _low_resolution_warning,self._low_resolution_warning = _low_resolution_warning,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig._start = time(),class_field,,,,Class field: [instance] ScanpyConfig._start = time(),scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self._start = time(),self._start = time(),,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig._previous_time = _start,class_field,,,,Class field: [instance] ScanpyConfig._previous_time = _start,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self._previous_time = self._start,self._previous_time = self._start,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig._previous_memory_usage = -1,class_field,,,,Class field: [instance] ScanpyConfig._previous_memory_usage = -1,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self._previous_memory_usage = -1,self._previous_memory_usage = -1,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[instance] ScanpyConfig.N_PCS = n_pcs,class_field,,,,Class field: [instance] ScanpyConfig.N_PCS = n_pcs,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",self.N_PCS = n_pcs,self.N_PCS = n_pcs,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,"Verbosity.__eq__(self, other: Verbosity | int | str) -> bool",class_method,,,,"Class method: Verbosity.__eq__(self, other: Verbosity | int | str) -> bool",scverse,scanpy,1.10.1,,,,,,,Verbosity,__eq__,"(self, other: Verbosity | int | str)",,,bool,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[property] Verbosity.level(self) -> int,class_method,,,,Class method: [property] Verbosity.level(self) -> int,scverse,scanpy,1.10.1,,,,,,,Verbosity,level,(self),,,int,,,,,,property
scverse_scanpy_1.10.1,_settings.py,python,"[contextmanager] Verbosity.override(
        self, verbosity: Verbosity | str | int
    ) -> Generator[Verbosity, None, None]",class_method,,,,"Class method: [contextmanager] Verbosity.override(
        self, verbosity: Verbosity | str | int
    ) -> Generator[Verbosity, None, None]",scverse,scanpy,1.10.1,,,,,,,Verbosity,override,"(
        self, verbosity: Verbosity | str | int
    )",,,"Generator[Verbosity, None, None]",,,,,,contextmanager
scverse_scanpy_1.10.1,_settings.py,python,"ScanpyConfig.__init__(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",class_method,,,,"Class method: ScanpyConfig.__init__(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__init__,"(
        self,
        *,
        verbosity: Verbosity | int | str = Verbosity.warning,
        plot_suffix: str = """",
        file_format_data: str = ""h5ad"",
        file_format_figs: str = ""pdf"",
        autosave: bool = False,
        autoshow: bool = True,
        writedir: Path | str = ""./write/"",
        cachedir: Path | str = ""./cache/"",
        datasetdir: Path | str = ""./data/"",
        figdir: Path | str = ""./figures/"",
        cache_compression: str | None = ""lzf"",
        max_memory=15,
        n_jobs=1,
        logfile: Path | str | None = None,
        categories_to_ignore: Iterable[str] = (""N/A"", ""dontknow"", ""no_gate"", ""?""),
        _frameon: bool = True,
        _vector_friendly: bool = False,
        _low_resolution_warning: bool = True,
        n_pcs=50,
    )",,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.verbosity(self) -> Verbosity,class_method,,,,Class method: [property] ScanpyConfig.verbosity(self) -> Verbosity,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,verbosity,(self),,,Verbosity,,,,,,property
scverse_scanpy_1.10.1,_settings.py,python,"[verbosity.setter] ScanpyConfig.verbosity(self, verbosity: Verbosity | int | str)",class_method,,,,"Class method: [verbosity.setter] ScanpyConfig.verbosity(self, verbosity: Verbosity | int | str)",scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,verbosity,"(self, verbosity: Verbosity | int | str)",,,,,,,,,verbosity.setter
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.plot_suffix(self) -> str,class_method,,,,Class method: [property] ScanpyConfig.plot_suffix(self) -> str,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,plot_suffix,(self),,,str,,,,,,property
scverse_scanpy_1.10.1,_settings.py,python,"[plot_suffix.setter] ScanpyConfig.plot_suffix(self, plot_suffix: str)",class_method,,,,"Class method: [plot_suffix.setter] ScanpyConfig.plot_suffix(self, plot_suffix: str)",scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,plot_suffix,"(self, plot_suffix: str)",,,,,,,,,plot_suffix.setter
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.file_format_data(self) -> str,class_method,,,,Class method: [property] ScanpyConfig.file_format_data(self) -> str,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,file_format_data,(self),,,str,,,,,,property
scverse_scanpy_1.10.1,_settings.py,python,"[file_format_data.setter] ScanpyConfig.file_format_data(self, file_format: str)",class_method,,,,"Class method: [file_format_data.setter] ScanpyConfig.file_format_data(self, file_format: str)",scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,file_format_data,"(self, file_format: str)",,,,,,,,,file_format_data.setter
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.file_format_figs(self) -> str,class_method,,,,Class method: [property] ScanpyConfig.file_format_figs(self) -> str,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,file_format_figs,(self),,,str,,,,,,property
scverse_scanpy_1.10.1,_settings.py,python,"[file_format_figs.setter] ScanpyConfig.file_format_figs(self, figure_format: str)",class_method,,,,"Class method: [file_format_figs.setter] ScanpyConfig.file_format_figs(self, figure_format: str)",scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,file_format_figs,"(self, figure_format: str)",,,,,,,,,file_format_figs.setter
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.autosave(self) -> bool,class_method,,,,Class method: [property] ScanpyConfig.autosave(self) -> bool,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,autosave,(self),,,bool,,,,,,property
scverse_scanpy_1.10.1,_settings.py,python,"[autosave.setter] ScanpyConfig.autosave(self, autosave: bool)",class_method,,,,"Class method: [autosave.setter] ScanpyConfig.autosave(self, autosave: bool)",scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,autosave,"(self, autosave: bool)",,,,,,,,,autosave.setter
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.autoshow(self) -> bool,class_method,,,,Class method: [property] ScanpyConfig.autoshow(self) -> bool,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,autoshow,(self),,,bool,,,,,,property
scverse_scanpy_1.10.1,_settings.py,python,"[autoshow.setter] ScanpyConfig.autoshow(self, autoshow: bool)",class_method,,,,"Class method: [autoshow.setter] ScanpyConfig.autoshow(self, autoshow: bool)",scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,autoshow,"(self, autoshow: bool)",,,,,,,,,autoshow.setter
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.writedir(self) -> Path,class_method,,,,Class method: [property] ScanpyConfig.writedir(self) -> Path,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,writedir,(self),,,Path,,,,,,property
scverse_scanpy_1.10.1,_settings.py,python,"[writedir.setter] ScanpyConfig.writedir(self, writedir: Path | str)",class_method,,,,"Class method: [writedir.setter] ScanpyConfig.writedir(self, writedir: Path | str)",scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,writedir,"(self, writedir: Path | str)",,,,,,,,,writedir.setter
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.cachedir(self) -> Path,class_method,,,,Class method: [property] ScanpyConfig.cachedir(self) -> Path,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,cachedir,(self),,,Path,,,,,,property
scverse_scanpy_1.10.1,_settings.py,python,"[cachedir.setter] ScanpyConfig.cachedir(self, cachedir: Path | str)",class_method,,,,"Class method: [cachedir.setter] ScanpyConfig.cachedir(self, cachedir: Path | str)",scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,cachedir,"(self, cachedir: Path | str)",,,,,,,,,cachedir.setter
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.datasetdir(self) -> Path,class_method,,,,Class method: [property] ScanpyConfig.datasetdir(self) -> Path,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,datasetdir,(self),,,Path,,,,,,property
scverse_scanpy_1.10.1,_settings.py,python,"[datasetdir.setter] ScanpyConfig.datasetdir(self, datasetdir: Path | str)",class_method,,,,"Class method: [datasetdir.setter] ScanpyConfig.datasetdir(self, datasetdir: Path | str)",scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,datasetdir,"(self, datasetdir: Path | str)",,,,,,,,,datasetdir.setter
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.figdir(self) -> Path,class_method,,,,Class method: [property] ScanpyConfig.figdir(self) -> Path,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,figdir,(self),,,Path,,,,,,property
scverse_scanpy_1.10.1,_settings.py,python,"[figdir.setter] ScanpyConfig.figdir(self, figdir: Path | str)",class_method,,,,"Class method: [figdir.setter] ScanpyConfig.figdir(self, figdir: Path | str)",scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,figdir,"(self, figdir: Path | str)",,,,,,,,,figdir.setter
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.cache_compression(self) -> str | None,class_method,,,,Class method: [property] ScanpyConfig.cache_compression(self) -> str | None,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,cache_compression,(self),,,str | None,,,,,,property
scverse_scanpy_1.10.1,_settings.py,python,"[cache_compression.setter] ScanpyConfig.cache_compression(self, cache_compression: str | None)",class_method,,,,"Class method: [cache_compression.setter] ScanpyConfig.cache_compression(self, cache_compression: str | None)",scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,cache_compression,"(self, cache_compression: str | None)",,,,,,,,,cache_compression.setter
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.max_memory(self) -> int | float,class_method,,,,Class method: [property] ScanpyConfig.max_memory(self) -> int | float,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,max_memory,(self),,,int | float,,,,,,property
scverse_scanpy_1.10.1,_settings.py,python,"[max_memory.setter] ScanpyConfig.max_memory(self, max_memory: int | float)",class_method,,,,"Class method: [max_memory.setter] ScanpyConfig.max_memory(self, max_memory: int | float)",scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,max_memory,"(self, max_memory: int | float)",,,,,,,,,max_memory.setter
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.n_jobs(self) -> int,class_method,,,,Class method: [property] ScanpyConfig.n_jobs(self) -> int,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,n_jobs,(self),,,int,,,,,,property
scverse_scanpy_1.10.1,_settings.py,python,"[n_jobs.setter] ScanpyConfig.n_jobs(self, n_jobs: int)",class_method,,,,"Class method: [n_jobs.setter] ScanpyConfig.n_jobs(self, n_jobs: int)",scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,n_jobs,"(self, n_jobs: int)",,,,,,,,,n_jobs.setter
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.logpath(self) -> Path | None,class_method,,,,Class method: [property] ScanpyConfig.logpath(self) -> Path | None,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,logpath,(self),,,Path | None,,,,,,property
scverse_scanpy_1.10.1,_settings.py,python,"[logpath.setter] ScanpyConfig.logpath(self, logpath: Path | str | None)",class_method,,,,"Class method: [logpath.setter] ScanpyConfig.logpath(self, logpath: Path | str | None)",scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,logpath,"(self, logpath: Path | str | None)",,,,,,,,,logpath.setter
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.logfile(self) -> TextIO,class_method,,,,Class method: [property] ScanpyConfig.logfile(self) -> TextIO,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,logfile,(self),,,TextIO,,,,,,property
scverse_scanpy_1.10.1,_settings.py,python,"[logfile.setter] ScanpyConfig.logfile(self, logfile: Path | str | TextIO | None)",class_method,,,,"Class method: [logfile.setter] ScanpyConfig.logfile(self, logfile: Path | str | TextIO | None)",scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,logfile,"(self, logfile: Path | str | TextIO | None)",,,,,,,,,logfile.setter
scverse_scanpy_1.10.1,_settings.py,python,[property] ScanpyConfig.categories_to_ignore(self) -> list[str],class_method,,,,Class method: [property] ScanpyConfig.categories_to_ignore(self) -> list[str],scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,categories_to_ignore,(self),,,list[str],,,,,,property
scverse_scanpy_1.10.1,_settings.py,python,"[categories_to_ignore.setter] ScanpyConfig.categories_to_ignore(self, categories_to_ignore: Iterable[str])",class_method,,,,"Class method: [categories_to_ignore.setter] ScanpyConfig.categories_to_ignore(self, categories_to_ignore: Iterable[str])",scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,categories_to_ignore,"(self, categories_to_ignore: Iterable[str])",,,,,,,,,categories_to_ignore.setter
scverse_scanpy_1.10.1,_settings.py,python,"[old_positionals(
        ""scanpy"",
        ""dpi"",
        ""dpi_save"",
        ""frameon"",
        ""vector_friendly"",
        ""fontsize"",
        ""figsize"",
        ""color_map"",
        ""format"",
        ""facecolor"",
        ""transparent"",
        ""ipython_format"",
    )] ScanpyConfig.set_figure_params(
        self,
        *,
        scanpy: bool = True,
        dpi: int = 80,
        dpi_save: int = 150,
        frameon: bool = True,
        vector_friendly: bool = True,
        fontsize: int = 14,
        figsize: int | None = None,
        color_map: str | None = None,
        format: _Format = ""pdf"",
        facecolor: str | None = None,
        transparent: bool = False,
        ipython_format: str = ""png2x"",
    ) -> None",class_method,,,,"Class method: [old_positionals(
        ""scanpy"",
        ""dpi"",
        ""dpi_save"",
        ""frameon"",
        ""vector_friendly"",
        ""fontsize"",
        ""figsize"",
        ""color_map"",
        ""format"",
        ""facecolor"",
        ""transparent"",
        ""ipython_format"",
    )] ScanpyConfig.set_figure_params(
        self,
        *,
        scanpy: bool = True,
        dpi: int = 80,
        dpi_save: int = 150,
        frameon: bool = True,
        vector_friendly: bool = True,
        fontsize: int = 14,
        figsize: int | None = None,
        color_map: str | None = None,
        format: _Format = ""pdf"",
        facecolor: str | None = None,
        transparent: bool = False,
        ipython_format: str = ""png2x"",
    ) -> None",scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,set_figure_params,"(
        self,
        *,
        scanpy: bool = True,
        dpi: int = 80,
        dpi_save: int = 150,
        frameon: bool = True,
        vector_friendly: bool = True,
        fontsize: int = 14,
        figsize: int | None = None,
        color_map: str | None = None,
        format: _Format = ""pdf"",
        facecolor: str | None = None,
        transparent: bool = False,
        ipython_format: str = ""png2x"",
    )",,,,,,,,,"old_positionals(
        ""scanpy"",
        ""dpi"",
        ""dpi_save"",
        ""frameon"",
        ""vector_friendly"",
        ""fontsize"",
        ""figsize"",
        ""color_map"",
        ""format"",
        ""facecolor"",
        ""transparent"",
        ""ipython_format"",
    )"
scverse_scanpy_1.10.1,_settings.py,python,[staticmethod] ScanpyConfig._is_run_from_ipython(),class_method,,,,Class method: [staticmethod] ScanpyConfig._is_run_from_ipython(),scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,_is_run_from_ipython,(),,,,,,,,,staticmethod
scverse_scanpy_1.10.1,_settings.py,python,ScanpyConfig.__str__(self) -> str,class_method,,,,Class method: ScanpyConfig.__str__(self) -> str,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,__str__,(self),,,str,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,Verbosity(IntEnum),class,,,,Class: Verbosity(IntEnum),scverse,scanpy,1.10.1,,,,,,,Verbosity,,,,,,,,,(IntEnum),,
scverse_scanpy_1.10.1,_settings.py,python,ScanpyConfig,class,,,,Class: ScanpyConfig,scverse,scanpy,1.10.1,,,,,,,ScanpyConfig,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,"_type_check(var: Any, varname: str, types: type | tuple[type, ...])",function,,,,"Function: _type_check(var: Any, varname: str, types: type | tuple[type, ...])",scverse,scanpy,1.10.1,,,,_type_check,"(var: Any, varname: str, types: type | tuple[type, ...])",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,"_VERBOSITY_TO_LOGLEVEL = {
    ""error"": ""ERROR"",
    ""warning"": ""WARNING"",
    ""info"": ""INFO"",
    ""hint"": ""HINT"",
    ""debug"": ""DEBUG"",
}",constant,"_VERBOSITY_TO_LOGLEVEL = {
    ""error"": ""ERROR"",
    ""warning"": ""WARNING"",
    ""info"": ""INFO"",
    ""hint"": ""HINT"",
    ""debug"": ""DEBUG"",
}",_VERBOSITY_TO_LOGLEVEL,"{
    ""error"": ""ERROR"",
    ""warning"": ""WARNING"",
    ""info"": ""INFO"",
    ""hint"": ""HINT"",
    ""debug"": ""DEBUG"",
}","Constant: _VERBOSITY_TO_LOGLEVEL = {
    ""error"": ""ERROR"",
    ""warning"": ""WARNING"",
    ""info"": ""INFO"",
    ""hint"": ""HINT"",
    ""debug"": ""DEBUG"",
}",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,"_Format = Union[
    Literal[""png"", ""jpg"", ""tif"", ""tiff""],
    Literal[""pdf"", ""ps"", ""eps"", ""svg"", ""svgz"", ""pgf""],
    Literal[""raw"", ""rgba""],
]",constant,"_Format = Union[
    Literal[""png"", ""jpg"", ""tif"", ""tiff""],
    Literal[""pdf"", ""ps"", ""eps"", ""svg"", ""svgz"", ""pgf""],
    Literal[""raw"", ""rgba""],
]",_Format,"Union[
    Literal[""png"", ""jpg"", ""tif"", ""tiff""],
    Literal[""pdf"", ""ps"", ""eps"", ""svg"", ""svgz"", ""pgf""],
    Literal[""raw"", ""rgba""],
]","Constant: _Format = Union[
    Literal[""png"", ""jpg"", ""tif"", ""tiff""],
    Literal[""pdf"", ""ps"", ""eps"", ""svg"", ""svgz"", ""pgf""],
    Literal[""raw"", ""rgba""],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,settings = ScanpyConfig(),constant,settings = ScanpyConfig(),settings,ScanpyConfig(),Constant: settings = ScanpyConfig(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,inspect,import,,,,Import: inspect,scverse,scanpy,1.10.1,import inspect,,inspect,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,,sys,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,contextmanager from contextlib,import,,,,Import: contextmanager from contextlib,scverse,scanpy,1.10.1,from contextlib import contextmanager,contextlib,contextmanager,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,IntEnum from enum,import,,,,Import: IntEnum from enum,scverse,scanpy,1.10.1,from enum import IntEnum,enum,IntEnum,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,getLevelName from logging,import,,,,Import: getLevelName from logging,scverse,scanpy,1.10.1,from logging import getLevelName,logging,getLevelName,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,time from time,import,,,,Import: time from time,scverse,scanpy,1.10.1,from time import time,time,time,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, TextIO, Union",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, TextIO, Union",typing,Any,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, TextIO, Union",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,TextIO from typing,import,,,,Import: TextIO from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, TextIO, Union",typing,TextIO,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_settings.py,python,Union from typing,import,,,,Import: Union from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, TextIO, Union",typing,Union,,,,,,,,,,,,,,,
,_settings.py,python,,,,,,File: scanpy,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_settings.py,python,,,,,,Directory: scanpy\_settings.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,set_figure_params = settings.set_figure_params,constant,set_figure_params = settings.set_figure_params,set_figure_params,settings.set_figure_params,Constant: set_figure_params = settings.set_figure_params,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""__version__"",
    ""AnnData"",
    ""concat"",
    ""read_csv"",
    ""read_excel"",
    ""read_h5ad"",
    ""read_hdf"",
    ""read_loom"",
    ""read_mtx"",
    ""read_text"",
    ""read_umi_tools"",
    ""read"",
    ""read_10x_h5"",
    ""read_10x_mtx"",
    ""read_visium"",
    ""write"",
    ""datasets"",
    ""experimental"",
    ""external"",
    ""get"",
    ""logging"",
    ""metrics"",
    ""queries"",
    ""pl"",
    ""pp"",
    ""tl"",
    ""Verbosity"",
    ""settings"",
    ""Neighbors"",
    ""set_figure_params"",
]",constant,"__all__ = [
    ""__version__"",
    ""AnnData"",
    ""concat"",
    ""read_csv"",
    ""read_excel"",
    ""read_h5ad"",
    ""read_hdf"",
    ""read_loom"",
    ""read_mtx"",
    ""read_text"",
    ""read_umi_tools"",
    ""read"",
    ""read_10x_h5"",
    ""read_10x_mtx"",
    ""read_visium"",
    ""write"",
    ""datasets"",
    ""experimental"",
    ""external"",
    ""get"",
    ""logging"",
    ""metrics"",
    ""queries"",
    ""pl"",
    ""pp"",
    ""tl"",
    ""Verbosity"",
    ""settings"",
    ""Neighbors"",
    ""set_figure_params"",
]",__all__,"[
    ""__version__"",
    ""AnnData"",
    ""concat"",
    ""read_csv"",
    ""read_excel"",
    ""read_h5ad"",
    ""read_hdf"",
    ""read_loom"",
    ""read_mtx"",
    ""read_text"",
    ""read_umi_tools"",
    ""read"",
    ""read_10x_h5"",
    ""read_10x_mtx"",
    ""read_visium"",
    ""write"",
    ""datasets"",
    ""experimental"",
    ""external"",
    ""get"",
    ""logging"",
    ""metrics"",
    ""queries"",
    ""pl"",
    ""pp"",
    ""tl"",
    ""Verbosity"",
    ""settings"",
    ""Neighbors"",
    ""set_figure_params"",
]","Constant: __all__ = [
    ""__version__"",
    ""AnnData"",
    ""concat"",
    ""read_csv"",
    ""read_excel"",
    ""read_h5ad"",
    ""read_hdf"",
    ""read_loom"",
    ""read_mtx"",
    ""read_text"",
    ""read_umi_tools"",
    ""read"",
    ""read_10x_h5"",
    ""read_10x_mtx"",
    ""read_visium"",
    ""write"",
    ""datasets"",
    ""experimental"",
    ""external"",
    ""get"",
    ""logging"",
    ""metrics"",
    ""queries"",
    ""pl"",
    ""pp"",
    ""tl"",
    ""Verbosity"",
    ""settings"",
    ""Neighbors"",
    ""set_figure_params"",
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,,sys,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    concat,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
    read_umi_tools,
)",anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,concat from anndata,import,,,,Import: concat from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    concat,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
    read_umi_tools,
)",anndata,concat,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,read_csv from anndata,import,,,,Import: read_csv from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    concat,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
    read_umi_tools,
)",anndata,read_csv,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,read_excel from anndata,import,,,,Import: read_excel from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    concat,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
    read_umi_tools,
)",anndata,read_excel,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,read_h5ad from anndata,import,,,,Import: read_h5ad from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    concat,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
    read_umi_tools,
)",anndata,read_h5ad,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,read_hdf from anndata,import,,,,Import: read_hdf from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    concat,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
    read_umi_tools,
)",anndata,read_hdf,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,read_loom from anndata,import,,,,Import: read_loom from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    concat,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
    read_umi_tools,
)",anndata,read_loom,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,read_mtx from anndata,import,,,,Import: read_mtx from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    concat,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
    read_umi_tools,
)",anndata,read_mtx,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,read_text from anndata,import,,,,Import: read_text from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    concat,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
    read_umi_tools,
)",anndata,read_text,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,read_umi_tools from anndata,import,,,,Import: read_umi_tools from anndata,scverse,scanpy,1.10.1,"from anndata import (
    AnnData,
    concat,
    read_csv,
    read_excel,
    read_h5ad,
    read_hdf,
    read_loom,
    read_mtx,
    read_text,
    read_umi_tools,
)",anndata,read_umi_tools,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__main__.py,python,,,,,,File: scanpy,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__main__.py,python,,,,,,Directory: scanpy\__main__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,krumsiek11() -> ad.AnnData,function,,,,Function: krumsiek11() -> ad.AnnData,scverse,scanpy,1.10.1,,,,krumsiek11,(),,,,,,,,ad.AnnData,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,toggleswitch() -> ad.AnnData,function,,,,Function: toggleswitch() -> ad.AnnData,scverse,scanpy,1.10.1,,,,toggleswitch,(),,,,,,,,ad.AnnData,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,"_download_visium_dataset(
    sample_id: str,
    spaceranger_version: str,
    base_dir: Path | None = None,
    download_image: bool = False,
)",function,,,,"Function: _download_visium_dataset(
    sample_id: str,
    spaceranger_version: str,
    base_dir: Path | None = None,
    download_image: bool = False,
)",scverse,scanpy,1.10.1,,,,_download_visium_dataset,"(
    sample_id: str,
    spaceranger_version: str,
    base_dir: Path | None = None,
    download_image: bool = False,
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,HERE = Path(__file__).parent,constant,HERE = Path(__file__).parent,HERE,Path(__file__).parent,Constant: HERE = Path(__file__).parent,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,anndata,import,,,,Import: anndata,scverse,scanpy,1.10.1,import anndata as ad,,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_datasets.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
,_datasets.py,python,,,,,,File: scanpy\datasets,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_datasets.py,python,,,,,,Directory: scanpy\datasets\_datasets.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,_filter_boring(dataframe: pd.DataFrame) -> pd.DataFrame,function,,,,Function: _filter_boring(dataframe: pd.DataFrame) -> pd.DataFrame,scverse,scanpy,1.10.1,,,,_filter_boring,(dataframe: pd.DataFrame),,,,,,,,pd.DataFrame,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,sniff_url(accession: str),function,,,,Function: sniff_url(accession: str),scverse,scanpy,1.10.1,,,,sniff_url,(accession: str),,,,,,,,,"# Note that data is downloaded from gxa/sc/experiment, not experiments",,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,read_mtx_from_stream(stream: BinaryIO) -> sparse.csr_matrix,function,,,,Function: read_mtx_from_stream(stream: BinaryIO) -> sparse.csr_matrix,scverse,scanpy,1.10.1,,,,read_mtx_from_stream,(stream: BinaryIO),,,,,,,,sparse.csr_matrix,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,read_expression_from_archive(archive: ZipFile) -> anndata.AnnData,function,,,,Function: read_expression_from_archive(archive: ZipFile) -> anndata.AnnData,scverse,scanpy,1.10.1,,,,read_expression_from_archive,(archive: ZipFile),,,,,,,,anndata.AnnData,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,"ebi_expression_atlas(
    accession: str, *, filter_boring: bool = False
) -> anndata.AnnData",function,,,,"Function: ebi_expression_atlas(
    accession: str, *, filter_boring: bool = False
) -> anndata.AnnData",scverse,scanpy,1.10.1,,,,ebi_expression_atlas,"(
    accession: str, *, filter_boring: bool = False
)",,,,,,,,anndata.AnnData,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,BinaryIO from typing,import,,,,Import: BinaryIO from typing,scverse,scanpy,1.10.1,from typing import BinaryIO,typing,BinaryIO,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,ZipFile from zipfile,import,,,,Import: ZipFile from zipfile,scverse,scanpy,1.10.1,from zipfile import ZipFile,zipfile,ZipFile,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,anndata,import,,,,Import: anndata,scverse,scanpy,1.10.1,import anndata,,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,HTTPError from urllib.error,local_import,,,,Import: HTTPError from urllib.error,scverse,scanpy,1.10.1,from urllib.error import HTTPError,urllib.error,HTTPError,,,urllib.error,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ebi_expression_atlas.py,python,urlopen from urllib.request,local_import,,,,Import: urlopen from urllib.request,scverse,scanpy,1.10.1,from urllib.request import urlopen,urllib.request,urlopen,,,urllib.request,,,,,,,,,,,,
,_ebi_expression_atlas.py,python,,,,,,File: scanpy\datasets,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_ebi_expression_atlas.py,python,,,,,,Directory: scanpy\datasets\_ebi_expression_atlas.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,check_datasetdir_exists(f),function,,,,Function: check_datasetdir_exists(f),scverse,scanpy,1.10.1,,,,check_datasetdir_exists,(f),,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,filter_oldformatwarning(f),function,,,,Function: filter_oldformatwarning(f),scverse,scanpy,1.10.1,,,,filter_oldformatwarning,(f),,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,wraps from functools,import,,,,Import: wraps from functools,scverse,scanpy,1.10.1,from functools import wraps,functools,wraps,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,anndata,import,,,,Import: anndata,scverse,scanpy,1.10.1,import anndata as ad,,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,packaging,version,,,,,,,,,,,,,,,
,_utils.py,python,,,,,,File: scanpy\datasets,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_utils.py,python,,,,,,Directory: scanpy\datasets\_utils.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""blobs"",
    ""burczynski06"",
    ""krumsiek11"",
    ""moignard15"",
    ""paul15"",
    ""pbmc3k"",
    ""pbmc3k_processed"",
    ""pbmc68k_reduced"",
    ""toggleswitch"",
    ""visium_sge"",
    ""ebi_expression_atlas"",
]",constant,"__all__ = [
    ""blobs"",
    ""burczynski06"",
    ""krumsiek11"",
    ""moignard15"",
    ""paul15"",
    ""pbmc3k"",
    ""pbmc3k_processed"",
    ""pbmc68k_reduced"",
    ""toggleswitch"",
    ""visium_sge"",
    ""ebi_expression_atlas"",
]",__all__,"[
    ""blobs"",
    ""burczynski06"",
    ""krumsiek11"",
    ""moignard15"",
    ""paul15"",
    ""pbmc3k"",
    ""pbmc3k_processed"",
    ""pbmc68k_reduced"",
    ""toggleswitch"",
    ""visium_sge"",
    ""ebi_expression_atlas"",
]","Constant: __all__ = [
    ""blobs"",
    ""burczynski06"",
    ""krumsiek11"",
    ""moignard15"",
    ""paul15"",
    ""pbmc3k"",
    ""pbmc3k_processed"",
    ""pbmc68k_reduced"",
    ""toggleswitch"",
    ""visium_sge"",
    ""ebi_expression_atlas"",
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\datasets,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\datasets\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_adata = """"""\
adata
    The annotated data matrix of shape `n_obs` × `n_vars`.
    Rows correspond to cells and columns to genes.
""""""",constant,"doc_adata = """"""\
adata
    The annotated data matrix of shape `n_obs` × `n_vars`.
    Rows correspond to cells and columns to genes.
""""""",doc_adata,"""""""\
adata
    The annotated data matrix of shape `n_obs` × `n_vars`.
    Rows correspond to cells and columns to genes.
""""""","Constant: doc_adata = """"""\
adata
    The annotated data matrix of shape `n_obs` × `n_vars`.
    Rows correspond to cells and columns to genes.
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_dist_params = """"""\
theta
    The negative binomial overdispersion parameter `theta` for Pearson residuals.
    Higher values correspond to less overdispersion \
    (`var = mean + mean^2/theta`), and `theta=np.Inf` corresponds to a Poisson model.
clip
    Determines if and how residuals are clipped:

    * If `None`, residuals are clipped to the interval \
    `[-sqrt(n_obs), sqrt(n_obs)]`, where `n_obs` is the number of cells in the dataset (default behavior).
    * If any scalar `c`, residuals are clipped to the interval `[-c, c]`. Set \
    `clip=np.Inf` for no clipping.
""""""",constant,"doc_dist_params = """"""\
theta
    The negative binomial overdispersion parameter `theta` for Pearson residuals.
    Higher values correspond to less overdispersion \
    (`var = mean + mean^2/theta`), and `theta=np.Inf` corresponds to a Poisson model.
clip
    Determines if and how residuals are clipped:

    * If `None`, residuals are clipped to the interval \
    `[-sqrt(n_obs), sqrt(n_obs)]`, where `n_obs` is the number of cells in the dataset (default behavior).
    * If any scalar `c`, residuals are clipped to the interval `[-c, c]`. Set \
    `clip=np.Inf` for no clipping.
""""""",doc_dist_params,"""""""\
theta
    The negative binomial overdispersion parameter `theta` for Pearson residuals.
    Higher values correspond to less overdispersion \
    (`var = mean + mean^2/theta`), and `theta=np.Inf` corresponds to a Poisson model.
clip
    Determines if and how residuals are clipped:

    * If `None`, residuals are clipped to the interval \
    `[-sqrt(n_obs), sqrt(n_obs)]`, where `n_obs` is the number of cells in the dataset (default behavior).
    * If any scalar `c`, residuals are clipped to the interval `[-c, c]`. Set \
    `clip=np.Inf` for no clipping.
""""""","Constant: doc_dist_params = """"""\
theta
    The negative binomial overdispersion parameter `theta` for Pearson residuals.
    Higher values correspond to less overdispersion \
    (`var = mean + mean^2/theta`), and `theta=np.Inf` corresponds to a Poisson model.
clip
    Determines if and how residuals are clipped:

    * If `None`, residuals are clipped to the interval \
    `[-sqrt(n_obs), sqrt(n_obs)]`, where `n_obs` is the number of cells in the dataset (default behavior).
    * If any scalar `c`, residuals are clipped to the interval `[-c, c]`. Set \
    `clip=np.Inf` for no clipping.
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_check_values = """"""\
check_values
    If `True`, checks if counts in selected layer are integers as expected by this
    function, and return a warning if non-integers are found. Otherwise, proceed
    without checking. Setting this to `False` can speed up code for large datasets.
""""""",constant,"doc_check_values = """"""\
check_values
    If `True`, checks if counts in selected layer are integers as expected by this
    function, and return a warning if non-integers are found. Otherwise, proceed
    without checking. Setting this to `False` can speed up code for large datasets.
""""""",doc_check_values,"""""""\
check_values
    If `True`, checks if counts in selected layer are integers as expected by this
    function, and return a warning if non-integers are found. Otherwise, proceed
    without checking. Setting this to `False` can speed up code for large datasets.
""""""","Constant: doc_check_values = """"""\
check_values
    If `True`, checks if counts in selected layer are integers as expected by this
    function, and return a warning if non-integers are found. Otherwise, proceed
    without checking. Setting this to `False` can speed up code for large datasets.
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_layer = """"""\
layer
    Layer to use as input instead of `X`. If `None`, `X` is used.
""""""",constant,"doc_layer = """"""\
layer
    Layer to use as input instead of `X`. If `None`, `X` is used.
""""""",doc_layer,"""""""\
layer
    Layer to use as input instead of `X`. If `None`, `X` is used.
""""""","Constant: doc_layer = """"""\
layer
    Layer to use as input instead of `X`. If `None`, `X` is used.
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_subset = """"""\
subset
    Inplace subset to highly-variable genes if `True` otherwise merely indicate
    highly variable genes.
""""""",constant,"doc_subset = """"""\
subset
    Inplace subset to highly-variable genes if `True` otherwise merely indicate
    highly variable genes.
""""""",doc_subset,"""""""\
subset
    Inplace subset to highly-variable genes if `True` otherwise merely indicate
    highly variable genes.
""""""","Constant: doc_subset = """"""\
subset
    Inplace subset to highly-variable genes if `True` otherwise merely indicate
    highly variable genes.
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_genes_batch_chunk = """"""\
n_top_genes
    Number of highly-variable genes to keep. Mandatory if `flavor='seurat_v3'` or
    `flavor='pearson_residuals'`.
batch_key
    If specified, highly-variable genes are selected within each batch separately
    and merged. This simple process avoids the selection of batch-specific genes
    and acts as a lightweight batch correction method. Genes are first sorted by
    how many batches they are a HVG. If `flavor='pearson_residuals'`, ties are
    broken by the median rank (across batches) based on within-batch residual
    variance.
chunksize
    If `flavor='pearson_residuals'`, this dertermines how many genes are processed at
    once while computing the residual variance. Choosing a smaller value will reduce
    the required memory.
""""""",constant,"doc_genes_batch_chunk = """"""\
n_top_genes
    Number of highly-variable genes to keep. Mandatory if `flavor='seurat_v3'` or
    `flavor='pearson_residuals'`.
batch_key
    If specified, highly-variable genes are selected within each batch separately
    and merged. This simple process avoids the selection of batch-specific genes
    and acts as a lightweight batch correction method. Genes are first sorted by
    how many batches they are a HVG. If `flavor='pearson_residuals'`, ties are
    broken by the median rank (across batches) based on within-batch residual
    variance.
chunksize
    If `flavor='pearson_residuals'`, this dertermines how many genes are processed at
    once while computing the residual variance. Choosing a smaller value will reduce
    the required memory.
""""""",doc_genes_batch_chunk,"""""""\
n_top_genes
    Number of highly-variable genes to keep. Mandatory if `flavor='seurat_v3'` or
    `flavor='pearson_residuals'`.
batch_key
    If specified, highly-variable genes are selected within each batch separately
    and merged. This simple process avoids the selection of batch-specific genes
    and acts as a lightweight batch correction method. Genes are first sorted by
    how many batches they are a HVG. If `flavor='pearson_residuals'`, ties are
    broken by the median rank (across batches) based on within-batch residual
    variance.
chunksize
    If `flavor='pearson_residuals'`, this dertermines how many genes are processed at
    once while computing the residual variance. Choosing a smaller value will reduce
    the required memory.
""""""","Constant: doc_genes_batch_chunk = """"""\
n_top_genes
    Number of highly-variable genes to keep. Mandatory if `flavor='seurat_v3'` or
    `flavor='pearson_residuals'`.
batch_key
    If specified, highly-variable genes are selected within each batch separately
    and merged. This simple process avoids the selection of batch-specific genes
    and acts as a lightweight batch correction method. Genes are first sorted by
    how many batches they are a HVG. If `flavor='pearson_residuals'`, ties are
    broken by the median rank (across batches) based on within-batch residual
    variance.
chunksize
    If `flavor='pearson_residuals'`, this dertermines how many genes are processed at
    once while computing the residual variance. Choosing a smaller value will reduce
    the required memory.
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_pca_chunk = """"""\
n_comps
    Number of principal components to compute in the PCA step.
random_state
    Random seed for setting the initial states for the optimization in the PCA step.
kwargs_pca
    Dictionary of further keyword arguments passed on to `scanpy.pp.pca()`.
""""""",constant,"doc_pca_chunk = """"""\
n_comps
    Number of principal components to compute in the PCA step.
random_state
    Random seed for setting the initial states for the optimization in the PCA step.
kwargs_pca
    Dictionary of further keyword arguments passed on to `scanpy.pp.pca()`.
""""""",doc_pca_chunk,"""""""\
n_comps
    Number of principal components to compute in the PCA step.
random_state
    Random seed for setting the initial states for the optimization in the PCA step.
kwargs_pca
    Dictionary of further keyword arguments passed on to `scanpy.pp.pca()`.
""""""","Constant: doc_pca_chunk = """"""\
n_comps
    Number of principal components to compute in the PCA step.
random_state
    Random seed for setting the initial states for the optimization in the PCA step.
kwargs_pca
    Dictionary of further keyword arguments passed on to `scanpy.pp.pca()`.
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_inplace = """"""\
inplace
    If `True`, update `adata` with results. Otherwise, return results. See below for
    details of what is returned.
""""""",constant,"doc_inplace = """"""\
inplace
    If `True`, update `adata` with results. Otherwise, return results. See below for
    details of what is returned.
""""""",doc_inplace,"""""""\
inplace
    If `True`, update `adata` with results. Otherwise, return results. See below for
    details of what is returned.
""""""","Constant: doc_inplace = """"""\
inplace
    If `True`, update `adata` with results. Otherwise, return results. See below for
    details of what is returned.
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_copy = """"""\
copy
    If `True`, the function runs on a copy of the input object and returns the
    modified copy. Otherwise, the input object is modified direcly. Not compatible
    with `inplace=False`.
""""""",constant,"doc_copy = """"""\
copy
    If `True`, the function runs on a copy of the input object and returns the
    modified copy. Otherwise, the input object is modified direcly. Not compatible
    with `inplace=False`.
""""""",doc_copy,"""""""\
copy
    If `True`, the function runs on a copy of the input object and returns the
    modified copy. Otherwise, the input object is modified direcly. Not compatible
    with `inplace=False`.
""""""","Constant: doc_copy = """"""\
copy
    If `True`, the function runs on a copy of the input object and returns the
    modified copy. Otherwise, the input object is modified direcly. Not compatible
    with `inplace=False`.
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_docs.py,python,,,,,,File: scanpy\experimental,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_docs.py,python,,,,,,Directory: scanpy\experimental\_docs.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [""pp""]",constant,"__all__ = [""pp""]",__all__,"[""pp""]","Constant: __all__ = [""pp""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\experimental,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\experimental\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_highly_variable_pearson_residuals(
    adata: AnnData,
    *,
    theta: float = 100,
    clip: float | None = None,
    n_top_genes: int = 1000,
    batch_key: str | None = None,
    chunksize: int = 1000,
    check_values: bool = True,
    layer: str | None = None,
    subset: bool = False,
    inplace: bool = True,
) -> pd.DataFrame | None",function,,,,"Function: _highly_variable_pearson_residuals(
    adata: AnnData,
    *,
    theta: float = 100,
    clip: float | None = None,
    n_top_genes: int = 1000,
    batch_key: str | None = None,
    chunksize: int = 1000,
    check_values: bool = True,
    layer: str | None = None,
    subset: bool = False,
    inplace: bool = True,
) -> pd.DataFrame | None",scverse,scanpy,1.10.1,,,,_highly_variable_pearson_residuals,"(
    adata: AnnData,
    *,
    theta: float = 100,
    clip: float | None = None,
    n_top_genes: int = 1000,
    batch_key: str | None = None,
    chunksize: int = 1000,
    check_values: bool = True,
    layer: str | None = None,
    subset: bool = False,
    inplace: bool = True,
)",,,,,,,,pd.DataFrame | None,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,functools,partial,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,sqrt from math,import,,,,Import: sqrt from math,scverse,scanpy,1.10.1,from math import sqrt,math,sqrt,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,numba,import,,,,Import: numba,scverse,scanpy,1.10.1,import numba as nb,,numba,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,scipy.sparse,import,,,,Import: scipy.sparse,scverse,scanpy,1.10.1,import scipy.sparse as sp_sparse,,scipy.sparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,logging from scanpy,import,,,,Import: logging from scanpy,scverse,scanpy,1.10.1,from scanpy import logging as logg,scanpy,logging,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,Verbosity from scanpy._settings,local_import,,,,Import: Verbosity from scanpy._settings,scverse,scanpy,1.10.1,"from scanpy._settings import Verbosity, settings",scanpy._settings,Verbosity,,,scanpy._settings,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,settings from scanpy._settings,local_import,,,,Import: settings from scanpy._settings,scverse,scanpy,1.10.1,"from scanpy._settings import Verbosity, settings",scanpy._settings,settings,,,scanpy._settings,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,_doc_params from scanpy._utils,local_import,,,,Import: _doc_params from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import _doc_params, check_nonnegative_integers, view_to_actual",scanpy._utils,_doc_params,,,scanpy._utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,check_nonnegative_integers from scanpy._utils,local_import,,,,Import: check_nonnegative_integers from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import _doc_params, check_nonnegative_integers, view_to_actual",scanpy._utils,check_nonnegative_integers,,,scanpy._utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,view_to_actual from scanpy._utils,local_import,,,,Import: view_to_actual from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import _doc_params, check_nonnegative_integers, view_to_actual",scanpy._utils,view_to_actual,,,scanpy._utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,doc_adata from scanpy.experimental._docs,local_import,,,,Import: doc_adata from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_layer,
)",scanpy.experimental._docs,doc_adata,,,scanpy.experimental._docs,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,doc_check_values from scanpy.experimental._docs,local_import,,,,Import: doc_check_values from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_layer,
)",scanpy.experimental._docs,doc_check_values,,,scanpy.experimental._docs,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,doc_dist_params from scanpy.experimental._docs,local_import,,,,Import: doc_dist_params from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_layer,
)",scanpy.experimental._docs,doc_dist_params,,,scanpy.experimental._docs,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,doc_genes_batch_chunk from scanpy.experimental._docs,local_import,,,,Import: doc_genes_batch_chunk from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_layer,
)",scanpy.experimental._docs,doc_genes_batch_chunk,,,scanpy.experimental._docs,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,doc_inplace from scanpy.experimental._docs,local_import,,,,Import: doc_inplace from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_layer,
)",scanpy.experimental._docs,doc_inplace,,,scanpy.experimental._docs,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,doc_layer from scanpy.experimental._docs,local_import,,,,Import: doc_layer from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_layer,
)",scanpy.experimental._docs,doc_layer,,,scanpy.experimental._docs,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,_get_obs_rep from scanpy.get,local_import,,,,Import: _get_obs_rep from scanpy.get,scverse,scanpy,1.10.1,from scanpy.get import _get_obs_rep,scanpy.get,_get_obs_rep,,,scanpy.get,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,materialize_as_ndarray from scanpy.preprocessing._distributed,local_import,,,,Import: materialize_as_ndarray from scanpy.preprocessing._distributed,scverse,scanpy,1.10.1,from scanpy.preprocessing._distributed import materialize_as_ndarray,scanpy.preprocessing._distributed,materialize_as_ndarray,,,scanpy.preprocessing._distributed,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,_get_mean_var from scanpy.preprocessing._utils,local_import,,,,Import: _get_mean_var from scanpy.preprocessing._utils,scverse,scanpy,1.10.1,from scanpy.preprocessing._utils import _get_mean_var,scanpy.preprocessing._utils,_get_mean_var,,,scanpy.preprocessing._utils,,,,,,,,,,,,
,_highly_variable_genes.py,python,,,,,,File: scanpy\experimental\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_highly_variable_genes.py,python,,,,,,Directory: scanpy\experimental\pp\_highly_variable_genes.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,"_pearson_residuals(X, theta, clip, check_values, copy: bool = False)",function,,,,"Function: _pearson_residuals(X, theta, clip, check_values, copy: bool = False)",scverse,scanpy,1.10.1,,,,_pearson_residuals,"(X, theta, clip, check_values, copy: bool = False)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,MappingProxyType from types,import,,,,Import: MappingProxyType from types,scverse,scanpy,1.10.1,from types import MappingProxyType,types,MappingProxyType,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",typing,Any,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,warn from warnings,import,,,,Import: warn from warnings,scverse,scanpy,1.10.1,from warnings import warn,warnings,warn,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import issparse,scipy.sparse,issparse,,,scipy.sparse,,,,,,,,,,,,
,_normalization.py,python,,,,,,File: scanpy\experimental\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_normalization.py,python,,,,,,Directory: scanpy\experimental\pp\_normalization.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,experimental from scanpy,import,,,,Import: experimental from scanpy,scverse,scanpy,1.10.1,from scanpy import experimental,scanpy,experimental,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,_doc_params from scanpy._utils,local_import,,,,Import: _doc_params from scanpy._utils,scverse,scanpy,1.10.1,from scanpy._utils import _doc_params,scanpy._utils,_doc_params,,,scanpy._utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,doc_adata from scanpy.experimental._docs,local_import,,,,Import: doc_adata from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_pca_chunk,
)",scanpy.experimental._docs,doc_adata,,,scanpy.experimental._docs,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,doc_check_values from scanpy.experimental._docs,local_import,,,,Import: doc_check_values from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_pca_chunk,
)",scanpy.experimental._docs,doc_check_values,,,scanpy.experimental._docs,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,doc_dist_params from scanpy.experimental._docs,local_import,,,,Import: doc_dist_params from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_pca_chunk,
)",scanpy.experimental._docs,doc_dist_params,,,scanpy.experimental._docs,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,doc_genes_batch_chunk from scanpy.experimental._docs,local_import,,,,Import: doc_genes_batch_chunk from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_pca_chunk,
)",scanpy.experimental._docs,doc_genes_batch_chunk,,,scanpy.experimental._docs,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,doc_inplace from scanpy.experimental._docs,local_import,,,,Import: doc_inplace from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_pca_chunk,
)",scanpy.experimental._docs,doc_inplace,,,scanpy.experimental._docs,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,doc_pca_chunk from scanpy.experimental._docs,local_import,,,,Import: doc_pca_chunk from scanpy.experimental._docs,scverse,scanpy,1.10.1,"from scanpy.experimental._docs import (
    doc_adata,
    doc_check_values,
    doc_dist_params,
    doc_genes_batch_chunk,
    doc_inplace,
    doc_pca_chunk,
)",scanpy.experimental._docs,doc_pca_chunk,,,scanpy.experimental._docs,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,pca from scanpy.preprocessing,local_import,,,,Import: pca from scanpy.preprocessing,scverse,scanpy,1.10.1,from scanpy.preprocessing import pca,scanpy.preprocessing,pca,,,scanpy.preprocessing,,,,,,,,,,,,
,_recipes.py,python,,,,,,File: scanpy\experimental\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_recipes.py,python,,,,,,Directory: scanpy\experimental\pp\_recipes.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""highly_variable_genes"",
    ""normalize_pearson_residuals"",
    ""normalize_pearson_residuals_pca"",
    ""recipe_pearson_residuals"",
]",constant,"__all__ = [
    ""highly_variable_genes"",
    ""normalize_pearson_residuals"",
    ""normalize_pearson_residuals_pca"",
    ""recipe_pearson_residuals"",
]",__all__,"[
    ""highly_variable_genes"",
    ""normalize_pearson_residuals"",
    ""normalize_pearson_residuals_pca"",
    ""recipe_pearson_residuals"",
]","Constant: __all__ = [
    ""highly_variable_genes"",
    ""normalize_pearson_residuals"",
    ""normalize_pearson_residuals_pca"",
    ""recipe_pearson_residuals"",
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,highly_variable_genes from scanpy.experimental.pp._highly_variable_genes,local_import,,,,Import: highly_variable_genes from scanpy.experimental.pp._highly_variable_genes,scverse,scanpy,1.10.1,from scanpy.experimental.pp._highly_variable_genes import highly_variable_genes,scanpy.experimental.pp._highly_variable_genes,highly_variable_genes,,,scanpy.experimental.pp._highly_variable_genes,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,normalize_pearson_residuals from scanpy.experimental.pp._normalization,local_import,,,,Import: normalize_pearson_residuals from scanpy.experimental.pp._normalization,scverse,scanpy,1.10.1,"from scanpy.experimental.pp._normalization import (
    normalize_pearson_residuals,
    normalize_pearson_residuals_pca,
)",scanpy.experimental.pp._normalization,normalize_pearson_residuals,,,scanpy.experimental.pp._normalization,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,normalize_pearson_residuals_pca from scanpy.experimental.pp._normalization,local_import,,,,Import: normalize_pearson_residuals_pca from scanpy.experimental.pp._normalization,scverse,scanpy,1.10.1,"from scanpy.experimental.pp._normalization import (
    normalize_pearson_residuals,
    normalize_pearson_residuals_pca,
)",scanpy.experimental.pp._normalization,normalize_pearson_residuals_pca,,,scanpy.experimental.pp._normalization,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,recipe_pearson_residuals from scanpy.experimental.pp._recipes,local_import,,,,Import: recipe_pearson_residuals from scanpy.experimental.pp._recipes,scverse,scanpy,1.10.1,from scanpy.experimental.pp._recipes import recipe_pearson_residuals,scanpy.experimental.pp._recipes,recipe_pearson_residuals,,,scanpy.experimental.pp._recipes,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\experimental\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\experimental\pp\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"_get_edges(adata, neighbors_key=None)",function,,,,"Function: _get_edges(adata, neighbors_key=None)",scverse,scanpy,1.10.1,,,,_get_edges,"(adata, neighbors_key=None)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"write_hdf5_genes(E, gene_list, filename)",function,,,,"Function: write_hdf5_genes(E, gene_list, filename)",scverse,scanpy,1.10.1,,,,write_hdf5_genes,"(E, gene_list, filename)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"write_hdf5_cells(E, filename)",function,,,,"Function: write_hdf5_cells(E, filename)",scverse,scanpy,1.10.1,,,,write_hdf5_cells,"(E, filename)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"write_sparse_npz(E, filename, compressed=False)",function,,,,"Function: write_sparse_npz(E, filename, compressed=False)",scverse,scanpy,1.10.1,,,,write_sparse_npz,"(E, filename, compressed=False)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"_write_graph(filename, n_nodes, edges)",function,,,,"Function: _write_graph(filename, n_nodes, edges)",scverse,scanpy,1.10.1,,,,_write_graph,"(filename, n_nodes, edges)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"_write_edges(filename, edges)",function,,,,"Function: _write_edges(filename, edges)",scverse,scanpy,1.10.1,,,,_write_edges,"(filename, edges)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"_write_color_tracks(ctracks, fname)",function,,,,"Function: _write_color_tracks(ctracks, fname)",scverse,scanpy,1.10.1,,,,_write_color_tracks,"(ctracks, fname)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,_frac_to_hex(frac),function,,,,Function: _frac_to_hex(frac),scverse,scanpy,1.10.1,,,,_frac_to_hex,(frac),,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"_get_color_stats_genes(color_stats, E, gene_list)",function,,,,"Function: _get_color_stats_genes(color_stats, E, gene_list)",scverse,scanpy,1.10.1,,,,_get_color_stats_genes,"(color_stats, E, gene_list)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"_get_color_stats_custom(color_stats, custom_colors)",function,,,,"Function: _get_color_stats_custom(color_stats, custom_colors)",scverse,scanpy,1.10.1,,,,_get_color_stats_custom,"(color_stats, custom_colors)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"_write_color_stats(filename, color_stats)",function,,,,"Function: _write_color_stats(filename, color_stats)",scverse,scanpy,1.10.1,,,,_write_color_stats,"(filename, color_stats)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"_build_categ_colors(categorical_coloring_data, cell_groupings)",function,,,,"Function: _build_categ_colors(categorical_coloring_data, cell_groupings)",scverse,scanpy,1.10.1,,,,_build_categ_colors,"(categorical_coloring_data, cell_groupings)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"_write_cell_groupings(filename, categorical_coloring_data)",function,,,,"Function: _write_cell_groupings(filename, categorical_coloring_data)",scverse,scanpy,1.10.1,,,,_write_cell_groupings,"(filename, categorical_coloring_data)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,"_export_PAGA_to_SPRING(adata, paga_coords, outpath)",function,,,,"Function: _export_PAGA_to_SPRING(adata, paga_coords, outpath)",scverse,scanpy,1.10.1,,,,_export_PAGA_to_SPRING,"(adata, paga_coords, outpath)",,,,,,,,,"# retrieve node data",,,,
scverse_scanpy_1.10.1,exporting.py,python,"__all__ = [""spring_project"", ""cellbrowser""]",constant,"__all__ = [""spring_project"", ""cellbrowser""]",__all__,"[""spring_project"", ""cellbrowser""]","Constant: __all__ = [""spring_project"", ""cellbrowser""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,json,import,,,,Import: json,scverse,scanpy,1.10.1,import json,,json,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,logging,import,,,,Import: logging,scverse,scanpy,1.10.1,import logging as logg,,logging,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,h5py,import,,,,Import: h5py,scverse,scanpy,1.10.1,import h5py,,h5py,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,matplotlib.pyplot,import,,,,Import: matplotlib.pyplot,scverse,scanpy,1.10.1,import matplotlib.pyplot as plt,,matplotlib.pyplot,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,scipy.sparse,import,,,,Import: scipy.sparse,scverse,scanpy,1.10.1,import scipy.sparse,,scipy.sparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,exporting.py,python,CategoricalDtype from pandas.api.types,local_import,,,,Import: CategoricalDtype from pandas.api.types,scverse,scanpy,1.10.1,from pandas.api.types import CategoricalDtype,pandas.api.types,CategoricalDtype,,,pandas.api.types,,,,,,,,,,,,
,exporting.py,python,,,,,,File: scanpy\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,exporting.py,python,,,,,,Directory: scanpy\external\exporting.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pl.py,python,"__all__ = [
    ""phate"",
    ""trimap"",
    ""harmony_timeseries"",
    ""sam"",
    ""wishbone_marker_trajectory"",
]",constant,"__all__ = [
    ""phate"",
    ""trimap"",
    ""harmony_timeseries"",
    ""sam"",
    ""wishbone_marker_trajectory"",
]",__all__,"[
    ""phate"",
    ""trimap"",
    ""harmony_timeseries"",
    ""sam"",
    ""wishbone_marker_trajectory"",
]","Constant: __all__ = [
    ""phate"",
    ""trimap"",
    ""harmony_timeseries"",
    ""sam"",
    ""wishbone_marker_trajectory"",
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pl.py,python,"scrublet_score_distribution = deprecated(""Import from sc.pl instead"")(
    _scrublet.scrublet_score_distribution
)",constant,"scrublet_score_distribution = deprecated(""Import from sc.pl instead"")(
    _scrublet.scrublet_score_distribution
)",scrublet_score_distribution,"deprecated(""Import from sc.pl instead"")(
    _scrublet.scrublet_score_distribution
)","Constant: scrublet_score_distribution = deprecated(""Import from sc.pl instead"")(
    _scrublet.scrublet_score_distribution
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pl.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pl.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",typing,Any,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pl.py,python,matplotlib.pyplot,import,,,,Import: matplotlib.pyplot,scverse,scanpy,1.10.1,import matplotlib.pyplot as plt,,matplotlib.pyplot,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pl.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pl.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pl.py,python,Axes from matplotlib.axes,local_import,,,,Import: Axes from matplotlib.axes,scverse,scanpy,1.10.1,from matplotlib.axes import Axes,matplotlib.axes,Axes,,,matplotlib.axes,,,,,,,,,,,,
scverse_scanpy_1.10.1,pl.py,python,deprecated from sklearn.utils,local_import,,,,Import: deprecated from sklearn.utils,scverse,scanpy,1.10.1,from sklearn.utils import deprecated,sklearn.utils,deprecated,,,sklearn.utils,,,,,,,,,,,,
,pl.py,python,,,,,,File: scanpy\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,pl.py,python,,,,,,Directory: scanpy\external\pl.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [""exporting"", ""pl"", ""pp"", ""tl""]",constant,"__all__ = [""exporting"", ""pl"", ""pp"", ""tl""]",__all__,"[""exporting"", ""pl"", ""pp"", ""tl""]","Constant: __all__ = [""exporting"", ""pl"", ""pp"", ""tl""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,,sys,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\external\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_bbknn.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Callable",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_bbknn.py,python,Callable from typing,import,,,,Import: Callable from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Callable",typing,Callable,,,,,,,,,,,,,,,
,_bbknn.py,python,,,,,,File: scanpy\external\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_bbknn.py,python,,,,,,Directory: scanpy\external\pp\_bbknn.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dca.py,python,"_AEType = Literal[""zinb-conddisp"", ""zinb"", ""nb-conddisp"", ""nb""]",constant,"_AEType = Literal[""zinb-conddisp"", ""zinb"", ""nb-conddisp"", ""nb""]",_AEType,"Literal[""zinb-conddisp"", ""zinb"", ""nb-conddisp"", ""nb""]","Constant: _AEType = Literal[""zinb-conddisp"", ""zinb"", ""nb-conddisp"", ""nb""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dca.py,python,MappingProxyType from types,import,,,,Import: MappingProxyType from types,scverse,scanpy,1.10.1,from types import MappingProxyType,types,MappingProxyType,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dca.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dca.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,Any,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dca.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,Literal,,,,,,,,,,,,,,,
,_dca.py,python,,,,,,File: scanpy\external\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_dca.py,python,,,,,,Directory: scanpy\external\pp\_dca.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_harmony_integrate.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_harmony_integrate.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
,_harmony_integrate.py,python,,,,,,File: scanpy\external\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_harmony_integrate.py,python,,,,,,Directory: scanpy\external\pp\_harmony_integrate.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_hashsolo.py,python,"_calculate_log_likelihoods(
    data: np.ndarray, number_of_noise_barcodes: int
) -> tuple[NDArray[np.float64], NDArray[np.float64], dict[int, str]]",function,,,,"Function: _calculate_log_likelihoods(
    data: np.ndarray, number_of_noise_barcodes: int
) -> tuple[NDArray[np.float64], NDArray[np.float64], dict[int, str]]",scverse,scanpy,1.10.1,,,,_calculate_log_likelihoods,"(
    data: np.ndarray, number_of_noise_barcodes: int
)",,,,,,,,"tuple[NDArray[np.float64], NDArray[np.float64], dict[int, str]]",,,,,
scverse_scanpy_1.10.1,_hashsolo.py,python,"_calculate_bayes_rule(
    data: np.ndarray, priors: ArrayLike, number_of_noise_barcodes: int
) -> dict[str, np.ndarray]",function,,,,"Function: _calculate_bayes_rule(
    data: np.ndarray, priors: ArrayLike, number_of_noise_barcodes: int
) -> dict[str, np.ndarray]",scverse,scanpy,1.10.1,,,,_calculate_bayes_rule,"(
    data: np.ndarray, priors: ArrayLike, number_of_noise_barcodes: int
)",,,,,,,,"dict[str, np.ndarray]",,,,,
scverse_scanpy_1.10.1,_hashsolo.py,python,product from itertools,import,,,,Import: product from itertools,scverse,scanpy,1.10.1,from itertools import product,itertools,product,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_hashsolo.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_hashsolo.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_hashsolo.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_hashsolo.py,python,norm from scipy.stats,local_import,,,,Import: norm from scipy.stats,scverse,scanpy,1.10.1,from scipy.stats import norm,scipy.stats,norm,,,scipy.stats,,,,,,,,,,,,
,_hashsolo.py,python,,,,,,File: scanpy\external\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_hashsolo.py,python,,,,,,Directory: scanpy\external\pp\_hashsolo.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_magic.py,python,"MIN_VERSION = ""2.0""",constant,"MIN_VERSION = ""2.0""",MIN_VERSION,"""2.0""","Constant: MIN_VERSION = ""2.0""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_magic.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_magic.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_magic.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,packaging,version,,,,,,,,,,,,,,,
,_magic.py,python,,,,,,File: scanpy\external\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_magic.py,python,,,,,,Directory: scanpy\external\pp\_magic.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_mnn_correct.py,python,"mnn_correct(
    *datas: AnnData | np.ndarray,
    var_index: Collection[str] | None = None,
    var_subset: Collection[str] | None = None,
    batch_key: str = ""batch"",
    index_unique: str = ""-"",
    batch_categories: Collection[Any] | None = None,
    k: int = 20,
    sigma: float = 1.0,
    cos_norm_in: bool = True,
    cos_norm_out: bool = True,
    svd_dim: int | None = None,
    var_adj: bool = True,
    compute_angle: bool = False,
    mnn_order: Sequence[int] | None = None,
    svd_mode: Literal[""svd"", ""rsvd"", ""irlb""] = ""rsvd"",
    do_concatenate: bool = True,
    save_raw: bool = False,
    n_jobs: int | None = None,
    **kwargs,
) -> tuple[
    np.ndarray | AnnData,
    list[pd.DataFrame],
    list[tuple[float | None, int]] | None,
]",function,,,,"Function: mnn_correct(
    *datas: AnnData | np.ndarray,
    var_index: Collection[str] | None = None,
    var_subset: Collection[str] | None = None,
    batch_key: str = ""batch"",
    index_unique: str = ""-"",
    batch_categories: Collection[Any] | None = None,
    k: int = 20,
    sigma: float = 1.0,
    cos_norm_in: bool = True,
    cos_norm_out: bool = True,
    svd_dim: int | None = None,
    var_adj: bool = True,
    compute_angle: bool = False,
    mnn_order: Sequence[int] | None = None,
    svd_mode: Literal[""svd"", ""rsvd"", ""irlb""] = ""rsvd"",
    do_concatenate: bool = True,
    save_raw: bool = False,
    n_jobs: int | None = None,
    **kwargs,
) -> tuple[
    np.ndarray | AnnData,
    list[pd.DataFrame],
    list[tuple[float | None, int]] | None,
]",scverse,scanpy,1.10.1,,,,mnn_correct,"(
    *datas: AnnData | np.ndarray,
    var_index: Collection[str] | None = None,
    var_subset: Collection[str] | None = None,
    batch_key: str = ""batch"",
    index_unique: str = ""-"",
    batch_categories: Collection[Any] | None = None,
    k: int = 20,
    sigma: float = 1.0,
    cos_norm_in: bool = True,
    cos_norm_out: bool = True,
    svd_dim: int | None = None,
    var_adj: bool = True,
    compute_angle: bool = False,
    mnn_order: Sequence[int] | None = None,
    svd_mode: Literal[""svd"", ""rsvd"", ""irlb""] = ""rsvd"",
    do_concatenate: bool = True,
    save_raw: bool = False,
    n_jobs: int | None = None,
    **kwargs,
)",,,,,,,,"tuple[
    np.ndarray | AnnData,
    list[pd.DataFrame],
    list[tuple[float | None, int]] | None,
]",,,,,
scverse_scanpy_1.10.1,_mnn_correct.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_mnn_correct.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,Any,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_mnn_correct.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,Literal,,,,,,,,,,,,,,,
,_mnn_correct.py,python,,,,,,File: scanpy\external\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_mnn_correct.py,python,,,,,,Directory: scanpy\external\pp\_mnn_correct.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scanorama_integrate.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scanorama_integrate.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
,_scanorama_integrate.py,python,,,,,,File: scanpy\external\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_scanorama_integrate.py,python,,,,,,Directory: scanpy\external\pp\_scanorama_integrate.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"scrublet = deprecated(""Import from sc.pp instead"")(_scrublet.scrublet)",constant,"scrublet = deprecated(""Import from sc.pp instead"")(_scrublet.scrublet)",scrublet,"deprecated(""Import from sc.pp instead"")(_scrublet.scrublet)","Constant: scrublet = deprecated(""Import from sc.pp instead"")(_scrublet.scrublet)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"scrublet_simulate_doublets = deprecated(""Import from sc.pp instead"")(
    _scrublet.scrublet_simulate_doublets
)",constant,"scrublet_simulate_doublets = deprecated(""Import from sc.pp instead"")(
    _scrublet.scrublet_simulate_doublets
)",scrublet_simulate_doublets,"deprecated(""Import from sc.pp instead"")(
    _scrublet.scrublet_simulate_doublets
)","Constant: scrublet_simulate_doublets = deprecated(""Import from sc.pp instead"")(
    _scrublet.scrublet_simulate_doublets
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""bbknn"",
    ""dca"",
    ""harmony_integrate"",
    ""hashsolo"",
    ""magic"",
    ""mnn_correct"",
    ""scanorama_integrate"",
]",constant,"__all__ = [
    ""bbknn"",
    ""dca"",
    ""harmony_integrate"",
    ""hashsolo"",
    ""magic"",
    ""mnn_correct"",
    ""scanorama_integrate"",
]",__all__,"[
    ""bbknn"",
    ""dca"",
    ""harmony_integrate"",
    ""hashsolo"",
    ""magic"",
    ""mnn_correct"",
    ""scanorama_integrate"",
]","Constant: __all__ = [
    ""bbknn"",
    ""dca"",
    ""harmony_integrate"",
    ""hashsolo"",
    ""magic"",
    ""mnn_correct"",
    ""scanorama_integrate"",
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,deprecated from sklearn.utils,local_import,,,,Import: deprecated from sklearn.utils,scverse,scanpy,1.10.1,from sklearn.utils import deprecated,sklearn.utils,deprecated,,,sklearn.utils,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\external\pp,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\external\pp\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_harmony_timeseries.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_harmony_timeseries.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_harmony_timeseries.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
,_harmony_timeseries.py,python,,,,,,File: scanpy\external\tl,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_harmony_timeseries.py,python,,,,,,Directory: scanpy\external\tl\_harmony_timeseries.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_palantir.py,python,_check_import(),function,,,,Function: _check_import(),scverse,scanpy,1.10.1,,,,_check_import,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,_palantir.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_palantir.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
,_palantir.py,python,,,,,,File: scanpy\external\tl,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_palantir.py,python,,,,,,Directory: scanpy\external\tl\_palantir.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_phate.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_phate.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
,_phate.py,python,,,,,,File: scanpy\external\tl,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_phate.py,python,,,,,,Directory: scanpy\external\tl\_phate.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_phenograph.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_phenograph.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,Any,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_phenograph.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_phenograph.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_phenograph.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
,_phenograph.py,python,,,,,,File: scanpy\external\tl,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_phenograph.py,python,,,,,,Directory: scanpy\external\tl\_phenograph.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pypairs.py,python,"cyclone(
    adata: AnnData,
    marker_pairs: Mapping[str, Collection[tuple[str, str]]] | None = None,
    *,
    iterations: int = 1000,
    min_iter: int = 100,
    min_pairs: int = 50,
) -> pd.DataFrame",function,,,,"Function: cyclone(
    adata: AnnData,
    marker_pairs: Mapping[str, Collection[tuple[str, str]]] | None = None,
    *,
    iterations: int = 1000,
    min_iter: int = 100,
    min_pairs: int = 50,
) -> pd.DataFrame",scverse,scanpy,1.10.1,,,,cyclone,"(
    adata: AnnData,
    marker_pairs: Mapping[str, Collection[tuple[str, str]]] | None = None,
    *,
    iterations: int = 1000,
    min_iter: int = 100,
    min_pairs: int = 50,
)",,,,,,,,pd.DataFrame,,,,,
scverse_scanpy_1.10.1,_pypairs.py,python,_check_import(),function,,,,Function: _check_import(),scverse,scanpy,1.10.1,,,,_check_import,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pypairs.py,python,"Genes = Collection[Union[str, int, bool]]",constant,"Genes = Collection[Union[str, int, bool]]",Genes,"Collection[Union[str, int, bool]]","Constant: Genes = Collection[Union[str, int, bool]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pypairs.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Union",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pypairs.py,python,Union from typing,import,,,,Import: Union from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Union",typing,Union,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pypairs.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,packaging,version,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pypairs.py,python,Collection from collections.abc,local_import,,,,Import: Collection from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Collection, Mapping",collections.abc,Collection,,,collections.abc,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pypairs.py,python,Mapping from collections.abc,local_import,,,,Import: Mapping from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Collection, Mapping",collections.abc,Mapping,,,collections.abc,,,,,,,,,,,,
,_pypairs.py,python,,,,,,File: scanpy\external\tl,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_pypairs.py,python,,,,,,Directory: scanpy\external\tl\_pypairs.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sam.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sam.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
,_sam.py,python,,,,,,File: scanpy\external\tl,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_sam.py,python,,,,,,Directory: scanpy\external\tl\_sam.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_trimap.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_trimap.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_trimap.py,python,scipy.sparse,import,,,,Import: scipy.sparse,scverse,scanpy,1.10.1,import scipy.sparse as scp,,scipy.sparse,,,,,,,,,,,,,,,
,_trimap.py,python,,,,,,File: scanpy\external\tl,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_trimap.py,python,,,,,,Directory: scanpy\external\tl\_trimap.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_wishbone.py,python,_anndata_to_wishbone(adata: AnnData),function,,,,Function: _anndata_to_wishbone(adata: AnnData),scverse,scanpy,1.10.1,,,,_anndata_to_wishbone,(adata: AnnData),,,,,,,,,,,,,
scverse_scanpy_1.10.1,_wishbone.py,python,collections.abc,import,,,,Import: collections.abc,scverse,scanpy,1.10.1,import collections.abc as cabc,,collections.abc,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_wishbone.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_wishbone.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_wishbone.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
,_wishbone.py,python,,,,,,File: scanpy\external\tl,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_wishbone.py,python,,,,,,Directory: scanpy\external\tl\_wishbone.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""harmony_timeseries"",
    ""palantir"",
    ""palantir_results"",
    ""phate"",
    ""phenograph"",
    ""cyclone"",
    ""sandbag"",
    ""sam"",
    ""trimap"",
    ""wishbone"",
]",constant,"__all__ = [
    ""harmony_timeseries"",
    ""palantir"",
    ""palantir_results"",
    ""phate"",
    ""phenograph"",
    ""cyclone"",
    ""sandbag"",
    ""sam"",
    ""trimap"",
    ""wishbone"",
]",__all__,"[
    ""harmony_timeseries"",
    ""palantir"",
    ""palantir_results"",
    ""phate"",
    ""phenograph"",
    ""cyclone"",
    ""sandbag"",
    ""sam"",
    ""trimap"",
    ""wishbone"",
]","Constant: __all__ = [
    ""harmony_timeseries"",
    ""palantir"",
    ""palantir_results"",
    ""phate"",
    ""phenograph"",
    ""cyclone"",
    ""sandbag"",
    ""sam"",
    ""trimap"",
    ""wishbone"",
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\external\tl,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\external\tl\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,"rank_genes_groups_df(
    adata: AnnData,
    group: str | Iterable[str] | None,
    *,
    key: str = ""rank_genes_groups"",
    pval_cutoff: float | None = None,
    log2fc_min: float | None = None,
    log2fc_max: float | None = None,
    gene_symbols: str | None = None,
) -> pd.DataFrame",function,,,,"Function: rank_genes_groups_df(
    adata: AnnData,
    group: str | Iterable[str] | None,
    *,
    key: str = ""rank_genes_groups"",
    pval_cutoff: float | None = None,
    log2fc_min: float | None = None,
    log2fc_max: float | None = None,
    gene_symbols: str | None = None,
) -> pd.DataFrame",scverse,scanpy,1.10.1,,,,rank_genes_groups_df,"(
    adata: AnnData,
    group: str | Iterable[str] | None,
    *,
    key: str = ""rank_genes_groups"",
    pval_cutoff: float | None = None,
    log2fc_min: float | None = None,
    log2fc_max: float | None = None,
    gene_symbols: str | None = None,
)",,,,,,,,pd.DataFrame,,,,,
scverse_scanpy_1.10.1,get.py,python,"_check_indices(
    dim_df: pd.DataFrame,
    alt_index: pd.Index,
    *,
    dim: Literal[""obs"", ""var""],
    keys: list[str],
    alias_index: pd.Index | None = None,
    use_raw: bool = False,
) -> tuple[list[str], list[str], list[str]]",function,,,,"Function: _check_indices(
    dim_df: pd.DataFrame,
    alt_index: pd.Index,
    *,
    dim: Literal[""obs"", ""var""],
    keys: list[str],
    alias_index: pd.Index | None = None,
    use_raw: bool = False,
) -> tuple[list[str], list[str], list[str]]",scverse,scanpy,1.10.1,,,,_check_indices,"(
    dim_df: pd.DataFrame,
    alt_index: pd.Index,
    *,
    dim: Literal[""obs"", ""var""],
    keys: list[str],
    alias_index: pd.Index | None = None,
    use_raw: bool = False,
)",,,,,,,,"tuple[list[str], list[str], list[str]]",,,,,
scverse_scanpy_1.10.1,get.py,python,"_get_array_values(
    X,
    dim_names: pd.Index,
    keys: list[str],
    axis: Literal[0, 1],
    backed: bool,
)",function,,,,"Function: _get_array_values(
    X,
    dim_names: pd.Index,
    keys: list[str],
    axis: Literal[0, 1],
    backed: bool,
)",scverse,scanpy,1.10.1,,,,_get_array_values,"(
    X,
    dim_names: pd.Index,
    keys: list[str],
    axis: Literal[0, 1],
    backed: bool,
)",,,,,,,,,"# TODO: This should be made easier on the anndata side",,,,
scverse_scanpy_1.10.1,get.py,python,"obs_df(
    adata: AnnData,
    keys: Iterable[str] = (),
    obsm_keys: Iterable[tuple[str, int]] = (),
    *,
    layer: str | None = None,
    gene_symbols: str | None = None,
    use_raw: bool = False,
) -> pd.DataFrame",function,,,,"Function: obs_df(
    adata: AnnData,
    keys: Iterable[str] = (),
    obsm_keys: Iterable[tuple[str, int]] = (),
    *,
    layer: str | None = None,
    gene_symbols: str | None = None,
    use_raw: bool = False,
) -> pd.DataFrame",scverse,scanpy,1.10.1,,,,obs_df,"(
    adata: AnnData,
    keys: Iterable[str] = (),
    obsm_keys: Iterable[tuple[str, int]] = (),
    *,
    layer: str | None = None,
    gene_symbols: str | None = None,
    use_raw: bool = False,
)",,,,,,,,pd.DataFrame,,,,,
scverse_scanpy_1.10.1,get.py,python,"var_df(
    adata: AnnData,
    keys: Iterable[str] = (),
    varm_keys: Iterable[tuple[str, int]] = (),
    *,
    layer: str | None = None,
) -> pd.DataFrame",function,,,,"Function: var_df(
    adata: AnnData,
    keys: Iterable[str] = (),
    varm_keys: Iterable[tuple[str, int]] = (),
    *,
    layer: str | None = None,
) -> pd.DataFrame",scverse,scanpy,1.10.1,,,,var_df,"(
    adata: AnnData,
    keys: Iterable[str] = (),
    varm_keys: Iterable[tuple[str, int]] = (),
    *,
    layer: str | None = None,
)",,,,,,,,pd.DataFrame,,,,,
scverse_scanpy_1.10.1,get.py,python,"_get_obs_rep(
    adata: AnnData,
    *,
    use_raw: bool = False,
    layer: str | None = None,
    obsm: str | None = None,
    obsp: str | None = None,
) -> (
    np.ndarray
    | spmatrix
    | pd.DataFrame
    | ArrayView
    | BaseCompressedSparseDataset
    | None
)",function,,,,"Function: _get_obs_rep(
    adata: AnnData,
    *,
    use_raw: bool = False,
    layer: str | None = None,
    obsm: str | None = None,
    obsp: str | None = None,
) -> (
    np.ndarray
    | spmatrix
    | pd.DataFrame
    | ArrayView
    | BaseCompressedSparseDataset
    | None
)",scverse,scanpy,1.10.1,,,,_get_obs_rep,"(
    adata: AnnData,
    *,
    use_raw: bool = False,
    layer: str | None = None,
    obsm: str | None = None,
    obsp: str | None = None,
)",,,,,,,,"(
    np.ndarray
    | spmatrix
    | pd.DataFrame
    | ArrayView
    | BaseCompressedSparseDataset
    | None
)",,,,,
scverse_scanpy_1.10.1,get.py,python,"_set_obs_rep(
    adata: AnnData,
    val: Any,
    *,
    use_raw: bool = False,
    layer: str | None = None,
    obsm: str | None = None,
    obsp: str | None = None,
)",function,,,,"Function: _set_obs_rep(
    adata: AnnData,
    val: Any,
    *,
    use_raw: bool = False,
    layer: str | None = None,
    obsm: str | None = None,
    obsp: str | None = None,
)",scverse,scanpy,1.10.1,,,,_set_obs_rep,"(
    adata: AnnData,
    val: Any,
    *,
    use_raw: bool = False,
    layer: str | None = None,
    obsm: str | None = None,
    obsp: str | None = None,
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,"_check_mask(
    data: AnnData | np.ndarray,
    mask: NDArray[np.bool_] | str,
    dim: Literal[""obs"", ""var""],
) -> NDArray[np.bool_]",function,,,,"Function: _check_mask(
    data: AnnData | np.ndarray,
    mask: NDArray[np.bool_] | str,
    dim: Literal[""obs"", ""var""],
) -> NDArray[np.bool_]",scverse,scanpy,1.10.1,,,,_check_mask,"(
    data: AnnData | np.ndarray,
    mask: NDArray[np.bool_] | str,
    dim: Literal[""obs"", ""var""],
)",,,,,,,,NDArray[np.bool_],"# Could also be a series, but should be one or the other",,,,
scverse_scanpy_1.10.1,get.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,Any,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,Version from packaging.version,local_import,,,,Import: Version from packaging.version,scverse,scanpy,1.10.1,from packaging.version import Version,packaging.version,Version,,,packaging.version,,,,,,,,,,,,
scverse_scanpy_1.10.1,get.py,python,spmatrix from scipy.sparse,local_import,,,,Import: spmatrix from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import spmatrix,scipy.sparse,spmatrix,,,scipy.sparse,,,,,,,,,,,,
,get.py,python,,,,,,File: scanpy\get,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,get.py,python,,,,,,Directory: scanpy\get\get.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,[instance] Aggregate.groupby = groupby,class_field,,,,Class field: [instance] Aggregate.groupby = groupby,scverse,scanpy,1.10.1,,,,,,,Aggregate,__init__,"(
        self,
        groupby: pd.Categorical,
        data: Array,
        *,
        mask: NDArray[np.bool_] | None = None,
    )",self.groupby = groupby,self.groupby = groupby,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,"[instance] Aggregate.indicator_matrix = sparse_indicator(groupby, mask=mask)",class_field,,,,"Class field: [instance] Aggregate.indicator_matrix = sparse_indicator(groupby, mask=mask)",scverse,scanpy,1.10.1,,,,,,,Aggregate,__init__,"(
        self,
        groupby: pd.Categorical,
        data: Array,
        *,
        mask: NDArray[np.bool_] | None = None,
    )","self.indicator_matrix = sparse_indicator(groupby, mask=mask)","self.indicator_matrix = sparse_indicator(groupby, mask=mask)",,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,[instance] Aggregate.data = data,class_field,,,,Class field: [instance] Aggregate.data = data,scverse,scanpy,1.10.1,,,,,,,Aggregate,__init__,"(
        self,
        groupby: pd.Categorical,
        data: Array,
        *,
        mask: NDArray[np.bool_] | None = None,
    )",self.data = data,self.data = data,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,Aggregate.groupby: pd.Categorical,class_field,,,,Class field: Aggregate.groupby: pd.Categorical,scverse,scanpy,1.10.1,,,,,,,Aggregate,,,groupby: pd.Categorical,,,,,groupby,,,
scverse_scanpy_1.10.1,_aggregated.py,python,Aggregate.indicator_matrix: sparse.coo_matrix,class_field,,,,Class field: Aggregate.indicator_matrix: sparse.coo_matrix,scverse,scanpy,1.10.1,,,,,,,Aggregate,,,indicator_matrix: sparse.coo_matrix,,,,,indicator_matrix,,,
scverse_scanpy_1.10.1,_aggregated.py,python,Aggregate.data: Array,class_field,,,,Class field: Aggregate.data: Array,scverse,scanpy,1.10.1,,,,,,,Aggregate,,,data: Array,,,,,data,,,
scverse_scanpy_1.10.1,_aggregated.py,python,"Aggregate.__init__(
        self,
        groupby: pd.Categorical,
        data: Array,
        *,
        mask: NDArray[np.bool_] | None = None,
    ) -> None",class_method,,,,"Class method: Aggregate.__init__(
        self,
        groupby: pd.Categorical,
        data: Array,
        *,
        mask: NDArray[np.bool_] | None = None,
    ) -> None",scverse,scanpy,1.10.1,,,,,,,Aggregate,__init__,"(
        self,
        groupby: pd.Categorical,
        data: Array,
        *,
        mask: NDArray[np.bool_] | None = None,
    )",,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,Aggregate.count_nonzero(self) -> NDArray[np.integer],class_method,,,,Class method: Aggregate.count_nonzero(self) -> NDArray[np.integer],scverse,scanpy,1.10.1,,,,,,,Aggregate,count_nonzero,(self),,,NDArray[np.integer],,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,Aggregate.sum(self) -> Array,class_method,,,,Class method: Aggregate.sum(self) -> Array,scverse,scanpy,1.10.1,,,,,,,Aggregate,sum,(self),,,Array,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,Aggregate.mean(self) -> Array,class_method,,,,Class method: Aggregate.mean(self) -> Array,scverse,scanpy,1.10.1,,,,,,,Aggregate,mean,(self),,,Array,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,"Aggregate.mean_var(self, dof: int = 1) -> tuple[np.ndarray, np.ndarray]",class_method,,,,"Class method: Aggregate.mean_var(self, dof: int = 1) -> tuple[np.ndarray, np.ndarray]",scverse,scanpy,1.10.1,,,,,,,Aggregate,mean_var,"(self, dof: int = 1)",,,"tuple[np.ndarray, np.ndarray]",,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,Aggregate,class,,,,Class: Aggregate,scverse,scanpy,1.10.1,,,,,,,Aggregate,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,"_power(X: Array, power: float | int) -> Array",function,,,,"Function: _power(X: Array, power: float | int) -> Array",scverse,scanpy,1.10.1,,,,_power,"(X: Array, power: float | int)",,,,,,,,Array,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,"aggregate(
    adata: AnnData,
    by: str | Collection[str],
    func: AggType | Iterable[AggType],
    *,
    axis: Literal[""obs"", 0, ""var"", 1] | None = None,
    mask: NDArray[np.bool_] | str | None = None,
    dof: int = 1,
    layer: str | None = None,
    obsm: str | None = None,
    varm: str | None = None,
) -> AnnData",function,,,,"Function: aggregate(
    adata: AnnData,
    by: str | Collection[str],
    func: AggType | Iterable[AggType],
    *,
    axis: Literal[""obs"", 0, ""var"", 1] | None = None,
    mask: NDArray[np.bool_] | str | None = None,
    dof: int = 1,
    layer: str | None = None,
    obsm: str | None = None,
    varm: str | None = None,
) -> AnnData",scverse,scanpy,1.10.1,,,,aggregate,"(
    adata: AnnData,
    by: str | Collection[str],
    func: AggType | Iterable[AggType],
    *,
    axis: Literal[""obs"", 0, ""var"", 1] | None = None,
    mask: NDArray[np.bool_] | str | None = None,
    dof: int = 1,
    layer: str | None = None,
    obsm: str | None = None,
    varm: str | None = None,
)",,,,,,,,AnnData,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,"_combine_categories(
    label_df: pd.DataFrame, cols: Collection[str] | str
) -> tuple[pd.Categorical, pd.DataFrame]",function,,,,"Function: _combine_categories(
    label_df: pd.DataFrame, cols: Collection[str] | str
) -> tuple[pd.Categorical, pd.DataFrame]",scverse,scanpy,1.10.1,,,,_combine_categories,"(
    label_df: pd.DataFrame, cols: Collection[str] | str
)",,,,,,,,"tuple[pd.Categorical, pd.DataFrame]",,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,"sparse_indicator(
    categorical: pd.Categorical,
    *,
    mask: NDArray[np.bool_] | None = None,
    weight: NDArray[np.floating] | None = None,
) -> sparse.coo_matrix",function,,,,"Function: sparse_indicator(
    categorical: pd.Categorical,
    *,
    mask: NDArray[np.bool_] | None = None,
    weight: NDArray[np.floating] | None = None,
) -> sparse.coo_matrix",scverse,scanpy,1.10.1,,,,sparse_indicator,"(
    categorical: pd.Categorical,
    *,
    mask: NDArray[np.bool_] | None = None,
    weight: NDArray[np.floating] | None = None,
)",,,,,,,,sparse.coo_matrix,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,"Array = Union[np.ndarray, sparse.csc_matrix, sparse.csr_matrix]",constant,"Array = Union[np.ndarray, sparse.csc_matrix, sparse.csr_matrix]",Array,"Union[np.ndarray, sparse.csc_matrix, sparse.csr_matrix]","Constant: Array = Union[np.ndarray, sparse.csc_matrix, sparse.csr_matrix]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,"AggType = Literal[""count_nonzero"", ""mean"", ""sum"", ""var""]",constant,"AggType = Literal[""count_nonzero"", ""mean"", ""sum"", ""var""]",AggType,"Literal[""count_nonzero"", ""mean"", ""sum"", ""var""]","Constant: AggType = Literal[""count_nonzero"", ""mean"", ""sum"", ""var""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,singledispatch from functools,import,,,,Import: singledispatch from functools,scverse,scanpy,1.10.1,from functools import singledispatch,functools,singledispatch,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, Union, get_args",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, Union, get_args",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,Union from typing,import,,,,Import: Union from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, Union, get_args",typing,Union,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,get_args from typing,import,,,,Import: get_args from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, Union, get_args",typing,get_args,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,"from anndata import AnnData, utils",anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,utils from anndata,import,,,,Import: utils from anndata,scverse,scanpy,1.10.1,"from anndata import AnnData, utils",anndata,utils,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_aggregated.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
,_aggregated.py,python,,,,,,File: scanpy\get,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_aggregated.py,python,,,,,,Directory: scanpy\get\_aggregated.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""_check_mask"",
    ""_get_obs_rep"",
    ""_set_obs_rep"",
    ""aggregate"",
    ""obs_df"",
    ""rank_genes_groups_df"",
    ""var_df"",
]",constant,"__all__ = [
    ""_check_mask"",
    ""_get_obs_rep"",
    ""_set_obs_rep"",
    ""aggregate"",
    ""obs_df"",
    ""rank_genes_groups_df"",
    ""var_df"",
]",__all__,"[
    ""_check_mask"",
    ""_get_obs_rep"",
    ""_set_obs_rep"",
    ""aggregate"",
    ""obs_df"",
    ""rank_genes_groups_df"",
    ""var_df"",
]","Constant: __all__ = [
    ""_check_mask"",
    ""_get_obs_rep"",
    ""_set_obs_rep"",
    ""aggregate"",
    ""obs_df"",
    ""rank_genes_groups_df"",
    ""var_df"",
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\get,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\get\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,"_check_vals(
    vals: V,
) -> tuple[V, NDArray[np.bool_] | slice, NDArray[np.float64]]",function,,,,"Function: _check_vals(
    vals: V,
) -> tuple[V, NDArray[np.bool_] | slice, NDArray[np.float64]]",scverse,scanpy,1.10.1,,,,_check_vals,"(
    vals: V,
)",,,,,,,,"tuple[V, NDArray[np.bool_] | slice, NDArray[np.float64]]",,,,,
scverse_scanpy_1.10.1,_common.py,python,"V = TypeVar(""V"", np.ndarray, sparse.csr_matrix)",constant,"V = TypeVar(""V"", np.ndarray, sparse.csr_matrix)",V,"TypeVar(""V"", np.ndarray, sparse.csr_matrix)","Constant: V = TypeVar(""V"", np.ndarray, sparse.csr_matrix)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,singledispatch from functools,import,,,,Import: singledispatch from functools,scverse,scanpy,1.10.1,from functools import singledispatch,functools,singledispatch,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, TypeVar",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,TypeVar from typing,import,,,,Import: TypeVar from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, TypeVar",typing,TypeVar,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
,_common.py,python,,,,,,File: scanpy\metrics,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_common.py,python,,,,,,Directory: scanpy\metrics\_common.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_gearys_c.py,python,singledispatch from functools,import,,,,Import: singledispatch from functools,scverse,scanpy,1.10.1,from functools import singledispatch,functools,singledispatch,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_gearys_c.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_gearys_c.py,python,numba,import,,,,Import: numba,scverse,scanpy,1.10.1,import numba,,numba,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_gearys_c.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_gearys_c.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
,_gearys_c.py,python,,,,,,File: scanpy\metrics,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_gearys_c.py,python,,,,,,Directory: scanpy\metrics\_gearys_c.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_metrics.py,python,"confusion_matrix(
    orig: pd.Series | np.ndarray | Sequence,
    new: pd.Series | np.ndarray | Sequence,
    data: pd.DataFrame | None = None,
    *,
    normalize: bool = True,
) -> pd.DataFrame",function,,,,"Function: confusion_matrix(
    orig: pd.Series | np.ndarray | Sequence,
    new: pd.Series | np.ndarray | Sequence,
    data: pd.DataFrame | None = None,
    *,
    normalize: bool = True,
) -> pd.DataFrame",scverse,scanpy,1.10.1,,,,confusion_matrix,"(
    orig: pd.Series | np.ndarray | Sequence,
    new: pd.Series | np.ndarray | Sequence,
    data: pd.DataFrame | None = None,
    *,
    normalize: bool = True,
)",,,,,,,,pd.DataFrame,,,,,
scverse_scanpy_1.10.1,_metrics.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_metrics.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_metrics.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_metrics.py,python,natsorted from natsort,import,,,,Import: natsorted from natsort,scverse,scanpy,1.10.1,from natsort import natsorted,natsort,natsorted,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_metrics.py,python,CategoricalDtype from pandas.api.types,local_import,,,,Import: CategoricalDtype from pandas.api.types,scverse,scanpy,1.10.1,from pandas.api.types import CategoricalDtype,pandas.api.types,CategoricalDtype,,,pandas.api.types,,,,,,,,,,,,
,_metrics.py,python,,,,,,File: scanpy\metrics,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_metrics.py,python,,,,,,Directory: scanpy\metrics\_metrics.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_morans_i.py,python,singledispatch from functools,import,,,,Import: singledispatch from functools,scverse,scanpy,1.10.1,from functools import singledispatch,functools,singledispatch,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_morans_i.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_morans_i.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_morans_i.py,python,njit from numba,import,,,,Import: njit from numba,scverse,scanpy,1.10.1,"from numba import njit, prange",numba,njit,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_morans_i.py,python,prange from numba,import,,,,Import: prange from numba,scverse,scanpy,1.10.1,"from numba import njit, prange",numba,prange,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_morans_i.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
,_morans_i.py,python,,,,,,File: scanpy\metrics,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_morans_i.py,python,,,,,,Directory: scanpy\metrics\_morans_i.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [""gearys_c"", ""morans_i"", ""confusion_matrix""]",constant,"__all__ = [""gearys_c"", ""morans_i"", ""confusion_matrix""]",__all__,"[""gearys_c"", ""morans_i"", ""confusion_matrix""]","Constant: __all__ = [""gearys_c"", ""morans_i"", ""confusion_matrix""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\metrics,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\metrics\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,"_has_self_column(
    indices: NDArray[np.int32 | np.int64],
    distances: NDArray[np.float32 | np.float64],
) -> bool",function,,,,"Function: _has_self_column(
    indices: NDArray[np.int32 | np.int64],
    distances: NDArray[np.float32 | np.float64],
) -> bool",scverse,scanpy,1.10.1,,,,_has_self_column,"(
    indices: NDArray[np.int32 | np.int64],
    distances: NDArray[np.float32 | np.float64],
)",,,,,,,,bool,"# some algorithms have some messed up reordering.",,,,
scverse_scanpy_1.10.1,_common.py,python,"_remove_self_column(
    indices: NDArray[np.int32 | np.int64],
    distances: NDArray[np.float32 | np.float64],
) -> tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]]",function,,,,"Function: _remove_self_column(
    indices: NDArray[np.int32 | np.int64],
    distances: NDArray[np.float32 | np.float64],
) -> tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]]",scverse,scanpy,1.10.1,,,,_remove_self_column,"(
    indices: NDArray[np.int32 | np.int64],
    distances: NDArray[np.float32 | np.float64],
)",,,,,,,,"tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]]",,,,,
scverse_scanpy_1.10.1,_common.py,python,"_get_sparse_matrix_from_indices_distances(
    indices: NDArray[np.int32 | np.int64],
    distances: NDArray[np.float32 | np.float64],
    *,
    keep_self: bool,
) -> csr_matrix",function,,,,"Function: _get_sparse_matrix_from_indices_distances(
    indices: NDArray[np.int32 | np.int64],
    distances: NDArray[np.float32 | np.float64],
    *,
    keep_self: bool,
) -> csr_matrix",scverse,scanpy,1.10.1,,,,_get_sparse_matrix_from_indices_distances,"(
    indices: NDArray[np.int32 | np.int64],
    distances: NDArray[np.float32 | np.float64],
    *,
    keep_self: bool,
)",,,,,,,,csr_matrix,,,,,
scverse_scanpy_1.10.1,_common.py,python,"_get_indices_distances_from_dense_matrix(
    D: NDArray[np.float32 | np.float64], n_neighbors: int
)",function,,,,"Function: _get_indices_distances_from_dense_matrix(
    D: NDArray[np.float32 | np.float64], n_neighbors: int
)",scverse,scanpy,1.10.1,,,,_get_indices_distances_from_dense_matrix,"(
    D: NDArray[np.float32 | np.float64], n_neighbors: int
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,"_get_indices_distances_from_sparse_matrix(
    D: csr_matrix, n_neighbors: int
) -> tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]]",function,,,,"Function: _get_indices_distances_from_sparse_matrix(
    D: csr_matrix, n_neighbors: int
) -> tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]]",scverse,scanpy,1.10.1,,,,_get_indices_distances_from_sparse_matrix,"(
    D: csr_matrix, n_neighbors: int
)",,,,,,,,"tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]]",,,,,
scverse_scanpy_1.10.1,_common.py,python,"_ind_dist_slow(
    D: csr_matrix, n_neighbors: int
) -> tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]]",function,,,,"Function: _ind_dist_slow(
    D: csr_matrix, n_neighbors: int
) -> tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]]",scverse,scanpy,1.10.1,,,,_ind_dist_slow,"(
    D: csr_matrix, n_neighbors: int
)",,,,,,,,"tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]]",,,,,
scverse_scanpy_1.10.1,_common.py,python,"_ind_dist_shortcut(
    D: csr_matrix,
) -> tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]] | None",function,,,,"Function: _ind_dist_shortcut(
    D: csr_matrix,
) -> tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]] | None",scverse,scanpy,1.10.1,,,,_ind_dist_shortcut,"(
    D: csr_matrix,
)",,,,,,,,"tuple[NDArray[np.int32 | np.int64], NDArray[np.float32 | np.float64]] | None",,,,,
scverse_scanpy_1.10.1,_common.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,warn from warnings,import,,,,Import: warn from warnings,scverse,scanpy,1.10.1,from warnings import warn,warnings,warn,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import csr_matrix,scipy.sparse,csr_matrix,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,is_constant from scanpy._utils.compute.is_constant,local_import,,,,Import: is_constant from scanpy._utils.compute.is_constant,scverse,scanpy,1.10.1,from scanpy._utils.compute.is_constant import is_constant,scanpy._utils.compute.is_constant,is_constant,,,scanpy._utils.compute.is_constant,,,,,,,,,,,,
,_common.py,python,,,,,,File: scanpy\neighbors,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_common.py,python,,,,,,Directory: scanpy\neighbors\_common.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_connectivity.py,python,"gauss(distances: D, n_neighbors: int, *, knn: bool) -> D",function,,,,"Function: gauss(distances: D, n_neighbors: int, *, knn: bool) -> D",scverse,scanpy,1.10.1,,,,gauss,"(distances: D, n_neighbors: int, *, knn: bool)",,,,,,,,D,,,,,
scverse_scanpy_1.10.1,_connectivity.py,python,"umap(
    knn_indices: NDArray[np.int32 | np.int64],
    knn_dists: NDArray[np.float32 | np.float64],
    *,
    n_obs: int,
    n_neighbors: int,
    set_op_mix_ratio: float = 1.0,
    local_connectivity: float = 1.0,
) -> csr_matrix",function,,,,"Function: umap(
    knn_indices: NDArray[np.int32 | np.int64],
    knn_dists: NDArray[np.float32 | np.float64],
    *,
    n_obs: int,
    n_neighbors: int,
    set_op_mix_ratio: float = 1.0,
    local_connectivity: float = 1.0,
) -> csr_matrix",scverse,scanpy,1.10.1,,,,umap,"(
    knn_indices: NDArray[np.int32 | np.int64],
    knn_dists: NDArray[np.float32 | np.float64],
    *,
    n_obs: int,
    n_neighbors: int,
    set_op_mix_ratio: float = 1.0,
    local_connectivity: float = 1.0,
)",,,,,,,,csr_matrix,,,,,
scverse_scanpy_1.10.1,_connectivity.py,python,"D = TypeVar(""D"", NDArray[np.float32], csr_matrix)",constant,"D = TypeVar(""D"", NDArray[np.float32], csr_matrix)",D,"TypeVar(""D"", NDArray[np.float32], csr_matrix)","Constant: D = TypeVar(""D"", NDArray[np.float32], csr_matrix)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_connectivity.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_connectivity.py,python,TypeVar from typing,import,,,,Import: TypeVar from typing,scverse,scanpy,1.10.1,from typing import TypeVar,typing,TypeVar,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_connectivity.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_connectivity.py,python,NDArray from numpy.typing,local_import,,,,Import: NDArray from numpy.typing,scverse,scanpy,1.10.1,from numpy.typing import NDArray,numpy.typing,NDArray,,,numpy.typing,,,,,,,,,,,,
scverse_scanpy_1.10.1,_connectivity.py,python,coo_matrix from scipy.sparse,local_import,,,,Import: coo_matrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import coo_matrix, csr_matrix, issparse",scipy.sparse,coo_matrix,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,_connectivity.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import coo_matrix, csr_matrix, issparse",scipy.sparse,csr_matrix,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,_connectivity.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import coo_matrix, csr_matrix, issparse",scipy.sparse,issparse,,,scipy.sparse,,,,,,,,,,,,
,_connectivity.py,python,,,,,,File: scanpy\neighbors,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_connectivity.py,python,,,,,,Directory: scanpy\neighbors\_connectivity.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_doc.py,python,"doc_use_rep = """"""\
use_rep
    Use the indicated representation. `'X'` or any key for `.obsm` is valid.
    If `None`, the representation is chosen automatically:
    For `.n_vars` < :attr:`~scanpy._settings.ScanpyConfig.N_PCS` (default: 50), `.X` is used, otherwise 'X_pca' is used.
    If 'X_pca' is not present, it’s computed with default parameters or `n_pcs` if present.\
""""""",constant,"doc_use_rep = """"""\
use_rep
    Use the indicated representation. `'X'` or any key for `.obsm` is valid.
    If `None`, the representation is chosen automatically:
    For `.n_vars` < :attr:`~scanpy._settings.ScanpyConfig.N_PCS` (default: 50), `.X` is used, otherwise 'X_pca' is used.
    If 'X_pca' is not present, it’s computed with default parameters or `n_pcs` if present.\
""""""",doc_use_rep,"""""""\
use_rep
    Use the indicated representation. `'X'` or any key for `.obsm` is valid.
    If `None`, the representation is chosen automatically:
    For `.n_vars` < :attr:`~scanpy._settings.ScanpyConfig.N_PCS` (default: 50), `.X` is used, otherwise 'X_pca' is used.
    If 'X_pca' is not present, it’s computed with default parameters or `n_pcs` if present.\
""""""","Constant: doc_use_rep = """"""\
use_rep
    Use the indicated representation. `'X'` or any key for `.obsm` is valid.
    If `None`, the representation is chosen automatically:
    For `.n_vars` < :attr:`~scanpy._settings.ScanpyConfig.N_PCS` (default: 50), `.X` is used, otherwise 'X_pca' is used.
    If 'X_pca' is not present, it’s computed with default parameters or `n_pcs` if present.\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_doc.py,python,"doc_n_pcs = """"""\
n_pcs
    Use this many PCs. If `n_pcs==0` use `.X` if `use_rep is None`.\
""""""",constant,"doc_n_pcs = """"""\
n_pcs
    Use this many PCs. If `n_pcs==0` use `.X` if `use_rep is None`.\
""""""",doc_n_pcs,"""""""\
n_pcs
    Use this many PCs. If `n_pcs==0` use `.X` if `use_rep is None`.\
""""""","Constant: doc_n_pcs = """"""\
n_pcs
    Use this many PCs. If `n_pcs==0` use `.X` if `use_rep is None`.\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_doc.py,python,,,,,,File: scanpy\neighbors,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_doc.py,python,,,,,,Directory: scanpy\neighbors\_doc.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,"KnnTransformerLike.fit(self, X, y: None = None)",class_method,,,,"Class method: KnnTransformerLike.fit(self, X, y: None = None)",scverse,scanpy,1.10.1,,,,,,,KnnTransformerLike,fit,"(self, X, y: None = None)",,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,"KnnTransformerLike.transform(self, X) -> spmatrix",class_method,,,,"Class method: KnnTransformerLike.transform(self, X) -> spmatrix",scverse,scanpy,1.10.1,,,,,,,KnnTransformerLike,transform,"(self, X)",,,spmatrix,,,,,,
scverse_scanpy_1.10.1,_types.py,python,"KnnTransformerLike.fit_transform(self, X, y: None = None) -> spmatrix",class_method,,,,"Class method: KnnTransformerLike.fit_transform(self, X, y: None = None) -> spmatrix",scverse,scanpy,1.10.1,,,,,,,KnnTransformerLike,fit_transform,"(self, X, y: None = None)",,,spmatrix,,,,,,
scverse_scanpy_1.10.1,_types.py,python,"KnnTransformerLike.get_params(self, deep: bool = True) -> dict[str, Any]",class_method,,,,"Class method: KnnTransformerLike.get_params(self, deep: bool = True) -> dict[str, Any]",scverse,scanpy,1.10.1,,,,,,,KnnTransformerLike,get_params,"(self, deep: bool = True)",,,"dict[str, Any]",,,,,,
scverse_scanpy_1.10.1,_types.py,python,"KnnTransformerLike.set_params(self, **params: Any) -> Self",class_method,,,,"Class method: KnnTransformerLike.set_params(self, **params: Any) -> Self",scverse,scanpy,1.10.1,,,,,,,KnnTransformerLike,set_params,"(self, **params: Any)",,,Self,,,,,,
scverse_scanpy_1.10.1,_types.py,python,KnnTransformerLike(Protocol),class,,,,Class: KnnTransformerLike(Protocol),scverse,scanpy,1.10.1,,,,,,,KnnTransformerLike,,,,,,,,,(Protocol),,
scverse_scanpy_1.10.1,_types.py,python,"_Method = Literal[""umap"", ""gauss""]",constant,"_Method = Literal[""umap"", ""gauss""]",_Method,"Literal[""umap"", ""gauss""]","Constant: _Method = Literal[""umap"", ""gauss""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,"_KnownTransformer = Literal[""pynndescent"", ""sklearn"", ""rapids""]",constant,"_KnownTransformer = Literal[""pynndescent"", ""sklearn"", ""rapids""]",_KnownTransformer,"Literal[""pynndescent"", ""sklearn"", ""rapids""]","Constant: _KnownTransformer = Literal[""pynndescent"", ""sklearn"", ""rapids""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,"_MetricFn = _C[[np.ndarray, np.ndarray], float]",constant,"_MetricFn = _C[[np.ndarray, np.ndarray], float]",_MetricFn,"_C[[np.ndarray, np.ndarray], float]","Constant: _MetricFn = _C[[np.ndarray, np.ndarray], float]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,"_MetricSparseCapable = Literal[
    ""cityblock"", ""cosine"", ""euclidean"", ""l1"", ""l2"", ""manhattan""
]",constant,"_MetricSparseCapable = Literal[
    ""cityblock"", ""cosine"", ""euclidean"", ""l1"", ""l2"", ""manhattan""
]",_MetricSparseCapable,"Literal[
    ""cityblock"", ""cosine"", ""euclidean"", ""l1"", ""l2"", ""manhattan""
]","Constant: _MetricSparseCapable = Literal[
    ""cityblock"", ""cosine"", ""euclidean"", ""l1"", ""l2"", ""manhattan""
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,"_MetricScipySpatial = Literal[
    ""braycurtis"",
    ""canberra"",
    ""chebyshev"",
    ""correlation"",
    ""dice"",
    ""hamming"",
    ""jaccard"",
    ""kulsinski"",
    ""mahalanobis"",
    ""minkowski"",
    ""rogerstanimoto"",
    ""russellrao"",
    ""seuclidean"",
    ""sokalmichener"",
    ""sokalsneath"",
    ""sqeuclidean"",
    ""yule"",
]",constant,"_MetricScipySpatial = Literal[
    ""braycurtis"",
    ""canberra"",
    ""chebyshev"",
    ""correlation"",
    ""dice"",
    ""hamming"",
    ""jaccard"",
    ""kulsinski"",
    ""mahalanobis"",
    ""minkowski"",
    ""rogerstanimoto"",
    ""russellrao"",
    ""seuclidean"",
    ""sokalmichener"",
    ""sokalsneath"",
    ""sqeuclidean"",
    ""yule"",
]",_MetricScipySpatial,"Literal[
    ""braycurtis"",
    ""canberra"",
    ""chebyshev"",
    ""correlation"",
    ""dice"",
    ""hamming"",
    ""jaccard"",
    ""kulsinski"",
    ""mahalanobis"",
    ""minkowski"",
    ""rogerstanimoto"",
    ""russellrao"",
    ""seuclidean"",
    ""sokalmichener"",
    ""sokalsneath"",
    ""sqeuclidean"",
    ""yule"",
]","Constant: _MetricScipySpatial = Literal[
    ""braycurtis"",
    ""canberra"",
    ""chebyshev"",
    ""correlation"",
    ""dice"",
    ""hamming"",
    ""jaccard"",
    ""kulsinski"",
    ""mahalanobis"",
    ""minkowski"",
    ""rogerstanimoto"",
    ""russellrao"",
    ""seuclidean"",
    ""sokalmichener"",
    ""sokalsneath"",
    ""sqeuclidean"",
    ""yule"",
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,"_Metric = _U[_MetricSparseCapable, _MetricScipySpatial]",constant,"_Metric = _U[_MetricSparseCapable, _MetricScipySpatial]",_Metric,"_U[_MetricSparseCapable, _MetricScipySpatial]","Constant: _Metric = _U[_MetricSparseCapable, _MetricScipySpatial]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, Protocol",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, Protocol",typing,Any,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, Protocol",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,Protocol from typing,import,,,,Import: Protocol from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, Protocol",typing,Protocol,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,Callable from typing,import,,,,Import: Callable from typing,scverse,scanpy,1.10.1,from typing import Callable as _C,typing,Callable,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,Union from typing,import,,,,Import: Union from typing,scverse,scanpy,1.10.1,from typing import Union as _U,typing,Union,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_types.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
,_types.py,python,,,,,,File: scanpy\neighbors,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_types.py,python,,,,,,Directory: scanpy\neighbors\_types.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,KwdsForTransformer.n_neighbors: int,class_field,,,,Class field: KwdsForTransformer.n_neighbors: int,scverse,scanpy,1.10.1,,,,,,,KwdsForTransformer,,,n_neighbors: int,,,,,n_neighbors,,,
scverse_scanpy_1.10.1,__init__.py,python,KwdsForTransformer.metric: _Metric | _MetricFn,class_field,,,,Class field: KwdsForTransformer.metric: _Metric | _MetricFn,scverse,scanpy,1.10.1,,,,,,,KwdsForTransformer,,,metric: _Metric | _MetricFn,,,,,metric,,,
scverse_scanpy_1.10.1,__init__.py,python,"KwdsForTransformer.metric_params: Mapping[str, Any]",class_field,,,,"Class field: KwdsForTransformer.metric_params: Mapping[str, Any]",scverse,scanpy,1.10.1,,,,,,,KwdsForTransformer,,,"metric_params: Mapping[str, Any]",,,,,metric_params,,,
scverse_scanpy_1.10.1,__init__.py,python,KwdsForTransformer.random_state: AnyRandom,class_field,,,,Class field: KwdsForTransformer.random_state: AnyRandom,scverse,scanpy,1.10.1,,,,,,,KwdsForTransformer,,,random_state: AnyRandom,,,,,random_state,,,
scverse_scanpy_1.10.1,__init__.py,python,FlatTree.hyperplanes: None,class_field,,,,Class field: FlatTree.hyperplanes: None,scverse,scanpy,1.10.1,,,,,,,FlatTree,,,hyperplanes: None,,,,,hyperplanes,,,
scverse_scanpy_1.10.1,__init__.py,python,FlatTree.offsets: None,class_field,,,,Class field: FlatTree.offsets: None,scverse,scanpy,1.10.1,,,,,,,FlatTree,,,offsets: None,,,,,offsets,,,
scverse_scanpy_1.10.1,__init__.py,python,FlatTree.children: None,class_field,,,,Class field: FlatTree.children: None,scverse,scanpy,1.10.1,,,,,,,FlatTree,,,children: None,,,,,children,,,
scverse_scanpy_1.10.1,__init__.py,python,FlatTree.indices: None,class_field,,,,Class field: FlatTree.indices: None,scverse,scanpy,1.10.1,,,,,,,FlatTree,,,indices: None,,,,,indices,,,
scverse_scanpy_1.10.1,__init__.py,python,[instance] OnFlySymMatrix.get_row = get_row,class_field,,,,Class field: [instance] OnFlySymMatrix.get_row = get_row,scverse,scanpy,1.10.1,,,,,,,OnFlySymMatrix,__init__,"(
        self,
        get_row: Callable[[Any], np.ndarray],
        shape: tuple[int, int],
        *,
        DC_start: int = 0,
        DC_end: int = -1,
        rows: MutableMapping[Any, np.ndarray] | None = None,
        restrict_array: np.ndarray | None = None,
    )",self.get_row = get_row,self.get_row = get_row,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,[instance] OnFlySymMatrix.shape = shape,class_field,,,,Class field: [instance] OnFlySymMatrix.shape = shape,scverse,scanpy,1.10.1,,,,,,,OnFlySymMatrix,__init__,"(
        self,
        get_row: Callable[[Any], np.ndarray],
        shape: tuple[int, int],
        *,
        DC_start: int = 0,
        DC_end: int = -1,
        rows: MutableMapping[Any, np.ndarray] | None = None,
        restrict_array: np.ndarray | None = None,
    )",self.shape = shape,self.shape = shape,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,[instance] OnFlySymMatrix.DC_start = DC_start,class_field,,,,Class field: [instance] OnFlySymMatrix.DC_start = DC_start,scverse,scanpy,1.10.1,,,,,,,OnFlySymMatrix,__init__,"(
        self,
        get_row: Callable[[Any], np.ndarray],
        shape: tuple[int, int],
        *,
        DC_start: int = 0,
        DC_end: int = -1,
        rows: MutableMapping[Any, np.ndarray] | None = None,
        restrict_array: np.ndarray | None = None,
    )",self.DC_start = DC_start,self.DC_start = DC_start,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,[instance] OnFlySymMatrix.DC_end = DC_end,class_field,,,,Class field: [instance] OnFlySymMatrix.DC_end = DC_end,scverse,scanpy,1.10.1,,,,,,,OnFlySymMatrix,__init__,"(
        self,
        get_row: Callable[[Any], np.ndarray],
        shape: tuple[int, int],
        *,
        DC_start: int = 0,
        DC_end: int = -1,
        rows: MutableMapping[Any, np.ndarray] | None = None,
        restrict_array: np.ndarray | None = None,
    )",self.DC_end = DC_end,self.DC_end = DC_end,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,[instance] OnFlySymMatrix.rows = {} if rows is None else rows,class_field,,,,Class field: [instance] OnFlySymMatrix.rows = {} if rows is None else rows,scverse,scanpy,1.10.1,,,,,,,OnFlySymMatrix,__init__,"(
        self,
        get_row: Callable[[Any], np.ndarray],
        shape: tuple[int, int],
        *,
        DC_start: int = 0,
        DC_end: int = -1,
        rows: MutableMapping[Any, np.ndarray] | None = None,
        restrict_array: np.ndarray | None = None,
    )",self.rows = {} if rows is None else rows,self.rows = {} if rows is None else rows,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,[instance] OnFlySymMatrix.restrict_array = restrict_array,class_field,,,,Class field: [instance] OnFlySymMatrix.restrict_array = restrict_array,scverse,scanpy,1.10.1,,,,,,,OnFlySymMatrix,__init__,"(
        self,
        get_row: Callable[[Any], np.ndarray],
        shape: tuple[int, int],
        *,
        DC_start: int = 0,
        DC_end: int = -1,
        rows: MutableMapping[Any, np.ndarray] | None = None,
        restrict_array: np.ndarray | None = None,
    )",self.restrict_array = restrict_array,self.restrict_array = restrict_array,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"OnFlySymMatrix.__init__(
        self,
        get_row: Callable[[Any], np.ndarray],
        shape: tuple[int, int],
        *,
        DC_start: int = 0,
        DC_end: int = -1,
        rows: MutableMapping[Any, np.ndarray] | None = None,
        restrict_array: np.ndarray | None = None,
    )",class_method,,,,"Class method: OnFlySymMatrix.__init__(
        self,
        get_row: Callable[[Any], np.ndarray],
        shape: tuple[int, int],
        *,
        DC_start: int = 0,
        DC_end: int = -1,
        rows: MutableMapping[Any, np.ndarray] | None = None,
        restrict_array: np.ndarray | None = None,
    )",scverse,scanpy,1.10.1,,,,,,,OnFlySymMatrix,__init__,"(
        self,
        get_row: Callable[[Any], np.ndarray],
        shape: tuple[int, int],
        *,
        DC_start: int = 0,
        DC_end: int = -1,
        rows: MutableMapping[Any, np.ndarray] | None = None,
        restrict_array: np.ndarray | None = None,
    )",,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"OnFlySymMatrix.__getitem__(self, index)",class_method,,,,"Class method: OnFlySymMatrix.__getitem__(self, index)",scverse,scanpy,1.10.1,,,,,,,OnFlySymMatrix,__getitem__,"(self, index)",,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"OnFlySymMatrix.restrict(self, index_array)",class_method,,,,"Class method: OnFlySymMatrix.restrict(self, index_array)",scverse,scanpy,1.10.1,,,,,,,OnFlySymMatrix,restrict,"(self, index_array)",,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"[old_positionals(""n_dcs"", ""neighbors_key"")] Neighbors.__init__(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        neighbors_key: str | None = None,
    )",class_method,,,,"Class method: [old_positionals(""n_dcs"", ""neighbors_key"")] Neighbors.__init__(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        neighbors_key: str | None = None,
    )",scverse,scanpy,1.10.1,,,,,,,Neighbors,__init__,"(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        neighbors_key: str | None = None,
    )",,,,,,,,,"old_positionals(""n_dcs"", ""neighbors_key"")"
scverse_scanpy_1.10.1,__init__.py,python,[property] Neighbors.rp_forest(self) -> RPForestDict | None,class_method,,,,Class method: [property] Neighbors.rp_forest(self) -> RPForestDict | None,scverse,scanpy,1.10.1,,,,,,,Neighbors,rp_forest,(self),,,RPForestDict | None,,,,,,property
scverse_scanpy_1.10.1,__init__.py,python,[property] Neighbors.distances(self) -> np.ndarray | csr_matrix | None,class_method,,,,Class method: [property] Neighbors.distances(self) -> np.ndarray | csr_matrix | None,scverse,scanpy,1.10.1,,,,,,,Neighbors,distances,(self),,,np.ndarray | csr_matrix | None,,,,,,property
scverse_scanpy_1.10.1,__init__.py,python,[property] Neighbors.connectivities(self) -> np.ndarray | csr_matrix | None,class_method,,,,Class method: [property] Neighbors.connectivities(self) -> np.ndarray | csr_matrix | None,scverse,scanpy,1.10.1,,,,,,,Neighbors,connectivities,(self),,,np.ndarray | csr_matrix | None,,,,,,property
scverse_scanpy_1.10.1,__init__.py,python,[property] Neighbors.transitions(self) -> np.ndarray | csr_matrix,class_method,,,,Class method: [property] Neighbors.transitions(self) -> np.ndarray | csr_matrix,scverse,scanpy,1.10.1,,,,,,,Neighbors,transitions,(self),,,np.ndarray | csr_matrix,,,,,,property
scverse_scanpy_1.10.1,__init__.py,python,[property] Neighbors.transitions_sym(self) -> np.ndarray | csr_matrix | None,class_method,,,,Class method: [property] Neighbors.transitions_sym(self) -> np.ndarray | csr_matrix | None,scverse,scanpy,1.10.1,,,,,,,Neighbors,transitions_sym,(self),,,np.ndarray | csr_matrix | None,,,,,,property
scverse_scanpy_1.10.1,__init__.py,python,[property] Neighbors.eigen_values(self) -> np.ndarray,class_method,,,,Class method: [property] Neighbors.eigen_values(self) -> np.ndarray,scverse,scanpy,1.10.1,,,,,,,Neighbors,eigen_values,(self),,,np.ndarray,,,,,,property
scverse_scanpy_1.10.1,__init__.py,python,[property] Neighbors.eigen_basis(self) -> np.ndarray,class_method,,,,Class method: [property] Neighbors.eigen_basis(self) -> np.ndarray,scverse,scanpy,1.10.1,,,,,,,Neighbors,eigen_basis,(self),,,np.ndarray,,,,,,property
scverse_scanpy_1.10.1,__init__.py,python,[property] Neighbors.distances_dpt(self) -> OnFlySymMatrix,class_method,,,,Class method: [property] Neighbors.distances_dpt(self) -> OnFlySymMatrix,scverse,scanpy,1.10.1,,,,,,,Neighbors,distances_dpt,(self),,,OnFlySymMatrix,,,,,,property
scverse_scanpy_1.10.1,__init__.py,python,Neighbors.to_igraph(self) -> Graph,class_method,,,,Class method: Neighbors.to_igraph(self) -> Graph,scverse,scanpy,1.10.1,,,,,,,Neighbors,to_igraph,(self),,,Graph,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"[_doc_params(n_pcs=doc_n_pcs, use_rep=doc_use_rep)] Neighbors.compute_neighbors(
        self,
        n_neighbors: int = 30,
        n_pcs: int | None = None,
        *,
        use_rep: str | None = None,
        knn: bool = True,
        method: _Method | None = ""umap"",
        transformer: KnnTransformerLike | _KnownTransformer | None = None,
        metric: _Metric | _MetricFn = ""euclidean"",
        metric_kwds: Mapping[str, Any] = MappingProxyType({}),
        random_state: AnyRandom = 0,
    ) -> None",class_method,,,,"Class method: [_doc_params(n_pcs=doc_n_pcs, use_rep=doc_use_rep)] Neighbors.compute_neighbors(
        self,
        n_neighbors: int = 30,
        n_pcs: int | None = None,
        *,
        use_rep: str | None = None,
        knn: bool = True,
        method: _Method | None = ""umap"",
        transformer: KnnTransformerLike | _KnownTransformer | None = None,
        metric: _Metric | _MetricFn = ""euclidean"",
        metric_kwds: Mapping[str, Any] = MappingProxyType({}),
        random_state: AnyRandom = 0,
    ) -> None",scverse,scanpy,1.10.1,,,,,,,Neighbors,compute_neighbors,"(
        self,
        n_neighbors: int = 30,
        n_pcs: int | None = None,
        *,
        use_rep: str | None = None,
        knn: bool = True,
        method: _Method | None = ""umap"",
        transformer: KnnTransformerLike | _KnownTransformer | None = None,
        metric: _Metric | _MetricFn = ""euclidean"",
        metric_kwds: Mapping[str, Any] = MappingProxyType({}),
        random_state: AnyRandom = 0,
    )",,,,,,,,,"_doc_params(n_pcs=doc_n_pcs, use_rep=doc_use_rep)"
scverse_scanpy_1.10.1,__init__.py,python,"Neighbors._handle_transformer(
        self,
        method: _Method | Literal[""gauss""] | None,
        transformer: KnnTransformerLike | _KnownTransformer | None,
        *,
        knn: bool,
        kwds: KwdsForTransformer,
    ) -> tuple[_Method | None, KnnTransformerLike, bool]",class_method,,,,"Class method: Neighbors._handle_transformer(
        self,
        method: _Method | Literal[""gauss""] | None,
        transformer: KnnTransformerLike | _KnownTransformer | None,
        *,
        knn: bool,
        kwds: KwdsForTransformer,
    ) -> tuple[_Method | None, KnnTransformerLike, bool]",scverse,scanpy,1.10.1,,,,,,,Neighbors,_handle_transformer,"(
        self,
        method: _Method | Literal[""gauss""] | None,
        transformer: KnnTransformerLike | _KnownTransformer | None,
        *,
        knn: bool,
        kwds: KwdsForTransformer,
    )",,,"tuple[_Method | None, KnnTransformerLike, bool]",,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"Neighbors.compute_transitions(self, density_normalize: bool = True)",class_method,,,,"Class method: Neighbors.compute_transitions(self, density_normalize: bool = True)",scverse,scanpy,1.10.1,,,,,,,Neighbors,compute_transitions,"(self, density_normalize: bool = True)",,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"Neighbors.compute_eigen(
        self,
        n_comps: int = 15,
        sym: bool | None = None,
        sort: Literal[""decrease"", ""increase""] = ""decrease"",
        random_state: AnyRandom = 0,
    )",class_method,,,,"Class method: Neighbors.compute_eigen(
        self,
        n_comps: int = 15,
        sym: bool | None = None,
        sort: Literal[""decrease"", ""increase""] = ""decrease"",
        random_state: AnyRandom = 0,
    )",scverse,scanpy,1.10.1,,,,,,,Neighbors,compute_eigen,"(
        self,
        n_comps: int = 15,
        sym: bool | None = None,
        sort: Literal[""decrease"", ""increase""] = ""decrease"",
        random_state: AnyRandom = 0,
    )",,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Neighbors._init_iroot(self),class_method,,,,Class method: Neighbors._init_iroot(self),scverse,scanpy,1.10.1,,,,,,,Neighbors,_init_iroot,(self),,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"Neighbors._get_dpt_row(self, i: int) -> np.ndarray",class_method,,,,"Class method: Neighbors._get_dpt_row(self, i: int) -> np.ndarray",scverse,scanpy,1.10.1,,,,,,,Neighbors,_get_dpt_row,"(self, i: int)",,,np.ndarray,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Neighbors._set_pseudotime(self),class_method,,,,Class method: Neighbors._set_pseudotime(self),scverse,scanpy,1.10.1,,,,,,,Neighbors,_set_pseudotime,(self),,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"Neighbors._set_iroot_via_xroot(self, xroot: np.ndarray)",class_method,,,,"Class method: Neighbors._set_iroot_via_xroot(self, xroot: np.ndarray)",scverse,scanpy,1.10.1,,,,,,,Neighbors,_set_iroot_via_xroot,"(self, xroot: np.ndarray)",,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,KwdsForTransformer(TypedDict),class,,,,Class: KwdsForTransformer(TypedDict),scverse,scanpy,1.10.1,,,,,,,KwdsForTransformer,,,,,,,,,(TypedDict),,
scverse_scanpy_1.10.1,__init__.py,python,FlatTree(NamedTuple),class,,,,Class: FlatTree(NamedTuple),scverse,scanpy,1.10.1,,,,,,,FlatTree,,,,,,,,,(NamedTuple),,
scverse_scanpy_1.10.1,__init__.py,python,OnFlySymMatrix,class,,,,Class: OnFlySymMatrix,scverse,scanpy,1.10.1,,,,,,,OnFlySymMatrix,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Neighbors,class,,,,Class: Neighbors,scverse,scanpy,1.10.1,,,,,,,Neighbors,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,_backwards_compat_get_full_X_diffmap(adata: AnnData) -> np.ndarray,function,,,,Function: _backwards_compat_get_full_X_diffmap(adata: AnnData) -> np.ndarray,scverse,scanpy,1.10.1,,,,_backwards_compat_get_full_X_diffmap,(adata: AnnData),,,,,,,,np.ndarray,,,,,
scverse_scanpy_1.10.1,__init__.py,python,_backwards_compat_get_full_eval(adata: AnnData),function,,,,Function: _backwards_compat_get_full_eval(adata: AnnData),scverse,scanpy,1.10.1,,,,_backwards_compat_get_full_eval,(adata: AnnData),,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,_make_forest_dict(forest),function,,,,Function: _make_forest_dict(forest),scverse,scanpy,1.10.1,,,,_make_forest_dict,(forest),,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"RPForestDict = Mapping[str, Mapping[str, np.ndarray]]",constant,"RPForestDict = Mapping[str, Mapping[str, np.ndarray]]",RPForestDict,"Mapping[str, Mapping[str, np.ndarray]]","Constant: RPForestDict = Mapping[str, Mapping[str, np.ndarray]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,N_DCS = 15,constant,N_DCS = 15,N_DCS,15,Constant: N_DCS = 15,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,N_PCS = settings.N_PCS,constant,N_PCS = settings.N_PCS,N_PCS,settings.N_PCS,Constant: N_PCS = settings.N_PCS,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,indent from textwrap,import,,,,Import: indent from textwrap,scverse,scanpy,1.10.1,from textwrap import indent,textwrap,indent,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,MappingProxyType from types,import,,,,Import: MappingProxyType from types,scverse,scanpy,1.10.1,from types import MappingProxyType,types,MappingProxyType,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, NamedTuple, TypedDict, get_args",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, NamedTuple, TypedDict, get_args",typing,Any,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, NamedTuple, TypedDict, get_args",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,NamedTuple from typing,import,,,,Import: NamedTuple from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, NamedTuple, TypedDict, get_args",typing,NamedTuple,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,TypedDict from typing,import,,,,Import: TypedDict from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, NamedTuple, TypedDict, get_args",typing,TypedDict,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,get_args from typing,import,,,,Import: get_args from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal, NamedTuple, TypedDict, get_args",typing,get_args,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,warn from warnings,import,,,,Import: warn from warnings,scverse,scanpy,1.10.1,from warnings import warn,warnings,warn,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,scipy,import,,,,Import: scipy,scverse,scanpy,1.10.1,import scipy,,scipy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Callable from collections.abc,local_import,,,,Import: Callable from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Callable, Mapping, MutableMapping",collections.abc,Callable,,,collections.abc,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Mapping from collections.abc,local_import,,,,Import: Mapping from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Callable, Mapping, MutableMapping",collections.abc,Mapping,,,collections.abc,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,MutableMapping from collections.abc,local_import,,,,Import: MutableMapping from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Callable, Mapping, MutableMapping",collections.abc,MutableMapping,,,collections.abc,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse",scipy.sparse,csr_matrix,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse",scipy.sparse,issparse,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,check_random_state from sklearn.utils,local_import,,,,Import: check_random_state from sklearn.utils,scverse,scanpy,1.10.1,from sklearn.utils import check_random_state,sklearn.utils,check_random_state,,,sklearn.utils,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\neighbors,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\neighbors\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,[instance] RapidsKNNTransformer.n_neighbors = n_neighbors,class_field,,,,Class field: [instance] RapidsKNNTransformer.n_neighbors = n_neighbors,scverse,scanpy,1.10.1,,,,,,,RapidsKNNTransformer,__init__,"(
        self,
        *,
        handle=None,
        algorithm: _Algorithm | Literal[""auto""] = ""auto"",
        n_neighbors: int,
        metric: _Metric = ""euclidean"",
        p: int = 2,
        algo_params: Mapping[str, Any] | None = None,
        metric_params: Mapping[str, Any] | None = None,
        random_state=None,
    )",self.n_neighbors = n_neighbors,self.n_neighbors = n_neighbors,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,[instance] RapidsKNNTransformer.metric = metric,class_field,,,,Class field: [instance] RapidsKNNTransformer.metric = metric,scverse,scanpy,1.10.1,,,,,,,RapidsKNNTransformer,__init__,"(
        self,
        *,
        handle=None,
        algorithm: _Algorithm | Literal[""auto""] = ""auto"",
        n_neighbors: int,
        metric: _Metric = ""euclidean"",
        p: int = 2,
        algo_params: Mapping[str, Any] | None = None,
        metric_params: Mapping[str, Any] | None = None,
        random_state=None,
    )",self.metric = metric,self.metric = metric,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,[instance] RapidsKNNTransformer.p = p,class_field,,,,Class field: [instance] RapidsKNNTransformer.p = p,scverse,scanpy,1.10.1,,,,,,,RapidsKNNTransformer,__init__,"(
        self,
        *,
        handle=None,
        algorithm: _Algorithm | Literal[""auto""] = ""auto"",
        n_neighbors: int,
        metric: _Metric = ""euclidean"",
        p: int = 2,
        algo_params: Mapping[str, Any] | None = None,
        metric_params: Mapping[str, Any] | None = None,
        random_state=None,
    )",self.p = p,self.p = p,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,"[instance] RapidsKNNTransformer.nn = NearestNeighbors(
            n_neighbors=n_neighbors,
            # https://docs.rapids.ai/api/cuml/nightly/api/#verbosity-levels
            verbose=settings.verbosity + 2,
            handle=handle,
            algorithm=algorithm,
            metric=metric,
            p=p,
            algo_params=algo_params,
            metric_params=metric_params,
            output_type=""input"",  # could also be None to respect global setting
        )",class_field,,,,"Class field: [instance] RapidsKNNTransformer.nn = NearestNeighbors(
            n_neighbors=n_neighbors,
            # https://docs.rapids.ai/api/cuml/nightly/api/#verbosity-levels
            verbose=settings.verbosity + 2,
            handle=handle,
            algorithm=algorithm,
            metric=metric,
            p=p,
            algo_params=algo_params,
            metric_params=metric_params,
            output_type=""input"",  # could also be None to respect global setting
        )",scverse,scanpy,1.10.1,,,,,,,RapidsKNNTransformer,__init__,"(
        self,
        *,
        handle=None,
        algorithm: _Algorithm | Literal[""auto""] = ""auto"",
        n_neighbors: int,
        metric: _Metric = ""euclidean"",
        p: int = 2,
        algo_params: Mapping[str, Any] | None = None,
        metric_params: Mapping[str, Any] | None = None,
        random_state=None,
    )","self.nn = NearestNeighbors(
            n_neighbors=n_neighbors,
            # https://docs.rapids.ai/api/cuml/nightly/api/#verbosity-levels
            verbose=settings.verbosity + 2,
            handle=handle,
            algorithm=algorithm,
            metric=metric,
            p=p,
            algo_params=algo_params,
            metric_params=metric_params,
            output_type=""input"",  # could also be None to respect global setting
        )","self.nn = NearestNeighbors(
            n_neighbors=n_neighbors,
            # https://docs.rapids.ai/api/cuml/nightly/api/#verbosity-levels
            verbose=settings.verbosity + 2,
            handle=handle,
            algorithm=algorithm,
            metric=metric,
            p=p,
            algo_params=algo_params,
            metric_params=metric_params,
            output_type=""input"",  # could also be None to respect global setting
        )",,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,"RapidsKNNTransformer.__init__(
        self,
        *,
        handle=None,
        algorithm: _Algorithm | Literal[""auto""] = ""auto"",
        n_neighbors: int,
        metric: _Metric = ""euclidean"",
        p: int = 2,
        algo_params: Mapping[str, Any] | None = None,
        metric_params: Mapping[str, Any] | None = None,
        random_state=None,
    ) -> None",class_method,,,,"Class method: RapidsKNNTransformer.__init__(
        self,
        *,
        handle=None,
        algorithm: _Algorithm | Literal[""auto""] = ""auto"",
        n_neighbors: int,
        metric: _Metric = ""euclidean"",
        p: int = 2,
        algo_params: Mapping[str, Any] | None = None,
        metric_params: Mapping[str, Any] | None = None,
        random_state=None,
    ) -> None",scverse,scanpy,1.10.1,,,,,,,RapidsKNNTransformer,__init__,"(
        self,
        *,
        handle=None,
        algorithm: _Algorithm | Literal[""auto""] = ""auto"",
        n_neighbors: int,
        metric: _Metric = ""euclidean"",
        p: int = 2,
        algo_params: Mapping[str, Any] | None = None,
        metric_params: Mapping[str, Any] | None = None,
        random_state=None,
    )",,,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,RapidsKNNTransformer.__sklearn_is_fitted__(self) -> bool,class_method,,,,Class method: RapidsKNNTransformer.__sklearn_is_fitted__(self) -> bool,scverse,scanpy,1.10.1,,,,,,,RapidsKNNTransformer,__sklearn_is_fitted__,(self),,,bool,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,"RapidsKNNTransformer.fit(self, X: ArrayLike, y: Any = None) -> RapidsKNNTransformer",class_method,,,,"Class method: RapidsKNNTransformer.fit(self, X: ArrayLike, y: Any = None) -> RapidsKNNTransformer",scverse,scanpy,1.10.1,,,,,,,RapidsKNNTransformer,fit,"(self, X: ArrayLike, y: Any = None)",,,RapidsKNNTransformer,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,"RapidsKNNTransformer.transform(self, X: ArrayLike) -> csr_matrix",class_method,,,,"Class method: RapidsKNNTransformer.transform(self, X: ArrayLike) -> csr_matrix",scverse,scanpy,1.10.1,,,,,,,RapidsKNNTransformer,transform,"(self, X: ArrayLike)",,,csr_matrix,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,"RapidsKNNTransformer._more_tags(self) -> dict[str, Any]",class_method,,,,"Class method: RapidsKNNTransformer._more_tags(self) -> dict[str, Any]",scverse,scanpy,1.10.1,,,,,,,RapidsKNNTransformer,_more_tags,(self),,,"dict[str, Any]",,,,,,
scverse_scanpy_1.10.1,rapids.py,python,"RapidsKNNTransformer(TransformerChecksMixin, TransformerMixin, BaseEstimator)",class,,,,"Class: RapidsKNNTransformer(TransformerChecksMixin, TransformerMixin, BaseEstimator)",scverse,scanpy,1.10.1,,,,,,,RapidsKNNTransformer,,,,,,,,,"(TransformerChecksMixin, TransformerMixin, BaseEstimator)",,
scverse_scanpy_1.10.1,rapids.py,python,"_Algorithm = Literal[""rbc"", ""brute"", ""ivfflat"", ""ivfpq""]",constant,"_Algorithm = Literal[""rbc"", ""brute"", ""ivfflat"", ""ivfpq""]",_Algorithm,"Literal[""rbc"", ""brute"", ""ivfflat"", ""ivfpq""]","Constant: _Algorithm = Literal[""rbc"", ""brute"", ""ivfflat"", ""ivfpq""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,"_Metric = Literal[
    ""l1"",
    ""cityblock"",
    ""taxicab"",
    ""manhattan"",
    ""euclidean"",
    ""l2"",
    ""braycurtis"",
    ""canberra"",
    ""minkowski"",
    ""chebyshev"",
    ""jensenshannon"",
    ""cosine"",
    ""correlation"",
]",constant,"_Metric = Literal[
    ""l1"",
    ""cityblock"",
    ""taxicab"",
    ""manhattan"",
    ""euclidean"",
    ""l2"",
    ""braycurtis"",
    ""canberra"",
    ""minkowski"",
    ""chebyshev"",
    ""jensenshannon"",
    ""cosine"",
    ""correlation"",
]",_Metric,"Literal[
    ""l1"",
    ""cityblock"",
    ""taxicab"",
    ""manhattan"",
    ""euclidean"",
    ""l2"",
    ""braycurtis"",
    ""canberra"",
    ""minkowski"",
    ""chebyshev"",
    ""jensenshannon"",
    ""cosine"",
    ""correlation"",
]","Constant: _Metric = Literal[
    ""l1"",
    ""cityblock"",
    ""taxicab"",
    ""manhattan"",
    ""euclidean"",
    ""l2"",
    ""braycurtis"",
    ""canberra"",
    ""minkowski"",
    ""chebyshev"",
    ""jensenshannon"",
    ""cosine"",
    ""correlation"",
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,Any,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,BaseEstimator from sklearn.base,local_import,,,,Import: BaseEstimator from sklearn.base,scverse,scanpy,1.10.1,"from sklearn.base import BaseEstimator, TransformerMixin",sklearn.base,BaseEstimator,,,sklearn.base,,,,,,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,TransformerMixin from sklearn.base,local_import,,,,Import: TransformerMixin from sklearn.base,scverse,scanpy,1.10.1,"from sklearn.base import BaseEstimator, TransformerMixin",sklearn.base,TransformerMixin,,,sklearn.base,,,,,,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,NotFittedError from sklearn.exceptions,local_import,,,,Import: NotFittedError from sklearn.exceptions,scverse,scanpy,1.10.1,from sklearn.exceptions import NotFittedError,sklearn.exceptions,NotFittedError,,,sklearn.exceptions,,,,,,,,,,,,
scverse_scanpy_1.10.1,rapids.py,python,check_is_fitted from sklearn.utils.validation,local_import,,,,Import: check_is_fitted from sklearn.utils.validation,scverse,scanpy,1.10.1,from sklearn.utils.validation import check_is_fitted,sklearn.utils.validation,check_is_fitted,,,sklearn.utils.validation,,,,,,,,,,,,
,rapids.py,python,,,,,,File: scanpy\neighbors\_backends,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,rapids.py,python,,,,,,Directory: scanpy\neighbors\_backends\rapids.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,"TransformerChecksMixin._transform_checks(self, X, *fitted_props, **check_params)",class_method,,,,"Class method: TransformerChecksMixin._transform_checks(self, X, *fitted_props, **check_params)",scverse,scanpy,1.10.1,,,,,,,TransformerChecksMixin,_transform_checks,"(self, X, *fitted_props, **check_params)",,,,,,,,,
scverse_scanpy_1.10.1,_common.py,python,TransformerChecksMixin,class,,,,Class: TransformerChecksMixin,scverse,scanpy,1.10.1,,,,,,,TransformerChecksMixin,,,,,,,,,,,
,_common.py,python,,,,,,File: scanpy\neighbors\_backends,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_common.py,python,,,,,,Directory: scanpy\neighbors\_backends\_common.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,"_plot_color_cycle(clists: Mapping[str, Sequence[str]])",function,,,,"Function: _plot_color_cycle(clists: Mapping[str, Sequence[str]])",scverse,scanpy,1.10.1,,,,_plot_color_cycle,"(clists: Mapping[str, Sequence[str]])",,,,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,"vega_10 = list(map(colors.to_hex, cm.tab10.colors))",constant,"vega_10 = list(map(colors.to_hex, cm.tab10.colors))",vega_10,"list(map(colors.to_hex, cm.tab10.colors))","Constant: vega_10 = list(map(colors.to_hex, cm.tab10.colors))",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,vega_10_scanpy = vega_10.copy(),constant,vega_10_scanpy = vega_10.copy(),vega_10_scanpy,vega_10.copy(),Constant: vega_10_scanpy = vega_10.copy(),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,"vega_20 = list(map(colors.to_hex, cm.tab20.colors))",constant,"vega_20 = list(map(colors.to_hex, cm.tab20.colors))",vega_20,"list(map(colors.to_hex, cm.tab20.colors))","Constant: vega_20 = list(map(colors.to_hex, cm.tab20.colors))",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,"vega_20_scanpy = [
    # dark without grey:
    *vega_20[0:14:2],
    *vega_20[16::2],
    # light without grey:
    *vega_20[1:15:2],
    *vega_20[17::2],
    # manual additions:
    ""#ad494a"",
    ""#8c6d31"",
]",constant,"vega_20_scanpy = [
    # dark without grey:
    *vega_20[0:14:2],
    *vega_20[16::2],
    # light without grey:
    *vega_20[1:15:2],
    *vega_20[17::2],
    # manual additions:
    ""#ad494a"",
    ""#8c6d31"",
]",vega_20_scanpy,"[
    # dark without grey:
    *vega_20[0:14:2],
    *vega_20[16::2],
    # light without grey:
    *vega_20[1:15:2],
    *vega_20[17::2],
    # manual additions:
    ""#ad494a"",
    ""#8c6d31"",
]","Constant: vega_20_scanpy = [
    # dark without grey:
    *vega_20[0:14:2],
    *vega_20[16::2],
    # light without grey:
    *vega_20[1:15:2],
    *vega_20[17::2],
    # manual additions:
    ""#ad494a"",
    ""#8c6d31"",
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,default_20 = vega_20_scanpy,constant,default_20 = vega_20_scanpy,default_20,vega_20_scanpy,Constant: default_20 = vega_20_scanpy,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,"zeileis_28 = [
    ""#023fa5"",
    ""#7d87b9"",
    ""#bec1d4"",
    ""#d6bcc0"",
    ""#bb7784"",
    ""#8e063b"",
    ""#4a6fe3"",
    ""#8595e1"",
    ""#b5bbe3"",
    ""#e6afb9"",
    ""#e07b91"",
    ""#d33f6a"",
    ""#11c638"",
    ""#8dd593"",
    ""#c6dec7"",
    ""#ead3c6"",
    ""#f0b98d"",
    ""#ef9708"",
    ""#0fcfc0"",
    ""#9cded6"",
    ""#d5eae7"",
    ""#f3e1eb"",
    ""#f6c4e1"",
    ""#f79cd4"",
    # these last ones were added:
    ""#7f7f7f"",
    ""#c7c7c7"",
    ""#1CE6FF"",
    ""#336600"",
]",constant,"zeileis_28 = [
    ""#023fa5"",
    ""#7d87b9"",
    ""#bec1d4"",
    ""#d6bcc0"",
    ""#bb7784"",
    ""#8e063b"",
    ""#4a6fe3"",
    ""#8595e1"",
    ""#b5bbe3"",
    ""#e6afb9"",
    ""#e07b91"",
    ""#d33f6a"",
    ""#11c638"",
    ""#8dd593"",
    ""#c6dec7"",
    ""#ead3c6"",
    ""#f0b98d"",
    ""#ef9708"",
    ""#0fcfc0"",
    ""#9cded6"",
    ""#d5eae7"",
    ""#f3e1eb"",
    ""#f6c4e1"",
    ""#f79cd4"",
    # these last ones were added:
    ""#7f7f7f"",
    ""#c7c7c7"",
    ""#1CE6FF"",
    ""#336600"",
]",zeileis_28,"[
    ""#023fa5"",
    ""#7d87b9"",
    ""#bec1d4"",
    ""#d6bcc0"",
    ""#bb7784"",
    ""#8e063b"",
    ""#4a6fe3"",
    ""#8595e1"",
    ""#b5bbe3"",
    ""#e6afb9"",
    ""#e07b91"",
    ""#d33f6a"",
    ""#11c638"",
    ""#8dd593"",
    ""#c6dec7"",
    ""#ead3c6"",
    ""#f0b98d"",
    ""#ef9708"",
    ""#0fcfc0"",
    ""#9cded6"",
    ""#d5eae7"",
    ""#f3e1eb"",
    ""#f6c4e1"",
    ""#f79cd4"",
    # these last ones were added:
    ""#7f7f7f"",
    ""#c7c7c7"",
    ""#1CE6FF"",
    ""#336600"",
]","Constant: zeileis_28 = [
    ""#023fa5"",
    ""#7d87b9"",
    ""#bec1d4"",
    ""#d6bcc0"",
    ""#bb7784"",
    ""#8e063b"",
    ""#4a6fe3"",
    ""#8595e1"",
    ""#b5bbe3"",
    ""#e6afb9"",
    ""#e07b91"",
    ""#d33f6a"",
    ""#11c638"",
    ""#8dd593"",
    ""#c6dec7"",
    ""#ead3c6"",
    ""#f0b98d"",
    ""#ef9708"",
    ""#0fcfc0"",
    ""#9cded6"",
    ""#d5eae7"",
    ""#f3e1eb"",
    ""#f6c4e1"",
    ""#f79cd4"",
    # these last ones were added:
    ""#7f7f7f"",
    ""#c7c7c7"",
    ""#1CE6FF"",
    ""#336600"",
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,default_28 = zeileis_28,constant,default_28 = zeileis_28,default_28,zeileis_28,Constant: default_28 = zeileis_28,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,"godsnot_102 = [
    # ""#000000"",  # remove the black, as often, we have black colored annotation
    ""#FFFF00"",
    ""#1CE6FF"",
    ""#FF34FF"",
    ""#FF4A46"",
    ""#008941"",
    ""#006FA6"",
    ""#A30059"",
    ""#FFDBE5"",
    ""#7A4900"",
    ""#0000A6"",
    ""#63FFAC"",
    ""#B79762"",
    ""#004D43"",
    ""#8FB0FF"",
    ""#997D87"",
    ""#5A0007"",
    ""#809693"",
    ""#6A3A4C"",
    ""#1B4400"",
    ""#4FC601"",
    ""#3B5DFF"",
    ""#4A3B53"",
    ""#FF2F80"",
    ""#61615A"",
    ""#BA0900"",
    ""#6B7900"",
    ""#00C2A0"",
    ""#FFAA92"",
    ""#FF90C9"",
    ""#B903AA"",
    ""#D16100"",
    ""#DDEFFF"",
    ""#000035"",
    ""#7B4F4B"",
    ""#A1C299"",
    ""#300018"",
    ""#0AA6D8"",
    ""#013349"",
    ""#00846F"",
    ""#372101"",
    ""#FFB500"",
    ""#C2FFED"",
    ""#A079BF"",
    ""#CC0744"",
    ""#C0B9B2"",
    ""#C2FF99"",
    ""#001E09"",
    ""#00489C"",
    ""#6F0062"",
    ""#0CBD66"",
    ""#EEC3FF"",
    ""#456D75"",
    ""#B77B68"",
    ""#7A87A1"",
    ""#788D66"",
    ""#885578"",
    ""#FAD09F"",
    ""#FF8A9A"",
    ""#D157A0"",
    ""#BEC459"",
    ""#456648"",
    ""#0086ED"",
    ""#886F4C"",
    ""#34362D"",
    ""#B4A8BD"",
    ""#00A6AA"",
    ""#452C2C"",
    ""#636375"",
    ""#A3C8C9"",
    ""#FF913F"",
    ""#938A81"",
    ""#575329"",
    ""#00FECF"",
    ""#B05B6F"",
    ""#8CD0FF"",
    ""#3B9700"",
    ""#04F757"",
    ""#C8A1A1"",
    ""#1E6E00"",
    ""#7900D7"",
    ""#A77500"",
    ""#6367A9"",
    ""#A05837"",
    ""#6B002C"",
    ""#772600"",
    ""#D790FF"",
    ""#9B9700"",
    ""#549E79"",
    ""#FFF69F"",
    ""#201625"",
    ""#72418F"",
    ""#BC23FF"",
    ""#99ADC0"",
    ""#3A2465"",
    ""#922329"",
    ""#5B4534"",
    ""#FDE8DC"",
    ""#404E55"",
    ""#0089A3"",
    ""#CB7E98"",
    ""#A4E804"",
    ""#324E72"",
]",constant,"godsnot_102 = [
    # ""#000000"",  # remove the black, as often, we have black colored annotation
    ""#FFFF00"",
    ""#1CE6FF"",
    ""#FF34FF"",
    ""#FF4A46"",
    ""#008941"",
    ""#006FA6"",
    ""#A30059"",
    ""#FFDBE5"",
    ""#7A4900"",
    ""#0000A6"",
    ""#63FFAC"",
    ""#B79762"",
    ""#004D43"",
    ""#8FB0FF"",
    ""#997D87"",
    ""#5A0007"",
    ""#809693"",
    ""#6A3A4C"",
    ""#1B4400"",
    ""#4FC601"",
    ""#3B5DFF"",
    ""#4A3B53"",
    ""#FF2F80"",
    ""#61615A"",
    ""#BA0900"",
    ""#6B7900"",
    ""#00C2A0"",
    ""#FFAA92"",
    ""#FF90C9"",
    ""#B903AA"",
    ""#D16100"",
    ""#DDEFFF"",
    ""#000035"",
    ""#7B4F4B"",
    ""#A1C299"",
    ""#300018"",
    ""#0AA6D8"",
    ""#013349"",
    ""#00846F"",
    ""#372101"",
    ""#FFB500"",
    ""#C2FFED"",
    ""#A079BF"",
    ""#CC0744"",
    ""#C0B9B2"",
    ""#C2FF99"",
    ""#001E09"",
    ""#00489C"",
    ""#6F0062"",
    ""#0CBD66"",
    ""#EEC3FF"",
    ""#456D75"",
    ""#B77B68"",
    ""#7A87A1"",
    ""#788D66"",
    ""#885578"",
    ""#FAD09F"",
    ""#FF8A9A"",
    ""#D157A0"",
    ""#BEC459"",
    ""#456648"",
    ""#0086ED"",
    ""#886F4C"",
    ""#34362D"",
    ""#B4A8BD"",
    ""#00A6AA"",
    ""#452C2C"",
    ""#636375"",
    ""#A3C8C9"",
    ""#FF913F"",
    ""#938A81"",
    ""#575329"",
    ""#00FECF"",
    ""#B05B6F"",
    ""#8CD0FF"",
    ""#3B9700"",
    ""#04F757"",
    ""#C8A1A1"",
    ""#1E6E00"",
    ""#7900D7"",
    ""#A77500"",
    ""#6367A9"",
    ""#A05837"",
    ""#6B002C"",
    ""#772600"",
    ""#D790FF"",
    ""#9B9700"",
    ""#549E79"",
    ""#FFF69F"",
    ""#201625"",
    ""#72418F"",
    ""#BC23FF"",
    ""#99ADC0"",
    ""#3A2465"",
    ""#922329"",
    ""#5B4534"",
    ""#FDE8DC"",
    ""#404E55"",
    ""#0089A3"",
    ""#CB7E98"",
    ""#A4E804"",
    ""#324E72"",
]",godsnot_102,"[
    # ""#000000"",  # remove the black, as often, we have black colored annotation
    ""#FFFF00"",
    ""#1CE6FF"",
    ""#FF34FF"",
    ""#FF4A46"",
    ""#008941"",
    ""#006FA6"",
    ""#A30059"",
    ""#FFDBE5"",
    ""#7A4900"",
    ""#0000A6"",
    ""#63FFAC"",
    ""#B79762"",
    ""#004D43"",
    ""#8FB0FF"",
    ""#997D87"",
    ""#5A0007"",
    ""#809693"",
    ""#6A3A4C"",
    ""#1B4400"",
    ""#4FC601"",
    ""#3B5DFF"",
    ""#4A3B53"",
    ""#FF2F80"",
    ""#61615A"",
    ""#BA0900"",
    ""#6B7900"",
    ""#00C2A0"",
    ""#FFAA92"",
    ""#FF90C9"",
    ""#B903AA"",
    ""#D16100"",
    ""#DDEFFF"",
    ""#000035"",
    ""#7B4F4B"",
    ""#A1C299"",
    ""#300018"",
    ""#0AA6D8"",
    ""#013349"",
    ""#00846F"",
    ""#372101"",
    ""#FFB500"",
    ""#C2FFED"",
    ""#A079BF"",
    ""#CC0744"",
    ""#C0B9B2"",
    ""#C2FF99"",
    ""#001E09"",
    ""#00489C"",
    ""#6F0062"",
    ""#0CBD66"",
    ""#EEC3FF"",
    ""#456D75"",
    ""#B77B68"",
    ""#7A87A1"",
    ""#788D66"",
    ""#885578"",
    ""#FAD09F"",
    ""#FF8A9A"",
    ""#D157A0"",
    ""#BEC459"",
    ""#456648"",
    ""#0086ED"",
    ""#886F4C"",
    ""#34362D"",
    ""#B4A8BD"",
    ""#00A6AA"",
    ""#452C2C"",
    ""#636375"",
    ""#A3C8C9"",
    ""#FF913F"",
    ""#938A81"",
    ""#575329"",
    ""#00FECF"",
    ""#B05B6F"",
    ""#8CD0FF"",
    ""#3B9700"",
    ""#04F757"",
    ""#C8A1A1"",
    ""#1E6E00"",
    ""#7900D7"",
    ""#A77500"",
    ""#6367A9"",
    ""#A05837"",
    ""#6B002C"",
    ""#772600"",
    ""#D790FF"",
    ""#9B9700"",
    ""#549E79"",
    ""#FFF69F"",
    ""#201625"",
    ""#72418F"",
    ""#BC23FF"",
    ""#99ADC0"",
    ""#3A2465"",
    ""#922329"",
    ""#5B4534"",
    ""#FDE8DC"",
    ""#404E55"",
    ""#0089A3"",
    ""#CB7E98"",
    ""#A4E804"",
    ""#324E72"",
]","Constant: godsnot_102 = [
    # ""#000000"",  # remove the black, as often, we have black colored annotation
    ""#FFFF00"",
    ""#1CE6FF"",
    ""#FF34FF"",
    ""#FF4A46"",
    ""#008941"",
    ""#006FA6"",
    ""#A30059"",
    ""#FFDBE5"",
    ""#7A4900"",
    ""#0000A6"",
    ""#63FFAC"",
    ""#B79762"",
    ""#004D43"",
    ""#8FB0FF"",
    ""#997D87"",
    ""#5A0007"",
    ""#809693"",
    ""#6A3A4C"",
    ""#1B4400"",
    ""#4FC601"",
    ""#3B5DFF"",
    ""#4A3B53"",
    ""#FF2F80"",
    ""#61615A"",
    ""#BA0900"",
    ""#6B7900"",
    ""#00C2A0"",
    ""#FFAA92"",
    ""#FF90C9"",
    ""#B903AA"",
    ""#D16100"",
    ""#DDEFFF"",
    ""#000035"",
    ""#7B4F4B"",
    ""#A1C299"",
    ""#300018"",
    ""#0AA6D8"",
    ""#013349"",
    ""#00846F"",
    ""#372101"",
    ""#FFB500"",
    ""#C2FFED"",
    ""#A079BF"",
    ""#CC0744"",
    ""#C0B9B2"",
    ""#C2FF99"",
    ""#001E09"",
    ""#00489C"",
    ""#6F0062"",
    ""#0CBD66"",
    ""#EEC3FF"",
    ""#456D75"",
    ""#B77B68"",
    ""#7A87A1"",
    ""#788D66"",
    ""#885578"",
    ""#FAD09F"",
    ""#FF8A9A"",
    ""#D157A0"",
    ""#BEC459"",
    ""#456648"",
    ""#0086ED"",
    ""#886F4C"",
    ""#34362D"",
    ""#B4A8BD"",
    ""#00A6AA"",
    ""#452C2C"",
    ""#636375"",
    ""#A3C8C9"",
    ""#FF913F"",
    ""#938A81"",
    ""#575329"",
    ""#00FECF"",
    ""#B05B6F"",
    ""#8CD0FF"",
    ""#3B9700"",
    ""#04F757"",
    ""#C8A1A1"",
    ""#1E6E00"",
    ""#7900D7"",
    ""#A77500"",
    ""#6367A9"",
    ""#A05837"",
    ""#6B002C"",
    ""#772600"",
    ""#D790FF"",
    ""#9B9700"",
    ""#549E79"",
    ""#FFF69F"",
    ""#201625"",
    ""#72418F"",
    ""#BC23FF"",
    ""#99ADC0"",
    ""#3A2465"",
    ""#922329"",
    ""#5B4534"",
    ""#FDE8DC"",
    ""#404E55"",
    ""#0089A3"",
    ""#CB7E98"",
    ""#A4E804"",
    ""#324E72"",
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,default_102 = godsnot_102,constant,default_102 = godsnot_102,default_102,godsnot_102,Constant: default_102 = godsnot_102,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,cm from matplotlib,import,,,,Import: cm from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import cm, colors",matplotlib,cm,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,palettes.py,python,colors from matplotlib,import,,,,Import: colors from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import cm, colors",matplotlib,colors,,,,,,,,,,,,,,,
,palettes.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,palettes.py,python,,,,,,Directory: scanpy\plotting\palettes.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_scatter_obs(
    *,
    adata: AnnData,
    x=None,
    y=None,
    color=None,
    use_raw=None,
    layers=None,
    sort_order=True,
    alpha=None,
    basis=None,
    groups=None,
    components=None,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    legend_loc=""right margin"",
    legend_fontsize=None,
    legend_fontweight=None,
    legend_fontoutline=None,
    color_map=None,
    palette=None,
    frameon=None,
    right_margin=None,
    left_margin=None,
    size=None,
    marker=""."",
    title=None,
    show=None,
    save=None,
    ax=None,
) -> Axes | list[Axes] | None",function,,,,"Function: _scatter_obs(
    *,
    adata: AnnData,
    x=None,
    y=None,
    color=None,
    use_raw=None,
    layers=None,
    sort_order=True,
    alpha=None,
    basis=None,
    groups=None,
    components=None,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    legend_loc=""right margin"",
    legend_fontsize=None,
    legend_fontweight=None,
    legend_fontoutline=None,
    color_map=None,
    palette=None,
    frameon=None,
    right_margin=None,
    left_margin=None,
    size=None,
    marker=""."",
    title=None,
    show=None,
    save=None,
    ax=None,
) -> Axes | list[Axes] | None",scverse,scanpy,1.10.1,,,,_scatter_obs,"(
    *,
    adata: AnnData,
    x=None,
    y=None,
    color=None,
    use_raw=None,
    layers=None,
    sort_order=True,
    alpha=None,
    basis=None,
    groups=None,
    components=None,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    legend_loc=""right margin"",
    legend_fontsize=None,
    legend_fontweight=None,
    legend_fontoutline=None,
    color_map=None,
    palette=None,
    frameon=None,
    right_margin=None,
    left_margin=None,
    size=None,
    marker=""."",
    title=None,
    show=None,
    save=None,
    ax=None,
)",,,,,,,,Axes | list[Axes] | None,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_prepare_dataframe(
    adata: AnnData,
    var_names: _VarNames | Mapping[str, _VarNames],
    groupby: str | Sequence[str] | None = None,
    *,
    use_raw: bool | None = None,
    log: bool = False,
    num_categories: int = 7,
    layer: str | None = None,
    gene_symbols: str | None = None,
) -> tuple[Sequence[str], pd.DataFrame]",function,,,,"Function: _prepare_dataframe(
    adata: AnnData,
    var_names: _VarNames | Mapping[str, _VarNames],
    groupby: str | Sequence[str] | None = None,
    *,
    use_raw: bool | None = None,
    log: bool = False,
    num_categories: int = 7,
    layer: str | None = None,
    gene_symbols: str | None = None,
) -> tuple[Sequence[str], pd.DataFrame]",scverse,scanpy,1.10.1,,,,_prepare_dataframe,"(
    adata: AnnData,
    var_names: _VarNames | Mapping[str, _VarNames],
    groupby: str | Sequence[str] | None = None,
    *,
    use_raw: bool | None = None,
    log: bool = False,
    num_categories: int = 7,
    layer: str | None = None,
    gene_symbols: str | None = None,
)",,,,,,,,"tuple[Sequence[str], pd.DataFrame]",,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_plot_gene_groups_brackets(
    gene_groups_ax: Axes,
    *,
    group_positions: Iterable[tuple[int, int]],
    group_labels: Sequence[str],
    left_adjustment: float = -0.3,
    right_adjustment: float = 0.3,
    rotation: float | None = None,
    orientation: Literal[""top"", ""right""] = ""top"",
)",function,,,,"Function: _plot_gene_groups_brackets(
    gene_groups_ax: Axes,
    *,
    group_positions: Iterable[tuple[int, int]],
    group_labels: Sequence[str],
    left_adjustment: float = -0.3,
    right_adjustment: float = 0.3,
    rotation: float | None = None,
    orientation: Literal[""top"", ""right""] = ""top"",
)",scverse,scanpy,1.10.1,,,,_plot_gene_groups_brackets,"(
    gene_groups_ax: Axes,
    *,
    group_positions: Iterable[tuple[int, int]],
    group_labels: Sequence[str],
    left_adjustment: float = -0.3,
    right_adjustment: float = 0.3,
    rotation: float | None = None,
    orientation: Literal[""top"", ""right""] = ""top"",
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_reorder_categories_after_dendrogram(
    adata: AnnData,
    groupby,
    dendrogram,
    *,
    var_names=None,
    var_group_labels=None,
    var_group_positions=None,
    categories=None,
)",function,,,,"Function: _reorder_categories_after_dendrogram(
    adata: AnnData,
    groupby,
    dendrogram,
    *,
    var_names=None,
    var_group_labels=None,
    var_group_positions=None,
    categories=None,
)",scverse,scanpy,1.10.1,,,,_reorder_categories_after_dendrogram,"(
    adata: AnnData,
    groupby,
    dendrogram,
    *,
    var_names=None,
    var_group_labels=None,
    var_group_positions=None,
    categories=None,
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,_format_first_three_categories(categories),function,,,,Function: _format_first_three_categories(categories),scverse,scanpy,1.10.1,,,,_format_first_three_categories,(categories),,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_get_dendrogram_key(adata, dendrogram_key, groupby)",function,,,,"Function: _get_dendrogram_key(adata, dendrogram_key, groupby)",scverse,scanpy,1.10.1,,,,_get_dendrogram_key,"(adata, dendrogram_key, groupby)",,,,,,,,,"# the `dendrogram_key` can be a bool an NoneType or the name of the",,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_get_dendrogram_key(adata, dendrogram_key, groupby)",function,,,,"Function: _get_dendrogram_key(adata, dendrogram_key, groupby)",scverse,scanpy,1.10.1,,,,_get_dendrogram_key,"(adata, dendrogram_key, groupby)",,,,,,,,,"# dendrogram key. By default the name of the dendrogram key is 'dendrogram'",,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_plot_dendrogram(
    dendro_ax: Axes,
    adata: AnnData,
    groupby: str,
    *,
    dendrogram_key: str | None = None,
    orientation: Literal[""top"", ""bottom"", ""left"", ""right""] = ""right"",
    remove_labels: bool = True,
    ticks: Collection[float] | None = None,
)",function,,,,"Function: _plot_dendrogram(
    dendro_ax: Axes,
    adata: AnnData,
    groupby: str,
    *,
    dendrogram_key: str | None = None,
    orientation: Literal[""top"", ""bottom"", ""left"", ""right""] = ""right"",
    remove_labels: bool = True,
    ticks: Collection[float] | None = None,
)",scverse,scanpy,1.10.1,,,,_plot_dendrogram,"(
    dendro_ax: Axes,
    adata: AnnData,
    groupby: str,
    *,
    dendrogram_key: str | None = None,
    orientation: Literal[""top"", ""bottom"", ""left"", ""right""] = ""right"",
    remove_labels: bool = True,
    ticks: Collection[float] | None = None,
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_plot_categories_as_colorblocks(
    groupby_ax: Axes,
    obs_tidy: pd.DataFrame,
    colors=None,
    orientation: Literal[""top"", ""bottom"", ""left"", ""right""] = ""left"",
    cmap_name: str = ""tab20"",
)",function,,,,"Function: _plot_categories_as_colorblocks(
    groupby_ax: Axes,
    obs_tidy: pd.DataFrame,
    colors=None,
    orientation: Literal[""top"", ""bottom"", ""left"", ""right""] = ""left"",
    cmap_name: str = ""tab20"",
)",scverse,scanpy,1.10.1,,,,_plot_categories_as_colorblocks,"(
    groupby_ax: Axes,
    obs_tidy: pd.DataFrame,
    colors=None,
    orientation: Literal[""top"", ""bottom"", ""left"", ""right""] = ""left"",
    cmap_name: str = ""tab20"",
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_plot_colorbar(mappable, fig, subplot_spec, max_cbar_height: float = 4.0)",function,,,,"Function: _plot_colorbar(mappable, fig, subplot_spec, max_cbar_height: float = 4.0)",scverse,scanpy,1.10.1,,,,_plot_colorbar,"(mappable, fig, subplot_spec, max_cbar_height: float = 4.0)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_check_var_names_type(var_names, var_group_labels, var_group_positions)",function,,,,"Function: _check_var_names_type(var_names, var_group_labels, var_group_positions)",scverse,scanpy,1.10.1,,,,_check_var_names_type,"(var_names, var_group_labels, var_group_positions)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"VALID_LEGENDLOCS = {
    ""none"",
    ""right margin"",
    ""on data"",
    ""on data export"",
    ""best"",
    ""upper right"",
    ""upper left"",
    ""lower left"",
    ""lower right"",
    ""right"",
    ""center left"",
    ""center right"",
    ""lower center"",
    ""upper center"",
    ""center"",
}",constant,"VALID_LEGENDLOCS = {
    ""none"",
    ""right margin"",
    ""on data"",
    ""on data export"",
    ""best"",
    ""upper right"",
    ""upper left"",
    ""lower left"",
    ""lower right"",
    ""right"",
    ""center left"",
    ""center right"",
    ""lower center"",
    ""upper center"",
    ""center"",
}",VALID_LEGENDLOCS,"{
    ""none"",
    ""right margin"",
    ""on data"",
    ""on data export"",
    ""best"",
    ""upper right"",
    ""upper left"",
    ""lower left"",
    ""lower right"",
    ""right"",
    ""center left"",
    ""center right"",
    ""lower center"",
    ""upper center"",
    ""center"",
}","Constant: VALID_LEGENDLOCS = {
    ""none"",
    ""right margin"",
    ""on data"",
    ""on data export"",
    ""best"",
    ""upper right"",
    ""upper left"",
    ""lower left"",
    ""lower right"",
    ""right"",
    ""center left"",
    ""center right"",
    ""lower center"",
    ""upper center"",
    ""center"",
}",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_Basis = Literal[""pca"", ""tsne"", ""umap"", ""diffmap"", ""draw_graph_fr""]",constant,"_Basis = Literal[""pca"", ""tsne"", ""umap"", ""diffmap"", ""draw_graph_fr""]",_Basis,"Literal[""pca"", ""tsne"", ""umap"", ""diffmap"", ""draw_graph_fr""]","Constant: _Basis = Literal[""pca"", ""tsne"", ""umap"", ""diffmap"", ""draw_graph_fr""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,"_VarNames = Union[str, Sequence[str]]",constant,"_VarNames = Union[str, Sequence[str]]",_VarNames,"Union[str, Sequence[str]]","Constant: _VarNames = Union[str, Sequence[str]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,collections.abc,import,,,,Import: collections.abc,scverse,scanpy,1.10.1,import collections.abc as cabc,,collections.abc,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,OrderedDict from collections,import,,,,Import: OrderedDict from collections,scverse,scanpy,1.10.1,from collections import OrderedDict,collections,OrderedDict,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,product from itertools,import,,,,Import: product from itertools,scverse,scanpy,1.10.1,from itertools import product,itertools,product,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, Union",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, Union",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,Union from typing,import,,,,Import: Union from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, Union",typing,Union,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,gridspec from matplotlib,import,,,,Import: gridspec from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import gridspec, patheffects, rcParams",matplotlib,gridspec,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,patheffects from matplotlib,import,,,,Import: patheffects from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import gridspec, patheffects, rcParams",matplotlib,patheffects,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,rcParams from matplotlib,import,,,,Import: rcParams from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import gridspec, patheffects, rcParams",matplotlib,rcParams,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,matplotlib,pyplot,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,Collection from collections.abc,local_import,,,,Import: Collection from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Collection, Iterable, Mapping, Sequence",collections.abc,Collection,,,collections.abc,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,Iterable from collections.abc,local_import,,,,Import: Iterable from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Collection, Iterable, Mapping, Sequence",collections.abc,Iterable,,,collections.abc,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,Mapping from collections.abc,local_import,,,,Import: Mapping from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Collection, Iterable, Mapping, Sequence",collections.abc,Mapping,,,collections.abc,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,Sequence from collections.abc,local_import,,,,Import: Sequence from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Collection, Iterable, Mapping, Sequence",collections.abc,Sequence,,,collections.abc,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,Colormap from matplotlib.colors,local_import,,,,Import: Colormap from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Colormap, ListedColormap, Normalize, is_color_like",matplotlib.colors,Colormap,,,matplotlib.colors,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,ListedColormap from matplotlib.colors,local_import,,,,Import: ListedColormap from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Colormap, ListedColormap, Normalize, is_color_like",matplotlib.colors,ListedColormap,,,matplotlib.colors,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,Normalize from matplotlib.colors,local_import,,,,Import: Normalize from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Colormap, ListedColormap, Normalize, is_color_like",matplotlib.colors,Normalize,,,matplotlib.colors,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,is_color_like from matplotlib.colors,local_import,,,,Import: is_color_like from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Colormap, ListedColormap, Normalize, is_color_like",matplotlib.colors,is_color_like,,,matplotlib.colors,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,CategoricalDtype from pandas.api.types,local_import,,,,Import: CategoricalDtype from pandas.api.types,scverse,scanpy,1.10.1,"from pandas.api.types import CategoricalDtype, is_numeric_dtype",pandas.api.types,CategoricalDtype,,,pandas.api.types,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,is_numeric_dtype from pandas.api.types,local_import,,,,Import: is_numeric_dtype from pandas.api.types,scverse,scanpy,1.10.1,"from pandas.api.types import CategoricalDtype, is_numeric_dtype",pandas.api.types,is_numeric_dtype,,,pandas.api.types,,,,,,,,,,,,
scverse_scanpy_1.10.1,_anndata.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import issparse,scipy.sparse,issparse,,,scipy.sparse,,,,,,,,,,,,
,_anndata.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_anndata.py,python,,,,,,Directory: scanpy\plotting\_anndata.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot.DEFAULT_SAVE_PREFIX = ""baseplot_""",class_field,,,,"Class field: BasePlot.DEFAULT_SAVE_PREFIX = ""baseplot_""",scverse,scanpy,1.10.1,,,,,,,BasePlot,,,"DEFAULT_SAVE_PREFIX = ""baseplot_""",,,,,DEFAULT_SAVE_PREFIX,,"""baseplot_""",
scverse_scanpy_1.10.1,_baseplot_class.py,python,BasePlot.MIN_FIGURE_HEIGHT = 2.5,class_field,,,,Class field: BasePlot.MIN_FIGURE_HEIGHT = 2.5,scverse,scanpy,1.10.1,,,,,,,BasePlot,,,MIN_FIGURE_HEIGHT = 2.5,,,,,MIN_FIGURE_HEIGHT,,2.5,
scverse_scanpy_1.10.1,_baseplot_class.py,python,BasePlot.DEFAULT_CATEGORY_HEIGHT = 0.35,class_field,,,,Class field: BasePlot.DEFAULT_CATEGORY_HEIGHT = 0.35,scverse,scanpy,1.10.1,,,,,,,BasePlot,,,DEFAULT_CATEGORY_HEIGHT = 0.35,,,,,DEFAULT_CATEGORY_HEIGHT,,0.35,
scverse_scanpy_1.10.1,_baseplot_class.py,python,BasePlot.DEFAULT_CATEGORY_WIDTH = 0.37,class_field,,,,Class field: BasePlot.DEFAULT_CATEGORY_WIDTH = 0.37,scverse,scanpy,1.10.1,,,,,,,BasePlot,,,DEFAULT_CATEGORY_WIDTH = 0.37,,,,,DEFAULT_CATEGORY_WIDTH,,0.37,
scverse_scanpy_1.10.1,_baseplot_class.py,python,BasePlot.DEFAULT_WSPACE = 0,class_field,,,,Class field: BasePlot.DEFAULT_WSPACE = 0,scverse,scanpy,1.10.1,,,,,,,BasePlot,,,DEFAULT_WSPACE = 0,,,,,DEFAULT_WSPACE,,0,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot.DEFAULT_COLORMAP = ""winter""",class_field,,,,"Class field: BasePlot.DEFAULT_COLORMAP = ""winter""",scverse,scanpy,1.10.1,,,,,,,BasePlot,,,"DEFAULT_COLORMAP = ""winter""",,,,,DEFAULT_COLORMAP,,"""winter""",
scverse_scanpy_1.10.1,_baseplot_class.py,python,BasePlot.DEFAULT_LEGENDS_WIDTH = 1.5,class_field,,,,Class field: BasePlot.DEFAULT_LEGENDS_WIDTH = 1.5,scverse,scanpy,1.10.1,,,,,,,BasePlot,,,DEFAULT_LEGENDS_WIDTH = 1.5,,,,,DEFAULT_LEGENDS_WIDTH,,1.5,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot.DEFAULT_COLOR_LEGEND_TITLE = ""Expression\nlevel in group""",class_field,,,,"Class field: BasePlot.DEFAULT_COLOR_LEGEND_TITLE = ""Expression\nlevel in group""",scverse,scanpy,1.10.1,,,,,,,BasePlot,,,"DEFAULT_COLOR_LEGEND_TITLE = ""Expression\nlevel in group""",,,,,DEFAULT_COLOR_LEGEND_TITLE,,"""Expression\nlevel in group""",
scverse_scanpy_1.10.1,_baseplot_class.py,python,BasePlot.MAX_NUM_CATEGORIES = 500,class_field,,,,Class field: BasePlot.MAX_NUM_CATEGORIES = 500,scverse,scanpy,1.10.1,,,,,,,BasePlot,,,MAX_NUM_CATEGORIES = 500,,,,,MAX_NUM_CATEGORIES,,500,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"[old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""ax"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )] BasePlot.__init__(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        ax: _AxesSubplot | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",class_method,,,,"Class method: [old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""ax"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )] BasePlot.__init__(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        ax: _AxesSubplot | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",scverse,scanpy,1.10.1,,,,,,,BasePlot,__init__,"(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        ax: _AxesSubplot | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",,,,,,,,,"old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""ax"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )"
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot.swap_axes(self, swap_axes: bool | None = True) -> BasePlot",class_method,,,,"Class method: BasePlot.swap_axes(self, swap_axes: bool | None = True) -> BasePlot",scverse,scanpy,1.10.1,,,,,,,BasePlot,swap_axes,"(self, swap_axes: bool | None = True)",,,BasePlot,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot.add_dendrogram(
        self,
        show: bool | None = True,
        dendrogram_key: str | None = None,
        size: float | None = 0.8,
    ) -> BasePlot",class_method,,,,"Class method: BasePlot.add_dendrogram(
        self,
        show: bool | None = True,
        dendrogram_key: str | None = None,
        size: float | None = 0.8,
    ) -> BasePlot",scverse,scanpy,1.10.1,,,,,,,BasePlot,add_dendrogram,"(
        self,
        show: bool | None = True,
        dendrogram_key: str | None = None,
        size: float | None = 0.8,
    )",,,BasePlot,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot.add_totals(
        self,
        show: bool | None = True,
        sort: Literal[""ascending"", ""descending""] = None,
        size: float | None = 0.8,
        color: ColorLike | Sequence[ColorLike] | None = None,
    ) -> BasePlot",class_method,,,,"Class method: BasePlot.add_totals(
        self,
        show: bool | None = True,
        sort: Literal[""ascending"", ""descending""] = None,
        size: float | None = 0.8,
        color: ColorLike | Sequence[ColorLike] | None = None,
    ) -> BasePlot",scverse,scanpy,1.10.1,,,,,,,BasePlot,add_totals,"(
        self,
        show: bool | None = True,
        sort: Literal[""ascending"", ""descending""] = None,
        size: float | None = 0.8,
        color: ColorLike | Sequence[ColorLike] | None = None,
    )",,,BasePlot,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"[old_positionals(""cmap"")] BasePlot.style(self, *, cmap: str | None = DEFAULT_COLORMAP) -> BasePlot",class_method,,,,"Class method: [old_positionals(""cmap"")] BasePlot.style(self, *, cmap: str | None = DEFAULT_COLORMAP) -> BasePlot",scverse,scanpy,1.10.1,,,,,,,BasePlot,style,"(self, *, cmap: str | None = DEFAULT_COLORMAP)",,,BasePlot,,,,,,"old_positionals(""cmap"")"
scverse_scanpy_1.10.1,_baseplot_class.py,python,"[old_positionals(""show"", ""title"", ""width"")] BasePlot.legend(
        self,
        *,
        show: bool | None = True,
        title: str | None = DEFAULT_COLOR_LEGEND_TITLE,
        width: float | None = DEFAULT_LEGENDS_WIDTH,
    ) -> BasePlot",class_method,,,,"Class method: [old_positionals(""show"", ""title"", ""width"")] BasePlot.legend(
        self,
        *,
        show: bool | None = True,
        title: str | None = DEFAULT_COLOR_LEGEND_TITLE,
        width: float | None = DEFAULT_LEGENDS_WIDTH,
    ) -> BasePlot",scverse,scanpy,1.10.1,,,,,,,BasePlot,legend,"(
        self,
        *,
        show: bool | None = True,
        title: str | None = DEFAULT_COLOR_LEGEND_TITLE,
        width: float | None = DEFAULT_LEGENDS_WIDTH,
    )",,,BasePlot,,,,,,"old_positionals(""show"", ""title"", ""width"")"
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot.get_axes(self) -> dict[str, Axes]",class_method,,,,"Class method: BasePlot.get_axes(self) -> dict[str, Axes]",scverse,scanpy,1.10.1,,,,,,,BasePlot,get_axes,(self),,,"dict[str, Axes]",,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot._plot_totals(
        self, total_barplot_ax: Axes, orientation: Literal[""top"", ""right""]
    )",class_method,,,,"Class method: BasePlot._plot_totals(
        self, total_barplot_ax: Axes, orientation: Literal[""top"", ""right""]
    )",scverse,scanpy,1.10.1,,,,,,,BasePlot,_plot_totals,"(
        self, total_barplot_ax: Axes, orientation: Literal[""top"", ""right""]
    )",,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot._plot_colorbar(self, color_legend_ax: Axes, normalize) -> None",class_method,,,,"Class method: BasePlot._plot_colorbar(self, color_legend_ax: Axes, normalize) -> None",scverse,scanpy,1.10.1,,,,,,,BasePlot,_plot_colorbar,"(self, color_legend_ax: Axes, normalize)",,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot._plot_legend(self, legend_ax, return_ax_dict, normalize)",class_method,,,,"Class method: BasePlot._plot_legend(self, legend_ax, return_ax_dict, normalize)",scverse,scanpy,1.10.1,,,,,,,BasePlot,_plot_legend,"(self, legend_ax, return_ax_dict, normalize)",,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot._mainplot(self, ax)",class_method,,,,"Class method: BasePlot._mainplot(self, ax)",scverse,scanpy,1.10.1,,,,,,,BasePlot,_mainplot,"(self, ax)",,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,BasePlot.make_figure(self),class_method,,,,Class method: BasePlot.make_figure(self),scverse,scanpy,1.10.1,,,,,,,BasePlot,make_figure,(self),,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot.show(self, return_axes: bool | None = None) -> dict[str, Axes] | None",class_method,,,,"Class method: BasePlot.show(self, return_axes: bool | None = None) -> dict[str, Axes] | None",scverse,scanpy,1.10.1,,,,,,,BasePlot,show,"(self, return_axes: bool | None = None)",,,"dict[str, Axes] | None",,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot.savefig(self, filename: str, bbox_inches: str | None = ""tight"", **kwargs)",class_method,,,,"Class method: BasePlot.savefig(self, filename: str, bbox_inches: str | None = ""tight"", **kwargs)",scverse,scanpy,1.10.1,,,,,,,BasePlot,savefig,"(self, filename: str, bbox_inches: str | None = ""tight"", **kwargs)",,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"BasePlot._reorder_categories_after_dendrogram(self, dendrogram) -> None",class_method,,,,"Class method: BasePlot._reorder_categories_after_dendrogram(self, dendrogram) -> None",scverse,scanpy,1.10.1,,,,,,,BasePlot,_reorder_categories_after_dendrogram,"(self, dendrogram)",,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"[staticmethod] BasePlot._plot_var_groups_brackets(
        gene_groups_ax: Axes,
        *,
        group_positions: Iterable[tuple[int, int]],
        group_labels: Sequence[str],
        left_adjustment: float = -0.3,
        right_adjustment: float = 0.3,
        rotation: float | None = None,
        orientation: Literal[""top"", ""right""] = ""top"",
    ) -> None",class_method,,,,"Class method: [staticmethod] BasePlot._plot_var_groups_brackets(
        gene_groups_ax: Axes,
        *,
        group_positions: Iterable[tuple[int, int]],
        group_labels: Sequence[str],
        left_adjustment: float = -0.3,
        right_adjustment: float = 0.3,
        rotation: float | None = None,
        orientation: Literal[""top"", ""right""] = ""top"",
    ) -> None",scverse,scanpy,1.10.1,,,,,,,BasePlot,_plot_var_groups_brackets,"(
        gene_groups_ax: Axes,
        *,
        group_positions: Iterable[tuple[int, int]],
        group_labels: Sequence[str],
        left_adjustment: float = -0.3,
        right_adjustment: float = 0.3,
        rotation: float | None = None,
        orientation: Literal[""top"", ""right""] = ""top"",
    )",,,,,,,,,staticmethod
scverse_scanpy_1.10.1,_baseplot_class.py,python,BasePlot._update_var_groups(self) -> None,class_method,,,,Class method: BasePlot._update_var_groups(self) -> None,scverse,scanpy,1.10.1,,,,,,,BasePlot,_update_var_groups,(self),,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,BasePlot,class,,,,Class: BasePlot,scverse,scanpy,1.10.1,,,,,,,BasePlot,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"_VarNames = Union[str, Sequence[str]]",constant,"_VarNames = Union[str, Sequence[str]]",_VarNames,"Union[str, Sequence[str]]","Constant: _VarNames = Union[str, Sequence[str]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,"doc_common_groupby_plot_args = """"""\
title
    Title for the figure
colorbar_title
    Title for the color bar. New line character (\\n) can be used.
cmap
    String denoting matplotlib color map.
standard_scale
    Whether or not to standardize the given dimension between 0 and 1, meaning for
    each variable or group, subtract the minimum and divide each by its maximum.
swap_axes
     By default, the x axis contains `var_names` (e.g. genes) and the y axis
     the `groupby` categories. By setting `swap_axes` then x are the
     `groupby` categories and y the `var_names`.
return_fig
    Returns :class:`DotPlot` object. Useful for fine-tuning
    the plot. Takes precedence over `show=False`.
""""""",constant,"doc_common_groupby_plot_args = """"""\
title
    Title for the figure
colorbar_title
    Title for the color bar. New line character (\\n) can be used.
cmap
    String denoting matplotlib color map.
standard_scale
    Whether or not to standardize the given dimension between 0 and 1, meaning for
    each variable or group, subtract the minimum and divide each by its maximum.
swap_axes
     By default, the x axis contains `var_names` (e.g. genes) and the y axis
     the `groupby` categories. By setting `swap_axes` then x are the
     `groupby` categories and y the `var_names`.
return_fig
    Returns :class:`DotPlot` object. Useful for fine-tuning
    the plot. Takes precedence over `show=False`.
""""""",doc_common_groupby_plot_args,"""""""\
title
    Title for the figure
colorbar_title
    Title for the color bar. New line character (\\n) can be used.
cmap
    String denoting matplotlib color map.
standard_scale
    Whether or not to standardize the given dimension between 0 and 1, meaning for
    each variable or group, subtract the minimum and divide each by its maximum.
swap_axes
     By default, the x axis contains `var_names` (e.g. genes) and the y axis
     the `groupby` categories. By setting `swap_axes` then x are the
     `groupby` categories and y the `var_names`.
return_fig
    Returns :class:`DotPlot` object. Useful for fine-tuning
    the plot. Takes precedence over `show=False`.
""""""","Constant: doc_common_groupby_plot_args = """"""\
title
    Title for the figure
colorbar_title
    Title for the color bar. New line character (\\n) can be used.
cmap
    String denoting matplotlib color map.
standard_scale
    Whether or not to standardize the given dimension between 0 and 1, meaning for
    each variable or group, subtract the minimum and divide each by its maximum.
swap_axes
     By default, the x axis contains `var_names` (e.g. genes) and the y axis
     the `groupby` categories. By setting `swap_axes` then x are the
     `groupby` categories and y the `var_names`.
return_fig
    Returns :class:`DotPlot` object. Useful for fine-tuning
    the plot. Takes precedence over `show=False`.
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,collections.abc,import,,,,Import: collections.abc,scverse,scanpy,1.10.1,import collections.abc as cabc,,collections.abc,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,namedtuple from collections,import,,,,Import: namedtuple from collections,scverse,scanpy,1.10.1,from collections import namedtuple,collections,namedtuple,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, Union",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, Union",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,Union from typing,import,,,,Import: Union from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, Union",typing,Union,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,warn from warnings,import,,,,Import: warn from warnings,scverse,scanpy,1.10.1,from warnings import warn,warnings,warn,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,gridspec from matplotlib,import,,,,Import: gridspec from matplotlib,scverse,scanpy,1.10.1,from matplotlib import gridspec,matplotlib,gridspec,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,matplotlib,pyplot,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,Iterable from collections.abc,local_import,,,,Import: Iterable from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Iterable, Mapping, Sequence",collections.abc,Iterable,,,collections.abc,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,Mapping from collections.abc,local_import,,,,Import: Mapping from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Iterable, Mapping, Sequence",collections.abc,Mapping,,,collections.abc,,,,,,,,,,,,
scverse_scanpy_1.10.1,_baseplot_class.py,python,Sequence from collections.abc,local_import,,,,Import: Sequence from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Iterable, Mapping, Sequence",collections.abc,Sequence,,,collections.abc,,,,,,,,,,,,
,_baseplot_class.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_baseplot_class.py,python,,,,,,Directory: scanpy\plotting\_baseplot_class.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_adata_color_etc = """"""\
adata
    Annotated data matrix.
color
    Keys for annotations of observations/cells or variables/genes, e.g.,
    `'ann1'` or `['ann1', 'ann2']`.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols. By default `var_names`
    refer to the index column of the `.var` DataFrame. Setting this option allows
    alternative names to be used.
use_raw
    Use `.raw` attribute of `adata` for coloring with gene expression. If `None`,
    defaults to `True` if `layer` isn't provided and `adata.raw` is present.
layer
    Name of the AnnData object layer that wants to be plotted. By default
    adata.raw.X is plotted. If `use_raw=False` is set, then `adata.X` is plotted.
    If `layer` is set to a valid layer name, then the layer is plotted. `layer`
    takes precedence over `use_raw`.\
""""""",constant,"doc_adata_color_etc = """"""\
adata
    Annotated data matrix.
color
    Keys for annotations of observations/cells or variables/genes, e.g.,
    `'ann1'` or `['ann1', 'ann2']`.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols. By default `var_names`
    refer to the index column of the `.var` DataFrame. Setting this option allows
    alternative names to be used.
use_raw
    Use `.raw` attribute of `adata` for coloring with gene expression. If `None`,
    defaults to `True` if `layer` isn't provided and `adata.raw` is present.
layer
    Name of the AnnData object layer that wants to be plotted. By default
    adata.raw.X is plotted. If `use_raw=False` is set, then `adata.X` is plotted.
    If `layer` is set to a valid layer name, then the layer is plotted. `layer`
    takes precedence over `use_raw`.\
""""""",doc_adata_color_etc,"""""""\
adata
    Annotated data matrix.
color
    Keys for annotations of observations/cells or variables/genes, e.g.,
    `'ann1'` or `['ann1', 'ann2']`.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols. By default `var_names`
    refer to the index column of the `.var` DataFrame. Setting this option allows
    alternative names to be used.
use_raw
    Use `.raw` attribute of `adata` for coloring with gene expression. If `None`,
    defaults to `True` if `layer` isn't provided and `adata.raw` is present.
layer
    Name of the AnnData object layer that wants to be plotted. By default
    adata.raw.X is plotted. If `use_raw=False` is set, then `adata.X` is plotted.
    If `layer` is set to a valid layer name, then the layer is plotted. `layer`
    takes precedence over `use_raw`.\
""""""","Constant: doc_adata_color_etc = """"""\
adata
    Annotated data matrix.
color
    Keys for annotations of observations/cells or variables/genes, e.g.,
    `'ann1'` or `['ann1', 'ann2']`.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols. By default `var_names`
    refer to the index column of the `.var` DataFrame. Setting this option allows
    alternative names to be used.
use_raw
    Use `.raw` attribute of `adata` for coloring with gene expression. If `None`,
    defaults to `True` if `layer` isn't provided and `adata.raw` is present.
layer
    Name of the AnnData object layer that wants to be plotted. By default
    adata.raw.X is plotted. If `use_raw=False` is set, then `adata.X` is plotted.
    If `layer` is set to a valid layer name, then the layer is plotted. `layer`
    takes precedence over `use_raw`.\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_edges_arrows = """"""\
edges
    Show edges.
edges_width
    Width of edges.
edges_color
    Color of edges. See :func:`~networkx.drawing.nx_pylab.draw_networkx_edges`.
neighbors_key
    Where to look for neighbors connectivities.
    If not specified, this looks .obsp['connectivities'] for connectivities
    (default storage place for pp.neighbors).
    If specified, this looks
    .obsp[.uns[neighbors_key]['connectivities_key']] for connectivities.
arrows
    Show arrows (deprecated in favour of `scvelo.pl.velocity_embedding`).
arrows_kwds
    Passed to :meth:`~matplotlib.axes.Axes.quiver`\
""""""",constant,"doc_edges_arrows = """"""\
edges
    Show edges.
edges_width
    Width of edges.
edges_color
    Color of edges. See :func:`~networkx.drawing.nx_pylab.draw_networkx_edges`.
neighbors_key
    Where to look for neighbors connectivities.
    If not specified, this looks .obsp['connectivities'] for connectivities
    (default storage place for pp.neighbors).
    If specified, this looks
    .obsp[.uns[neighbors_key]['connectivities_key']] for connectivities.
arrows
    Show arrows (deprecated in favour of `scvelo.pl.velocity_embedding`).
arrows_kwds
    Passed to :meth:`~matplotlib.axes.Axes.quiver`\
""""""",doc_edges_arrows,"""""""\
edges
    Show edges.
edges_width
    Width of edges.
edges_color
    Color of edges. See :func:`~networkx.drawing.nx_pylab.draw_networkx_edges`.
neighbors_key
    Where to look for neighbors connectivities.
    If not specified, this looks .obsp['connectivities'] for connectivities
    (default storage place for pp.neighbors).
    If specified, this looks
    .obsp[.uns[neighbors_key]['connectivities_key']] for connectivities.
arrows
    Show arrows (deprecated in favour of `scvelo.pl.velocity_embedding`).
arrows_kwds
    Passed to :meth:`~matplotlib.axes.Axes.quiver`\
""""""","Constant: doc_edges_arrows = """"""\
edges
    Show edges.
edges_width
    Width of edges.
edges_color
    Color of edges. See :func:`~networkx.drawing.nx_pylab.draw_networkx_edges`.
neighbors_key
    Where to look for neighbors connectivities.
    If not specified, this looks .obsp['connectivities'] for connectivities
    (default storage place for pp.neighbors).
    If specified, this looks
    .obsp[.uns[neighbors_key]['connectivities_key']] for connectivities.
arrows
    Show arrows (deprecated in favour of `scvelo.pl.velocity_embedding`).
arrows_kwds
    Passed to :meth:`~matplotlib.axes.Axes.quiver`\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_scatter_basic = """"""\
sort_order
    For continuous annotations used as color parameter, plot data points
    with higher values on top of others.
groups
    Restrict to a few categories in categorical observation annotation.
    The default is not to restrict to any groups.
dimensions
    0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].
    Unlike `components`, this argument is used in the same way as `colors`, e.g. is
    used to specify a single plot at a time. Will eventually replace the components
    argument.
components
    For instance, `['1,2', '2,3']`. To plot all available components use
    `components='all'`.
projection
    Projection of plot (default: `'2d'`).
legend_loc
    Location of legend, either `'on data'`, `'right margin'` or a valid keyword
    for the `loc` parameter of :class:`~matplotlib.legend.Legend`.
legend_fontsize
    Numeric size in pt or string describing the size.
    See :meth:`~matplotlib.text.Text.set_fontsize`.
legend_fontweight
    Legend font weight. A numeric value in range 0-1000 or a string.
    Defaults to `'bold'` if `legend_loc == 'on data'`, otherwise to `'normal'`.
    See :meth:`~matplotlib.text.Text.set_fontweight`.
legend_fontoutline
    Line width of the legend font outline in pt. Draws a white outline using
    the path effect :class:`~matplotlib.patheffects.withStroke`.
colorbar_loc
    Where to place the colorbar for continous variables. If `None`, no colorbar
    is added.
size
    Point size. If `None`, is automatically computed as 120000 / n_cells.
    Can be a sequence containing the size for each cell. The order should be
    the same as in adata.obs.
color_map
    Color map to use for continous variables. Can be a name or a
    :class:`~matplotlib.colors.Colormap` instance (e.g. `""magma`"", `""viridis""`
    or `mpl.cm.cividis`), see :func:`~matplotlib.cm.get_cmap`.
    If `None`, the value of `mpl.rcParams[""image.cmap""]` is used.
    The default `color_map` can be set using :func:`~scanpy.set_figure_params`.
palette
    Colors to use for plotting categorical annotation groups.
    The palette can be a valid :class:`~matplotlib.colors.ListedColormap` name
    (`'Set2'`, `'tab20'`, …), a :class:`~cycler.Cycler` object, a dict mapping
    categories to colors, or a sequence of colors. Colors must be valid to
    matplotlib. (see :func:`~matplotlib.colors.is_color_like`).
    If `None`, `mpl.rcParams[""axes.prop_cycle""]` is used unless the categorical
    variable already has colors stored in `adata.uns[""{var}_colors""]`.
    If provided, values of `adata.uns[""{var}_colors""]` will be set.
na_color
    Color to use for null or masked values. Can be anything matplotlib accepts as a
    color. Used for all points if `color=None`.
na_in_legend
    If there are missing values, whether they get an entry in the legend. Currently
    only implemented for categorical legends.
frameon
    Draw a frame around the scatter plot. Defaults to value set in
    :func:`~scanpy.set_figure_params`, defaults to `True`.
title
    Provide title for panels either as string or list of strings,
    e.g. `['title1', 'title2', ...]`.
""""""",constant,"doc_scatter_basic = """"""\
sort_order
    For continuous annotations used as color parameter, plot data points
    with higher values on top of others.
groups
    Restrict to a few categories in categorical observation annotation.
    The default is not to restrict to any groups.
dimensions
    0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].
    Unlike `components`, this argument is used in the same way as `colors`, e.g. is
    used to specify a single plot at a time. Will eventually replace the components
    argument.
components
    For instance, `['1,2', '2,3']`. To plot all available components use
    `components='all'`.
projection
    Projection of plot (default: `'2d'`).
legend_loc
    Location of legend, either `'on data'`, `'right margin'` or a valid keyword
    for the `loc` parameter of :class:`~matplotlib.legend.Legend`.
legend_fontsize
    Numeric size in pt or string describing the size.
    See :meth:`~matplotlib.text.Text.set_fontsize`.
legend_fontweight
    Legend font weight. A numeric value in range 0-1000 or a string.
    Defaults to `'bold'` if `legend_loc == 'on data'`, otherwise to `'normal'`.
    See :meth:`~matplotlib.text.Text.set_fontweight`.
legend_fontoutline
    Line width of the legend font outline in pt. Draws a white outline using
    the path effect :class:`~matplotlib.patheffects.withStroke`.
colorbar_loc
    Where to place the colorbar for continous variables. If `None`, no colorbar
    is added.
size
    Point size. If `None`, is automatically computed as 120000 / n_cells.
    Can be a sequence containing the size for each cell. The order should be
    the same as in adata.obs.
color_map
    Color map to use for continous variables. Can be a name or a
    :class:`~matplotlib.colors.Colormap` instance (e.g. `""magma`"", `""viridis""`
    or `mpl.cm.cividis`), see :func:`~matplotlib.cm.get_cmap`.
    If `None`, the value of `mpl.rcParams[""image.cmap""]` is used.
    The default `color_map` can be set using :func:`~scanpy.set_figure_params`.
palette
    Colors to use for plotting categorical annotation groups.
    The palette can be a valid :class:`~matplotlib.colors.ListedColormap` name
    (`'Set2'`, `'tab20'`, …), a :class:`~cycler.Cycler` object, a dict mapping
    categories to colors, or a sequence of colors. Colors must be valid to
    matplotlib. (see :func:`~matplotlib.colors.is_color_like`).
    If `None`, `mpl.rcParams[""axes.prop_cycle""]` is used unless the categorical
    variable already has colors stored in `adata.uns[""{var}_colors""]`.
    If provided, values of `adata.uns[""{var}_colors""]` will be set.
na_color
    Color to use for null or masked values. Can be anything matplotlib accepts as a
    color. Used for all points if `color=None`.
na_in_legend
    If there are missing values, whether they get an entry in the legend. Currently
    only implemented for categorical legends.
frameon
    Draw a frame around the scatter plot. Defaults to value set in
    :func:`~scanpy.set_figure_params`, defaults to `True`.
title
    Provide title for panels either as string or list of strings,
    e.g. `['title1', 'title2', ...]`.
""""""",doc_scatter_basic,"""""""\
sort_order
    For continuous annotations used as color parameter, plot data points
    with higher values on top of others.
groups
    Restrict to a few categories in categorical observation annotation.
    The default is not to restrict to any groups.
dimensions
    0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].
    Unlike `components`, this argument is used in the same way as `colors`, e.g. is
    used to specify a single plot at a time. Will eventually replace the components
    argument.
components
    For instance, `['1,2', '2,3']`. To plot all available components use
    `components='all'`.
projection
    Projection of plot (default: `'2d'`).
legend_loc
    Location of legend, either `'on data'`, `'right margin'` or a valid keyword
    for the `loc` parameter of :class:`~matplotlib.legend.Legend`.
legend_fontsize
    Numeric size in pt or string describing the size.
    See :meth:`~matplotlib.text.Text.set_fontsize`.
legend_fontweight
    Legend font weight. A numeric value in range 0-1000 or a string.
    Defaults to `'bold'` if `legend_loc == 'on data'`, otherwise to `'normal'`.
    See :meth:`~matplotlib.text.Text.set_fontweight`.
legend_fontoutline
    Line width of the legend font outline in pt. Draws a white outline using
    the path effect :class:`~matplotlib.patheffects.withStroke`.
colorbar_loc
    Where to place the colorbar for continous variables. If `None`, no colorbar
    is added.
size
    Point size. If `None`, is automatically computed as 120000 / n_cells.
    Can be a sequence containing the size for each cell. The order should be
    the same as in adata.obs.
color_map
    Color map to use for continous variables. Can be a name or a
    :class:`~matplotlib.colors.Colormap` instance (e.g. `""magma`"", `""viridis""`
    or `mpl.cm.cividis`), see :func:`~matplotlib.cm.get_cmap`.
    If `None`, the value of `mpl.rcParams[""image.cmap""]` is used.
    The default `color_map` can be set using :func:`~scanpy.set_figure_params`.
palette
    Colors to use for plotting categorical annotation groups.
    The palette can be a valid :class:`~matplotlib.colors.ListedColormap` name
    (`'Set2'`, `'tab20'`, …), a :class:`~cycler.Cycler` object, a dict mapping
    categories to colors, or a sequence of colors. Colors must be valid to
    matplotlib. (see :func:`~matplotlib.colors.is_color_like`).
    If `None`, `mpl.rcParams[""axes.prop_cycle""]` is used unless the categorical
    variable already has colors stored in `adata.uns[""{var}_colors""]`.
    If provided, values of `adata.uns[""{var}_colors""]` will be set.
na_color
    Color to use for null or masked values. Can be anything matplotlib accepts as a
    color. Used for all points if `color=None`.
na_in_legend
    If there are missing values, whether they get an entry in the legend. Currently
    only implemented for categorical legends.
frameon
    Draw a frame around the scatter plot. Defaults to value set in
    :func:`~scanpy.set_figure_params`, defaults to `True`.
title
    Provide title for panels either as string or list of strings,
    e.g. `['title1', 'title2', ...]`.
""""""","Constant: doc_scatter_basic = """"""\
sort_order
    For continuous annotations used as color parameter, plot data points
    with higher values on top of others.
groups
    Restrict to a few categories in categorical observation annotation.
    The default is not to restrict to any groups.
dimensions
    0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].
    Unlike `components`, this argument is used in the same way as `colors`, e.g. is
    used to specify a single plot at a time. Will eventually replace the components
    argument.
components
    For instance, `['1,2', '2,3']`. To plot all available components use
    `components='all'`.
projection
    Projection of plot (default: `'2d'`).
legend_loc
    Location of legend, either `'on data'`, `'right margin'` or a valid keyword
    for the `loc` parameter of :class:`~matplotlib.legend.Legend`.
legend_fontsize
    Numeric size in pt or string describing the size.
    See :meth:`~matplotlib.text.Text.set_fontsize`.
legend_fontweight
    Legend font weight. A numeric value in range 0-1000 or a string.
    Defaults to `'bold'` if `legend_loc == 'on data'`, otherwise to `'normal'`.
    See :meth:`~matplotlib.text.Text.set_fontweight`.
legend_fontoutline
    Line width of the legend font outline in pt. Draws a white outline using
    the path effect :class:`~matplotlib.patheffects.withStroke`.
colorbar_loc
    Where to place the colorbar for continous variables. If `None`, no colorbar
    is added.
size
    Point size. If `None`, is automatically computed as 120000 / n_cells.
    Can be a sequence containing the size for each cell. The order should be
    the same as in adata.obs.
color_map
    Color map to use for continous variables. Can be a name or a
    :class:`~matplotlib.colors.Colormap` instance (e.g. `""magma`"", `""viridis""`
    or `mpl.cm.cividis`), see :func:`~matplotlib.cm.get_cmap`.
    If `None`, the value of `mpl.rcParams[""image.cmap""]` is used.
    The default `color_map` can be set using :func:`~scanpy.set_figure_params`.
palette
    Colors to use for plotting categorical annotation groups.
    The palette can be a valid :class:`~matplotlib.colors.ListedColormap` name
    (`'Set2'`, `'tab20'`, …), a :class:`~cycler.Cycler` object, a dict mapping
    categories to colors, or a sequence of colors. Colors must be valid to
    matplotlib. (see :func:`~matplotlib.colors.is_color_like`).
    If `None`, `mpl.rcParams[""axes.prop_cycle""]` is used unless the categorical
    variable already has colors stored in `adata.uns[""{var}_colors""]`.
    If provided, values of `adata.uns[""{var}_colors""]` will be set.
na_color
    Color to use for null or masked values. Can be anything matplotlib accepts as a
    color. Used for all points if `color=None`.
na_in_legend
    If there are missing values, whether they get an entry in the legend. Currently
    only implemented for categorical legends.
frameon
    Draw a frame around the scatter plot. Defaults to value set in
    :func:`~scanpy.set_figure_params`, defaults to `True`.
title
    Provide title for panels either as string or list of strings,
    e.g. `['title1', 'title2', ...]`.
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_vbound_percentile = """"""\
vmin
    The value representing the lower limit of the color scale. Values smaller than vmin are plotted
    with the same color as vmin. vmin can be a number, a string, a function or `None`. If
    vmin is a string and has the format `pN`, this is interpreted as a vmin=percentile(N).
    For example vmin='p1.5' is interpreted as the 1.5 percentile. If vmin is function, then
    vmin is interpreted as the return value of the function over the list of values to plot.
    For example to set vmin tp the mean of the values to plot, `def my_vmin(values): return
    np.mean(values)` and then set `vmin=my_vmin`. If vmin is None (default) an automatic
    minimum value is used as defined by matplotlib `scatter` function. When making multiple
    plots, vmin can be a list of values, one for each plot. For example `vmin=[0.1, 'p1', None, my_vmin]`
vmax
    The value representing the upper limit of the color scale. The format is the same as for `vmin`.
vcenter
    The value representing the center of the color scale. Useful for diverging colormaps.
    The format is the same as for `vmin`.
    Example: sc.pl.umap(adata, color='TREM2', vcenter='p50', cmap='RdBu_r')\
""""""",constant,"doc_vbound_percentile = """"""\
vmin
    The value representing the lower limit of the color scale. Values smaller than vmin are plotted
    with the same color as vmin. vmin can be a number, a string, a function or `None`. If
    vmin is a string and has the format `pN`, this is interpreted as a vmin=percentile(N).
    For example vmin='p1.5' is interpreted as the 1.5 percentile. If vmin is function, then
    vmin is interpreted as the return value of the function over the list of values to plot.
    For example to set vmin tp the mean of the values to plot, `def my_vmin(values): return
    np.mean(values)` and then set `vmin=my_vmin`. If vmin is None (default) an automatic
    minimum value is used as defined by matplotlib `scatter` function. When making multiple
    plots, vmin can be a list of values, one for each plot. For example `vmin=[0.1, 'p1', None, my_vmin]`
vmax
    The value representing the upper limit of the color scale. The format is the same as for `vmin`.
vcenter
    The value representing the center of the color scale. Useful for diverging colormaps.
    The format is the same as for `vmin`.
    Example: sc.pl.umap(adata, color='TREM2', vcenter='p50', cmap='RdBu_r')\
""""""",doc_vbound_percentile,"""""""\
vmin
    The value representing the lower limit of the color scale. Values smaller than vmin are plotted
    with the same color as vmin. vmin can be a number, a string, a function or `None`. If
    vmin is a string and has the format `pN`, this is interpreted as a vmin=percentile(N).
    For example vmin='p1.5' is interpreted as the 1.5 percentile. If vmin is function, then
    vmin is interpreted as the return value of the function over the list of values to plot.
    For example to set vmin tp the mean of the values to plot, `def my_vmin(values): return
    np.mean(values)` and then set `vmin=my_vmin`. If vmin is None (default) an automatic
    minimum value is used as defined by matplotlib `scatter` function. When making multiple
    plots, vmin can be a list of values, one for each plot. For example `vmin=[0.1, 'p1', None, my_vmin]`
vmax
    The value representing the upper limit of the color scale. The format is the same as for `vmin`.
vcenter
    The value representing the center of the color scale. Useful for diverging colormaps.
    The format is the same as for `vmin`.
    Example: sc.pl.umap(adata, color='TREM2', vcenter='p50', cmap='RdBu_r')\
""""""","Constant: doc_vbound_percentile = """"""\
vmin
    The value representing the lower limit of the color scale. Values smaller than vmin are plotted
    with the same color as vmin. vmin can be a number, a string, a function or `None`. If
    vmin is a string and has the format `pN`, this is interpreted as a vmin=percentile(N).
    For example vmin='p1.5' is interpreted as the 1.5 percentile. If vmin is function, then
    vmin is interpreted as the return value of the function over the list of values to plot.
    For example to set vmin tp the mean of the values to plot, `def my_vmin(values): return
    np.mean(values)` and then set `vmin=my_vmin`. If vmin is None (default) an automatic
    minimum value is used as defined by matplotlib `scatter` function. When making multiple
    plots, vmin can be a list of values, one for each plot. For example `vmin=[0.1, 'p1', None, my_vmin]`
vmax
    The value representing the upper limit of the color scale. The format is the same as for `vmin`.
vcenter
    The value representing the center of the color scale. Useful for diverging colormaps.
    The format is the same as for `vmin`.
    Example: sc.pl.umap(adata, color='TREM2', vcenter='p50', cmap='RdBu_r')\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_vboundnorm = """"""\
vmin
    The value representing the lower limit of the color scale. Values smaller than vmin are plotted
    with the same color as vmin.
vmax
    The value representing the upper limit of the color scale. Values larger than vmax are plotted
    with the same color as vmax.
vcenter
    The value representing the center of the color scale. Useful for diverging colormaps.
norm
    Custom color normalization object from matplotlib. See
    `https://matplotlib.org/stable/tutorials/colors/colormapnorms.html` for details.\
""""""",constant,"doc_vboundnorm = """"""\
vmin
    The value representing the lower limit of the color scale. Values smaller than vmin are plotted
    with the same color as vmin.
vmax
    The value representing the upper limit of the color scale. Values larger than vmax are plotted
    with the same color as vmax.
vcenter
    The value representing the center of the color scale. Useful for diverging colormaps.
norm
    Custom color normalization object from matplotlib. See
    `https://matplotlib.org/stable/tutorials/colors/colormapnorms.html` for details.\
""""""",doc_vboundnorm,"""""""\
vmin
    The value representing the lower limit of the color scale. Values smaller than vmin are plotted
    with the same color as vmin.
vmax
    The value representing the upper limit of the color scale. Values larger than vmax are plotted
    with the same color as vmax.
vcenter
    The value representing the center of the color scale. Useful for diverging colormaps.
norm
    Custom color normalization object from matplotlib. See
    `https://matplotlib.org/stable/tutorials/colors/colormapnorms.html` for details.\
""""""","Constant: doc_vboundnorm = """"""\
vmin
    The value representing the lower limit of the color scale. Values smaller than vmin are plotted
    with the same color as vmin.
vmax
    The value representing the upper limit of the color scale. Values larger than vmax are plotted
    with the same color as vmax.
vcenter
    The value representing the center of the color scale. Useful for diverging colormaps.
norm
    Custom color normalization object from matplotlib. See
    `https://matplotlib.org/stable/tutorials/colors/colormapnorms.html` for details.\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_outline = """"""\
add_outline
    If set to True, this will add a thin border around groups of dots. In some situations
    this can enhance the aesthetics of the resulting image
outline_color
    Tuple with two valid color names used to adjust the add_outline. The first color is the
    border color (default: black), while the second color is a gap color between the
    border color and the scatter dot (default: white).
outline_width
    Tuple with two width numbers used to adjust the outline. The first value is the width
    of the border color as a fraction of the scatter dot size (default: 0.3). The second value is
    width of the gap color (default: 0.05).\
""""""",constant,"doc_outline = """"""\
add_outline
    If set to True, this will add a thin border around groups of dots. In some situations
    this can enhance the aesthetics of the resulting image
outline_color
    Tuple with two valid color names used to adjust the add_outline. The first color is the
    border color (default: black), while the second color is a gap color between the
    border color and the scatter dot (default: white).
outline_width
    Tuple with two width numbers used to adjust the outline. The first value is the width
    of the border color as a fraction of the scatter dot size (default: 0.3). The second value is
    width of the gap color (default: 0.05).\
""""""",doc_outline,"""""""\
add_outline
    If set to True, this will add a thin border around groups of dots. In some situations
    this can enhance the aesthetics of the resulting image
outline_color
    Tuple with two valid color names used to adjust the add_outline. The first color is the
    border color (default: black), while the second color is a gap color between the
    border color and the scatter dot (default: white).
outline_width
    Tuple with two width numbers used to adjust the outline. The first value is the width
    of the border color as a fraction of the scatter dot size (default: 0.3). The second value is
    width of the gap color (default: 0.05).\
""""""","Constant: doc_outline = """"""\
add_outline
    If set to True, this will add a thin border around groups of dots. In some situations
    this can enhance the aesthetics of the resulting image
outline_color
    Tuple with two valid color names used to adjust the add_outline. The first color is the
    border color (default: black), while the second color is a gap color between the
    border color and the scatter dot (default: white).
outline_width
    Tuple with two width numbers used to adjust the outline. The first value is the width
    of the border color as a fraction of the scatter dot size (default: 0.3). The second value is
    width of the gap color (default: 0.05).\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_panels = """"""\
ncols
    Number of panels per row.
wspace
    Adjust the width of the space between multiple panels.
hspace
    Adjust the height of the space between multiple panels.
return_fig
    Return the matplotlib figure.\
""""""",constant,"doc_panels = """"""\
ncols
    Number of panels per row.
wspace
    Adjust the width of the space between multiple panels.
hspace
    Adjust the height of the space between multiple panels.
return_fig
    Return the matplotlib figure.\
""""""",doc_panels,"""""""\
ncols
    Number of panels per row.
wspace
    Adjust the width of the space between multiple panels.
hspace
    Adjust the height of the space between multiple panels.
return_fig
    Return the matplotlib figure.\
""""""","Constant: doc_panels = """"""\
ncols
    Number of panels per row.
wspace
    Adjust the width of the space between multiple panels.
hspace
    Adjust the height of the space between multiple panels.
return_fig
    Return the matplotlib figure.\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_scatter_embedding = f""""""\
{doc_scatter_basic}
{doc_vbound_percentile}
{doc_outline}
{doc_panels}
kwargs
    Arguments to pass to :func:`matplotlib.pyplot.scatter`,
    for instance: the maximum and minimum values (e.g. `vmin=-2, vmax=5`).\
""""""",constant,"doc_scatter_embedding = f""""""\
{doc_scatter_basic}
{doc_vbound_percentile}
{doc_outline}
{doc_panels}
kwargs
    Arguments to pass to :func:`matplotlib.pyplot.scatter`,
    for instance: the maximum and minimum values (e.g. `vmin=-2, vmax=5`).\
""""""",doc_scatter_embedding,"f""""""\
{doc_scatter_basic}
{doc_vbound_percentile}
{doc_outline}
{doc_panels}
kwargs
    Arguments to pass to :func:`matplotlib.pyplot.scatter`,
    for instance: the maximum and minimum values (e.g. `vmin=-2, vmax=5`).\
""""""","Constant: doc_scatter_embedding = f""""""\
{doc_scatter_basic}
{doc_vbound_percentile}
{doc_outline}
{doc_panels}
kwargs
    Arguments to pass to :func:`matplotlib.pyplot.scatter`,
    for instance: the maximum and minimum values (e.g. `vmin=-2, vmax=5`).\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_show_save_ax = """"""\
show
     Show the plot, do not return axis.
save
    If `True` or a `str`, save the figure.
    A string is appended to the default filename.
    Infer the filetype if ending on {`'.pdf'`, `'.png'`, `'.svg'`}.
ax
    A matplotlib axes object. Only works if plotting a single component.\
""""""",constant,"doc_show_save_ax = """"""\
show
     Show the plot, do not return axis.
save
    If `True` or a `str`, save the figure.
    A string is appended to the default filename.
    Infer the filetype if ending on {`'.pdf'`, `'.png'`, `'.svg'`}.
ax
    A matplotlib axes object. Only works if plotting a single component.\
""""""",doc_show_save_ax,"""""""\
show
     Show the plot, do not return axis.
save
    If `True` or a `str`, save the figure.
    A string is appended to the default filename.
    Infer the filetype if ending on {`'.pdf'`, `'.png'`, `'.svg'`}.
ax
    A matplotlib axes object. Only works if plotting a single component.\
""""""","Constant: doc_show_save_ax = """"""\
show
     Show the plot, do not return axis.
save
    If `True` or a `str`, save the figure.
    A string is appended to the default filename.
    Infer the filetype if ending on {`'.pdf'`, `'.png'`, `'.svg'`}.
ax
    A matplotlib axes object. Only works if plotting a single component.\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_common_plot_args = """"""\
adata
    Annotated data matrix.
var_names
    `var_names` should be a valid subset of `adata.var_names`.
    If `var_names` is a mapping, then the key is used as label
    to group the values (see `var_group_labels`). The mapping values
    should be sequences of valid `adata.var_names`. In this
    case either coloring or 'brackets' are used for the grouping
    of var names depending on the plot. When `var_names` is a mapping,
    then the `var_group_labels` and `var_group_positions` are set.
groupby
    The key of the observation grouping to consider.
use_raw
    Use `raw` attribute of `adata` if present.
log
    Plot on logarithmic axis.
num_categories
    Only used if groupby observation is not categorical. This value
    determines the number of groups into which the groupby observation
    should be subdivided.
categories_order
    Order in which to show the categories. Note: add_dendrogram or add_totals
    can change the categories order.
figsize
    Figure size when `multi_panel=True`.
    Otherwise the `rcParam['figure.figsize]` value is used.
    Format is (width, height)
dendrogram
    If True or a valid dendrogram key, a dendrogram based on the hierarchical
    clustering between the `groupby` categories is added.
    The dendrogram information is computed using :func:`scanpy.tl.dendrogram`.
    If `tl.dendrogram` has not been called previously the function is called
    with default parameters.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols.
    By default `var_names` refer to the index column of the `.var` DataFrame.
    Setting this option allows alternative names to be used.
var_group_positions
    Use this parameter to highlight groups of `var_names`.
    This will draw a 'bracket' or a color block between the given start and end
    positions. If the parameter `var_group_labels` is set, the corresponding
    labels are added on top/left. E.g. `var_group_positions=[(4,10)]`
    will add a bracket between the fourth `var_name` and the tenth `var_name`.
    By giving more positions, more brackets/color blocks are drawn.
var_group_labels
    Labels for each of the `var_group_positions` that want to be highlighted.
var_group_rotation
    Label rotation degrees.
    By default, labels larger than 4 characters are rotated 90 degrees.
layer
    Name of the AnnData object layer that wants to be plotted. By default adata.raw.X is plotted.
    If `use_raw=False` is set, then `adata.X` is plotted. If `layer` is set to a valid layer name,
    then the layer is plotted. `layer` takes precedence over `use_raw`.\
""""""",constant,"doc_common_plot_args = """"""\
adata
    Annotated data matrix.
var_names
    `var_names` should be a valid subset of `adata.var_names`.
    If `var_names` is a mapping, then the key is used as label
    to group the values (see `var_group_labels`). The mapping values
    should be sequences of valid `adata.var_names`. In this
    case either coloring or 'brackets' are used for the grouping
    of var names depending on the plot. When `var_names` is a mapping,
    then the `var_group_labels` and `var_group_positions` are set.
groupby
    The key of the observation grouping to consider.
use_raw
    Use `raw` attribute of `adata` if present.
log
    Plot on logarithmic axis.
num_categories
    Only used if groupby observation is not categorical. This value
    determines the number of groups into which the groupby observation
    should be subdivided.
categories_order
    Order in which to show the categories. Note: add_dendrogram or add_totals
    can change the categories order.
figsize
    Figure size when `multi_panel=True`.
    Otherwise the `rcParam['figure.figsize]` value is used.
    Format is (width, height)
dendrogram
    If True or a valid dendrogram key, a dendrogram based on the hierarchical
    clustering between the `groupby` categories is added.
    The dendrogram information is computed using :func:`scanpy.tl.dendrogram`.
    If `tl.dendrogram` has not been called previously the function is called
    with default parameters.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols.
    By default `var_names` refer to the index column of the `.var` DataFrame.
    Setting this option allows alternative names to be used.
var_group_positions
    Use this parameter to highlight groups of `var_names`.
    This will draw a 'bracket' or a color block between the given start and end
    positions. If the parameter `var_group_labels` is set, the corresponding
    labels are added on top/left. E.g. `var_group_positions=[(4,10)]`
    will add a bracket between the fourth `var_name` and the tenth `var_name`.
    By giving more positions, more brackets/color blocks are drawn.
var_group_labels
    Labels for each of the `var_group_positions` that want to be highlighted.
var_group_rotation
    Label rotation degrees.
    By default, labels larger than 4 characters are rotated 90 degrees.
layer
    Name of the AnnData object layer that wants to be plotted. By default adata.raw.X is plotted.
    If `use_raw=False` is set, then `adata.X` is plotted. If `layer` is set to a valid layer name,
    then the layer is plotted. `layer` takes precedence over `use_raw`.\
""""""",doc_common_plot_args,"""""""\
adata
    Annotated data matrix.
var_names
    `var_names` should be a valid subset of `adata.var_names`.
    If `var_names` is a mapping, then the key is used as label
    to group the values (see `var_group_labels`). The mapping values
    should be sequences of valid `adata.var_names`. In this
    case either coloring or 'brackets' are used for the grouping
    of var names depending on the plot. When `var_names` is a mapping,
    then the `var_group_labels` and `var_group_positions` are set.
groupby
    The key of the observation grouping to consider.
use_raw
    Use `raw` attribute of `adata` if present.
log
    Plot on logarithmic axis.
num_categories
    Only used if groupby observation is not categorical. This value
    determines the number of groups into which the groupby observation
    should be subdivided.
categories_order
    Order in which to show the categories. Note: add_dendrogram or add_totals
    can change the categories order.
figsize
    Figure size when `multi_panel=True`.
    Otherwise the `rcParam['figure.figsize]` value is used.
    Format is (width, height)
dendrogram
    If True or a valid dendrogram key, a dendrogram based on the hierarchical
    clustering between the `groupby` categories is added.
    The dendrogram information is computed using :func:`scanpy.tl.dendrogram`.
    If `tl.dendrogram` has not been called previously the function is called
    with default parameters.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols.
    By default `var_names` refer to the index column of the `.var` DataFrame.
    Setting this option allows alternative names to be used.
var_group_positions
    Use this parameter to highlight groups of `var_names`.
    This will draw a 'bracket' or a color block between the given start and end
    positions. If the parameter `var_group_labels` is set, the corresponding
    labels are added on top/left. E.g. `var_group_positions=[(4,10)]`
    will add a bracket between the fourth `var_name` and the tenth `var_name`.
    By giving more positions, more brackets/color blocks are drawn.
var_group_labels
    Labels for each of the `var_group_positions` that want to be highlighted.
var_group_rotation
    Label rotation degrees.
    By default, labels larger than 4 characters are rotated 90 degrees.
layer
    Name of the AnnData object layer that wants to be plotted. By default adata.raw.X is plotted.
    If `use_raw=False` is set, then `adata.X` is plotted. If `layer` is set to a valid layer name,
    then the layer is plotted. `layer` takes precedence over `use_raw`.\
""""""","Constant: doc_common_plot_args = """"""\
adata
    Annotated data matrix.
var_names
    `var_names` should be a valid subset of `adata.var_names`.
    If `var_names` is a mapping, then the key is used as label
    to group the values (see `var_group_labels`). The mapping values
    should be sequences of valid `adata.var_names`. In this
    case either coloring or 'brackets' are used for the grouping
    of var names depending on the plot. When `var_names` is a mapping,
    then the `var_group_labels` and `var_group_positions` are set.
groupby
    The key of the observation grouping to consider.
use_raw
    Use `raw` attribute of `adata` if present.
log
    Plot on logarithmic axis.
num_categories
    Only used if groupby observation is not categorical. This value
    determines the number of groups into which the groupby observation
    should be subdivided.
categories_order
    Order in which to show the categories. Note: add_dendrogram or add_totals
    can change the categories order.
figsize
    Figure size when `multi_panel=True`.
    Otherwise the `rcParam['figure.figsize]` value is used.
    Format is (width, height)
dendrogram
    If True or a valid dendrogram key, a dendrogram based on the hierarchical
    clustering between the `groupby` categories is added.
    The dendrogram information is computed using :func:`scanpy.tl.dendrogram`.
    If `tl.dendrogram` has not been called previously the function is called
    with default parameters.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols.
    By default `var_names` refer to the index column of the `.var` DataFrame.
    Setting this option allows alternative names to be used.
var_group_positions
    Use this parameter to highlight groups of `var_names`.
    This will draw a 'bracket' or a color block between the given start and end
    positions. If the parameter `var_group_labels` is set, the corresponding
    labels are added on top/left. E.g. `var_group_positions=[(4,10)]`
    will add a bracket between the fourth `var_name` and the tenth `var_name`.
    By giving more positions, more brackets/color blocks are drawn.
var_group_labels
    Labels for each of the `var_group_positions` that want to be highlighted.
var_group_rotation
    Label rotation degrees.
    By default, labels larger than 4 characters are rotated 90 degrees.
layer
    Name of the AnnData object layer that wants to be plotted. By default adata.raw.X is plotted.
    If `use_raw=False` is set, then `adata.X` is plotted. If `layer` is set to a valid layer name,
    then the layer is plotted. `layer` takes precedence over `use_raw`.\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_rank_genes_groups_plot_args = """"""\
adata
    Annotated data matrix.
groups
    The groups for which to show the gene ranking.
n_genes
    Number of genes to show. This can be a negative number to show for
    example the down regulated genes. eg: num_genes=-10. Is ignored if
    `gene_names` is passed.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols. By default `var_names`
    refer to the index column of the `.var` DataFrame. Setting this option allows
    alternative names to be used.
groupby
    The key of the observation grouping to consider. By default,
    the groupby is chosen from the rank genes groups parameter but
    other groupby options can be used.  It is expected that
    groupby is a categorical. If groupby is not a categorical observation,
    it would be subdivided into `num_categories` (see :func:`~scanpy.pl.dotplot`).
min_logfoldchange
    Value to filter genes in groups if their logfoldchange is less than the
    min_logfoldchange
key
    Key used to store the ranking results in `adata.uns`.\
""""""",constant,"doc_rank_genes_groups_plot_args = """"""\
adata
    Annotated data matrix.
groups
    The groups for which to show the gene ranking.
n_genes
    Number of genes to show. This can be a negative number to show for
    example the down regulated genes. eg: num_genes=-10. Is ignored if
    `gene_names` is passed.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols. By default `var_names`
    refer to the index column of the `.var` DataFrame. Setting this option allows
    alternative names to be used.
groupby
    The key of the observation grouping to consider. By default,
    the groupby is chosen from the rank genes groups parameter but
    other groupby options can be used.  It is expected that
    groupby is a categorical. If groupby is not a categorical observation,
    it would be subdivided into `num_categories` (see :func:`~scanpy.pl.dotplot`).
min_logfoldchange
    Value to filter genes in groups if their logfoldchange is less than the
    min_logfoldchange
key
    Key used to store the ranking results in `adata.uns`.\
""""""",doc_rank_genes_groups_plot_args,"""""""\
adata
    Annotated data matrix.
groups
    The groups for which to show the gene ranking.
n_genes
    Number of genes to show. This can be a negative number to show for
    example the down regulated genes. eg: num_genes=-10. Is ignored if
    `gene_names` is passed.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols. By default `var_names`
    refer to the index column of the `.var` DataFrame. Setting this option allows
    alternative names to be used.
groupby
    The key of the observation grouping to consider. By default,
    the groupby is chosen from the rank genes groups parameter but
    other groupby options can be used.  It is expected that
    groupby is a categorical. If groupby is not a categorical observation,
    it would be subdivided into `num_categories` (see :func:`~scanpy.pl.dotplot`).
min_logfoldchange
    Value to filter genes in groups if their logfoldchange is less than the
    min_logfoldchange
key
    Key used to store the ranking results in `adata.uns`.\
""""""","Constant: doc_rank_genes_groups_plot_args = """"""\
adata
    Annotated data matrix.
groups
    The groups for which to show the gene ranking.
n_genes
    Number of genes to show. This can be a negative number to show for
    example the down regulated genes. eg: num_genes=-10. Is ignored if
    `gene_names` is passed.
gene_symbols
    Column name in `.var` DataFrame that stores gene symbols. By default `var_names`
    refer to the index column of the `.var` DataFrame. Setting this option allows
    alternative names to be used.
groupby
    The key of the observation grouping to consider. By default,
    the groupby is chosen from the rank genes groups parameter but
    other groupby options can be used.  It is expected that
    groupby is a categorical. If groupby is not a categorical observation,
    it would be subdivided into `num_categories` (see :func:`~scanpy.pl.dotplot`).
min_logfoldchange
    Value to filter genes in groups if their logfoldchange is less than the
    min_logfoldchange
key
    Key used to store the ranking results in `adata.uns`.\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_rank_genes_groups_values_to_plot = """"""\
values_to_plot
    Instead of the mean gene value, plot the values computed by `sc.rank_genes_groups`.
    The options are: ['scores', 'logfoldchanges', 'pvals', 'pvals_adj',
    'log10_pvals', 'log10_pvals_adj']. When plotting logfoldchanges a divergent
    colormap is recommended. See examples below.
var_names
    Genes to plot. Sometimes is useful to pass a specific list of var names (e.g. genes)
    to check their fold changes or p-values, instead of the top/bottom genes. The
    var_names could be a dictionary or a list as in :func:`~scanpy.pl.dotplot` or
    :func:`~scanpy.pl.matrixplot`. See examples below.\
""""""",constant,"doc_rank_genes_groups_values_to_plot = """"""\
values_to_plot
    Instead of the mean gene value, plot the values computed by `sc.rank_genes_groups`.
    The options are: ['scores', 'logfoldchanges', 'pvals', 'pvals_adj',
    'log10_pvals', 'log10_pvals_adj']. When plotting logfoldchanges a divergent
    colormap is recommended. See examples below.
var_names
    Genes to plot. Sometimes is useful to pass a specific list of var names (e.g. genes)
    to check their fold changes or p-values, instead of the top/bottom genes. The
    var_names could be a dictionary or a list as in :func:`~scanpy.pl.dotplot` or
    :func:`~scanpy.pl.matrixplot`. See examples below.\
""""""",doc_rank_genes_groups_values_to_plot,"""""""\
values_to_plot
    Instead of the mean gene value, plot the values computed by `sc.rank_genes_groups`.
    The options are: ['scores', 'logfoldchanges', 'pvals', 'pvals_adj',
    'log10_pvals', 'log10_pvals_adj']. When plotting logfoldchanges a divergent
    colormap is recommended. See examples below.
var_names
    Genes to plot. Sometimes is useful to pass a specific list of var names (e.g. genes)
    to check their fold changes or p-values, instead of the top/bottom genes. The
    var_names could be a dictionary or a list as in :func:`~scanpy.pl.dotplot` or
    :func:`~scanpy.pl.matrixplot`. See examples below.\
""""""","Constant: doc_rank_genes_groups_values_to_plot = """"""\
values_to_plot
    Instead of the mean gene value, plot the values computed by `sc.rank_genes_groups`.
    The options are: ['scores', 'logfoldchanges', 'pvals', 'pvals_adj',
    'log10_pvals', 'log10_pvals_adj']. When plotting logfoldchanges a divergent
    colormap is recommended. See examples below.
var_names
    Genes to plot. Sometimes is useful to pass a specific list of var names (e.g. genes)
    to check their fold changes or p-values, instead of the top/bottom genes. The
    var_names could be a dictionary or a list as in :func:`~scanpy.pl.dotplot` or
    :func:`~scanpy.pl.matrixplot`. See examples below.\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_scatter_spatial = """"""\
library_id
    library_id for Visium data, e.g. key in `adata.uns[""spatial""]`.
img_key
    Key for image data, used to get `img` and `scale_factor` from `""images""`
    and `""scalefactors""` entires for this library. To use spatial coordinates,
    but not plot an image, pass `img_key=None`.
img
    image data to plot, overrides `img_key`.
scale_factor
    Scaling factor used to map from coordinate space to pixel space.
    Found by default if `library_id` and `img_key` can be resolved.
    Otherwise defaults to `1.`.
spot_size
    Diameter of spot (in coordinate space) for each point. Diameter
    in pixels of the spots will be `size * spot_size * scale_factor`.
    This argument is required if it cannot be resolved from library info.
crop_coord
    Coordinates to use for cropping the image (left, right, top, bottom).
    These coordinates are expected to be in pixel space (same as `basis`)
    and will be transformed by `scale_factor`.
    If not provided, image is automatically cropped to bounds of `basis`,
    plus a border.
alpha_img
    Alpha value for image.
bw
    Plot image data in gray scale.\
""""""",constant,"doc_scatter_spatial = """"""\
library_id
    library_id for Visium data, e.g. key in `adata.uns[""spatial""]`.
img_key
    Key for image data, used to get `img` and `scale_factor` from `""images""`
    and `""scalefactors""` entires for this library. To use spatial coordinates,
    but not plot an image, pass `img_key=None`.
img
    image data to plot, overrides `img_key`.
scale_factor
    Scaling factor used to map from coordinate space to pixel space.
    Found by default if `library_id` and `img_key` can be resolved.
    Otherwise defaults to `1.`.
spot_size
    Diameter of spot (in coordinate space) for each point. Diameter
    in pixels of the spots will be `size * spot_size * scale_factor`.
    This argument is required if it cannot be resolved from library info.
crop_coord
    Coordinates to use for cropping the image (left, right, top, bottom).
    These coordinates are expected to be in pixel space (same as `basis`)
    and will be transformed by `scale_factor`.
    If not provided, image is automatically cropped to bounds of `basis`,
    plus a border.
alpha_img
    Alpha value for image.
bw
    Plot image data in gray scale.\
""""""",doc_scatter_spatial,"""""""\
library_id
    library_id for Visium data, e.g. key in `adata.uns[""spatial""]`.
img_key
    Key for image data, used to get `img` and `scale_factor` from `""images""`
    and `""scalefactors""` entires for this library. To use spatial coordinates,
    but not plot an image, pass `img_key=None`.
img
    image data to plot, overrides `img_key`.
scale_factor
    Scaling factor used to map from coordinate space to pixel space.
    Found by default if `library_id` and `img_key` can be resolved.
    Otherwise defaults to `1.`.
spot_size
    Diameter of spot (in coordinate space) for each point. Diameter
    in pixels of the spots will be `size * spot_size * scale_factor`.
    This argument is required if it cannot be resolved from library info.
crop_coord
    Coordinates to use for cropping the image (left, right, top, bottom).
    These coordinates are expected to be in pixel space (same as `basis`)
    and will be transformed by `scale_factor`.
    If not provided, image is automatically cropped to bounds of `basis`,
    plus a border.
alpha_img
    Alpha value for image.
bw
    Plot image data in gray scale.\
""""""","Constant: doc_scatter_spatial = """"""\
library_id
    library_id for Visium data, e.g. key in `adata.uns[""spatial""]`.
img_key
    Key for image data, used to get `img` and `scale_factor` from `""images""`
    and `""scalefactors""` entires for this library. To use spatial coordinates,
    but not plot an image, pass `img_key=None`.
img
    image data to plot, overrides `img_key`.
scale_factor
    Scaling factor used to map from coordinate space to pixel space.
    Found by default if `library_id` and `img_key` can be resolved.
    Otherwise defaults to `1.`.
spot_size
    Diameter of spot (in coordinate space) for each point. Diameter
    in pixels of the spots will be `size * spot_size * scale_factor`.
    This argument is required if it cannot be resolved from library info.
crop_coord
    Coordinates to use for cropping the image (left, right, top, bottom).
    These coordinates are expected to be in pixel space (same as `basis`)
    and will be transformed by `scale_factor`.
    If not provided, image is automatically cropped to bounds of `basis`,
    plus a border.
alpha_img
    Alpha value for image.
bw
    Plot image data in gray scale.\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_docs.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_docs.py,python,,,,,,Directory: scanpy\plotting\_docs.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dotplot.py,python,"DotPlot.DEFAULT_SAVE_PREFIX = ""dotplot_""",class_field,,,,"Class field: DotPlot.DEFAULT_SAVE_PREFIX = ""dotplot_""",scverse,scanpy,1.10.1,,,,,,,DotPlot,,,"DEFAULT_SAVE_PREFIX = ""dotplot_""",,,,,DEFAULT_SAVE_PREFIX,,"""dotplot_""",
scverse_scanpy_1.10.1,_dotplot.py,python,"DotPlot.DEFAULT_COLORMAP = ""winter""",class_field,,,,"Class field: DotPlot.DEFAULT_COLORMAP = ""winter""",scverse,scanpy,1.10.1,,,,,,,DotPlot,,,"DEFAULT_COLORMAP = ""winter""",,,,,DEFAULT_COLORMAP,,"""winter""",
scverse_scanpy_1.10.1,_dotplot.py,python,"DotPlot.DEFAULT_COLOR_ON = ""dot""",class_field,,,,"Class field: DotPlot.DEFAULT_COLOR_ON = ""dot""",scverse,scanpy,1.10.1,,,,,,,DotPlot,,,"DEFAULT_COLOR_ON = ""dot""",,,,,DEFAULT_COLOR_ON,,"""dot""",
scverse_scanpy_1.10.1,_dotplot.py,python,DotPlot.DEFAULT_DOT_MAX = None,class_field,,,,Class field: DotPlot.DEFAULT_DOT_MAX = None,scverse,scanpy,1.10.1,,,,,,,DotPlot,,,DEFAULT_DOT_MAX = None,,,,,DEFAULT_DOT_MAX,,,
scverse_scanpy_1.10.1,_dotplot.py,python,DotPlot.DEFAULT_DOT_MIN = None,class_field,,,,Class field: DotPlot.DEFAULT_DOT_MIN = None,scverse,scanpy,1.10.1,,,,,,,DotPlot,,,DEFAULT_DOT_MIN = None,,,,,DEFAULT_DOT_MIN,,,
scverse_scanpy_1.10.1,_dotplot.py,python,DotPlot.DEFAULT_SMALLEST_DOT = 0.0,class_field,,,,Class field: DotPlot.DEFAULT_SMALLEST_DOT = 0.0,scverse,scanpy,1.10.1,,,,,,,DotPlot,,,DEFAULT_SMALLEST_DOT = 0.0,,,,,DEFAULT_SMALLEST_DOT,,0.0,
scverse_scanpy_1.10.1,_dotplot.py,python,DotPlot.DEFAULT_LARGEST_DOT = 200.0,class_field,,,,Class field: DotPlot.DEFAULT_LARGEST_DOT = 200.0,scverse,scanpy,1.10.1,,,,,,,DotPlot,,,DEFAULT_LARGEST_DOT = 200.0,,,,,DEFAULT_LARGEST_DOT,,200.0,
scverse_scanpy_1.10.1,_dotplot.py,python,"DotPlot.DEFAULT_DOT_EDGECOLOR = ""black""",class_field,,,,"Class field: DotPlot.DEFAULT_DOT_EDGECOLOR = ""black""",scverse,scanpy,1.10.1,,,,,,,DotPlot,,,"DEFAULT_DOT_EDGECOLOR = ""black""",,,,,DEFAULT_DOT_EDGECOLOR,,"""black""",
scverse_scanpy_1.10.1,_dotplot.py,python,DotPlot.DEFAULT_DOT_EDGELW = 0.2,class_field,,,,Class field: DotPlot.DEFAULT_DOT_EDGELW = 0.2,scverse,scanpy,1.10.1,,,,,,,DotPlot,,,DEFAULT_DOT_EDGELW = 0.2,,,,,DEFAULT_DOT_EDGELW,,0.2,
scverse_scanpy_1.10.1,_dotplot.py,python,DotPlot.DEFAULT_SIZE_EXPONENT = 1.5,class_field,,,,Class field: DotPlot.DEFAULT_SIZE_EXPONENT = 1.5,scverse,scanpy,1.10.1,,,,,,,DotPlot,,,DEFAULT_SIZE_EXPONENT = 1.5,,,,,DEFAULT_SIZE_EXPONENT,,1.5,
scverse_scanpy_1.10.1,_dotplot.py,python,"DotPlot.DEFAULT_SIZE_LEGEND_TITLE = ""Fraction of cells\nin group (%)""",class_field,,,,"Class field: DotPlot.DEFAULT_SIZE_LEGEND_TITLE = ""Fraction of cells\nin group (%)""",scverse,scanpy,1.10.1,,,,,,,DotPlot,,,"DEFAULT_SIZE_LEGEND_TITLE = ""Fraction of cells\nin group (%)""",,,,,DEFAULT_SIZE_LEGEND_TITLE,,"""Fraction of cells\nin group (%)""",
scverse_scanpy_1.10.1,_dotplot.py,python,"DotPlot.DEFAULT_COLOR_LEGEND_TITLE = ""Mean expression\nin group""",class_field,,,,"Class field: DotPlot.DEFAULT_COLOR_LEGEND_TITLE = ""Mean expression\nin group""",scverse,scanpy,1.10.1,,,,,,,DotPlot,,,"DEFAULT_COLOR_LEGEND_TITLE = ""Mean expression\nin group""",,,,,DEFAULT_COLOR_LEGEND_TITLE,,"""Mean expression\nin group""",
scverse_scanpy_1.10.1,_dotplot.py,python,DotPlot.DEFAULT_LEGENDS_WIDTH = 1.5,class_field,,,,Class field: DotPlot.DEFAULT_LEGENDS_WIDTH = 1.5,scverse,scanpy,1.10.1,,,,,,,DotPlot,,,DEFAULT_LEGENDS_WIDTH = 1.5,,,,,DEFAULT_LEGENDS_WIDTH,,1.5,
scverse_scanpy_1.10.1,_dotplot.py,python,DotPlot.DEFAULT_PLOT_X_PADDING = 0.8,class_field,,,,Class field: DotPlot.DEFAULT_PLOT_X_PADDING = 0.8,scverse,scanpy,1.10.1,,,,,,,DotPlot,,,DEFAULT_PLOT_X_PADDING = 0.8,,,,,DEFAULT_PLOT_X_PADDING,,0.8,
scverse_scanpy_1.10.1,_dotplot.py,python,DotPlot.DEFAULT_PLOT_Y_PADDING = 1.0,class_field,,,,Class field: DotPlot.DEFAULT_PLOT_Y_PADDING = 1.0,scverse,scanpy,1.10.1,,,,,,,DotPlot,,,DEFAULT_PLOT_Y_PADDING = 1.0,,,,,DEFAULT_PLOT_Y_PADDING,,1.0,
scverse_scanpy_1.10.1,_dotplot.py,python,"[old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""expression_cutoff"",
        ""mean_only_expressed"",
        ""standard_scale"",
        ""dot_color_df"",
        ""dot_size_df"",
        ""ax"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )] DotPlot.__init__(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        expression_cutoff: float = 0.0,
        mean_only_expressed: bool = False,
        standard_scale: Literal[""var"", ""group""] | None = None,
        dot_color_df: pd.DataFrame | None = None,
        dot_size_df: pd.DataFrame | None = None,
        ax: _AxesSubplot | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",class_method,,,,"Class method: [old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""expression_cutoff"",
        ""mean_only_expressed"",
        ""standard_scale"",
        ""dot_color_df"",
        ""dot_size_df"",
        ""ax"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )] DotPlot.__init__(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        expression_cutoff: float = 0.0,
        mean_only_expressed: bool = False,
        standard_scale: Literal[""var"", ""group""] | None = None,
        dot_color_df: pd.DataFrame | None = None,
        dot_size_df: pd.DataFrame | None = None,
        ax: _AxesSubplot | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",scverse,scanpy,1.10.1,,,,,,,DotPlot,__init__,"(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        expression_cutoff: float = 0.0,
        mean_only_expressed: bool = False,
        standard_scale: Literal[""var"", ""group""] | None = None,
        dot_color_df: pd.DataFrame | None = None,
        dot_size_df: pd.DataFrame | None = None,
        ax: _AxesSubplot | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",,,,,,,,,"old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""expression_cutoff"",
        ""mean_only_expressed"",
        ""standard_scale"",
        ""dot_color_df"",
        ""dot_size_df"",
        ""ax"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )"
scverse_scanpy_1.10.1,_dotplot.py,python,"[old_positionals(
        ""cmap"",
        ""color_on"",
        ""dot_max"",
        ""dot_min"",
        ""smallest_dot"",
        ""largest_dot"",
        ""dot_edge_color"",
        ""dot_edge_lw"",
        ""size_exponent"",
        ""grid"",
        ""x_padding"",
        ""y_padding"",
    )] DotPlot.style(
        self,
        *,
        cmap: str = DEFAULT_COLORMAP,
        color_on: Literal[""dot"", ""square""] | None = DEFAULT_COLOR_ON,
        dot_max: float | None = DEFAULT_DOT_MAX,
        dot_min: float | None = DEFAULT_DOT_MIN,
        smallest_dot: float | None = DEFAULT_SMALLEST_DOT,
        largest_dot: float | None = DEFAULT_LARGEST_DOT,
        dot_edge_color: ColorLike | None = DEFAULT_DOT_EDGECOLOR,
        dot_edge_lw: float | None = DEFAULT_DOT_EDGELW,
        size_exponent: float | None = DEFAULT_SIZE_EXPONENT,
        grid: float | None = False,
        x_padding: float | None = DEFAULT_PLOT_X_PADDING,
        y_padding: float | None = DEFAULT_PLOT_Y_PADDING,
    )",class_method,,,,"Class method: [old_positionals(
        ""cmap"",
        ""color_on"",
        ""dot_max"",
        ""dot_min"",
        ""smallest_dot"",
        ""largest_dot"",
        ""dot_edge_color"",
        ""dot_edge_lw"",
        ""size_exponent"",
        ""grid"",
        ""x_padding"",
        ""y_padding"",
    )] DotPlot.style(
        self,
        *,
        cmap: str = DEFAULT_COLORMAP,
        color_on: Literal[""dot"", ""square""] | None = DEFAULT_COLOR_ON,
        dot_max: float | None = DEFAULT_DOT_MAX,
        dot_min: float | None = DEFAULT_DOT_MIN,
        smallest_dot: float | None = DEFAULT_SMALLEST_DOT,
        largest_dot: float | None = DEFAULT_LARGEST_DOT,
        dot_edge_color: ColorLike | None = DEFAULT_DOT_EDGECOLOR,
        dot_edge_lw: float | None = DEFAULT_DOT_EDGELW,
        size_exponent: float | None = DEFAULT_SIZE_EXPONENT,
        grid: float | None = False,
        x_padding: float | None = DEFAULT_PLOT_X_PADDING,
        y_padding: float | None = DEFAULT_PLOT_Y_PADDING,
    )",scverse,scanpy,1.10.1,,,,,,,DotPlot,style,"(
        self,
        *,
        cmap: str = DEFAULT_COLORMAP,
        color_on: Literal[""dot"", ""square""] | None = DEFAULT_COLOR_ON,
        dot_max: float | None = DEFAULT_DOT_MAX,
        dot_min: float | None = DEFAULT_DOT_MIN,
        smallest_dot: float | None = DEFAULT_SMALLEST_DOT,
        largest_dot: float | None = DEFAULT_LARGEST_DOT,
        dot_edge_color: ColorLike | None = DEFAULT_DOT_EDGECOLOR,
        dot_edge_lw: float | None = DEFAULT_DOT_EDGELW,
        size_exponent: float | None = DEFAULT_SIZE_EXPONENT,
        grid: float | None = False,
        x_padding: float | None = DEFAULT_PLOT_X_PADDING,
        y_padding: float | None = DEFAULT_PLOT_Y_PADDING,
    )",,,,,,,,,"old_positionals(
        ""cmap"",
        ""color_on"",
        ""dot_max"",
        ""dot_min"",
        ""smallest_dot"",
        ""largest_dot"",
        ""dot_edge_color"",
        ""dot_edge_lw"",
        ""size_exponent"",
        ""grid"",
        ""x_padding"",
        ""y_padding"",
    )"
scverse_scanpy_1.10.1,_dotplot.py,python,"[old_positionals(
        ""show"",
        ""show_size_legend"",
        ""show_colorbar"",
        ""size_title"",
        ""colorbar_title"",
        ""width"",
    )] DotPlot.legend(
        self,
        *,
        show: bool | None = True,
        show_size_legend: bool | None = True,
        show_colorbar: bool | None = True,
        size_title: str | None = DEFAULT_SIZE_LEGEND_TITLE,
        colorbar_title: str | None = DEFAULT_COLOR_LEGEND_TITLE,
        width: float | None = DEFAULT_LEGENDS_WIDTH,
    )",class_method,,,,"Class method: [old_positionals(
        ""show"",
        ""show_size_legend"",
        ""show_colorbar"",
        ""size_title"",
        ""colorbar_title"",
        ""width"",
    )] DotPlot.legend(
        self,
        *,
        show: bool | None = True,
        show_size_legend: bool | None = True,
        show_colorbar: bool | None = True,
        size_title: str | None = DEFAULT_SIZE_LEGEND_TITLE,
        colorbar_title: str | None = DEFAULT_COLOR_LEGEND_TITLE,
        width: float | None = DEFAULT_LEGENDS_WIDTH,
    )",scverse,scanpy,1.10.1,,,,,,,DotPlot,legend,"(
        self,
        *,
        show: bool | None = True,
        show_size_legend: bool | None = True,
        show_colorbar: bool | None = True,
        size_title: str | None = DEFAULT_SIZE_LEGEND_TITLE,
        colorbar_title: str | None = DEFAULT_COLOR_LEGEND_TITLE,
        width: float | None = DEFAULT_LEGENDS_WIDTH,
    )",,,,,,,,,"old_positionals(
        ""show"",
        ""show_size_legend"",
        ""show_colorbar"",
        ""size_title"",
        ""colorbar_title"",
        ""width"",
    )"
scverse_scanpy_1.10.1,_dotplot.py,python,"DotPlot._plot_size_legend(self, size_legend_ax: Axes)",class_method,,,,"Class method: DotPlot._plot_size_legend(self, size_legend_ax: Axes)",scverse,scanpy,1.10.1,,,,,,,DotPlot,_plot_size_legend,"(self, size_legend_ax: Axes)",,,,,,,,,
scverse_scanpy_1.10.1,_dotplot.py,python,"DotPlot._plot_legend(self, legend_ax, return_ax_dict, normalize)",class_method,,,,"Class method: DotPlot._plot_legend(self, legend_ax, return_ax_dict, normalize)",scverse,scanpy,1.10.1,,,,,,,DotPlot,_plot_legend,"(self, legend_ax, return_ax_dict, normalize)",,,,,,,,,
scverse_scanpy_1.10.1,_dotplot.py,python,"DotPlot._mainplot(self, ax)",class_method,,,,"Class method: DotPlot._mainplot(self, ax)",scverse,scanpy,1.10.1,,,,,,,DotPlot,_mainplot,"(self, ax)",,,,,,,,,
scverse_scanpy_1.10.1,_dotplot.py,python,"[staticmethod] DotPlot._dotplot(
        dot_size,
        dot_color,
        dot_ax,
        *,
        cmap: str = ""Reds"",
        color_on: str | None = ""dot"",
        y_label: str | None = None,
        dot_max: float | None = None,
        dot_min: float | None = None,
        standard_scale: Literal[""var"", ""group""] | None = None,
        smallest_dot: float | None = 0.0,
        largest_dot: float | None = 200,
        size_exponent: float | None = 2,
        edge_color: ColorLike | None = None,
        edge_lw: float | None = None,
        grid: bool | None = False,
        x_padding: float | None = 0.8,
        y_padding: float | None = 1.0,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",class_method,,,,"Class method: [staticmethod] DotPlot._dotplot(
        dot_size,
        dot_color,
        dot_ax,
        *,
        cmap: str = ""Reds"",
        color_on: str | None = ""dot"",
        y_label: str | None = None,
        dot_max: float | None = None,
        dot_min: float | None = None,
        standard_scale: Literal[""var"", ""group""] | None = None,
        smallest_dot: float | None = 0.0,
        largest_dot: float | None = 200,
        size_exponent: float | None = 2,
        edge_color: ColorLike | None = None,
        edge_lw: float | None = None,
        grid: bool | None = False,
        x_padding: float | None = 0.8,
        y_padding: float | None = 1.0,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",scverse,scanpy,1.10.1,,,,,,,DotPlot,_dotplot,"(
        dot_size,
        dot_color,
        dot_ax,
        *,
        cmap: str = ""Reds"",
        color_on: str | None = ""dot"",
        y_label: str | None = None,
        dot_max: float | None = None,
        dot_min: float | None = None,
        standard_scale: Literal[""var"", ""group""] | None = None,
        smallest_dot: float | None = 0.0,
        largest_dot: float | None = 200,
        size_exponent: float | None = 2,
        edge_color: ColorLike | None = None,
        edge_lw: float | None = None,
        grid: bool | None = False,
        x_padding: float | None = 0.8,
        y_padding: float | None = 1.0,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",,,,,,,,,staticmethod
scverse_scanpy_1.10.1,_dotplot.py,python,DotPlot(BasePlot),class,,,,Class: DotPlot(BasePlot),scverse,scanpy,1.10.1,,,,,,,DotPlot,,,,,,,,,(BasePlot),,
scverse_scanpy_1.10.1,_dotplot.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dotplot.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dotplot.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dotplot.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,matplotlib,pyplot,,,,,,,,,,,,,,,
,_dotplot.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_dotplot.py,python,,,,,,Directory: scanpy\plotting\_dotplot.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_matrixplot.py,python,"MatrixPlot.DEFAULT_SAVE_PREFIX = ""matrixplot_""",class_field,,,,"Class field: MatrixPlot.DEFAULT_SAVE_PREFIX = ""matrixplot_""",scverse,scanpy,1.10.1,,,,,,,MatrixPlot,,,"DEFAULT_SAVE_PREFIX = ""matrixplot_""",,,,,DEFAULT_SAVE_PREFIX,,"""matrixplot_""",
scverse_scanpy_1.10.1,_matrixplot.py,python,"MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE = ""Mean expression\nin group""",class_field,,,,"Class field: MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE = ""Mean expression\nin group""",scverse,scanpy,1.10.1,,,,,,,MatrixPlot,,,"DEFAULT_COLOR_LEGEND_TITLE = ""Mean expression\nin group""",,,,,DEFAULT_COLOR_LEGEND_TITLE,,"""Mean expression\nin group""",
scverse_scanpy_1.10.1,_matrixplot.py,python,"MatrixPlot.DEFAULT_COLORMAP = rcParams[""image.cmap""]",class_field,,,,"Class field: MatrixPlot.DEFAULT_COLORMAP = rcParams[""image.cmap""]",scverse,scanpy,1.10.1,,,,,,,MatrixPlot,,,"DEFAULT_COLORMAP = rcParams[""image.cmap""]",,,,,DEFAULT_COLORMAP,,"rcParams[""image.cmap""]",
scverse_scanpy_1.10.1,_matrixplot.py,python,"MatrixPlot.DEFAULT_EDGE_COLOR = ""gray""",class_field,,,,"Class field: MatrixPlot.DEFAULT_EDGE_COLOR = ""gray""",scverse,scanpy,1.10.1,,,,,,,MatrixPlot,,,"DEFAULT_EDGE_COLOR = ""gray""",,,,,DEFAULT_EDGE_COLOR,,"""gray""",
scverse_scanpy_1.10.1,_matrixplot.py,python,MatrixPlot.DEFAULT_EDGE_LW = 0.1,class_field,,,,Class field: MatrixPlot.DEFAULT_EDGE_LW = 0.1,scverse,scanpy,1.10.1,,,,,,,MatrixPlot,,,DEFAULT_EDGE_LW = 0.1,,,,,DEFAULT_EDGE_LW,,0.1,
scverse_scanpy_1.10.1,_matrixplot.py,python,"[old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""standard_scale"",
        ""ax"",
        ""values_df"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )] MatrixPlot.__init__(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        standard_scale: Literal[""var"", ""group""] = None,
        ax: _AxesSubplot | None = None,
        values_df: pd.DataFrame | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",class_method,,,,"Class method: [old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""standard_scale"",
        ""ax"",
        ""values_df"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )] MatrixPlot.__init__(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        standard_scale: Literal[""var"", ""group""] = None,
        ax: _AxesSubplot | None = None,
        values_df: pd.DataFrame | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",scverse,scanpy,1.10.1,,,,,,,MatrixPlot,__init__,"(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        standard_scale: Literal[""var"", ""group""] = None,
        ax: _AxesSubplot | None = None,
        values_df: pd.DataFrame | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",,,,,,,,,"old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""standard_scale"",
        ""ax"",
        ""values_df"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )"
scverse_scanpy_1.10.1,_matrixplot.py,python,"MatrixPlot.style(
        self,
        cmap: str = DEFAULT_COLORMAP,
        edge_color: ColorLike | None = DEFAULT_EDGE_COLOR,
        edge_lw: float | None = DEFAULT_EDGE_LW,
    )",class_method,,,,"Class method: MatrixPlot.style(
        self,
        cmap: str = DEFAULT_COLORMAP,
        edge_color: ColorLike | None = DEFAULT_EDGE_COLOR,
        edge_lw: float | None = DEFAULT_EDGE_LW,
    )",scverse,scanpy,1.10.1,,,,,,,MatrixPlot,style,"(
        self,
        cmap: str = DEFAULT_COLORMAP,
        edge_color: ColorLike | None = DEFAULT_EDGE_COLOR,
        edge_lw: float | None = DEFAULT_EDGE_LW,
    )",,,,,,,,,
scverse_scanpy_1.10.1,_matrixplot.py,python,"MatrixPlot._mainplot(self, ax)",class_method,,,,"Class method: MatrixPlot._mainplot(self, ax)",scverse,scanpy,1.10.1,,,,,,,MatrixPlot,_mainplot,"(self, ax)",,,,,,,,,
scverse_scanpy_1.10.1,_matrixplot.py,python,MatrixPlot(BasePlot),class,,,,Class: MatrixPlot(BasePlot),scverse,scanpy,1.10.1,,,,,,,MatrixPlot,,,,,,,,,(BasePlot),,
scverse_scanpy_1.10.1,_matrixplot.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_matrixplot.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_matrixplot.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_matrixplot.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,matplotlib,pyplot,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_matrixplot.py,python,rcParams from matplotlib,import,,,,Import: rcParams from matplotlib,scverse,scanpy,1.10.1,from matplotlib import rcParams,matplotlib,rcParams,,,,,,,,,,,,,,,
,_matrixplot.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_matrixplot.py,python,,,,,,Directory: scanpy\plotting\_matrixplot.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_preprocessing.py,python,"filter_genes_dispersion(
    result: np.recarray,
    log: bool = False,
    show: bool | None = None,
    save: bool | str | None = None,
) -> None",function,,,,"Function: filter_genes_dispersion(
    result: np.recarray,
    log: bool = False,
    show: bool | None = None,
    save: bool | str | None = None,
) -> None",scverse,scanpy,1.10.1,,,,filter_genes_dispersion,"(
    result: np.recarray,
    log: bool = False,
    show: bool | None = None,
    save: bool | str | None = None,
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_preprocessing.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_preprocessing.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_preprocessing.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_preprocessing.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,matplotlib,pyplot,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_preprocessing.py,python,rcParams from matplotlib,import,,,,Import: rcParams from matplotlib,scverse,scanpy,1.10.1,from matplotlib import rcParams,matplotlib,rcParams,,,,,,,,,,,,,,,
,_preprocessing.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_preprocessing.py,python,,,,,,Directory: scanpy\plotting\_preprocessing.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,matplotlib,pyplot,,,,,,,,,,,,,,,
,_qc.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_qc.py,python,,,,,,Directory: scanpy\plotting\_qc.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rcmod.py,python,"set_rcParams_scanpy(fontsize=14, color_map=None)",function,,,,"Function: set_rcParams_scanpy(fontsize=14, color_map=None)",scverse,scanpy,1.10.1,,,,set_rcParams_scanpy,"(fontsize=14, color_map=None)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rcmod.py,python,set_rcParams_defaults(),function,,,,Function: set_rcParams_defaults(),scverse,scanpy,1.10.1,,,,set_rcParams_defaults,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rcmod.py,python,matplotlib,import,,,,Import: matplotlib,scverse,scanpy,1.10.1,import matplotlib as mpl,,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rcmod.py,python,cycler from cycler,import,,,,Import: cycler from cycler,scverse,scanpy,1.10.1,from cycler import cycler,cycler,cycler,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rcmod.py,python,rcParams from matplotlib,import,,,,Import: rcParams from matplotlib,scverse,scanpy,1.10.1,from matplotlib import rcParams,matplotlib,rcParams,,,,,,,,,,,,,,,
,_rcmod.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_rcmod.py,python,,,,,,Directory: scanpy\plotting\_rcmod.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scrublet.py,python,"_plot_scores(
    ax: Axes,
    scores: np.ndarray,
    scale: Scale,
    title: str,
    threshold: float | None = None,
) -> None",function,,,,"Function: _plot_scores(
    ax: Axes,
    scores: np.ndarray,
    scale: Scale,
    title: str,
    threshold: float | None = None,
) -> None",scverse,scanpy,1.10.1,,,,_plot_scores,"(
    ax: Axes,
    scores: np.ndarray,
    scale: Scale,
    title: str,
    threshold: float | None = None,
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scrublet.py,python,"Scale = _U[Literal[""linear"", ""log"", ""symlog"", ""logit""], str]",constant,"Scale = _U[Literal[""linear"", ""log"", ""symlog"", ""logit""], str]",Scale,"_U[Literal[""linear"", ""log"", ""symlog"", ""logit""], str]","Constant: Scale = _U[Literal[""linear"", ""log"", ""symlog"", ""logit""], str]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scrublet.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scrublet.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scrublet.py,python,Union from typing,import,,,,Import: Union from typing,scverse,scanpy,1.10.1,from typing import Union as _U,typing,Union,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scrublet.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scrublet.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scrublet.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,matplotlib,pyplot,,,,,,,,,,,,,,,
,_scrublet.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_scrublet.py,python,,,,,,Directory: scanpy\plotting\_scrublet.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,"StackedViolin.DEFAULT_SAVE_PREFIX = ""stacked_violin_""",class_field,,,,"Class field: StackedViolin.DEFAULT_SAVE_PREFIX = ""stacked_violin_""",scverse,scanpy,1.10.1,,,,,,,StackedViolin,,,"DEFAULT_SAVE_PREFIX = ""stacked_violin_""",,,,,DEFAULT_SAVE_PREFIX,,"""stacked_violin_""",
scverse_scanpy_1.10.1,_stacked_violin.py,python,"StackedViolin.DEFAULT_COLOR_LEGEND_TITLE = ""Median expression\nin group""",class_field,,,,"Class field: StackedViolin.DEFAULT_COLOR_LEGEND_TITLE = ""Median expression\nin group""",scverse,scanpy,1.10.1,,,,,,,StackedViolin,,,"DEFAULT_COLOR_LEGEND_TITLE = ""Median expression\nin group""",,,,,DEFAULT_COLOR_LEGEND_TITLE,,"""Median expression\nin group""",
scverse_scanpy_1.10.1,_stacked_violin.py,python,"StackedViolin.DEFAULT_COLORMAP = ""Blues""",class_field,,,,"Class field: StackedViolin.DEFAULT_COLORMAP = ""Blues""",scverse,scanpy,1.10.1,,,,,,,StackedViolin,,,"DEFAULT_COLORMAP = ""Blues""",,,,,DEFAULT_COLORMAP,,"""Blues""",
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_STRIPPLOT = False,class_field,,,,Class field: StackedViolin.DEFAULT_STRIPPLOT = False,scverse,scanpy,1.10.1,,,,,,,StackedViolin,,,DEFAULT_STRIPPLOT = False,,,,,DEFAULT_STRIPPLOT,,False,
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_JITTER = False,class_field,,,,Class field: StackedViolin.DEFAULT_JITTER = False,scverse,scanpy,1.10.1,,,,,,,StackedViolin,,,DEFAULT_JITTER = False,,,,,DEFAULT_JITTER,,False,
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_JITTER_SIZE = 1,class_field,,,,Class field: StackedViolin.DEFAULT_JITTER_SIZE = 1,scverse,scanpy,1.10.1,,,,,,,StackedViolin,,,DEFAULT_JITTER_SIZE = 1,,,,,DEFAULT_JITTER_SIZE,,1,
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_LINE_WIDTH = 0.2,class_field,,,,Class field: StackedViolin.DEFAULT_LINE_WIDTH = 0.2,scverse,scanpy,1.10.1,,,,,,,StackedViolin,,,DEFAULT_LINE_WIDTH = 0.2,,,,,DEFAULT_LINE_WIDTH,,0.2,
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_ROW_PALETTE = None,class_field,,,,Class field: StackedViolin.DEFAULT_ROW_PALETTE = None,scverse,scanpy,1.10.1,,,,,,,StackedViolin,,,DEFAULT_ROW_PALETTE = None,,,,,DEFAULT_ROW_PALETTE,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,"StackedViolin.DEFAULT_DENSITY_NORM: Literal[""area"", ""count"", ""width""] = ""width""",class_field,,,,"Class field: StackedViolin.DEFAULT_DENSITY_NORM: Literal[""area"", ""count"", ""width""] = ""width""",scverse,scanpy,1.10.1,,,,,,,StackedViolin,,,"DEFAULT_DENSITY_NORM: Literal[""area"", ""count"", ""width""] = ""width""",,,,,DEFAULT_DENSITY_NORM,,"""width""",
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_PLOT_YTICKLABELS = False,class_field,,,,Class field: StackedViolin.DEFAULT_PLOT_YTICKLABELS = False,scverse,scanpy,1.10.1,,,,,,,StackedViolin,,,DEFAULT_PLOT_YTICKLABELS = False,,,,,DEFAULT_PLOT_YTICKLABELS,,False,
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_YLIM = None,class_field,,,,Class field: StackedViolin.DEFAULT_YLIM = None,scverse,scanpy,1.10.1,,,,,,,StackedViolin,,,DEFAULT_YLIM = None,,,,,DEFAULT_YLIM,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_PLOT_X_PADDING = 0.5,class_field,,,,Class field: StackedViolin.DEFAULT_PLOT_X_PADDING = 0.5,scverse,scanpy,1.10.1,,,,,,,StackedViolin,,,DEFAULT_PLOT_X_PADDING = 0.5,,,,,DEFAULT_PLOT_X_PADDING,,0.5,
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_PLOT_Y_PADDING = 0.5,class_field,,,,Class field: StackedViolin.DEFAULT_PLOT_Y_PADDING = 0.5,scverse,scanpy,1.10.1,,,,,,,StackedViolin,,,DEFAULT_PLOT_Y_PADDING = 0.5,,,,,DEFAULT_PLOT_Y_PADDING,,0.5,
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_CUT = 0,class_field,,,,Class field: StackedViolin.DEFAULT_CUT = 0,scverse,scanpy,1.10.1,,,,,,,StackedViolin,,,DEFAULT_CUT = 0,,,,,DEFAULT_CUT,,0,
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin.DEFAULT_INNER = None,class_field,,,,Class field: StackedViolin.DEFAULT_INNER = None,scverse,scanpy,1.10.1,,,,,,,StackedViolin,,,DEFAULT_INNER = None,,,,,DEFAULT_INNER,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,"StackedViolin.__getattribute__(self, name: str) -> object",class_method,,,,"Class method: StackedViolin.__getattribute__(self, name: str) -> object",scverse,scanpy,1.10.1,,,,,,,StackedViolin,__getattribute__,"(self, name: str)",,,object,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,"[old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""standard_scale"",
        ""ax"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )] StackedViolin.__init__(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        standard_scale: Literal[""var"", ""group""] | None = None,
        ax: _AxesSubplot | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",class_method,,,,"Class method: [old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""standard_scale"",
        ""ax"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )] StackedViolin.__init__(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        standard_scale: Literal[""var"", ""group""] | None = None,
        ax: _AxesSubplot | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",scverse,scanpy,1.10.1,,,,,,,StackedViolin,__init__,"(
        self,
        adata: AnnData,
        var_names: _VarNames | Mapping[str, _VarNames],
        groupby: str | Sequence[str],
        *,
        use_raw: bool | None = None,
        log: bool = False,
        num_categories: int = 7,
        categories_order: Sequence[str] | None = None,
        title: str | None = None,
        figsize: tuple[float, float] | None = None,
        gene_symbols: str | None = None,
        var_group_positions: Sequence[tuple[int, int]] | None = None,
        var_group_labels: Sequence[str] | None = None,
        var_group_rotation: float | None = None,
        layer: str | None = None,
        standard_scale: Literal[""var"", ""group""] | None = None,
        ax: _AxesSubplot | None = None,
        vmin: float | None = None,
        vmax: float | None = None,
        vcenter: float | None = None,
        norm: Normalize | None = None,
        **kwds,
    )",,,,,,,,,"old_positionals(
        ""use_raw"",
        ""log"",
        ""num_categories"",
        ""categories_order"",
        ""title"",
        ""figsize"",
        ""gene_symbols"",
        ""var_group_positions"",
        ""var_group_labels"",
        ""var_group_rotation"",
        ""layer"",
        ""standard_scale"",
        ""ax"",
        ""vmin"",
        ""vmax"",
        ""vcenter"",
        ""norm"",
    )"
scverse_scanpy_1.10.1,_stacked_violin.py,python,"[old_positionals(
        ""cmap"",
        ""stripplot"",
        ""jitter"",
        ""jitter_size"",
        ""linewidth"",
        ""row_palette"",
        ""density_norm"",
        ""yticklabels"",
        ""ylim"",
        ""x_padding"",
        ""y_padding"",
    )] StackedViolin.style(
        self,
        *,
        cmap: str | None = DEFAULT_COLORMAP,
        stripplot: bool | None = DEFAULT_STRIPPLOT,
        jitter: float | bool | None = DEFAULT_JITTER,
        jitter_size: int | None = DEFAULT_JITTER_SIZE,
        linewidth: float | None = DEFAULT_LINE_WIDTH,
        row_palette: str | None = DEFAULT_ROW_PALETTE,
        density_norm: Literal[""area"", ""count"", ""width""] = DEFAULT_DENSITY_NORM,
        yticklabels: bool | None = DEFAULT_PLOT_YTICKLABELS,
        ylim: tuple[float, float] | None = DEFAULT_YLIM,
        x_padding: float | None = DEFAULT_PLOT_X_PADDING,
        y_padding: float | None = DEFAULT_PLOT_Y_PADDING,
        # deprecated
        scale: Literal[""area"", ""count"", ""width""] | None = None,
    )",class_method,,,,"Class method: [old_positionals(
        ""cmap"",
        ""stripplot"",
        ""jitter"",
        ""jitter_size"",
        ""linewidth"",
        ""row_palette"",
        ""density_norm"",
        ""yticklabels"",
        ""ylim"",
        ""x_padding"",
        ""y_padding"",
    )] StackedViolin.style(
        self,
        *,
        cmap: str | None = DEFAULT_COLORMAP,
        stripplot: bool | None = DEFAULT_STRIPPLOT,
        jitter: float | bool | None = DEFAULT_JITTER,
        jitter_size: int | None = DEFAULT_JITTER_SIZE,
        linewidth: float | None = DEFAULT_LINE_WIDTH,
        row_palette: str | None = DEFAULT_ROW_PALETTE,
        density_norm: Literal[""area"", ""count"", ""width""] = DEFAULT_DENSITY_NORM,
        yticklabels: bool | None = DEFAULT_PLOT_YTICKLABELS,
        ylim: tuple[float, float] | None = DEFAULT_YLIM,
        x_padding: float | None = DEFAULT_PLOT_X_PADDING,
        y_padding: float | None = DEFAULT_PLOT_Y_PADDING,
        # deprecated
        scale: Literal[""area"", ""count"", ""width""] | None = None,
    )",scverse,scanpy,1.10.1,,,,,,,StackedViolin,style,"(
        self,
        *,
        cmap: str | None = DEFAULT_COLORMAP,
        stripplot: bool | None = DEFAULT_STRIPPLOT,
        jitter: float | bool | None = DEFAULT_JITTER,
        jitter_size: int | None = DEFAULT_JITTER_SIZE,
        linewidth: float | None = DEFAULT_LINE_WIDTH,
        row_palette: str | None = DEFAULT_ROW_PALETTE,
        density_norm: Literal[""area"", ""count"", ""width""] = DEFAULT_DENSITY_NORM,
        yticklabels: bool | None = DEFAULT_PLOT_YTICKLABELS,
        ylim: tuple[float, float] | None = DEFAULT_YLIM,
        x_padding: float | None = DEFAULT_PLOT_X_PADDING,
        y_padding: float | None = DEFAULT_PLOT_Y_PADDING,
        # deprecated
        scale: Literal[""area"", ""count"", ""width""] | None = None,
    )",,,,,,,,,"old_positionals(
        ""cmap"",
        ""stripplot"",
        ""jitter"",
        ""jitter_size"",
        ""linewidth"",
        ""row_palette"",
        ""density_norm"",
        ""yticklabels"",
        ""ylim"",
        ""x_padding"",
        ""y_padding"",
    )"
scverse_scanpy_1.10.1,_stacked_violin.py,python,"StackedViolin._mainplot(self, ax)",class_method,,,,"Class method: StackedViolin._mainplot(self, ax)",scverse,scanpy,1.10.1,,,,,,,StackedViolin,_mainplot,"(self, ax)",,,,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,"StackedViolin._make_rows_of_violinplots(
        self, ax, _matrix, colormap_array, _color_df, x_spacer_size, y_spacer_size
    )",class_method,,,,"Class method: StackedViolin._make_rows_of_violinplots(
        self, ax, _matrix, colormap_array, _color_df, x_spacer_size, y_spacer_size
    )",scverse,scanpy,1.10.1,,,,,,,StackedViolin,_make_rows_of_violinplots,"(
        self, ax, _matrix, colormap_array, _color_df, x_spacer_size, y_spacer_size
    )",,,,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,"StackedViolin._setup_violin_axes_ticks(self, row_ax, num_cols)",class_method,,,,"Class method: StackedViolin._setup_violin_axes_ticks(self, row_ax, num_cols)",scverse,scanpy,1.10.1,,,,,,,StackedViolin,_setup_violin_axes_ticks,"(self, row_ax, num_cols)",,,,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,StackedViolin(BasePlot),class,,,,Class: StackedViolin(BasePlot),scverse,scanpy,1.10.1,,,,,,,StackedViolin,,,,,,,,,(BasePlot),,
scverse_scanpy_1.10.1,_stacked_violin.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,matplotlib,pyplot,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,Normalize from matplotlib.colors,local_import,,,,Import: Normalize from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Normalize, is_color_like",matplotlib.colors,Normalize,,,matplotlib.colors,,,,,,,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,is_color_like from matplotlib.colors,local_import,,,,Import: is_color_like from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Normalize, is_color_like",matplotlib.colors,is_color_like,,,matplotlib.colors,,,,,,,,,,,,
scverse_scanpy_1.10.1,_stacked_violin.py,python,Version from packaging.version,local_import,,,,Import: Version from packaging.version,scverse,scanpy,1.10.1,from packaging.version import Version,packaging.version,Version,,,packaging.version,,,,,,,,,,,,
,_stacked_violin.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_stacked_violin.py,python,,,,,,Directory: scanpy\plotting\_stacked_violin.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_AxesSubplot(Axes, axes.SubplotBase)",class,,,,"Class: _AxesSubplot(Axes, axes.SubplotBase)",scverse,scanpy,1.10.1,,,,,,,_AxesSubplot,,,,,,,,,"(Axes, axes.SubplotBase)",,
scverse_scanpy_1.10.1,_utils.py,python,"timeseries(X, **kwargs)",function,,,,"Function: timeseries(X, **kwargs)",scverse,scanpy,1.10.1,,,,timeseries,"(X, **kwargs)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"timeseries_subplot(
    X: np.ndarray,
    *,
    time=None,
    color=None,
    var_names=(),
    highlights_x=(),
    xlabel="""",
    ylabel=""gene expression"",
    yticks=None,
    xlim=None,
    legend=True,
    palette: Sequence[str] | Cycler | None = None,
    color_map=""viridis"",
    ax: Axes | None = None,
    marker: str | Sequence[str] = ""."",
)",function,,,,"Function: timeseries_subplot(
    X: np.ndarray,
    *,
    time=None,
    color=None,
    var_names=(),
    highlights_x=(),
    xlabel="""",
    ylabel=""gene expression"",
    yticks=None,
    xlim=None,
    legend=True,
    palette: Sequence[str] | Cycler | None = None,
    color_map=""viridis"",
    ax: Axes | None = None,
    marker: str | Sequence[str] = ""."",
)",scverse,scanpy,1.10.1,,,,timeseries_subplot,"(
    X: np.ndarray,
    *,
    time=None,
    color=None,
    var_names=(),
    highlights_x=(),
    xlabel="""",
    ylabel=""gene expression"",
    yticks=None,
    xlim=None,
    legend=True,
    palette: Sequence[str] | Cycler | None = None,
    color_map=""viridis"",
    ax: Axes | None = None,
    marker: str | Sequence[str] = ""."",
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"timeseries_as_heatmap(
    X: np.ndarray, *, var_names: Collection[str] = (), highlights_x=(), color_map=None
)",function,,,,"Function: timeseries_as_heatmap(
    X: np.ndarray, *, var_names: Collection[str] = (), highlights_x=(), color_map=None
)",scverse,scanpy,1.10.1,,,,timeseries_as_heatmap,"(
    X: np.ndarray, *, var_names: Collection[str] = (), highlights_x=(), color_map=None
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"savefig(writekey, dpi=None, ext=None)",function,,,,"Function: savefig(writekey, dpi=None, ext=None)",scverse,scanpy,1.10.1,,,,savefig,"(writekey, dpi=None, ext=None)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"savefig_or_show(
    writekey: str,
    show: bool | None = None,
    dpi: int | None = None,
    ext: str | None = None,
    save: bool | str | None = None,
)",function,,,,"Function: savefig_or_show(
    writekey: str,
    show: bool | None = None,
    dpi: int | None = None,
    ext: str | None = None,
    save: bool | str | None = None,
)",scverse,scanpy,1.10.1,,,,savefig_or_show,"(
    writekey: str,
    show: bool | None = None,
    dpi: int | None = None,
    ext: str | None = None,
    save: bool | str | None = None,
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"default_palette(
    palette: str | Sequence[str] | Cycler | None = None,
) -> str | Cycler",function,,,,"Function: default_palette(
    palette: str | Sequence[str] | Cycler | None = None,
) -> str | Cycler",scverse,scanpy,1.10.1,,,,default_palette,"(
    palette: str | Sequence[str] | Cycler | None = None,
)",,,,,,,,str | Cycler,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_validate_palette(adata: AnnData, key: str) -> None",function,,,,"Function: _validate_palette(adata: AnnData, key: str) -> None",scverse,scanpy,1.10.1,,,,_validate_palette,"(adata: AnnData, key: str)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_set_colors_for_categorical_obs(
    adata, value_to_plot, palette: str | Sequence[str] | Cycler
)",function,,,,"Function: _set_colors_for_categorical_obs(
    adata, value_to_plot, palette: str | Sequence[str] | Cycler
)",scverse,scanpy,1.10.1,,,,_set_colors_for_categorical_obs,"(
    adata, value_to_plot, palette: str | Sequence[str] | Cycler
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_set_default_colors_for_categorical_obs(adata, value_to_plot)",function,,,,"Function: _set_default_colors_for_categorical_obs(adata, value_to_plot)",scverse,scanpy,1.10.1,,,,_set_default_colors_for_categorical_obs,"(adata, value_to_plot)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"add_colors_for_categorical_sample_annotation(
    adata, key, palette=None, force_update_colors=False
)",function,,,,"Function: add_colors_for_categorical_sample_annotation(
    adata, key, palette=None, force_update_colors=False
)",scverse,scanpy,1.10.1,,,,add_colors_for_categorical_sample_annotation,"(
    adata, key, palette=None, force_update_colors=False
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"plot_edges(axs, adata, basis, edges_width, edges_color, *, neighbors_key=None)",function,,,,"Function: plot_edges(axs, adata, basis, edges_width, edges_color, *, neighbors_key=None)",scverse,scanpy,1.10.1,,,,plot_edges,"(axs, adata, basis, edges_width, edges_color, *, neighbors_key=None)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"plot_arrows(axs, adata, basis, arrows_kwds=None)",function,,,,"Function: plot_arrows(axs, adata, basis, arrows_kwds=None)",scverse,scanpy,1.10.1,,,,plot_arrows,"(axs, adata, basis, arrows_kwds=None)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"scatter_group(
    ax: Axes,
    key: str,
    cat_code: int,
    adata: AnnData,
    Y: np.ndarray,
    *,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    size: int = 3,
    alpha: float | None = None,
    marker: MarkerType = ""."",
)",function,,,,"Function: scatter_group(
    ax: Axes,
    key: str,
    cat_code: int,
    adata: AnnData,
    Y: np.ndarray,
    *,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    size: int = 3,
    alpha: float | None = None,
    marker: MarkerType = ""."",
)",scverse,scanpy,1.10.1,,,,scatter_group,"(
    ax: Axes,
    key: str,
    cat_code: int,
    adata: AnnData,
    Y: np.ndarray,
    *,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    size: int = 3,
    alpha: float | None = None,
    marker: MarkerType = ""."",
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"setup_axes(
    ax: Axes | Sequence[Axes] | None = None,
    *,
    panels=""blue"",
    colorbars=(False,),
    right_margin=None,
    left_margin=None,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    show_ticks=False,
)",function,,,,"Function: setup_axes(
    ax: Axes | Sequence[Axes] | None = None,
    *,
    panels=""blue"",
    colorbars=(False,),
    right_margin=None,
    left_margin=None,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    show_ticks=False,
)",scverse,scanpy,1.10.1,,,,setup_axes,"(
    ax: Axes | Sequence[Axes] | None = None,
    *,
    panels=""blue"",
    colorbars=(False,),
    right_margin=None,
    left_margin=None,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    show_ticks=False,
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"scatter_base(
    Y: np.ndarray,
    *,
    colors: str | Sequence[ColorLike | np.ndarray] = ""blue"",
    sort_order=True,
    alpha=None,
    highlights=(),
    right_margin=None,
    left_margin=None,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    title=None,
    component_name=""DC"",
    component_indexnames=(1, 2, 3),
    axis_labels=None,
    colorbars=(False,),
    sizes=(1,),
    markers=""."",
    color_map=""viridis"",
    show_ticks=True,
    ax=None,
) -> Axes | list[Axes]",function,,,,"Function: scatter_base(
    Y: np.ndarray,
    *,
    colors: str | Sequence[ColorLike | np.ndarray] = ""blue"",
    sort_order=True,
    alpha=None,
    highlights=(),
    right_margin=None,
    left_margin=None,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    title=None,
    component_name=""DC"",
    component_indexnames=(1, 2, 3),
    axis_labels=None,
    colorbars=(False,),
    sizes=(1,),
    markers=""."",
    color_map=""viridis"",
    show_ticks=True,
    ax=None,
) -> Axes | list[Axes]",scverse,scanpy,1.10.1,,,,scatter_base,"(
    Y: np.ndarray,
    *,
    colors: str | Sequence[ColorLike | np.ndarray] = ""blue"",
    sort_order=True,
    alpha=None,
    highlights=(),
    right_margin=None,
    left_margin=None,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    title=None,
    component_name=""DC"",
    component_indexnames=(1, 2, 3),
    axis_labels=None,
    colorbars=(False,),
    sizes=(1,),
    markers=""."",
    color_map=""viridis"",
    show_ticks=True,
    ax=None,
)",,,,,,,,Axes | list[Axes],,,,,
scverse_scanpy_1.10.1,_utils.py,python,"scatter_single(ax: Axes, Y: np.ndarray, *args, **kwargs)",function,,,,"Function: scatter_single(ax: Axes, Y: np.ndarray, *args, **kwargs)",scverse,scanpy,1.10.1,,,,scatter_single,"(ax: Axes, Y: np.ndarray, *args, **kwargs)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"arrows_transitions(ax: Axes, X: np.ndarray, indices: Sequence[int], weight=None)",function,,,,"Function: arrows_transitions(ax: Axes, X: np.ndarray, indices: Sequence[int], weight=None)",scverse,scanpy,1.10.1,,,,arrows_transitions,"(ax: Axes, X: np.ndarray, indices: Sequence[int], weight=None)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"ticks_formatter(x, pos)",function,,,,"Function: ticks_formatter(x, pos)",scverse,scanpy,1.10.1,,,,ticks_formatter,"(x, pos)",,,,,,,,,"# pretty scientific notation",,,,
scverse_scanpy_1.10.1,_utils.py,python,pimp_axis(x_or_y_ax),function,,,,Function: pimp_axis(x_or_y_ax),scverse,scanpy,1.10.1,,,,pimp_axis,(x_or_y_ax),,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,scale_to_zero_one(x),function,,,,Function: scale_to_zero_one(x),scverse,scanpy,1.10.1,,,,scale_to_zero_one,(x),,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"hierarchy_pos(G, root, levels=None, width=1.0, height=1.0)",function,,,,"Function: hierarchy_pos(G, root, levels=None, width=1.0, height=1.0)",scverse,scanpy,1.10.1,,,,hierarchy_pos,"(G, root, levels=None, width=1.0, height=1.0)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"hierarchy_sc(G, root, node_sets)",function,,,,"Function: hierarchy_sc(G, root, node_sets)",scverse,scanpy,1.10.1,,,,hierarchy_sc,"(G, root, node_sets)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"zoom(ax, xy=""x"", factor=1)",function,,,,"Function: zoom(ax, xy=""x"", factor=1)",scverse,scanpy,1.10.1,,,,zoom,"(ax, xy=""x"", factor=1)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"get_ax_size(ax: Axes, fig: Figure)",function,,,,"Function: get_ax_size(ax: Axes, fig: Figure)",scverse,scanpy,1.10.1,,,,get_ax_size,"(ax: Axes, fig: Figure)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"axis_to_data(ax: Axes, width: float)",function,,,,"Function: axis_to_data(ax: Axes, width: float)",scverse,scanpy,1.10.1,,,,axis_to_data,"(ax: Axes, width: float)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"axis_to_data_points(ax: Axes, points_axis: np.ndarray)",function,,,,"Function: axis_to_data_points(ax: Axes, points_axis: np.ndarray)",scverse,scanpy,1.10.1,,,,axis_to_data_points,"(ax: Axes, points_axis: np.ndarray)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"data_to_axis_points(ax: Axes, points_data: np.ndarray)",function,,,,"Function: data_to_axis_points(ax: Axes, points_data: np.ndarray)",scverse,scanpy,1.10.1,,,,data_to_axis_points,"(ax: Axes, points_data: np.ndarray)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,check_projection(projection),function,,,,Function: check_projection(projection),scverse,scanpy,1.10.1,,,,check_projection,(projection),,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"circles(
    x, y, *, s, ax, marker=None, c=""b"", vmin=None, vmax=None, scale_factor=1.0, **kwargs
)",function,,,,"Function: circles(
    x, y, *, s, ax, marker=None, c=""b"", vmin=None, vmax=None, scale_factor=1.0, **kwargs
)",scverse,scanpy,1.10.1,,,,circles,"(
    x, y, *, s, ax, marker=None, c=""b"", vmin=None, vmax=None, scale_factor=1.0, **kwargs
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"make_grid_spec(
    ax_or_figsize: tuple[int, int] | _AxesSubplot,
    *,
    nrows: int,
    ncols: int,
    wspace: float | None = None,
    hspace: float | None = None,
    width_ratios: Sequence[float] | None = None,
    height_ratios: Sequence[float] | None = None,
) -> tuple[Figure, gridspec.GridSpecBase]",function,,,,"Function: make_grid_spec(
    ax_or_figsize: tuple[int, int] | _AxesSubplot,
    *,
    nrows: int,
    ncols: int,
    wspace: float | None = None,
    hspace: float | None = None,
    width_ratios: Sequence[float] | None = None,
    height_ratios: Sequence[float] | None = None,
) -> tuple[Figure, gridspec.GridSpecBase]",scverse,scanpy,1.10.1,,,,make_grid_spec,"(
    ax_or_figsize: tuple[int, int] | _AxesSubplot,
    *,
    nrows: int,
    ncols: int,
    wspace: float | None = None,
    hspace: float | None = None,
    width_ratios: Sequence[float] | None = None,
    height_ratios: Sequence[float] | None = None,
)",,,,,,,,"tuple[Figure, gridspec.GridSpecBase]",,,,,
scverse_scanpy_1.10.1,_utils.py,python,"fix_kwds(kwds_dict, **kwargs)",function,,,,"Function: fix_kwds(kwds_dict, **kwargs)",scverse,scanpy,1.10.1,,,,fix_kwds,"(kwds_dict, **kwargs)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_get_basis(adata: AnnData, basis: str)",function,,,,"Function: _get_basis(adata: AnnData, basis: str)",scverse,scanpy,1.10.1,,,,_get_basis,"(adata: AnnData, basis: str)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"check_colornorm(vmin=None, vmax=None, vcenter=None, norm=None)",function,,,,"Function: check_colornorm(vmin=None, vmax=None, vcenter=None, norm=None)",scverse,scanpy,1.10.1,,,,check_colornorm,"(vmin=None, vmax=None, vcenter=None, norm=None)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_deprecated_scale(density_norm: DN, scale: DN | None, *, default: DN) -> DN",function,,,,"Function: _deprecated_scale(density_norm: DN, scale: DN | None, *, default: DN) -> DN",scverse,scanpy,1.10.1,,,,_deprecated_scale,"(density_norm: DN, scale: DN | None, *, default: DN)",,,,,,,,DN,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"ColorLike = _U[str, tuple[float, ...]]",constant,"ColorLike = _U[str, tuple[float, ...]]",ColorLike,"_U[str, tuple[float, ...]]","Constant: ColorLike = _U[str, tuple[float, ...]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_IGraphLayout = Literal[""fa"", ""fr"", ""rt"", ""rt_circular"", ""drl"", ""eq_tree"", ...]",constant,"_IGraphLayout = Literal[""fa"", ""fr"", ""rt"", ""rt_circular"", ""drl"", ""eq_tree"", ...]",_IGraphLayout,"Literal[""fa"", ""fr"", ""rt"", ""rt_circular"", ""drl"", ""eq_tree"", ...]","Constant: _IGraphLayout = Literal[""fa"", ""fr"", ""rt"", ""rt_circular"", ""drl"", ""eq_tree"", ...]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_FontWeight = Literal[""light"", ""normal"", ""medium"", ""semibold"", ""bold"", ""heavy"", ""black""]",constant,"_FontWeight = Literal[""light"", ""normal"", ""medium"", ""semibold"", ""bold"", ""heavy"", ""black""]",_FontWeight,"Literal[""light"", ""normal"", ""medium"", ""semibold"", ""bold"", ""heavy"", ""black""]","Constant: _FontWeight = Literal[""light"", ""normal"", ""medium"", ""semibold"", ""bold"", ""heavy"", ""black""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_FontSize = Literal[
    ""xx-small"", ""x-small"", ""small"", ""medium"", ""large"", ""x-large"", ""xx-large""
]",constant,"_FontSize = Literal[
    ""xx-small"", ""x-small"", ""small"", ""medium"", ""large"", ""x-large"", ""xx-large""
]",_FontSize,"Literal[
    ""xx-small"", ""x-small"", ""small"", ""medium"", ""large"", ""x-large"", ""xx-large""
]","Constant: _FontSize = Literal[
    ""xx-small"", ""x-small"", ""small"", ""medium"", ""large"", ""x-large"", ""xx-large""
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"VBound = _U[str, float, Callable[[Sequence[float]], float]]",constant,"VBound = _U[str, float, Callable[[Sequence[float]], float]]",VBound,"_U[str, float, Callable[[Sequence[float]], float]]","Constant: VBound = _U[str, float, Callable[[Sequence[float]], float]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"additional_colors = {
    ""gold2"": ""#eec900"",
    ""firebrick3"": ""#cd2626"",
    ""khaki2"": ""#eee685"",
    ""slategray3"": ""#9fb6cd"",
    ""palegreen3"": ""#7ccd7c"",
    ""tomato2"": ""#ee5c42"",
    ""grey80"": ""#cccccc"",
    ""grey90"": ""#e5e5e5"",
    ""wheat4"": ""#8b7e66"",
    ""grey65"": ""#a6a6a6"",
    ""grey10"": ""#1a1a1a"",
    ""grey20"": ""#333333"",
    ""grey50"": ""#7f7f7f"",
    ""grey30"": ""#4d4d4d"",
    ""grey40"": ""#666666"",
    ""antiquewhite2"": ""#eedfcc"",
    ""grey77"": ""#c4c4c4"",
    ""snow4"": ""#8b8989"",
    ""chartreuse3"": ""#66cd00"",
    ""yellow4"": ""#8b8b00"",
    ""darkolivegreen2"": ""#bcee68"",
    ""olivedrab3"": ""#9acd32"",
    ""azure3"": ""#c1cdcd"",
    ""violetred"": ""#d02090"",
    ""mediumpurple3"": ""#8968cd"",
    ""purple4"": ""#551a8b"",
    ""seagreen4"": ""#2e8b57"",
    ""lightblue3"": ""#9ac0cd"",
    ""orchid3"": ""#b452cd"",
    ""indianred 3"": ""#cd5555"",
    ""grey60"": ""#999999"",
    ""mediumorchid1"": ""#e066ff"",
    ""plum3"": ""#cd96cd"",
    ""palevioletred3"": ""#cd6889"",
}",constant,"additional_colors = {
    ""gold2"": ""#eec900"",
    ""firebrick3"": ""#cd2626"",
    ""khaki2"": ""#eee685"",
    ""slategray3"": ""#9fb6cd"",
    ""palegreen3"": ""#7ccd7c"",
    ""tomato2"": ""#ee5c42"",
    ""grey80"": ""#cccccc"",
    ""grey90"": ""#e5e5e5"",
    ""wheat4"": ""#8b7e66"",
    ""grey65"": ""#a6a6a6"",
    ""grey10"": ""#1a1a1a"",
    ""grey20"": ""#333333"",
    ""grey50"": ""#7f7f7f"",
    ""grey30"": ""#4d4d4d"",
    ""grey40"": ""#666666"",
    ""antiquewhite2"": ""#eedfcc"",
    ""grey77"": ""#c4c4c4"",
    ""snow4"": ""#8b8989"",
    ""chartreuse3"": ""#66cd00"",
    ""yellow4"": ""#8b8b00"",
    ""darkolivegreen2"": ""#bcee68"",
    ""olivedrab3"": ""#9acd32"",
    ""azure3"": ""#c1cdcd"",
    ""violetred"": ""#d02090"",
    ""mediumpurple3"": ""#8968cd"",
    ""purple4"": ""#551a8b"",
    ""seagreen4"": ""#2e8b57"",
    ""lightblue3"": ""#9ac0cd"",
    ""orchid3"": ""#b452cd"",
    ""indianred 3"": ""#cd5555"",
    ""grey60"": ""#999999"",
    ""mediumorchid1"": ""#e066ff"",
    ""plum3"": ""#cd96cd"",
    ""palevioletred3"": ""#cd6889"",
}",additional_colors,"{
    ""gold2"": ""#eec900"",
    ""firebrick3"": ""#cd2626"",
    ""khaki2"": ""#eee685"",
    ""slategray3"": ""#9fb6cd"",
    ""palegreen3"": ""#7ccd7c"",
    ""tomato2"": ""#ee5c42"",
    ""grey80"": ""#cccccc"",
    ""grey90"": ""#e5e5e5"",
    ""wheat4"": ""#8b7e66"",
    ""grey65"": ""#a6a6a6"",
    ""grey10"": ""#1a1a1a"",
    ""grey20"": ""#333333"",
    ""grey50"": ""#7f7f7f"",
    ""grey30"": ""#4d4d4d"",
    ""grey40"": ""#666666"",
    ""antiquewhite2"": ""#eedfcc"",
    ""grey77"": ""#c4c4c4"",
    ""snow4"": ""#8b8989"",
    ""chartreuse3"": ""#66cd00"",
    ""yellow4"": ""#8b8b00"",
    ""darkolivegreen2"": ""#bcee68"",
    ""olivedrab3"": ""#9acd32"",
    ""azure3"": ""#c1cdcd"",
    ""violetred"": ""#d02090"",
    ""mediumpurple3"": ""#8968cd"",
    ""purple4"": ""#551a8b"",
    ""seagreen4"": ""#2e8b57"",
    ""lightblue3"": ""#9ac0cd"",
    ""orchid3"": ""#b452cd"",
    ""indianred 3"": ""#cd5555"",
    ""grey60"": ""#999999"",
    ""mediumorchid1"": ""#e066ff"",
    ""plum3"": ""#cd96cd"",
    ""palevioletred3"": ""#cd6889"",
}","Constant: additional_colors = {
    ""gold2"": ""#eec900"",
    ""firebrick3"": ""#cd2626"",
    ""khaki2"": ""#eee685"",
    ""slategray3"": ""#9fb6cd"",
    ""palegreen3"": ""#7ccd7c"",
    ""tomato2"": ""#ee5c42"",
    ""grey80"": ""#cccccc"",
    ""grey90"": ""#e5e5e5"",
    ""wheat4"": ""#8b7e66"",
    ""grey65"": ""#a6a6a6"",
    ""grey10"": ""#1a1a1a"",
    ""grey20"": ""#333333"",
    ""grey50"": ""#7f7f7f"",
    ""grey30"": ""#4d4d4d"",
    ""grey40"": ""#666666"",
    ""antiquewhite2"": ""#eedfcc"",
    ""grey77"": ""#c4c4c4"",
    ""snow4"": ""#8b8989"",
    ""chartreuse3"": ""#66cd00"",
    ""yellow4"": ""#8b8b00"",
    ""darkolivegreen2"": ""#bcee68"",
    ""olivedrab3"": ""#9acd32"",
    ""azure3"": ""#c1cdcd"",
    ""violetred"": ""#d02090"",
    ""mediumpurple3"": ""#8968cd"",
    ""purple4"": ""#551a8b"",
    ""seagreen4"": ""#2e8b57"",
    ""lightblue3"": ""#9ac0cd"",
    ""orchid3"": ""#b452cd"",
    ""indianred 3"": ""#cd5555"",
    ""grey60"": ""#999999"",
    ""mediumorchid1"": ""#e066ff"",
    ""plum3"": ""#cd96cd"",
    ""palevioletred3"": ""#cd6889"",
}",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"DN = Literal[""area"", ""count"", ""width""]",constant,"DN = Literal[""area"", ""count"", ""width""]",DN,"Literal[""area"", ""count"", ""width""]","Constant: DN = Literal[""area"", ""count"", ""width""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,collections.abc,import,,,,Import: collections.abc,scverse,scanpy,1.10.1,import collections.abc as cabc,,collections.abc,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Callable, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Callable from typing,import,,,,Import: Callable from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Callable, Literal",typing,Callable,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Callable, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Union from typing,import,,,,Import: Union from typing,scverse,scanpy,1.10.1,from typing import Union as _U,typing,Union,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,matplotlib,import,,,,Import: matplotlib,scverse,scanpy,1.10.1,import matplotlib as mpl,,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Cycler from cycler,import,,,,Import: Cycler from cycler,scverse,scanpy,1.10.1,"from cycler import Cycler, cycler",cycler,Cycler,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,cycler from cycler,import,,,,Import: cycler from cycler,scverse,scanpy,1.10.1,"from cycler import Cycler, cycler",cycler,cycler,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,axes from matplotlib,import,,,,Import: axes from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import axes, gridspec, rcParams, ticker",matplotlib,axes,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,gridspec from matplotlib,import,,,,Import: gridspec from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import axes, gridspec, rcParams, ticker",matplotlib,gridspec,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,rcParams from matplotlib,import,,,,Import: rcParams from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import axes, gridspec, rcParams, ticker",matplotlib,rcParams,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,ticker from matplotlib,import,,,,Import: ticker from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import axes, gridspec, rcParams, ticker",matplotlib,ticker,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,matplotlib,pyplot,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Collection from collections.abc,local_import,,,,Import: Collection from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Collection, Sequence",collections.abc,Collection,,,collections.abc,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Sequence from collections.abc,local_import,,,,Import: Sequence from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Collection, Sequence",collections.abc,Sequence,,,collections.abc,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Axes from matplotlib.axes,local_import,,,,Import: Axes from matplotlib.axes,scverse,scanpy,1.10.1,from matplotlib.axes import Axes,matplotlib.axes,Axes,,,matplotlib.axes,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,PatchCollection from matplotlib.collections,local_import,,,,Import: PatchCollection from matplotlib.collections,scverse,scanpy,1.10.1,from matplotlib.collections import PatchCollection,matplotlib.collections,PatchCollection,,,matplotlib.collections,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Colormap from matplotlib.colors,local_import,,,,Import: Colormap from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Colormap, is_color_like",matplotlib.colors,Colormap,,,matplotlib.colors,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,is_color_like from matplotlib.colors,local_import,,,,Import: is_color_like from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Colormap, is_color_like",matplotlib.colors,is_color_like,,,matplotlib.colors,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Figure from matplotlib.figure,local_import,,,,Import: Figure from matplotlib.figure,scverse,scanpy,1.10.1,from matplotlib.figure import Figure,matplotlib.figure,Figure,,,matplotlib.figure,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,SubplotParams from matplotlib.figure,local_import,,,,Import: SubplotParams from matplotlib.figure,scverse,scanpy,1.10.1,from matplotlib.figure import SubplotParams as sppars,matplotlib.figure,SubplotParams,,,matplotlib.figure,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Circle from matplotlib.patches,local_import,,,,Import: Circle from matplotlib.patches,scverse,scanpy,1.10.1,from matplotlib.patches import Circle,matplotlib.patches,Circle,,,matplotlib.patches,,,,,,,,,,,,
,_utils.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_utils.py,python,,,,,,Directory: scanpy\plotting\_utils.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""palettes"",
    ""clustermap"",
    ""correlation_matrix"",
    ""dendrogram"",
    ""heatmap"",
    ""ranking"",
    ""scatter"",
    ""tracksplot"",
    ""violin"",
    ""DotPlot"",
    ""dotplot"",
    ""MatrixPlot"",
    ""matrixplot"",
    ""filter_genes_dispersion"",
    ""highly_variable_genes"",
    ""highest_expr_genes"",
    ""set_rcParams_defaults"",
    ""set_rcParams_scanpy"",
    ""StackedViolin"",
    ""stacked_violin"",
    ""scrublet_score_distribution"",
    ""dpt_groups_pseudotime"",
    ""dpt_timeseries"",
    ""embedding_density"",
    ""pca_loadings"",
    ""pca_overview"",
    ""pca_scatter"",
    ""pca_variance_ratio"",
    ""rank_genes_groups"",
    ""rank_genes_groups_dotplot"",
    ""rank_genes_groups_heatmap"",
    ""rank_genes_groups_matrixplot"",
    ""rank_genes_groups_stacked_violin"",
    ""rank_genes_groups_tracksplot"",
    ""rank_genes_groups_violin"",
    ""sim"",
    ""paga"",
    ""paga_compare"",
    ""paga_path"",
    ""diffmap"",
    ""draw_graph"",
    ""embedding"",
    ""pca"",
    ""spatial"",
    ""tsne"",
    ""umap"",
    ""matrix"",
    ""timeseries"",
    ""timeseries_as_heatmap"",
    ""timeseries_subplot"",
]",constant,"__all__ = [
    ""palettes"",
    ""clustermap"",
    ""correlation_matrix"",
    ""dendrogram"",
    ""heatmap"",
    ""ranking"",
    ""scatter"",
    ""tracksplot"",
    ""violin"",
    ""DotPlot"",
    ""dotplot"",
    ""MatrixPlot"",
    ""matrixplot"",
    ""filter_genes_dispersion"",
    ""highly_variable_genes"",
    ""highest_expr_genes"",
    ""set_rcParams_defaults"",
    ""set_rcParams_scanpy"",
    ""StackedViolin"",
    ""stacked_violin"",
    ""scrublet_score_distribution"",
    ""dpt_groups_pseudotime"",
    ""dpt_timeseries"",
    ""embedding_density"",
    ""pca_loadings"",
    ""pca_overview"",
    ""pca_scatter"",
    ""pca_variance_ratio"",
    ""rank_genes_groups"",
    ""rank_genes_groups_dotplot"",
    ""rank_genes_groups_heatmap"",
    ""rank_genes_groups_matrixplot"",
    ""rank_genes_groups_stacked_violin"",
    ""rank_genes_groups_tracksplot"",
    ""rank_genes_groups_violin"",
    ""sim"",
    ""paga"",
    ""paga_compare"",
    ""paga_path"",
    ""diffmap"",
    ""draw_graph"",
    ""embedding"",
    ""pca"",
    ""spatial"",
    ""tsne"",
    ""umap"",
    ""matrix"",
    ""timeseries"",
    ""timeseries_as_heatmap"",
    ""timeseries_subplot"",
]",__all__,"[
    ""palettes"",
    ""clustermap"",
    ""correlation_matrix"",
    ""dendrogram"",
    ""heatmap"",
    ""ranking"",
    ""scatter"",
    ""tracksplot"",
    ""violin"",
    ""DotPlot"",
    ""dotplot"",
    ""MatrixPlot"",
    ""matrixplot"",
    ""filter_genes_dispersion"",
    ""highly_variable_genes"",
    ""highest_expr_genes"",
    ""set_rcParams_defaults"",
    ""set_rcParams_scanpy"",
    ""StackedViolin"",
    ""stacked_violin"",
    ""scrublet_score_distribution"",
    ""dpt_groups_pseudotime"",
    ""dpt_timeseries"",
    ""embedding_density"",
    ""pca_loadings"",
    ""pca_overview"",
    ""pca_scatter"",
    ""pca_variance_ratio"",
    ""rank_genes_groups"",
    ""rank_genes_groups_dotplot"",
    ""rank_genes_groups_heatmap"",
    ""rank_genes_groups_matrixplot"",
    ""rank_genes_groups_stacked_violin"",
    ""rank_genes_groups_tracksplot"",
    ""rank_genes_groups_violin"",
    ""sim"",
    ""paga"",
    ""paga_compare"",
    ""paga_path"",
    ""diffmap"",
    ""draw_graph"",
    ""embedding"",
    ""pca"",
    ""spatial"",
    ""tsne"",
    ""umap"",
    ""matrix"",
    ""timeseries"",
    ""timeseries_as_heatmap"",
    ""timeseries_subplot"",
]","Constant: __all__ = [
    ""palettes"",
    ""clustermap"",
    ""correlation_matrix"",
    ""dendrogram"",
    ""heatmap"",
    ""ranking"",
    ""scatter"",
    ""tracksplot"",
    ""violin"",
    ""DotPlot"",
    ""dotplot"",
    ""MatrixPlot"",
    ""matrixplot"",
    ""filter_genes_dispersion"",
    ""highly_variable_genes"",
    ""highest_expr_genes"",
    ""set_rcParams_defaults"",
    ""set_rcParams_scanpy"",
    ""StackedViolin"",
    ""stacked_violin"",
    ""scrublet_score_distribution"",
    ""dpt_groups_pseudotime"",
    ""dpt_timeseries"",
    ""embedding_density"",
    ""pca_loadings"",
    ""pca_overview"",
    ""pca_scatter"",
    ""pca_variance_ratio"",
    ""rank_genes_groups"",
    ""rank_genes_groups_dotplot"",
    ""rank_genes_groups_heatmap"",
    ""rank_genes_groups_matrixplot"",
    ""rank_genes_groups_stacked_violin"",
    ""rank_genes_groups_tracksplot"",
    ""rank_genes_groups_violin"",
    ""sim"",
    ""paga"",
    ""paga_compare"",
    ""paga_path"",
    ""diffmap"",
    ""draw_graph"",
    ""embedding"",
    ""pca"",
    ""spatial"",
    ""tsne"",
    ""umap"",
    ""matrix"",
    ""timeseries"",
    ""timeseries_as_heatmap"",
    ""timeseries_subplot"",
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\plotting,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\plotting\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,"_compute_pos(
    adjacency_solid,
    *,
    layout=None,
    random_state=0,
    init_pos=None,
    adj_tree=None,
    root=0,
    layout_kwds: Mapping[str, Any] = MappingProxyType({}),
)",function,,,,"Function: _compute_pos(
    adjacency_solid,
    *,
    layout=None,
    random_state=0,
    init_pos=None,
    adj_tree=None,
    root=0,
    layout_kwds: Mapping[str, Any] = MappingProxyType({}),
)",scverse,scanpy,1.10.1,,,,_compute_pos,"(
    adjacency_solid,
    *,
    layout=None,
    random_state=0,
    init_pos=None,
    adj_tree=None,
    root=0,
    layout_kwds: Mapping[str, Any] = MappingProxyType({}),
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,"_paga_graph(
    adata,
    ax,
    *,
    solid_edges=None,
    dashed_edges=None,
    adjacency_solid=None,
    adjacency_dashed=None,
    transitions=None,
    threshold=None,
    root=0,
    colors=None,
    labels=None,
    fontsize=None,
    fontweight=None,
    fontoutline=None,
    text_kwds: Mapping[str, Any] = MappingProxyType({}),
    node_size_scale=1.0,
    node_size_power=0.5,
    edge_width_scale=1.0,
    normalize_to_color=""reference"",
    title=None,
    pos=None,
    cmap=None,
    frameon=True,
    min_edge_width=None,
    max_edge_width=None,
    export_to_gexf=False,
    colorbar=None,
    use_raw=True,
    cb_kwds: Mapping[str, Any] = MappingProxyType({}),
    single_component=False,
    arrowsize=30,
)",function,,,,"Function: _paga_graph(
    adata,
    ax,
    *,
    solid_edges=None,
    dashed_edges=None,
    adjacency_solid=None,
    adjacency_dashed=None,
    transitions=None,
    threshold=None,
    root=0,
    colors=None,
    labels=None,
    fontsize=None,
    fontweight=None,
    fontoutline=None,
    text_kwds: Mapping[str, Any] = MappingProxyType({}),
    node_size_scale=1.0,
    node_size_power=0.5,
    edge_width_scale=1.0,
    normalize_to_color=""reference"",
    title=None,
    pos=None,
    cmap=None,
    frameon=True,
    min_edge_width=None,
    max_edge_width=None,
    export_to_gexf=False,
    colorbar=None,
    use_raw=True,
    cb_kwds: Mapping[str, Any] = MappingProxyType({}),
    single_component=False,
    arrowsize=30,
)",scverse,scanpy,1.10.1,,,,_paga_graph,"(
    adata,
    ax,
    *,
    solid_edges=None,
    dashed_edges=None,
    adjacency_solid=None,
    adjacency_dashed=None,
    transitions=None,
    threshold=None,
    root=0,
    colors=None,
    labels=None,
    fontsize=None,
    fontweight=None,
    fontoutline=None,
    text_kwds: Mapping[str, Any] = MappingProxyType({}),
    node_size_scale=1.0,
    node_size_power=0.5,
    edge_width_scale=1.0,
    normalize_to_color=""reference"",
    title=None,
    pos=None,
    cmap=None,
    frameon=True,
    min_edge_width=None,
    max_edge_width=None,
    export_to_gexf=False,
    colorbar=None,
    use_raw=True,
    cb_kwds: Mapping[str, Any] = MappingProxyType({}),
    single_component=False,
    arrowsize=30,
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,"paga_adjacency(
    adata: AnnData,
    *,
    adjacency: str = ""connectivities"",
    adjacency_tree: str = ""connectivities_tree"",
    as_heatmap: bool = True,
    color_map: str | Colormap | None = None,
    show: bool | None = None,
    save: bool | str | None = None,
) -> None",function,,,,"Function: paga_adjacency(
    adata: AnnData,
    *,
    adjacency: str = ""connectivities"",
    adjacency_tree: str = ""connectivities_tree"",
    as_heatmap: bool = True,
    color_map: str | Colormap | None = None,
    show: bool | None = None,
    save: bool | str | None = None,
) -> None",scverse,scanpy,1.10.1,,,,paga_adjacency,"(
    adata: AnnData,
    *,
    adjacency: str = ""connectivities"",
    adjacency_tree: str = ""connectivities_tree"",
    as_heatmap: bool = True,
    color_map: str | Colormap | None = None,
    show: bool | None = None,
    save: bool | str | None = None,
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,collections.abc,import,,,,Import: collections.abc,scverse,scanpy,1.10.1,import collections.abc as cabc,,collections.abc,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,MappingProxyType from types,import,,,,Import: MappingProxyType from types,scverse,scanpy,1.10.1,from types import MappingProxyType,types,MappingProxyType,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,Any,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,scipy,import,,,,Import: scipy,scverse,scanpy,1.10.1,import scipy,,scipy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,patheffects from matplotlib,import,,,,Import: patheffects from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import patheffects, rcParams, ticker",matplotlib,patheffects,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,rcParams from matplotlib,import,,,,Import: rcParams from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import patheffects, rcParams, ticker",matplotlib,rcParams,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,ticker from matplotlib,import,,,,Import: ticker from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import patheffects, rcParams, ticker",matplotlib,ticker,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,matplotlib,pyplot,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,Colormap from matplotlib.colors,local_import,,,,Import: Colormap from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Colormap, is_color_like",matplotlib.colors,Colormap,,,matplotlib.colors,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,is_color_like from matplotlib.colors,local_import,,,,Import: is_color_like from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Colormap, is_color_like",matplotlib.colors,is_color_like,,,matplotlib.colors,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,CategoricalDtype from pandas.api.types,local_import,,,,Import: CategoricalDtype from pandas.api.types,scverse,scanpy,1.10.1,from pandas.api.types import CategoricalDtype,pandas.api.types,CategoricalDtype,,,pandas.api.types,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import issparse,scipy.sparse,issparse,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,paga.py,python,check_random_state from sklearn.utils,local_import,,,,Import: check_random_state from sklearn.utils,scverse,scanpy,1.10.1,from sklearn.utils import check_random_state,sklearn.utils,check_random_state,,,sklearn.utils,,,,,,,,,,,,
,paga.py,python,,,,,,File: scanpy\plotting\_tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,paga.py,python,,,,,,Directory: scanpy\plotting\_tools\paga.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_panel_grid(hspace, wspace, ncols, num_panels)",function,,,,"Function: _panel_grid(hspace, wspace, ncols, num_panels)",scverse,scanpy,1.10.1,,,,_panel_grid,"(hspace, wspace, ncols, num_panels)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_get_vboundnorm(
    vmin: Sequence[VBound],
    vmax: Sequence[VBound],
    vcenter: Sequence[VBound],
    *,
    norm: Sequence[Normalize],
    index: int,
    colors: Sequence[float],
) -> tuple[float | None, float | None]",function,,,,"Function: _get_vboundnorm(
    vmin: Sequence[VBound],
    vmax: Sequence[VBound],
    vcenter: Sequence[VBound],
    *,
    norm: Sequence[Normalize],
    index: int,
    colors: Sequence[float],
) -> tuple[float | None, float | None]",scverse,scanpy,1.10.1,,,,_get_vboundnorm,"(
    vmin: Sequence[VBound],
    vmax: Sequence[VBound],
    vcenter: Sequence[VBound],
    *,
    norm: Sequence[Normalize],
    index: int,
    colors: Sequence[float],
)",,,,,,,,"tuple[float | None, float | None]",,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,_wraps_plot_scatter(wrapper),function,,,,Function: _wraps_plot_scatter(wrapper),scverse,scanpy,1.10.1,,,,_wraps_plot_scatter,(wrapper),,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_components_to_dimensions(
    components: str | Collection[str] | None,
    dimensions: Collection[int] | Collection[Collection[int]] | None,
    *,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    total_dims: int,
) -> list[Collection[int]]",function,,,,"Function: _components_to_dimensions(
    components: str | Collection[str] | None,
    dimensions: Collection[int] | Collection[Collection[int]] | None,
    *,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    total_dims: int,
) -> list[Collection[int]]",scverse,scanpy,1.10.1,,,,_components_to_dimensions,"(
    components: str | Collection[str] | None,
    dimensions: Collection[int] | Collection[Collection[int]] | None,
    *,
    projection: Literal[""2d"", ""3d""] = ""2d"",
    total_dims: int,
)",,,,,,,,list[Collection[int]],,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_add_categorical_legend(
    ax,
    color_source_vector,
    *,
    palette: dict,
    legend_loc: str,
    legend_fontweight,
    legend_fontsize,
    legend_fontoutline,
    multi_panel,
    na_color,
    na_in_legend: bool,
    scatter_array=None,
)",function,,,,"Function: _add_categorical_legend(
    ax,
    color_source_vector,
    *,
    palette: dict,
    legend_loc: str,
    legend_fontweight,
    legend_fontsize,
    legend_fontoutline,
    multi_panel,
    na_color,
    na_in_legend: bool,
    scatter_array=None,
)",scverse,scanpy,1.10.1,,,,_add_categorical_legend,"(
    ax,
    color_source_vector,
    *,
    palette: dict,
    legend_loc: str,
    legend_fontweight,
    legend_fontsize,
    legend_fontoutline,
    multi_panel,
    na_color,
    na_in_legend: bool,
    scatter_array=None,
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_get_basis(adata: AnnData, basis: str) -> np.ndarray",function,,,,"Function: _get_basis(adata: AnnData, basis: str) -> np.ndarray",scverse,scanpy,1.10.1,,,,_get_basis,"(adata: AnnData, basis: str)",,,,,,,,np.ndarray,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_get_color_source_vector(
    adata: AnnData,
    value_to_plot: str,
    *,
    mask_obs: NDArray[np.bool_] | None = None,
    use_raw: bool = False,
    gene_symbols: str | None = None,
    layer: str | None = None,
    groups: Sequence[str] | None = None,
) -> np.ndarray | pd.api.extensions.ExtensionArray",function,,,,"Function: _get_color_source_vector(
    adata: AnnData,
    value_to_plot: str,
    *,
    mask_obs: NDArray[np.bool_] | None = None,
    use_raw: bool = False,
    gene_symbols: str | None = None,
    layer: str | None = None,
    groups: Sequence[str] | None = None,
) -> np.ndarray | pd.api.extensions.ExtensionArray",scverse,scanpy,1.10.1,,,,_get_color_source_vector,"(
    adata: AnnData,
    value_to_plot: str,
    *,
    mask_obs: NDArray[np.bool_] | None = None,
    use_raw: bool = False,
    gene_symbols: str | None = None,
    layer: str | None = None,
    groups: Sequence[str] | None = None,
)",,,,,,,,np.ndarray | pd.api.extensions.ExtensionArray,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_get_palette(adata, values_key: str, palette=None)",function,,,,"Function: _get_palette(adata, values_key: str, palette=None)",scverse,scanpy,1.10.1,,,,_get_palette,"(adata, values_key: str, palette=None)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_color_vector(
    adata: AnnData,
    values_key: str | None,
    *,
    values: np.ndarray | pd.api.extensions.ExtensionArray,
    palette: str | Sequence[str] | Cycler | None,
    na_color: ColorLike = ""lightgray"",
) -> tuple[np.ndarray | pd.api.extensions.ExtensionArray, Literal[""cat"", ""na"", ""cont""]]",function,,,,"Function: _color_vector(
    adata: AnnData,
    values_key: str | None,
    *,
    values: np.ndarray | pd.api.extensions.ExtensionArray,
    palette: str | Sequence[str] | Cycler | None,
    na_color: ColorLike = ""lightgray"",
) -> tuple[np.ndarray | pd.api.extensions.ExtensionArray, Literal[""cat"", ""na"", ""cont""]]",scverse,scanpy,1.10.1,,,,_color_vector,"(
    adata: AnnData,
    values_key: str | None,
    *,
    values: np.ndarray | pd.api.extensions.ExtensionArray,
    palette: str | Sequence[str] | Cycler | None,
    na_color: ColorLike = ""lightgray"",
)",,,,,,,,"tuple[np.ndarray | pd.api.extensions.ExtensionArray, Literal[""cat"", ""na"", ""cont""]]",,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,_basis2name(basis),function,,,,Function: _basis2name(basis),scverse,scanpy,1.10.1,,,,_basis2name,(basis),,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_check_spot_size(spatial_data: Mapping | None, spot_size: float | None) -> float",function,,,,"Function: _check_spot_size(spatial_data: Mapping | None, spot_size: float | None) -> float",scverse,scanpy,1.10.1,,,,_check_spot_size,"(spatial_data: Mapping | None, spot_size: float | None)",,,,,,,,float,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_check_scale_factor(
    spatial_data: Mapping | None,
    img_key: str | None,
    scale_factor: float | None,
) -> float",function,,,,"Function: _check_scale_factor(
    spatial_data: Mapping | None,
    img_key: str | None,
    scale_factor: float | None,
) -> float",scverse,scanpy,1.10.1,,,,_check_scale_factor,"(
    spatial_data: Mapping | None,
    img_key: str | None,
    scale_factor: float | None,
)",,,,,,,,float,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_check_spatial_data(
    uns: Mapping, library_id: str | None | Empty
) -> tuple[str | None, Mapping | None]",function,,,,"Function: _check_spatial_data(
    uns: Mapping, library_id: str | None | Empty
) -> tuple[str | None, Mapping | None]",scverse,scanpy,1.10.1,,,,_check_spatial_data,"(
    uns: Mapping, library_id: str | None | Empty
)",,,,,,,,"tuple[str | None, Mapping | None]",,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_check_img(
    spatial_data: Mapping | None,
    img: np.ndarray | None,
    img_key: None | str | Empty,
    bw: bool = False,
) -> tuple[np.ndarray | None, str | None]",function,,,,"Function: _check_img(
    spatial_data: Mapping | None,
    img: np.ndarray | None,
    img_key: None | str | Empty,
    bw: bool = False,
) -> tuple[np.ndarray | None, str | None]",scverse,scanpy,1.10.1,,,,_check_img,"(
    spatial_data: Mapping | None,
    img: np.ndarray | None,
    img_key: None | str | Empty,
    bw: bool = False,
)",,,,,,,,"tuple[np.ndarray | None, str | None]",,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_check_crop_coord(
    crop_coord: tuple | None,
    scale_factor: float,
) -> tuple[float, float, float, float]",function,,,,"Function: _check_crop_coord(
    crop_coord: tuple | None,
    scale_factor: float,
) -> tuple[float, float, float, float]",scverse,scanpy,1.10.1,,,,_check_crop_coord,"(
    crop_coord: tuple | None,
    scale_factor: float,
)",,,,,,,,"tuple[float, float, float, float]",,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,"_check_na_color(
    na_color: ColorLike | None, *, img: np.ndarray | None = None
) -> ColorLike",function,,,,"Function: _check_na_color(
    na_color: ColorLike | None, *, img: np.ndarray | None = None
) -> ColorLike",scverse,scanpy,1.10.1,,,,_check_na_color,"(
    na_color: ColorLike | None, *, img: np.ndarray | None = None
)",,,,,,,,ColorLike,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,_broadcast_args(*args),function,,,,Function: _broadcast_args(*args),scverse,scanpy,1.10.1,,,,_broadcast_args,(*args),,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,collections.abc,import,,,,Import: collections.abc,scverse,scanpy,1.10.1,import collections.abc as cabc,,collections.abc,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,inspect,import,,,,Import: inspect,scverse,scanpy,1.10.1,import inspect,,inspect,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,,sys,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,copy from copy,import,,,,Import: copy from copy,scverse,scanpy,1.10.1,from copy import copy,copy,copy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,functools,partial,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,combinations from itertools,import,,,,Import: combinations from itertools,scverse,scanpy,1.10.1,"from itertools import combinations, product",itertools,combinations,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,product from itertools,import,,,,Import: product from itertools,scverse,scanpy,1.10.1,"from itertools import combinations, product",itertools,product,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Integral from numbers,import,,,,Import: Integral from numbers,scverse,scanpy,1.10.1,from numbers import Integral,numbers,Integral,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,Any,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Cycler from cycler,import,,,,Import: Cycler from cycler,scverse,scanpy,1.10.1,from cycler import Cycler,cycler,Cycler,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,colormaps from matplotlib,import,,,,Import: colormaps from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import colormaps, colors, patheffects, rcParams",matplotlib,colormaps,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,colors from matplotlib,import,,,,Import: colors from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import colormaps, colors, patheffects, rcParams",matplotlib,colors,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,patheffects from matplotlib,import,,,,Import: patheffects from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import colormaps, colors, patheffects, rcParams",matplotlib,patheffects,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,rcParams from matplotlib,import,,,,Import: rcParams from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import colormaps, colors, patheffects, rcParams",matplotlib,rcParams,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,matplotlib,pyplot,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Mapping from collections.abc,local_import,,,,Import: Mapping from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Mapping, Sequence",collections.abc,Mapping,,,collections.abc,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Sequence from collections.abc,local_import,,,,Import: Sequence from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Mapping, Sequence",collections.abc,Sequence,,,collections.abc,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Axes from matplotlib.axes,local_import,,,,Import: Axes from matplotlib.axes,scverse,scanpy,1.10.1,from matplotlib.axes import Axes,matplotlib.axes,Axes,,,matplotlib.axes,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Colormap from matplotlib.colors,local_import,,,,Import: Colormap from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Colormap, Normalize",matplotlib.colors,Colormap,,,matplotlib.colors,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Normalize from matplotlib.colors,local_import,,,,Import: Normalize from matplotlib.colors,scverse,scanpy,1.10.1,"from matplotlib.colors import Colormap, Normalize",matplotlib.colors,Normalize,,,matplotlib.colors,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Figure from matplotlib.figure,local_import,,,,Import: Figure from matplotlib.figure,scverse,scanpy,1.10.1,from matplotlib.figure import Figure,matplotlib.figure,Figure,,,matplotlib.figure,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,NDArray from numpy.typing,local_import,,,,Import: NDArray from numpy.typing,scverse,scanpy,1.10.1,from numpy.typing import NDArray,numpy.typing,NDArray,,,numpy.typing,,,,,,,,,,,,
scverse_scanpy_1.10.1,scatterplots.py,python,Version from packaging.version,local_import,,,,Import: Version from packaging.version,scverse,scanpy,1.10.1,from packaging.version import Version,packaging.version,Version,,,packaging.version,,,,,,,,,,,,
,scatterplots.py,python,,,,,,File: scanpy\plotting\_tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,scatterplots.py,python,,,,,,Directory: scanpy\plotting\_tools\scatterplots.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_fig_show_save_or_axes(plot_obj, return_fig, show, save)",function,,,,"Function: _fig_show_save_or_axes(plot_obj, return_fig, show, save)",scverse,scanpy,1.10.1,,,,_fig_show_save_or_axes,"(plot_obj, return_fig, show, save)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_rank_genes_groups_plot(
    adata: AnnData,
    plot_type: str = ""heatmap"",
    *,
    groups: str | Sequence[str] | None = None,
    n_genes: int | None = None,
    groupby: str | None = None,
    values_to_plot: str | None = None,
    var_names: Sequence[str] | Mapping[str, Sequence[str]] | None = None,
    min_logfoldchange: float | None = None,
    key: str | None = None,
    show: bool | None = None,
    save: bool | None = None,
    return_fig: bool | None = False,
    gene_symbols: str | None = None,
    **kwds,
)",function,,,,"Function: _rank_genes_groups_plot(
    adata: AnnData,
    plot_type: str = ""heatmap"",
    *,
    groups: str | Sequence[str] | None = None,
    n_genes: int | None = None,
    groupby: str | None = None,
    values_to_plot: str | None = None,
    var_names: Sequence[str] | Mapping[str, Sequence[str]] | None = None,
    min_logfoldchange: float | None = None,
    key: str | None = None,
    show: bool | None = None,
    save: bool | None = None,
    return_fig: bool | None = False,
    gene_symbols: str | None = None,
    **kwds,
)",scverse,scanpy,1.10.1,,,,_rank_genes_groups_plot,"(
    adata: AnnData,
    plot_type: str = ""heatmap"",
    *,
    groups: str | Sequence[str] | None = None,
    n_genes: int | None = None,
    groupby: str | None = None,
    values_to_plot: str | None = None,
    var_names: Sequence[str] | Mapping[str, Sequence[str]] | None = None,
    min_logfoldchange: float | None = None,
    key: str | None = None,
    show: bool | None = None,
    save: bool | None = None,
    return_fig: bool | None = False,
    gene_symbols: str | None = None,
    **kwds,
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_get_values_to_plot(
    adata,
    values_to_plot: Literal[
        ""scores"",
        ""logfoldchanges"",
        ""pvals"",
        ""pvals_adj"",
        ""log10_pvals"",
        ""log10_pvals_adj"",
    ],
    gene_names: Sequence[str],
    *,
    groups: Sequence[str] | None = None,
    key: str | None = ""rank_genes_groups"",
    gene_symbols: str | None = None,
)",function,,,,"Function: _get_values_to_plot(
    adata,
    values_to_plot: Literal[
        ""scores"",
        ""logfoldchanges"",
        ""pvals"",
        ""pvals_adj"",
        ""log10_pvals"",
        ""log10_pvals_adj"",
    ],
    gene_names: Sequence[str],
    *,
    groups: Sequence[str] | None = None,
    key: str | None = ""rank_genes_groups"",
    gene_symbols: str | None = None,
)",scverse,scanpy,1.10.1,,,,_get_values_to_plot,"(
    adata,
    values_to_plot: Literal[
        ""scores"",
        ""logfoldchanges"",
        ""pvals"",
        ""pvals_adj"",
        ""log10_pvals"",
        ""log10_pvals_adj"",
    ],
    gene_names: Sequence[str],
    *,
    groups: Sequence[str] | None = None,
    key: str | None = ""rank_genes_groups"",
    gene_symbols: str | None = None,
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,pca_scatter = pca,constant,pca_scatter = pca,pca_scatter,pca,Constant: pca_scatter = pca,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,collections.abc,import,,,,Import: collections.abc,scverse,scanpy,1.10.1,import collections.abc as cabc,,collections.abc,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,copy from copy,import,,,,Import: copy from copy,scverse,scanpy,1.10.1,from copy import copy,copy,copy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,colormaps from matplotlib,import,,,,Import: colormaps from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import colormaps, rcParams",matplotlib,colormaps,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,rcParams from matplotlib,import,,,,Import: rcParams from matplotlib,scverse,scanpy,1.10.1,"from matplotlib import colormaps, rcParams",matplotlib,rcParams,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,pyplot from matplotlib,import,,,,Import: pyplot from matplotlib,scverse,scanpy,1.10.1,from matplotlib import pyplot as plt,matplotlib,pyplot,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Iterable from collections.abc,local_import,,,,Import: Iterable from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Iterable, Mapping, Sequence",collections.abc,Iterable,,,collections.abc,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Mapping from collections.abc,local_import,,,,Import: Mapping from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Iterable, Mapping, Sequence",collections.abc,Mapping,,,collections.abc,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Sequence from collections.abc,local_import,,,,Import: Sequence from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Iterable, Mapping, Sequence",collections.abc,Sequence,,,collections.abc,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,obs_df from scanpy.get,local_import,,,,Import: obs_df from scanpy.get,scverse,scanpy,1.10.1,from scanpy.get import obs_df,scanpy.get,obs_df,,,scanpy.get,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\plotting\_tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\plotting\_tools\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_combat.py,python,"_design_matrix(
    model: pd.DataFrame, batch_key: str, batch_levels: Collection[str]
) -> pd.DataFrame",function,,,,"Function: _design_matrix(
    model: pd.DataFrame, batch_key: str, batch_levels: Collection[str]
) -> pd.DataFrame",scverse,scanpy,1.10.1,,,,_design_matrix,"(
    model: pd.DataFrame, batch_key: str, batch_levels: Collection[str]
)",,,,,,,,pd.DataFrame,,,,,
scverse_scanpy_1.10.1,_combat.py,python,"_standardize_data(
    model: pd.DataFrame, data: pd.DataFrame, batch_key: str
) -> tuple[pd.DataFrame, pd.DataFrame, np.ndarray, np.ndarray]",function,,,,"Function: _standardize_data(
    model: pd.DataFrame, data: pd.DataFrame, batch_key: str
) -> tuple[pd.DataFrame, pd.DataFrame, np.ndarray, np.ndarray]",scverse,scanpy,1.10.1,,,,_standardize_data,"(
    model: pd.DataFrame, data: pd.DataFrame, batch_key: str
)",,,,,,,,"tuple[pd.DataFrame, pd.DataFrame, np.ndarray, np.ndarray]",,,,,
scverse_scanpy_1.10.1,_combat.py,python,"_it_sol(
    s_data: np.ndarray,
    g_hat: np.ndarray,
    d_hat: np.ndarray,
    *,
    g_bar: float,
    t2: float,
    a: float,
    b: float,
    conv: float = 0.0001,
) -> tuple[np.ndarray, np.ndarray]",function,,,,"Function: _it_sol(
    s_data: np.ndarray,
    g_hat: np.ndarray,
    d_hat: np.ndarray,
    *,
    g_bar: float,
    t2: float,
    a: float,
    b: float,
    conv: float = 0.0001,
) -> tuple[np.ndarray, np.ndarray]",scverse,scanpy,1.10.1,,,,_it_sol,"(
    s_data: np.ndarray,
    g_hat: np.ndarray,
    d_hat: np.ndarray,
    *,
    g_bar: float,
    t2: float,
    a: float,
    b: float,
    conv: float = 0.0001,
)",,,,,,,,"tuple[np.ndarray, np.ndarray]",,,,,
scverse_scanpy_1.10.1,_combat.py,python,_aprior(delta_hat),function,,,,Function: _aprior(delta_hat),scverse,scanpy,1.10.1,,,,_aprior,(delta_hat),,,,,,,,,,,,,
scverse_scanpy_1.10.1,_combat.py,python,_bprior(delta_hat),function,,,,Function: _bprior(delta_hat),scverse,scanpy,1.10.1,,,,_bprior,(delta_hat),,,,,,,,,,,,,
scverse_scanpy_1.10.1,_combat.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_combat.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_combat.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_combat.py,python,linalg from numpy,import,,,,Import: linalg from numpy,scverse,scanpy,1.10.1,from numpy import linalg as la,numpy,linalg,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_combat.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import issparse,scipy.sparse,issparse,,,scipy.sparse,,,,,,,,,,,,
,_combat.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_combat.py,python,,,,,,Directory: scanpy\preprocessing\_combat.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_distributed.py,python,"materialize_as_ndarray(
    a: DaskArray | ArrayLike | tuple[ArrayLike | ZappyArray | DaskArray, ...],
) -> tuple[np.ndarray] | np.ndarray",function,,,,"Function: materialize_as_ndarray(
    a: DaskArray | ArrayLike | tuple[ArrayLike | ZappyArray | DaskArray, ...],
) -> tuple[np.ndarray] | np.ndarray",scverse,scanpy,1.10.1,,,,materialize_as_ndarray,"(
    a: DaskArray | ArrayLike | tuple[ArrayLike | ZappyArray | DaskArray, ...],
)",,,,,,,,tuple[np.ndarray] | np.ndarray,,,,,
scverse_scanpy_1.10.1,_distributed.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, overload",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_distributed.py,python,overload from typing,import,,,,Import: overload from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, overload",typing,overload,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_distributed.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_distributed.py,python,DaskArray from scanpy._compat,local_import,,,,Import: DaskArray from scanpy._compat,scverse,scanpy,1.10.1,"from scanpy._compat import DaskArray, ZappyArray",scanpy._compat,DaskArray,,,scanpy._compat,,,,,,,,,,,,
scverse_scanpy_1.10.1,_distributed.py,python,ZappyArray from scanpy._compat,local_import,,,,Import: ZappyArray from scanpy._compat,scverse,scanpy,1.10.1,"from scanpy._compat import DaskArray, ZappyArray",scanpy._compat,ZappyArray,,,scanpy._compat,,,,,,,,,,,,
,_distributed.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_distributed.py,python,,,,,,Directory: scanpy\preprocessing\_distributed.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_adata_basic = """"""\
adata
    Annotated data matrix.\
""""""",constant,"doc_adata_basic = """"""\
adata
    Annotated data matrix.\
""""""",doc_adata_basic,"""""""\
adata
    Annotated data matrix.\
""""""","Constant: doc_adata_basic = """"""\
adata
    Annotated data matrix.\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_expr_reps = """"""\
layer
    If provided, use `adata.layers[layer]` for expression values instead
    of `adata.X`.
use_raw
    If True, use `adata.raw.X` for expression values instead of `adata.X`.\
""""""",constant,"doc_expr_reps = """"""\
layer
    If provided, use `adata.layers[layer]` for expression values instead
    of `adata.X`.
use_raw
    If True, use `adata.raw.X` for expression values instead of `adata.X`.\
""""""",doc_expr_reps,"""""""\
layer
    If provided, use `adata.layers[layer]` for expression values instead
    of `adata.X`.
use_raw
    If True, use `adata.raw.X` for expression values instead of `adata.X`.\
""""""","Constant: doc_expr_reps = """"""\
layer
    If provided, use `adata.layers[layer]` for expression values instead
    of `adata.X`.
use_raw
    If True, use `adata.raw.X` for expression values instead of `adata.X`.\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_mask_var_hvg = """"""\
mask_var
    To run only on a certain set of genes given by a boolean array
    or a string referring to an array in :attr:`~anndata.AnnData.var`.
    By default, uses `.var['highly_variable']` if available, else everything.
use_highly_variable
    Whether to use highly variable genes only, stored in
    `.var['highly_variable']`.
    By default uses them if they have been determined beforehand.

    .. deprecated:: 1.10.0
       Use `mask_var` instead
""""""",constant,"doc_mask_var_hvg = """"""\
mask_var
    To run only on a certain set of genes given by a boolean array
    or a string referring to an array in :attr:`~anndata.AnnData.var`.
    By default, uses `.var['highly_variable']` if available, else everything.
use_highly_variable
    Whether to use highly variable genes only, stored in
    `.var['highly_variable']`.
    By default uses them if they have been determined beforehand.

    .. deprecated:: 1.10.0
       Use `mask_var` instead
""""""",doc_mask_var_hvg,"""""""\
mask_var
    To run only on a certain set of genes given by a boolean array
    or a string referring to an array in :attr:`~anndata.AnnData.var`.
    By default, uses `.var['highly_variable']` if available, else everything.
use_highly_variable
    Whether to use highly variable genes only, stored in
    `.var['highly_variable']`.
    By default uses them if they have been determined beforehand.

    .. deprecated:: 1.10.0
       Use `mask_var` instead
""""""","Constant: doc_mask_var_hvg = """"""\
mask_var
    To run only on a certain set of genes given by a boolean array
    or a string referring to an array in :attr:`~anndata.AnnData.var`.
    By default, uses `.var['highly_variable']` if available, else everything.
use_highly_variable
    Whether to use highly variable genes only, stored in
    `.var['highly_variable']`.
    By default uses them if they have been determined beforehand.

    .. deprecated:: 1.10.0
       Use `mask_var` instead
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_obs_qc_args = """"""\
qc_vars
    Keys for boolean columns of `.var` which identify variables you could
    want to control for (e.g. ""ERCC"" or ""mito"").
percent_top
    List of ranks (where genes are ranked by expression) at which the cumulative
    proportion of expression will be reported as a percentage. This can be used to
    assess library complexity. Ranks are considered 1-indexed, and if empty or None
    don't calculate.

    E.g. `percent_top=[50]` finds cumulative proportion to the 50th most expressed gene.
""""""",constant,"doc_obs_qc_args = """"""\
qc_vars
    Keys for boolean columns of `.var` which identify variables you could
    want to control for (e.g. ""ERCC"" or ""mito"").
percent_top
    List of ranks (where genes are ranked by expression) at which the cumulative
    proportion of expression will be reported as a percentage. This can be used to
    assess library complexity. Ranks are considered 1-indexed, and if empty or None
    don't calculate.

    E.g. `percent_top=[50]` finds cumulative proportion to the 50th most expressed gene.
""""""",doc_obs_qc_args,"""""""\
qc_vars
    Keys for boolean columns of `.var` which identify variables you could
    want to control for (e.g. ""ERCC"" or ""mito"").
percent_top
    List of ranks (where genes are ranked by expression) at which the cumulative
    proportion of expression will be reported as a percentage. This can be used to
    assess library complexity. Ranks are considered 1-indexed, and if empty or None
    don't calculate.

    E.g. `percent_top=[50]` finds cumulative proportion to the 50th most expressed gene.
""""""","Constant: doc_obs_qc_args = """"""\
qc_vars
    Keys for boolean columns of `.var` which identify variables you could
    want to control for (e.g. ""ERCC"" or ""mito"").
percent_top
    List of ranks (where genes are ranked by expression) at which the cumulative
    proportion of expression will be reported as a percentage. This can be used to
    assess library complexity. Ranks are considered 1-indexed, and if empty or None
    don't calculate.

    E.g. `percent_top=[50]` finds cumulative proportion to the 50th most expressed gene.
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_qc_metric_naming = """"""\
expr_type
    Name of kind of values in X.
var_type
    The kind of thing the variables are.\
""""""",constant,"doc_qc_metric_naming = """"""\
expr_type
    Name of kind of values in X.
var_type
    The kind of thing the variables are.\
""""""",doc_qc_metric_naming,"""""""\
expr_type
    Name of kind of values in X.
var_type
    The kind of thing the variables are.\
""""""","Constant: doc_qc_metric_naming = """"""\
expr_type
    Name of kind of values in X.
var_type
    The kind of thing the variables are.\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_obs_qc_returns = """"""\
Observation level metrics include:

`total_{var_type}_by_{expr_type}`
    E.g. ""total_genes_by_counts"". Number of genes with positive counts in a cell.
`total_{expr_type}`
    E.g. ""total_counts"". Total number of counts for a cell.
`pct_{expr_type}_in_top_{n}_{var_type}` – for `n` in `percent_top`
    E.g. ""pct_counts_in_top_50_genes"". Cumulative percentage of counts
    for 50 most expressed genes in a cell.
`total_{expr_type}_{qc_var}` – for `qc_var` in `qc_vars`
    E.g. ""total_counts_mito"". Total number of counts for variables in
    `qc_vars`.
`pct_{expr_type}_{qc_var}` – for `qc_var` in `qc_vars`
    E.g. ""pct_counts_mito"". Proportion of total counts for a cell which
    are mitochondrial.\
""""""",constant,"doc_obs_qc_returns = """"""\
Observation level metrics include:

`total_{var_type}_by_{expr_type}`
    E.g. ""total_genes_by_counts"". Number of genes with positive counts in a cell.
`total_{expr_type}`
    E.g. ""total_counts"". Total number of counts for a cell.
`pct_{expr_type}_in_top_{n}_{var_type}` – for `n` in `percent_top`
    E.g. ""pct_counts_in_top_50_genes"". Cumulative percentage of counts
    for 50 most expressed genes in a cell.
`total_{expr_type}_{qc_var}` – for `qc_var` in `qc_vars`
    E.g. ""total_counts_mito"". Total number of counts for variables in
    `qc_vars`.
`pct_{expr_type}_{qc_var}` – for `qc_var` in `qc_vars`
    E.g. ""pct_counts_mito"". Proportion of total counts for a cell which
    are mitochondrial.\
""""""",doc_obs_qc_returns,"""""""\
Observation level metrics include:

`total_{var_type}_by_{expr_type}`
    E.g. ""total_genes_by_counts"". Number of genes with positive counts in a cell.
`total_{expr_type}`
    E.g. ""total_counts"". Total number of counts for a cell.
`pct_{expr_type}_in_top_{n}_{var_type}` – for `n` in `percent_top`
    E.g. ""pct_counts_in_top_50_genes"". Cumulative percentage of counts
    for 50 most expressed genes in a cell.
`total_{expr_type}_{qc_var}` – for `qc_var` in `qc_vars`
    E.g. ""total_counts_mito"". Total number of counts for variables in
    `qc_vars`.
`pct_{expr_type}_{qc_var}` – for `qc_var` in `qc_vars`
    E.g. ""pct_counts_mito"". Proportion of total counts for a cell which
    are mitochondrial.\
""""""","Constant: doc_obs_qc_returns = """"""\
Observation level metrics include:

`total_{var_type}_by_{expr_type}`
    E.g. ""total_genes_by_counts"". Number of genes with positive counts in a cell.
`total_{expr_type}`
    E.g. ""total_counts"". Total number of counts for a cell.
`pct_{expr_type}_in_top_{n}_{var_type}` – for `n` in `percent_top`
    E.g. ""pct_counts_in_top_50_genes"". Cumulative percentage of counts
    for 50 most expressed genes in a cell.
`total_{expr_type}_{qc_var}` – for `qc_var` in `qc_vars`
    E.g. ""total_counts_mito"". Total number of counts for variables in
    `qc_vars`.
`pct_{expr_type}_{qc_var}` – for `qc_var` in `qc_vars`
    E.g. ""pct_counts_mito"". Proportion of total counts for a cell which
    are mitochondrial.\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_docs.py,python,"doc_var_qc_returns = """"""\
Variable level metrics include:

`total_{expr_type}`
    E.g. ""total_counts"". Sum of counts for a gene.
`n_genes_by_{expr_type}`
    E.g. ""n_genes_by_counts"". The number of genes with at least 1 count in a cell. Calculated for all cells.
`mean_{expr_type}`
    E.g. ""mean_counts"". Mean expression over all cells.
`n_cells_by_{expr_type}`
    E.g. ""n_cells_by_counts"". Number of cells this expression is
    measured in.
`pct_dropout_by_{expr_type}`
    E.g. ""pct_dropout_by_counts"". Percentage of cells this feature does
    not appear in.\
""""""",constant,"doc_var_qc_returns = """"""\
Variable level metrics include:

`total_{expr_type}`
    E.g. ""total_counts"". Sum of counts for a gene.
`n_genes_by_{expr_type}`
    E.g. ""n_genes_by_counts"". The number of genes with at least 1 count in a cell. Calculated for all cells.
`mean_{expr_type}`
    E.g. ""mean_counts"". Mean expression over all cells.
`n_cells_by_{expr_type}`
    E.g. ""n_cells_by_counts"". Number of cells this expression is
    measured in.
`pct_dropout_by_{expr_type}`
    E.g. ""pct_dropout_by_counts"". Percentage of cells this feature does
    not appear in.\
""""""",doc_var_qc_returns,"""""""\
Variable level metrics include:

`total_{expr_type}`
    E.g. ""total_counts"". Sum of counts for a gene.
`n_genes_by_{expr_type}`
    E.g. ""n_genes_by_counts"". The number of genes with at least 1 count in a cell. Calculated for all cells.
`mean_{expr_type}`
    E.g. ""mean_counts"". Mean expression over all cells.
`n_cells_by_{expr_type}`
    E.g. ""n_cells_by_counts"". Number of cells this expression is
    measured in.
`pct_dropout_by_{expr_type}`
    E.g. ""pct_dropout_by_counts"". Percentage of cells this feature does
    not appear in.\
""""""","Constant: doc_var_qc_returns = """"""\
Variable level metrics include:

`total_{expr_type}`
    E.g. ""total_counts"". Sum of counts for a gene.
`n_genes_by_{expr_type}`
    E.g. ""n_genes_by_counts"". The number of genes with at least 1 count in a cell. Calculated for all cells.
`mean_{expr_type}`
    E.g. ""mean_counts"". Mean expression over all cells.
`n_cells_by_{expr_type}`
    E.g. ""n_cells_by_counts"". Number of cells this expression is
    measured in.
`pct_dropout_by_{expr_type}`
    E.g. ""pct_dropout_by_counts"". Percentage of cells this feature does
    not appear in.\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_docs.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_docs.py,python,,,,,,Directory: scanpy\preprocessing\_docs.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,_Cutoffs.min_disp: float,class_field,,,,Class field: _Cutoffs.min_disp: float,scverse,scanpy,1.10.1,,,,,,,_Cutoffs,,,min_disp: float,,,,,min_disp,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,_Cutoffs.max_disp: float,class_field,,,,Class field: _Cutoffs.max_disp: float,scverse,scanpy,1.10.1,,,,,,,_Cutoffs,,,max_disp: float,,,,,max_disp,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,_Cutoffs.min_mean: float,class_field,,,,Class field: _Cutoffs.min_mean: float,scverse,scanpy,1.10.1,,,,,,,_Cutoffs,,,min_mean: float,,,,,min_mean,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,_Cutoffs.max_mean: float,class_field,,,,Class field: _Cutoffs.max_mean: float,scverse,scanpy,1.10.1,,,,,,,_Cutoffs,,,max_mean: float,,,,,max_mean,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"[classmethod] _Cutoffs.validate(
        cls,
        *,
        n_top_genes: int | None,
        min_disp: float,
        max_disp: float,
        min_mean: float,
        max_mean: float,
    ) -> _Cutoffs | int",class_method,,,,"Class method: [classmethod] _Cutoffs.validate(
        cls,
        *,
        n_top_genes: int | None,
        min_disp: float,
        max_disp: float,
        min_mean: float,
        max_mean: float,
    ) -> _Cutoffs | int",scverse,scanpy,1.10.1,,,,,,,_Cutoffs,validate,"(
        cls,
        *,
        n_top_genes: int | None,
        min_disp: float,
        max_disp: float,
        min_mean: float,
        max_mean: float,
    )",,,_Cutoffs | int,,,,,,classmethod
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_Cutoffs.in_bounds(
        self,
        mean: NDArray[np.floating] | DaskArray,
        dispersion_norm: NDArray[np.floating] | DaskArray,
    ) -> NDArray[np.bool_] | DaskArray",class_method,,,,"Class method: _Cutoffs.in_bounds(
        self,
        mean: NDArray[np.floating] | DaskArray,
        dispersion_norm: NDArray[np.floating] | DaskArray,
    ) -> NDArray[np.bool_] | DaskArray",scverse,scanpy,1.10.1,,,,,,,_Cutoffs,in_bounds,"(
        self,
        mean: NDArray[np.floating] | DaskArray,
        dispersion_norm: NDArray[np.floating] | DaskArray,
    )",,,NDArray[np.bool_] | DaskArray,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,_Cutoffs,class,,,,Class: _Cutoffs,scverse,scanpy,1.10.1,,,,,,,_Cutoffs,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_highly_variable_genes_seurat_v3(
    adata: AnnData,
    *,
    flavor: str = ""seurat_v3"",
    layer: str | None = None,
    n_top_genes: int = 2000,
    batch_key: str | None = None,
    check_values: bool = True,
    span: float = 0.3,
    subset: bool = False,
    inplace: bool = True,
) -> pd.DataFrame | None",function,,,,"Function: _highly_variable_genes_seurat_v3(
    adata: AnnData,
    *,
    flavor: str = ""seurat_v3"",
    layer: str | None = None,
    n_top_genes: int = 2000,
    batch_key: str | None = None,
    check_values: bool = True,
    span: float = 0.3,
    subset: bool = False,
    inplace: bool = True,
) -> pd.DataFrame | None",scverse,scanpy,1.10.1,,,,_highly_variable_genes_seurat_v3,"(
    adata: AnnData,
    *,
    flavor: str = ""seurat_v3"",
    layer: str | None = None,
    n_top_genes: int = 2000,
    batch_key: str | None = None,
    check_values: bool = True,
    span: float = 0.3,
    subset: bool = False,
    inplace: bool = True,
)",,,,,,,,pd.DataFrame | None,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_highly_variable_genes_single_batch(
    adata: AnnData,
    *,
    layer: str | None = None,
    cutoff: _Cutoffs | int,
    n_bins: int = 20,
    flavor: Literal[""seurat"", ""cell_ranger""] = ""seurat"",
) -> pd.DataFrame",function,,,,"Function: _highly_variable_genes_single_batch(
    adata: AnnData,
    *,
    layer: str | None = None,
    cutoff: _Cutoffs | int,
    n_bins: int = 20,
    flavor: Literal[""seurat"", ""cell_ranger""] = ""seurat"",
) -> pd.DataFrame",scverse,scanpy,1.10.1,,,,_highly_variable_genes_single_batch,"(
    adata: AnnData,
    *,
    layer: str | None = None,
    cutoff: _Cutoffs | int,
    n_bins: int = 20,
    flavor: Literal[""seurat"", ""cell_ranger""] = ""seurat"",
)",,,,,,,,pd.DataFrame,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_get_mean_bins(
    means: pd.Series, flavor: Literal[""seurat"", ""cell_ranger""], n_bins: int
) -> pd.Series",function,,,,"Function: _get_mean_bins(
    means: pd.Series, flavor: Literal[""seurat"", ""cell_ranger""], n_bins: int
) -> pd.Series",scverse,scanpy,1.10.1,,,,_get_mean_bins,"(
    means: pd.Series, flavor: Literal[""seurat"", ""cell_ranger""], n_bins: int
)",,,,,,,,pd.Series,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_get_disp_stats(
    df: pd.DataFrame, flavor: Literal[""seurat"", ""cell_ranger""]
) -> pd.DataFrame",function,,,,"Function: _get_disp_stats(
    df: pd.DataFrame, flavor: Literal[""seurat"", ""cell_ranger""]
) -> pd.DataFrame",scverse,scanpy,1.10.1,,,,_get_disp_stats,"(
    df: pd.DataFrame, flavor: Literal[""seurat"", ""cell_ranger""]
)",,,,,,,,pd.DataFrame,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_postprocess_dispersions_seurat(
    disp_bin_stats: pd.DataFrame, mean_bin: pd.Series
) -> None",function,,,,"Function: _postprocess_dispersions_seurat(
    disp_bin_stats: pd.DataFrame, mean_bin: pd.Series
) -> None",scverse,scanpy,1.10.1,,,,_postprocess_dispersions_seurat,"(
    disp_bin_stats: pd.DataFrame, mean_bin: pd.Series
)",,,,,,,,,"# retrieve those genes that have nan std, these are the ones where",,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_postprocess_dispersions_seurat(
    disp_bin_stats: pd.DataFrame, mean_bin: pd.Series
) -> None",function,,,,"Function: _postprocess_dispersions_seurat(
    disp_bin_stats: pd.DataFrame, mean_bin: pd.Series
) -> None",scverse,scanpy,1.10.1,,,,_postprocess_dispersions_seurat,"(
    disp_bin_stats: pd.DataFrame, mean_bin: pd.Series
)",,,,,,,,,"# only a single gene fell in the bin and implicitly set them to have",,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_postprocess_dispersions_seurat(
    disp_bin_stats: pd.DataFrame, mean_bin: pd.Series
) -> None",function,,,,"Function: _postprocess_dispersions_seurat(
    disp_bin_stats: pd.DataFrame, mean_bin: pd.Series
) -> None",scverse,scanpy,1.10.1,,,,_postprocess_dispersions_seurat,"(
    disp_bin_stats: pd.DataFrame, mean_bin: pd.Series
)",,,,,,,,,"# a normalized disperion of 1",,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,_mad(a),function,,,,Function: _mad(a),scverse,scanpy,1.10.1,,,,_mad,(a),,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_subset_genes(
    adata: AnnData,
    *,
    mean: NDArray[np.float64] | DaskArray,
    dispersion_norm: NDArray[np.float64] | DaskArray,
    cutoff: _Cutoffs | int,
) -> NDArray[np.bool_] | DaskArray",function,,,,"Function: _subset_genes(
    adata: AnnData,
    *,
    mean: NDArray[np.float64] | DaskArray,
    dispersion_norm: NDArray[np.float64] | DaskArray,
    cutoff: _Cutoffs | int,
) -> NDArray[np.bool_] | DaskArray",scverse,scanpy,1.10.1,,,,_subset_genes,"(
    adata: AnnData,
    *,
    mean: NDArray[np.float64] | DaskArray,
    dispersion_norm: NDArray[np.float64] | DaskArray,
    cutoff: _Cutoffs | int,
)",,,,,,,,NDArray[np.bool_] | DaskArray,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_nth_highest(x: NDArray[np.float64] | DaskArray, n: int) -> float | DaskArray",function,,,,"Function: _nth_highest(x: NDArray[np.float64] | DaskArray, n: int) -> float | DaskArray",scverse,scanpy,1.10.1,,,,_nth_highest,"(x: NDArray[np.float64] | DaskArray, n: int)",,,,,,,,float | DaskArray,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,"_highly_variable_genes_batched(
    adata: AnnData,
    batch_key: str,
    *,
    layer: str | None,
    n_bins: int,
    flavor: Literal[""seurat"", ""cell_ranger""],
    cutoff: _Cutoffs | int,
) -> pd.DataFrame",function,,,,"Function: _highly_variable_genes_batched(
    adata: AnnData,
    batch_key: str,
    *,
    layer: str | None,
    n_bins: int,
    flavor: Literal[""seurat"", ""cell_ranger""],
    cutoff: _Cutoffs | int,
) -> pd.DataFrame",scverse,scanpy,1.10.1,,,,_highly_variable_genes_batched,"(
    adata: AnnData,
    batch_key: str,
    *,
    layer: str | None,
    n_bins: int,
    flavor: Literal[""seurat"", ""cell_ranger""],
    cutoff: _Cutoffs | int,
)",,,,,,,,pd.DataFrame,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,dataclass from dataclasses,import,,,,Import: dataclass from dataclasses,scverse,scanpy,1.10.1,from dataclasses import dataclass,dataclasses,dataclass,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,signature from inspect,import,,,,Import: signature from inspect,scverse,scanpy,1.10.1,from inspect import signature,inspect,signature,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, cast",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, cast",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,cast from typing,import,,,,Import: cast from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, cast",typing,cast,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,scipy.sparse,import,,,,Import: scipy.sparse,scverse,scanpy,1.10.1,import scipy.sparse as sp_sparse,,scipy.sparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_highly_variable_genes.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
,_highly_variable_genes.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_highly_variable_genes.py,python,,,,,,Directory: scanpy\preprocessing\_highly_variable_genes.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,"_normalize_data(X, counts, after=None, copy: bool = False)",function,,,,"Function: _normalize_data(X, counts, after=None, copy: bool = False)",scverse,scanpy,1.10.1,,,,_normalize_data,"(X, counts, after=None, copy: bool = False)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,truediv from operator,import,,,,Import: truediv from operator,scverse,scanpy,1.10.1,from operator import truediv,operator,truediv,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,warn from warnings,import,,,,Import: warn from warnings,scverse,scanpy,1.10.1,from warnings import warn,warnings,warn,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_normalization.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import issparse,scipy.sparse,issparse,,,scipy.sparse,,,,,,,,,,,,
,_normalization.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_normalization.py,python,,,,,,Directory: scanpy\preprocessing\_normalization.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,"_handle_mask_var(
    adata: AnnData,
    mask_var: NDArray[np.bool_] | str | Empty | None,
    use_highly_variable: bool | None,
) -> tuple[np.ndarray | str | None, np.ndarray | None]",function,,,,"Function: _handle_mask_var(
    adata: AnnData,
    mask_var: NDArray[np.bool_] | str | Empty | None,
    use_highly_variable: bool | None,
) -> tuple[np.ndarray | str | None, np.ndarray | None]",scverse,scanpy,1.10.1,,,,_handle_mask_var,"(
    adata: AnnData,
    mask_var: NDArray[np.bool_] | str | Empty | None,
    use_highly_variable: bool | None,
)",,,,,,,,"tuple[np.ndarray | str | None, np.ndarray | None]",,,,,
scverse_scanpy_1.10.1,_pca.py,python,"_pca_with_sparse(X, npcs, solver=""arpack"", mu=None, random_state=None)",function,,,,"Function: _pca_with_sparse(X, npcs, solver=""arpack"", mu=None, random_state=None)",scverse,scanpy,1.10.1,,,,_pca_with_sparse,"(X, npcs, solver=""arpack"", mu=None, random_state=None)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,"_handle_dask_ml_args(svd_solver: str, method: str) -> str",function,,,,"Function: _handle_dask_ml_args(svd_solver: str, method: str) -> str",scverse,scanpy,1.10.1,,,,_handle_dask_ml_args,"(svd_solver: str, method: str)",,,,,,,,str,,,,,
scverse_scanpy_1.10.1,_pca.py,python,"_handle_sklearn_args(svd_solver: str, method: str) -> str",function,,,,"Function: _handle_sklearn_args(svd_solver: str, method: str) -> str",scverse,scanpy,1.10.1,,,,_handle_sklearn_args,"(svd_solver: str, method: str)",,,,,,,,str,,,,,
scverse_scanpy_1.10.1,_pca.py,python,"_handle_x_args(lib, svd_solver, method, method2args, method2default)",function,,,,"Function: _handle_x_args(lib, svd_solver, method, method2args, method2default)",scverse,scanpy,1.10.1,,,,_handle_x_args,"(lib, svd_solver, method, method2args, method2default)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,warn from warnings,import,,,,Import: warn from warnings,scverse,scanpy,1.10.1,from warnings import warn,warnings,warn,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,anndata,import,,,,Import: anndata,scverse,scanpy,1.10.1,import anndata as ad,,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,packaging,version,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import issparse, spmatrix",scipy.sparse,issparse,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,spmatrix from scipy.sparse,local_import,,,,Import: spmatrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import issparse, spmatrix",scipy.sparse,spmatrix,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,LinearOperator from scipy.sparse.linalg,local_import,,,,Import: LinearOperator from scipy.sparse.linalg,scverse,scanpy,1.10.1,"from scipy.sparse.linalg import LinearOperator, svds",scipy.sparse.linalg,LinearOperator,,,scipy.sparse.linalg,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,svds from scipy.sparse.linalg,local_import,,,,Import: svds from scipy.sparse.linalg,scverse,scanpy,1.10.1,"from scipy.sparse.linalg import LinearOperator, svds",scipy.sparse.linalg,svds,,,scipy.sparse.linalg,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,check_array from sklearn.utils,local_import,,,,Import: check_array from sklearn.utils,scverse,scanpy,1.10.1,"from sklearn.utils import check_array, check_random_state",sklearn.utils,check_array,,,sklearn.utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,check_random_state from sklearn.utils,local_import,,,,Import: check_random_state from sklearn.utils,scverse,scanpy,1.10.1,"from sklearn.utils import check_array, check_random_state",sklearn.utils,check_random_state,,,sklearn.utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,_pca.py,python,svd_flip from sklearn.utils.extmath,local_import,,,,Import: svd_flip from sklearn.utils.extmath,scverse,scanpy,1.10.1,from sklearn.utils.extmath import svd_flip,sklearn.utils.extmath,svd_flip,,,sklearn.utils.extmath,,,,,,,,,,,,
,_pca.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_pca.py,python,,,,,,Directory: scanpy\preprocessing\_pca.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,"_choose_mtx_rep(adata, use_raw: bool = False, layer: str | None = None)",function,,,,"Function: _choose_mtx_rep(adata, use_raw: bool = False, layer: str | None = None)",scverse,scanpy,1.10.1,,,,_choose_mtx_rep,"(adata, use_raw: bool = False, layer: str | None = None)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,"top_proportions(mtx: np.ndarray | spmatrix, n: int)",function,,,,"Function: top_proportions(mtx: np.ndarray | spmatrix, n: int)",scverse,scanpy,1.10.1,,,,top_proportions,"(mtx: np.ndarray | spmatrix, n: int)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,"top_proportions_dense(mtx, n)",function,,,,"Function: top_proportions_dense(mtx, n)",scverse,scanpy,1.10.1,,,,top_proportions_dense,"(mtx, n)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,"top_proportions_sparse_csr(data, indptr, n)",function,,,,"Function: top_proportions_sparse_csr(data, indptr, n)",scverse,scanpy,1.10.1,,,,top_proportions_sparse_csr,"(data, indptr, n)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,"top_segment_proportions(
    mtx: np.ndarray | spmatrix, ns: Collection[int]
) -> np.ndarray",function,,,,"Function: top_segment_proportions(
    mtx: np.ndarray | spmatrix, ns: Collection[int]
) -> np.ndarray",scverse,scanpy,1.10.1,,,,top_segment_proportions,"(
    mtx: np.ndarray | spmatrix, ns: Collection[int]
)",,,,,,,,np.ndarray,,,,,
scverse_scanpy_1.10.1,_qc.py,python,"top_segment_proportions_dense(
    mtx: np.ndarray | spmatrix, ns: Collection[int]
) -> np.ndarray",function,,,,"Function: top_segment_proportions_dense(
    mtx: np.ndarray | spmatrix, ns: Collection[int]
) -> np.ndarray",scverse,scanpy,1.10.1,,,,top_segment_proportions_dense,"(
    mtx: np.ndarray | spmatrix, ns: Collection[int]
)",,,,,,,,np.ndarray,"# Currently ns is considered to be 1 indexed",,,,
scverse_scanpy_1.10.1,_qc.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,warn from warnings,import,,,,Import: warn from warnings,scverse,scanpy,1.10.1,from warnings import warn,warnings,warn,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,numba,import,,,,Import: numba,scverse,scanpy,1.10.1,import numba,,numba,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse, isspmatrix_coo, isspmatrix_csr, spmatrix",scipy.sparse,csr_matrix,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse, isspmatrix_coo, isspmatrix_csr, spmatrix",scipy.sparse,issparse,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,isspmatrix_coo from scipy.sparse,local_import,,,,Import: isspmatrix_coo from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse, isspmatrix_coo, isspmatrix_csr, spmatrix",scipy.sparse,isspmatrix_coo,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,isspmatrix_csr from scipy.sparse,local_import,,,,Import: isspmatrix_csr from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse, isspmatrix_coo, isspmatrix_csr, spmatrix",scipy.sparse,isspmatrix_csr,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,spmatrix from scipy.sparse,local_import,,,,Import: spmatrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse, isspmatrix_coo, isspmatrix_csr, spmatrix",scipy.sparse,spmatrix,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,_qc.py,python,mean_variance_axis from sklearn.utils.sparsefuncs,local_import,,,,Import: mean_variance_axis from sklearn.utils.sparsefuncs,scverse,scanpy,1.10.1,from sklearn.utils.sparsefuncs import mean_variance_axis,sklearn.utils.sparsefuncs,mean_variance_axis,,,sklearn.utils.sparsefuncs,,,,,,,,,,,,
,_qc.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_qc.py,python,,,,,,Directory: scanpy\preprocessing\_qc.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_recipes.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
,_recipes.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_recipes.py,python,,,,,,Directory: scanpy\preprocessing\_recipes.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scale.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scale.py,python,singledispatch from functools,import,,,,Import: singledispatch from functools,scverse,scanpy,1.10.1,from functools import singledispatch,functools,singledispatch,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scale.py,python,truediv from operator,import,,,,Import: truediv from operator,scverse,scanpy,1.10.1,from operator import truediv,operator,truediv,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scale.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scale.py,python,numba,import,,,,Import: numba,scverse,scanpy,1.10.1,import numba,,numba,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scale.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scale.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scale.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import issparse, isspmatrix_csc, spmatrix",scipy.sparse,issparse,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scale.py,python,isspmatrix_csc from scipy.sparse,local_import,,,,Import: isspmatrix_csc from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import issparse, isspmatrix_csc, spmatrix",scipy.sparse,isspmatrix_csc,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,_scale.py,python,spmatrix from scipy.sparse,local_import,,,,Import: spmatrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import issparse, isspmatrix_csc, spmatrix",scipy.sparse,spmatrix,,,scipy.sparse,,,,,,,,,,,,
,_scale.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_scale.py,python,,,,,,Directory: scanpy\preprocessing\_scale.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,"normalize_per_cell(  # noqa: PLR0917
    data: AnnData | np.ndarray | spmatrix,
    counts_per_cell_after: float | None = None,
    counts_per_cell: np.ndarray | None = None,
    key_n_counts: str = ""n_counts"",
    copy: bool = False,
    layers: Literal[""all""] | Iterable[str] = (),
    use_rep: Literal[""after"", ""X""] | None = None,
    min_counts: int = 1,
) -> AnnData | np.ndarray | spmatrix | None",function,,,,"Function: normalize_per_cell(  # noqa: PLR0917
    data: AnnData | np.ndarray | spmatrix,
    counts_per_cell_after: float | None = None,
    counts_per_cell: np.ndarray | None = None,
    key_n_counts: str = ""n_counts"",
    copy: bool = False,
    layers: Literal[""all""] | Iterable[str] = (),
    use_rep: Literal[""after"", ""X""] | None = None,
    min_counts: int = 1,
) -> AnnData | np.ndarray | spmatrix | None",scverse,scanpy,1.10.1,,,,normalize_per_cell,"(  # noqa: PLR0917
    data: AnnData | np.ndarray | spmatrix,
    counts_per_cell_after: float | None = None,
    counts_per_cell: np.ndarray | None = None,
    key_n_counts: str = ""n_counts"",
    copy: bool = False,
    layers: Literal[""all""] | Iterable[str] = (),
    use_rep: Literal[""after"", ""X""] | None = None,
    min_counts: int = 1,
)",,,,,,,,AnnData | np.ndarray | spmatrix | None,,,,,
scverse_scanpy_1.10.1,_simple.py,python,_regress_out_chunk(data),function,,,,Function: _regress_out_chunk(data),scverse,scanpy,1.10.1,,,,_regress_out_chunk,(data),,,,,,,,,"# data is a tuple containing the selected columns from adata.X",,,,
scverse_scanpy_1.10.1,_simple.py,python,_regress_out_chunk(data),function,,,,Function: _regress_out_chunk(data),scverse,scanpy,1.10.1,,,,_regress_out_chunk,(data),,,,,,,,,"# and the regressors dataFrame",,,,
scverse_scanpy_1.10.1,_simple.py,python,"_downsample_per_cell(X, counts_per_cell, random_state, replace)",function,,,,"Function: _downsample_per_cell(X, counts_per_cell, random_state, replace)",scverse,scanpy,1.10.1,,,,_downsample_per_cell,"(X, counts_per_cell, random_state, replace)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,"_downsample_total_counts(X, total_counts, random_state, replace)",function,,,,"Function: _downsample_total_counts(X, total_counts, random_state, replace)",scverse,scanpy,1.10.1,,,,_downsample_total_counts,"(X, total_counts, random_state, replace)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,"_pca_fallback(data, n_comps=2)",function,,,,"Function: _pca_fallback(data, n_comps=2)",scverse,scanpy,1.10.1,,,,_pca_fallback,"(data, n_comps=2)",,,,,,,,,"# mean center the data",,,,
scverse_scanpy_1.10.1,_simple.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,singledispatch from functools,import,,,,Import: singledispatch from functools,scverse,scanpy,1.10.1,from functools import singledispatch,functools,singledispatch,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,numba,import,,,,Import: numba,scverse,scanpy,1.10.1,import numba,,numba,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,scipy,import,,,,Import: scipy,scverse,scanpy,1.10.1,import scipy as sp,,scipy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,CategoricalDtype from pandas.api.types,local_import,,,,Import: CategoricalDtype from pandas.api.types,scverse,scanpy,1.10.1,from pandas.api.types import CategoricalDtype,pandas.api.types,CategoricalDtype,,,pandas.api.types,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse, isspmatrix_csr, spmatrix",scipy.sparse,csr_matrix,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse, isspmatrix_csr, spmatrix",scipy.sparse,issparse,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,isspmatrix_csr from scipy.sparse,local_import,,,,Import: isspmatrix_csr from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse, isspmatrix_csr, spmatrix",scipy.sparse,isspmatrix_csr,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,spmatrix from scipy.sparse,local_import,,,,Import: spmatrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse, isspmatrix_csr, spmatrix",scipy.sparse,spmatrix,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,check_array from sklearn.utils,local_import,,,,Import: check_array from sklearn.utils,scverse,scanpy,1.10.1,"from sklearn.utils import check_array, sparsefuncs",sklearn.utils,check_array,,,sklearn.utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,_simple.py,python,sparsefuncs from sklearn.utils,local_import,,,,Import: sparsefuncs from sklearn.utils,scverse,scanpy,1.10.1,"from sklearn.utils import check_array, sparsefuncs",sklearn.utils,sparsefuncs,,,sklearn.utils,,,,,,,,,,,,
,_simple.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_simple.py,python,,,,,,Directory: scanpy\preprocessing\_simple.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_get_mean_var(
    X: _SupportedArray, *, axis: Literal[0, 1] = 0
) -> tuple[NDArray[np.float64], NDArray[np.float64]]",function,,,,"Function: _get_mean_var(
    X: _SupportedArray, *, axis: Literal[0, 1] = 0
) -> tuple[NDArray[np.float64], NDArray[np.float64]]",scverse,scanpy,1.10.1,,,,_get_mean_var,"(
    X: _SupportedArray, *, axis: Literal[0, 1] = 0
)",,,,,,,,"tuple[NDArray[np.float64], NDArray[np.float64]]",,,,,
scverse_scanpy_1.10.1,_utils.py,python,"sparse_mean_variance_axis(mtx: sparse.spmatrix, axis: int)",function,,,,"Function: sparse_mean_variance_axis(mtx: sparse.spmatrix, axis: int)",scverse,scanpy,1.10.1,,,,sparse_mean_variance_axis,"(mtx: sparse.spmatrix, axis: int)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"sample_comb(
    dims: tuple[int, ...],
    nsamp: int,
    *,
    random_state: AnyRandom = None,
    method: Literal[
        ""auto"", ""tracking_selection"", ""reservoir_sampling"", ""pool""
    ] = ""auto"",
) -> NDArray[np.int64]",function,,,,"Function: sample_comb(
    dims: tuple[int, ...],
    nsamp: int,
    *,
    random_state: AnyRandom = None,
    method: Literal[
        ""auto"", ""tracking_selection"", ""reservoir_sampling"", ""pool""
    ] = ""auto"",
) -> NDArray[np.int64]",scverse,scanpy,1.10.1,,,,sample_comb,"(
    dims: tuple[int, ...],
    nsamp: int,
    *,
    random_state: AnyRandom = None,
    method: Literal[
        ""auto"", ""tracking_selection"", ""reservoir_sampling"", ""pool""
    ] = ""auto"",
)",,,,,,,,NDArray[np.int64],,,,,
scverse_scanpy_1.10.1,_utils.py,python,singledispatch from functools,import,,,,Import: singledispatch from functools,scverse,scanpy,1.10.1,from functools import singledispatch,functools,singledispatch,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,numba,import,,,,Import: numba,scverse,scanpy,1.10.1,import numba,,numba,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,sample_without_replacement from sklearn.random_projection,local_import,,,,Import: sample_without_replacement from sklearn.random_projection,scverse,scanpy,1.10.1,from sklearn.random_projection import sample_without_replacement,sklearn.random_projection,sample_without_replacement,,,sklearn.random_projection,,,,,,,,,,,,
,_utils.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_utils.py,python,,,,,,Directory: scanpy\preprocessing\_utils.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""neighbors"",
    ""combat"",
    ""filter_genes_dispersion"",
    ""highly_variable_genes"",
    ""normalize_total"",
    ""pca"",
    ""calculate_qc_metrics"",
    ""recipe_seurat"",
    ""recipe_weinreb17"",
    ""recipe_zheng17"",
    ""scrublet"",
    ""scrublet_simulate_doublets"",
    ""downsample_counts"",
    ""filter_cells"",
    ""filter_genes"",
    ""log1p"",
    ""normalize_per_cell"",
    ""regress_out"",
    ""scale"",
    ""sqrt"",
    ""subsample"",
]",constant,"__all__ = [
    ""neighbors"",
    ""combat"",
    ""filter_genes_dispersion"",
    ""highly_variable_genes"",
    ""normalize_total"",
    ""pca"",
    ""calculate_qc_metrics"",
    ""recipe_seurat"",
    ""recipe_weinreb17"",
    ""recipe_zheng17"",
    ""scrublet"",
    ""scrublet_simulate_doublets"",
    ""downsample_counts"",
    ""filter_cells"",
    ""filter_genes"",
    ""log1p"",
    ""normalize_per_cell"",
    ""regress_out"",
    ""scale"",
    ""sqrt"",
    ""subsample"",
]",__all__,"[
    ""neighbors"",
    ""combat"",
    ""filter_genes_dispersion"",
    ""highly_variable_genes"",
    ""normalize_total"",
    ""pca"",
    ""calculate_qc_metrics"",
    ""recipe_seurat"",
    ""recipe_weinreb17"",
    ""recipe_zheng17"",
    ""scrublet"",
    ""scrublet_simulate_doublets"",
    ""downsample_counts"",
    ""filter_cells"",
    ""filter_genes"",
    ""log1p"",
    ""normalize_per_cell"",
    ""regress_out"",
    ""scale"",
    ""sqrt"",
    ""subsample"",
]","Constant: __all__ = [
    ""neighbors"",
    ""combat"",
    ""filter_genes_dispersion"",
    ""highly_variable_genes"",
    ""normalize_total"",
    ""pca"",
    ""calculate_qc_metrics"",
    ""recipe_seurat"",
    ""recipe_weinreb17"",
    ""recipe_zheng17"",
    ""scrublet"",
    ""scrublet_simulate_doublets"",
    ""downsample_counts"",
    ""filter_cells"",
    ""filter_genes"",
    ""log1p"",
    ""normalize_per_cell"",
    ""regress_out"",
    ""scale"",
    ""sqrt"",
    ""subsample"",
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\preprocessing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\preprocessing\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,"filter_genes_dispersion(  # noqa: PLR0917
    data: AnnData | spmatrix | np.ndarray,
    flavor: Literal[""seurat"", ""cell_ranger""] = ""seurat"",
    min_disp: float | None = None,
    max_disp: float | None = None,
    min_mean: float | None = None,
    max_mean: float | None = None,
    n_bins: int = 20,
    n_top_genes: int | None = None,
    log: bool = True,
    subset: bool = True,
    copy: bool = False,
) -> AnnData | np.recarray | None",function,,,,"Function: filter_genes_dispersion(  # noqa: PLR0917
    data: AnnData | spmatrix | np.ndarray,
    flavor: Literal[""seurat"", ""cell_ranger""] = ""seurat"",
    min_disp: float | None = None,
    max_disp: float | None = None,
    min_mean: float | None = None,
    max_mean: float | None = None,
    n_bins: int = 20,
    n_top_genes: int | None = None,
    log: bool = True,
    subset: bool = True,
    copy: bool = False,
) -> AnnData | np.recarray | None",scverse,scanpy,1.10.1,,,,filter_genes_dispersion,"(  # noqa: PLR0917
    data: AnnData | spmatrix | np.ndarray,
    flavor: Literal[""seurat"", ""cell_ranger""] = ""seurat"",
    min_disp: float | None = None,
    max_disp: float | None = None,
    min_mean: float | None = None,
    max_mean: float | None = None,
    n_bins: int = 20,
    n_top_genes: int | None = None,
    log: bool = True,
    subset: bool = True,
    copy: bool = False,
)",,,,,,,,AnnData | np.recarray | None,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,"filter_genes_cv_deprecated(X, Ecutoff, cvFilter)",function,,,,"Function: filter_genes_cv_deprecated(X, Ecutoff, cvFilter)",scverse,scanpy,1.10.1,,,,filter_genes_cv_deprecated,"(X, Ecutoff, cvFilter)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,"filter_genes_fano_deprecated(X, Ecutoff, Vcutoff)",function,,,,"Function: filter_genes_fano_deprecated(X, Ecutoff, Vcutoff)",scverse,scanpy,1.10.1,,,,filter_genes_fano_deprecated,"(X, Ecutoff, Vcutoff)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,"_filter_genes(X, e_cutoff, v_cutoff, meth)",function,,,,"Function: _filter_genes(X, e_cutoff, v_cutoff, meth)",scverse,scanpy,1.10.1,,,,_filter_genes,"(X, e_cutoff, v_cutoff, meth)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,highly_variable_genes.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import issparse,scipy.sparse,issparse,,,scipy.sparse,,,,,,,,,,,,
,highly_variable_genes.py,python,,,,,,File: scanpy\preprocessing\_deprecated,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,highly_variable_genes.py,python,,,,,,Directory: scanpy\preprocessing\_deprecated\highly_variable_genes.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"normalize_per_cell_weinreb16_deprecated(
    X: np.ndarray,
    max_fraction: float = 1,
    mult_with_mean: bool = False,
) -> np.ndarray",function,,,,"Function: normalize_per_cell_weinreb16_deprecated(
    X: np.ndarray,
    max_fraction: float = 1,
    mult_with_mean: bool = False,
) -> np.ndarray",scverse,scanpy,1.10.1,,,,normalize_per_cell_weinreb16_deprecated,"(
    X: np.ndarray,
    max_fraction: float = 1,
    mult_with_mean: bool = False,
)",,,,,,,,np.ndarray,,,,,
scverse_scanpy_1.10.1,__init__.py,python,zscore_deprecated(X: np.ndarray) -> np.ndarray,function,,,,Function: zscore_deprecated(X: np.ndarray) -> np.ndarray,scverse,scanpy,1.10.1,,,,zscore_deprecated,(X: np.ndarray),,,,,,,,np.ndarray,,,,,
scverse_scanpy_1.10.1,__init__.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse",scipy.sparse,csr_matrix,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse",scipy.sparse,issparse,,,scipy.sparse,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\preprocessing\_deprecated,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\preprocessing\_deprecated\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,"Scrublet.counts_obs: InitVar[sparse.csr_matrix | sparse.csc_matrix | NDArray[np.integer]] = (
        field(**kw_only(False))
    )",class_field,,,,"Class field: Scrublet.counts_obs: InitVar[sparse.csr_matrix | sparse.csc_matrix | NDArray[np.integer]] = (
        field(**kw_only(False))
    )",scverse,scanpy,1.10.1,,,,,,,Scrublet,,,"counts_obs: InitVar[sparse.csr_matrix | sparse.csc_matrix | NDArray[np.integer]] = (
        field(**kw_only(False))
    )",,,,,counts_obs,,"(
        field(**kw_only(False))
    )",
scverse_scanpy_1.10.1,core.py,python,Scrublet.total_counts_obs: InitVar[NDArray[np.integer] | None] = None,class_field,,,,Class field: Scrublet.total_counts_obs: InitVar[NDArray[np.integer] | None] = None,scverse,scanpy,1.10.1,,,,,,,Scrublet,,,total_counts_obs: InitVar[NDArray[np.integer] | None] = None,,,,,total_counts_obs,,,
scverse_scanpy_1.10.1,core.py,python,Scrublet.sim_doublet_ratio: float = 2.0,class_field,,,,Class field: Scrublet.sim_doublet_ratio: float = 2.0,scverse,scanpy,1.10.1,,,,,,,Scrublet,,,sim_doublet_ratio: float = 2.0,,,,,sim_doublet_ratio,,2.0,
scverse_scanpy_1.10.1,core.py,python,Scrublet.n_neighbors: InitVar[int | None] = None,class_field,,,,Class field: Scrublet.n_neighbors: InitVar[int | None] = None,scverse,scanpy,1.10.1,,,,,,,Scrublet,,,n_neighbors: InitVar[int | None] = None,,,,,n_neighbors,,,
scverse_scanpy_1.10.1,core.py,python,Scrublet.expected_doublet_rate: float = 0.1,class_field,,,,Class field: Scrublet.expected_doublet_rate: float = 0.1,scverse,scanpy,1.10.1,,,,,,,Scrublet,,,expected_doublet_rate: float = 0.1,,,,,expected_doublet_rate,,0.1,
scverse_scanpy_1.10.1,core.py,python,Scrublet.stdev_doublet_rate: float = 0.02,class_field,,,,Class field: Scrublet.stdev_doublet_rate: float = 0.02,scverse,scanpy,1.10.1,,,,,,,Scrublet,,,stdev_doublet_rate: float = 0.02,,,,,stdev_doublet_rate,,0.02,
scverse_scanpy_1.10.1,core.py,python,Scrublet.random_state: InitVar[AnyRandom] = 0,class_field,,,,Class field: Scrublet.random_state: InitVar[AnyRandom] = 0,scverse,scanpy,1.10.1,,,,,,,Scrublet,,,random_state: InitVar[AnyRandom] = 0,,,,,random_state,,0,
scverse_scanpy_1.10.1,core.py,python,"Scrublet._n_neighbors: int = field(init=False, repr=False)",class_field,,,,"Class field: Scrublet._n_neighbors: int = field(init=False, repr=False)",scverse,scanpy,1.10.1,,,,,,,Scrublet,,,"_n_neighbors: int = field(init=False, repr=False)",,,,,_n_neighbors,,"field(init=False, repr=False)",
scverse_scanpy_1.10.1,core.py,python,"Scrublet._random_state: RandomState = field(init=False, repr=False)",class_field,,,,"Class field: Scrublet._random_state: RandomState = field(init=False, repr=False)",scverse,scanpy,1.10.1,,,,,,,Scrublet,,,"_random_state: RandomState = field(init=False, repr=False)",,,,,_random_state,,"field(init=False, repr=False)",
scverse_scanpy_1.10.1,core.py,python,"Scrublet._counts_obs: sparse.csc_matrix = field(init=False, repr=False)",class_field,,,,"Class field: Scrublet._counts_obs: sparse.csc_matrix = field(init=False, repr=False)",scverse,scanpy,1.10.1,,,,,,,Scrublet,,,"_counts_obs: sparse.csc_matrix = field(init=False, repr=False)",,,,,_counts_obs,,"field(init=False, repr=False)",
scverse_scanpy_1.10.1,core.py,python,"Scrublet._total_counts_obs: NDArray[np.integer] = field(init=False, repr=False)",class_field,,,,"Class field: Scrublet._total_counts_obs: NDArray[np.integer] = field(init=False, repr=False)",scverse,scanpy,1.10.1,,,,,,,Scrublet,,,"_total_counts_obs: NDArray[np.integer] = field(init=False, repr=False)",,,,,_total_counts_obs,,"field(init=False, repr=False)",
scverse_scanpy_1.10.1,core.py,python,"Scrublet._counts_obs_norm: sparse.csr_matrix | sparse.csc_matrix = field(
        init=False, repr=False
    )",class_field,,,,"Class field: Scrublet._counts_obs_norm: sparse.csr_matrix | sparse.csc_matrix = field(
        init=False, repr=False
    )",scverse,scanpy,1.10.1,,,,,,,Scrublet,,,"_counts_obs_norm: sparse.csr_matrix | sparse.csc_matrix = field(
        init=False, repr=False
    )",,,,,_counts_obs_norm,,"field(
        init=False, repr=False
    )",
scverse_scanpy_1.10.1,core.py,python,"Scrublet._counts_sim: sparse.csr_matrix | sparse.csc_matrix = field(init=False, repr=False)",class_field,,,,"Class field: Scrublet._counts_sim: sparse.csr_matrix | sparse.csc_matrix = field(init=False, repr=False)",scverse,scanpy,1.10.1,,,,,,,Scrublet,,,"_counts_sim: sparse.csr_matrix | sparse.csc_matrix = field(init=False, repr=False)",,,,,_counts_sim,,"field(init=False, repr=False)",
scverse_scanpy_1.10.1,core.py,python,"Scrublet._total_counts_sim: NDArray[np.integer] = field(init=False, repr=False)",class_field,,,,"Class field: Scrublet._total_counts_sim: NDArray[np.integer] = field(init=False, repr=False)",scverse,scanpy,1.10.1,,,,,,,Scrublet,,,"_total_counts_sim: NDArray[np.integer] = field(init=False, repr=False)",,,,,_total_counts_sim,,"field(init=False, repr=False)",
scverse_scanpy_1.10.1,core.py,python,"Scrublet._counts_sim_norm: sparse.csr_matrix | sparse.csc_matrix | None = field(
        default=None, init=False, repr=False
    )",class_field,,,,"Class field: Scrublet._counts_sim_norm: sparse.csr_matrix | sparse.csc_matrix | None = field(
        default=None, init=False, repr=False
    )",scverse,scanpy,1.10.1,,,,,,,Scrublet,,,"_counts_sim_norm: sparse.csr_matrix | sparse.csc_matrix | None = field(
        default=None, init=False, repr=False
    )",,,,,_counts_sim_norm,,"field(
        default=None, init=False, repr=False
    )",
scverse_scanpy_1.10.1,core.py,python,Scrublet.predicted_doublets_: NDArray[np.bool_] | None = field(init=False),class_field,,,,Class field: Scrublet.predicted_doublets_: NDArray[np.bool_] | None = field(init=False),scverse,scanpy,1.10.1,,,,,,,Scrublet,,,predicted_doublets_: NDArray[np.bool_] | None = field(init=False),,,,,predicted_doublets_,,field(init=False),
scverse_scanpy_1.10.1,core.py,python,Scrublet.doublet_scores_obs_: NDArray[np.float64] = field(init=False),class_field,,,,Class field: Scrublet.doublet_scores_obs_: NDArray[np.float64] = field(init=False),scverse,scanpy,1.10.1,,,,,,,Scrublet,,,doublet_scores_obs_: NDArray[np.float64] = field(init=False),,,,,doublet_scores_obs_,,field(init=False),
scverse_scanpy_1.10.1,core.py,python,Scrublet.doublet_scores_sim_: NDArray[np.float64] = field(init=False),class_field,,,,Class field: Scrublet.doublet_scores_sim_: NDArray[np.float64] = field(init=False),scverse,scanpy,1.10.1,,,,,,,Scrublet,,,doublet_scores_sim_: NDArray[np.float64] = field(init=False),,,,,doublet_scores_sim_,,field(init=False),
scverse_scanpy_1.10.1,core.py,python,Scrublet.doublet_errors_obs_: NDArray[np.float64] = field(init=False),class_field,,,,Class field: Scrublet.doublet_errors_obs_: NDArray[np.float64] = field(init=False),scverse,scanpy,1.10.1,,,,,,,Scrublet,,,doublet_errors_obs_: NDArray[np.float64] = field(init=False),,,,,doublet_errors_obs_,,field(init=False),
scverse_scanpy_1.10.1,core.py,python,Scrublet.doublet_errors_sim_: NDArray[np.float64] = field(init=False),class_field,,,,Class field: Scrublet.doublet_errors_sim_: NDArray[np.float64] = field(init=False),scverse,scanpy,1.10.1,,,,,,,Scrublet,,,doublet_errors_sim_: NDArray[np.float64] = field(init=False),,,,,doublet_errors_sim_,,field(init=False),
scverse_scanpy_1.10.1,core.py,python,Scrublet.threshold_: float = field(init=False),class_field,,,,Class field: Scrublet.threshold_: float = field(init=False),scverse,scanpy,1.10.1,,,,,,,Scrublet,,,threshold_: float = field(init=False),,,,,threshold_,,field(init=False),
scverse_scanpy_1.10.1,core.py,python,Scrublet.z_scores_: NDArray[np.float64] = field(init=False),class_field,,,,Class field: Scrublet.z_scores_: NDArray[np.float64] = field(init=False),scverse,scanpy,1.10.1,,,,,,,Scrublet,,,z_scores_: NDArray[np.float64] = field(init=False),,,,,z_scores_,,field(init=False),
scverse_scanpy_1.10.1,core.py,python,Scrublet.detected_doublet_rate_: float = field(init=False),class_field,,,,Class field: Scrublet.detected_doublet_rate_: float = field(init=False),scverse,scanpy,1.10.1,,,,,,,Scrublet,,,detected_doublet_rate_: float = field(init=False),,,,,detected_doublet_rate_,,field(init=False),
scverse_scanpy_1.10.1,core.py,python,Scrublet.detectable_doublet_fraction_: float = field(init=False),class_field,,,,Class field: Scrublet.detectable_doublet_fraction_: float = field(init=False),scverse,scanpy,1.10.1,,,,,,,Scrublet,,,detectable_doublet_fraction_: float = field(init=False),,,,,detectable_doublet_fraction_,,field(init=False),
scverse_scanpy_1.10.1,core.py,python,Scrublet.overall_doublet_rate_: float = field(init=False),class_field,,,,Class field: Scrublet.overall_doublet_rate_: float = field(init=False),scverse,scanpy,1.10.1,,,,,,,Scrublet,,,overall_doublet_rate_: float = field(init=False),,,,,overall_doublet_rate_,,field(init=False),
scverse_scanpy_1.10.1,core.py,python,Scrublet.manifold_obs_: NDArray[np.float64] = field(init=False),class_field,,,,Class field: Scrublet.manifold_obs_: NDArray[np.float64] = field(init=False),scverse,scanpy,1.10.1,,,,,,,Scrublet,,,manifold_obs_: NDArray[np.float64] = field(init=False),,,,,manifold_obs_,,field(init=False),
scverse_scanpy_1.10.1,core.py,python,Scrublet.manifold_sim_: NDArray[np.float64] = field(init=False),class_field,,,,Class field: Scrublet.manifold_sim_: NDArray[np.float64] = field(init=False),scverse,scanpy,1.10.1,,,,,,,Scrublet,,,manifold_sim_: NDArray[np.float64] = field(init=False),,,,,manifold_sim_,,field(init=False),
scverse_scanpy_1.10.1,core.py,python,Scrublet.doublet_parents_: NDArray[np.intp] = field(init=False),class_field,,,,Class field: Scrublet.doublet_parents_: NDArray[np.intp] = field(init=False),scverse,scanpy,1.10.1,,,,,,,Scrublet,,,doublet_parents_: NDArray[np.intp] = field(init=False),,,,,doublet_parents_,,field(init=False),
scverse_scanpy_1.10.1,core.py,python,Scrublet.doublet_neighbor_parents_: list[NDArray[np.intp]] = field(init=False),class_field,,,,Class field: Scrublet.doublet_neighbor_parents_: list[NDArray[np.intp]] = field(init=False),scverse,scanpy,1.10.1,,,,,,,Scrublet,,,doublet_neighbor_parents_: list[NDArray[np.intp]] = field(init=False),,,,,doublet_neighbor_parents_,,field(init=False),
scverse_scanpy_1.10.1,core.py,python,"Scrublet.__post_init__(
        self,
        counts_obs: sparse.csr_matrix | sparse.csc_matrix | NDArray[np.integer],
        total_counts_obs: NDArray[np.integer] | None,
        n_neighbors: int | None,
        random_state: AnyRandom,
    ) -> None",class_method,,,,"Class method: Scrublet.__post_init__(
        self,
        counts_obs: sparse.csr_matrix | sparse.csc_matrix | NDArray[np.integer],
        total_counts_obs: NDArray[np.integer] | None,
        n_neighbors: int | None,
        random_state: AnyRandom,
    ) -> None",scverse,scanpy,1.10.1,,,,,,,Scrublet,__post_init__,"(
        self,
        counts_obs: sparse.csr_matrix | sparse.csc_matrix | NDArray[np.integer],
        total_counts_obs: NDArray[np.integer] | None,
        n_neighbors: int | None,
        random_state: AnyRandom,
    )",,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,"Scrublet.simulate_doublets(
        self,
        *,
        sim_doublet_ratio: float | None = None,
        synthetic_doublet_umi_subsampling: float = 1.0,
    ) -> None",class_method,,,,"Class method: Scrublet.simulate_doublets(
        self,
        *,
        sim_doublet_ratio: float | None = None,
        synthetic_doublet_umi_subsampling: float = 1.0,
    ) -> None",scverse,scanpy,1.10.1,,,,,,,Scrublet,simulate_doublets,"(
        self,
        *,
        sim_doublet_ratio: float | None = None,
        synthetic_doublet_umi_subsampling: float = 1.0,
    )",,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,"Scrublet.set_manifold(
        self, manifold_obs: NDArray[np.float64], manifold_sim: NDArray[np.float64]
    ) -> None",class_method,,,,"Class method: Scrublet.set_manifold(
        self, manifold_obs: NDArray[np.float64], manifold_sim: NDArray[np.float64]
    ) -> None",scverse,scanpy,1.10.1,,,,,,,Scrublet,set_manifold,"(
        self, manifold_obs: NDArray[np.float64], manifold_sim: NDArray[np.float64]
    )",,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,"Scrublet.calculate_doublet_scores(
        self,
        use_approx_neighbors: bool = True,
        distance_metric: _Metric | _MetricFn = ""euclidean"",
        get_doublet_neighbor_parents: bool = False,
    ) -> NDArray[np.float64]",class_method,,,,"Class method: Scrublet.calculate_doublet_scores(
        self,
        use_approx_neighbors: bool = True,
        distance_metric: _Metric | _MetricFn = ""euclidean"",
        get_doublet_neighbor_parents: bool = False,
    ) -> NDArray[np.float64]",scverse,scanpy,1.10.1,,,,,,,Scrublet,calculate_doublet_scores,"(
        self,
        use_approx_neighbors: bool = True,
        distance_metric: _Metric | _MetricFn = ""euclidean"",
        get_doublet_neighbor_parents: bool = False,
    )",,,NDArray[np.float64],,,,,,
scverse_scanpy_1.10.1,core.py,python,"Scrublet._nearest_neighbor_classifier(
        self,
        k: int = 40,
        *,
        use_approx_nn: bool = True,
        distance_metric: _Metric | _MetricFn = ""euclidean"",
        exp_doub_rate: float = 0.1,
        stdev_doub_rate: float = 0.03,
        get_neighbor_parents: bool = False,
    ) -> None",class_method,,,,"Class method: Scrublet._nearest_neighbor_classifier(
        self,
        k: int = 40,
        *,
        use_approx_nn: bool = True,
        distance_metric: _Metric | _MetricFn = ""euclidean"",
        exp_doub_rate: float = 0.1,
        stdev_doub_rate: float = 0.03,
        get_neighbor_parents: bool = False,
    ) -> None",scverse,scanpy,1.10.1,,,,,,,Scrublet,_nearest_neighbor_classifier,"(
        self,
        k: int = 40,
        *,
        use_approx_nn: bool = True,
        distance_metric: _Metric | _MetricFn = ""euclidean"",
        exp_doub_rate: float = 0.1,
        stdev_doub_rate: float = 0.03,
        get_neighbor_parents: bool = False,
    )",,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,"Scrublet.call_doublets(
        self, *, threshold: float | None = None, verbose: bool = True
    ) -> NDArray[np.bool_] | None",class_method,,,,"Class method: Scrublet.call_doublets(
        self, *, threshold: float | None = None, verbose: bool = True
    ) -> NDArray[np.bool_] | None",scverse,scanpy,1.10.1,,,,,,,Scrublet,call_doublets,"(
        self, *, threshold: float | None = None, verbose: bool = True
    )",,,NDArray[np.bool_] | None,,,,,,
scverse_scanpy_1.10.1,core.py,python,Scrublet,class,,,,Class: Scrublet,scverse,scanpy,1.10.1,,,,,,,Scrublet,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,"__all__ = [""Scrublet""]",constant,"__all__ = [""Scrublet""]",__all__,"[""Scrublet""]","Constant: __all__ = [""Scrublet""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,,sys,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,InitVar from dataclasses,import,,,,Import: InitVar from dataclasses,scverse,scanpy,1.10.1,"from dataclasses import InitVar, dataclass, field",dataclasses,InitVar,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,dataclass from dataclasses,import,,,,Import: dataclass from dataclasses,scverse,scanpy,1.10.1,"from dataclasses import InitVar, dataclass, field",dataclasses,dataclass,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,field from dataclasses,import,,,,Import: field from dataclasses,scverse,scanpy,1.10.1,"from dataclasses import InitVar, dataclass, field",dataclasses,field,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, cast",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,cast from typing,import,,,,Import: cast from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, cast",typing,cast,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,"from anndata import AnnData, concat",anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,concat from anndata,import,,,,Import: concat from anndata,scverse,scanpy,1.10.1,"from anndata import AnnData, concat",anndata,concat,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,core.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
,core.py,python,,,,,,File: scanpy\preprocessing\_scrublet,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,core.py,python,,,,,,Directory: scanpy\preprocessing\_scrublet\core.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pipeline.py,python,mean_center(self: Scrublet) -> None,function,,,,Function: mean_center(self: Scrublet) -> None,scverse,scanpy,1.10.1,,,,mean_center,(self: Scrublet),,,,,,,,,,,,,
scverse_scanpy_1.10.1,pipeline.py,python,normalize_variance(self: Scrublet) -> None,function,,,,Function: normalize_variance(self: Scrublet) -> None,scverse,scanpy,1.10.1,,,,normalize_variance,(self: Scrublet),,,,,,,,,,,,,
scverse_scanpy_1.10.1,pipeline.py,python,zscore(self: Scrublet) -> None,function,,,,Function: zscore(self: Scrublet) -> None,scverse,scanpy,1.10.1,,,,zscore,(self: Scrublet),,,,,,,,,,,,,
scverse_scanpy_1.10.1,pipeline.py,python,"truncated_svd(
    self: Scrublet,
    n_prin_comps: int = 30,
    *,
    random_state: AnyRandom = 0,
    algorithm: Literal[""arpack"", ""randomized""] = ""arpack"",
) -> None",function,,,,"Function: truncated_svd(
    self: Scrublet,
    n_prin_comps: int = 30,
    *,
    random_state: AnyRandom = 0,
    algorithm: Literal[""arpack"", ""randomized""] = ""arpack"",
) -> None",scverse,scanpy,1.10.1,,,,truncated_svd,"(
    self: Scrublet,
    n_prin_comps: int = 30,
    *,
    random_state: AnyRandom = 0,
    algorithm: Literal[""arpack"", ""randomized""] = ""arpack"",
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,pipeline.py,python,"pca(
    self: Scrublet,
    n_prin_comps: int = 50,
    *,
    random_state: AnyRandom = 0,
    svd_solver: Literal[""auto"", ""full"", ""arpack"", ""randomized""] = ""arpack"",
) -> None",function,,,,"Function: pca(
    self: Scrublet,
    n_prin_comps: int = 50,
    *,
    random_state: AnyRandom = 0,
    svd_solver: Literal[""auto"", ""full"", ""arpack"", ""randomized""] = ""arpack"",
) -> None",scverse,scanpy,1.10.1,,,,pca,"(
    self: Scrublet,
    n_prin_comps: int = 50,
    *,
    random_state: AnyRandom = 0,
    svd_solver: Literal[""auto"", ""full"", ""arpack"", ""randomized""] = ""arpack"",
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,pipeline.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pipeline.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pipeline.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,pipeline.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
,pipeline.py,python,,,,,,File: scanpy\preprocessing\_scrublet,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,pipeline.py,python,,,,,,Directory: scanpy\preprocessing\_scrublet\pipeline.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,sparse_utils.py,python,"sparse_var(
    E: sparse.csr_matrix | sparse.csc_matrix,
    *,
    axis: Literal[0, 1],
) -> NDArray[np.float64]",function,,,,"Function: sparse_var(
    E: sparse.csr_matrix | sparse.csc_matrix,
    *,
    axis: Literal[0, 1],
) -> NDArray[np.float64]",scverse,scanpy,1.10.1,,,,sparse_var,"(
    E: sparse.csr_matrix | sparse.csc_matrix,
    *,
    axis: Literal[0, 1],
)",,,,,,,,NDArray[np.float64],,,,,
scverse_scanpy_1.10.1,sparse_utils.py,python,"sparse_multiply(
    E: sparse.csr_matrix | sparse.csc_matrix | NDArray[np.float64],
    a: float | int | NDArray[np.float64],
) -> sparse.csr_matrix | sparse.csc_matrix",function,,,,"Function: sparse_multiply(
    E: sparse.csr_matrix | sparse.csc_matrix | NDArray[np.float64],
    a: float | int | NDArray[np.float64],
) -> sparse.csr_matrix | sparse.csc_matrix",scverse,scanpy,1.10.1,,,,sparse_multiply,"(
    E: sparse.csr_matrix | sparse.csc_matrix | NDArray[np.float64],
    a: float | int | NDArray[np.float64],
)",,,,,,,,sparse.csr_matrix | sparse.csc_matrix,,,,,
scverse_scanpy_1.10.1,sparse_utils.py,python,"sparse_zscore(
    E: sparse.csr_matrix | sparse.csc_matrix,
    *,
    gene_mean: NDArray[np.float64] | None = None,
    gene_stdev: NDArray[np.float64] | None = None,
) -> sparse.csr_matrix | sparse.csc_matrix",function,,,,"Function: sparse_zscore(
    E: sparse.csr_matrix | sparse.csc_matrix,
    *,
    gene_mean: NDArray[np.float64] | None = None,
    gene_stdev: NDArray[np.float64] | None = None,
) -> sparse.csr_matrix | sparse.csc_matrix",scverse,scanpy,1.10.1,,,,sparse_zscore,"(
    E: sparse.csr_matrix | sparse.csc_matrix,
    *,
    gene_mean: NDArray[np.float64] | None = None,
    gene_stdev: NDArray[np.float64] | None = None,
)",,,,,,,,sparse.csr_matrix | sparse.csc_matrix,,,,,
scverse_scanpy_1.10.1,sparse_utils.py,python,"subsample_counts(
    E: sparse.csr_matrix | sparse.csc_matrix,
    *,
    rate: float,
    original_totals,
    random_seed: AnyRandom = 0,
) -> tuple[sparse.csr_matrix | sparse.csc_matrix, NDArray[np.int64]]",function,,,,"Function: subsample_counts(
    E: sparse.csr_matrix | sparse.csc_matrix,
    *,
    rate: float,
    original_totals,
    random_seed: AnyRandom = 0,
) -> tuple[sparse.csr_matrix | sparse.csc_matrix, NDArray[np.int64]]",scverse,scanpy,1.10.1,,,,subsample_counts,"(
    E: sparse.csr_matrix | sparse.csc_matrix,
    *,
    rate: float,
    original_totals,
    random_seed: AnyRandom = 0,
)",,,,,,,,"tuple[sparse.csr_matrix | sparse.csc_matrix, NDArray[np.int64]]",,,,,
scverse_scanpy_1.10.1,sparse_utils.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,sparse_utils.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,sparse_utils.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,sparse_utils.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
,sparse_utils.py,python,,,,,,File: scanpy\preprocessing\_scrublet,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,sparse_utils.py,python,,,,,,Directory: scanpy\preprocessing\_scrublet\sparse_utils.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_scrublet_call_doublets(
    adata_obs: AnnData,
    adata_sim: AnnData,
    *,
    n_neighbors: int | None = None,
    expected_doublet_rate: float = 0.05,
    stdev_doublet_rate: float = 0.02,
    mean_center: bool = True,
    normalize_variance: bool = True,
    n_prin_comps: int = 30,
    use_approx_neighbors: bool = True,
    knn_dist_metric: _Metric | _MetricFn = ""euclidean"",
    get_doublet_neighbor_parents: bool = False,
    threshold: float | None = None,
    random_state: AnyRandom = 0,
    verbose: bool = True,
) -> AnnData",function,,,,"Function: _scrublet_call_doublets(
    adata_obs: AnnData,
    adata_sim: AnnData,
    *,
    n_neighbors: int | None = None,
    expected_doublet_rate: float = 0.05,
    stdev_doublet_rate: float = 0.02,
    mean_center: bool = True,
    normalize_variance: bool = True,
    n_prin_comps: int = 30,
    use_approx_neighbors: bool = True,
    knn_dist_metric: _Metric | _MetricFn = ""euclidean"",
    get_doublet_neighbor_parents: bool = False,
    threshold: float | None = None,
    random_state: AnyRandom = 0,
    verbose: bool = True,
) -> AnnData",scverse,scanpy,1.10.1,,,,_scrublet_call_doublets,"(
    adata_obs: AnnData,
    adata_sim: AnnData,
    *,
    n_neighbors: int | None = None,
    expected_doublet_rate: float = 0.05,
    stdev_doublet_rate: float = 0.02,
    mean_center: bool = True,
    normalize_variance: bool = True,
    n_prin_comps: int = 30,
    use_approx_neighbors: bool = True,
    knn_dist_metric: _Metric | _MetricFn = ""euclidean"",
    get_doublet_neighbor_parents: bool = False,
    threshold: float | None = None,
    random_state: AnyRandom = 0,
    verbose: bool = True,
)",,,,,,,,AnnData,,,,,
scverse_scanpy_1.10.1,__init__.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\preprocessing\_scrublet,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\preprocessing\_scrublet\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_queries.py,python,"_doc_org = """"""\
org
    Organism to query. Must be an organism in ensembl biomart. ""hsapiens"",
    ""mmusculus"", ""drerio"", etc.\
""""""",constant,"_doc_org = """"""\
org
    Organism to query. Must be an organism in ensembl biomart. ""hsapiens"",
    ""mmusculus"", ""drerio"", etc.\
""""""",_doc_org,"""""""\
org
    Organism to query. Must be an organism in ensembl biomart. ""hsapiens"",
    ""mmusculus"", ""drerio"", etc.\
""""""","Constant: _doc_org = """"""\
org
    Organism to query. Must be an organism in ensembl biomart. ""hsapiens"",
    ""mmusculus"", ""drerio"", etc.\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_queries.py,python,"_doc_host = """"""\
host
    A valid BioMart host URL. Alternative values include archive urls (like
    ""grch37.ensembl.org"") or regional mirrors (like ""useast.ensembl.org"").\
""""""",constant,"_doc_host = """"""\
host
    A valid BioMart host URL. Alternative values include archive urls (like
    ""grch37.ensembl.org"") or regional mirrors (like ""useast.ensembl.org"").\
""""""",_doc_host,"""""""\
host
    A valid BioMart host URL. Alternative values include archive urls (like
    ""grch37.ensembl.org"") or regional mirrors (like ""useast.ensembl.org"").\
""""""","Constant: _doc_host = """"""\
host
    A valid BioMart host URL. Alternative values include archive urls (like
    ""grch37.ensembl.org"") or regional mirrors (like ""useast.ensembl.org"").\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_queries.py,python,"_doc_use_cache = """"""\
use_cache
    Whether pybiomart should use a cache for requests. Will create a
    `.pybiomart.sqlite` file in current directory if used.\
""""""",constant,"_doc_use_cache = """"""\
use_cache
    Whether pybiomart should use a cache for requests. Will create a
    `.pybiomart.sqlite` file in current directory if used.\
""""""",_doc_use_cache,"""""""\
use_cache
    Whether pybiomart should use a cache for requests. Will create a
    `.pybiomart.sqlite` file in current directory if used.\
""""""","Constant: _doc_use_cache = """"""\
use_cache
    Whether pybiomart should use a cache for requests. Will create a
    `.pybiomart.sqlite` file in current directory if used.\
""""""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_queries.py,python,collections.abc,import,,,,Import: collections.abc,scverse,scanpy,1.10.1,import collections.abc as cabc,,collections.abc,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_queries.py,python,singledispatch from functools,import,,,,Import: singledispatch from functools,scverse,scanpy,1.10.1,from functools import singledispatch,functools,singledispatch,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_queries.py,python,MappingProxyType from types,import,,,,Import: MappingProxyType from types,scverse,scanpy,1.10.1,from types import MappingProxyType,types,MappingProxyType,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_queries.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_queries.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",typing,Any,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_queries.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
,_queries.py,python,,,,,,File: scanpy\queries,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_queries.py,python,,,,,,Directory: scanpy\queries\_queries.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""biomart_annotations"",
    ""enrich"",
    ""gene_coordinates"",
    ""mitochondrial_genes"",
]",constant,"__all__ = [
    ""biomart_annotations"",
    ""enrich"",
    ""gene_coordinates"",
    ""mitochondrial_genes"",
]",__all__,"[
    ""biomart_annotations"",
    ""enrich"",
    ""gene_coordinates"",
    ""mitochondrial_genes"",
]","Constant: __all__ = [
    ""biomart_annotations"",
    ""enrich"",
    ""gene_coordinates"",
    ""mitochondrial_genes"",
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\queries,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\queries\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\sim_models,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\sim_models\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_doctests.py,python,"doctest_needs(mod: str) -> Callable[[F], F]",function,,,,"Function: doctest_needs(mod: str) -> Callable[[F], F]",scverse,scanpy,1.10.1,,,,doctest_needs,(mod: str),,,,,,,,"Callable[[F], F]",,,,,
scverse_scanpy_1.10.1,_doctests.py,python,"doctest_skip(reason: str) -> Callable[[F], F]",function,,,,"Function: doctest_skip(reason: str) -> Callable[[F], F]",scverse,scanpy,1.10.1,,,,doctest_skip,(reason: str),,,,,,,,"Callable[[F], F]",,,,,
scverse_scanpy_1.10.1,_doctests.py,python,"F = TypeVar(""F"", bound=Callable)",constant,"F = TypeVar(""F"", bound=Callable)",F,"TypeVar(""F"", bound=Callable)","Constant: F = TypeVar(""F"", bound=Callable)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_doctests.py,python,TypeVar from typing,import,,,,Import: TypeVar from typing,scverse,scanpy,1.10.1,from typing import TypeVar,typing,TypeVar,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_doctests.py,python,Callable from collections.abc,local_import,,,,Import: Callable from collections.abc,scverse,scanpy,1.10.1,from collections.abc import Callable,collections.abc,Callable,,,collections.abc,,,,,,,,,,,,
,_doctests.py,python,,,,,,File: scanpy\testing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_doctests.py,python,,,,,,Directory: scanpy\testing\_doctests.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\testing,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\testing\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,pbmc3k() -> AnnData,function,,,,Function: pbmc3k() -> AnnData,scverse,scanpy,1.10.1,,,,pbmc3k,(),,,,,,,,AnnData,,,,,
scverse_scanpy_1.10.1,data.py,python,pbmc3k_processed() -> AnnData,function,,,,Function: pbmc3k_processed() -> AnnData,scverse,scanpy,1.10.1,,,,pbmc3k_processed,(),,,,,,,,AnnData,,,,,
scverse_scanpy_1.10.1,data.py,python,pbmc68k_reduced() -> AnnData,function,,,,Function: pbmc68k_reduced() -> AnnData,scverse,scanpy,1.10.1,,,,pbmc68k_reduced,(),,,,,,,,AnnData,,,,,
scverse_scanpy_1.10.1,data.py,python,krumsiek11() -> AnnData,function,,,,Function: krumsiek11() -> AnnData,scverse,scanpy,1.10.1,,,,krumsiek11,(),,,,,,,,AnnData,,,,,
scverse_scanpy_1.10.1,data.py,python,paul15() -> AnnData,function,,,,Function: paul15() -> AnnData,scverse,scanpy,1.10.1,,,,paul15,(),,,,,,,,AnnData,,,,,
scverse_scanpy_1.10.1,data.py,python,pbmc3k_normalized() -> AnnData,function,,,,Function: pbmc3k_normalized() -> AnnData,scverse,scanpy,1.10.1,,,,pbmc3k_normalized,(),,,,,,,,AnnData,,,,,
scverse_scanpy_1.10.1,data.py,python,_pbmc3k = cache(sc.datasets.pbmc3k),constant,_pbmc3k = cache(sc.datasets.pbmc3k),_pbmc3k,cache(sc.datasets.pbmc3k),Constant: _pbmc3k = cache(sc.datasets.pbmc3k),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,_pbmc3k_processed = cache(sc.datasets.pbmc3k_processed),constant,_pbmc3k_processed = cache(sc.datasets.pbmc3k_processed),_pbmc3k_processed,cache(sc.datasets.pbmc3k_processed),Constant: _pbmc3k_processed = cache(sc.datasets.pbmc3k_processed),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,_pbmc68k_reduced = cache(sc.datasets.pbmc68k_reduced),constant,_pbmc68k_reduced = cache(sc.datasets.pbmc68k_reduced),_pbmc68k_reduced,cache(sc.datasets.pbmc68k_reduced),Constant: _pbmc68k_reduced = cache(sc.datasets.pbmc68k_reduced),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,_krumsiek11 = cache(sc.datasets.krumsiek11),constant,_krumsiek11 = cache(sc.datasets.krumsiek11),_krumsiek11,cache(sc.datasets.krumsiek11),Constant: _krumsiek11 = cache(sc.datasets.krumsiek11),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,_paul15 = cache(sc.datasets.paul15),constant,_paul15 = cache(sc.datasets.paul15),_paul15,cache(sc.datasets.paul15),Constant: _paul15 = cache(sc.datasets.paul15),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
,data.py,python,,,,,,File: scanpy\testing\_helpers,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,data.py,python,,,,,,Directory: scanpy\testing\_helpers\data.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"anndata_v0_8_constructor_compat(X, *args, **kwargs)",function,,,,"Function: anndata_v0_8_constructor_compat(X, *args, **kwargs)",scverse,scanpy,1.10.1,,,,anndata_v0_8_constructor_compat,"(X, *args, **kwargs)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"check_rep_mutation(func, X, *, fields=(""layer"", ""obsm""), **kwargs)",function,,,,"Function: check_rep_mutation(func, X, *, fields=(""layer"", ""obsm""), **kwargs)",scverse,scanpy,1.10.1,,,,check_rep_mutation,"(func, X, *, fields=(""layer"", ""obsm""), **kwargs)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"check_rep_results(func, X, *, fields=[""layer"", ""obsm""], **kwargs)",function,,,,"Function: check_rep_results(func, X, *, fields=[""layer"", ""obsm""], **kwargs)",scverse,scanpy,1.10.1,,,,check_rep_results,"(func, X, *, fields=[""layer"", ""obsm""], **kwargs)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_check_check_values_warnings(function, adata, expected_warning, kwargs={})",function,,,,"Function: _check_check_values_warnings(function, adata, expected_warning, kwargs={})",scverse,scanpy,1.10.1,,,,_check_check_values_warnings,"(function, adata, expected_warning, kwargs={})",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"as_dense_dask_array(*args, **kwargs)",function,,,,"Function: as_dense_dask_array(*args, **kwargs)",scverse,scanpy,1.10.1,,,,as_dense_dask_array,"(*args, **kwargs)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"as_sparse_dask_array(*args, **kwargs)",function,,,,"Function: as_sparse_dask_array(*args, **kwargs)",scverse,scanpy,1.10.1,,,,as_sparse_dask_array,"(*args, **kwargs)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,permutations from itertools,import,,,,Import: permutations from itertools,scverse,scanpy,1.10.1,from itertools import permutations,itertools,permutations,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,asarray from anndata.tests.helpers,local_import,,,,Import: asarray from anndata.tests.helpers,scverse,scanpy,1.10.1,"from anndata.tests.helpers import asarray, assert_equal",anndata.tests.helpers,asarray,,,anndata.tests.helpers,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,assert_equal from anndata.tests.helpers,local_import,,,,Import: assert_equal from anndata.tests.helpers,scverse,scanpy,1.10.1,"from anndata.tests.helpers import asarray, assert_equal",anndata.tests.helpers,assert_equal,,,anndata.tests.helpers,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\testing\_helpers,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\testing\_helpers\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,marks.py,python,"needs._generate_next_value_ = (
        staticmethod(_next_val) if sys.version_info >= (3, 10) else _next_val
    )",class_field,,,,"Class field: needs._generate_next_value_ = (
        staticmethod(_next_val) if sys.version_info >= (3, 10) else _next_val
    )",scverse,scanpy,1.10.1,,,,,,,needs,,,"_generate_next_value_ = (
        staticmethod(_next_val) if sys.version_info >= (3, 10) else _next_val
    )",,,,,_generate_next_value_,,"(
        staticmethod(_next_val) if sys.version_info >= (3, 10) else _next_val
    )",
scverse_scanpy_1.10.1,marks.py,python,needs.dask = auto(),class_field,,,,Class field: needs.dask = auto(),scverse,scanpy,1.10.1,,,,,,,needs,,,dask = auto(),,,,,dask,,auto(),
scverse_scanpy_1.10.1,marks.py,python,needs.dask_ml = auto(),class_field,,,,Class field: needs.dask_ml = auto(),scverse,scanpy,1.10.1,,,,,,,needs,,,dask_ml = auto(),,,,,dask_ml,,auto(),
scverse_scanpy_1.10.1,marks.py,python,needs.fa2 = auto(),class_field,,,,Class field: needs.fa2 = auto(),scverse,scanpy,1.10.1,,,,,,,needs,,,fa2 = auto(),,,,,fa2,,auto(),
scverse_scanpy_1.10.1,marks.py,python,"needs.gprofiler = ""gprofiler-official""",class_field,,,,"Class field: needs.gprofiler = ""gprofiler-official""",scverse,scanpy,1.10.1,,,,,,,needs,,,"gprofiler = ""gprofiler-official""",,,,,gprofiler,,"""gprofiler-official""",
scverse_scanpy_1.10.1,marks.py,python,needs.leidenalg = auto(),class_field,,,,Class field: needs.leidenalg = auto(),scverse,scanpy,1.10.1,,,,,,,needs,,,leidenalg = auto(),,,,,leidenalg,,auto(),
scverse_scanpy_1.10.1,marks.py,python,needs.louvain = auto(),class_field,,,,Class field: needs.louvain = auto(),scverse,scanpy,1.10.1,,,,,,,needs,,,louvain = auto(),,,,,louvain,,auto(),
scverse_scanpy_1.10.1,marks.py,python,needs.igraph = auto(),class_field,,,,Class field: needs.igraph = auto(),scverse,scanpy,1.10.1,,,,,,,needs,,,igraph = auto(),,,,,igraph,,auto(),
scverse_scanpy_1.10.1,marks.py,python,needs.pybiomart = auto(),class_field,,,,Class field: needs.pybiomart = auto(),scverse,scanpy,1.10.1,,,,,,,needs,,,pybiomart = auto(),,,,,pybiomart,,auto(),
scverse_scanpy_1.10.1,marks.py,python,"needs.skimage = ""scikit-image""",class_field,,,,"Class field: needs.skimage = ""scikit-image""",scverse,scanpy,1.10.1,,,,,,,needs,,,"skimage = ""scikit-image""",,,,,skimage,,"""scikit-image""",
scverse_scanpy_1.10.1,marks.py,python,"needs.skmisc = ""scikit-misc""",class_field,,,,"Class field: needs.skmisc = ""scikit-misc""",scverse,scanpy,1.10.1,,,,,,,needs,,,"skmisc = ""scikit-misc""",,,,,skmisc,,"""scikit-misc""",
scverse_scanpy_1.10.1,marks.py,python,needs.zarr = auto(),class_field,,,,Class field: needs.zarr = auto(),scverse,scanpy,1.10.1,,,,,,,needs,,,zarr = auto(),,,,,zarr,,auto(),
scverse_scanpy_1.10.1,marks.py,python,needs.zappy = auto(),class_field,,,,Class field: needs.zappy = auto(),scverse,scanpy,1.10.1,,,,,,,needs,,,zappy = auto(),,,,,zappy,,auto(),
scverse_scanpy_1.10.1,marks.py,python,needs.bbknn = auto(),class_field,,,,Class field: needs.bbknn = auto(),scverse,scanpy,1.10.1,,,,,,,needs,,,bbknn = auto(),,,,,bbknn,,auto(),
scverse_scanpy_1.10.1,marks.py,python,"needs.harmony = ""harmonyTS""",class_field,,,,"Class field: needs.harmony = ""harmonyTS""",scverse,scanpy,1.10.1,,,,,,,needs,,,"harmony = ""harmonyTS""",,,,,harmony,,"""harmonyTS""",
scverse_scanpy_1.10.1,marks.py,python,needs.harmonypy = auto(),class_field,,,,Class field: needs.harmonypy = auto(),scverse,scanpy,1.10.1,,,,,,,needs,,,harmonypy = auto(),,,,,harmonypy,,auto(),
scverse_scanpy_1.10.1,marks.py,python,"needs.magic = ""magic-impute""",class_field,,,,"Class field: needs.magic = ""magic-impute""",scverse,scanpy,1.10.1,,,,,,,needs,,,"magic = ""magic-impute""",,,,,magic,,"""magic-impute""",
scverse_scanpy_1.10.1,marks.py,python,needs.palantir = auto(),class_field,,,,Class field: needs.palantir = auto(),scverse,scanpy,1.10.1,,,,,,,needs,,,palantir = auto(),,,,,palantir,,auto(),
scverse_scanpy_1.10.1,marks.py,python,needs.phate = auto(),class_field,,,,Class field: needs.phate = auto(),scverse,scanpy,1.10.1,,,,,,,needs,,,phate = auto(),,,,,phate,,auto(),
scverse_scanpy_1.10.1,marks.py,python,needs.phenograph = auto(),class_field,,,,Class field: needs.phenograph = auto(),scverse,scanpy,1.10.1,,,,,,,needs,,,phenograph = auto(),,,,,phenograph,,auto(),
scverse_scanpy_1.10.1,marks.py,python,needs.pypairs = auto(),class_field,,,,Class field: needs.pypairs = auto(),scverse,scanpy,1.10.1,,,,,,,needs,,,pypairs = auto(),,,,,pypairs,,auto(),
scverse_scanpy_1.10.1,marks.py,python,"needs.samalg = ""sam-algorithm""",class_field,,,,"Class field: needs.samalg = ""sam-algorithm""",scverse,scanpy,1.10.1,,,,,,,needs,,,"samalg = ""sam-algorithm""",,,,,samalg,,"""sam-algorithm""",
scverse_scanpy_1.10.1,marks.py,python,needs.scanorama = auto(),class_field,,,,Class field: needs.scanorama = auto(),scverse,scanpy,1.10.1,,,,,,,needs,,,scanorama = auto(),,,,,scanorama,,auto(),
scverse_scanpy_1.10.1,marks.py,python,needs.trimap = auto(),class_field,,,,Class field: needs.trimap = auto(),scverse,scanpy,1.10.1,,,,,,,needs,,,trimap = auto(),,,,,trimap,,auto(),
scverse_scanpy_1.10.1,marks.py,python,"needs.wishbone = ""wishbone-dev""",class_field,,,,"Class field: needs.wishbone = ""wishbone-dev""",scverse,scanpy,1.10.1,,,,,,,needs,,,"wishbone = ""wishbone-dev""",,,,,wishbone,,"""wishbone-dev""",
scverse_scanpy_1.10.1,marks.py,python,"needs.__init__(self, mod: str) -> None",class_method,,,,"Class method: needs.__init__(self, mod: str) -> None",scverse,scanpy,1.10.1,,,,,,,needs,__init__,"(self, mod: str)",,,,,,,,,
scverse_scanpy_1.10.1,marks.py,python,"needs(pytest.MarkDecorator, Enum)",class,,,,"Class: needs(pytest.MarkDecorator, Enum)",scverse,scanpy,1.10.1,,,,,,,needs,,,,,,,,,"(pytest.MarkDecorator, Enum)",,
scverse_scanpy_1.10.1,marks.py,python,"_next_val(name: str, start: int, count: int, last_values: list[str]) -> str",function,,,,"Function: _next_val(name: str, start: int, count: int, last_values: list[str]) -> str",scverse,scanpy,1.10.1,,,,_next_val,"(name: str, start: int, count: int, last_values: list[str])",,,,,,,,str,,,,,
scverse_scanpy_1.10.1,marks.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,,sys,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,marks.py,python,Enum from enum,import,,,,Import: Enum from enum,scverse,scanpy,1.10.1,"from enum import Enum, auto",enum,Enum,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,marks.py,python,auto from enum,import,,,,Import: auto from enum,scverse,scanpy,1.10.1,"from enum import Enum, auto",enum,auto,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,marks.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,marks.py,python,find_spec from importlib.util,local_import,,,,Import: find_spec from importlib.util,scverse,scanpy,1.10.1,from importlib.util import find_spec,importlib.util,find_spec,,,importlib.util,,,,,,,,,,,,
,marks.py,python,,,,,,File: scanpy\testing\_pytest,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,marks.py,python,,,,,,Directory: scanpy\testing\_pytest\marks.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,"param_with(
    at: ParameterSet,
    *,
    marks: Iterable[pytest.Mark | pytest.MarkDecorator] = (),
    id: str | None = None,
) -> ParameterSet",function,,,,"Function: param_with(
    at: ParameterSet,
    *,
    marks: Iterable[pytest.Mark | pytest.MarkDecorator] = (),
    id: str | None = None,
) -> ParameterSet",scverse,scanpy,1.10.1,,,,param_with,"(
    at: ParameterSet,
    *,
    marks: Iterable[pytest.Mark | pytest.MarkDecorator] = (),
    id: str | None = None,
)",,,,,,,,ParameterSet,,,,,
scverse_scanpy_1.10.1,params.py,python,"MAP_ARRAY_TYPES: dict[
    tuple[Literal[""mem"", ""dask""], Literal[""dense"", ""sparse""]],
    tuple[ParameterSet, ...],
] = {
    (""mem"", ""dense""): (pytest.param(asarray, id=""numpy_ndarray""),),
    (""mem"", ""sparse""): (
        pytest.param(sparse.csr_matrix, id=""scipy_csr""),
        pytest.param(sparse.csc_matrix, id=""scipy_csc""),
    ),
    (""dask"", ""dense""): (
        pytest.param(
            as_dense_dask_array,
            marks=[needs.dask, pytest.mark.anndata_dask_support],
            id=""dask_array_dense"",
        ),
    ),
    (""dask"", ""sparse""): (
        pytest.param(
            as_sparse_dask_array,
            marks=[needs.dask, pytest.mark.anndata_dask_support],
            id=""dask_array_sparse"",
        ),
        # probably not necessary to also do csc
    ),
}",constant,"MAP_ARRAY_TYPES: dict[
    tuple[Literal[""mem"", ""dask""], Literal[""dense"", ""sparse""]],
    tuple[ParameterSet, ...],
] = {
    (""mem"", ""dense""): (pytest.param(asarray, id=""numpy_ndarray""),),
    (""mem"", ""sparse""): (
        pytest.param(sparse.csr_matrix, id=""scipy_csr""),
        pytest.param(sparse.csc_matrix, id=""scipy_csc""),
    ),
    (""dask"", ""dense""): (
        pytest.param(
            as_dense_dask_array,
            marks=[needs.dask, pytest.mark.anndata_dask_support],
            id=""dask_array_dense"",
        ),
    ),
    (""dask"", ""sparse""): (
        pytest.param(
            as_sparse_dask_array,
            marks=[needs.dask, pytest.mark.anndata_dask_support],
            id=""dask_array_sparse"",
        ),
        # probably not necessary to also do csc
    ),
}",MAP_ARRAY_TYPES,"{
    (""mem"", ""dense""): (pytest.param(asarray, id=""numpy_ndarray""),),
    (""mem"", ""sparse""): (
        pytest.param(sparse.csr_matrix, id=""scipy_csr""),
        pytest.param(sparse.csc_matrix, id=""scipy_csc""),
    ),
    (""dask"", ""dense""): (
        pytest.param(
            as_dense_dask_array,
            marks=[needs.dask, pytest.mark.anndata_dask_support],
            id=""dask_array_dense"",
        ),
    ),
    (""dask"", ""sparse""): (
        pytest.param(
            as_sparse_dask_array,
            marks=[needs.dask, pytest.mark.anndata_dask_support],
            id=""dask_array_sparse"",
        ),
        # probably not necessary to also do csc
    ),
}","Constant: MAP_ARRAY_TYPES: dict[
    tuple[Literal[""mem"", ""dask""], Literal[""dense"", ""sparse""]],
    tuple[ParameterSet, ...],
] = {
    (""mem"", ""dense""): (pytest.param(asarray, id=""numpy_ndarray""),),
    (""mem"", ""sparse""): (
        pytest.param(sparse.csr_matrix, id=""scipy_csr""),
        pytest.param(sparse.csc_matrix, id=""scipy_csc""),
    ),
    (""dask"", ""dense""): (
        pytest.param(
            as_dense_dask_array,
            marks=[needs.dask, pytest.mark.anndata_dask_support],
            id=""dask_array_dense"",
        ),
    ),
    (""dask"", ""sparse""): (
        pytest.param(
            as_sparse_dask_array,
            marks=[needs.dask, pytest.mark.anndata_dask_support],
            id=""dask_array_sparse"",
        ),
        # probably not necessary to also do csc
    ),
}",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,"ARRAY_TYPES_MEM = tuple(
    at for (strg, _), ats in MAP_ARRAY_TYPES.items() if strg == ""mem"" for at in ats
)",constant,"ARRAY_TYPES_MEM = tuple(
    at for (strg, _), ats in MAP_ARRAY_TYPES.items() if strg == ""mem"" for at in ats
)",ARRAY_TYPES_MEM,"tuple(
    at for (strg, _), ats in MAP_ARRAY_TYPES.items() if strg == ""mem"" for at in ats
)","Constant: ARRAY_TYPES_MEM = tuple(
    at for (strg, _), ats in MAP_ARRAY_TYPES.items() if strg == ""mem"" for at in ats
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,"ARRAY_TYPES_DASK = tuple(
    at for (strg, _), ats in MAP_ARRAY_TYPES.items() if strg == ""dask"" for at in ats
)",constant,"ARRAY_TYPES_DASK = tuple(
    at for (strg, _), ats in MAP_ARRAY_TYPES.items() if strg == ""dask"" for at in ats
)",ARRAY_TYPES_DASK,"tuple(
    at for (strg, _), ats in MAP_ARRAY_TYPES.items() if strg == ""dask"" for at in ats
)","Constant: ARRAY_TYPES_DASK = tuple(
    at for (strg, _), ats in MAP_ARRAY_TYPES.items() if strg == ""dask"" for at in ats
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,"ARRAY_TYPES_DENSE = tuple(
    at for (_, spsty), ats in MAP_ARRAY_TYPES.items() if spsty == ""dense"" for at in ats
)",constant,"ARRAY_TYPES_DENSE = tuple(
    at for (_, spsty), ats in MAP_ARRAY_TYPES.items() if spsty == ""dense"" for at in ats
)",ARRAY_TYPES_DENSE,"tuple(
    at for (_, spsty), ats in MAP_ARRAY_TYPES.items() if spsty == ""dense"" for at in ats
)","Constant: ARRAY_TYPES_DENSE = tuple(
    at for (_, spsty), ats in MAP_ARRAY_TYPES.items() if spsty == ""dense"" for at in ats
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,"ARRAY_TYPES_SPARSE = tuple(
    at for (_, spsty), ats in MAP_ARRAY_TYPES.items() if ""sparse"" in spsty for at in ats
)",constant,"ARRAY_TYPES_SPARSE = tuple(
    at for (_, spsty), ats in MAP_ARRAY_TYPES.items() if ""sparse"" in spsty for at in ats
)",ARRAY_TYPES_SPARSE,"tuple(
    at for (_, spsty), ats in MAP_ARRAY_TYPES.items() if ""sparse"" in spsty for at in ats
)","Constant: ARRAY_TYPES_SPARSE = tuple(
    at for (_, spsty), ats in MAP_ARRAY_TYPES.items() if ""sparse"" in spsty for at in ats
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,"ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED = tuple(
    (
        param_with(at, marks=[pytest.mark.xfail(reason=""sparse-in-dask not supported"")])
        if attrs[0] == ""dask"" and ""sparse"" in attrs[1]
        else at
    )
    for attrs, ats in MAP_ARRAY_TYPES.items()
    for at in ats
)",constant,"ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED = tuple(
    (
        param_with(at, marks=[pytest.mark.xfail(reason=""sparse-in-dask not supported"")])
        if attrs[0] == ""dask"" and ""sparse"" in attrs[1]
        else at
    )
    for attrs, ats in MAP_ARRAY_TYPES.items()
    for at in ats
)",ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED,"tuple(
    (
        param_with(at, marks=[pytest.mark.xfail(reason=""sparse-in-dask not supported"")])
        if attrs[0] == ""dask"" and ""sparse"" in attrs[1]
        else at
    )
    for attrs, ats in MAP_ARRAY_TYPES.items()
    for at in ats
)","Constant: ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED = tuple(
    (
        param_with(at, marks=[pytest.mark.xfail(reason=""sparse-in-dask not supported"")])
        if attrs[0] == ""dask"" and ""sparse"" in attrs[1]
        else at
    )
    for attrs, ats in MAP_ARRAY_TYPES.items()
    for at in ats
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,ARRAY_TYPES = tuple(at for ats in MAP_ARRAY_TYPES.values() for at in ats),constant,ARRAY_TYPES = tuple(at for ats in MAP_ARRAY_TYPES.values() for at in ats),ARRAY_TYPES,tuple(at for ats in MAP_ARRAY_TYPES.values() for at in ats),Constant: ARRAY_TYPES = tuple(at for ats in MAP_ARRAY_TYPES.values() for at in ats),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,params.py,python,asarray from anndata.tests.helpers,local_import,,,,Import: asarray from anndata.tests.helpers,scverse,scanpy,1.10.1,from anndata.tests.helpers import asarray,anndata.tests.helpers,asarray,,,anndata.tests.helpers,,,,,,,,,,,,
,params.py,python,,,,,,File: scanpy\testing\_pytest,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,params.py,python,,,,,,Directory: scanpy\testing\_pytest\params.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,pytest_addoption(parser: pytest.Parser) -> None,function,,,,Function: pytest_addoption(parser: pytest.Parser) -> None,scverse,scanpy,1.10.1,,,,pytest_addoption,(parser: pytest.Parser),,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"pytest_collection_modifyitems(
    config: pytest.Config, items: Iterable[pytest.Item]
) -> None",function,,,,"Function: pytest_collection_modifyitems(
    config: pytest.Config, items: Iterable[pytest.Item]
) -> None",scverse,scanpy,1.10.1,,,,pytest_collection_modifyitems,"(
    config: pytest.Config, items: Iterable[pytest.Item]
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,_modify_doctests(request: pytest.FixtureRequest) -> None,function,,,,Function: _modify_doctests(request: pytest.FixtureRequest) -> None,scverse,scanpy,1.10.1,,,,_modify_doctests,(request: pytest.FixtureRequest),,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,pytest_itemcollected(item: pytest.Item) -> None,function,,,,Function: pytest_itemcollected(item: pytest.Item) -> None,scverse,scanpy,1.10.1,,,,pytest_itemcollected,(item: pytest.Item),,,,,,,,,"# Dask AnnData tests require anndata > 0.10",,,,
scverse_scanpy_1.10.1,__init__.py,python,os,import,,,,Import: os,scverse,scanpy,1.10.1,import os,,os,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,,sys,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\testing\_pytest,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\testing\_pytest\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,"_prepare_pbmc_testdata(
    adata: AnnData,
    sparsity_func: Callable[
        [np.ndarray | sparse.spmatrix], np.ndarray | sparse.spmatrix
    ],
    dtype: str | np.dtype,
    *,
    small: bool,
) -> AnnData",function,,,,"Function: _prepare_pbmc_testdata(
    adata: AnnData,
    sparsity_func: Callable[
        [np.ndarray | sparse.spmatrix], np.ndarray | sparse.spmatrix
    ],
    dtype: str | np.dtype,
    *,
    small: bool,
) -> AnnData",scverse,scanpy,1.10.1,,,,_prepare_pbmc_testdata,"(
    adata: AnnData,
    sparsity_func: Callable[
        [np.ndarray | sparse.spmatrix], np.ndarray | sparse.spmatrix
    ],
    dtype: str | np.dtype,
    *,
    small: bool,
)",,,,,,,,AnnData,,,,,
scverse_scanpy_1.10.1,data.py,python,product from itertools,import,,,,Import: product from itertools,scverse,scanpy,1.10.1,from itertools import product,itertools,product,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,data.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
,data.py,python,,,,,,File: scanpy\testing\_pytest\fixtures,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,data.py,python,,,,,,Directory: scanpy\testing\_pytest\fixtures\data.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""float_dtype"",
    ""_doctest_env"",
    ""_pbmc3ks_parametrized_session"",
    ""pbmc3k_parametrized"",
    ""pbmc3k_parametrized_small"",
]",constant,"__all__ = [
    ""float_dtype"",
    ""_doctest_env"",
    ""_pbmc3ks_parametrized_session"",
    ""pbmc3k_parametrized"",
    ""pbmc3k_parametrized_small"",
]",__all__,"[
    ""float_dtype"",
    ""_doctest_env"",
    ""_pbmc3ks_parametrized_session"",
    ""pbmc3k_parametrized"",
    ""pbmc3k_parametrized_small"",
]","Constant: __all__ = [
    ""float_dtype"",
    ""_doctest_env"",
    ""_pbmc3ks_parametrized_session"",
    ""pbmc3k_parametrized"",
    ""pbmc3k_parametrized_small"",
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\testing\_pytest\fixtures,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\testing\_pytest\fixtures\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,CompareResult.rms: float,class_field,,,,Class field: CompareResult.rms: float,scverse,scanpy,1.10.1,,,,,,,CompareResult,,,rms: float,,,,,rms,,,
scverse_scanpy_1.10.1,conftest.py,python,CompareResult.expected: str,class_field,,,,Class field: CompareResult.expected: str,scverse,scanpy,1.10.1,,,,,,,CompareResult,,,expected: str,,,,,expected,,,
scverse_scanpy_1.10.1,conftest.py,python,CompareResult.actual: str,class_field,,,,Class field: CompareResult.actual: str,scverse,scanpy,1.10.1,,,,,,,CompareResult,,,actual: str,,,,,actual,,,
scverse_scanpy_1.10.1,conftest.py,python,CompareResult.diff: str,class_field,,,,Class field: CompareResult.diff: str,scverse,scanpy,1.10.1,,,,,,,CompareResult,,,diff: str,,,,,diff,,,
scverse_scanpy_1.10.1,conftest.py,python,CompareResult.tol: int,class_field,,,,Class field: CompareResult.tol: int,scverse,scanpy,1.10.1,,,,,,,CompareResult,,,tol: int,,,,,tol,,,
scverse_scanpy_1.10.1,conftest.py,python,CompareResult(TypedDict),class,,,,Class: CompareResult(TypedDict),scverse,scanpy,1.10.1,,,,,,,CompareResult,,,,,,,,,(TypedDict),,
scverse_scanpy_1.10.1,conftest.py,python,"pytest_plugins = [""scanpy.testing._pytest""]",constant,"pytest_plugins = [""scanpy.testing._pytest""]",pytest_plugins,"[""scanpy.testing._pytest""]","Constant: pytest_plugins = [""scanpy.testing._pytest""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,IMPORTED = frozenset(sys.modules.keys()),constant,IMPORTED = frozenset(sys.modules.keys()),IMPORTED,frozenset(sys.modules.keys()),Constant: IMPORTED = frozenset(sys.modules.keys()),scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,,sys,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,dedent from textwrap,import,,,,Import: dedent from textwrap,scverse,scanpy,1.10.1,from textwrap import dedent,textwrap,dedent,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, TypedDict, Union, cast",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,TypedDict from typing,import,,,,Import: TypedDict from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, TypedDict, Union, cast",typing,TypedDict,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,Union from typing,import,,,,Import: Union from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, TypedDict, Union, cast",typing,Union,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,cast from typing,import,,,,Import: cast from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, TypedDict, Union, cast",typing,cast,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,conftest.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as _sc,,scanpy,,,,,,,,,,,,,,,
,conftest.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,conftest.py,python,,,,,,Directory: scanpy\tests\conftest.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,"gen_adata(data_key, dim, df_base, df_groupby, X)",function,,,,"Function: gen_adata(data_key, dim, df_base, df_groupby, X)",scverse,scanpy,1.10.1,,,,gen_adata,"(data_key, dim, df_base, df_groupby, X)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,test_aggregate_entry(),function,,,,Function: test_aggregate_entry(),scverse,scanpy,1.10.1,,,,test_aggregate_entry,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,test_aggregate_incorrect_dim(),function,,,,Function: test_aggregate_incorrect_dim(),scverse,scanpy,1.10.1,,,,test_aggregate_incorrect_dim,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,test_aggregate_obsm_varm(),function,,,,Function: test_aggregate_obsm_varm(),scverse,scanpy,1.10.1,,,,test_aggregate_obsm_varm,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,test_aggregate_obsm_labels(),function,,,,Function: test_aggregate_obsm_labels(),scverse,scanpy,1.10.1,,,,test_aggregate_obsm_labels,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,test_dispatch_not_implemented(),function,,,,Function: test_dispatch_not_implemented(),scverse,scanpy,1.10.1,,,,test_dispatch_not_implemented,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,test_factors(),function,,,,Function: test_factors(),scverse,scanpy,1.10.1,,,,test_factors,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,anndata,import,,,,Import: anndata,scverse,scanpy,1.10.1,import anndata as ad,,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,Version from packaging.version,local_import,,,,Import: Version from packaging.version,scverse,scanpy,1.10.1,from packaging.version import Version,packaging.version,Version,,,packaging.version,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,_resolve_axis from scanpy._utils,local_import,,,,Import: _resolve_axis from scanpy._utils,scverse,scanpy,1.10.1,from scanpy._utils import _resolve_axis,scanpy._utils,_resolve_axis,,,scanpy._utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,assert_equal from scanpy.testing._helpers,local_import,,,,Import: assert_equal from scanpy.testing._helpers,scverse,scanpy,1.10.1,from scanpy.testing._helpers import assert_equal,scanpy.testing._helpers,assert_equal,,,scanpy.testing._helpers,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,pbmc3k_processed from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k_processed from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc3k_processed,scanpy.testing._helpers.data,pbmc3k_processed,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_aggregated.py,python,ARRAY_TYPES_MEM from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES_MEM from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,from scanpy.testing._pytest.params import ARRAY_TYPES_MEM,scanpy.testing._pytest.params,ARRAY_TYPES_MEM,,,scanpy.testing._pytest.params,,,,,,,,,,,,
,test_aggregated.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_aggregated.py,python,,,,,,Directory: scanpy\tests\test_aggregated.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,test_builtin_settings(capsys: CaptureFixture),function,,,,Function: test_builtin_settings(capsys: CaptureFixture),scverse,scanpy,1.10.1,,,,test_builtin_settings,(capsys: CaptureFixture),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,"test_help_output(set_path: None, capsys: CaptureFixture)",function,,,,"Function: test_help_output(set_path: None, capsys: CaptureFixture)",scverse,scanpy,1.10.1,,,,test_help_output,"(set_path: None, capsys: CaptureFixture)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,test_external(set_path: None),function,,,,Function: test_external(set_path: None),scverse,scanpy,1.10.1,,,,test_external,(set_path: None),,,,,,,,,"# We need to capture the output manually, since subprocesses don’t write to sys.stderr",,,,
scverse_scanpy_1.10.1,test_binary.py,python,test_error_wrong_command(capsys: CaptureFixture),function,,,,Function: test_error_wrong_command(capsys: CaptureFixture),scverse,scanpy,1.10.1,,,,test_error_wrong_command,(capsys: CaptureFixture),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,HERE = Path(__file__).parent,constant,HERE = Path(__file__).parent,HERE,Path(__file__).parent,Constant: HERE = Path(__file__).parent,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,os,import,,,,Import: os,scverse,scanpy,1.10.1,import os,,os,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,re,import,,,,Import: re,scverse,scanpy,1.10.1,import re,,re,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,PIPE from subprocess,import,,,,Import: PIPE from subprocess,scverse,scanpy,1.10.1,from subprocess import PIPE,subprocess,PIPE,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_binary.py,python,main from scanpy.cli,local_import,,,,Import: main from scanpy.cli,scverse,scanpy,1.10.1,from scanpy.cli import main,scanpy.cli,main,,,scanpy.cli,,,,,,,,,,,,
,test_binary.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_binary.py,python,,,,,,Directory: scanpy\tests\test_binary.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_clustering.py,python,"FLAVORS = [
    pytest.param(""igraph"", marks=needs.igraph),
    pytest.param(""leidenalg"", marks=needs.leidenalg),
]",constant,"FLAVORS = [
    pytest.param(""igraph"", marks=needs.igraph),
    pytest.param(""leidenalg"", marks=needs.leidenalg),
]",FLAVORS,"[
    pytest.param(""igraph"", marks=needs.igraph),
    pytest.param(""leidenalg"", marks=needs.leidenalg),
]","Constant: FLAVORS = [
    pytest.param(""igraph"", marks=needs.igraph),
    pytest.param(""leidenalg"", marks=needs.leidenalg),
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_clustering.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_clustering.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_clustering.py,python,normalized_mutual_info_score from sklearn.metrics.cluster,local_import,,,,Import: normalized_mutual_info_score from sklearn.metrics.cluster,scverse,scanpy,1.10.1,from sklearn.metrics.cluster import normalized_mutual_info_score,sklearn.metrics.cluster,normalized_mutual_info_score,,,sklearn.metrics.cluster,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_clustering.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,scanpy.testing._helpers.data,pbmc68k_reduced,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_clustering.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,scanpy.testing._pytest.marks,needs,,,scanpy.testing._pytest.marks,,,,,,,,,,,,
,test_clustering.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_clustering.py,python,,,,,,Directory: scanpy\tests\test_clustering.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,test_norm(),function,,,,Function: test_norm(),scverse,scanpy,1.10.1,,,,test_norm,(),,,,,,,,,"# this test trivially checks whether mean normalisation worked",,,,
scverse_scanpy_1.10.1,test_combat.py,python,test_norm(),function,,,,Function: test_norm(),scverse,scanpy,1.10.1,,,,test_norm,(),,,,,,,,,"# load in data",,,,
scverse_scanpy_1.10.1,test_combat.py,python,test_covariates(),function,,,,Function: test_covariates(),scverse,scanpy,1.10.1,,,,test_covariates,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,test_combat_obs_names(),function,,,,Function: test_combat_obs_names(),scverse,scanpy,1.10.1,,,,test_combat_obs_names,(),,,,,,,,,"# Test for fix to #1170",,,,
scverse_scanpy_1.10.1,test_combat.py,python,test_silhouette(),function,,,,Function: test_silhouette(),scverse,scanpy,1.10.1,,,,test_silhouette,(),,,,,,,,,"# this test checks wether combat can align data from several gaussians",,,,
scverse_scanpy_1.10.1,test_combat.py,python,test_silhouette(),function,,,,Function: test_silhouette(),scverse,scanpy,1.10.1,,,,test_silhouette,(),,,,,,,,,"# it checks this by computing the silhouette coefficient in a pca embedding",,,,
scverse_scanpy_1.10.1,test_combat.py,python,test_silhouette(),function,,,,Function: test_silhouette(),scverse,scanpy,1.10.1,,,,test_silhouette,(),,,,,,,,,"# load in data",,,,
scverse_scanpy_1.10.1,test_combat.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,assert_equal from anndata.tests.helpers,local_import,,,,Import: assert_equal from anndata.tests.helpers,scverse,scanpy,1.10.1,from anndata.tests.helpers import assert_equal,anndata.tests.helpers,assert_equal,,,anndata.tests.helpers,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,silhouette_score from sklearn.metrics,local_import,,,,Import: silhouette_score from sklearn.metrics,scverse,scanpy,1.10.1,from sklearn.metrics import silhouette_score,sklearn.metrics,silhouette_score,,,sklearn.metrics,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,_design_matrix from scanpy.preprocessing._combat,local_import,,,,Import: _design_matrix from scanpy.preprocessing._combat,scverse,scanpy,1.10.1,"from scanpy.preprocessing._combat import _design_matrix, _standardize_data",scanpy.preprocessing._combat,_design_matrix,,,scanpy.preprocessing._combat,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_combat.py,python,_standardize_data from scanpy.preprocessing._combat,local_import,,,,Import: _standardize_data from scanpy.preprocessing._combat,scverse,scanpy,1.10.1,"from scanpy.preprocessing._combat import _design_matrix, _standardize_data",scanpy.preprocessing._combat,_standardize_data,,,scanpy.preprocessing._combat,,,,,,,,,,,,
,test_combat.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_combat.py,python,,,,,,Directory: scanpy\tests\test_combat.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,test_krumsiek11(tmp_dataset_dir),function,,,,Function: test_krumsiek11(tmp_dataset_dir),scverse,scanpy,1.10.1,,,,test_krumsiek11,(tmp_dataset_dir),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,test_blobs(),function,,,,Function: test_blobs(),scverse,scanpy,1.10.1,,,,test_blobs,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,test_toggleswitch(),function,,,,Function: test_toggleswitch(),scverse,scanpy,1.10.1,,,,test_toggleswitch,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,test_pbmc68k_reduced(),function,,,,Function: test_pbmc68k_reduced(),scverse,scanpy,1.10.1,,,,test_pbmc68k_reduced,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,test_download_failure(),function,,,,Function: test_download_failure(),scverse,scanpy,1.10.1,,,,test_download_failure,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,subprocess,import,,,,Import: subprocess,scverse,scanpy,1.10.1,import subprocess,,subprocess,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_datasets.py,python,assert_adata_equal from anndata.tests.helpers,local_import,,,,Import: assert_adata_equal from anndata.tests.helpers,scverse,scanpy,1.10.1,from anndata.tests.helpers import assert_adata_equal,anndata.tests.helpers,assert_adata_equal,,,anndata.tests.helpers,,,,,,,,,,,,
,test_datasets.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_datasets.py,python,,,,,,Directory: scanpy\tests\test_datasets.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,test_dendrogram_cor(),function,,,,Function: test_dendrogram_cor(),scverse,scanpy,1.10.1,,,,test_dendrogram_cor,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,n_neighbors = 5,constant,n_neighbors = 5,n_neighbors,5,Constant: n_neighbors = 5,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,"key = ""test""",constant,"key = ""test""",key,"""test""","Constant: key = ""test""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,"REP_PCA_0 = [
    *(1.50808525e00, -1.67258829e-01, -7.12063432e-01, -2.07935140e-01),
    *(-3.55730444e-01, -2.24421427e-01, -1.46907698e-02, -7.01090470e-02),
    *(-1.31467551e-01, -3.75757217e-02, -1.07698059e-02, -4.37555499e-02),
    *(1.06897885e-02, 1.10454357e-03, -5.37674241e-02, -4.94170748e-03),
    *(1.11988001e-02, -4.48330259e-03, -2.56892946e-02, -3.50749046e-02),
    *(-3.15931924e-02, 2.84416862e-02, -3.70664597e-02, -2.38820408e-02),
    *(-4.57040370e-02, 2.99325008e-02, 9.56365839e-03, -4.28026691e-02),
    *(5.36734704e-03, -3.08445804e-02, -1.16719725e-02, -2.35078149e-02),
    *(2.87542702e-04, -1.70532353e-02, -1.79676879e-02, -3.09410989e-02),
    *(-1.09178647e-02, -1.60753895e-02, -1.04769412e-02, -1.36501975e-02),
    *(-6.83976896e-03, -1.17562497e-02, -4.65345643e-02, 1.91588048e-02),
    *(-1.38043752e-02, 4.75460896e-03, -1.41307563e-02, -1.03387292e-02),
    *(-1.68043356e-02, 1.33516011e-03),
]",constant,"REP_PCA_0 = [
    *(1.50808525e00, -1.67258829e-01, -7.12063432e-01, -2.07935140e-01),
    *(-3.55730444e-01, -2.24421427e-01, -1.46907698e-02, -7.01090470e-02),
    *(-1.31467551e-01, -3.75757217e-02, -1.07698059e-02, -4.37555499e-02),
    *(1.06897885e-02, 1.10454357e-03, -5.37674241e-02, -4.94170748e-03),
    *(1.11988001e-02, -4.48330259e-03, -2.56892946e-02, -3.50749046e-02),
    *(-3.15931924e-02, 2.84416862e-02, -3.70664597e-02, -2.38820408e-02),
    *(-4.57040370e-02, 2.99325008e-02, 9.56365839e-03, -4.28026691e-02),
    *(5.36734704e-03, -3.08445804e-02, -1.16719725e-02, -2.35078149e-02),
    *(2.87542702e-04, -1.70532353e-02, -1.79676879e-02, -3.09410989e-02),
    *(-1.09178647e-02, -1.60753895e-02, -1.04769412e-02, -1.36501975e-02),
    *(-6.83976896e-03, -1.17562497e-02, -4.65345643e-02, 1.91588048e-02),
    *(-1.38043752e-02, 4.75460896e-03, -1.41307563e-02, -1.03387292e-02),
    *(-1.68043356e-02, 1.33516011e-03),
]",REP_PCA_0,"[
    *(1.50808525e00, -1.67258829e-01, -7.12063432e-01, -2.07935140e-01),
    *(-3.55730444e-01, -2.24421427e-01, -1.46907698e-02, -7.01090470e-02),
    *(-1.31467551e-01, -3.75757217e-02, -1.07698059e-02, -4.37555499e-02),
    *(1.06897885e-02, 1.10454357e-03, -5.37674241e-02, -4.94170748e-03),
    *(1.11988001e-02, -4.48330259e-03, -2.56892946e-02, -3.50749046e-02),
    *(-3.15931924e-02, 2.84416862e-02, -3.70664597e-02, -2.38820408e-02),
    *(-4.57040370e-02, 2.99325008e-02, 9.56365839e-03, -4.28026691e-02),
    *(5.36734704e-03, -3.08445804e-02, -1.16719725e-02, -2.35078149e-02),
    *(2.87542702e-04, -1.70532353e-02, -1.79676879e-02, -3.09410989e-02),
    *(-1.09178647e-02, -1.60753895e-02, -1.04769412e-02, -1.36501975e-02),
    *(-6.83976896e-03, -1.17562497e-02, -4.65345643e-02, 1.91588048e-02),
    *(-1.38043752e-02, 4.75460896e-03, -1.41307563e-02, -1.03387292e-02),
    *(-1.68043356e-02, 1.33516011e-03),
]","Constant: REP_PCA_0 = [
    *(1.50808525e00, -1.67258829e-01, -7.12063432e-01, -2.07935140e-01),
    *(-3.55730444e-01, -2.24421427e-01, -1.46907698e-02, -7.01090470e-02),
    *(-1.31467551e-01, -3.75757217e-02, -1.07698059e-02, -4.37555499e-02),
    *(1.06897885e-02, 1.10454357e-03, -5.37674241e-02, -4.94170748e-03),
    *(1.11988001e-02, -4.48330259e-03, -2.56892946e-02, -3.50749046e-02),
    *(-3.15931924e-02, 2.84416862e-02, -3.70664597e-02, -2.38820408e-02),
    *(-4.57040370e-02, 2.99325008e-02, 9.56365839e-03, -4.28026691e-02),
    *(5.36734704e-03, -3.08445804e-02, -1.16719725e-02, -2.35078149e-02),
    *(2.87542702e-04, -1.70532353e-02, -1.79676879e-02, -3.09410989e-02),
    *(-1.09178647e-02, -1.60753895e-02, -1.04769412e-02, -1.36501975e-02),
    *(-6.83976896e-03, -1.17562497e-02, -4.65345643e-02, 1.91588048e-02),
    *(-1.38043752e-02, 4.75460896e-03, -1.41307563e-02, -1.03387292e-02),
    *(-1.68043356e-02, 1.33516011e-03),
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,"REP_PCA_1_6 = [
    *(-2.70745814e-01, -3.45929652e-01, 6.27844110e-02, -8.34012777e-02),
    *(-1.08290315e-01, -1.38125733e-01, -2.57148240e-02, -2.73127705e-02),
    *(-1.45030200e-01, -6.88858554e-02, -4.28490154e-02, -1.88931823e-02),
    *(-2.56232135e-02, -7.66322482e-03, -5.49384989e-02, -1.43514248e-02),
    *(2.42769364e-02, -3.01547404e-02, -3.37253511e-02, -3.81337740e-02),
    *(-3.42049589e-03, -4.34436463e-03, -4.15385924e-02, -2.66448390e-02),
    *(-2.74285320e-02, 1.47806173e-02, 1.19129466e-02, -6.70884028e-02),
    *(2.58150720e-03, -1.64280720e-02, -1.07431635e-02, -3.04328315e-02),
    *(-3.82748269e-03, -2.95090005e-02, -3.10521629e-02, -3.43420058e-02),
    *(-4.49432433e-03, -2.15906072e-02, -1.23507539e-02, -2.88041346e-02),
    *(-7.31994957e-03, -7.28111062e-03, -7.61008039e-02, 2.40524579e-02),
    *(-1.20806806e-02, 5.05997473e-03, -2.53410172e-02, -1.83318909e-02),
    *(-1.81263424e-02, -3.35110351e-03),
]",constant,"REP_PCA_1_6 = [
    *(-2.70745814e-01, -3.45929652e-01, 6.27844110e-02, -8.34012777e-02),
    *(-1.08290315e-01, -1.38125733e-01, -2.57148240e-02, -2.73127705e-02),
    *(-1.45030200e-01, -6.88858554e-02, -4.28490154e-02, -1.88931823e-02),
    *(-2.56232135e-02, -7.66322482e-03, -5.49384989e-02, -1.43514248e-02),
    *(2.42769364e-02, -3.01547404e-02, -3.37253511e-02, -3.81337740e-02),
    *(-3.42049589e-03, -4.34436463e-03, -4.15385924e-02, -2.66448390e-02),
    *(-2.74285320e-02, 1.47806173e-02, 1.19129466e-02, -6.70884028e-02),
    *(2.58150720e-03, -1.64280720e-02, -1.07431635e-02, -3.04328315e-02),
    *(-3.82748269e-03, -2.95090005e-02, -3.10521629e-02, -3.43420058e-02),
    *(-4.49432433e-03, -2.15906072e-02, -1.23507539e-02, -2.88041346e-02),
    *(-7.31994957e-03, -7.28111062e-03, -7.61008039e-02, 2.40524579e-02),
    *(-1.20806806e-02, 5.05997473e-03, -2.53410172e-02, -1.83318909e-02),
    *(-1.81263424e-02, -3.35110351e-03),
]",REP_PCA_1_6,"[
    *(-2.70745814e-01, -3.45929652e-01, 6.27844110e-02, -8.34012777e-02),
    *(-1.08290315e-01, -1.38125733e-01, -2.57148240e-02, -2.73127705e-02),
    *(-1.45030200e-01, -6.88858554e-02, -4.28490154e-02, -1.88931823e-02),
    *(-2.56232135e-02, -7.66322482e-03, -5.49384989e-02, -1.43514248e-02),
    *(2.42769364e-02, -3.01547404e-02, -3.37253511e-02, -3.81337740e-02),
    *(-3.42049589e-03, -4.34436463e-03, -4.15385924e-02, -2.66448390e-02),
    *(-2.74285320e-02, 1.47806173e-02, 1.19129466e-02, -6.70884028e-02),
    *(2.58150720e-03, -1.64280720e-02, -1.07431635e-02, -3.04328315e-02),
    *(-3.82748269e-03, -2.95090005e-02, -3.10521629e-02, -3.43420058e-02),
    *(-4.49432433e-03, -2.15906072e-02, -1.23507539e-02, -2.88041346e-02),
    *(-7.31994957e-03, -7.28111062e-03, -7.61008039e-02, 2.40524579e-02),
    *(-1.20806806e-02, 5.05997473e-03, -2.53410172e-02, -1.83318909e-02),
    *(-1.81263424e-02, -3.35110351e-03),
]","Constant: REP_PCA_1_6 = [
    *(-2.70745814e-01, -3.45929652e-01, 6.27844110e-02, -8.34012777e-02),
    *(-1.08290315e-01, -1.38125733e-01, -2.57148240e-02, -2.73127705e-02),
    *(-1.45030200e-01, -6.88858554e-02, -4.28490154e-02, -1.88931823e-02),
    *(-2.56232135e-02, -7.66322482e-03, -5.49384989e-02, -1.43514248e-02),
    *(2.42769364e-02, -3.01547404e-02, -3.37253511e-02, -3.81337740e-02),
    *(-3.42049589e-03, -4.34436463e-03, -4.15385924e-02, -2.66448390e-02),
    *(-2.74285320e-02, 1.47806173e-02, 1.19129466e-02, -6.70884028e-02),
    *(2.58150720e-03, -1.64280720e-02, -1.07431635e-02, -3.04328315e-02),
    *(-3.82748269e-03, -2.95090005e-02, -3.10521629e-02, -3.43420058e-02),
    *(-4.49432433e-03, -2.15906072e-02, -1.23507539e-02, -2.88041346e-02),
    *(-7.31994957e-03, -7.28111062e-03, -7.61008039e-02, 2.40524579e-02),
    *(-1.20806806e-02, 5.05997473e-03, -2.53410172e-02, -1.83318909e-02),
    *(-1.81263424e-02, -3.35110351e-03),
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,"REP_PCA = np.array([REP_PCA_0, *([REP_PCA_1_6] * 6)], dtype=np.float32)",constant,"REP_PCA = np.array([REP_PCA_0, *([REP_PCA_1_6] * 6)], dtype=np.float32)",REP_PCA,"np.array([REP_PCA_0, *([REP_PCA_1_6] * 6)], dtype=np.float32)","Constant: REP_PCA = np.array([REP_PCA_0, *([REP_PCA_1_6] * 6)], dtype=np.float32)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,scipy.sparse,import,,,,Import: scipy.sparse,scverse,scanpy,1.10.1,import scipy.sparse as sp,,scipy.sparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_dendrogram.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,scanpy.testing._helpers.data,pbmc68k_reduced,,,scanpy.testing._helpers.data,,,,,,,,,,,,
,test_dendrogram.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_dendrogram.py,python,,,,,,Directory: scanpy\tests\test_dendrogram.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_deprecations.py,python,test_deprecate_multicore_tsne(),function,,,,Function: test_deprecate_multicore_tsne(),scverse,scanpy,1.10.1,,,,test_deprecate_multicore_tsne,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_deprecations.py,python,test_deprecate_use_highly_variable_genes(),function,,,,Function: test_deprecate_use_highly_variable_genes(),scverse,scanpy,1.10.1,,,,test_deprecate_use_highly_variable_genes,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_deprecations.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_deprecations.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_deprecations.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,scanpy.testing._helpers.data,pbmc68k_reduced,,,scanpy.testing._helpers.data,,,,,,,,,,,,
,test_deprecations.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_deprecations.py,python,,,,,,Directory: scanpy\tests\test_deprecations.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,test_tsne(),function,,,,Function: test_tsne(),scverse,scanpy,1.10.1,,,,test_tsne,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,test_umap_init_dtype(),function,,,,Function: test_umap_init_dtype(),scverse,scanpy,1.10.1,,,,test_umap_init_dtype,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,test_diffmap(),function,,,,Function: test_diffmap(),scverse,scanpy,1.10.1,,,,test_diffmap,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,assert_array_almost_equal from numpy.testing,local_import,,,,Import: assert_array_almost_equal from numpy.testing,scverse,scanpy,1.10.1,"from numpy.testing import assert_array_almost_equal, assert_array_equal, assert_raises",numpy.testing,assert_array_almost_equal,,,numpy.testing,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,assert_array_equal from numpy.testing,local_import,,,,Import: assert_array_equal from numpy.testing,scverse,scanpy,1.10.1,"from numpy.testing import assert_array_almost_equal, assert_array_equal, assert_raises",numpy.testing,assert_array_equal,,,numpy.testing,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,assert_raises from numpy.testing,local_import,,,,Import: assert_raises from numpy.testing,scverse,scanpy,1.10.1,"from numpy.testing import assert_array_almost_equal, assert_array_equal, assert_raises",numpy.testing,assert_raises,,,numpy.testing,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,scanpy.testing._helpers.data,pbmc68k_reduced,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,scanpy.testing._pytest.marks,needs,,,scanpy.testing._pytest.marks,,,,,,,,,,,,
,test_embedding.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_embedding.py,python,,,,,,Directory: scanpy\tests\test_embedding.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_density.py,python,test_embedding_density(),function,,,,Function: test_embedding_density(),scverse,scanpy,1.10.1,,,,test_embedding_density,(),,,,,,,,,"# Test that density values are scaled",,,,
scverse_scanpy_1.10.1,test_embedding_density.py,python,test_embedding_density(),function,,,,Function: test_embedding_density(),scverse,scanpy,1.10.1,,,,test_embedding_density,(),,,,,,,,,"# Test that the highest value is in the middle for a grid layout",,,,
scverse_scanpy_1.10.1,test_embedding_density.py,python,test_embedding_density_plot(),function,,,,Function: test_embedding_density_plot(),scverse,scanpy,1.10.1,,,,test_embedding_density_plot,(),,,,,,,,,"# Test that sc.pl.embedding_density() runs without error",,,,
scverse_scanpy_1.10.1,test_embedding_density.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_density.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_density.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_density.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,scanpy.testing._helpers.data,pbmc68k_reduced,,,scanpy.testing._helpers.data,,,,,,,,,,,,
,test_embedding_density.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_embedding_density.py,python,,,,,,Directory: scanpy\tests\test_embedding_density.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"check_images(pth1, pth2, *, tol)",function,,,,"Function: check_images(pth1, pth2, *, tol)",scverse,scanpy,1.10.1,,,,check_images,"(pth1, pth2, *, tol)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"test_missing_values_categorical(
    *,
    fixture_request,
    image_comparer,
    adata,
    plotfunc,
    na_color,
    na_in_legend,
    legend_loc,
    groupsfunc,
)",function,,,,"Function: test_missing_values_categorical(
    *,
    fixture_request,
    image_comparer,
    adata,
    plotfunc,
    na_color,
    na_in_legend,
    legend_loc,
    groupsfunc,
)",scverse,scanpy,1.10.1,,,,test_missing_values_categorical,"(
    *,
    fixture_request,
    image_comparer,
    adata,
    plotfunc,
    na_color,
    na_in_legend,
    legend_loc,
    groupsfunc,
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"test_missing_values_continuous(
    *, fixture_request, image_comparer, adata, plotfunc, na_color, legend_loc, vbounds
)",function,,,,"Function: test_missing_values_continuous(
    *, fixture_request, image_comparer, adata, plotfunc, na_color, legend_loc, vbounds
)",scverse,scanpy,1.10.1,,,,test_missing_values_continuous,"(
    *, fixture_request, image_comparer, adata, plotfunc, na_color, legend_loc, vbounds
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"test_enumerated_palettes(fixture_request, adata, tmpdir, plotfunc)",function,,,,"Function: test_enumerated_palettes(fixture_request, adata, tmpdir, plotfunc)",scverse,scanpy,1.10.1,,,,test_enumerated_palettes,"(fixture_request, adata, tmpdir, plotfunc)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"test_dimension_broadcasting(adata, tmpdir, check_same_image)",function,,,,"Function: test_dimension_broadcasting(adata, tmpdir, check_same_image)",scverse,scanpy,1.10.1,,,,test_dimension_broadcasting,"(adata, tmpdir, check_same_image)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"test_marker_broadcasting(adata, tmpdir, check_same_image)",function,,,,"Function: test_marker_broadcasting(adata, tmpdir, check_same_image)",scverse,scanpy,1.10.1,,,,test_marker_broadcasting,"(adata, tmpdir, check_same_image)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"test_dimensions_same_as_components(adata, tmpdir, check_same_image)",function,,,,"Function: test_dimensions_same_as_components(adata, tmpdir, check_same_image)",scverse,scanpy,1.10.1,,,,test_dimensions_same_as_components,"(adata, tmpdir, check_same_image)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,test_embedding_colorbar_location(image_comparer),function,,,,Function: test_embedding_colorbar_location(image_comparer),scverse,scanpy,1.10.1,,,,test_embedding_colorbar_location,(image_comparer),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,test_visium_circles(image_comparer),function,,,,Function: test_visium_circles(image_comparer),scverse,scanpy,1.10.1,,,,test_visium_circles,(image_comparer),,,,,,,,,"# standard visium data",,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,test_visium_default(image_comparer),function,,,,Function: test_visium_default(image_comparer),scverse,scanpy,1.10.1,,,,test_visium_default,(image_comparer),,,,,,,,,"# default values",,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,test_visium_empty_img_key(image_comparer),function,,,,Function: test_visium_empty_img_key(image_comparer),scverse,scanpy,1.10.1,,,,test_visium_empty_img_key,(image_comparer),,,,,,,,,"# visium coordinates but image empty",,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,test_spatial_general(image_comparer),function,,,,Function: test_spatial_general(image_comparer),scverse,scanpy,1.10.1,,,,test_spatial_general,(image_comparer),,,,,,,,,"# general coordinates",,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,test_spatial_external_img(image_comparer),function,,,,Function: test_spatial_external_img(image_comparer),scverse,scanpy,1.10.1,,,,test_spatial_external_img,(image_comparer),,,,,,,,,"# external image",,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"test_manual_equivalency(equivalent_spatial_plotters, tmpdir, spatial_kwargs)",function,,,,"Function: test_manual_equivalency(equivalent_spatial_plotters, tmpdir, spatial_kwargs)",scverse,scanpy,1.10.1,,,,test_manual_equivalency,"(equivalent_spatial_plotters, tmpdir, spatial_kwargs)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"test_manual_equivalency_no_img(
    equivalent_spatial_plotters_no_img, tmpdir, spatial_kwargs
)",function,,,,"Function: test_manual_equivalency_no_img(
    equivalent_spatial_plotters_no_img, tmpdir, spatial_kwargs
)",scverse,scanpy,1.10.1,,,,test_manual_equivalency_no_img,"(
    equivalent_spatial_plotters_no_img, tmpdir, spatial_kwargs
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"test_white_background_vs_no_img(adata, tmpdir, spatial_kwargs)",function,,,,"Function: test_white_background_vs_no_img(adata, tmpdir, spatial_kwargs)",scverse,scanpy,1.10.1,,,,test_white_background_vs_no_img,"(adata, tmpdir, spatial_kwargs)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"test_spatial_na_color(adata, tmpdir)",function,,,,"Function: test_spatial_na_color(adata, tmpdir)",scverse,scanpy,1.10.1,,,,test_spatial_na_color,"(adata, tmpdir)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,HERE: Path = Path(__file__).parent,constant,HERE: Path = Path(__file__).parent,HERE,Path(__file__).parent,Constant: HERE: Path = Path(__file__).parent,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"ROOT = HERE / ""_images""",constant,"ROOT = HERE / ""_images""",ROOT,"HERE / ""_images""","Constant: ROOT = HERE / ""_images""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,"MISSING_VALUES_ROOT = ROOT / ""embedding-missing-values""",constant,"MISSING_VALUES_ROOT = ROOT / ""embedding-missing-values""",MISSING_VALUES_ROOT,"ROOT / ""embedding-missing-values""","Constant: MISSING_VALUES_ROOT = ROOT / ""embedding-missing-values""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,functools,partial,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,matplotlib,import,,,,Import: matplotlib,scverse,scanpy,1.10.1,import matplotlib as mpl,,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,matplotlib.pyplot,import,,,,Import: matplotlib.pyplot,scverse,scanpy,1.10.1,import matplotlib.pyplot as plt,,matplotlib.pyplot,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,seaborn,import,,,,Import: seaborn,scverse,scanpy,1.10.1,import seaborn as sns,,seaborn,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,Normalize from matplotlib.colors,local_import,,,,Import: Normalize from matplotlib.colors,scverse,scanpy,1.10.1,from matplotlib.colors import Normalize,matplotlib.colors,Normalize,,,matplotlib.colors,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,compare_images from matplotlib.testing.compare,local_import,,,,Import: compare_images from matplotlib.testing.compare,scverse,scanpy,1.10.1,from matplotlib.testing.compare import compare_images,matplotlib.testing.compare,compare_images,,,matplotlib.testing.compare,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_embedding_plots.py,python,pbmc3k_processed from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k_processed from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc3k_processed,scanpy.testing._helpers.data,pbmc3k_processed,,,scanpy.testing._helpers.data,,,,,,,,,,,,
,test_embedding_plots.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_embedding_plots.py,python,,,,,,Directory: scanpy\tests\test_embedding_plots.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_filter_rank_genes_groups.py,python,test_filter_rank_genes_groups(),function,,,,Function: test_filter_rank_genes_groups(),scverse,scanpy,1.10.1,,,,test_filter_rank_genes_groups,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_filter_rank_genes_groups.py,python,"names_no_reference = np.array(
    [
        [""CD3D"", ""ITM2A"", ""CD3D"", ""CCL5"", ""CD7"", ""nan"", ""CD79A"", ""nan"", ""NKG7"", ""LYZ""],
        [""CD3E"", ""CD3D"", ""nan"", ""NKG7"", ""CD3D"", ""AIF1"", ""CD79B"", ""nan"", ""GNLY"", ""CST3""],
        [""IL32"", ""RPL39"", ""nan"", ""CST7"", ""nan"", ""nan"", ""nan"", ""SNHG7"", ""CD7"", ""nan""],
        [""nan"", ""SRSF7"", ""IL32"", ""GZMA"", ""nan"", ""LST1"", ""IGJ"", ""nan"", ""CTSW"", ""nan""],
        [
            ""nan"",
            ""nan"",
            ""CD2"",
            ""CTSW"",
            ""CD8B"",
            ""TYROBP"",
            ""ISG20"",
            ""SNHG8"",
            ""GZMB"",
            ""nan"",
        ],
    ]
)",constant,"names_no_reference = np.array(
    [
        [""CD3D"", ""ITM2A"", ""CD3D"", ""CCL5"", ""CD7"", ""nan"", ""CD79A"", ""nan"", ""NKG7"", ""LYZ""],
        [""CD3E"", ""CD3D"", ""nan"", ""NKG7"", ""CD3D"", ""AIF1"", ""CD79B"", ""nan"", ""GNLY"", ""CST3""],
        [""IL32"", ""RPL39"", ""nan"", ""CST7"", ""nan"", ""nan"", ""nan"", ""SNHG7"", ""CD7"", ""nan""],
        [""nan"", ""SRSF7"", ""IL32"", ""GZMA"", ""nan"", ""LST1"", ""IGJ"", ""nan"", ""CTSW"", ""nan""],
        [
            ""nan"",
            ""nan"",
            ""CD2"",
            ""CTSW"",
            ""CD8B"",
            ""TYROBP"",
            ""ISG20"",
            ""SNHG8"",
            ""GZMB"",
            ""nan"",
        ],
    ]
)",names_no_reference,"np.array(
    [
        [""CD3D"", ""ITM2A"", ""CD3D"", ""CCL5"", ""CD7"", ""nan"", ""CD79A"", ""nan"", ""NKG7"", ""LYZ""],
        [""CD3E"", ""CD3D"", ""nan"", ""NKG7"", ""CD3D"", ""AIF1"", ""CD79B"", ""nan"", ""GNLY"", ""CST3""],
        [""IL32"", ""RPL39"", ""nan"", ""CST7"", ""nan"", ""nan"", ""nan"", ""SNHG7"", ""CD7"", ""nan""],
        [""nan"", ""SRSF7"", ""IL32"", ""GZMA"", ""nan"", ""LST1"", ""IGJ"", ""nan"", ""CTSW"", ""nan""],
        [
            ""nan"",
            ""nan"",
            ""CD2"",
            ""CTSW"",
            ""CD8B"",
            ""TYROBP"",
            ""ISG20"",
            ""SNHG8"",
            ""GZMB"",
            ""nan"",
        ],
    ]
)","Constant: names_no_reference = np.array(
    [
        [""CD3D"", ""ITM2A"", ""CD3D"", ""CCL5"", ""CD7"", ""nan"", ""CD79A"", ""nan"", ""NKG7"", ""LYZ""],
        [""CD3E"", ""CD3D"", ""nan"", ""NKG7"", ""CD3D"", ""AIF1"", ""CD79B"", ""nan"", ""GNLY"", ""CST3""],
        [""IL32"", ""RPL39"", ""nan"", ""CST7"", ""nan"", ""nan"", ""nan"", ""SNHG7"", ""CD7"", ""nan""],
        [""nan"", ""SRSF7"", ""IL32"", ""GZMA"", ""nan"", ""LST1"", ""IGJ"", ""nan"", ""CTSW"", ""nan""],
        [
            ""nan"",
            ""nan"",
            ""CD2"",
            ""CTSW"",
            ""CD8B"",
            ""TYROBP"",
            ""ISG20"",
            ""SNHG8"",
            ""GZMB"",
            ""nan"",
        ],
    ]
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_filter_rank_genes_groups.py,python,"names_reference = np.array(
    [
        [""CD3D"", ""ITM2A"", ""CD3D"", ""nan"", ""CD3D"", ""nan"", ""CD79A"", ""nan"", ""CD7""],
        [""nan"", ""nan"", ""nan"", ""CD3D"", ""nan"", ""AIF1"", ""nan"", ""nan"", ""NKG7""],
        [""nan"", ""nan"", ""nan"", ""NKG7"", ""nan"", ""FCGR3A"", ""ISG20"", ""SNHG7"", ""CTSW""],
        [""nan"", ""CD3D"", ""nan"", ""CCL5"", ""CD7"", ""nan"", ""CD79B"", ""nan"", ""GNLY""],
        [""CD3E"", ""IL32"", ""nan"", ""IL32"", ""CD27"", ""FCER1G"", ""nan"", ""nan"", ""nan""],
    ]
)",constant,"names_reference = np.array(
    [
        [""CD3D"", ""ITM2A"", ""CD3D"", ""nan"", ""CD3D"", ""nan"", ""CD79A"", ""nan"", ""CD7""],
        [""nan"", ""nan"", ""nan"", ""CD3D"", ""nan"", ""AIF1"", ""nan"", ""nan"", ""NKG7""],
        [""nan"", ""nan"", ""nan"", ""NKG7"", ""nan"", ""FCGR3A"", ""ISG20"", ""SNHG7"", ""CTSW""],
        [""nan"", ""CD3D"", ""nan"", ""CCL5"", ""CD7"", ""nan"", ""CD79B"", ""nan"", ""GNLY""],
        [""CD3E"", ""IL32"", ""nan"", ""IL32"", ""CD27"", ""FCER1G"", ""nan"", ""nan"", ""nan""],
    ]
)",names_reference,"np.array(
    [
        [""CD3D"", ""ITM2A"", ""CD3D"", ""nan"", ""CD3D"", ""nan"", ""CD79A"", ""nan"", ""CD7""],
        [""nan"", ""nan"", ""nan"", ""CD3D"", ""nan"", ""AIF1"", ""nan"", ""nan"", ""NKG7""],
        [""nan"", ""nan"", ""nan"", ""NKG7"", ""nan"", ""FCGR3A"", ""ISG20"", ""SNHG7"", ""CTSW""],
        [""nan"", ""CD3D"", ""nan"", ""CCL5"", ""CD7"", ""nan"", ""CD79B"", ""nan"", ""GNLY""],
        [""CD3E"", ""IL32"", ""nan"", ""IL32"", ""CD27"", ""FCER1G"", ""nan"", ""nan"", ""nan""],
    ]
)","Constant: names_reference = np.array(
    [
        [""CD3D"", ""ITM2A"", ""CD3D"", ""nan"", ""CD3D"", ""nan"", ""CD79A"", ""nan"", ""CD7""],
        [""nan"", ""nan"", ""nan"", ""CD3D"", ""nan"", ""AIF1"", ""nan"", ""nan"", ""NKG7""],
        [""nan"", ""nan"", ""nan"", ""NKG7"", ""nan"", ""FCGR3A"", ""ISG20"", ""SNHG7"", ""CTSW""],
        [""nan"", ""CD3D"", ""nan"", ""CCL5"", ""CD7"", ""nan"", ""CD79B"", ""nan"", ""GNLY""],
        [""CD3E"", ""IL32"", ""nan"", ""IL32"", ""CD27"", ""FCER1G"", ""nan"", ""nan"", ""nan""],
    ]
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_filter_rank_genes_groups.py,python,"names_compare_abs = np.array(
    [
        [
            ""CD3D"",
            ""ITM2A"",
            ""HLA-DRB1"",
            ""CCL5"",
            ""HLA-DPA1"",
            ""nan"",
            ""CD79A"",
            ""nan"",
            ""NKG7"",
            ""LYZ"",
        ],
        [
            ""HLA-DPA1"",
            ""nan"",
            ""CD3D"",
            ""NKG7"",
            ""HLA-DRB1"",
            ""AIF1"",
            ""CD79B"",
            ""nan"",
            ""GNLY"",
            ""CST3"",
        ],
        [
            ""nan"",
            ""PSAP"",
            ""CD74"",
            ""CST7"",
            ""CD74"",
            ""PSAP"",
            ""FCER1G"",
            ""SNHG7"",
            ""CD7"",
            ""HLA-DRA"",
        ],
        [
            ""IL32"",
            ""nan"",
            ""HLA-DRB5"",
            ""GZMA"",
            ""HLA-DRB5"",
            ""LST1"",
            ""nan"",
            ""nan"",
            ""CTSW"",
            ""HLA-DRB1"",
        ],
        [
            ""nan"",
            ""FCER1G"",
            ""HLA-DPB1"",
            ""CTSW"",
            ""HLA-DPB1"",
            ""TYROBP"",
            ""TYROBP"",
            ""S100A10"",
            ""GZMB"",
            ""HLA-DPA1"",
        ],
    ]
)",constant,"names_compare_abs = np.array(
    [
        [
            ""CD3D"",
            ""ITM2A"",
            ""HLA-DRB1"",
            ""CCL5"",
            ""HLA-DPA1"",
            ""nan"",
            ""CD79A"",
            ""nan"",
            ""NKG7"",
            ""LYZ"",
        ],
        [
            ""HLA-DPA1"",
            ""nan"",
            ""CD3D"",
            ""NKG7"",
            ""HLA-DRB1"",
            ""AIF1"",
            ""CD79B"",
            ""nan"",
            ""GNLY"",
            ""CST3"",
        ],
        [
            ""nan"",
            ""PSAP"",
            ""CD74"",
            ""CST7"",
            ""CD74"",
            ""PSAP"",
            ""FCER1G"",
            ""SNHG7"",
            ""CD7"",
            ""HLA-DRA"",
        ],
        [
            ""IL32"",
            ""nan"",
            ""HLA-DRB5"",
            ""GZMA"",
            ""HLA-DRB5"",
            ""LST1"",
            ""nan"",
            ""nan"",
            ""CTSW"",
            ""HLA-DRB1"",
        ],
        [
            ""nan"",
            ""FCER1G"",
            ""HLA-DPB1"",
            ""CTSW"",
            ""HLA-DPB1"",
            ""TYROBP"",
            ""TYROBP"",
            ""S100A10"",
            ""GZMB"",
            ""HLA-DPA1"",
        ],
    ]
)",names_compare_abs,"np.array(
    [
        [
            ""CD3D"",
            ""ITM2A"",
            ""HLA-DRB1"",
            ""CCL5"",
            ""HLA-DPA1"",
            ""nan"",
            ""CD79A"",
            ""nan"",
            ""NKG7"",
            ""LYZ"",
        ],
        [
            ""HLA-DPA1"",
            ""nan"",
            ""CD3D"",
            ""NKG7"",
            ""HLA-DRB1"",
            ""AIF1"",
            ""CD79B"",
            ""nan"",
            ""GNLY"",
            ""CST3"",
        ],
        [
            ""nan"",
            ""PSAP"",
            ""CD74"",
            ""CST7"",
            ""CD74"",
            ""PSAP"",
            ""FCER1G"",
            ""SNHG7"",
            ""CD7"",
            ""HLA-DRA"",
        ],
        [
            ""IL32"",
            ""nan"",
            ""HLA-DRB5"",
            ""GZMA"",
            ""HLA-DRB5"",
            ""LST1"",
            ""nan"",
            ""nan"",
            ""CTSW"",
            ""HLA-DRB1"",
        ],
        [
            ""nan"",
            ""FCER1G"",
            ""HLA-DPB1"",
            ""CTSW"",
            ""HLA-DPB1"",
            ""TYROBP"",
            ""TYROBP"",
            ""S100A10"",
            ""GZMB"",
            ""HLA-DPA1"",
        ],
    ]
)","Constant: names_compare_abs = np.array(
    [
        [
            ""CD3D"",
            ""ITM2A"",
            ""HLA-DRB1"",
            ""CCL5"",
            ""HLA-DPA1"",
            ""nan"",
            ""CD79A"",
            ""nan"",
            ""NKG7"",
            ""LYZ"",
        ],
        [
            ""HLA-DPA1"",
            ""nan"",
            ""CD3D"",
            ""NKG7"",
            ""HLA-DRB1"",
            ""AIF1"",
            ""CD79B"",
            ""nan"",
            ""GNLY"",
            ""CST3"",
        ],
        [
            ""nan"",
            ""PSAP"",
            ""CD74"",
            ""CST7"",
            ""CD74"",
            ""PSAP"",
            ""FCER1G"",
            ""SNHG7"",
            ""CD7"",
            ""HLA-DRA"",
        ],
        [
            ""IL32"",
            ""nan"",
            ""HLA-DRB5"",
            ""GZMA"",
            ""HLA-DRB5"",
            ""LST1"",
            ""nan"",
            ""nan"",
            ""CTSW"",
            ""HLA-DRB1"",
        ],
        [
            ""nan"",
            ""FCER1G"",
            ""HLA-DPB1"",
            ""CTSW"",
            ""HLA-DPB1"",
            ""TYROBP"",
            ""TYROBP"",
            ""S100A10"",
            ""GZMB"",
            ""HLA-DPA1"",
        ],
    ]
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_filter_rank_genes_groups.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_filter_rank_genes_groups.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,scanpy.testing._helpers.data,pbmc68k_reduced,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_filter_rank_genes_groups.py,python,filter_rank_genes_groups from scanpy.tools,local_import,,,,Import: filter_rank_genes_groups from scanpy.tools,scverse,scanpy,1.10.1,"from scanpy.tools import filter_rank_genes_groups, rank_genes_groups",scanpy.tools,filter_rank_genes_groups,,,scanpy.tools,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_filter_rank_genes_groups.py,python,rank_genes_groups from scanpy.tools,local_import,,,,Import: rank_genes_groups from scanpy.tools,scverse,scanpy,1.10.1,"from scanpy.tools import filter_rank_genes_groups, rank_genes_groups",scanpy.tools,rank_genes_groups,,,scanpy.tools,,,,,,,,,,,,
,test_filter_rank_genes_groups.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_filter_rank_genes_groups.py,python,,,,,,Directory: scanpy\tests\test_filter_rank_genes_groups.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,"transpose_adata(adata: AnnData, *, expect_duplicates: bool = False) -> AnnData",function,,,,"Function: transpose_adata(adata: AnnData, *, expect_duplicates: bool = False) -> AnnData",scverse,scanpy,1.10.1,,,,transpose_adata,"(adata: AnnData, *, expect_duplicates: bool = False)",,,,,,,,AnnData,,,,,
scverse_scanpy_1.10.1,test_get.py,python,test_obs_df(adata),function,,,,Function: test_obs_df(adata),scverse,scanpy,1.10.1,,,,test_obs_df,(adata),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,test_repeated_gene_symbols(),function,,,,Function: test_repeated_gene_symbols(),scverse,scanpy,1.10.1,,,,test_repeated_gene_symbols,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,test_column_content(),function,,,,Function: test_column_content(),scverse,scanpy,1.10.1,,,,test_column_content,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,test_var_df(adata),function,,,,Function: test_var_df(adata),scverse,scanpy,1.10.1,,,,test_var_df,(adata),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,test_non_unique_cols_value_error(),function,,,,Function: test_non_unique_cols_value_error(),scverse,scanpy,1.10.1,,,,test_non_unique_cols_value_error,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,test_non_unique_var_index_value_error(),function,,,,Function: test_non_unique_var_index_value_error(),scverse,scanpy,1.10.1,,,,test_non_unique_var_index_value_error,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,test_keys_in_both_obs_and_var_index_value_error(),function,,,,Function: test_keys_in_both_obs_and_var_index_value_error(),scverse,scanpy,1.10.1,,,,test_keys_in_both_obs_and_var_index_value_error,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,test_shared_key_errors(shared_key_adata),function,,,,Function: test_shared_key_errors(shared_key_adata),scverse,scanpy,1.10.1,,,,test_shared_key_errors,(shared_key_adata),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,test_rank_genes_groups_df(),function,,,,Function: test_rank_genes_groups_df(),scverse,scanpy,1.10.1,,,,test_rank_genes_groups_df,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,"TRANSPOSE_PARAMS = pytest.mark.parametrize(
    ""dim,transform,func"",
    [
        (""obs"", lambda x, expect_duplicates=False: x, sc.get.obs_df),
        (""var"", transpose_adata, sc.get.var_df),
    ],
    ids=[""obs_df"", ""var_df""],
)",constant,"TRANSPOSE_PARAMS = pytest.mark.parametrize(
    ""dim,transform,func"",
    [
        (""obs"", lambda x, expect_duplicates=False: x, sc.get.obs_df),
        (""var"", transpose_adata, sc.get.var_df),
    ],
    ids=[""obs_df"", ""var_df""],
)",TRANSPOSE_PARAMS,"pytest.mark.parametrize(
    ""dim,transform,func"",
    [
        (""obs"", lambda x, expect_duplicates=False: x, sc.get.obs_df),
        (""var"", transpose_adata, sc.get.var_df),
    ],
    ids=[""obs_df"", ""var_df""],
)","Constant: TRANSPOSE_PARAMS = pytest.mark.parametrize(
    ""dim,transform,func"",
    [
        (""obs"", lambda x, expect_duplicates=False: x, sc.get.obs_df),
        (""var"", transpose_adata, sc.get.var_df),
    ],
    ids=[""obs_df"", ""var_df""],
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,functools,partial,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,chain from itertools,import,,,,Import: chain from itertools,scverse,scanpy,1.10.1,"from itertools import chain, repeat",itertools,chain,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,repeat from itertools,import,,,,Import: repeat from itertools,scverse,scanpy,1.10.1,"from itertools import chain, repeat",itertools,repeat,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,filter_oldformatwarning from scanpy.datasets._utils,local_import,,,,Import: filter_oldformatwarning from scanpy.datasets._utils,scverse,scanpy,1.10.1,from scanpy.datasets._utils import filter_oldformatwarning,scanpy.datasets._utils,filter_oldformatwarning,,,scanpy.datasets._utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,anndata_v0_8_constructor_compat from scanpy.testing._helpers,local_import,,,,Import: anndata_v0_8_constructor_compat from scanpy.testing._helpers,scverse,scanpy,1.10.1,from scanpy.testing._helpers import anndata_v0_8_constructor_compat,scanpy.testing._helpers,anndata_v0_8_constructor_compat,,,scanpy.testing._helpers,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_get.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,scanpy.testing._helpers.data,pbmc68k_reduced,,,scanpy.testing._helpers.data,,,,,,,,,,,,
,test_get.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_get.py,python,,,,,,Directory: scanpy\tests\test_get.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,test_runs(adata),function,,,,Function: test_runs(adata),scverse,scanpy,1.10.1,,,,test_runs,(adata),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,test_supports_batch(adata),function,,,,Function: test_supports_batch(adata),scverse,scanpy,1.10.1,,,,test_supports_batch,(adata),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,test_supports_layers(adata_sess),function,,,,Function: test_supports_layers(adata_sess),scverse,scanpy,1.10.1,,,,test_supports_layers,(adata_sess),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,test_no_batch_matches_batch(adata),function,,,,Function: test_no_batch_matches_batch(adata),scverse,scanpy,1.10.1,,,,test_no_batch_matches_batch,(adata),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,"_check_pearson_hvg_columns(output_df: pd.DataFrame, n_top_genes: int)",function,,,,"Function: _check_pearson_hvg_columns(output_df: pd.DataFrame, n_top_genes: int)",scverse,scanpy,1.10.1,,,,_check_pearson_hvg_columns,"(output_df: pd.DataFrame, n_top_genes: int)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,test_pearson_residuals_inputchecks(pbmc3k_parametrized_small),function,,,,Function: test_pearson_residuals_inputchecks(pbmc3k_parametrized_small),scverse,scanpy,1.10.1,,,,test_pearson_residuals_inputchecks,(pbmc3k_parametrized_small),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,test_batches(),function,,,,Function: test_batches(),scverse,scanpy,1.10.1,,,,test_batches,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,test_cellranger_n_top_genes_warning(),function,,,,Function: test_cellranger_n_top_genes_warning(),scverse,scanpy,1.10.1,,,,test_cellranger_n_top_genes_warning,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,test_cutoff_info(),function,,,,Function: test_cutoff_info(),scverse,scanpy,1.10.1,,,,test_cutoff_info,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,"FILE = Path(__file__).parent / Path(""_scripts/seurat_hvg.csv"")",constant,"FILE = Path(__file__).parent / Path(""_scripts/seurat_hvg.csv"")",FILE,"Path(__file__).parent / Path(""_scripts/seurat_hvg.csv"")","Constant: FILE = Path(__file__).parent / Path(""_scripts/seurat_hvg.csv"")",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,"FILE_V3 = Path(__file__).parent / Path(""_scripts/seurat_hvg_v3.csv.gz"")",constant,"FILE_V3 = Path(__file__).parent / Path(""_scripts/seurat_hvg_v3.csv.gz"")",FILE_V3,"Path(__file__).parent / Path(""_scripts/seurat_hvg_v3.csv.gz"")","Constant: FILE_V3 = Path(__file__).parent / Path(""_scripts/seurat_hvg_v3.csv.gz"")",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,"FILE_V3_BATCH = Path(__file__).parent / Path(""_scripts/seurat_hvg_v3_batch.csv"")",constant,"FILE_V3_BATCH = Path(__file__).parent / Path(""_scripts/seurat_hvg_v3_batch.csv"")",FILE_V3_BATCH,"Path(__file__).parent / Path(""_scripts/seurat_hvg_v3_batch.csv"")","Constant: FILE_V3_BATCH = Path(__file__).parent / Path(""_scripts/seurat_hvg_v3_batch.csv"")",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,"FILE_CELL_RANGER = Path(__file__).parent / ""_scripts/cell_ranger_hvg.csv""",constant,"FILE_CELL_RANGER = Path(__file__).parent / ""_scripts/cell_ranger_hvg.csv""",FILE_CELL_RANGER,"Path(__file__).parent / ""_scripts/cell_ranger_hvg.csv""","Constant: FILE_CELL_RANGER = Path(__file__).parent / ""_scripts/cell_ranger_hvg.csv""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,ascii_letters from string,import,,,,Import: ascii_letters from string,scverse,scanpy,1.10.1,from string import ascii_letters,string,ascii_letters,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,Callable from typing,import,,,,Import: Callable from typing,scverse,scanpy,1.10.1,"from typing import Callable, Literal",typing,Callable,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import Callable, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,assert_frame_equal from pandas.testing,local_import,,,,Import: assert_frame_equal from pandas.testing,scverse,scanpy,1.10.1,"from pandas.testing import assert_frame_equal, assert_index_equal",pandas.testing,assert_frame_equal,,,pandas.testing,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,assert_index_equal from pandas.testing,local_import,,,,Import: assert_index_equal from pandas.testing,scverse,scanpy,1.10.1,"from pandas.testing import assert_frame_equal, assert_index_equal",pandas.testing,assert_index_equal,,,pandas.testing,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,_check_check_values_warnings from scanpy.testing._helpers,local_import,,,,Import: _check_check_values_warnings from scanpy.testing._helpers,scverse,scanpy,1.10.1,from scanpy.testing._helpers import _check_check_values_warnings,scanpy.testing._helpers,_check_check_values_warnings,,,scanpy.testing._helpers,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,pbmc3k from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,"from scanpy.testing._helpers.data import pbmc3k, pbmc68k_reduced",scanpy.testing._helpers.data,pbmc3k,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,"from scanpy.testing._helpers.data import pbmc3k, pbmc68k_reduced",scanpy.testing._helpers.data,pbmc68k_reduced,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,scanpy.testing._pytest.marks,needs,,,scanpy.testing._pytest.marks,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_highly_variable_genes.py,python,ARRAY_TYPES from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,from scanpy.testing._pytest.params import ARRAY_TYPES,scanpy.testing._pytest.params,ARRAY_TYPES,,,scanpy.testing._pytest.params,,,,,,,,,,,,
,test_highly_variable_genes.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_highly_variable_genes.py,python,,,,,,Directory: scanpy\tests\test_highly_variable_genes.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,test_representation(adatas),function,,,,Function: test_representation(adatas),scverse,scanpy,1.10.1,,,,test_representation,(adatas),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,test_neighbors(adatas),function,,,,Function: test_neighbors(adatas),scverse,scanpy,1.10.1,,,,test_neighbors,(adatas),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,test_ingest_map_embedding_umap(),function,,,,Function: test_ingest_map_embedding_umap(),scverse,scanpy,1.10.1,,,,test_ingest_map_embedding_umap,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,"X = np.array(
    [
        [1.0, 2.5, 3.0, 5.0, 8.7],
        [4.2, 7.0, 9.0, 11.0, 7.0],
        [5.1, 2.0, 9.0, 4.0, 9.0],
        [7.0, 9.4, 6.8, 9.1, 8.0],
        [8.9, 8.6, 9.6, 1.0, 2.0],
        [6.5, 8.9, 2.2, 4.5, 8.9],
    ],
    dtype=np.float32,
)",constant,"X = np.array(
    [
        [1.0, 2.5, 3.0, 5.0, 8.7],
        [4.2, 7.0, 9.0, 11.0, 7.0],
        [5.1, 2.0, 9.0, 4.0, 9.0],
        [7.0, 9.4, 6.8, 9.1, 8.0],
        [8.9, 8.6, 9.6, 1.0, 2.0],
        [6.5, 8.9, 2.2, 4.5, 8.9],
    ],
    dtype=np.float32,
)",X,"np.array(
    [
        [1.0, 2.5, 3.0, 5.0, 8.7],
        [4.2, 7.0, 9.0, 11.0, 7.0],
        [5.1, 2.0, 9.0, 4.0, 9.0],
        [7.0, 9.4, 6.8, 9.1, 8.0],
        [8.9, 8.6, 9.6, 1.0, 2.0],
        [6.5, 8.9, 2.2, 4.5, 8.9],
    ],
    dtype=np.float32,
)","Constant: X = np.array(
    [
        [1.0, 2.5, 3.0, 5.0, 8.7],
        [4.2, 7.0, 9.0, 11.0, 7.0],
        [5.1, 2.0, 9.0, 4.0, 9.0],
        [7.0, 9.4, 6.8, 9.1, 8.0],
        [8.9, 8.6, 9.6, 1.0, 2.0],
        [6.5, 8.9, 2.2, 4.5, 8.9],
    ],
    dtype=np.float32,
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,"T = np.array([[2.0, 3.5, 4.0, 1.0, 4.7], [3.2, 2.0, 5.0, 5.0, 8.0]], dtype=np.float32)",constant,"T = np.array([[2.0, 3.5, 4.0, 1.0, 4.7], [3.2, 2.0, 5.0, 5.0, 8.0]], dtype=np.float32)",T,"np.array([[2.0, 3.5, 4.0, 1.0, 4.7], [3.2, 2.0, 5.0, 5.0, 8.0]], dtype=np.float32)","Constant: T = np.array([[2.0, 3.5, 4.0, 1.0, 4.7], [3.2, 2.0, 5.0, 5.0, 8.0]], dtype=np.float32)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,UMAP from umap,import,,,,Import: UMAP from umap,scverse,scanpy,1.10.1,from umap import UMAP,umap,UMAP,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,settings from scanpy,import,,,,Import: settings from scanpy,scverse,scanpy,1.10.1,from scanpy import settings,scanpy,settings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,KDTree from sklearn.neighbors,local_import,,,,Import: KDTree from sklearn.neighbors,scverse,scanpy,1.10.1,from sklearn.neighbors import KDTree,sklearn.neighbors,KDTree,,,sklearn.neighbors,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,pkg_version from scanpy._compat,local_import,,,,Import: pkg_version from scanpy._compat,scverse,scanpy,1.10.1,from scanpy._compat import pkg_version,scanpy._compat,pkg_version,,,scanpy._compat,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_ingest.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,scanpy.testing._helpers.data,pbmc68k_reduced,,,scanpy.testing._helpers.data,,,,,,,,,,,,
,test_ingest.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_ingest.py,python,,,,,,Directory: scanpy\tests\test_ingest.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,[staticmethod] IncTime.now(tz),class_method,,,,Class method: [staticmethod] IncTime.now(tz),scverse,scanpy,1.10.1,,,,,,,IncTime,now,(tz),,,,,,,,,staticmethod
scverse_scanpy_1.10.1,test_logging.py,python,IncTime,class,,,,Class: IncTime,scverse,scanpy,1.10.1,,,,,,,IncTime,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,test_defaults(),function,,,,Function: test_defaults(),scverse,scanpy,1.10.1,,,,test_defaults,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,test_records(caplog: pytest.LogCaptureFixture),function,,,,Function: test_records(caplog: pytest.LogCaptureFixture),scverse,scanpy,1.10.1,,,,test_records,(caplog: pytest.LogCaptureFixture),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,test_formats(capsys: pytest.CaptureFixture),function,,,,Function: test_formats(capsys: pytest.CaptureFixture),scverse,scanpy,1.10.1,,,,test_formats,(capsys: pytest.CaptureFixture),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,test_deep(capsys: pytest.CaptureFixture),function,,,,Function: test_deep(capsys: pytest.CaptureFixture),scverse,scanpy,1.10.1,,,,test_deep,(capsys: pytest.CaptureFixture),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,"test_logfile(tmp_path: Path, caplog: pytest.LogCaptureFixture)",function,,,,"Function: test_logfile(tmp_path: Path, caplog: pytest.LogCaptureFixture)",scverse,scanpy,1.10.1,,,,test_logfile,"(tmp_path: Path, caplog: pytest.LogCaptureFixture)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,"test_timing(monkeypatch, capsys: pytest.CaptureFixture)",function,,,,"Function: test_timing(monkeypatch, capsys: pytest.CaptureFixture)",scverse,scanpy,1.10.1,,,,test_timing,"(monkeypatch, capsys: pytest.CaptureFixture)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,,sys,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,redirect_stdout from contextlib,import,,,,Import: redirect_stdout from contextlib,scverse,scanpy,1.10.1,from contextlib import redirect_stdout,contextlib,redirect_stdout,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,datetime from datetime,import,,,,Import: datetime from datetime,scverse,scanpy,1.10.1,from datetime import datetime,datetime,datetime,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,StringIO from io,import,,,,Import: StringIO from io,scverse,scanpy,1.10.1,from io import StringIO,io,StringIO,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,Verbosity from scanpy,import,,,,Import: Verbosity from scanpy,scverse,scanpy,1.10.1,from scanpy import Verbosity,scanpy,Verbosity,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,logging from scanpy,import,,,,Import: logging from scanpy,scverse,scanpy,1.10.1,from scanpy import logging as log,scanpy,logging,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_logging.py,python,settings from scanpy,import,,,,Import: settings from scanpy,scverse,scanpy,1.10.1,from scanpy import settings as s,scanpy,settings,,,,,,,,,,,,,,,
,test_logging.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_logging.py,python,,,,,,Directory: scanpy\tests\test_logging.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_marker_gene_overlap.py,python,generate_test_data(),function,,,,Function: generate_test_data(),scverse,scanpy,1.10.1,,,,generate_test_data,(),,,,,,,,,"# Create an artificial data set",,,,
scverse_scanpy_1.10.1,test_marker_gene_overlap.py,python,test_marker_overlap_base(),function,,,,Function: test_marker_overlap_base(),scverse,scanpy,1.10.1,,,,test_marker_overlap_base,(),,,,,,,,,"# Test all overlap calculations on artificial data",,,,
scverse_scanpy_1.10.1,test_marker_gene_overlap.py,python,test_marker_overlap_normalization(),function,,,,Function: test_marker_overlap_normalization(),scverse,scanpy,1.10.1,,,,test_marker_overlap_normalization,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_marker_gene_overlap.py,python,test_marker_overlap_methods(),function,,,,Function: test_marker_overlap_methods(),scverse,scanpy,1.10.1,,,,test_marker_overlap_methods,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_marker_gene_overlap.py,python,test_marker_overlap_subsetting(),function,,,,Function: test_marker_overlap_subsetting(),scverse,scanpy,1.10.1,,,,test_marker_overlap_subsetting,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_marker_gene_overlap.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_marker_gene_overlap.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_marker_gene_overlap.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
,test_marker_gene_overlap.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_marker_gene_overlap.py,python,,,,,,Directory: scanpy\tests\test_marker_gene_overlap.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,"test_consistency(metric, threading)",function,,,,"Function: test_consistency(metric, threading)",scverse,scanpy,1.10.1,,,,test_consistency,"(metric, threading)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,test_confusion_matrix(),function,,,,Function: test_confusion_matrix(),scverse,scanpy,1.10.1,,,,test_confusion_matrix,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,test_confusion_matrix_randomized(),function,,,,Function: test_confusion_matrix_randomized(),scverse,scanpy,1.10.1,,,,test_confusion_matrix_randomized,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,test_confusion_matrix_api(),function,,,,Function: test_confusion_matrix_api(),scverse,scanpy,1.10.1,,,,test_confusion_matrix_api,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,"mark_flaky = pytest.mark.xfail(
    strict=False,
    reason=""This used to work reliably, but doesn’t anymore"",
)",constant,"mark_flaky = pytest.mark.xfail(
    strict=False,
    reason=""This used to work reliably, but doesn’t anymore"",
)",mark_flaky,"pytest.mark.xfail(
    strict=False,
    reason=""This used to work reliably, but doesn’t anymore"",
)","Constant: mark_flaky = pytest.mark.xfail(
    strict=False,
    reason=""This used to work reliably, but doesn’t anymore"",
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,functools,partial,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,eq from operator,import,,,,Import: eq from operator,scverse,scanpy,1.10.1,from operator import eq,operator,eq,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,ascii_letters from string,import,,,,Import: ascii_letters from string,scverse,scanpy,1.10.1,from string import ascii_letters,string,ascii_letters,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,numba,import,,,,Import: numba,scverse,scanpy,1.10.1,import numba,,numba,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,threadpoolctl,import,,,,Import: threadpoolctl,scverse,scanpy,1.10.1,import threadpoolctl,,threadpoolctl,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,Version from packaging.version,local_import,,,,Import: Version from packaging.version,scverse,scanpy,1.10.1,from packaging.version import Version,packaging.version,Version,,,packaging.version,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,DaskArray from scanpy._compat,local_import,,,,Import: DaskArray from scanpy._compat,scverse,scanpy,1.10.1,from scanpy._compat import DaskArray,scanpy._compat,DaskArray,,,scanpy._compat,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,scanpy.testing._helpers.data,pbmc68k_reduced,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_metrics.py,python,ARRAY_TYPES from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,from scanpy.testing._pytest.params import ARRAY_TYPES,scanpy.testing._pytest.params,ARRAY_TYPES,,,scanpy.testing._pytest.params,,,,,,,,,,,,
,test_metrics.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_metrics.py,python,,,,,,Directory: scanpy\tests\test_metrics.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,get_neighbors() -> Neighbors,function,,,,Function: get_neighbors() -> Neighbors,scverse,scanpy,1.10.1,,,,get_neighbors,(),,,,,,,,Neighbors,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,test_gauss_noknn_connectivities_euclidean(neigh),function,,,,Function: test_gauss_noknn_connectivities_euclidean(neigh),scverse,scanpy,1.10.1,,,,test_gauss_noknn_connectivities_euclidean,(neigh),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,test_metrics_argument(),function,,,,Function: test_metrics_argument(),scverse,scanpy,1.10.1,,,,test_metrics_argument,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,test_use_rep_argument(),function,,,,Function: test_use_rep_argument(),scverse,scanpy,1.10.1,,,,test_use_rep_argument,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"X = [[1, 0], [3, 0], [5, 6], [0, 4]]",constant,"X = [[1, 0], [3, 0], [5, 6], [0, 4]]",X,"[[1, 0], [3, 0], [5, 6], [0, 4]]","Constant: X = [[1, 0], [3, 0], [5, 6], [0, 4]]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,n_neighbors = 3,constant,n_neighbors = 3,n_neighbors,3,Constant: n_neighbors = 3,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"distances_euclidean = [
    [0.0, 2.0, 0.0, 4.123105525970459],
    [2.0, 0.0, 0.0, 5.0],
    [0.0, 6.324555397033691, 0.0, 5.385164737701416],
    [4.123105525970459, 5.0, 0.0, 0.0],
]",constant,"distances_euclidean = [
    [0.0, 2.0, 0.0, 4.123105525970459],
    [2.0, 0.0, 0.0, 5.0],
    [0.0, 6.324555397033691, 0.0, 5.385164737701416],
    [4.123105525970459, 5.0, 0.0, 0.0],
]",distances_euclidean,"[
    [0.0, 2.0, 0.0, 4.123105525970459],
    [2.0, 0.0, 0.0, 5.0],
    [0.0, 6.324555397033691, 0.0, 5.385164737701416],
    [4.123105525970459, 5.0, 0.0, 0.0],
]","Constant: distances_euclidean = [
    [0.0, 2.0, 0.0, 4.123105525970459],
    [2.0, 0.0, 0.0, 5.0],
    [0.0, 6.324555397033691, 0.0, 5.385164737701416],
    [4.123105525970459, 5.0, 0.0, 0.0],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"distances_euclidean_all = [
    [0.0, 2.0, 7.211102485656738, 4.123105525970459],
    [2.0, 0.0, 6.324555397033691, 5.0],
    [7.211102485656738, 6.324555397033691, 0.0, 5.385164737701416],
    [4.123105525970459, 5.0, 5.385164737701416, 0.0],
]",constant,"distances_euclidean_all = [
    [0.0, 2.0, 7.211102485656738, 4.123105525970459],
    [2.0, 0.0, 6.324555397033691, 5.0],
    [7.211102485656738, 6.324555397033691, 0.0, 5.385164737701416],
    [4.123105525970459, 5.0, 5.385164737701416, 0.0],
]",distances_euclidean_all,"[
    [0.0, 2.0, 7.211102485656738, 4.123105525970459],
    [2.0, 0.0, 6.324555397033691, 5.0],
    [7.211102485656738, 6.324555397033691, 0.0, 5.385164737701416],
    [4.123105525970459, 5.0, 5.385164737701416, 0.0],
]","Constant: distances_euclidean_all = [
    [0.0, 2.0, 7.211102485656738, 4.123105525970459],
    [2.0, 0.0, 6.324555397033691, 5.0],
    [7.211102485656738, 6.324555397033691, 0.0, 5.385164737701416],
    [4.123105525970459, 5.0, 5.385164737701416, 0.0],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"connectivities_umap = [
    [0.0, 1.0, 0.0, 1.0],
    [1.0, 0.0, 0.5849691143165735, 0.8277419907567016],
    [0.0, 0.5849691143165735, 0.0, 1.0],
    [1.0, 0.8277419907567016, 1.0, 0.0],
]",constant,"connectivities_umap = [
    [0.0, 1.0, 0.0, 1.0],
    [1.0, 0.0, 0.5849691143165735, 0.8277419907567016],
    [0.0, 0.5849691143165735, 0.0, 1.0],
    [1.0, 0.8277419907567016, 1.0, 0.0],
]",connectivities_umap,"[
    [0.0, 1.0, 0.0, 1.0],
    [1.0, 0.0, 0.5849691143165735, 0.8277419907567016],
    [0.0, 0.5849691143165735, 0.0, 1.0],
    [1.0, 0.8277419907567016, 1.0, 0.0],
]","Constant: connectivities_umap = [
    [0.0, 1.0, 0.0, 1.0],
    [1.0, 0.0, 0.5849691143165735, 0.8277419907567016],
    [0.0, 0.5849691143165735, 0.0, 1.0],
    [1.0, 0.8277419907567016, 1.0, 0.0],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"transitions_sym_umap = [
    [0.0, 0.4818987107873648, 0.0, 0.3951883393150153],
    [0.48189871078736474, 0.0, 0.3594582764005241, 0.24216345431293487],
    [0.0, 0.3594582764005241, 0.0, 0.5039226836320637],
    [0.39518833931501524, 0.24216345431293487, 0.5039226836320637, 0.0],
]",constant,"transitions_sym_umap = [
    [0.0, 0.4818987107873648, 0.0, 0.3951883393150153],
    [0.48189871078736474, 0.0, 0.3594582764005241, 0.24216345431293487],
    [0.0, 0.3594582764005241, 0.0, 0.5039226836320637],
    [0.39518833931501524, 0.24216345431293487, 0.5039226836320637, 0.0],
]",transitions_sym_umap,"[
    [0.0, 0.4818987107873648, 0.0, 0.3951883393150153],
    [0.48189871078736474, 0.0, 0.3594582764005241, 0.24216345431293487],
    [0.0, 0.3594582764005241, 0.0, 0.5039226836320637],
    [0.39518833931501524, 0.24216345431293487, 0.5039226836320637, 0.0],
]","Constant: transitions_sym_umap = [
    [0.0, 0.4818987107873648, 0.0, 0.3951883393150153],
    [0.48189871078736474, 0.0, 0.3594582764005241, 0.24216345431293487],
    [0.0, 0.3594582764005241, 0.0, 0.5039226836320637],
    [0.39518833931501524, 0.24216345431293487, 0.5039226836320637, 0.0],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"transitions_umap = [
    [0.0, 0.5395987596963403, 0.0, 0.4604012403036599],
    [0.430368608684738, 0.0, 0.3176747629691457, 0.2519566283461165],
    [0.0, 0.40673754271561435, 0.0, 0.5932624572843856],
    [0.33921243006981133, 0.23275092618009624, 0.42803664375009237, 0.0],
]",constant,"transitions_umap = [
    [0.0, 0.5395987596963403, 0.0, 0.4604012403036599],
    [0.430368608684738, 0.0, 0.3176747629691457, 0.2519566283461165],
    [0.0, 0.40673754271561435, 0.0, 0.5932624572843856],
    [0.33921243006981133, 0.23275092618009624, 0.42803664375009237, 0.0],
]",transitions_umap,"[
    [0.0, 0.5395987596963403, 0.0, 0.4604012403036599],
    [0.430368608684738, 0.0, 0.3176747629691457, 0.2519566283461165],
    [0.0, 0.40673754271561435, 0.0, 0.5932624572843856],
    [0.33921243006981133, 0.23275092618009624, 0.42803664375009237, 0.0],
]","Constant: transitions_umap = [
    [0.0, 0.5395987596963403, 0.0, 0.4604012403036599],
    [0.430368608684738, 0.0, 0.3176747629691457, 0.2519566283461165],
    [0.0, 0.40673754271561435, 0.0, 0.5932624572843856],
    [0.33921243006981133, 0.23275092618009624, 0.42803664375009237, 0.0],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"connectivities_gauss_knn = [
    [0.0, 0.8466368913650513, 0.0, 0.5660185813903809],
    [0.8466368913650513, 0.0, 0.4223647117614746, 0.4902938902378082],
    [0.0, 0.4223647117614746, 0.0, 0.5840492248535156],
    [0.5660185813903809, 0.4902938902378082, 0.5840492248535156, 0.0],
]",constant,"connectivities_gauss_knn = [
    [0.0, 0.8466368913650513, 0.0, 0.5660185813903809],
    [0.8466368913650513, 0.0, 0.4223647117614746, 0.4902938902378082],
    [0.0, 0.4223647117614746, 0.0, 0.5840492248535156],
    [0.5660185813903809, 0.4902938902378082, 0.5840492248535156, 0.0],
]",connectivities_gauss_knn,"[
    [0.0, 0.8466368913650513, 0.0, 0.5660185813903809],
    [0.8466368913650513, 0.0, 0.4223647117614746, 0.4902938902378082],
    [0.0, 0.4223647117614746, 0.0, 0.5840492248535156],
    [0.5660185813903809, 0.4902938902378082, 0.5840492248535156, 0.0],
]","Constant: connectivities_gauss_knn = [
    [0.0, 0.8466368913650513, 0.0, 0.5660185813903809],
    [0.8466368913650513, 0.0, 0.4223647117614746, 0.4902938902378082],
    [0.0, 0.4223647117614746, 0.0, 0.5840492248535156],
    [0.5660185813903809, 0.4902938902378082, 0.5840492248535156, 0.0],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"connectivities_gauss_noknn = [
    [1.0, 0.676927387714386, 0.024883469566702843, 0.1962655782699585],
    [0.676927387714386, 1.0, 0.08414449542760849, 0.1353352814912796],
    [0.024883469566702843, 0.08414449542760849, 1.0, 0.16558068990707397],
    [0.1962655782699585, 0.1353352814912796, 0.16558068990707397, 1.0],
]",constant,"connectivities_gauss_noknn = [
    [1.0, 0.676927387714386, 0.024883469566702843, 0.1962655782699585],
    [0.676927387714386, 1.0, 0.08414449542760849, 0.1353352814912796],
    [0.024883469566702843, 0.08414449542760849, 1.0, 0.16558068990707397],
    [0.1962655782699585, 0.1353352814912796, 0.16558068990707397, 1.0],
]",connectivities_gauss_noknn,"[
    [1.0, 0.676927387714386, 0.024883469566702843, 0.1962655782699585],
    [0.676927387714386, 1.0, 0.08414449542760849, 0.1353352814912796],
    [0.024883469566702843, 0.08414449542760849, 1.0, 0.16558068990707397],
    [0.1962655782699585, 0.1353352814912796, 0.16558068990707397, 1.0],
]","Constant: connectivities_gauss_noknn = [
    [1.0, 0.676927387714386, 0.024883469566702843, 0.1962655782699585],
    [0.676927387714386, 1.0, 0.08414449542760849, 0.1353352814912796],
    [0.024883469566702843, 0.08414449542760849, 1.0, 0.16558068990707397],
    [0.1962655782699585, 0.1353352814912796, 0.16558068990707397, 1.0],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"transitions_sym_gauss_knn = [
    [0.0, 0.5146393179893494, 0.0, 0.36445462703704834],
    [0.5146393179893494, 0.0, 0.3581143319606781, 0.2239987552165985],
    [0.0, 0.3581143319606781, 0.0, 0.5245543718338013],
    [0.36445462703704834, 0.2239987552165985, 0.5245543718338013, 0.0],
]",constant,"transitions_sym_gauss_knn = [
    [0.0, 0.5146393179893494, 0.0, 0.36445462703704834],
    [0.5146393179893494, 0.0, 0.3581143319606781, 0.2239987552165985],
    [0.0, 0.3581143319606781, 0.0, 0.5245543718338013],
    [0.36445462703704834, 0.2239987552165985, 0.5245543718338013, 0.0],
]",transitions_sym_gauss_knn,"[
    [0.0, 0.5146393179893494, 0.0, 0.36445462703704834],
    [0.5146393179893494, 0.0, 0.3581143319606781, 0.2239987552165985],
    [0.0, 0.3581143319606781, 0.0, 0.5245543718338013],
    [0.36445462703704834, 0.2239987552165985, 0.5245543718338013, 0.0],
]","Constant: transitions_sym_gauss_knn = [
    [0.0, 0.5146393179893494, 0.0, 0.36445462703704834],
    [0.5146393179893494, 0.0, 0.3581143319606781, 0.2239987552165985],
    [0.0, 0.3581143319606781, 0.0, 0.5245543718338013],
    [0.36445462703704834, 0.2239987552165985, 0.5245543718338013, 0.0],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"transitions_sym_gauss_noknn = [
    [
        0.5093212127685547,
        0.34393802285194397,
        0.016115963459014893,
        0.11607448011636734,
    ],
    [0.34393805265426636, 0.506855845451355, 0.054364752024412155, 0.07984541356563568],
    [
        0.016115965321660042,
        0.054364752024412155,
        0.8235670328140259,
        0.12452481687068939,
    ],
    [0.11607448011636734, 0.07984541356563568, 0.1245248094201088, 0.6867417693138123],
]",constant,"transitions_sym_gauss_noknn = [
    [
        0.5093212127685547,
        0.34393802285194397,
        0.016115963459014893,
        0.11607448011636734,
    ],
    [0.34393805265426636, 0.506855845451355, 0.054364752024412155, 0.07984541356563568],
    [
        0.016115965321660042,
        0.054364752024412155,
        0.8235670328140259,
        0.12452481687068939,
    ],
    [0.11607448011636734, 0.07984541356563568, 0.1245248094201088, 0.6867417693138123],
]",transitions_sym_gauss_noknn,"[
    [
        0.5093212127685547,
        0.34393802285194397,
        0.016115963459014893,
        0.11607448011636734,
    ],
    [0.34393805265426636, 0.506855845451355, 0.054364752024412155, 0.07984541356563568],
    [
        0.016115965321660042,
        0.054364752024412155,
        0.8235670328140259,
        0.12452481687068939,
    ],
    [0.11607448011636734, 0.07984541356563568, 0.1245248094201088, 0.6867417693138123],
]","Constant: transitions_sym_gauss_noknn = [
    [
        0.5093212127685547,
        0.34393802285194397,
        0.016115963459014893,
        0.11607448011636734,
    ],
    [0.34393805265426636, 0.506855845451355, 0.054364752024412155, 0.07984541356563568],
    [
        0.016115965321660042,
        0.054364752024412155,
        0.8235670328140259,
        0.12452481687068939,
    ],
    [0.11607448011636734, 0.07984541356563568, 0.1245248094201088, 0.6867417693138123],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"transitions_gauss_knn = [
    [0.0, 0.5824036598205566, 0.0, 0.4175964295864105],
    [0.4547595679759979, 0.0, 0.3184431493282318, 0.22679725289344788],
    [0.0, 0.4027276933193207, 0.0, 0.5972723364830017],
    [0.3180755078792572, 0.22123482823371887, 0.46068981289863586, 0.0],
]",constant,"transitions_gauss_knn = [
    [0.0, 0.5824036598205566, 0.0, 0.4175964295864105],
    [0.4547595679759979, 0.0, 0.3184431493282318, 0.22679725289344788],
    [0.0, 0.4027276933193207, 0.0, 0.5972723364830017],
    [0.3180755078792572, 0.22123482823371887, 0.46068981289863586, 0.0],
]",transitions_gauss_knn,"[
    [0.0, 0.5824036598205566, 0.0, 0.4175964295864105],
    [0.4547595679759979, 0.0, 0.3184431493282318, 0.22679725289344788],
    [0.0, 0.4027276933193207, 0.0, 0.5972723364830017],
    [0.3180755078792572, 0.22123482823371887, 0.46068981289863586, 0.0],
]","Constant: transitions_gauss_knn = [
    [0.0, 0.5824036598205566, 0.0, 0.4175964295864105],
    [0.4547595679759979, 0.0, 0.3184431493282318, 0.22679725289344788],
    [0.0, 0.4027276933193207, 0.0, 0.5972723364830017],
    [0.3180755078792572, 0.22123482823371887, 0.46068981289863586, 0.0],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,"transitions_gauss_noknn = [
    [0.5093212127685547, 0.3450769782066345, 0.01887294091284275, 0.12672874331474304],
    [0.34280285239219666, 0.506855845451355, 0.06345486640930176, 0.08688655495643616],
    [0.01376173086464405, 0.04657683148980141, 0.8235670328140259, 0.11609435081481934],
    [0.10631592571735382, 0.07337487488985062, 0.13356748223304749, 0.6867417693138123],
]",constant,"transitions_gauss_noknn = [
    [0.5093212127685547, 0.3450769782066345, 0.01887294091284275, 0.12672874331474304],
    [0.34280285239219666, 0.506855845451355, 0.06345486640930176, 0.08688655495643616],
    [0.01376173086464405, 0.04657683148980141, 0.8235670328140259, 0.11609435081481934],
    [0.10631592571735382, 0.07337487488985062, 0.13356748223304749, 0.6867417693138123],
]",transitions_gauss_noknn,"[
    [0.5093212127685547, 0.3450769782066345, 0.01887294091284275, 0.12672874331474304],
    [0.34280285239219666, 0.506855845451355, 0.06345486640930176, 0.08688655495643616],
    [0.01376173086464405, 0.04657683148980141, 0.8235670328140259, 0.11609435081481934],
    [0.10631592571735382, 0.07337487488985062, 0.13356748223304749, 0.6867417693138123],
]","Constant: transitions_gauss_noknn = [
    [0.5093212127685547, 0.3450769782066345, 0.01887294091284275, 0.12672874331474304],
    [0.34280285239219666, 0.506855845451355, 0.06345486640930176, 0.08688655495643616],
    [0.01376173086464405, 0.04657683148980141, 0.8235670328140259, 0.11609435081481934],
    [0.10631592571735382, 0.07337487488985062, 0.13356748223304749, 0.6867417693138123],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,Neighbors from scanpy,import,,,,Import: Neighbors from scanpy,scverse,scanpy,1.10.1,from scanpy import Neighbors,scanpy,Neighbors,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse",scipy.sparse,csr_matrix,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse",scipy.sparse,issparse,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,KNeighborsTransformer from sklearn.neighbors,local_import,,,,Import: KNeighborsTransformer from sklearn.neighbors,scverse,scanpy,1.10.1,from sklearn.neighbors import KNeighborsTransformer,sklearn.neighbors,KNeighborsTransformer,,,sklearn.neighbors,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors.py,python,anndata_v0_8_constructor_compat from scanpy.testing._helpers,local_import,,,,Import: anndata_v0_8_constructor_compat from scanpy.testing._helpers,scverse,scanpy,1.10.1,from scanpy.testing._helpers import anndata_v0_8_constructor_compat,scanpy.testing._helpers,anndata_v0_8_constructor_compat,,,scanpy.testing._helpers,,,,,,,,,,,,
,test_neighbors.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_neighbors.py,python,,,,,,Directory: scanpy\tests\test_neighbors.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_common.py,python,"mk_knn_matrix(
    n_obs: int,
    n_neighbors: int,
    *,
    style: Literal[""basic"", ""rapids"", ""sklearn""],
    duplicates: bool = False,
) -> sparse.csr_matrix",function,,,,"Function: mk_knn_matrix(
    n_obs: int,
    n_neighbors: int,
    *,
    style: Literal[""basic"", ""rapids"", ""sklearn""],
    duplicates: bool = False,
) -> sparse.csr_matrix",scverse,scanpy,1.10.1,,,,mk_knn_matrix,"(
    n_obs: int,
    n_neighbors: int,
    *,
    style: Literal[""basic"", ""rapids"", ""sklearn""],
    duplicates: bool = False,
)",,,,,,,,sparse.csr_matrix,,,,,
scverse_scanpy_1.10.1,test_neighbors_common.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_common.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_common.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_common.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_common.py,python,KNeighborsTransformer from sklearn.neighbors,local_import,,,,Import: KNeighborsTransformer from sklearn.neighbors,scverse,scanpy,1.10.1,from sklearn.neighbors import KNeighborsTransformer,sklearn.neighbors,KNeighborsTransformer,,,sklearn.neighbors,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_common.py,python,is_constant from scanpy._utils.compute.is_constant,local_import,,,,Import: is_constant from scanpy._utils.compute.is_constant,scverse,scanpy,1.10.1,from scanpy._utils.compute.is_constant import is_constant,scanpy._utils.compute.is_constant,is_constant,,,scanpy._utils.compute.is_constant,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_common.py,python,_get_sparse_matrix_from_indices_distances from scanpy.neighbors._common,local_import,,,,Import: _get_sparse_matrix_from_indices_distances from scanpy.neighbors._common,scverse,scanpy,1.10.1,"from scanpy.neighbors._common import (
    _get_sparse_matrix_from_indices_distances,
    _has_self_column,
    _ind_dist_shortcut,
)",scanpy.neighbors._common,_get_sparse_matrix_from_indices_distances,,,scanpy.neighbors._common,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_common.py,python,_has_self_column from scanpy.neighbors._common,local_import,,,,Import: _has_self_column from scanpy.neighbors._common,scverse,scanpy,1.10.1,"from scanpy.neighbors._common import (
    _get_sparse_matrix_from_indices_distances,
    _has_self_column,
    _ind_dist_shortcut,
)",scanpy.neighbors._common,_has_self_column,,,scanpy.neighbors._common,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_common.py,python,_ind_dist_shortcut from scanpy.neighbors._common,local_import,,,,Import: _ind_dist_shortcut from scanpy.neighbors._common,scverse,scanpy,1.10.1,"from scanpy.neighbors._common import (
    _get_sparse_matrix_from_indices_distances,
    _has_self_column,
    _ind_dist_shortcut,
)",scanpy.neighbors._common,_ind_dist_shortcut,,,scanpy.neighbors._common,,,,,,,,,,,,
,test_neighbors_common.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_neighbors_common.py,python,,,,,,Directory: scanpy\tests\test_neighbors_common.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_key_added.py,python,test_neighbors_key_added(adata),function,,,,Function: test_neighbors_key_added(adata),scverse,scanpy,1.10.1,,,,test_neighbors_key_added,(adata),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_key_added.py,python,n_neighbors = 5,constant,n_neighbors = 5,n_neighbors,5,Constant: n_neighbors = 5,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_key_added.py,python,"key = ""test""",constant,"key = ""test""",key,"""test""","Constant: key = ""test""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_key_added.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_key_added.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_key_added.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_key_added.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,scanpy.testing._helpers.data,pbmc68k_reduced,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_neighbors_key_added.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,scanpy.testing._pytest.marks,needs,,,scanpy.testing._pytest.marks,,,,,,,,,,,,
,test_neighbors_key_added.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_neighbors_key_added.py,python,,,,,,Directory: scanpy\tests\test_neighbors_key_added.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,test_normalize_pearson_residuals_warnings(pbmc3k_parametrized),function,,,,Function: test_normalize_pearson_residuals_warnings(pbmc3k_parametrized),scverse,scanpy,1.10.1,,,,test_normalize_pearson_residuals_warnings,(pbmc3k_parametrized),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,"_check_pearson_pca_fields(ad, n_cells, n_comps)",function,,,,"Function: _check_pearson_pca_fields(ad, n_cells, n_comps)",scverse,scanpy,1.10.1,,,,_check_pearson_pca_fields,"(ad, n_cells, n_comps)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,"X_total = np.array([[1, 0], [3, 0], [5, 6]])",constant,"X_total = np.array([[1, 0], [3, 0], [5, 6]])",X_total,"np.array([[1, 0], [3, 0], [5, 6]])","Constant: X_total = np.array([[1, 0], [3, 0], [5, 6]])",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,"X_frac = np.array([[1, 0, 1], [3, 0, 1], [5, 6, 1]])",constant,"X_frac = np.array([[1, 0, 1], [3, 0, 1], [5, 6, 1]])",X_frac,"np.array([[1, 0, 1], [3, 0, 1], [5, 6, 1]])","Constant: X_frac = np.array([[1, 0, 1], [3, 0, 1], [5, 6, 1]])",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",typing,Any,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,assert_equal from anndata.tests.helpers,local_import,,,,Import: assert_equal from anndata.tests.helpers,scverse,scanpy,1.10.1,from anndata.tests.helpers import assert_equal,anndata.tests.helpers,assert_equal,,,anndata.tests.helpers,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import csr_matrix,scipy.sparse,csr_matrix,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,issparse from sklearn.utils,local_import,,,,Import: issparse from sklearn.utils,scverse,scanpy,1.10.1,from sklearn.utils import issparse,sklearn.utils,issparse,,,sklearn.utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,axis_sum from scanpy._utils,local_import,,,,Import: axis_sum from scanpy._utils,scverse,scanpy,1.10.1,from scanpy._utils import axis_sum,scanpy._utils,axis_sum,,,scanpy._utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,_check_check_values_warnings from scanpy.testing._helpers,local_import,,,,Import: _check_check_values_warnings from scanpy.testing._helpers,scverse,scanpy,1.10.1,"from scanpy.testing._helpers import (
    _check_check_values_warnings,
    check_rep_mutation,
    check_rep_results,
)",scanpy.testing._helpers,_check_check_values_warnings,,,scanpy.testing._helpers,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,check_rep_mutation from scanpy.testing._helpers,local_import,,,,Import: check_rep_mutation from scanpy.testing._helpers,scverse,scanpy,1.10.1,"from scanpy.testing._helpers import (
    _check_check_values_warnings,
    check_rep_mutation,
    check_rep_results,
)",scanpy.testing._helpers,check_rep_mutation,,,scanpy.testing._helpers,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,check_rep_results from scanpy.testing._helpers,local_import,,,,Import: check_rep_results from scanpy.testing._helpers,scverse,scanpy,1.10.1,"from scanpy.testing._helpers import (
    _check_check_values_warnings,
    check_rep_mutation,
    check_rep_results,
)",scanpy.testing._helpers,check_rep_results,,,scanpy.testing._helpers,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_normalization.py,python,ARRAY_TYPES from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,from scanpy.testing._pytest.params import ARRAY_TYPES,scanpy.testing._pytest.params,ARRAY_TYPES,,,scanpy.testing._pytest.params,,,,,,,,,,,,
,test_normalization.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_normalization.py,python,,,,,,Directory: scanpy\tests\test_normalization.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,ExpectedSig.first_name: str,class_field,,,,Class field: ExpectedSig.first_name: str,scverse,scanpy,1.10.1,,,,,,,ExpectedSig,,,first_name: str,,,,,first_name,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,ExpectedSig.copy_default: Any,class_field,,,,Class field: ExpectedSig.copy_default: Any,scverse,scanpy,1.10.1,,,,,,,ExpectedSig,,,copy_default: Any,,,,,copy_default,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,ExpectedSig.return_ann: str | None,class_field,,,,Class field: ExpectedSig.return_ann: str | None,scverse,scanpy,1.10.1,,,,,,,ExpectedSig,,,return_ann: str | None,,,,,return_ann,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,ExpectedSig(TypedDict),class,,,,Class: ExpectedSig(TypedDict),scverse,scanpy,1.10.1,,,,,,,ExpectedSig,,,,,,,,,(TypedDict),,
scverse_scanpy_1.10.1,test_package_structure.py,python,param_is_pos(p: Parameter) -> bool,function,,,,Function: param_is_pos(p: Parameter) -> bool,scverse,scanpy,1.10.1,,,,param_is_pos,(p: Parameter),,,,,,,,bool,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,is_deprecated(f: FunctionType) -> bool,function,,,,Function: is_deprecated(f: FunctionType) -> bool,scverse,scanpy,1.10.1,,,,is_deprecated,(f: FunctionType),,,,,,,,bool,"# TODO: use deprecated decorator instead",,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,is_deprecated(f: FunctionType) -> bool,function,,,,Function: is_deprecated(f: FunctionType) -> bool,scverse,scanpy,1.10.1,,,,is_deprecated,(f: FunctionType),,,,,,,,bool,"# https://github.com/scverse/scanpy/issues/2505",,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,getsourcefile(obj),function,,,,Function: getsourcefile(obj),scverse,scanpy,1.10.1,,,,getsourcefile,(obj),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,getsourcelines(obj),function,,,,Function: getsourcelines(obj),scverse,scanpy,1.10.1,,,,getsourcelines,(obj),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,mod_dir = Path(scanpy.__file__).parent,constant,mod_dir = Path(scanpy.__file__).parent,mod_dir,Path(scanpy.__file__).parent,Constant: mod_dir = Path(scanpy.__file__).parent,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,proj_dir = mod_dir.parent,constant,proj_dir = mod_dir.parent,proj_dir,mod_dir.parent,Constant: proj_dir = mod_dir.parent,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,"api_module_names = [
    ""sc"",
    ""sc.pp"",
    ""sc.tl"",
    ""sc.pl"",
    ""sc.experimental.pp"",
    ""sc.external.pp"",
    ""sc.external.tl"",
    ""sc.external.pl"",
    ""sc.external.exporting"",
    ""sc.get"",
    ""sc.logging"",
    # ""sc.neighbors"",  # Not documented
    ""sc.datasets"",
    ""sc.queries"",
    ""sc.metrics"",
]",constant,"api_module_names = [
    ""sc"",
    ""sc.pp"",
    ""sc.tl"",
    ""sc.pl"",
    ""sc.experimental.pp"",
    ""sc.external.pp"",
    ""sc.external.tl"",
    ""sc.external.pl"",
    ""sc.external.exporting"",
    ""sc.get"",
    ""sc.logging"",
    # ""sc.neighbors"",  # Not documented
    ""sc.datasets"",
    ""sc.queries"",
    ""sc.metrics"",
]",api_module_names,"[
    ""sc"",
    ""sc.pp"",
    ""sc.tl"",
    ""sc.pl"",
    ""sc.experimental.pp"",
    ""sc.external.pp"",
    ""sc.external.tl"",
    ""sc.external.pl"",
    ""sc.external.exporting"",
    ""sc.get"",
    ""sc.logging"",
    # ""sc.neighbors"",  # Not documented
    ""sc.datasets"",
    ""sc.queries"",
    ""sc.metrics"",
]","Constant: api_module_names = [
    ""sc"",
    ""sc.pp"",
    ""sc.tl"",
    ""sc.pl"",
    ""sc.experimental.pp"",
    ""sc.external.pp"",
    ""sc.external.tl"",
    ""sc.external.pl"",
    ""sc.external.exporting"",
    ""sc.get"",
    ""sc.logging"",
    # ""sc.neighbors"",  # Not documented
    ""sc.datasets"",
    ""sc.queries"",
    ""sc.metrics"",
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,"api_modules = {
    mod_name: _import_name(f""scanpy{mod_name.removeprefix('sc')}"")
    for mod_name in api_module_names
}",constant,"api_modules = {
    mod_name: _import_name(f""scanpy{mod_name.removeprefix('sc')}"")
    for mod_name in api_module_names
}",api_modules,"{
    mod_name: _import_name(f""scanpy{mod_name.removeprefix('sc')}"")
    for mod_name in api_module_names
}","Constant: api_modules = {
    mod_name: _import_name(f""scanpy{mod_name.removeprefix('sc')}"")
    for mod_name in api_module_names
}",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,"api_functions = [
    pytest.param(func, f""{mod_name}.{name}"", id=f""{mod_name}.{name}"")
    for mod_name, mod in api_modules.items()
    for name in sorted(mod.__all__)
    if callable(func := getattr(mod, name)) and func.__module__.startswith(""scanpy."")
]",constant,"api_functions = [
    pytest.param(func, f""{mod_name}.{name}"", id=f""{mod_name}.{name}"")
    for mod_name, mod in api_modules.items()
    for name in sorted(mod.__all__)
    if callable(func := getattr(mod, name)) and func.__module__.startswith(""scanpy."")
]",api_functions,"[
    pytest.param(func, f""{mod_name}.{name}"", id=f""{mod_name}.{name}"")
    for mod_name, mod in api_modules.items()
    for name in sorted(mod.__all__)
    if callable(func := getattr(mod, name)) and func.__module__.startswith(""scanpy."")
]","Constant: api_functions = [
    pytest.param(func, f""{mod_name}.{name}"", id=f""{mod_name}.{name}"")
    for mod_name, mod in api_modules.items()
    for name in sorted(mod.__all__)
    if callable(func := getattr(mod, name)) and func.__module__.startswith(""scanpy."")
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,"copy_sigs: defaultdict[str, ExpectedSig | None] = defaultdict(
    lambda: ExpectedSig(first_name=""adata"", copy_default=False, return_ann=None)
)",constant,"copy_sigs: defaultdict[str, ExpectedSig | None] = defaultdict(
    lambda: ExpectedSig(first_name=""adata"", copy_default=False, return_ann=None)
)",copy_sigs,"defaultdict(
    lambda: ExpectedSig(first_name=""adata"", copy_default=False, return_ann=None)
)","Constant: copy_sigs: defaultdict[str, ExpectedSig | None] = defaultdict(
    lambda: ExpectedSig(first_name=""adata"", copy_default=False, return_ann=None)
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,os,import,,,,Import: os,scverse,scanpy,1.10.1,import os,,os,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,defaultdict from collections,import,,,,Import: defaultdict from collections,scverse,scanpy,1.10.1,from collections import defaultdict,collections,defaultdict,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,Parameter from inspect,import,,,,Import: Parameter from inspect,scverse,scanpy,1.10.1,"from inspect import Parameter, signature",inspect,Parameter,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,signature from inspect,import,,,,Import: signature from inspect,scverse,scanpy,1.10.1,"from inspect import Parameter, signature",inspect,signature,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, TypedDict",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, TypedDict",typing,Any,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,TypedDict from typing,import,,,,Import: TypedDict from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, TypedDict",typing,TypedDict,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,scanpy.cli,import,,,,Import: scanpy.cli,scverse,scanpy,1.10.1,import scanpy.cli,,scanpy.cli,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,_import_name from scanpy._utils,local_import,,,,Import: _import_name from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import _import_name, descend_classes_and_funcs",scanpy._utils,_import_name,,,scanpy._utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_package_structure.py,python,descend_classes_and_funcs from scanpy._utils,local_import,,,,Import: descend_classes_and_funcs from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import _import_name, descend_classes_and_funcs",scanpy._utils,descend_classes_and_funcs,,,scanpy._utils,,,,,,,,,,,,
,test_package_structure.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_package_structure.py,python,,,,,,Directory: scanpy\tests\test_package_structure.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,"test_paga_pie(image_comparer, pbmc)",function,,,,"Function: test_paga_pie(image_comparer, pbmc)",scverse,scanpy,1.10.1,,,,test_paga_pie,"(image_comparer, pbmc)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,"test_paga_path(image_comparer, pbmc)",function,,,,"Function: test_paga_path(image_comparer, pbmc)",scverse,scanpy,1.10.1,,,,test_paga_path,"(image_comparer, pbmc)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,test_paga_compare(image_comparer),function,,,,Function: test_paga_compare(image_comparer),scverse,scanpy,1.10.1,,,,test_paga_compare,(image_comparer),,,,,,,,,"# Tests that https://github.com/scverse/scanpy/issues/1887 is fixed",,,,
scverse_scanpy_1.10.1,test_paga.py,python,test_paga_positions_reproducible(),function,,,,Function: test_paga_positions_reproducible(),scverse,scanpy,1.10.1,,,,test_paga_positions_reproducible,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,HERE: Path = Path(__file__).parent,constant,HERE: Path = Path(__file__).parent,HERE,Path(__file__).parent,Constant: HERE: Path = Path(__file__).parent,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,"ROOT = HERE / ""_images""",constant,"ROOT = HERE / ""_images""",ROOT,"HERE / ""_images""","Constant: ROOT = HERE / ""_images""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,pytestmark = [needs.igraph],constant,pytestmark = [needs.igraph],pytestmark,[needs.igraph],Constant: pytestmark = [needs.igraph],scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,functools,partial,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,cm from matplotlib,import,,,,Import: cm from matplotlib,scverse,scanpy,1.10.1,from matplotlib import cm,matplotlib,cm,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,pbmc3k_processed from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k_processed from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,"from scanpy.testing._helpers.data import pbmc3k_processed, pbmc68k_reduced",scanpy.testing._helpers.data,pbmc3k_processed,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,"from scanpy.testing._helpers.data import pbmc3k_processed, pbmc68k_reduced",scanpy.testing._helpers.data,pbmc68k_reduced,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,scanpy.testing._pytest.marks,needs,,,scanpy.testing._pytest.marks,,,,,,,,,,,,
,test_paga.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_paga.py,python,,,,,,Directory: scanpy\tests\test_paga.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,"test_pca_warnings(array_type, zero_center, pca_params)",function,,,,"Function: test_pca_warnings(array_type, zero_center, pca_params)",scverse,scanpy,1.10.1,,,,test_pca_warnings,"(array_type, zero_center, pca_params)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,test_pca_warnings_sparse(),function,,,,Function: test_pca_warnings_sparse(),scverse,scanpy,1.10.1,,,,test_pca_warnings_sparse,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,test_pca_transform(array_type),function,,,,Function: test_pca_transform(array_type),scverse,scanpy,1.10.1,,,,test_pca_transform,(array_type),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,test_pca_shapes(),function,,,,Function: test_pca_shapes(),scverse,scanpy,1.10.1,,,,test_pca_shapes,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,test_pca_sparse(),function,,,,Function: test_pca_sparse(),scverse,scanpy,1.10.1,,,,test_pca_sparse,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,test_pca_reproducible(array_type),function,,,,Function: test_pca_reproducible(array_type),scverse,scanpy,1.10.1,,,,test_pca_reproducible,(array_type),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,test_pca_chunked(),function,,,,Function: test_pca_chunked(),scverse,scanpy,1.10.1,,,,test_pca_chunked,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,test_pca_n_pcs(),function,,,,Function: test_pca_n_pcs(),scverse,scanpy,1.10.1,,,,test_pca_n_pcs,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,test_mask_length_error(),function,,,,Function: test_mask_length_error(),scverse,scanpy,1.10.1,,,,test_mask_length_error,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,"test_mask_var_argument_equivalence(float_dtype, array_type)",function,,,,"Function: test_mask_var_argument_equivalence(float_dtype, array_type)",scverse,scanpy,1.10.1,,,,test_mask_var_argument_equivalence,"(float_dtype, array_type)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,"test_mask(array_type, request)",function,,,,"Function: test_mask(array_type, request)",scverse,scanpy,1.10.1,,,,test_mask,"(array_type, request)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,test_mask_order_warning(request),function,,,,Function: test_mask_order_warning(request),scverse,scanpy,1.10.1,,,,test_mask_order_warning,(request),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,"test_mask_defaults(array_type, float_dtype)",function,,,,"Function: test_mask_defaults(array_type, float_dtype)",scverse,scanpy,1.10.1,,,,test_mask_defaults,"(array_type, float_dtype)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,test_pca_layer(),function,,,,Function: test_pca_layer(),scverse,scanpy,1.10.1,,,,test_pca_layer,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,"A_list = np.array(
    [
        [0, 0, 7, 0, 0],
        [8, 5, 0, 2, 0],
        [6, 0, 0, 2, 5],
        [0, 0, 0, 1, 0],
        [8, 8, 2, 1, 0],
        [0, 0, 0, 4, 5],
    ]
)",constant,"A_list = np.array(
    [
        [0, 0, 7, 0, 0],
        [8, 5, 0, 2, 0],
        [6, 0, 0, 2, 5],
        [0, 0, 0, 1, 0],
        [8, 8, 2, 1, 0],
        [0, 0, 0, 4, 5],
    ]
)",A_list,"np.array(
    [
        [0, 0, 7, 0, 0],
        [8, 5, 0, 2, 0],
        [6, 0, 0, 2, 5],
        [0, 0, 0, 1, 0],
        [8, 8, 2, 1, 0],
        [0, 0, 0, 4, 5],
    ]
)","Constant: A_list = np.array(
    [
        [0, 0, 7, 0, 0],
        [8, 5, 0, 2, 0],
        [6, 0, 0, 2, 5],
        [0, 0, 0, 1, 0],
        [8, 8, 2, 1, 0],
        [0, 0, 0, 4, 5],
    ]
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,"A_pca = np.array(
    [
        [-4.4783009, 5.55508466, 1.73111572, -0.06029139, 0.17292555],
        [5.4855141, -0.42651191, -0.74776055, -0.74532146, 0.74633582],
        [0.01161428, -4.0156662, 2.37252748, -1.33122372, -0.29044446],
        [-3.61934397, 0.48525412, -2.96861931, -1.16312545, -0.33230607],
        [7.14050048, 1.86330409, -0.05786325, 1.25045782, -0.50213107],
        [-4.53998399, -3.46146476, -0.32940009, 2.04950419, 0.20562023],
    ]
)",constant,"A_pca = np.array(
    [
        [-4.4783009, 5.55508466, 1.73111572, -0.06029139, 0.17292555],
        [5.4855141, -0.42651191, -0.74776055, -0.74532146, 0.74633582],
        [0.01161428, -4.0156662, 2.37252748, -1.33122372, -0.29044446],
        [-3.61934397, 0.48525412, -2.96861931, -1.16312545, -0.33230607],
        [7.14050048, 1.86330409, -0.05786325, 1.25045782, -0.50213107],
        [-4.53998399, -3.46146476, -0.32940009, 2.04950419, 0.20562023],
    ]
)",A_pca,"np.array(
    [
        [-4.4783009, 5.55508466, 1.73111572, -0.06029139, 0.17292555],
        [5.4855141, -0.42651191, -0.74776055, -0.74532146, 0.74633582],
        [0.01161428, -4.0156662, 2.37252748, -1.33122372, -0.29044446],
        [-3.61934397, 0.48525412, -2.96861931, -1.16312545, -0.33230607],
        [7.14050048, 1.86330409, -0.05786325, 1.25045782, -0.50213107],
        [-4.53998399, -3.46146476, -0.32940009, 2.04950419, 0.20562023],
    ]
)","Constant: A_pca = np.array(
    [
        [-4.4783009, 5.55508466, 1.73111572, -0.06029139, 0.17292555],
        [5.4855141, -0.42651191, -0.74776055, -0.74532146, 0.74633582],
        [0.01161428, -4.0156662, 2.37252748, -1.33122372, -0.29044446],
        [-3.61934397, 0.48525412, -2.96861931, -1.16312545, -0.33230607],
        [7.14050048, 1.86330409, -0.05786325, 1.25045782, -0.50213107],
        [-4.53998399, -3.46146476, -0.32940009, 2.04950419, 0.20562023],
    ]
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,"A_svd = np.array(
    [
        [-0.77034038, -2.00750922, 6.64603489, -0.39669256, -0.22212097],
        [-9.47135856, -0.6326006, -1.33787112, -0.24894361, -1.02044665],
        [-5.90007339, 4.99658727, 0.70712592, -2.15188849, 0.30430008],
        [-0.19132409, 0.42172251, 0.11169531, 0.50977966, -0.71637566],
        [-11.1286238, -2.73045559, 0.08040596, 1.06850585, 0.74173764],
        [-1.50180389, 5.56886849, 1.64034442, 2.24476032, -0.05109001],
    ]
)",constant,"A_svd = np.array(
    [
        [-0.77034038, -2.00750922, 6.64603489, -0.39669256, -0.22212097],
        [-9.47135856, -0.6326006, -1.33787112, -0.24894361, -1.02044665],
        [-5.90007339, 4.99658727, 0.70712592, -2.15188849, 0.30430008],
        [-0.19132409, 0.42172251, 0.11169531, 0.50977966, -0.71637566],
        [-11.1286238, -2.73045559, 0.08040596, 1.06850585, 0.74173764],
        [-1.50180389, 5.56886849, 1.64034442, 2.24476032, -0.05109001],
    ]
)",A_svd,"np.array(
    [
        [-0.77034038, -2.00750922, 6.64603489, -0.39669256, -0.22212097],
        [-9.47135856, -0.6326006, -1.33787112, -0.24894361, -1.02044665],
        [-5.90007339, 4.99658727, 0.70712592, -2.15188849, 0.30430008],
        [-0.19132409, 0.42172251, 0.11169531, 0.50977966, -0.71637566],
        [-11.1286238, -2.73045559, 0.08040596, 1.06850585, 0.74173764],
        [-1.50180389, 5.56886849, 1.64034442, 2.24476032, -0.05109001],
    ]
)","Constant: A_svd = np.array(
    [
        [-0.77034038, -2.00750922, 6.64603489, -0.39669256, -0.22212097],
        [-9.47135856, -0.6326006, -1.33787112, -0.24894361, -1.02044665],
        [-5.90007339, 4.99658727, 0.70712592, -2.15188849, 0.30430008],
        [-0.19132409, 0.42172251, 0.11169531, 0.50977966, -0.71637566],
        [-11.1286238, -2.73045559, 0.08040596, 1.06850585, 0.74173764],
        [-1.50180389, 5.56886849, 1.64034442, 2.24476032, -0.05109001],
    ]
)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,from typing import Literal,typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,anndata,import,,,,Import: anndata,scverse,scanpy,1.10.1,import anndata as ad,,anndata,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,asarray from anndata.tests.helpers,local_import,,,,Import: asarray from anndata.tests.helpers,scverse,scanpy,1.10.1,"from anndata.tests.helpers import (
    asarray,
    assert_equal,
)",anndata.tests.helpers,asarray,,,anndata.tests.helpers,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,assert_equal from anndata.tests.helpers,local_import,,,,Import: assert_equal from anndata.tests.helpers,scverse,scanpy,1.10.1,"from anndata.tests.helpers import (
    asarray,
    assert_equal,
)",anndata.tests.helpers,assert_equal,,,anndata.tests.helpers,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,Version from packaging.version,local_import,,,,Import: Version from packaging.version,scverse,scanpy,1.10.1,from packaging.version import Version,packaging.version,Version,,,packaging.version,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,issparse from sklearn.utils,local_import,,,,Import: issparse from sklearn.utils,scverse,scanpy,1.10.1,from sklearn.utils import issparse,sklearn.utils,issparse,,,sklearn.utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,as_dense_dask_array from scanpy.testing._helpers,local_import,,,,Import: as_dense_dask_array from scanpy.testing._helpers,scverse,scanpy,1.10.1,"from scanpy.testing._helpers import as_dense_dask_array, as_sparse_dask_array",scanpy.testing._helpers,as_dense_dask_array,,,scanpy.testing._helpers,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,as_sparse_dask_array from scanpy.testing._helpers,local_import,,,,Import: as_sparse_dask_array from scanpy.testing._helpers,scverse,scanpy,1.10.1,"from scanpy.testing._helpers import as_dense_dask_array, as_sparse_dask_array",scanpy.testing._helpers,as_sparse_dask_array,,,scanpy.testing._helpers,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,pbmc3k_normalized from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k_normalized from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc3k_normalized,scanpy.testing._helpers.data,pbmc3k_normalized,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,scanpy.testing._pytest.marks,needs,,,scanpy.testing._pytest.marks,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,ARRAY_TYPES from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,"from scanpy.testing._pytest.params import (
    ARRAY_TYPES,
    ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED,
    param_with,
)",scanpy.testing._pytest.params,ARRAY_TYPES,,,scanpy.testing._pytest.params,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,"from scanpy.testing._pytest.params import (
    ARRAY_TYPES,
    ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED,
    param_with,
)",scanpy.testing._pytest.params,ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED,,,scanpy.testing._pytest.params,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pca.py,python,param_with from scanpy.testing._pytest.params,local_import,,,,Import: param_with from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,"from scanpy.testing._pytest.params import (
    ARRAY_TYPES,
    ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED,
    param_with,
)",scanpy.testing._pytest.params,param_with,,,scanpy.testing._pytest.params,,,,,,,,,,,,
,test_pca.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_pca.py,python,,,,,,Directory: scanpy\tests\test_pca.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_performance.py,python,"descend(profimp_data, modules, path)",function,,,,"Function: descend(profimp_data, modules, path)",scverse,scanpy,1.10.1,,,,descend,"(profimp_data, modules, path)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_performance.py,python,get_import_paths(modules),function,,,,Function: get_import_paths(modules),scverse,scanpy,1.10.1,,,,get_import_paths,(modules),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_performance.py,python,test_deferred_imports(imported_modules),function,,,,Function: test_deferred_imports(imported_modules),scverse,scanpy,1.10.1,,,,test_deferred_imports,(imported_modules),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_performance.py,python,json,import,,,,Import: json,scverse,scanpy,1.10.1,import json,,json,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_performance.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,,sys,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_performance.py,python,run from subprocess,import,,,,Import: run from subprocess,scverse,scanpy,1.10.1,from subprocess import run,subprocess,run,,,,,,,,,,,,,,,
,test_performance.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_performance.py,python,,,,,,Directory: scanpy\tests\test_performance.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_dotplot_obj(image_comparer),function,,,,Function: test_dotplot_obj(image_comparer),scverse,scanpy,1.10.1,,,,test_dotplot_obj,(image_comparer),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_matrixplot_obj(image_comparer),function,,,,Function: test_matrixplot_obj(image_comparer),scverse,scanpy,1.10.1,,,,test_matrixplot_obj,(image_comparer),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,"test_stacked_violin_obj(image_comparer, plt)",function,,,,"Function: test_stacked_violin_obj(image_comparer, plt)",scverse,scanpy,1.10.1,,,,test_stacked_violin_obj,"(image_comparer, plt)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_tracksplot(image_comparer),function,,,,Function: test_tracksplot(image_comparer),scverse,scanpy,1.10.1,,,,test_tracksplot,(image_comparer),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_multiple_plots(image_comparer),function,,,,Function: test_multiple_plots(image_comparer),scverse,scanpy,1.10.1,,,,test_multiple_plots,(image_comparer),,,,,,,,,"# only testing stacked_violin, matrixplot and dotplot",,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_violin(image_comparer),function,,,,Function: test_violin(image_comparer),scverse,scanpy,1.10.1,,,,test_violin,(image_comparer),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_violin_without_raw(tmp_path),function,,,,Function: test_violin_without_raw(tmp_path),scverse,scanpy,1.10.1,,,,test_violin_without_raw,(tmp_path),,,,,,,,,"# https://github.com/scverse/scanpy/issues/1546",,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_dendrogram(image_comparer),function,,,,Function: test_dendrogram(image_comparer),scverse,scanpy,1.10.1,,,,test_dendrogram,(image_comparer),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_correlation(image_comparer),function,,,,Function: test_correlation(image_comparer),scverse,scanpy,1.10.1,,,,test_correlation,(image_comparer),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_scatter_embedding_groups_and_size(image_comparer),function,,,,Function: test_scatter_embedding_groups_and_size(image_comparer),scverse,scanpy,1.10.1,,,,test_scatter_embedding_groups_and_size,(image_comparer),,,,,,,,,"# test that the 'groups' parameter sorts",,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_scatter_embedding_groups_and_size(image_comparer),function,,,,Function: test_scatter_embedding_groups_and_size(image_comparer),scverse,scanpy,1.10.1,,,,test_scatter_embedding_groups_and_size,(image_comparer),,,,,,,,,"# cells, such that the cells belonging to the groups are",,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_scatter_embedding_groups_and_size(image_comparer),function,,,,Function: test_scatter_embedding_groups_and_size(image_comparer),scverse,scanpy,1.10.1,,,,test_scatter_embedding_groups_and_size,(image_comparer),,,,,,,,,"# plotted on top. This new ordering requires that the size",,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_scatter_embedding_groups_and_size(image_comparer),function,,,,Function: test_scatter_embedding_groups_and_size(image_comparer),scverse,scanpy,1.10.1,,,,test_scatter_embedding_groups_and_size,(image_comparer),,,,,,,,,"# vector is also ordered (if given).",,,,
scverse_scanpy_1.10.1,test_plotting.py,python,"test_scatter_embedding_add_outline_vmin_vmax_norm(image_comparer, check_same_image)",function,,,,"Function: test_scatter_embedding_add_outline_vmin_vmax_norm(image_comparer, check_same_image)",scverse,scanpy,1.10.1,,,,test_scatter_embedding_add_outline_vmin_vmax_norm,"(image_comparer, check_same_image)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,"test_scatter_embedding_add_outline_vmin_vmax_norm_ref(tmp_path, check_same_image)",function,,,,"Function: test_scatter_embedding_add_outline_vmin_vmax_norm_ref(tmp_path, check_same_image)",scverse,scanpy,1.10.1,,,,test_scatter_embedding_add_outline_vmin_vmax_norm_ref,"(tmp_path, check_same_image)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_timeseries(),function,,,,Function: test_timeseries(),scverse,scanpy,1.10.1,,,,test_timeseries,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_scatter_raw(tmp_path),function,,,,Function: test_scatter_raw(tmp_path),scverse,scanpy,1.10.1,,,,test_scatter_raw,(tmp_path),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_binary_scatter(image_comparer),function,,,,Function: test_binary_scatter(image_comparer),scverse,scanpy,1.10.1,,,,test_binary_scatter,(image_comparer),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_scatter_specify_layer_and_raw(),function,,,,Function: test_scatter_specify_layer_and_raw(),scverse,scanpy,1.10.1,,,,test_scatter_specify_layer_and_raw,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_scatter_no_basis_per_var(image_comparer),function,,,,Function: test_scatter_no_basis_per_var(image_comparer),scverse,scanpy,1.10.1,,,,test_scatter_no_basis_per_var,(image_comparer),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,"test_scatter_no_basis_raw(check_same_image, pbmc_filtered, tmpdir)",function,,,,"Function: test_scatter_no_basis_raw(check_same_image, pbmc_filtered, tmpdir)",scverse,scanpy,1.10.1,,,,test_scatter_no_basis_raw,"(check_same_image, pbmc_filtered, tmpdir)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_rankings(image_comparer),function,,,,Function: test_rankings(image_comparer),scverse,scanpy,1.10.1,,,,test_rankings,(image_comparer),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_scatter_rep(tmpdir),function,,,,Function: test_scatter_rep(tmpdir),scverse,scanpy,1.10.1,,,,test_scatter_rep,(tmpdir),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_no_copy(),function,,,,Function: test_no_copy(),scverse,scanpy,1.10.1,,,,test_no_copy,(),,,,,,,,,"# https://github.com/scverse/scanpy/issues/1000",,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_no_copy(),function,,,,Function: test_no_copy(),scverse,scanpy,1.10.1,,,,test_no_copy,(),,,,,,,,,"# Tests that plotting functions don't make a copy from a view unless they",,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_no_copy(),function,,,,Function: test_no_copy(),scverse,scanpy,1.10.1,,,,test_no_copy,(),,,,,,,,,"# actually have to",,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_groupby_index(image_comparer),function,,,,Function: test_groupby_index(image_comparer),scverse,scanpy,1.10.1,,,,test_groupby_index,(image_comparer),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_groupby_list(image_comparer),function,,,,Function: test_groupby_list(image_comparer),scverse,scanpy,1.10.1,,,,test_groupby_list,(image_comparer),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_color_cycler(caplog),function,,,,Function: test_color_cycler(caplog),scverse,scanpy,1.10.1,,,,test_color_cycler,(caplog),,,,,,,,,"# https://github.com/scverse/scanpy/issues/1885",,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_repeated_colors_w_missing_value(),function,,,,Function: test_repeated_colors_w_missing_value(),scverse,scanpy,1.10.1,,,,test_repeated_colors_w_missing_value,(),,,,,,,,,"# https://github.com/scverse/scanpy/issues/2133",,,,
scverse_scanpy_1.10.1,test_plotting.py,python,"test_umap_mask_equal(tmp_path, check_same_image)",function,,,,"Function: test_umap_mask_equal(tmp_path, check_same_image)",scverse,scanpy,1.10.1,,,,test_umap_mask_equal,"(tmp_path, check_same_image)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_umap_mask_mult_plots(),function,,,,Function: test_umap_mask_mult_plots(),scverse,scanpy,1.10.1,,,,test_umap_mask_mult_plots,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,"test_string_mask(tmp_path, check_same_image)",function,,,,"Function: test_string_mask(tmp_path, check_same_image)",scverse,scanpy,1.10.1,,,,test_string_mask,"(tmp_path, check_same_image)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,test_violin_scale_warning(monkeypatch),function,,,,Function: test_violin_scale_warning(monkeypatch),scverse,scanpy,1.10.1,,,,test_violin_scale_warning,(monkeypatch),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,HERE: Path = Path(__file__).parent,constant,HERE: Path = Path(__file__).parent,HERE,Path(__file__).parent,Constant: HERE: Path = Path(__file__).parent,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,"ROOT = HERE / ""_images""",constant,"ROOT = HERE / ""_images""",ROOT,"HERE / ""_images""","Constant: ROOT = HERE / ""_images""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,functools,partial,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,chain from itertools,import,,,,Import: chain from itertools,scverse,scanpy,1.10.1,"from itertools import chain, combinations, repeat",itertools,chain,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,combinations from itertools,import,,,,Import: combinations from itertools,scverse,scanpy,1.10.1,"from itertools import chain, combinations, repeat",itertools,combinations,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,repeat from itertools,import,,,,Import: repeat from itertools,scverse,scanpy,1.10.1,"from itertools import chain, combinations, repeat",itertools,repeat,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,matplotlib,import,,,,Import: matplotlib,scverse,scanpy,1.10.1,import matplotlib as mpl,,matplotlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,matplotlib.pyplot,import,,,,Import: matplotlib.pyplot,scverse,scanpy,1.10.1,import matplotlib.pyplot as plt,,matplotlib.pyplot,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,seaborn,import,,,,Import: seaborn,scverse,scanpy,1.10.1,import seaborn as sns,,seaborn,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,packaging,version,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,compare_images from matplotlib.testing.compare,local_import,,,,Import: compare_images from matplotlib.testing.compare,scverse,scanpy,1.10.1,from matplotlib.testing.compare import compare_images,matplotlib.testing.compare,compare_images,,,matplotlib.testing.compare,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,pkg_version from scanpy._compat,local_import,,,,Import: pkg_version from scanpy._compat,scverse,scanpy,1.10.1,from scanpy._compat import pkg_version,scanpy._compat,pkg_version,,,scanpy._compat,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,krumsiek11 from scanpy.testing._helpers.data,local_import,,,,Import: krumsiek11 from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,"from scanpy.testing._helpers.data import (
    krumsiek11,
    pbmc3k,
    pbmc3k_processed,
    pbmc68k_reduced,
)",scanpy.testing._helpers.data,krumsiek11,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,pbmc3k from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,"from scanpy.testing._helpers.data import (
    krumsiek11,
    pbmc3k,
    pbmc3k_processed,
    pbmc68k_reduced,
)",scanpy.testing._helpers.data,pbmc3k,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,pbmc3k_processed from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k_processed from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,"from scanpy.testing._helpers.data import (
    krumsiek11,
    pbmc3k,
    pbmc3k_processed,
    pbmc68k_reduced,
)",scanpy.testing._helpers.data,pbmc3k_processed,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,"from scanpy.testing._helpers.data import (
    krumsiek11,
    pbmc3k,
    pbmc3k_processed,
    pbmc68k_reduced,
)",scanpy.testing._helpers.data,pbmc68k_reduced,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,scanpy.testing._pytest.marks,needs,,,scanpy.testing._pytest.marks,,,,,,,,,,,,
,test_plotting.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_plotting.py,python,,,,,,Directory: scanpy\tests\test_plotting.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting_utils.py,python,"viridis = cast(ListedColormap, colormaps[""viridis""])",constant,"viridis = cast(ListedColormap, colormaps[""viridis""])",viridis,"cast(ListedColormap, colormaps[""viridis""])","Constant: viridis = cast(ListedColormap, colormaps[""viridis""])",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting_utils.py,python,cast from typing,import,,,,Import: cast from typing,scverse,scanpy,1.10.1,from typing import cast,typing,cast,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting_utils.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting_utils.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting_utils.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting_utils.py,python,colormaps from matplotlib,import,,,,Import: colormaps from matplotlib,scverse,scanpy,1.10.1,from matplotlib import colormaps,matplotlib,colormaps,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting_utils.py,python,ListedColormap from matplotlib.colors,local_import,,,,Import: ListedColormap from matplotlib.colors,scverse,scanpy,1.10.1,from matplotlib.colors import ListedColormap,matplotlib.colors,ListedColormap,,,matplotlib.colors,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_plotting_utils.py,python,_validate_palette from scanpy.plotting._utils,local_import,,,,Import: _validate_palette from scanpy.plotting._utils,scverse,scanpy,1.10.1,from scanpy.plotting._utils import _validate_palette,scanpy.plotting._utils,_validate_palette,,,scanpy.plotting._utils,,,,,,,,,,,,
,test_plotting_utils.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_plotting_utils.py,python,,,,,,Directory: scanpy\tests\test_plotting_utils.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_log1p(tmp_path),function,,,,Function: test_log1p(tmp_path),scverse,scanpy,1.10.1,,,,test_log1p,(tmp_path),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_log1p_deprecated_arg(),function,,,,Function: test_log1p_deprecated_arg(),scverse,scanpy,1.10.1,,,,test_log1p_deprecated_arg,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,"test_log1p_rep(count_matrix_format, base, dtype)",function,,,,"Function: test_log1p_rep(count_matrix_format, base, dtype)",scverse,scanpy,1.10.1,,,,test_log1p_rep,"(count_matrix_format, base, dtype)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_mean_var_sparse(),function,,,,Function: test_mean_var_sparse(),scverse,scanpy,1.10.1,,,,test_mean_var_sparse,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_normalize_per_cell(),function,,,,Function: test_normalize_per_cell(),scverse,scanpy,1.10.1,,,,test_normalize_per_cell,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_subsample(),function,,,,Function: test_subsample(),scverse,scanpy,1.10.1,,,,test_subsample,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_subsample_copy(),function,,,,Function: test_subsample_copy(),scverse,scanpy,1.10.1,,,,test_subsample_copy,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_subsample_copy_backed(tmp_path),function,,,,Function: test_subsample_copy_backed(tmp_path),scverse,scanpy,1.10.1,,,,test_subsample_copy_backed,(tmp_path),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_scale(),function,,,,Function: test_scale(),scverse,scanpy,1.10.1,,,,test_scale,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,"test_scale_rep(count_matrix_format, zero_center)",function,,,,"Function: test_scale_rep(count_matrix_format, zero_center)",scverse,scanpy,1.10.1,,,,test_scale_rep,"(count_matrix_format, zero_center)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,"test_scale_array(count_matrix_format, zero_center)",function,,,,"Function: test_scale_array(count_matrix_format, zero_center)",scverse,scanpy,1.10.1,,,,test_scale_array,"(count_matrix_format, zero_center)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_recipe_plotting(),function,,,,Function: test_recipe_plotting(),scverse,scanpy,1.10.1,,,,test_recipe_plotting,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_regress_out_ordinal(),function,,,,Function: test_regress_out_ordinal(),scverse,scanpy,1.10.1,,,,test_regress_out_ordinal,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_regress_out_layer(),function,,,,Function: test_regress_out_layer(),scverse,scanpy,1.10.1,,,,test_regress_out_layer,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_regress_out_view(),function,,,,Function: test_regress_out_view(),scverse,scanpy,1.10.1,,,,test_regress_out_view,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_regress_out_categorical(),function,,,,Function: test_regress_out_categorical(),scverse,scanpy,1.10.1,,,,test_regress_out_categorical,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_regress_out_constants(),function,,,,Function: test_regress_out_constants(),scverse,scanpy,1.10.1,,,,test_regress_out_constants,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_regress_out_constants_equivalent(),function,,,,Function: test_regress_out_constants_equivalent(),scverse,scanpy,1.10.1,,,,test_regress_out_constants_equivalent,(),,,,,,,,,"# Tests that constant values don't change results",,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_regress_out_constants_equivalent(),function,,,,Function: test_regress_out_constants_equivalent(),scverse,scanpy,1.10.1,,,,test_regress_out_constants_equivalent,(),,,,,,,,,"# (since support for constant values is implemented by us)",,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,"test_downsample_counts_per_cell(count_matrix_format, replace, dtype)",function,,,,"Function: test_downsample_counts_per_cell(count_matrix_format, replace, dtype)",scverse,scanpy,1.10.1,,,,test_downsample_counts_per_cell,"(count_matrix_format, replace, dtype)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,"test_downsample_counts_per_cell_multiple_targets(
    count_matrix_format, replace, dtype
)",function,,,,"Function: test_downsample_counts_per_cell_multiple_targets(
    count_matrix_format, replace, dtype
)",scverse,scanpy,1.10.1,,,,test_downsample_counts_per_cell_multiple_targets,"(
    count_matrix_format, replace, dtype
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,"test_downsample_total_counts(count_matrix_format, replace, dtype)",function,,,,"Function: test_downsample_total_counts(count_matrix_format, replace, dtype)",scverse,scanpy,1.10.1,,,,test_downsample_total_counts,"(count_matrix_format, replace, dtype)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,test_recipe_weinreb(),function,,,,Function: test_recipe_weinreb(),scverse,scanpy,1.10.1,,,,test_recipe_weinreb,(),,,,,,,,,"# Just tests for failure for now",,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,"ARRAY_TYPES_DASK_SPARSE = [
    a for a in ARRAY_TYPES if ""sparse"" in a.id and ""dask"" in a.id
]",constant,"ARRAY_TYPES_DASK_SPARSE = [
    a for a in ARRAY_TYPES if ""sparse"" in a.id and ""dask"" in a.id
]",ARRAY_TYPES_DASK_SPARSE,"[
    a for a in ARRAY_TYPES if ""sparse"" in a.id and ""dask"" in a.id
]","Constant: ARRAY_TYPES_DASK_SPARSE = [
    a for a in ARRAY_TYPES if ""sparse"" in a.id and ""dask"" in a.id
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,product from itertools,import,,,,Import: product from itertools,scverse,scanpy,1.10.1,from itertools import product,itertools,product,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse as sp,scipy,sparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,asarray from anndata.tests.helpers,local_import,,,,Import: asarray from anndata.tests.helpers,scverse,scanpy,1.10.1,"from anndata.tests.helpers import asarray, assert_equal",anndata.tests.helpers,asarray,,,anndata.tests.helpers,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,assert_equal from anndata.tests.helpers,local_import,,,,Import: assert_equal from anndata.tests.helpers,scverse,scanpy,1.10.1,"from anndata.tests.helpers import asarray, assert_equal",anndata.tests.helpers,assert_equal,,,anndata.tests.helpers,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,assert_allclose from numpy.testing,local_import,,,,Import: assert_allclose from numpy.testing,scverse,scanpy,1.10.1,from numpy.testing import assert_allclose,numpy.testing,assert_allclose,,,numpy.testing,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,issparse from sklearn.utils,local_import,,,,Import: issparse from sklearn.utils,scverse,scanpy,1.10.1,from sklearn.utils import issparse,sklearn.utils,issparse,,,sklearn.utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,anndata_v0_8_constructor_compat from scanpy.testing._helpers,local_import,,,,Import: anndata_v0_8_constructor_compat from scanpy.testing._helpers,scverse,scanpy,1.10.1,"from scanpy.testing._helpers import (
    anndata_v0_8_constructor_compat,
    check_rep_mutation,
    check_rep_results,
)",scanpy.testing._helpers,anndata_v0_8_constructor_compat,,,scanpy.testing._helpers,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,check_rep_mutation from scanpy.testing._helpers,local_import,,,,Import: check_rep_mutation from scanpy.testing._helpers,scverse,scanpy,1.10.1,"from scanpy.testing._helpers import (
    anndata_v0_8_constructor_compat,
    check_rep_mutation,
    check_rep_results,
)",scanpy.testing._helpers,check_rep_mutation,,,scanpy.testing._helpers,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,check_rep_results from scanpy.testing._helpers,local_import,,,,Import: check_rep_results from scanpy.testing._helpers,scverse,scanpy,1.10.1,"from scanpy.testing._helpers import (
    anndata_v0_8_constructor_compat,
    check_rep_mutation,
    check_rep_results,
)",scanpy.testing._helpers,check_rep_results,,,scanpy.testing._helpers,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,pbmc3k from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,"from scanpy.testing._helpers.data import pbmc3k, pbmc68k_reduced",scanpy.testing._helpers.data,pbmc3k,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,"from scanpy.testing._helpers.data import pbmc3k, pbmc68k_reduced",scanpy.testing._helpers.data,pbmc68k_reduced,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing.py,python,ARRAY_TYPES from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,from scanpy.testing._pytest.params import ARRAY_TYPES,scanpy.testing._pytest.params,ARRAY_TYPES,,,scanpy.testing._pytest.params,,,,,,,,,,,,
,test_preprocessing.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_preprocessing.py,python,,,,,,Directory: scanpy\tests\test_preprocessing.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,"test_log1p(adata: AnnData, adata_dist: AnnData)",function,,,,"Function: test_log1p(adata: AnnData, adata_dist: AnnData)",scverse,scanpy,1.10.1,,,,test_log1p,"(adata: AnnData, adata_dist: AnnData)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,"test_normalize_per_cell(
    request: pytest.FixtureRequest, adata: AnnData, adata_dist: AnnData
)",function,,,,"Function: test_normalize_per_cell(
    request: pytest.FixtureRequest, adata: AnnData, adata_dist: AnnData
)",scverse,scanpy,1.10.1,,,,test_normalize_per_cell,"(
    request: pytest.FixtureRequest, adata: AnnData, adata_dist: AnnData
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,"test_normalize_total(adata: AnnData, adata_dist: AnnData)",function,,,,"Function: test_normalize_total(adata: AnnData, adata_dist: AnnData)",scverse,scanpy,1.10.1,,,,test_normalize_total,"(adata: AnnData, adata_dist: AnnData)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,"test_filter_cells_array(adata: AnnData, adata_dist: AnnData)",function,,,,"Function: test_filter_cells_array(adata: AnnData, adata_dist: AnnData)",scverse,scanpy,1.10.1,,,,test_filter_cells_array,"(adata: AnnData, adata_dist: AnnData)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,"test_filter_cells(adata: AnnData, adata_dist: AnnData)",function,,,,"Function: test_filter_cells(adata: AnnData, adata_dist: AnnData)",scverse,scanpy,1.10.1,,,,test_filter_cells,"(adata: AnnData, adata_dist: AnnData)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,"test_filter_genes_array(adata: AnnData, adata_dist: AnnData)",function,,,,"Function: test_filter_genes_array(adata: AnnData, adata_dist: AnnData)",scverse,scanpy,1.10.1,,,,test_filter_genes_array,"(adata: AnnData, adata_dist: AnnData)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,"test_filter_genes(adata: AnnData, adata_dist: AnnData)",function,,,,"Function: test_filter_genes(adata: AnnData, adata_dist: AnnData)",scverse,scanpy,1.10.1,,,,test_filter_genes,"(adata: AnnData, adata_dist: AnnData)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,"HERE = Path(__file__).parent / Path(""_data/"")",constant,"HERE = Path(__file__).parent / Path(""_data/"")",HERE,"Path(__file__).parent / Path(""_data/"")","Constant: HERE = Path(__file__).parent / Path(""_data/"")",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,"input_file = Path(HERE, ""10x-10k-subset.zarr"")",constant,"input_file = Path(HERE, ""10x-10k-subset.zarr"")",input_file,"Path(HERE, ""10x-10k-subset.zarr"")","Constant: input_file = Path(HERE, ""10x-10k-subset.zarr"")",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,"DIST_TYPES = (DaskArray, ZappyArray)",constant,"DIST_TYPES = (DaskArray, ZappyArray)",DIST_TYPES,"(DaskArray, ZappyArray)","Constant: DIST_TYPES = (DaskArray, ZappyArray)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,pytestmark = [needs.zarr],constant,pytestmark = [needs.zarr],pytestmark,[needs.zarr],Constant: pytestmark = [needs.zarr],scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,numpy.testing,import,,,,Import: numpy.testing,scverse,scanpy,1.10.1,import numpy.testing as npt,,numpy.testing,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,"from anndata import AnnData, read_zarr",anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,read_zarr from anndata,import,,,,Import: read_zarr from anndata,scverse,scanpy,1.10.1,"from anndata import AnnData, read_zarr",anndata,read_zarr,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,DaskArray from scanpy._compat,local_import,,,,Import: DaskArray from scanpy._compat,scverse,scanpy,1.10.1,"from scanpy._compat import DaskArray, ZappyArray",scanpy._compat,DaskArray,,,scanpy._compat,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,ZappyArray from scanpy._compat,local_import,,,,Import: ZappyArray from scanpy._compat,scverse,scanpy,1.10.1,"from scanpy._compat import DaskArray, ZappyArray",scanpy._compat,ZappyArray,,,scanpy._compat,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,filter_oldformatwarning from scanpy.datasets._utils,local_import,,,,Import: filter_oldformatwarning from scanpy.datasets._utils,scverse,scanpy,1.10.1,from scanpy.datasets._utils import filter_oldformatwarning,scanpy.datasets._utils,filter_oldformatwarning,,,scanpy.datasets._utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,filter_cells from scanpy.preprocessing,local_import,,,,Import: filter_cells from scanpy.preprocessing,scverse,scanpy,1.10.1,"from scanpy.preprocessing import (
    filter_cells,
    filter_genes,
    log1p,
    normalize_per_cell,
    normalize_total,
)",scanpy.preprocessing,filter_cells,,,scanpy.preprocessing,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,filter_genes from scanpy.preprocessing,local_import,,,,Import: filter_genes from scanpy.preprocessing,scverse,scanpy,1.10.1,"from scanpy.preprocessing import (
    filter_cells,
    filter_genes,
    log1p,
    normalize_per_cell,
    normalize_total,
)",scanpy.preprocessing,filter_genes,,,scanpy.preprocessing,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,log1p from scanpy.preprocessing,local_import,,,,Import: log1p from scanpy.preprocessing,scverse,scanpy,1.10.1,"from scanpy.preprocessing import (
    filter_cells,
    filter_genes,
    log1p,
    normalize_per_cell,
    normalize_total,
)",scanpy.preprocessing,log1p,,,scanpy.preprocessing,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,normalize_per_cell from scanpy.preprocessing,local_import,,,,Import: normalize_per_cell from scanpy.preprocessing,scverse,scanpy,1.10.1,"from scanpy.preprocessing import (
    filter_cells,
    filter_genes,
    log1p,
    normalize_per_cell,
    normalize_total,
)",scanpy.preprocessing,normalize_per_cell,,,scanpy.preprocessing,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,normalize_total from scanpy.preprocessing,local_import,,,,Import: normalize_total from scanpy.preprocessing,scverse,scanpy,1.10.1,"from scanpy.preprocessing import (
    filter_cells,
    filter_genes,
    log1p,
    normalize_per_cell,
    normalize_total,
)",scanpy.preprocessing,normalize_total,,,scanpy.preprocessing,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,materialize_as_ndarray from scanpy.preprocessing._distributed,local_import,,,,Import: materialize_as_ndarray from scanpy.preprocessing._distributed,scverse,scanpy,1.10.1,from scanpy.preprocessing._distributed import materialize_as_ndarray,scanpy.preprocessing._distributed,materialize_as_ndarray,,,scanpy.preprocessing._distributed,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_preprocessing_distributed.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,scanpy.testing._pytest.marks,needs,,,scanpy.testing._pytest.marks,,,,,,,,,,,,
,test_preprocessing_distributed.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_preprocessing_distributed.py,python,,,,,,Directory: scanpy\tests\test_preprocessing_distributed.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,test_segments_binary(),function,,,,Function: test_segments_binary(),scverse,scanpy,1.10.1,,,,test_segments_binary,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,test_qc_metrics(),function,,,,Function: test_qc_metrics(),scverse,scanpy,1.10.1,,,,test_qc_metrics,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,adata_mito(),function,,,,Function: adata_mito(),scverse,scanpy,1.10.1,,,,adata_mito,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,test_qc_metrics_format_str_qc_vars(),function,,,,Function: test_qc_metrics_format_str_qc_vars(),scverse,scanpy,1.10.1,,,,test_qc_metrics_format_str_qc_vars,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,test_qc_metrics_percentage(),function,,,,Function: test_qc_metrics_percentage(),scverse,scanpy,1.10.1,,,,test_qc_metrics_percentage,(),,,,,,,,,"# In response to #421",,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,test_layer_raw(anndata),function,,,,Function: test_layer_raw(anndata),scverse,scanpy,1.10.1,,,,test_layer_raw,(anndata),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,test_inner_methods(anndata),function,,,,Function: test_inner_methods(anndata),scverse,scanpy,1.10.1,,,,test_inner_methods,(anndata),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,describe_obs from scanpy.preprocessing._qc,local_import,,,,Import: describe_obs from scanpy.preprocessing._qc,scverse,scanpy,1.10.1,"from scanpy.preprocessing._qc import (
    describe_obs,
    describe_var,
    top_proportions,
    top_segment_proportions,
)",scanpy.preprocessing._qc,describe_obs,,,scanpy.preprocessing._qc,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,describe_var from scanpy.preprocessing._qc,local_import,,,,Import: describe_var from scanpy.preprocessing._qc,scverse,scanpy,1.10.1,"from scanpy.preprocessing._qc import (
    describe_obs,
    describe_var,
    top_proportions,
    top_segment_proportions,
)",scanpy.preprocessing._qc,describe_var,,,scanpy.preprocessing._qc,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,top_proportions from scanpy.preprocessing._qc,local_import,,,,Import: top_proportions from scanpy.preprocessing._qc,scverse,scanpy,1.10.1,"from scanpy.preprocessing._qc import (
    describe_obs,
    describe_var,
    top_proportions,
    top_segment_proportions,
)",scanpy.preprocessing._qc,top_proportions,,,scanpy.preprocessing._qc,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_qc_metrics.py,python,top_segment_proportions from scanpy.preprocessing._qc,local_import,,,,Import: top_segment_proportions from scanpy.preprocessing._qc,scverse,scanpy,1.10.1,"from scanpy.preprocessing._qc import (
    describe_obs,
    describe_var,
    top_proportions,
    top_segment_proportions,
)",scanpy.preprocessing._qc,top_segment_proportions,,,scanpy.preprocessing._qc,,,,,,,,,,,,
,test_qc_metrics.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_qc_metrics.py,python,,,,,,Directory: scanpy\tests\test_qc_metrics.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_queries.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_queries.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_queries.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_queries.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,scanpy.testing._helpers.data,pbmc68k_reduced,,,scanpy.testing._helpers.data,,,,,,,,,,,,
,test_queries.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_queries.py,python,,,,,,Directory: scanpy\tests\test_queries.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,"get_true_scores() -> (
    tuple[
        NDArray[np.object_],
        NDArray[np.object_],
        NDArray[np.floating],
        NDArray[np.floating],
    ]
)",function,,,,"Function: get_true_scores() -> (
    tuple[
        NDArray[np.object_],
        NDArray[np.object_],
        NDArray[np.floating],
        NDArray[np.floating],
    ]
)",scverse,scanpy,1.10.1,,,,get_true_scores,(),,,,,,,,"(
    tuple[
        NDArray[np.object_],
        NDArray[np.object_],
        NDArray[np.floating],
        NDArray[np.floating],
    ]
)",,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,test_rank_genes_groups_use_raw(),function,,,,Function: test_rank_genes_groups_use_raw(),scverse,scanpy,1.10.1,,,,test_rank_genes_groups_use_raw,(),,,,,,,,,"# https://github.com/scverse/scanpy/issues/1929",,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,test_singlets(),function,,,,Function: test_singlets(),scverse,scanpy,1.10.1,,,,test_singlets,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,test_emptycat(),function,,,,Function: test_emptycat(),scverse,scanpy,1.10.1,,,,test_emptycat,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,test_log1p_save_restore(tmp_path),function,,,,Function: test_log1p_save_restore(tmp_path),scverse,scanpy,1.10.1,,,,test_log1p_save_restore,(tmp_path),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,test_wilcoxon_symmetry(),function,,,,Function: test_wilcoxon_symmetry(),scverse,scanpy,1.10.1,,,,test_wilcoxon_symmetry,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,test_mask_not_equal(),function,,,,Function: test_mask_not_equal(),scverse,scanpy,1.10.1,,,,test_mask_not_equal,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,HERE = Path(__file__).parent,constant,HERE = Path(__file__).parent,HERE,Path(__file__).parent,Constant: HERE = Path(__file__).parent,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,"DATA_PATH = HERE / ""_data""",constant,"DATA_PATH = HERE / ""_data""",DATA_PATH,"HERE / ""_data""","Constant: DATA_PATH = HERE / ""_data""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,pickle,import,,,,Import: pickle,scverse,scanpy,1.10.1,import pickle,,pickle,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,functools,partial,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",typing,Any,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,scipy,import,,,,Import: scipy,scverse,scanpy,1.10.1,import scipy,,scipy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,packaging,version,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,binomial from numpy.random,local_import,,,,Import: binomial from numpy.random,scverse,scanpy,1.10.1,"from numpy.random import binomial, negative_binomial, seed",numpy.random,binomial,,,numpy.random,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,negative_binomial from numpy.random,local_import,,,,Import: negative_binomial from numpy.random,scverse,scanpy,1.10.1,"from numpy.random import binomial, negative_binomial, seed",numpy.random,negative_binomial,,,numpy.random,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,seed from numpy.random,local_import,,,,Import: seed from numpy.random,scverse,scanpy,1.10.1,"from numpy.random import binomial, negative_binomial, seed",numpy.random,seed,,,numpy.random,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,mannwhitneyu from scipy.stats,local_import,,,,Import: mannwhitneyu from scipy.stats,scverse,scanpy,1.10.1,from scipy.stats import mannwhitneyu,scipy.stats,mannwhitneyu,,,scipy.stats,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,elem_mul from scanpy._utils,local_import,,,,Import: elem_mul from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import elem_mul, select_groups",scanpy._utils,elem_mul,,,scanpy._utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,select_groups from scanpy._utils,local_import,,,,Import: select_groups from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import elem_mul, select_groups",scanpy._utils,select_groups,,,scanpy._utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,rank_genes_groups_df from scanpy.get,local_import,,,,Import: rank_genes_groups_df from scanpy.get,scverse,scanpy,1.10.1,from scanpy.get import rank_genes_groups_df,scanpy.get,rank_genes_groups_df,,,scanpy.get,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,scanpy.testing._helpers.data,pbmc68k_reduced,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,ARRAY_TYPES from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,"from scanpy.testing._pytest.params import ARRAY_TYPES, ARRAY_TYPES_MEM",scanpy.testing._pytest.params,ARRAY_TYPES,,,scanpy.testing._pytest.params,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,ARRAY_TYPES_MEM from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES_MEM from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,"from scanpy.testing._pytest.params import ARRAY_TYPES, ARRAY_TYPES_MEM",scanpy.testing._pytest.params,ARRAY_TYPES_MEM,,,scanpy.testing._pytest.params,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,rank_genes_groups from scanpy.tools,local_import,,,,Import: rank_genes_groups from scanpy.tools,scverse,scanpy,1.10.1,from scanpy.tools import rank_genes_groups,scanpy.tools,rank_genes_groups,,,scanpy.tools,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups.py,python,_RankGenes from scanpy.tools._rank_genes_groups,local_import,,,,Import: _RankGenes from scanpy.tools._rank_genes_groups,scverse,scanpy,1.10.1,from scanpy.tools._rank_genes_groups import _RankGenes,scanpy.tools._rank_genes_groups,_RankGenes,,,scanpy.tools._rank_genes_groups,,,,,,,,,,,,
,test_rank_genes_groups.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_rank_genes_groups.py,python,,,,,,Directory: scanpy\tests\test_rank_genes_groups.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups_logreg.py,python,test_rank_genes_groups_with_renamed_categories_use_rep(),function,,,,Function: test_rank_genes_groups_with_renamed_categories_use_rep(),scverse,scanpy,1.10.1,,,,test_rank_genes_groups_with_renamed_categories_use_rep,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups_logreg.py,python,test_rank_genes_groups_with_unsorted_groups(),function,,,,Function: test_rank_genes_groups_with_unsorted_groups(),scverse,scanpy,1.10.1,,,,test_rank_genes_groups_with_unsorted_groups,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups_logreg.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups_logreg.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups_logreg.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_rank_genes_groups_logreg.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
,test_rank_genes_groups_logreg.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_rank_genes_groups_logreg.py,python,,,,,,Directory: scanpy\tests\test_rank_genes_groups_logreg.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_readwrite.py,python,PurePosixPath from pathlib,import,,,,Import: PurePosixPath from pathlib,scverse,scanpy,1.10.1,"from pathlib import PurePosixPath, PureWindowsPath",pathlib,PurePosixPath,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_readwrite.py,python,PureWindowsPath from pathlib,import,,,,Import: PureWindowsPath from pathlib,scverse,scanpy,1.10.1,"from pathlib import PurePosixPath, PureWindowsPath",pathlib,PureWindowsPath,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_readwrite.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_readwrite.py,python,_slugify from scanpy.readwrite,local_import,,,,Import: _slugify from scanpy.readwrite,scverse,scanpy,1.10.1,from scanpy.readwrite import _slugify,scanpy.readwrite,_slugify,,,scanpy.readwrite,,,,,,,,,,,,
,test_readwrite.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_readwrite.py,python,,,,,,Directory: scanpy\tests\test_readwrite.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,"assert_anndata_equal(a1, a2)",function,,,,"Function: assert_anndata_equal(a1, a2)",scverse,scanpy,1.10.1,,,,assert_anndata_equal,"(a1, a2)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,test_read_10x_h5_v1(),function,,,,Function: test_read_10x_h5_v1(),scverse,scanpy,1.10.1,,,,test_read_10x_h5_v1,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,test_read_10x_h5_v2_multiple_genomes(),function,,,,Function: test_read_10x_h5_v2_multiple_genomes(),scverse,scanpy,1.10.1,,,,test_read_10x_h5_v2_multiple_genomes,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,test_read_10x_h5(),function,,,,Function: test_read_10x_h5(),scverse,scanpy,1.10.1,,,,test_read_10x_h5,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,test_error_10x_h5_legacy(tmp_path),function,,,,Function: test_error_10x_h5_legacy(tmp_path),scverse,scanpy,1.10.1,,,,test_error_10x_h5_legacy,(tmp_path),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,test_error_missing_genome(),function,,,,Function: test_error_missing_genome(),scverse,scanpy,1.10.1,,,,test_error_missing_genome,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,test_read_visium_counts(visium_pth),function,,,,Function: test_read_visium_counts(visium_pth),scverse,scanpy,1.10.1,,,,test_read_visium_counts,(visium_pth),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,test_10x_h5_gex(),function,,,,Function: test_10x_h5_gex(),scverse,scanpy,1.10.1,,,,test_10x_h5_gex,(),,,,,,,,,"# Tests that gex option doesn't, say, make the function return None",,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,test_10x_probe_barcode_read(),function,,,,Function: test_10x_probe_barcode_read(),scverse,scanpy,1.10.1,,,,test_10x_probe_barcode_read,(),,,,,,,,,"# Tests the 10x probe barcode matrix is read correctly",,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,ROOT = Path(__file__).parent,constant,ROOT = Path(__file__).parent,ROOT,Path(__file__).parent,Constant: ROOT = Path(__file__).parent,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,"ROOT = ROOT / ""_data"" / ""10x_data""",constant,"ROOT = ROOT / ""_data"" / ""10x_data""",ROOT,"ROOT / ""_data"" / ""10x_data""","Constant: ROOT = ROOT / ""_data"" / ""10x_data""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,"VISIUM_ROOT = Path(__file__).parent / ""_data"" / ""visium_data""",constant,"VISIUM_ROOT = Path(__file__).parent / ""_data"" / ""visium_data""",VISIUM_ROOT,"Path(__file__).parent / ""_data"" / ""visium_data""","Constant: VISIUM_ROOT = Path(__file__).parent / ""_data"" / ""visium_data""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,shutil,import,,,,Import: shutil,scverse,scanpy,1.10.1,import shutil,,shutil,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,h5py,import,,,,Import: h5py,scverse,scanpy,1.10.1,import h5py,,h5py,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_read_10x.py,python,patch from unittest.mock,local_import,,,,Import: patch from unittest.mock,scverse,scanpy,1.10.1,from unittest.mock import patch,unittest.mock,patch,,,unittest.mock,,,,,,,,,,,,
,test_read_10x.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_read_10x.py,python,,,,,,Directory: scanpy\tests\test_read_10x.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,test_mask_string(),function,,,,Function: test_mask_string(),scverse,scanpy,1.10.1,,,,test_mask_string,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,"X_original = [
    [-1, 2, 0, 0],
    [1, 2, 4, 0],
    [0, 2, 2, 0],
]",constant,"X_original = [
    [-1, 2, 0, 0],
    [1, 2, 4, 0],
    [0, 2, 2, 0],
]",X_original,"[
    [-1, 2, 0, 0],
    [1, 2, 4, 0],
    [0, 2, 2, 0],
]","Constant: X_original = [
    [-1, 2, 0, 0],
    [1, 2, 4, 0],
    [0, 2, 2, 0],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,"X_scaled_original = [
    [-1, 2, 0, 0],
    [1, 2, 2, 0],
    [0, 2, 1, 0],
]",constant,"X_scaled_original = [
    [-1, 2, 0, 0],
    [1, 2, 2, 0],
    [0, 2, 1, 0],
]",X_scaled_original,"[
    [-1, 2, 0, 0],
    [1, 2, 2, 0],
    [0, 2, 1, 0],
]","Constant: X_scaled_original = [
    [-1, 2, 0, 0],
    [1, 2, 2, 0],
    [0, 2, 1, 0],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,"X_centered_original = [
    [-1, 0, -1, 0],
    [1, 0, 1, 0],
    [0, 0, 0, 0],
]",constant,"X_centered_original = [
    [-1, 0, -1, 0],
    [1, 0, 1, 0],
    [0, 0, 0, 0],
]",X_centered_original,"[
    [-1, 0, -1, 0],
    [1, 0, 1, 0],
    [0, 0, 0, 0],
]","Constant: X_centered_original = [
    [-1, 0, -1, 0],
    [1, 0, 1, 0],
    [0, 0, 0, 0],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,"X_scaled_original_clipped = [
    [-1, 1, 0, 0],
    [1, 1, 1, 0],
    [0, 1, 1, 0],
]",constant,"X_scaled_original_clipped = [
    [-1, 1, 0, 0],
    [1, 1, 1, 0],
    [0, 1, 1, 0],
]",X_scaled_original_clipped,"[
    [-1, 1, 0, 0],
    [1, 1, 1, 0],
    [0, 1, 1, 0],
]","Constant: X_scaled_original_clipped = [
    [-1, 1, 0, 0],
    [1, 1, 1, 0],
    [0, 1, 1, 0],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,"X_for_mask = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 2, 0, 0],
    [1, 2, 4, 0],
    [0, 2, 2, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",constant,"X_for_mask = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 2, 0, 0],
    [1, 2, 4, 0],
    [0, 2, 2, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",X_for_mask,"[
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 2, 0, 0],
    [1, 2, 4, 0],
    [0, 2, 2, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]","Constant: X_for_mask = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 2, 0, 0],
    [1, 2, 4, 0],
    [0, 2, 2, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,"X_scaled_for_mask = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 2, 0, 0],
    [1, 2, 2, 0],
    [0, 2, 1, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",constant,"X_scaled_for_mask = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 2, 0, 0],
    [1, 2, 2, 0],
    [0, 2, 1, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",X_scaled_for_mask,"[
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 2, 0, 0],
    [1, 2, 2, 0],
    [0, 2, 1, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]","Constant: X_scaled_for_mask = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 2, 0, 0],
    [1, 2, 2, 0],
    [0, 2, 1, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,"X_centered_for_mask = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 0, -1, 0],
    [1, 0, 1, 0],
    [0, 0, 0, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",constant,"X_centered_for_mask = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 0, -1, 0],
    [1, 0, 1, 0],
    [0, 0, 0, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",X_centered_for_mask,"[
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 0, -1, 0],
    [1, 0, 1, 0],
    [0, 0, 0, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]","Constant: X_centered_for_mask = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 0, -1, 0],
    [1, 0, 1, 0],
    [0, 0, 0, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,"X_scaled_for_mask_clipped = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 1, 0, 0],
    [1, 1, 1, 0],
    [0, 1, 1, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",constant,"X_scaled_for_mask_clipped = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 1, 0, 0],
    [1, 1, 1, 0],
    [0, 1, 1, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",X_scaled_for_mask_clipped,"[
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 1, 0, 0],
    [1, 1, 1, 0],
    [0, 1, 1, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]","Constant: X_scaled_for_mask_clipped = [
    [27, 27, 27, 27],
    [27, 27, 27, 27],
    [-1, 1, 0, 0],
    [1, 1, 1, 0],
    [0, 1, 1, 0],
    [27, 27, 27, 27],
    [27, 27, 27, 27],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,csc_matrix from scipy.sparse,local_import,,,,Import: csc_matrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csc_matrix, csr_matrix",scipy.sparse,csc_matrix,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scaling.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csc_matrix, csr_matrix",scipy.sparse,csr_matrix,,,scipy.sparse,,,,,,,,,,,,
,test_scaling.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_scaling.py,python,,,,,,Directory: scanpy\tests\test_scaling.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,"_create_random_gene_names(n_genes, name_length)",function,,,,"Function: _create_random_gene_names(n_genes, name_length)",scverse,scanpy,1.10.1,,,,_create_random_gene_names,"(n_genes, name_length)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,"_create_sparse_nan_matrix(rows, cols, percent_zero, percent_nan)",function,,,,"Function: _create_sparse_nan_matrix(rows, cols, percent_zero, percent_nan)",scverse,scanpy,1.10.1,,,,_create_sparse_nan_matrix,"(rows, cols, percent_zero, percent_nan)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,"_create_adata(n_obs, n_var, p_zero, p_nan)",function,,,,"Function: _create_adata(n_obs, n_var, p_zero, p_nan)",scverse,scanpy,1.10.1,,,,_create_adata,"(n_obs, n_var, p_zero, p_nan)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,test_score_with_reference(),function,,,,Function: test_score_with_reference(),scverse,scanpy,1.10.1,,,,test_score_with_reference,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,test_add_score(),function,,,,Function: test_add_score(),scverse,scanpy,1.10.1,,,,test_add_score,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,test_sparse_nanmean(),function,,,,Function: test_sparse_nanmean(),scverse,scanpy,1.10.1,,,,test_sparse_nanmean,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,test_sparse_nanmean_on_dense_matrix(),function,,,,Function: test_sparse_nanmean_on_dense_matrix(),scverse,scanpy,1.10.1,,,,test_sparse_nanmean_on_dense_matrix,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,test_score_genes_sparse_vs_dense(),function,,,,Function: test_score_genes_sparse_vs_dense(),scverse,scanpy,1.10.1,,,,test_score_genes_sparse_vs_dense,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,test_score_genes_deplete(),function,,,,Function: test_score_genes_deplete(),scverse,scanpy,1.10.1,,,,test_score_genes_deplete,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,test_npnanmean_vs_sparsemean(monkeypatch),function,,,,Function: test_npnanmean_vs_sparsemean(monkeypatch),scverse,scanpy,1.10.1,,,,test_npnanmean_vs_sparsemean,(monkeypatch),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,test_missing_genes(),function,,,,Function: test_missing_genes(),scverse,scanpy,1.10.1,,,,test_missing_genes,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,test_one_gene(),function,,,,Function: test_one_gene(),scverse,scanpy,1.10.1,,,,test_one_gene,(),,,,,,,,,"# https://github.com/scverse/scanpy/issues/1395",,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,test_use_raw_None(),function,,,,Function: test_use_raw_None(),scverse,scanpy,1.10.1,,,,test_use_raw_None,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,"HERE = Path(__file__).parent / Path(""_data/"")",constant,"HERE = Path(__file__).parent / Path(""_data/"")",HERE,"Path(__file__).parent / Path(""_data/"")","Constant: HERE = Path(__file__).parent / Path(""_data/"")",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,pickle,import,,,,Import: pickle,scverse,scanpy,1.10.1,import pickle,,pickle,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import csr_matrix,scipy.sparse,csr_matrix,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_score_genes.py,python,paul15 from scanpy.testing._helpers.data,local_import,,,,Import: paul15 from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import paul15,scanpy.testing._helpers.data,paul15,,,scanpy.testing._helpers.data,,,,,,,,,,,,
,test_score_genes.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_score_genes.py,python,,,,,,Directory: scanpy\tests\test_score_genes.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,pbmc200() -> AnnData,function,,,,Function: pbmc200() -> AnnData,scverse,scanpy,1.10.1,,,,pbmc200,(),,,,,,,,AnnData,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,paul500() -> AnnData,function,,,,Function: paul500() -> AnnData,scverse,scanpy,1.10.1,,,,paul500,(),,,,,,,,AnnData,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,test_scrublet_batched(),function,,,,Function: test_scrublet_batched(),scverse,scanpy,1.10.1,,,,test_scrublet_batched,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,_preprocess_for_scrublet(adata: AnnData) -> AnnData,function,,,,Function: _preprocess_for_scrublet(adata: AnnData) -> AnnData,scverse,scanpy,1.10.1,,,,_preprocess_for_scrublet,(adata: AnnData),,,,,,,,AnnData,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,"_create_sim_from_parents(adata: AnnData, parents: np.ndarray) -> AnnData",function,,,,"Function: _create_sim_from_parents(adata: AnnData, parents: np.ndarray) -> AnnData",scverse,scanpy,1.10.1,,,,_create_sim_from_parents,"(adata: AnnData, parents: np.ndarray)",,,,,,,,AnnData,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,test_scrublet_data(),function,,,,Function: test_scrublet_data(),scverse,scanpy,1.10.1,,,,test_scrublet_data,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,test_scrublet_simulate_doublets(),function,,,,Function: test_scrublet_simulate_doublets(),scverse,scanpy,1.10.1,,,,test_scrublet_simulate_doublets,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,pytestmark = [needs.skimage],constant,pytestmark = [needs.skimage],pytestmark,[needs.skimage],Constant: pytestmark = [needs.skimage],scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,"test_params = {
    ""expected_doublet_rate"": 0.1,
    ""synthetic_doublet_umi_subsampling"": 0.8,
    ""knn_dist_metric"": ""manhattan"",
    ""normalize_variance"": False,
    ""log_transform"": True,
    ""mean_center"": False,
    ""n_prin_comps"": 10,
    ""n_neighbors"": 2,
    ""threshold"": 0.1,
}",constant,"test_params = {
    ""expected_doublet_rate"": 0.1,
    ""synthetic_doublet_umi_subsampling"": 0.8,
    ""knn_dist_metric"": ""manhattan"",
    ""normalize_variance"": False,
    ""log_transform"": True,
    ""mean_center"": False,
    ""n_prin_comps"": 10,
    ""n_neighbors"": 2,
    ""threshold"": 0.1,
}",test_params,"{
    ""expected_doublet_rate"": 0.1,
    ""synthetic_doublet_umi_subsampling"": 0.8,
    ""knn_dist_metric"": ""manhattan"",
    ""normalize_variance"": False,
    ""log_transform"": True,
    ""mean_center"": False,
    ""n_prin_comps"": 10,
    ""n_neighbors"": 2,
    ""threshold"": 0.1,
}","Constant: test_params = {
    ""expected_doublet_rate"": 0.1,
    ""synthetic_doublet_umi_subsampling"": 0.8,
    ""knn_dist_metric"": ""manhattan"",
    ""normalize_variance"": False,
    ""log_transform"": True,
    ""mean_center"": False,
    ""n_prin_comps"": 10,
    ""n_neighbors"": 2,
    ""threshold"": 0.1,
}",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",typing,Any,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,scipy.sparse,import,,,,Import: scipy.sparse,scverse,scanpy,1.10.1,import scipy.sparse as sparse,,scipy.sparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,"from anndata import AnnData, concat",anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,concat from anndata,import,,,,Import: concat from anndata,scverse,scanpy,1.10.1,"from anndata import AnnData, concat",anndata,concat,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,assert_equal from anndata.tests.helpers,local_import,,,,Import: assert_equal from anndata.tests.helpers,scverse,scanpy,1.10.1,from anndata.tests.helpers import assert_equal,anndata.tests.helpers,assert_equal,,,anndata.tests.helpers,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,assert_allclose from numpy.testing,local_import,,,,Import: assert_allclose from numpy.testing,scverse,scanpy,1.10.1,"from numpy.testing import assert_allclose, assert_array_equal",numpy.testing,assert_allclose,,,numpy.testing,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,assert_array_equal from numpy.testing,local_import,,,,Import: assert_array_equal from numpy.testing,scverse,scanpy,1.10.1,"from numpy.testing import assert_allclose, assert_array_equal",numpy.testing,assert_array_equal,,,numpy.testing,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scrublet.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,scanpy.testing._pytest.marks,needs,,,scanpy.testing._pytest.marks,,,,,,,,,,,,
,test_scrublet.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_scrublet.py,python,,,,,,Directory: scanpy\tests\test_scrublet.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_sim.py,python,test_sim_toggleswitch(tmp_write_dir),function,,,,Function: test_sim_toggleswitch(tmp_write_dir),scverse,scanpy,1.10.1,,,,test_sim_toggleswitch,(tmp_write_dir),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_sim.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_sim.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_sim.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
,test_sim.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_sim.py,python,,,,,,Directory: scanpy\tests\test_sim.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,test_descend_classes_and_funcs(),function,,,,Function: test_descend_classes_and_funcs(),scverse,scanpy,1.10.1,,,,test_descend_classes_and_funcs,(),,,,,,,,,"# create module hierarchy",,,,
scverse_scanpy_1.10.1,test_utils.py,python,test_axis_mul_or_truediv_badop(),function,,,,Function: test_axis_mul_or_truediv_badop(),scverse,scanpy,1.10.1,,,,test_axis_mul_or_truediv_badop,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,test_axis_mul_or_truediv_bad_out(),function,,,,Function: test_axis_mul_or_truediv_bad_out(),scverse,scanpy,1.10.1,,,,test_axis_mul_or_truediv_bad_out,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,mul from operator,import,,,,Import: mul from operator,scverse,scanpy,1.10.1,"from operator import mul, truediv",operator,mul,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,truediv from operator,import,,,,Import: truediv from operator,scverse,scanpy,1.10.1,"from operator import mul, truediv",operator,truediv,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,ModuleType from types,import,,,,Import: ModuleType from types,scverse,scanpy,1.10.1,from types import ModuleType,types,ModuleType,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,asarray from anndata.tests.helpers,local_import,,,,Import: asarray from anndata.tests.helpers,scverse,scanpy,1.10.1,from anndata.tests.helpers import asarray,anndata.tests.helpers,asarray,,,anndata.tests.helpers,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,csr_matrix from scipy.sparse,local_import,,,,Import: csr_matrix from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse",scipy.sparse,csr_matrix,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import csr_matrix, issparse",scipy.sparse,issparse,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,DaskArray from scanpy._compat,local_import,,,,Import: DaskArray from scanpy._compat,scverse,scanpy,1.10.1,from scanpy._compat import DaskArray,scanpy._compat,DaskArray,,,scanpy._compat,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,axis_mul_or_truediv from scanpy._utils,local_import,,,,Import: axis_mul_or_truediv from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import (
    axis_mul_or_truediv,
    axis_sum,
    check_nonnegative_integers,
    descend_classes_and_funcs,
    elem_mul,
    is_constant,
)",scanpy._utils,axis_mul_or_truediv,,,scanpy._utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,axis_sum from scanpy._utils,local_import,,,,Import: axis_sum from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import (
    axis_mul_or_truediv,
    axis_sum,
    check_nonnegative_integers,
    descend_classes_and_funcs,
    elem_mul,
    is_constant,
)",scanpy._utils,axis_sum,,,scanpy._utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,check_nonnegative_integers from scanpy._utils,local_import,,,,Import: check_nonnegative_integers from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import (
    axis_mul_or_truediv,
    axis_sum,
    check_nonnegative_integers,
    descend_classes_and_funcs,
    elem_mul,
    is_constant,
)",scanpy._utils,check_nonnegative_integers,,,scanpy._utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,descend_classes_and_funcs from scanpy._utils,local_import,,,,Import: descend_classes_and_funcs from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import (
    axis_mul_or_truediv,
    axis_sum,
    check_nonnegative_integers,
    descend_classes_and_funcs,
    elem_mul,
    is_constant,
)",scanpy._utils,descend_classes_and_funcs,,,scanpy._utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,elem_mul from scanpy._utils,local_import,,,,Import: elem_mul from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import (
    axis_mul_or_truediv,
    axis_sum,
    check_nonnegative_integers,
    descend_classes_and_funcs,
    elem_mul,
    is_constant,
)",scanpy._utils,elem_mul,,,scanpy._utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,is_constant from scanpy._utils,local_import,,,,Import: is_constant from scanpy._utils,scverse,scanpy,1.10.1,"from scanpy._utils import (
    axis_mul_or_truediv,
    axis_sum,
    check_nonnegative_integers,
    descend_classes_and_funcs,
    elem_mul,
    is_constant,
)",scanpy._utils,is_constant,,,scanpy._utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,scanpy.testing._pytest.marks,needs,,,scanpy.testing._pytest.marks,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,ARRAY_TYPES from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,"from scanpy.testing._pytest.params import (
    ARRAY_TYPES,
    ARRAY_TYPES_DASK,
    ARRAY_TYPES_SPARSE,
    ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED,
)",scanpy.testing._pytest.params,ARRAY_TYPES,,,scanpy.testing._pytest.params,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,ARRAY_TYPES_DASK from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES_DASK from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,"from scanpy.testing._pytest.params import (
    ARRAY_TYPES,
    ARRAY_TYPES_DASK,
    ARRAY_TYPES_SPARSE,
    ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED,
)",scanpy.testing._pytest.params,ARRAY_TYPES_DASK,,,scanpy.testing._pytest.params,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,ARRAY_TYPES_SPARSE from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES_SPARSE from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,"from scanpy.testing._pytest.params import (
    ARRAY_TYPES,
    ARRAY_TYPES_DASK,
    ARRAY_TYPES_SPARSE,
    ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED,
)",scanpy.testing._pytest.params,ARRAY_TYPES_SPARSE,,,scanpy.testing._pytest.params,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_utils.py,python,ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED from scanpy.testing._pytest.params,local_import,,,,Import: ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED from scanpy.testing._pytest.params,scverse,scanpy,1.10.1,"from scanpy.testing._pytest.params import (
    ARRAY_TYPES,
    ARRAY_TYPES_DASK,
    ARRAY_TYPES_SPARSE,
    ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED,
)",scanpy.testing._pytest.params,ARRAY_TYPES_SPARSE_DASK_UNSUPPORTED,,,scanpy.testing._pytest.params,,,,,,,,,,,,
,test_utils.py,python,,,,,,File: scanpy\tests,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_utils.py,python,,,,,,Directory: scanpy\tests\test_utils.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_integrate.py,python,test_harmony_integrate(),function,,,,Function: test_harmony_integrate(),scverse,scanpy,1.10.1,,,,test_harmony_integrate,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_integrate.py,python,pytestmark = [needs.harmonypy],constant,pytestmark = [needs.harmonypy],pytestmark,[needs.harmonypy],Constant: pytestmark = [needs.harmonypy],scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_integrate.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_integrate.py,python,scanpy.external,import,,,,Import: scanpy.external,scverse,scanpy,1.10.1,import scanpy.external as sce,,scanpy.external,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_integrate.py,python,pbmc3k from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc3k,scanpy.testing._helpers.data,pbmc3k,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_integrate.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,scanpy.testing._pytest.marks,needs,,,scanpy.testing._pytest.marks,,,,,,,,,,,,
,test_harmony_integrate.py,python,,,,,,File: scanpy\tests\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_harmony_integrate.py,python,,,,,,Directory: scanpy\tests\external\test_harmony_integrate.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_timeseries.py,python,test_load_timepoints_from_anndata_list(),function,,,,Function: test_load_timepoints_from_anndata_list(),scverse,scanpy,1.10.1,,,,test_load_timepoints_from_anndata_list,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_timeseries.py,python,pytestmark = [needs.harmony],constant,pytestmark = [needs.harmony],pytestmark,[needs.harmony],Constant: pytestmark = [needs.harmony],scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_timeseries.py,python,product from itertools,import,,,,Import: product from itertools,scverse,scanpy,1.10.1,from itertools import product,itertools,product,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_timeseries.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_timeseries.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_timeseries.py,python,scanpy.external,import,,,,Import: scanpy.external,scverse,scanpy,1.10.1,import scanpy.external as sce,,scanpy.external,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_timeseries.py,python,pbmc3k from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc3k,scanpy.testing._helpers.data,pbmc3k,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_harmony_timeseries.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,scanpy.testing._pytest.marks,needs,,,scanpy.testing._pytest.marks,,,,,,,,,,,,
,test_harmony_timeseries.py,python,,,,,,File: scanpy\tests\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_harmony_timeseries.py,python,,,,,,Directory: scanpy\tests\external\test_harmony_timeseries.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_hashsolo.py,python,test_cell_demultiplexing(),function,,,,Function: test_cell_demultiplexing(),scverse,scanpy,1.10.1,,,,test_cell_demultiplexing,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_hashsolo.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_hashsolo.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_hashsolo.py,python,scanpy.external,import,,,,Import: scanpy.external,scverse,scanpy,1.10.1,import scanpy.external as sce,,scanpy.external,,,,,,,,,,,,,,,
,test_hashsolo.py,python,,,,,,File: scanpy\tests\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_hashsolo.py,python,,,,,,Directory: scanpy\tests\external\test_hashsolo.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_magic.py,python,test_magic_default(),function,,,,Function: test_magic_default(),scverse,scanpy,1.10.1,,,,test_magic_default,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_magic.py,python,test_magic_pca_only(),function,,,,Function: test_magic_pca_only(),scverse,scanpy,1.10.1,,,,test_magic_pca_only,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_magic.py,python,test_magic_copy(),function,,,,Function: test_magic_copy(),scverse,scanpy,1.10.1,,,,test_magic_copy,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_magic.py,python,pytestmark = [needs.magic],constant,pytestmark = [needs.magic],pytestmark,[needs.magic],Constant: pytestmark = [needs.magic],scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_magic.py,python,"A_list = [
    [0, 0, 7, 0, 0],
    [8, 5, 0, 2, 0],
    [6, 0, 0, 2, 5],
    [0, 0, 0, 1, 0],
    [8, 8, 2, 1, 0],
    [0, 0, 0, 4, 5],
]",constant,"A_list = [
    [0, 0, 7, 0, 0],
    [8, 5, 0, 2, 0],
    [6, 0, 0, 2, 5],
    [0, 0, 0, 1, 0],
    [8, 8, 2, 1, 0],
    [0, 0, 0, 4, 5],
]",A_list,"[
    [0, 0, 7, 0, 0],
    [8, 5, 0, 2, 0],
    [6, 0, 0, 2, 5],
    [0, 0, 0, 1, 0],
    [8, 8, 2, 1, 0],
    [0, 0, 0, 4, 5],
]","Constant: A_list = [
    [0, 0, 7, 0, 0],
    [8, 5, 0, 2, 0],
    [6, 0, 0, 2, 5],
    [0, 0, 0, 1, 0],
    [8, 8, 2, 1, 0],
    [0, 0, 0, 4, 5],
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_magic.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_magic.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_magic.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_magic.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,scanpy.testing._pytest.marks,needs,,,scanpy.testing._pytest.marks,,,,,,,,,,,,
,test_magic.py,python,,,,,,File: scanpy\tests\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_magic.py,python,,,,,,Directory: scanpy\tests\external\test_magic.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_palantir.py,python,test_palantir_core(),function,,,,Function: test_palantir_core(),scverse,scanpy,1.10.1,,,,test_palantir_core,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_palantir.py,python,pytestmark = [needs.palantir],constant,pytestmark = [needs.palantir],pytestmark,[needs.palantir],Constant: pytestmark = [needs.palantir],scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_palantir.py,python,scanpy.external,import,,,,Import: scanpy.external,scverse,scanpy,1.10.1,import scanpy.external as sce,,scanpy.external,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_palantir.py,python,pbmc3k_processed from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k_processed from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc3k_processed,scanpy.testing._helpers.data,pbmc3k_processed,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_palantir.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,scanpy.testing._pytest.marks,needs,,,scanpy.testing._pytest.marks,,,,,,,,,,,,
,test_palantir.py,python,,,,,,File: scanpy\tests\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_palantir.py,python,,,,,,Directory: scanpy\tests\external\test_palantir.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_phenograph.py,python,test_phenograph(),function,,,,Function: test_phenograph(),scverse,scanpy,1.10.1,,,,test_phenograph,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_phenograph.py,python,pytestmark = [needs.phenograph],constant,pytestmark = [needs.phenograph],pytestmark,[needs.phenograph],Constant: pytestmark = [needs.phenograph],scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_phenograph.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_phenograph.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_phenograph.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_phenograph.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_phenograph.py,python,scanpy.external,import,,,,Import: scanpy.external,scverse,scanpy,1.10.1,import scanpy.external as sce,,scanpy.external,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_phenograph.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,scanpy.testing._pytest.marks,needs,,,scanpy.testing._pytest.marks,,,,,,,,,,,,
,test_phenograph.py,python,,,,,,File: scanpy\tests\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_phenograph.py,python,,,,,,Directory: scanpy\tests\external\test_phenograph.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_sam.py,python,test_sam(),function,,,,Function: test_sam(),scverse,scanpy,1.10.1,,,,test_sam,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_sam.py,python,pytestmark = [needs.samalg],constant,pytestmark = [needs.samalg],pytestmark,[needs.samalg],Constant: pytestmark = [needs.samalg],scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_sam.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_sam.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_sam.py,python,scanpy.external,import,,,,Import: scanpy.external,scverse,scanpy,1.10.1,import scanpy.external as sce,,scanpy.external,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_sam.py,python,pbmc3k from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc3k,scanpy.testing._helpers.data,pbmc3k,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_sam.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,scanpy.testing._pytest.marks,needs,,,scanpy.testing._pytest.marks,,,,,,,,,,,,
,test_sam.py,python,,,,,,File: scanpy\tests\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_sam.py,python,,,,,,Directory: scanpy\tests\external\test_sam.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scanorama_integrate.py,python,test_scanorama_integrate(),function,,,,Function: test_scanorama_integrate(),scverse,scanpy,1.10.1,,,,test_scanorama_integrate,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scanorama_integrate.py,python,pytestmark = [needs.scanorama],constant,pytestmark = [needs.scanorama],pytestmark,[needs.scanorama],Constant: pytestmark = [needs.scanorama],scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scanorama_integrate.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scanorama_integrate.py,python,scanpy.external,import,,,,Import: scanpy.external,scverse,scanpy,1.10.1,import scanpy.external as sce,,scanpy.external,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scanorama_integrate.py,python,pbmc68k_reduced from scanpy.testing._helpers.data,local_import,,,,Import: pbmc68k_reduced from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc68k_reduced,scanpy.testing._helpers.data,pbmc68k_reduced,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_scanorama_integrate.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,scanpy.testing._pytest.marks,needs,,,scanpy.testing._pytest.marks,,,,,,,,,,,,
,test_scanorama_integrate.py,python,,,,,,File: scanpy\tests\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_scanorama_integrate.py,python,,,,,,Directory: scanpy\tests\external\test_scanorama_integrate.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_wishbone.py,python,test_run_wishbone(),function,,,,Function: test_run_wishbone(),scverse,scanpy,1.10.1,,,,test_run_wishbone,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_wishbone.py,python,pytestmark = [needs.wishbone],constant,pytestmark = [needs.wishbone],pytestmark,[needs.wishbone],Constant: pytestmark = [needs.wishbone],scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_wishbone.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_wishbone.py,python,scanpy.external,import,,,,Import: scanpy.external,scverse,scanpy,1.10.1,import scanpy.external as sce,,scanpy.external,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_wishbone.py,python,pbmc3k from scanpy.testing._helpers.data,local_import,,,,Import: pbmc3k from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import pbmc3k,scanpy.testing._helpers.data,pbmc3k,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_wishbone.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,scanpy.testing._pytest.marks,needs,,,scanpy.testing._pytest.marks,,,,,,,,,,,,
,test_wishbone.py,python,,,,,,File: scanpy\tests\external,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_wishbone.py,python,,,,,,Directory: scanpy\tests\external\test_wishbone.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga_paul15_subsampled.py,python,HERE: Path = Path(__file__).parent,constant,HERE: Path = Path(__file__).parent,HERE,Path(__file__).parent,Constant: HERE: Path = Path(__file__).parent,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga_paul15_subsampled.py,python,"ROOT = HERE / ""_images_paga_paul15_subsampled""",constant,"ROOT = HERE / ""_images_paga_paul15_subsampled""",ROOT,"HERE / ""_images_paga_paul15_subsampled""","Constant: ROOT = HERE / ""_images_paga_paul15_subsampled""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga_paul15_subsampled.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,functools,partial,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga_paul15_subsampled.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga_paul15_subsampled.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga_paul15_subsampled.py,python,pytest,import,,,,Import: pytest,scverse,scanpy,1.10.1,import pytest,,pytest,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga_paul15_subsampled.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga_paul15_subsampled.py,python,setup from matplotlib.testing,local_import,,,,Import: setup from matplotlib.testing,scverse,scanpy,1.10.1,from matplotlib.testing import setup,matplotlib.testing,setup,,,matplotlib.testing,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga_paul15_subsampled.py,python,paul15 from scanpy.testing._helpers.data,local_import,,,,Import: paul15 from scanpy.testing._helpers.data,scverse,scanpy,1.10.1,from scanpy.testing._helpers.data import paul15,scanpy.testing._helpers.data,paul15,,,scanpy.testing._helpers.data,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_paga_paul15_subsampled.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,scanpy.testing._pytest.marks,needs,,,scanpy.testing._pytest.marks,,,,,,,,,,,,
,test_paga_paul15_subsampled.py,python,,,,,,File: scanpy\tests\notebooks,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_paga_paul15_subsampled.py,python,,,,,,Directory: scanpy\tests\notebooks\test_paga_paul15_subsampled.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pbmc3k.py,python,HERE: Path = Path(__file__).parent,constant,HERE: Path = Path(__file__).parent,HERE,Path(__file__).parent,Constant: HERE: Path = Path(__file__).parent,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pbmc3k.py,python,"ROOT = HERE / ""_images_pbmc3k""",constant,"ROOT = HERE / ""_images_pbmc3k""",ROOT,"HERE / ""_images_pbmc3k""","Constant: ROOT = HERE / ""_images_pbmc3k""",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pbmc3k.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,from functools import partial,functools,partial,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pbmc3k.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pbmc3k.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pbmc3k.py,python,scanpy,import,,,,Import: scanpy,scverse,scanpy,1.10.1,import scanpy as sc,,scanpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pbmc3k.py,python,setup from matplotlib.testing,local_import,,,,Import: setup from matplotlib.testing,scverse,scanpy,1.10.1,from matplotlib.testing import setup,matplotlib.testing,setup,,,matplotlib.testing,,,,,,,,,,,,
scverse_scanpy_1.10.1,test_pbmc3k.py,python,needs from scanpy.testing._pytest.marks,local_import,,,,Import: needs from scanpy.testing._pytest.marks,scverse,scanpy,1.10.1,from scanpy.testing._pytest.marks import needs,scanpy.testing._pytest.marks,needs,,,scanpy.testing._pytest.marks,,,,,,,,,,,,
,test_pbmc3k.py,python,,,,,,File: scanpy\tests\notebooks,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,test_pbmc3k.py,python,,,,,,Directory: scanpy\tests\notebooks\test_pbmc3k.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dendrogram.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dendrogram.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any",typing,Any,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dendrogram.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dendrogram.py,python,CategoricalDtype from pandas.api.types,local_import,,,,Import: CategoricalDtype from pandas.api.types,scverse,scanpy,1.10.1,from pandas.api.types import CategoricalDtype,pandas.api.types,CategoricalDtype,,,pandas.api.types,,,,,,,,,,,,
,_dendrogram.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_dendrogram.py,python,,,,,,Directory: scanpy\tools\_dendrogram.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_diffmap.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
,_diffmap.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_diffmap.py,python,,,,,,Directory: scanpy\tools\_diffmap.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"[instance] DPT.flavor = ""haghverdi16""",class_field,,,,"Class field: [instance] DPT.flavor = ""haghverdi16""",scverse,scanpy,1.10.1,,,,,,,DPT,__init__,"(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        min_group_size: float = 0.01,
        n_branchings: int = 0,
        allow_kendall_tau_shift: bool = False,
        neighbors_key: str | None = None,
    )","self.flavor = ""haghverdi16""","self.flavor = ""haghverdi16""",,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,[instance] DPT.n_branchings = n_branchings,class_field,,,,Class field: [instance] DPT.n_branchings = n_branchings,scverse,scanpy,1.10.1,,,,,,,DPT,__init__,"(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        min_group_size: float = 0.01,
        n_branchings: int = 0,
        allow_kendall_tau_shift: bool = False,
        neighbors_key: str | None = None,
    )",self.n_branchings = n_branchings,self.n_branchings = n_branchings,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"[instance] DPT.min_group_size = (
            min_group_size
            if min_group_size >= 1
            else int(min_group_size * _adata.shape[0])
        )",class_field,,,,"Class field: [instance] DPT.min_group_size = (
            min_group_size
            if min_group_size >= 1
            else int(min_group_size * _adata.shape[0])
        )",scverse,scanpy,1.10.1,,,,,,,DPT,__init__,"(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        min_group_size: float = 0.01,
        n_branchings: int = 0,
        allow_kendall_tau_shift: bool = False,
        neighbors_key: str | None = None,
    )","self.min_group_size = (
            min_group_size
            if min_group_size >= 1
            else int(min_group_size * self._adata.shape[0])
        )","self.min_group_size = (
            min_group_size
            if min_group_size >= 1
            else int(min_group_size * self._adata.shape[0])
        )",,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,[instance] DPT.passed_adata = adata,class_field,,,,Class field: [instance] DPT.passed_adata = adata,scverse,scanpy,1.10.1,,,,,,,DPT,__init__,"(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        min_group_size: float = 0.01,
        n_branchings: int = 0,
        allow_kendall_tau_shift: bool = False,
        neighbors_key: str | None = None,
    )",self.passed_adata = adata,self.passed_adata = adata,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,[instance] DPT.choose_largest_segment = False,class_field,,,,Class field: [instance] DPT.choose_largest_segment = False,scverse,scanpy,1.10.1,,,,,,,DPT,__init__,"(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        min_group_size: float = 0.01,
        n_branchings: int = 0,
        allow_kendall_tau_shift: bool = False,
        neighbors_key: str | None = None,
    )",self.choose_largest_segment = False,self.choose_largest_segment = False,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,[instance] DPT.allow_kendall_tau_shift = allow_kendall_tau_shift,class_field,,,,Class field: [instance] DPT.allow_kendall_tau_shift = allow_kendall_tau_shift,scverse,scanpy,1.10.1,,,,,,,DPT,__init__,"(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        min_group_size: float = 0.01,
        n_branchings: int = 0,
        allow_kendall_tau_shift: bool = False,
        neighbors_key: str | None = None,
    )",self.allow_kendall_tau_shift = allow_kendall_tau_shift,self.allow_kendall_tau_shift = allow_kendall_tau_shift,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT.__init__(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        min_group_size: float = 0.01,
        n_branchings: int = 0,
        allow_kendall_tau_shift: bool = False,
        neighbors_key: str | None = None,
    )",class_method,,,,"Class method: DPT.__init__(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        min_group_size: float = 0.01,
        n_branchings: int = 0,
        allow_kendall_tau_shift: bool = False,
        neighbors_key: str | None = None,
    )",scverse,scanpy,1.10.1,,,,,,,DPT,__init__,"(
        self,
        adata: AnnData,
        *,
        n_dcs: int | None = None,
        min_group_size: float = 0.01,
        n_branchings: int = 0,
        allow_kendall_tau_shift: bool = False,
        neighbors_key: str | None = None,
    )",,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,DPT.branchings_segments(self),class_method,,,,Class method: DPT.branchings_segments(self),scverse,scanpy,1.10.1,,,,,,,DPT,branchings_segments,(self),,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,DPT.detect_branchings(self),class_method,,,,Class method: DPT.detect_branchings(self),scverse,scanpy,1.10.1,,,,,,,DPT,detect_branchings,(self),,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,DPT.check_adjacency(self),class_method,,,,Class method: DPT.check_adjacency(self),scverse,scanpy,1.10.1,,,,,,,DPT,check_adjacency,(self),,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT.select_segment(self, segs, segs_tips, segs_undecided) -> tuple[int, int]",class_method,,,,"Class method: DPT.select_segment(self, segs, segs_tips, segs_undecided) -> tuple[int, int]",scverse,scanpy,1.10.1,,,,,,,DPT,select_segment,"(self, segs, segs_tips, segs_undecided)",,,"tuple[int, int]",,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,DPT.postprocess_segments(self),class_method,,,,Class method: DPT.postprocess_segments(self),scverse,scanpy,1.10.1,,,,,,,DPT,postprocess_segments,(self),,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,DPT.set_segs_names(self),class_method,,,,Class method: DPT.set_segs_names(self),scverse,scanpy,1.10.1,,,,,,,DPT,set_segs_names,(self),,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,DPT.order_pseudotime(self),class_method,,,,Class method: DPT.order_pseudotime(self),scverse,scanpy,1.10.1,,,,,,,DPT,order_pseudotime,(self),,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT.detect_branching(
        self,
        *,
        segs: Sequence[np.ndarray],
        segs_tips: Sequence[np.ndarray],
        segs_connects,
        segs_undecided,
        segs_adjacency,
        iseg: int,
        tips3: np.ndarray,
    )",class_method,,,,"Class method: DPT.detect_branching(
        self,
        *,
        segs: Sequence[np.ndarray],
        segs_tips: Sequence[np.ndarray],
        segs_connects,
        segs_undecided,
        segs_adjacency,
        iseg: int,
        tips3: np.ndarray,
    )",scverse,scanpy,1.10.1,,,,,,,DPT,detect_branching,"(
        self,
        *,
        segs: Sequence[np.ndarray],
        segs_tips: Sequence[np.ndarray],
        segs_connects,
        segs_undecided,
        segs_adjacency,
        iseg: int,
        tips3: np.ndarray,
    )",,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT._detect_branching(
        self,
        Dseg: np.ndarray,
        tips: np.ndarray,
        seg_reference=None,
    ) -> tuple[
        list[np.ndarray],
        list[np.ndarray],
        list[list[int]],
        list[list[int]],
        int,
    ]",class_method,,,,"Class method: DPT._detect_branching(
        self,
        Dseg: np.ndarray,
        tips: np.ndarray,
        seg_reference=None,
    ) -> tuple[
        list[np.ndarray],
        list[np.ndarray],
        list[list[int]],
        list[list[int]],
        int,
    ]",scverse,scanpy,1.10.1,,,,,,,DPT,_detect_branching,"(
        self,
        Dseg: np.ndarray,
        tips: np.ndarray,
        seg_reference=None,
    )",,,"tuple[
        list[np.ndarray],
        list[np.ndarray],
        list[list[int]],
        list[list[int]],
        int,
    ]",,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT._detect_branching_single_haghverdi16(self, Dseg, tips)",class_method,,,,"Class method: DPT._detect_branching_single_haghverdi16(self, Dseg, tips)",scverse,scanpy,1.10.1,,,,,,,DPT,_detect_branching_single_haghverdi16,"(self, Dseg, tips)",,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT._detect_branching_single_wolf17_tri(self, Dseg, tips)",class_method,,,,"Class method: DPT._detect_branching_single_wolf17_tri(self, Dseg, tips)",scverse,scanpy,1.10.1,,,,,,,DPT,_detect_branching_single_wolf17_tri,"(self, Dseg, tips)",,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT._detect_branching_single_wolf17_bi(self, Dseg, tips)",class_method,,,,"Class method: DPT._detect_branching_single_wolf17_bi(self, Dseg, tips)",scverse,scanpy,1.10.1,,,,,,,DPT,_detect_branching_single_wolf17_bi,"(self, Dseg, tips)",,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT.__detect_branching_haghverdi16(
        self, Dseg: np.ndarray, tips: np.ndarray
    ) -> np.ndarray",class_method,,,,"Class method: DPT.__detect_branching_haghverdi16(
        self, Dseg: np.ndarray, tips: np.ndarray
    ) -> np.ndarray",scverse,scanpy,1.10.1,,,,,,,DPT,__detect_branching_haghverdi16,"(
        self, Dseg: np.ndarray, tips: np.ndarray
    )",,,np.ndarray,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT.kendall_tau_split(self, a: np.ndarray, b: np.ndarray) -> int",class_method,,,,"Class method: DPT.kendall_tau_split(self, a: np.ndarray, b: np.ndarray) -> int",scverse,scanpy,1.10.1,,,,,,,DPT,kendall_tau_split,"(self, a: np.ndarray, b: np.ndarray)",,,int,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT._kendall_tau_add(self, len_old: int, diff_pos: int, tau_old: float)",class_method,,,,"Class method: DPT._kendall_tau_add(self, len_old: int, diff_pos: int, tau_old: float)",scverse,scanpy,1.10.1,,,,,,,DPT,_kendall_tau_add,"(self, len_old: int, diff_pos: int, tau_old: float)",,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT._kendall_tau_subtract(self, len_old: int, diff_neg: int, tau_old: float)",class_method,,,,"Class method: DPT._kendall_tau_subtract(self, len_old: int, diff_neg: int, tau_old: float)",scverse,scanpy,1.10.1,,,,,,,DPT,_kendall_tau_subtract,"(self, len_old: int, diff_neg: int, tau_old: float)",,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,"DPT._kendall_tau_diff(self, a: np.ndarray, b: np.ndarray, i) -> tuple[int, int]",class_method,,,,"Class method: DPT._kendall_tau_diff(self, a: np.ndarray, b: np.ndarray, i) -> tuple[int, int]",scverse,scanpy,1.10.1,,,,,,,DPT,_kendall_tau_diff,"(self, a: np.ndarray, b: np.ndarray, i)",,,"tuple[int, int]",,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,DPT(Neighbors),class,,,,Class: DPT(Neighbors),scverse,scanpy,1.10.1,,,,,,,DPT,,,,,,,,,(Neighbors),,
scverse_scanpy_1.10.1,_dpt.py,python,"_diffmap(adata, n_comps=15, neighbors_key=None, random_state=0)",function,,,,"Function: _diffmap(adata, n_comps=15, neighbors_key=None, random_state=0)",scverse,scanpy,1.10.1,,,,_diffmap,"(adata, n_comps=15, neighbors_key=None, random_state=0)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,scipy,import,,,,Import: scipy,scverse,scanpy,1.10.1,import scipy as sp,,scipy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_dpt.py,python,natsorted from natsort,import,,,,Import: natsorted from natsort,scverse,scanpy,1.10.1,from natsort import natsorted,natsort,natsorted,,,,,,,,,,,,,,,
,_dpt.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_dpt.py,python,,,,,,Directory: scanpy\tools\_dpt.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_draw_graph.py,python,"_LAYOUTS = (""fr"", ""drl"", ""kk"", ""grid_fr"", ""lgl"", ""rt"", ""rt_circular"", ""fa"")",constant,"_LAYOUTS = (""fr"", ""drl"", ""kk"", ""grid_fr"", ""lgl"", ""rt"", ""rt_circular"", ""fa"")",_LAYOUTS,"(""fr"", ""drl"", ""kk"", ""grid_fr"", ""lgl"", ""rt"", ""rt_circular"", ""fa"")","Constant: _LAYOUTS = (""fr"", ""drl"", ""kk"", ""grid_fr"", ""lgl"", ""rt"", ""rt_circular"", ""fa"")",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_draw_graph.py,python,_Layout = Literal[_LAYOUTS],constant,_Layout = Literal[_LAYOUTS],_Layout,Literal[_LAYOUTS],Constant: _Layout = Literal[_LAYOUTS],scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_draw_graph.py,python,random,import,,,,Import: random,scverse,scanpy,1.10.1,import random,,random,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_draw_graph.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_draw_graph.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_draw_graph.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
,_draw_graph.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_draw_graph.py,python,,,,,,Directory: scanpy\tools\_draw_graph.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_embedding_density.py,python,"_calc_density(x: np.ndarray, y: np.ndarray)",function,,,,"Function: _calc_density(x: np.ndarray, y: np.ndarray)",scverse,scanpy,1.10.1,,,,_calc_density,"(x: np.ndarray, y: np.ndarray)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_embedding_density.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_embedding_density.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
,_embedding_density.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_embedding_density.py,python,,,,,,Directory: scanpy\tools\_embedding_density.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] _DimDict._data = {},class_field,,,,Class field: [instance] _DimDict._data = {},scverse,scanpy,1.10.1,,,,,,,_DimDict,__init__,"(self, dim, axis=0, vals=None)",self._data = {},self._data = {},,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] _DimDict._dim = dim,class_field,,,,Class field: [instance] _DimDict._dim = dim,scverse,scanpy,1.10.1,,,,,,,_DimDict,__init__,"(self, dim, axis=0, vals=None)",self._dim = dim,self._dim = dim,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] _DimDict._axis = axis,class_field,,,,Class field: [instance] _DimDict._axis = axis,scverse,scanpy,1.10.1,,,,,,,_DimDict,__init__,"(self, dim, axis=0, vals=None)",self._axis = axis,self._axis = axis,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] Ingest._rep = adata.X,class_field,,,,Class field: [instance] Ingest._rep = adata.X,scverse,scanpy,1.10.1,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)",self._rep = adata.X,self._rep = adata.X,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"[instance] Ingest._use_rep = ""X""",class_field,,,,"Class field: [instance] Ingest._use_rep = ""X""",scverse,scanpy,1.10.1,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)","self._use_rep = ""X""","self._use_rep = ""X""",,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] Ingest._n_pcs = None,class_field,,,,Class field: [instance] Ingest._n_pcs = None,scverse,scanpy,1.10.1,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)",self._n_pcs = None,self._n_pcs = None,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] Ingest._adata_ref = adata,class_field,,,,Class field: [instance] Ingest._adata_ref = adata,scverse,scanpy,1.10.1,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)",self._adata_ref = adata,self._adata_ref = adata,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] Ingest._adata_new = None,class_field,,,,Class field: [instance] Ingest._adata_new = None,scverse,scanpy,1.10.1,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)",self._adata_new = None,self._adata_new = None,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] Ingest._obsm = None,class_field,,,,Class field: [instance] Ingest._obsm = None,scverse,scanpy,1.10.1,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)",self._obsm = None,self._obsm = None,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] Ingest._obs = None,class_field,,,,Class field: [instance] Ingest._obs = None,scverse,scanpy,1.10.1,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)",self._obs = None,self._obs = None,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] Ingest._labels = None,class_field,,,,Class field: [instance] Ingest._labels = None,scverse,scanpy,1.10.1,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)",self._labels = None,self._labels = None,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] Ingest._indices = None,class_field,,,,Class field: [instance] Ingest._indices = None,scverse,scanpy,1.10.1,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)",self._indices = None,self._indices = None,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,[instance] Ingest._distances = None,class_field,,,,Class field: [instance] Ingest._distances = None,scverse,scanpy,1.10.1,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)",self._distances = None,self._distances = None,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"_DimDict.__init__(self, dim, axis=0, vals=None)",class_method,,,,"Class method: _DimDict.__init__(self, dim, axis=0, vals=None)",scverse,scanpy,1.10.1,,,,,,,_DimDict,__init__,"(self, dim, axis=0, vals=None)",,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"_DimDict.__setitem__(self, key, value)",class_method,,,,"Class method: _DimDict.__setitem__(self, key, value)",scverse,scanpy,1.10.1,,,,,,,_DimDict,__setitem__,"(self, key, value)",,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"_DimDict.__getitem__(self, key)",class_method,,,,"Class method: _DimDict.__getitem__(self, key)",scverse,scanpy,1.10.1,,,,,,,_DimDict,__getitem__,"(self, key)",,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"_DimDict.__delitem__(self, key)",class_method,,,,"Class method: _DimDict.__delitem__(self, key)",scverse,scanpy,1.10.1,,,,,,,_DimDict,__delitem__,"(self, key)",,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,_DimDict.__iter__(self),class_method,,,,Class method: _DimDict.__iter__(self),scverse,scanpy,1.10.1,,,,,,,_DimDict,__iter__,(self),,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,_DimDict.__len__(self),class_method,,,,Class method: _DimDict.__len__(self),scverse,scanpy,1.10.1,,,,,,,_DimDict,__len__,(self),,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,_DimDict.__repr__(self),class_method,,,,Class method: _DimDict.__repr__(self),scverse,scanpy,1.10.1,,,,,,,_DimDict,__repr__,(self),,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest._init_umap(self, adata)",class_method,,,,"Class method: Ingest._init_umap(self, adata)",scverse,scanpy,1.10.1,,,,,,,Ingest,_init_umap,"(self, adata)",,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest._init_pynndescent(self, distances)",class_method,,,,"Class method: Ingest._init_pynndescent(self, distances)",scverse,scanpy,1.10.1,,,,,,,Ingest,_init_pynndescent,"(self, distances)",,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest._init_neighbors(self, adata, neighbors_key)",class_method,,,,"Class method: Ingest._init_neighbors(self, adata, neighbors_key)",scverse,scanpy,1.10.1,,,,,,,Ingest,_init_neighbors,"(self, adata, neighbors_key)",,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest._init_pca(self, adata)",class_method,,,,"Class method: Ingest._init_pca(self, adata)",scverse,scanpy,1.10.1,,,,,,,Ingest,_init_pca,"(self, adata)",,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest.__init__(self, adata: AnnData, neighbors_key: str | None = None)",class_method,,,,"Class method: Ingest.__init__(self, adata: AnnData, neighbors_key: str | None = None)",scverse,scanpy,1.10.1,,,,,,,Ingest,__init__,"(self, adata: AnnData, neighbors_key: str | None = None)",,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest._pca(self, n_pcs=None)",class_method,,,,"Class method: Ingest._pca(self, n_pcs=None)",scverse,scanpy,1.10.1,,,,,,,Ingest,_pca,"(self, n_pcs=None)",,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,Ingest._same_rep(self),class_method,,,,Class method: Ingest._same_rep(self),scverse,scanpy,1.10.1,,,,,,,Ingest,_same_rep,(self),,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest.fit(self, adata_new)",class_method,,,,"Class method: Ingest.fit(self, adata_new)",scverse,scanpy,1.10.1,,,,,,,Ingest,fit,"(self, adata_new)",,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest.neighbors(self, k=None, queue_size=5, epsilon=0.1, random_state=0)",class_method,,,,"Class method: Ingest.neighbors(self, k=None, queue_size=5, epsilon=0.1, random_state=0)",scverse,scanpy,1.10.1,,,,,,,Ingest,neighbors,"(self, k=None, queue_size=5, epsilon=0.1, random_state=0)",,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,Ingest._umap_transform(self),class_method,,,,Class method: Ingest._umap_transform(self),scverse,scanpy,1.10.1,,,,,,,Ingest,_umap_transform,(self),,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest.map_embedding(self, method)",class_method,,,,"Class method: Ingest.map_embedding(self, method)",scverse,scanpy,1.10.1,,,,,,,Ingest,map_embedding,"(self, method)",,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest._knn_classify(self, labels)",class_method,,,,"Class method: Ingest._knn_classify(self, labels)",scverse,scanpy,1.10.1,,,,,,,Ingest,_knn_classify,"(self, labels)",,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest.map_labels(self, labels, method)",class_method,,,,"Class method: Ingest.map_labels(self, labels, method)",scverse,scanpy,1.10.1,,,,,,,Ingest,map_labels,"(self, labels, method)",,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest.to_adata(self, inplace=False)",class_method,,,,"Class method: Ingest.to_adata(self, inplace=False)",scverse,scanpy,1.10.1,,,,,,,Ingest,to_adata,"(self, inplace=False)",,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"Ingest.to_adata_joint(
        self, batch_key=""batch"", batch_categories=None, index_unique=""-""
    )",class_method,,,,"Class method: Ingest.to_adata_joint(
        self, batch_key=""batch"", batch_categories=None, index_unique=""-""
    )",scverse,scanpy,1.10.1,,,,,,,Ingest,to_adata_joint,"(
        self, batch_key=""batch"", batch_categories=None, index_unique=""-""
    )",,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,_DimDict(MutableMapping),class,,,,Class: _DimDict(MutableMapping),scverse,scanpy,1.10.1,,,,,,,_DimDict,,,,,,,,,(MutableMapping),,
scverse_scanpy_1.10.1,_ingest.py,python,Ingest,class,,,,Class: Ingest,scverse,scanpy,1.10.1,,,,,,,Ingest,,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"_rp_forest_generate(
    rp_forest_dict: RPForestDict,
) -> Generator[FlatTree, None, None]",function,,,,"Function: _rp_forest_generate(
    rp_forest_dict: RPForestDict,
) -> Generator[FlatTree, None, None]",scverse,scanpy,1.10.1,,,,_rp_forest_generate,"(
    rp_forest_dict: RPForestDict,
)",,,,,,,,"Generator[FlatTree, None, None]",,,,,
scverse_scanpy_1.10.1,_ingest.py,python,"ANNDATA_MIN_VERSION = version.parse(""0.7rc1"")",constant,"ANNDATA_MIN_VERSION = version.parse(""0.7rc1"")",ANNDATA_MIN_VERSION,"version.parse(""0.7rc1"")","Constant: ANNDATA_MIN_VERSION = version.parse(""0.7rc1"")",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,packaging,version,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,Generator from collections.abc,local_import,,,,Import: Generator from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Generator, Iterable, MutableMapping",collections.abc,Generator,,,collections.abc,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,Iterable from collections.abc,local_import,,,,Import: Iterable from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Generator, Iterable, MutableMapping",collections.abc,Iterable,,,collections.abc,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,MutableMapping from collections.abc,local_import,,,,Import: MutableMapping from collections.abc,scverse,scanpy,1.10.1,"from collections.abc import Generator, Iterable, MutableMapping",collections.abc,MutableMapping,,,collections.abc,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import issparse,scipy.sparse,issparse,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,_ingest.py,python,check_random_state from sklearn.utils,local_import,,,,Import: check_random_state from sklearn.utils,scverse,scanpy,1.10.1,from sklearn.utils import check_random_state,sklearn.utils,check_random_state,,,sklearn.utils,,,,,,,,,,,,
,_ingest.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_ingest.py,python,,,,,,Directory: scanpy\tools\_ingest.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_leiden.py,python,MutableVertexPartition,class,,,,Class: MutableVertexPartition,scverse,scanpy,1.10.1,,,,,,,MutableVertexPartition,,,,,,,,,,,
scverse_scanpy_1.10.1,_leiden.py,python,"leiden(
    adata: AnnData,
    resolution: float = 1,
    *,
    restrict_to: tuple[str, Sequence[str]] | None = None,
    random_state: _utils.AnyRandom = 0,
    key_added: str = ""leiden"",
    adjacency: sparse.spmatrix | None = None,
    directed: bool | None = None,
    use_weights: bool = True,
    n_iterations: int = -1,
    partition_type: type[MutableVertexPartition] | None = None,
    neighbors_key: str | None = None,
    obsp: str | None = None,
    copy: bool = False,
    flavor: Literal[""leidenalg"", ""ipgraph""] = ""leidenalg"",
    **clustering_args,
) -> AnnData | None",function,,,,"Function: leiden(
    adata: AnnData,
    resolution: float = 1,
    *,
    restrict_to: tuple[str, Sequence[str]] | None = None,
    random_state: _utils.AnyRandom = 0,
    key_added: str = ""leiden"",
    adjacency: sparse.spmatrix | None = None,
    directed: bool | None = None,
    use_weights: bool = True,
    n_iterations: int = -1,
    partition_type: type[MutableVertexPartition] | None = None,
    neighbors_key: str | None = None,
    obsp: str | None = None,
    copy: bool = False,
    flavor: Literal[""leidenalg"", ""ipgraph""] = ""leidenalg"",
    **clustering_args,
) -> AnnData | None",scverse,scanpy,1.10.1,,,,leiden,"(
    adata: AnnData,
    resolution: float = 1,
    *,
    restrict_to: tuple[str, Sequence[str]] | None = None,
    random_state: _utils.AnyRandom = 0,
    key_added: str = ""leiden"",
    adjacency: sparse.spmatrix | None = None,
    directed: bool | None = None,
    use_weights: bool = True,
    n_iterations: int = -1,
    partition_type: type[MutableVertexPartition] | None = None,
    neighbors_key: str | None = None,
    obsp: str | None = None,
    copy: bool = False,
    flavor: Literal[""leidenalg"", ""ipgraph""] = ""leidenalg"",
    **clustering_args,
)",,,,,,,,AnnData | None,,,,,
scverse_scanpy_1.10.1,_leiden.py,python,importlib,import,,,,Import: importlib,scverse,scanpy,1.10.1,import importlib,,importlib,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_leiden.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_leiden.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_leiden.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_leiden.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_leiden.py,python,natsorted from natsort,import,,,,Import: natsorted from natsort,scverse,scanpy,1.10.1,from natsort import natsorted,natsort,natsorted,,,,,,,,,,,,,,,
,_leiden.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_leiden.py,python,,,,,,Directory: scanpy\tools\_leiden.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_louvain.py,python,MutableVertexPartition,class,,,,Class: MutableVertexPartition,scverse,scanpy,1.10.1,,,,,,,MutableVertexPartition,,,,,,,,,,,
scverse_scanpy_1.10.1,_louvain.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_louvain.py,python,MappingProxyType from types,import,,,,Import: MappingProxyType from types,scverse,scanpy,1.10.1,from types import MappingProxyType,types,MappingProxyType,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_louvain.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_louvain.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,Any,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_louvain.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Any, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_louvain.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_louvain.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_louvain.py,python,natsorted from natsort,import,,,,Import: natsorted from natsort,scverse,scanpy,1.10.1,from natsort import natsorted,natsort,natsorted,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_louvain.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,packaging,version,,,,,,,,,,,,,,,
,_louvain.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_louvain.py,python,,,,,,Directory: scanpy\tools\_louvain.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_marker_gene_overlap.py,python,"_calc_overlap_count(markers1: dict, markers2: dict)",function,,,,"Function: _calc_overlap_count(markers1: dict, markers2: dict)",scverse,scanpy,1.10.1,,,,_calc_overlap_count,"(markers1: dict, markers2: dict)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_marker_gene_overlap.py,python,"_calc_overlap_coef(markers1: dict, markers2: dict)",function,,,,"Function: _calc_overlap_coef(markers1: dict, markers2: dict)",scverse,scanpy,1.10.1,,,,_calc_overlap_coef,"(markers1: dict, markers2: dict)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_marker_gene_overlap.py,python,"_calc_jaccard(markers1: dict, markers2: dict)",function,,,,"Function: _calc_jaccard(markers1: dict, markers2: dict)",scverse,scanpy,1.10.1,,,,_calc_jaccard,"(markers1: dict, markers2: dict)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_marker_gene_overlap.py,python,"_Method = Literal[""overlap_count"", ""overlap_coef"", ""jaccard""]",constant,"_Method = Literal[""overlap_count"", ""overlap_coef"", ""jaccard""]",_Method,"Literal[""overlap_count"", ""overlap_coef"", ""jaccard""]","Constant: _Method = Literal[""overlap_count"", ""overlap_coef"", ""jaccard""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_marker_gene_overlap.py,python,collections.abc,import,,,,Import: collections.abc,scverse,scanpy,1.10.1,import collections.abc as cabc,,collections.abc,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_marker_gene_overlap.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_marker_gene_overlap.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_marker_gene_overlap.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_marker_gene_overlap.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
,_marker_gene_overlap.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_marker_gene_overlap.py,python,,,,,,Directory: scanpy\tools\_marker_gene_overlap.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,[instance] PAGA._adata = adata,class_field,,,,Class field: [instance] PAGA._adata = adata,scverse,scanpy,1.10.1,,,,,,,PAGA,__init__,"(self, adata, groups, model=""v1.2"", neighbors_key=None)",self._adata = adata,self._adata = adata,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,"[instance] PAGA._neighbors = Neighbors(adata, neighbors_key=neighbors_key)",class_field,,,,"Class field: [instance] PAGA._neighbors = Neighbors(adata, neighbors_key=neighbors_key)",scverse,scanpy,1.10.1,,,,,,,PAGA,__init__,"(self, adata, groups, model=""v1.2"", neighbors_key=None)","self._neighbors = Neighbors(adata, neighbors_key=neighbors_key)","self._neighbors = Neighbors(adata, neighbors_key=neighbors_key)",,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,[instance] PAGA._model = model,class_field,,,,Class field: [instance] PAGA._model = model,scverse,scanpy,1.10.1,,,,,,,PAGA,__init__,"(self, adata, groups, model=""v1.2"", neighbors_key=None)",self._model = model,self._model = model,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,[instance] PAGA._groups_key = groups,class_field,,,,Class field: [instance] PAGA._groups_key = groups,scverse,scanpy,1.10.1,,,,,,,PAGA,__init__,"(self, adata, groups, model=""v1.2"", neighbors_key=None)",self._groups_key = groups,self._groups_key = groups,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,PAGAComparePathsResult.frac_steps: float,class_field,,,,Class field: PAGAComparePathsResult.frac_steps: float,scverse,scanpy,1.10.1,,,,,,,PAGAComparePathsResult,,,frac_steps: float,,,,,frac_steps,,,
scverse_scanpy_1.10.1,_paga.py,python,PAGAComparePathsResult.n_steps: int,class_field,,,,Class field: PAGAComparePathsResult.n_steps: int,scverse,scanpy,1.10.1,,,,,,,PAGAComparePathsResult,,,n_steps: int,,,,,n_steps,,,
scverse_scanpy_1.10.1,_paga.py,python,PAGAComparePathsResult.frac_paths: float,class_field,,,,Class field: PAGAComparePathsResult.frac_paths: float,scverse,scanpy,1.10.1,,,,,,,PAGAComparePathsResult,,,frac_paths: float,,,,,frac_paths,,,
scverse_scanpy_1.10.1,_paga.py,python,PAGAComparePathsResult.n_paths: int,class_field,,,,Class field: PAGAComparePathsResult.n_paths: int,scverse,scanpy,1.10.1,,,,,,,PAGAComparePathsResult,,,n_paths: int,,,,,n_paths,,,
scverse_scanpy_1.10.1,_paga.py,python,"PAGA.__init__(self, adata, groups, model=""v1.2"", neighbors_key=None)",class_method,,,,"Class method: PAGA.__init__(self, adata, groups, model=""v1.2"", neighbors_key=None)",scverse,scanpy,1.10.1,,,,,,,PAGA,__init__,"(self, adata, groups, model=""v1.2"", neighbors_key=None)",,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,PAGA.compute_connectivities(self),class_method,,,,Class method: PAGA.compute_connectivities(self),scverse,scanpy,1.10.1,,,,,,,PAGA,compute_connectivities,(self),,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,PAGA._compute_connectivities_v1_2(self),class_method,,,,Class method: PAGA._compute_connectivities_v1_2(self),scverse,scanpy,1.10.1,,,,,,,PAGA,_compute_connectivities_v1_2,(self),,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,PAGA._compute_connectivities_v1_0(self),class_method,,,,Class method: PAGA._compute_connectivities_v1_0(self),scverse,scanpy,1.10.1,,,,,,,PAGA,_compute_connectivities_v1_0,(self),,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,PAGA._get_connectivities_tree_v1_2(self),class_method,,,,Class method: PAGA._get_connectivities_tree_v1_2(self),scverse,scanpy,1.10.1,,,,,,,PAGA,_get_connectivities_tree_v1_2,(self),,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,"PAGA._get_connectivities_tree_v1_0(self, inter_es)",class_method,,,,"Class method: PAGA._get_connectivities_tree_v1_0(self, inter_es)",scverse,scanpy,1.10.1,,,,,,,PAGA,_get_connectivities_tree_v1_0,"(self, inter_es)",,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,PAGA.compute_transitions(self),class_method,,,,Class method: PAGA.compute_transitions(self),scverse,scanpy,1.10.1,,,,,,,PAGA,compute_transitions,(self),,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,PAGA.compute_transitions_old(self),class_method,,,,Class method: PAGA.compute_transitions_old(self),scverse,scanpy,1.10.1,,,,,,,PAGA,compute_transitions_old,(self),,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,PAGA,class,,,,Class: PAGA,scverse,scanpy,1.10.1,,,,,,,PAGA,,,,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,PAGAComparePathsResult(NamedTuple),class,,,,Class: PAGAComparePathsResult(NamedTuple),scverse,scanpy,1.10.1,,,,,,,PAGAComparePathsResult,,,,,,,,,(NamedTuple),,
scverse_scanpy_1.10.1,_paga.py,python,paga_degrees(adata: AnnData) -> list[int],function,,,,Function: paga_degrees(adata: AnnData) -> list[int],scverse,scanpy,1.10.1,,,,paga_degrees,(adata: AnnData),,,,,,,,list[int],,,,,
scverse_scanpy_1.10.1,_paga.py,python,paga_expression_entropies(adata: AnnData) -> list[float],function,,,,Function: paga_expression_entropies(adata: AnnData) -> list[float],scverse,scanpy,1.10.1,,,,paga_expression_entropies,(adata: AnnData),,,,,,,,list[float],,,,,
scverse_scanpy_1.10.1,_paga.py,python,"paga_compare_paths(
    adata1: AnnData,
    adata2: AnnData,
    adjacency_key: str = ""connectivities"",
    adjacency_key2: str | None = None,
) -> PAGAComparePathsResult",function,,,,"Function: paga_compare_paths(
    adata1: AnnData,
    adata2: AnnData,
    adjacency_key: str = ""connectivities"",
    adjacency_key2: str | None = None,
) -> PAGAComparePathsResult",scverse,scanpy,1.10.1,,,,paga_compare_paths,"(
    adata1: AnnData,
    adata2: AnnData,
    adjacency_key: str = ""connectivities"",
    adjacency_key2: str | None = None,
)",,,,,,,,PAGAComparePathsResult,,,,,
scverse_scanpy_1.10.1,_paga.py,python,"_AVAIL_MODELS = {""v1.0"", ""v1.2""}",constant,"_AVAIL_MODELS = {""v1.0"", ""v1.2""}",_AVAIL_MODELS,"{""v1.0"", ""v1.2""}","Constant: _AVAIL_MODELS = {""v1.0"", ""v1.2""}",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, NamedTuple",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, NamedTuple",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,NamedTuple from typing,import,,,,Import: NamedTuple from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, NamedTuple",typing,NamedTuple,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,scipy,import,,,,Import: scipy,scverse,scanpy,1.10.1,import scipy as sp,,scipy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_paga.py,python,minimum_spanning_tree from scipy.sparse.csgraph,local_import,,,,Import: minimum_spanning_tree from scipy.sparse.csgraph,scverse,scanpy,1.10.1,from scipy.sparse.csgraph import minimum_spanning_tree,scipy.sparse.csgraph,minimum_spanning_tree,,,scipy.sparse.csgraph,,,,,,,,,,,,
,_paga.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_paga.py,python,,,,,,Directory: scanpy\tools\_paga.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.mask_var = mask_var,class_field,,,,Class field: [instance] _RankGenes.mask_var = mask_var,scverse,scanpy,1.10.1,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.mask_var = mask_var,self.mask_var = mask_var,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"[instance] _RankGenes.groups_order, groups_masks_obs = _utils.select_groups(
            adata, groups, groupby
        )",class_field,,,,"Class field: [instance] _RankGenes.groups_order, groups_masks_obs = _utils.select_groups(
            adata, groups, groupby
        )",scverse,scanpy,1.10.1,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )","self.groups_order, self.groups_masks_obs = _utils.select_groups(
            adata, groups, groupby
        )","self.groups_order, self.groups_masks_obs = _utils.select_groups(
            adata, groups, groupby
        )",,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.ireference = None,class_field,,,,Class field: [instance] _RankGenes.ireference = None,scverse,scanpy,1.10.1,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.ireference = None,self.ireference = None,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.means = None,class_field,,,,Class field: [instance] _RankGenes.means = None,scverse,scanpy,1.10.1,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.means = None,self.means = None,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.vars = None,class_field,,,,Class field: [instance] _RankGenes.vars = None,scverse,scanpy,1.10.1,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.vars = None,self.vars = None,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.means_rest = None,class_field,,,,Class field: [instance] _RankGenes.means_rest = None,scverse,scanpy,1.10.1,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.means_rest = None,self.means_rest = None,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.vars_rest = None,class_field,,,,Class field: [instance] _RankGenes.vars_rest = None,scverse,scanpy,1.10.1,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.vars_rest = None,self.vars_rest = None,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.comp_pts = comp_pts,class_field,,,,Class field: [instance] _RankGenes.comp_pts = comp_pts,scverse,scanpy,1.10.1,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.comp_pts = comp_pts,self.comp_pts = comp_pts,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.pts = None,class_field,,,,Class field: [instance] _RankGenes.pts = None,scverse,scanpy,1.10.1,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.pts = None,self.pts = None,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.pts_rest = None,class_field,,,,Class field: [instance] _RankGenes.pts_rest = None,scverse,scanpy,1.10.1,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.pts_rest = None,self.pts_rest = None,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.stats = None,class_field,,,,Class field: [instance] _RankGenes.stats = None,scverse,scanpy,1.10.1,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.stats = None,self.stats = None,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,[instance] _RankGenes.grouping_mask = adata.obs[groupby].isin(groups_order),class_field,,,,Class field: [instance] _RankGenes.grouping_mask = adata.obs[groupby].isin(groups_order),scverse,scanpy,1.10.1,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",self.grouping_mask = adata.obs[groupby].isin(self.groups_order),self.grouping_mask = adata.obs[groupby].isin(self.groups_order),,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"[instance] _RankGenes.grouping = adata.obs.loc[grouping_mask, groupby]",class_field,,,,"Class field: [instance] _RankGenes.grouping = adata.obs.loc[grouping_mask, groupby]",scverse,scanpy,1.10.1,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )","self.grouping = adata.obs.loc[self.grouping_mask, groupby]","self.grouping = adata.obs.loc[self.grouping_mask, groupby]",,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"_RankGenes.__init__(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    ) -> None",class_method,,,,"Class method: _RankGenes.__init__(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    ) -> None",scverse,scanpy,1.10.1,,,,,,,_RankGenes,__init__,"(
        self,
        adata: AnnData,
        groups: list[str] | Literal[""all""],
        groupby: str,
        *,
        mask_var: NDArray[np.bool_] | None = None,
        reference: Literal[""rest""] | str = ""rest"",
        use_raw: bool = True,
        layer: str | None = None,
        comp_pts: bool = False,
    )",,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,_RankGenes._basic_stats(self) -> None,class_method,,,,Class method: _RankGenes._basic_stats(self) -> None,scverse,scanpy,1.10.1,,,,,,,_RankGenes,_basic_stats,(self),,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"_RankGenes.t_test(
        self, method: Literal[""t-test"", ""t-test_overestim_var""]
    ) -> Generator[tuple[int, NDArray[np.floating], NDArray[np.floating]], None, None]",class_method,,,,"Class method: _RankGenes.t_test(
        self, method: Literal[""t-test"", ""t-test_overestim_var""]
    ) -> Generator[tuple[int, NDArray[np.floating], NDArray[np.floating]], None, None]",scverse,scanpy,1.10.1,,,,,,,_RankGenes,t_test,"(
        self, method: Literal[""t-test"", ""t-test_overestim_var""]
    )",,,"Generator[tuple[int, NDArray[np.floating], NDArray[np.floating]], None, None]",,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"_RankGenes.wilcoxon(
        self, tie_correct: bool
    ) -> Generator[tuple[int, NDArray[np.floating], NDArray[np.floating]], None, None]",class_method,,,,"Class method: _RankGenes.wilcoxon(
        self, tie_correct: bool
    ) -> Generator[tuple[int, NDArray[np.floating], NDArray[np.floating]], None, None]",scverse,scanpy,1.10.1,,,,,,,_RankGenes,wilcoxon,"(
        self, tie_correct: bool
    )",,,"Generator[tuple[int, NDArray[np.floating], NDArray[np.floating]], None, None]",,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"_RankGenes.logreg(
        self, **kwds
    ) -> Generator[tuple[int, NDArray[np.floating], None], None, None]",class_method,,,,"Class method: _RankGenes.logreg(
        self, **kwds
    ) -> Generator[tuple[int, NDArray[np.floating], None], None, None]",scverse,scanpy,1.10.1,,,,,,,_RankGenes,logreg,"(
        self, **kwds
    )",,,"Generator[tuple[int, NDArray[np.floating], None], None, None]",,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"_RankGenes.compute_statistics(
        self,
        method: _Method,
        *,
        corr_method: _CorrMethod = ""benjamini-hochberg"",
        n_genes_user: int | None = None,
        rankby_abs: bool = False,
        tie_correct: bool = False,
        **kwds,
    ) -> None",class_method,,,,"Class method: _RankGenes.compute_statistics(
        self,
        method: _Method,
        *,
        corr_method: _CorrMethod = ""benjamini-hochberg"",
        n_genes_user: int | None = None,
        rankby_abs: bool = False,
        tie_correct: bool = False,
        **kwds,
    ) -> None",scverse,scanpy,1.10.1,,,,,,,_RankGenes,compute_statistics,"(
        self,
        method: _Method,
        *,
        corr_method: _CorrMethod = ""benjamini-hochberg"",
        n_genes_user: int | None = None,
        rankby_abs: bool = False,
        tie_correct: bool = False,
        **kwds,
    )",,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,_RankGenes,class,,,,Class: _RankGenes,scverse,scanpy,1.10.1,,,,,,,_RankGenes,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"_select_top_n(scores: NDArray, n_top: int)",function,,,,"Function: _select_top_n(scores: NDArray, n_top: int)",scverse,scanpy,1.10.1,,,,_select_top_n,"(scores: NDArray, n_top: int)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"_ranks(
    X: np.ndarray | sparse.csr_matrix | sparse.csc_matrix,
    mask_obs: NDArray[np.bool_] | None = None,
    mask_obs_rest: NDArray[np.bool_] | None = None,
)",function,,,,"Function: _ranks(
    X: np.ndarray | sparse.csr_matrix | sparse.csc_matrix,
    mask_obs: NDArray[np.bool_] | None = None,
    mask_obs_rest: NDArray[np.bool_] | None = None,
)",scverse,scanpy,1.10.1,,,,_ranks,"(
    X: np.ndarray | sparse.csr_matrix | sparse.csc_matrix,
    mask_obs: NDArray[np.bool_] | None = None,
    mask_obs_rest: NDArray[np.bool_] | None = None,
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,_tiecorrect(ranks),function,,,,Function: _tiecorrect(ranks),scverse,scanpy,1.10.1,,,,_tiecorrect,(ranks),,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,_calc_frac(X),function,,,,Function: _calc_frac(X),scverse,scanpy,1.10.1,,,,_calc_frac,(X),,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"_Method = Literal[""logreg"", ""t-test"", ""wilcoxon"", ""t-test_overestim_var""]",constant,"_Method = Literal[""logreg"", ""t-test"", ""wilcoxon"", ""t-test_overestim_var""]",_Method,"Literal[""logreg"", ""t-test"", ""wilcoxon"", ""t-test_overestim_var""]","Constant: _Method = Literal[""logreg"", ""t-test"", ""wilcoxon"", ""t-test_overestim_var""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,"_CorrMethod = Literal[""benjamini-hochberg"", ""bonferroni""]",constant,"_CorrMethod = Literal[""benjamini-hochberg"", ""bonferroni""]",_CorrMethod,"Literal[""benjamini-hochberg"", ""bonferroni""]","Constant: _CorrMethod = Literal[""benjamini-hochberg"", ""bonferroni""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,floor from math,import,,,,Import: floor from math,scverse,scanpy,1.10.1,from math import floor,math,floor,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, get_args",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, get_args",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,get_args from typing,import,,,,Import: get_args from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, get_args",typing,get_args,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import issparse, vstack",scipy.sparse,issparse,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,_rank_genes_groups.py,python,vstack from scipy.sparse,local_import,,,,Import: vstack from scipy.sparse,scverse,scanpy,1.10.1,"from scipy.sparse import issparse, vstack",scipy.sparse,vstack,,,scipy.sparse,,,,,,,,,,,,
,_rank_genes_groups.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_rank_genes_groups.py,python,,,,,,Directory: scanpy\tools\_rank_genes_groups.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_score_genes.py,python,"_sparse_nanmean(X, axis)",function,,,,"Function: _sparse_nanmean(X, axis)",scverse,scanpy,1.10.1,,,,_sparse_nanmean,"(X, axis)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_score_genes.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_score_genes.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_score_genes.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_score_genes.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import issparse,scipy.sparse,issparse,,,scipy.sparse,,,,,,,,,,,,
scverse_scanpy_1.10.1,_score_genes.py,python,_check_use_raw from scanpy._utils,local_import,,,,Import: _check_use_raw from scanpy._utils,scverse,scanpy,1.10.1,from scanpy._utils import _check_use_raw,scanpy._utils,_check_use_raw,,,scanpy._utils,,,,,,,,,,,,
,_score_genes.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_score_genes.py,python,,,,,,Directory: scanpy\tools\_score_genes.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.availModels = dict(
        krumsiek11=(
            ""myeloid progenitor network, Krumsiek et al., PLOS One 6, e22649, ""
            ""\n      equations from Table 1 on page 3, ""
            ""doi:10.1371/journal.pone.0022649 \n""
        ),
        var=""vector autoregressive process \n"",
        hill=""process with hill kinetics \n"",
    )",class_field,,,,"Class field: GRNsim.availModels = dict(
        krumsiek11=(
            ""myeloid progenitor network, Krumsiek et al., PLOS One 6, e22649, ""
            ""\n      equations from Table 1 on page 3, ""
            ""doi:10.1371/journal.pone.0022649 \n""
        ),
        var=""vector autoregressive process \n"",
        hill=""process with hill kinetics \n"",
    )",scverse,scanpy,1.10.1,,,,,,,GRNsim,,,"availModels = dict(
        krumsiek11=(
            ""myeloid progenitor network, Krumsiek et al., PLOS One 6, e22649, ""
            ""\n      equations from Table 1 on page 3, ""
            ""doi:10.1371/journal.pone.0022649 \n""
        ),
        var=""vector autoregressive process \n"",
        hill=""process with hill kinetics \n"",
    )",,,,,availModels,,"dict(
        krumsiek11=(
            ""myeloid progenitor network, Krumsiek et al., PLOS One 6, e22649, ""
            ""\n      equations from Table 1 on page 3, ""
            ""doi:10.1371/journal.pone.0022649 \n""
        ),
        var=""vector autoregressive process \n"",
        hill=""process with hill kinetics \n"",
    )",
scverse_scanpy_1.10.1,_sim.py,python,GRNsim.writeOutputOnce = True,class_field,,,,Class field: GRNsim.writeOutputOnce = True,scverse,scanpy,1.10.1,,,,,,,GRNsim,,,writeOutputOnce = True,,,,,writeOutputOnce,,True,
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.dim = dim if Coupl is None else Coupl.shape[0],class_field,,,,Class field: [instance] GRNsim.dim = dim if Coupl is None else Coupl.shape[0],scverse,scanpy,1.10.1,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.dim = dim if Coupl is None else Coupl.shape[0],self.dim = dim if Coupl is None else Coupl.shape[0],,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.maxnpar = 1,class_field,,,,Class field: [instance] GRNsim.maxnpar = 1,scverse,scanpy,1.10.1,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.maxnpar = 1,self.maxnpar = 1,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.p_indep = 0.4,class_field,,,,Class field: [instance] GRNsim.p_indep = 0.4,scverse,scanpy,1.10.1,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.p_indep = 0.4,self.p_indep = 0.4,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.model = model,class_field,,,,Class field: [instance] GRNsim.model = model,scverse,scanpy,1.10.1,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.model = model,self.model = model,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.modelType = modelType,class_field,,,,Class field: [instance] GRNsim.modelType = modelType,scverse,scanpy,1.10.1,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.modelType = modelType,self.modelType = modelType,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.initType = initType,class_field,,,,Class field: [instance] GRNsim.initType = initType,scverse,scanpy,1.10.1,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.initType = initType,self.initType = initType,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.show = show,class_field,,,,Class field: [instance] GRNsim.show = show,scverse,scanpy,1.10.1,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.show = show,self.show = show,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.verbosity = verbosity,class_field,,,,Class field: [instance] GRNsim.verbosity = verbosity,scverse,scanpy,1.10.1,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.verbosity = verbosity,self.verbosity = verbosity,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.model = model,class_field,,,,Class field: [instance] GRNsim.model = model,scverse,scanpy,1.10.1,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.model = model,self.model = model,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.set_coupl(Coupl=Coupl),class_field,,,,Class field: [instance] GRNsim.set_coupl(Coupl=Coupl),scverse,scanpy,1.10.1,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.set_coupl(Coupl=Coupl),self.set_coupl(Coupl=Coupl),,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"[instance] GRNsim.header = ""model = "" + model.name + "" \n""",class_field,,,,"Class field: [instance] GRNsim.header = ""model = "" + model.name + "" \n""",scverse,scanpy,1.10.1,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )","self.header = ""model = "" + self.model.name + "" \n""","self.header = ""model = "" + self.model.name + "" \n""",,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,[instance] GRNsim.params = params,class_field,,,,Class field: [instance] GRNsim.params = params,scverse,scanpy,1.10.1,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",self.params = params,self.params = params,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"StaticCauseEffect.availModels = dict(
        line=""y = αx \n"",
        noise=""y = noise \n"",
        absline=""y = |x| \n"",
        parabola=""y = αx² \n"",
        sawtooth=""y = x - |x| \n"",
        tanh=""y = tanh(x) \n"",
        combi=""combinatorial regulation \n"",
    )",class_field,,,,"Class field: StaticCauseEffect.availModels = dict(
        line=""y = αx \n"",
        noise=""y = noise \n"",
        absline=""y = |x| \n"",
        parabola=""y = αx² \n"",
        sawtooth=""y = x - |x| \n"",
        tanh=""y = tanh(x) \n"",
        combi=""combinatorial regulation \n"",
    )",scverse,scanpy,1.10.1,,,,,,,StaticCauseEffect,,,"availModels = dict(
        line=""y = αx \n"",
        noise=""y = noise \n"",
        absline=""y = |x| \n"",
        parabola=""y = αx² \n"",
        sawtooth=""y = x - |x| \n"",
        tanh=""y = tanh(x) \n"",
        combi=""combinatorial regulation \n"",
    )",,,,,availModels,,"dict(
        line=""y = αx \n"",
        noise=""y = noise \n"",
        absline=""y = |x| \n"",
        parabola=""y = αx² \n"",
        sawtooth=""y = x - |x| \n"",
        tanh=""y = tanh(x) \n"",
        combi=""combinatorial regulation \n"",
    )",
scverse_scanpy_1.10.1,_sim.py,python,"[instance] StaticCauseEffect.funcs = dict(
            line=lambda x: x,
            noise=lambda x: 0,
            absline=np.abs,
            parabola=lambda x: x**2,
            sawtooth=lambda x: 0.5 * x - np.floor(0.5 * x),
            tanh=lambda x: np.tanh(2 * x),
        )",class_field,,,,"Class field: [instance] StaticCauseEffect.funcs = dict(
            line=lambda x: x,
            noise=lambda x: 0,
            absline=np.abs,
            parabola=lambda x: x**2,
            sawtooth=lambda x: 0.5 * x - np.floor(0.5 * x),
            tanh=lambda x: np.tanh(2 * x),
        )",scverse,scanpy,1.10.1,,,,,,,StaticCauseEffect,__init__,(self),"self.funcs = dict(
            line=lambda x: x,
            noise=lambda x: 0,
            absline=np.abs,
            parabola=lambda x: x**2,
            sawtooth=lambda x: 0.5 * x - np.floor(0.5 * x),
            tanh=lambda x: np.tanh(2 * x),
        )","self.funcs = dict(
            line=lambda x: x,
            noise=lambda x: 0,
            absline=np.abs,
            parabola=lambda x: x**2,
            sawtooth=lambda x: 0.5 * x - np.floor(0.5 * x),
            tanh=lambda x: np.tanh(2 * x),
        )",,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.__init__(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",class_method,,,,"Class method: GRNsim.__init__(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",scverse,scanpy,1.10.1,,,,,,,GRNsim,__init__,"(
        self,
        *,
        dim=3,
        model=""ex0"",
        modelType=""var"",
        initType=""random"",
        show=False,
        verbosity=0,
        Coupl=None,
        params=MappingProxyType({}),
    )",,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.sim_model(self, tmax, X0, noiseDyn=0, restart=0)",class_method,,,,"Class method: GRNsim.sim_model(self, tmax, X0, noiseDyn=0, restart=0)",scverse,scanpy,1.10.1,,,,,,,GRNsim,sim_model,"(self, tmax, X0, noiseDyn=0, restart=0)",,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.Xdiff_hill(self, Xt)",class_method,,,,"Class method: GRNsim.Xdiff_hill(self, Xt)",scverse,scanpy,1.10.1,,,,,,,GRNsim,Xdiff_hill,"(self, Xt)",,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.Xdiff_var(self, Xt, verbosity=0)",class_method,,,,"Class method: GRNsim.Xdiff_var(self, Xt, verbosity=0)",scverse,scanpy,1.10.1,,,,,,,GRNsim,Xdiff_var,"(self, Xt, verbosity=0)",,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.hill_a(self, x, threshold=0.1, power=2)",class_method,,,,"Class method: GRNsim.hill_a(self, x, threshold=0.1, power=2)",scverse,scanpy,1.10.1,,,,,,,GRNsim,hill_a,"(self, x, threshold=0.1, power=2)",,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.hill_i(self, x, threshold=0.1, power=2)",class_method,,,,"Class method: GRNsim.hill_i(self, x, threshold=0.1, power=2)",scverse,scanpy,1.10.1,,,,,,,GRNsim,hill_i,"(self, x, threshold=0.1, power=2)",,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.nhill_a(self, x, threshold=0.1, power=2, ichild=2)",class_method,,,,"Class method: GRNsim.nhill_a(self, x, threshold=0.1, power=2, ichild=2)",scverse,scanpy,1.10.1,,,,,,,GRNsim,nhill_a,"(self, x, threshold=0.1, power=2, ichild=2)",,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.nhill_i(self, x, threshold=0.1, power=2)",class_method,,,,"Class method: GRNsim.nhill_i(self, x, threshold=0.1, power=2)",scverse,scanpy,1.10.1,,,,,,,GRNsim,nhill_i,"(self, x, threshold=0.1, power=2)",,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,GRNsim.read_model(self),class_method,,,,Class method: GRNsim.read_model(self),scverse,scanpy,1.10.1,,,,,,,GRNsim,read_model,(self),,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.set_coupl(self, Coupl=None)",class_method,,,,"Class method: GRNsim.set_coupl(self, Coupl=None)",scverse,scanpy,1.10.1,,,,,,,GRNsim,set_coupl,"(self, Coupl=None)",,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,GRNsim.set_coupl_old(self),class_method,,,,Class method: GRNsim.set_coupl_old(self),scverse,scanpy,1.10.1,,,,,,,GRNsim,set_coupl_old,(self),,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,GRNsim.coupl_model1(self),class_method,,,,Class method: GRNsim.coupl_model1(self),scverse,scanpy,1.10.1,,,,,,,GRNsim,coupl_model1,(self),,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,GRNsim.coupl_model5(self),class_method,,,,Class method: GRNsim.coupl_model5(self),scverse,scanpy,1.10.1,,,,,,,GRNsim,coupl_model5,(self),,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,GRNsim.coupl_model6(self),class_method,,,,Class method: GRNsim.coupl_model6(self),scverse,scanpy,1.10.1,,,,,,,GRNsim,coupl_model6,(self),,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,GRNsim.coupl_model8(self),class_method,,,,Class method: GRNsim.coupl_model8(self),scverse,scanpy,1.10.1,,,,,,,GRNsim,coupl_model8,(self),,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,GRNsim.coupl_model_krumsiek11(self),class_method,,,,Class method: GRNsim.coupl_model_krumsiek11(self),scverse,scanpy,1.10.1,,,,,,,GRNsim,coupl_model_krumsiek11,(self),,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.sim_model_back_help(self, Xt, Xt1)",class_method,,,,"Class method: GRNsim.sim_model_back_help(self, Xt, Xt1)",scverse,scanpy,1.10.1,,,,,,,GRNsim,sim_model_back_help,"(self, Xt, Xt1)",,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.sim_model_backwards(self, tmax, X0)",class_method,,,,"Class method: GRNsim.sim_model_backwards(self, tmax, X0)",scverse,scanpy,1.10.1,,,,,,,GRNsim,sim_model_backwards,"(self, tmax, X0)",,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.branch_init_model1(self, tmax=100)",class_method,,,,"Class method: GRNsim.branch_init_model1(self, tmax=100)",scverse,scanpy,1.10.1,,,,,,,GRNsim,branch_init_model1,"(self, tmax=100)",,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.parents_from_boolRule(self, rule)",class_method,,,,"Class method: GRNsim.parents_from_boolRule(self, rule)",scverse,scanpy,1.10.1,,,,,,,GRNsim,parents_from_boolRule,"(self, rule)",,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,GRNsim.build_boolCoeff(self),class_method,,,,Class method: GRNsim.build_boolCoeff(self),scverse,scanpy,1.10.1,,,,,,,GRNsim,build_boolCoeff,(self),,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.process_rule(self, rule, pa, tuple)",class_method,,,,"Class method: GRNsim.process_rule(self, rule, pa, tuple)",scverse,scanpy,1.10.1,,,,,,,GRNsim,process_rule,"(self, rule, pa, tuple)",,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"GRNsim.write_data(
        self,
        X,
        *,
        dir=Path(""sim/test""),
        noiseObs=0.0,
        append=False,
        branching=False,
        nrRealizations=1,
        seed=0,
    )",class_method,,,,"Class method: GRNsim.write_data(
        self,
        X,
        *,
        dir=Path(""sim/test""),
        noiseObs=0.0,
        append=False,
        branching=False,
        nrRealizations=1,
        seed=0,
    )",scverse,scanpy,1.10.1,,,,,,,GRNsim,write_data,"(
        self,
        X,
        *,
        dir=Path(""sim/test""),
        noiseObs=0.0,
        append=False,
        branching=False,
        nrRealizations=1,
        seed=0,
    )",,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,StaticCauseEffect.__init__(self),class_method,,,,Class method: StaticCauseEffect.__init__(self),scverse,scanpy,1.10.1,,,,,,,StaticCauseEffect,__init__,(self),,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"StaticCauseEffect.sim_givenAdj(self, Adj: np.ndarray, model=""line"")",class_method,,,,"Class method: StaticCauseEffect.sim_givenAdj(self, Adj: np.ndarray, model=""line"")",scverse,scanpy,1.10.1,,,,,,,StaticCauseEffect,sim_givenAdj,"(self, Adj: np.ndarray, model=""line"")",,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,StaticCauseEffect.sim_combi(self),class_method,,,,Class method: StaticCauseEffect.sim_combi(self),scverse,scanpy,1.10.1,,,,,,,StaticCauseEffect,sim_combi,(self),,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,GRNsim,class,,,,Class: GRNsim,scverse,scanpy,1.10.1,,,,,,,GRNsim,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,StaticCauseEffect,class,,,,Class: StaticCauseEffect,scverse,scanpy,1.10.1,,,,,,,StaticCauseEffect,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,add_args(p),function,,,,Function: add_args(p),scverse,scanpy,1.10.1,,,,add_args,(p),,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,sample_dynamic_data(**params),function,,,,Function: sample_dynamic_data(**params),scverse,scanpy,1.10.1,,,,sample_dynamic_data,(**params),,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"write_data(
    X,
    *,
    dir=Path(""sim/test""),
    append=False,
    header="""",
    varNames: Mapping[str, int] = MappingProxyType({}),
    Adj=np.array([]),
    Coupl=np.array([]),
    boolRules: Mapping[str, str] = MappingProxyType({}),
    model="""",
    modelType="""",
    invTimeStep=1,
)",function,,,,"Function: write_data(
    X,
    *,
    dir=Path(""sim/test""),
    append=False,
    header="""",
    varNames: Mapping[str, int] = MappingProxyType({}),
    Adj=np.array([]),
    Coupl=np.array([]),
    boolRules: Mapping[str, str] = MappingProxyType({}),
    model="""",
    modelType="""",
    invTimeStep=1,
)",scverse,scanpy,1.10.1,,,,write_data,"(
    X,
    *,
    dir=Path(""sim/test""),
    append=False,
    header="""",
    varNames: Mapping[str, int] = MappingProxyType({}),
    Adj=np.array([]),
    Coupl=np.array([]),
    boolRules: Mapping[str, str] = MappingProxyType({}),
    model="""",
    modelType="""",
    invTimeStep=1,
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"_check_branching(
    X: np.ndarray, Xsamples: np.ndarray, restart: int, threshold: float = 0.25
) -> tuple[bool, list[np.ndarray]]",function,,,,"Function: _check_branching(
    X: np.ndarray, Xsamples: np.ndarray, restart: int, threshold: float = 0.25
) -> tuple[bool, list[np.ndarray]]",scverse,scanpy,1.10.1,,,,_check_branching,"(
    X: np.ndarray, Xsamples: np.ndarray, restart: int, threshold: float = 0.25
)",,,,,,,,"tuple[bool, list[np.ndarray]]",,,,,
scverse_scanpy_1.10.1,_sim.py,python,"check_nocycles(Adj: np.ndarray, verbosity: int = 2) -> bool",function,,,,"Function: check_nocycles(Adj: np.ndarray, verbosity: int = 2) -> bool",scverse,scanpy,1.10.1,,,,check_nocycles,"(Adj: np.ndarray, verbosity: int = 2)",,,,,,,,bool,,,,,
scverse_scanpy_1.10.1,_sim.py,python,"sample_coupling_matrix(
    dim: int = 3, connectivity: float = 0.5
) -> tuple[np.ndarray, np.ndarray, np.ndarray, int]",function,,,,"Function: sample_coupling_matrix(
    dim: int = 3, connectivity: float = 0.5
) -> tuple[np.ndarray, np.ndarray, np.ndarray, int]",scverse,scanpy,1.10.1,,,,sample_coupling_matrix,"(
    dim: int = 3, connectivity: float = 0.5
)",,,,,,,,"tuple[np.ndarray, np.ndarray, np.ndarray, int]",,,,,
scverse_scanpy_1.10.1,_sim.py,python,"sample_static_data(model, dir, verbosity=0)",function,,,,"Function: sample_static_data(model, dir, verbosity=0)",scverse,scanpy,1.10.1,,,,sample_static_data,"(model, dir, verbosity=0)",,,,,,,,,"# fraction of connectivity as compared to fully connected",,,,
scverse_scanpy_1.10.1,_sim.py,python,"sample_static_data(model, dir, verbosity=0)",function,,,,"Function: sample_static_data(model, dir, verbosity=0)",scverse,scanpy,1.10.1,,,,sample_static_data,"(model, dir, verbosity=0)",,,,,,,,,"# in one direction, which amounts to dim*(dim-1)/2 edges",,,,
scverse_scanpy_1.10.1,_sim.py,python,itertools,import,,,,Import: itertools,scverse,scanpy,1.10.1,import itertools,,itertools,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,shutil,import,,,,Import: shutil,scverse,scanpy,1.10.1,import shutil,,shutil,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,,sys,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,Path from pathlib,import,,,,Import: Path from pathlib,scverse,scanpy,1.10.1,from pathlib import Path,pathlib,Path,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,MappingProxyType from types,import,,,,Import: MappingProxyType from types,scverse,scanpy,1.10.1,from types import MappingProxyType,types,MappingProxyType,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_sim.py,python,scipy,import,,,,Import: scipy,scverse,scanpy,1.10.1,import scipy as sp,,scipy,,,,,,,,,,,,,,,
,_sim.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_sim.py,python,,,,,,Directory: scanpy\tools\_sim.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"ROC_AUC_analysis(
    adata: AnnData,
    groupby: str,
    group: str | None = None,
    n_genes: int = 100,
)",function,,,,"Function: ROC_AUC_analysis(
    adata: AnnData,
    groupby: str,
    group: str | None = None,
    n_genes: int = 100,
)",scverse,scanpy,1.10.1,,,,ROC_AUC_analysis,"(
    adata: AnnData,
    groupby: str,
    group: str | None = None,
    n_genes: int = 100,
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"subsampled_estimates(mask, mask_rest=None, precision=0.01, probability=0.99)",function,,,,"Function: subsampled_estimates(mask, mask_rest=None, precision=0.01, probability=0.99)",scverse,scanpy,1.10.1,,,,subsampled_estimates,"(mask, mask_rest=None, precision=0.01, probability=0.99)",,,,,,,,,"# Simple method that can be called by rank_gene_group. It uses masks that have been passed to the function and",,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"subsampled_estimates(mask, mask_rest=None, precision=0.01, probability=0.99)",function,,,,"Function: subsampled_estimates(mask, mask_rest=None, precision=0.01, probability=0.99)",scverse,scanpy,1.10.1,,,,subsampled_estimates,"(mask, mask_rest=None, precision=0.01, probability=0.99)",,,,,,,,,"# calculates how much has to be subsampled in order to reach a certain precision with a certain probability",,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"subsampled_estimates(mask, mask_rest=None, precision=0.01, probability=0.99)",function,,,,"Function: subsampled_estimates(mask, mask_rest=None, precision=0.01, probability=0.99)",scverse,scanpy,1.10.1,,,,subsampled_estimates,"(mask, mask_rest=None, precision=0.01, probability=0.99)",,,,,,,,,"# Then it subsamples for mask, mask rest",,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"subsampled_estimates(mask, mask_rest=None, precision=0.01, probability=0.99)",function,,,,"Function: subsampled_estimates(mask, mask_rest=None, precision=0.01, probability=0.99)",scverse,scanpy,1.10.1,,,,subsampled_estimates,"(mask, mask_rest=None, precision=0.01, probability=0.99)",,,,,,,,,"# Since convergence speed varies, we take the slower one, i.e. the variance. This might have future speed-up",,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"subsampled_estimates(mask, mask_rest=None, precision=0.01, probability=0.99)",function,,,,"Function: subsampled_estimates(mask, mask_rest=None, precision=0.01, probability=0.99)",scverse,scanpy,1.10.1,,,,subsampled_estimates,"(mask, mask_rest=None, precision=0.01, probability=0.99)",,,,,,,,,"# potential",,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"dominated_ROC_elimination(adata, grouby)",function,,,,"Function: dominated_ROC_elimination(adata, grouby)",scverse,scanpy,1.10.1,,,,dominated_ROC_elimination,"(adata, grouby)",,,,,,,,,"# This tool has the purpose to take a set of genes (possibly already pre-selected) and analyze AUC.",,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"dominated_ROC_elimination(adata, grouby)",function,,,,"Function: dominated_ROC_elimination(adata, grouby)",scverse,scanpy,1.10.1,,,,dominated_ROC_elimination,"(adata, grouby)",,,,,,,,,"# Those and only those are eliminated who are dominated completely",,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"dominated_ROC_elimination(adata, grouby)",function,,,,"Function: dominated_ROC_elimination(adata, grouby)",scverse,scanpy,1.10.1,,,,dominated_ROC_elimination,"(adata, grouby)",,,,,,,,,"# TODO: Potentially (But not till tomorrow), this can be adapted to only consider the AUC in the given",,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"dominated_ROC_elimination(adata, grouby)",function,,,,"Function: dominated_ROC_elimination(adata, grouby)",scverse,scanpy,1.10.1,,,,dominated_ROC_elimination,"(adata, grouby)",,,,,,,,,"# TODO: optimization frame",,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"_gene_preselection(adata, mask, thresholds)",function,,,,"Function: _gene_preselection(adata, mask, thresholds)",scverse,scanpy,1.10.1,,,,_gene_preselection,"(adata, mask, thresholds)",,,,,,,,,"# This tool serves to",,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"_gene_preselection(adata, mask, thresholds)",function,,,,"Function: _gene_preselection(adata, mask, thresholds)",scverse,scanpy,1.10.1,,,,_gene_preselection,"(adata, mask, thresholds)",,,,,,,,,"# It is not thought to be addressed directly but rather using rank_genes_group or ROC analysis or comparable",,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"_gene_preselection(adata, mask, thresholds)",function,,,,"Function: _gene_preselection(adata, mask, thresholds)",scverse,scanpy,1.10.1,,,,_gene_preselection,"(adata, mask, thresholds)",,,,,,,,,"# TODO: Pass back a truncated adata object with only those genes that fullfill thresholding criterias",,,,
scverse_scanpy_1.10.1,_top_genes.py,python,"_gene_preselection(adata, mask, thresholds)",function,,,,"Function: _gene_preselection(adata, mask, thresholds)",scverse,scanpy,1.10.1,,,,_gene_preselection,"(adata, mask, thresholds)",,,,,,,,,"# This function should be accessible by both rank_genes_groups and ROC_curve analysis",,,,
scverse_scanpy_1.10.1,_top_genes.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,pandas,import,,,,Import: pandas,scverse,scanpy,1.10.1,import pandas as pd,,pandas,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,metrics from sklearn,import,,,,Import: metrics from sklearn,scverse,scanpy,1.10.1,from sklearn import metrics,sklearn,metrics,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_top_genes.py,python,issparse from scipy.sparse,local_import,,,,Import: issparse from scipy.sparse,scverse,scanpy,1.10.1,from scipy.sparse import issparse,scipy.sparse,issparse,,,scipy.sparse,,,,,,,,,,,,
,_top_genes.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_top_genes.py,python,,,,,,Directory: scanpy\tools\_top_genes.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_tsne.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_tsne.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_tsne.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,packaging,version,,,,,,,,,,,,,,,
,_tsne.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_tsne.py,python,,,,,,Directory: scanpy\tools\_tsne.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_umap.py,python,"_InitPos = Literal[""paga"", ""spectral"", ""random""]",constant,"_InitPos = Literal[""paga"", ""spectral"", ""random""]",_InitPos,"Literal[""paga"", ""spectral"", ""random""]","Constant: _InitPos = Literal[""paga"", ""spectral"", ""random""]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_umap.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_umap.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_umap.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_umap.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_umap.py,python,check_array from sklearn.utils,local_import,,,,Import: check_array from sklearn.utils,scverse,scanpy,1.10.1,"from sklearn.utils import check_array, check_random_state",sklearn.utils,check_array,,,sklearn.utils,,,,,,,,,,,,
scverse_scanpy_1.10.1,_umap.py,python,check_random_state from sklearn.utils,local_import,,,,Import: check_random_state from sklearn.utils,scverse,scanpy,1.10.1,"from sklearn.utils import check_array, check_random_state",sklearn.utils,check_random_state,,,sklearn.utils,,,,,,,,,,,,
,_umap.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_umap.py,python,,,,,,Directory: scanpy\tools\_umap.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"_choose_representation(
    adata: AnnData,
    *,
    use_rep: str | None = None,
    n_pcs: int | None = None,
    silent: bool = False,
) -> np.ndarray | csr_matrix",function,,,,"Function: _choose_representation(
    adata: AnnData,
    *,
    use_rep: str | None = None,
    n_pcs: int | None = None,
    silent: bool = False,
) -> np.ndarray | csr_matrix",scverse,scanpy,1.10.1,,,,_choose_representation,"(
    adata: AnnData,
    *,
    use_rep: str | None = None,
    n_pcs: int | None = None,
    silent: bool = False,
)",,,,,,,,np.ndarray | csr_matrix,"# TODO: what else?",,,,
scverse_scanpy_1.10.1,_utils.py,python,"preprocess_with_pca(adata, n_pcs: int | None = None, random_state=0)",function,,,,"Function: preprocess_with_pca(adata, n_pcs: int | None = None, random_state=0)",scverse,scanpy,1.10.1,,,,preprocess_with_pca,"(adata, n_pcs: int | None = None, random_state=0)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,"get_init_pos_from_paga(
    adata, adjacency=None, random_state=0, neighbors_key=None, obsp=None
)",function,,,,"Function: get_init_pos_from_paga(
    adata, adjacency=None, random_state=0, neighbors_key=None, obsp=None
)",scverse,scanpy,1.10.1,,,,get_init_pos_from_paga,"(
    adata, adjacency=None, random_state=0, neighbors_key=None, obsp=None
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
,_utils.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_utils.py,python,,,,,,Directory: scanpy\tools\_utils.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,_utils_clustering.py,python,"rename_groups(
    adata: AnnData,
    restrict_key: str,
    *,
    key_added: str | None,
    restrict_categories: Iterable[str],
    restrict_indices: NDArray[np.bool_],
    groups: NDArray,
) -> pd.Series[str]",function,,,,"Function: rename_groups(
    adata: AnnData,
    restrict_key: str,
    *,
    key_added: str | None,
    restrict_categories: Iterable[str],
    restrict_indices: NDArray[np.bool_],
    groups: NDArray,
) -> pd.Series[str]",scverse,scanpy,1.10.1,,,,rename_groups,"(
    adata: AnnData,
    restrict_key: str,
    *,
    key_added: str | None,
    restrict_categories: Iterable[str],
    restrict_indices: NDArray[np.bool_],
    groups: NDArray,
)",,,,,,,,pd.Series[str],,,,,
scverse_scanpy_1.10.1,_utils_clustering.py,python,"restrict_adjacency(
    adata: AnnData,
    restrict_key: str,
    *,
    restrict_categories: Iterable[str],
    adjacency: spmatrix,
) -> tuple[spmatrix, NDArray[np.bool_]]",function,,,,"Function: restrict_adjacency(
    adata: AnnData,
    restrict_key: str,
    *,
    restrict_categories: Iterable[str],
    adjacency: spmatrix,
) -> tuple[spmatrix, NDArray[np.bool_]]",scverse,scanpy,1.10.1,,,,restrict_adjacency,"(
    adata: AnnData,
    restrict_key: str,
    *,
    restrict_categories: Iterable[str],
    adjacency: spmatrix,
)",,,,,,,,"tuple[spmatrix, NDArray[np.bool_]]",,,,,
scverse_scanpy_1.10.1,_utils_clustering.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,from typing import TYPE_CHECKING,typing,TYPE_CHECKING,,,,,,,,,,,,,,,
,_utils_clustering.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,_utils_clustering.py,python,,,,,,Directory: scanpy\tools\_utils_clustering.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,__getattr__(name: str) -> Any,function,,,,Function: __getattr__(name: str) -> Any,scverse,scanpy,1.10.1,,,,__getattr__,(name: str),,,,,,,,Any,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"__all__ = [
    ""dendrogram"",
    ""diffmap"",
    ""dpt"",
    ""draw_graph"",
    ""embedding_density"",
    ""ingest"",
    ""leiden"",
    ""louvain"",
    ""marker_gene_overlap"",
    ""paga"",
    ""filter_rank_genes_groups"",
    ""rank_genes_groups"",
    ""score_genes"",
    ""score_genes_cell_cycle"",
    ""sim"",
    ""tsne"",
    ""umap"",
]",constant,"__all__ = [
    ""dendrogram"",
    ""diffmap"",
    ""dpt"",
    ""draw_graph"",
    ""embedding_density"",
    ""ingest"",
    ""leiden"",
    ""louvain"",
    ""marker_gene_overlap"",
    ""paga"",
    ""filter_rank_genes_groups"",
    ""rank_genes_groups"",
    ""score_genes"",
    ""score_genes_cell_cycle"",
    ""sim"",
    ""tsne"",
    ""umap"",
]",__all__,"[
    ""dendrogram"",
    ""diffmap"",
    ""dpt"",
    ""draw_graph"",
    ""embedding_density"",
    ""ingest"",
    ""leiden"",
    ""louvain"",
    ""marker_gene_overlap"",
    ""paga"",
    ""filter_rank_genes_groups"",
    ""rank_genes_groups"",
    ""score_genes"",
    ""score_genes_cell_cycle"",
    ""sim"",
    ""tsne"",
    ""umap"",
]","Constant: __all__ = [
    ""dendrogram"",
    ""diffmap"",
    ""dpt"",
    ""draw_graph"",
    ""embedding_density"",
    ""ingest"",
    ""leiden"",
    ""louvain"",
    ""marker_gene_overlap"",
    ""paga"",
    ""filter_rank_genes_groups"",
    ""rank_genes_groups"",
    ""score_genes"",
    ""score_genes_cell_cycle"",
    ""sim"",
    ""tsne"",
    ""umap"",
]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,from typing import Any,typing,Any,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\tools,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\tools\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Empty.token = 0,class_field,,,,Class field: Empty.token = 0,scverse,scanpy,1.10.1,,,,,,,Empty,,,token = 0,,,,,token,,0,
scverse_scanpy_1.10.1,__init__.py,python,[instance] RNGIgraph._rng = check_random_state(random_state),class_field,,,,Class field: [instance] RNGIgraph._rng = check_random_state(random_state),scverse,scanpy,1.10.1,,,,,,,RNGIgraph,__init__,"(self, random_state: int = 0)",self._rng = check_random_state(random_state),self._rng = check_random_state(random_state),,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,[instance] NeighborsView._connectivities = None,class_field,,,,Class field: [instance] NeighborsView._connectivities = None,scverse,scanpy,1.10.1,,,,,,,NeighborsView,__init__,"(self, adata, key=None)",self._connectivities = None,self._connectivities = None,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,[instance] NeighborsView._distances = None,class_field,,,,Class field: [instance] NeighborsView._distances = None,scverse,scanpy,1.10.1,,,,,,,NeighborsView,__init__,"(self, adata, key=None)",self._distances = None,self._distances = None,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"[instance] NeighborsView._connectivities, _distances = _fallback_to_uns(
            _neighbors_dict,
            _connectivities,
            _distances,
            _conns_key,
            _dists_key,
        )",class_field,,,,"Class field: [instance] NeighborsView._connectivities, _distances = _fallback_to_uns(
            _neighbors_dict,
            _connectivities,
            _distances,
            _conns_key,
            _dists_key,
        )",scverse,scanpy,1.10.1,,,,,,,NeighborsView,__init__,"(self, adata, key=None)","self._connectivities, self._distances = _fallback_to_uns(
            self._neighbors_dict,
            self._connectivities,
            self._distances,
            self._conns_key,
            self._dists_key,
        )","self._connectivities, self._distances = _fallback_to_uns(
            self._neighbors_dict,
            self._connectivities,
            self._distances,
            self._conns_key,
            self._dists_key,
        )",,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Empty.__repr__(self) -> str,class_method,,,,Class method: Empty.__repr__(self) -> str,scverse,scanpy,1.10.1,,,,,,,Empty,__repr__,(self),,,str,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"RNGIgraph.__init__(self, random_state: int = 0) -> None",class_method,,,,"Class method: RNGIgraph.__init__(self, random_state: int = 0) -> None",scverse,scanpy,1.10.1,,,,,,,RNGIgraph,__init__,"(self, random_state: int = 0)",,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"RNGIgraph.__getattr__(self, attr: str)",class_method,,,,"Class method: RNGIgraph.__getattr__(self, attr: str)",scverse,scanpy,1.10.1,,,,,,,RNGIgraph,__getattr__,"(self, attr: str)",,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"NeighborsView.__init__(self, adata, key=None)",class_method,,,,"Class method: NeighborsView.__init__(self, adata, key=None)",scverse,scanpy,1.10.1,,,,,,,NeighborsView,__init__,"(self, adata, key=None)",,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"NeighborsView.__getitem__(self, key)",class_method,,,,"Class method: NeighborsView.__getitem__(self, key)",scverse,scanpy,1.10.1,,,,,,,NeighborsView,__getitem__,"(self, key)",,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"NeighborsView.__contains__(self, key)",class_method,,,,"Class method: NeighborsView.__contains__(self, key)",scverse,scanpy,1.10.1,,,,,,,NeighborsView,__contains__,"(self, key)",,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Empty(Enum),class,,,,Class: Empty(Enum),scverse,scanpy,1.10.1,,,,,,,Empty,,,,,,,,,(Enum),,
scverse_scanpy_1.10.1,__init__.py,python,RNGIgraph,class,,,,Class: RNGIgraph,scverse,scanpy,1.10.1,,,,,,,RNGIgraph,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,NeighborsView,class,,,,Class: NeighborsView,scverse,scanpy,1.10.1,,,,,,,NeighborsView,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,check_versions(),function,,,,Function: check_versions(),scverse,scanpy,1.10.1,,,,check_versions,(),,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,getdoc(c_or_f: Callable | type) -> str | None,function,,,,Function: getdoc(c_or_f: Callable | type) -> str | None,scverse,scanpy,1.10.1,,,,getdoc,(c_or_f: Callable | type),,,,,,,,str | None,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"renamed_arg(old_name, new_name, *, pos_0: bool = False)",function,,,,"Function: renamed_arg(old_name, new_name, *, pos_0: bool = False)",scverse,scanpy,1.10.1,,,,renamed_arg,"(old_name, new_name, *, pos_0: bool = False)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,_import_name(name: str) -> Any,function,,,,Function: _import_name(name: str) -> Any,scverse,scanpy,1.10.1,,,,_import_name,(name: str),,,,,,,,Any,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_one_of_ours(obj, root: str)",function,,,,"Function: _one_of_ours(obj, root: str)",scverse,scanpy,1.10.1,,,,_one_of_ours,"(obj, root: str)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"descend_classes_and_funcs(mod: ModuleType, root: str, encountered=None)",function,,,,"Function: descend_classes_and_funcs(mod: ModuleType, root: str, encountered=None)",scverse,scanpy,1.10.1,,,,descend_classes_and_funcs,"(mod: ModuleType, root: str, encountered=None)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"annotate_doc_types(mod: ModuleType, root: str)",function,,,,"Function: annotate_doc_types(mod: ModuleType, root: str)",scverse,scanpy,1.10.1,,,,annotate_doc_types,"(mod: ModuleType, root: str)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,_doc_params(**kwds),function,,,,Function: _doc_params(**kwds),scverse,scanpy,1.10.1,,,,_doc_params,(**kwds),,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,_check_array_function_arguments(**kwargs),function,,,,Function: _check_array_function_arguments(**kwargs),scverse,scanpy,1.10.1,,,,_check_array_function_arguments,(**kwargs),,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_check_use_raw(adata: AnnData, use_raw: None | bool) -> bool",function,,,,"Function: _check_use_raw(adata: AnnData, use_raw: None | bool) -> bool",scverse,scanpy,1.10.1,,,,_check_use_raw,"(adata: AnnData, use_raw: None | bool)",,,,,,,,bool,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"get_igraph_from_adjacency(adjacency, directed=None)",function,,,,"Function: get_igraph_from_adjacency(adjacency, directed=None)",scverse,scanpy,1.10.1,,,,get_igraph_from_adjacency,"(adjacency, directed=None)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"compute_association_matrix_of_groups(
    adata: AnnData,
    prediction: str,
    reference: str,
    *,
    normalization: Literal[""prediction"", ""reference""] = ""prediction"",
    threshold: float = 0.01,
    max_n_names: int | None = 2,
)",function,,,,"Function: compute_association_matrix_of_groups(
    adata: AnnData,
    prediction: str,
    reference: str,
    *,
    normalization: Literal[""prediction"", ""reference""] = ""prediction"",
    threshold: float = 0.01,
    max_n_names: int | None = 2,
)",scverse,scanpy,1.10.1,,,,compute_association_matrix_of_groups,"(
    adata: AnnData,
    prediction: str,
    reference: str,
    *,
    normalization: Literal[""prediction"", ""reference""] = ""prediction"",
    threshold: float = 0.01,
    max_n_names: int | None = 2,
)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"get_associated_colors_of_groups(reference_colors, asso_matrix)",function,,,,"Function: get_associated_colors_of_groups(reference_colors, asso_matrix)",scverse,scanpy,1.10.1,,,,get_associated_colors_of_groups,"(reference_colors, asso_matrix)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"identify_groups(ref_labels, pred_labels, return_overlaps=False)",function,,,,"Function: identify_groups(ref_labels, pred_labels, return_overlaps=False)",scverse,scanpy,1.10.1,,,,identify_groups,"(ref_labels, pred_labels, return_overlaps=False)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,sanitize_anndata(adata: AnnData) -> None,function,,,,Function: sanitize_anndata(adata: AnnData) -> None,scverse,scanpy,1.10.1,,,,sanitize_anndata,(adata: AnnData),,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,view_to_actual(adata: AnnData) -> None,function,,,,Function: view_to_actual(adata: AnnData) -> None,scverse,scanpy,1.10.1,,,,view_to_actual,(adata: AnnData),,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"moving_average(a: np.ndarray, n: int)",function,,,,"Function: moving_average(a: np.ndarray, n: int)",scverse,scanpy,1.10.1,,,,moving_average,"(a: np.ndarray, n: int)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,get_random_state(seed: AnyRandom) -> np.random.RandomState,function,,,,Function: get_random_state(seed: AnyRandom) -> np.random.RandomState,scverse,scanpy,1.10.1,,,,get_random_state,(seed: AnyRandom),,,,,,,,np.random.RandomState,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"update_params(
    old_params: Mapping[str, Any],
    new_params: Mapping[str, Any],
    check=False,
) -> dict[str, Any]",function,,,,"Function: update_params(
    old_params: Mapping[str, Any],
    new_params: Mapping[str, Any],
    check=False,
) -> dict[str, Any]",scverse,scanpy,1.10.1,,,,update_params,"(
    old_params: Mapping[str, Any],
    new_params: Mapping[str, Any],
    check=False,
)",,,,,,,,"dict[str, Any]",,,,,
scverse_scanpy_1.10.1,__init__.py,python,"broadcast_axis(divisor: Scaling_T, axis: Literal[0, 1]) -> Scaling_T",function,,,,"Function: broadcast_axis(divisor: Scaling_T, axis: Literal[0, 1]) -> Scaling_T",scverse,scanpy,1.10.1,,,,broadcast_axis,"(divisor: Scaling_T, axis: Literal[0, 1])",,,,,,,,Scaling_T,,,,,
scverse_scanpy_1.10.1,__init__.py,python,check_op(op),function,,,,Function: check_op(op),scverse,scanpy,1.10.1,,,,check_op,(op),,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"make_axis_chunks(
    X: DaskArray, axis: Literal[0, 1], pad=True
) -> tuple[tuple[int], tuple[int]]",function,,,,"Function: make_axis_chunks(
    X: DaskArray, axis: Literal[0, 1], pad=True
) -> tuple[tuple[int], tuple[int]]",scverse,scanpy,1.10.1,,,,make_axis_chunks,"(
    X: DaskArray, axis: Literal[0, 1], pad=True
)",,,,,,,,"tuple[tuple[int], tuple[int]]",,,,,
scverse_scanpy_1.10.1,__init__.py,python,"select_groups(
    adata: AnnData,
    groups_order_subset: list[str] | Literal[""all""] = ""all"",
    key: str = ""groups"",
) -> tuple[list[str], NDArray[np.bool_]]",function,,,,"Function: select_groups(
    adata: AnnData,
    groups_order_subset: list[str] | Literal[""all""] = ""all"",
    key: str = ""groups"",
) -> tuple[list[str], NDArray[np.bool_]]",scverse,scanpy,1.10.1,,,,select_groups,"(
    adata: AnnData,
    groups_order_subset: list[str] | Literal[""all""] = ""all"",
    key: str = ""groups"",
)",,,,,,,,"tuple[list[str], NDArray[np.bool_]]",,,,,
scverse_scanpy_1.10.1,__init__.py,python,"warn_with_traceback(message, category, filename, lineno, file=None, line=None)",function,,,,"Function: warn_with_traceback(message, category, filename, lineno, file=None, line=None)",scverse,scanpy,1.10.1,,,,warn_with_traceback,"(message, category, filename, lineno, file=None, line=None)",,,,,,,,,"# noqa: PLR0917",,,,
scverse_scanpy_1.10.1,__init__.py,python,"warn_once(msg: str, category: type[Warning], stacklevel: int = 1)",function,,,,"Function: warn_once(msg: str, category: type[Warning], stacklevel: int = 1)",scverse,scanpy,1.10.1,,,,warn_once,"(msg: str, category: type[Warning], stacklevel: int = 1)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"subsample(
    X: np.ndarray,
    subsample: int = 1,
    seed: int = 0,
) -> tuple[np.ndarray, np.ndarray]",function,,,,"Function: subsample(
    X: np.ndarray,
    subsample: int = 1,
    seed: int = 0,
) -> tuple[np.ndarray, np.ndarray]",scverse,scanpy,1.10.1,,,,subsample,"(
    X: np.ndarray,
    subsample: int = 1,
    seed: int = 0,
)",,,,,,,,"tuple[np.ndarray, np.ndarray]",,,,,
scverse_scanpy_1.10.1,__init__.py,python,"subsample_n(
    X: np.ndarray, n: int = 0, seed: int = 0
) -> tuple[np.ndarray, np.ndarray]",function,,,,"Function: subsample_n(
    X: np.ndarray, n: int = 0, seed: int = 0
) -> tuple[np.ndarray, np.ndarray]",scverse,scanpy,1.10.1,,,,subsample_n,"(
    X: np.ndarray, n: int = 0, seed: int = 0
)",,,,,,,,"tuple[np.ndarray, np.ndarray]",,,,,
scverse_scanpy_1.10.1,__init__.py,python,"check_presence_download(filename: Path, backup_url)",function,,,,"Function: check_presence_download(filename: Path, backup_url)",scverse,scanpy,1.10.1,,,,check_presence_download,"(filename: Path, backup_url)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,lazy_import(full_name),function,,,,Function: lazy_import(full_name),scverse,scanpy,1.10.1,,,,lazy_import,(full_name),,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_fallback_to_uns(dct, conns, dists, conns_key, dists_key)",function,,,,"Function: _fallback_to_uns(dct, conns, dists, conns_key, dists_key)",scverse,scanpy,1.10.1,,,,_fallback_to_uns,"(dct, conns, dists, conns_key, dists_key)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_choose_graph(adata, obsp, neighbors_key)",function,,,,"Function: _choose_graph(adata, obsp, neighbors_key)",scverse,scanpy,1.10.1,,,,_choose_graph,"(adata, obsp, neighbors_key)",,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_resolve_axis(
    axis: Literal[""obs"", 0, ""var"", 1],
) -> tuple[Literal[0], Literal[""obs""]] | tuple[Literal[1], Literal[""var""]]",function,,,,"Function: _resolve_axis(
    axis: Literal[""obs"", 0, ""var"", 1],
) -> tuple[Literal[0], Literal[""obs""]] | tuple[Literal[1], Literal[""var""]]",scverse,scanpy,1.10.1,,,,_resolve_axis,"(
    axis: Literal[""obs"", 0, ""var"", 1],
)",,,,,,,,"tuple[Literal[0], Literal[""obs""]] | tuple[Literal[1], Literal[""var""]]",,,,,
scverse_scanpy_1.10.1,__init__.py,python,_empty = Empty.token,constant,_empty = Empty.token,_empty,Empty.token,Constant: _empty = Empty.token,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"AnyRandom = Union[int, np.random.RandomState, None]",constant,"AnyRandom = Union[int, np.random.RandomState, None]",AnyRandom,"Union[int, np.random.RandomState, None]","Constant: AnyRandom = Union[int, np.random.RandomState, None]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,EPS = 1e-15,constant,EPS = 1e-15,EPS,1e-15,Constant: EPS = 1e-15,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_SparseMatrix = Union[sparse.csr_matrix, sparse.csc_matrix]",constant,"_SparseMatrix = Union[sparse.csr_matrix, sparse.csc_matrix]",_SparseMatrix,"Union[sparse.csr_matrix, sparse.csc_matrix]","Constant: _SparseMatrix = Union[sparse.csr_matrix, sparse.csc_matrix]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_MemoryArray = Union[NDArray, _SparseMatrix]",constant,"_MemoryArray = Union[NDArray, _SparseMatrix]",_MemoryArray,"Union[NDArray, _SparseMatrix]","Constant: _MemoryArray = Union[NDArray, _SparseMatrix]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"_SupportedArray = Union[_MemoryArray, DaskArray]",constant,"_SupportedArray = Union[_MemoryArray, DaskArray]",_SupportedArray,"Union[_MemoryArray, DaskArray]","Constant: _SupportedArray = Union[_MemoryArray, DaskArray]",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,"Scaling_T = TypeVar(""Scaling_T"", DaskArray, np.ndarray)",constant,"Scaling_T = TypeVar(""Scaling_T"", DaskArray, np.ndarray)",Scaling_T,"TypeVar(""Scaling_T"", DaskArray, np.ndarray)","Constant: Scaling_T = TypeVar(""Scaling_T"", DaskArray, np.ndarray)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,importlib.util,import,,,,Import: importlib.util,scverse,scanpy,1.10.1,import importlib.util,,importlib.util,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,inspect,import,,,,Import: inspect,scverse,scanpy,1.10.1,import inspect,,inspect,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,random,import,,,,Import: random,scverse,scanpy,1.10.1,import random,,random,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,re,import,,,,Import: re,scverse,scanpy,1.10.1,import re,,re,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,sys,import,,,,Import: sys,scverse,scanpy,1.10.1,import sys,,sys,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,warnings,import,,,,Import: warnings,scverse,scanpy,1.10.1,import warnings,,warnings,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,namedtuple from collections,import,,,,Import: namedtuple from collections,scverse,scanpy,1.10.1,from collections import namedtuple,collections,namedtuple,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,contextmanager from contextlib,import,,,,Import: contextmanager from contextlib,scverse,scanpy,1.10.1,from contextlib import contextmanager,contextlib,contextmanager,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Enum from enum,import,,,,Import: Enum from enum,scverse,scanpy,1.10.1,from enum import Enum,enum,Enum,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,"from functools import partial, singledispatch, wraps",functools,partial,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,singledispatch from functools,import,,,,Import: singledispatch from functools,scverse,scanpy,1.10.1,"from functools import partial, singledispatch, wraps",functools,singledispatch,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,wraps from functools,import,,,,Import: wraps from functools,scverse,scanpy,1.10.1,"from functools import partial, singledispatch, wraps",functools,wraps,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,mul from operator,import,,,,Import: mul from operator,scverse,scanpy,1.10.1,"from operator import mul, truediv",operator,mul,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,truediv from operator,import,,,,Import: truediv from operator,scverse,scanpy,1.10.1,"from operator import mul, truediv",operator,truediv,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,dedent from textwrap,import,,,,Import: dedent from textwrap,scverse,scanpy,1.10.1,from textwrap import dedent,textwrap,dedent,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,MethodType from types,import,,,,Import: MethodType from types,scverse,scanpy,1.10.1,"from types import MethodType, ModuleType",types,MethodType,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,ModuleType from types,import,,,,Import: ModuleType from types,scverse,scanpy,1.10.1,"from types import MethodType, ModuleType",types,ModuleType,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    Literal,
    TypeVar,
    Union,
    overload,
)",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Any from typing,import,,,,Import: Any from typing,scverse,scanpy,1.10.1,"from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    Literal,
    TypeVar,
    Union,
    overload,
)",typing,Any,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Callable from typing,import,,,,Import: Callable from typing,scverse,scanpy,1.10.1,"from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    Literal,
    TypeVar,
    Union,
    overload,
)",typing,Callable,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    Literal,
    TypeVar,
    Union,
    overload,
)",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,TypeVar from typing,import,,,,Import: TypeVar from typing,scverse,scanpy,1.10.1,"from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    Literal,
    TypeVar,
    Union,
    overload,
)",typing,TypeVar,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,Union from typing,import,,,,Import: Union from typing,scverse,scanpy,1.10.1,"from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    Literal,
    TypeVar,
    Union,
    overload,
)",typing,Union,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,overload from typing,import,,,,Import: overload from typing,scverse,scanpy,1.10.1,"from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    Literal,
    TypeVar,
    Union,
    overload,
)",typing,overload,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,WeakSet from weakref,import,,,,Import: WeakSet from weakref,scverse,scanpy,1.10.1,from weakref import WeakSet,weakref,WeakSet,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,AnnData from anndata,import,,,,Import: AnnData from anndata,scverse,scanpy,1.10.1,from anndata import AnnData,anndata,AnnData,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,__version__ from anndata,import,,,,Import: __version__ from anndata,scverse,scanpy,1.10.1,from anndata import __version__ as anndata_version,anndata,__version__,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,version from packaging,import,,,,Import: version from packaging,scverse,scanpy,1.10.1,from packaging import version,packaging,version,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,NDArray from numpy.typing,local_import,,,,Import: NDArray from numpy.typing,scverse,scanpy,1.10.1,from numpy.typing import NDArray,numpy.typing,NDArray,,,numpy.typing,,,,,,,,,,,,
scverse_scanpy_1.10.1,__init__.py,python,check_random_state from sklearn.utils,local_import,,,,Import: check_random_state from sklearn.utils,scverse,scanpy,1.10.1,from sklearn.utils import check_random_state,sklearn.utils,check_random_state,,,sklearn.utils,,,,,,,,,,,,
,__init__.py,python,,,,,,File: scanpy\_utils,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,__init__.py,python,,,,,,Directory: scanpy\_utils\__init__.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,_check_axis_supported(wrapped: C) -> C,function,,,,Function: _check_axis_supported(wrapped: C) -> C,scverse,scanpy,1.10.1,,,,_check_axis_supported,(wrapped: C),,,,,,,,C,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,_is_constant_rows(a: NDArray) -> NDArray[np.bool_],function,,,,Function: _is_constant_rows(a: NDArray) -> NDArray[np.bool_],scverse,scanpy,1.10.1,,,,_is_constant_rows,(a: NDArray),,,,,,,,NDArray[np.bool_],,,,,
scverse_scanpy_1.10.1,is_constant.py,python,"C = TypeVar(""C"", bound=Callable)",constant,"C = TypeVar(""C"", bound=Callable)",C,"TypeVar(""C"", bound=Callable)","Constant: C = TypeVar(""C"", bound=Callable)",scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,partial from functools,import,,,,Import: partial from functools,scverse,scanpy,1.10.1,"from functools import partial, singledispatch, wraps",functools,partial,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,singledispatch from functools,import,,,,Import: singledispatch from functools,scverse,scanpy,1.10.1,"from functools import partial, singledispatch, wraps",functools,singledispatch,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,wraps from functools,import,,,,Import: wraps from functools,scverse,scanpy,1.10.1,"from functools import partial, singledispatch, wraps",functools,wraps,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,Integral from numbers,import,,,,Import: Integral from numbers,scverse,scanpy,1.10.1,from numbers import Integral,numbers,Integral,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,TYPE_CHECKING from typing,import,,,,Import: TYPE_CHECKING from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, TypeVar, overload",typing,TYPE_CHECKING,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,Literal from typing,import,,,,Import: Literal from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, TypeVar, overload",typing,Literal,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,TypeVar from typing,import,,,,Import: TypeVar from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, TypeVar, overload",typing,TypeVar,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,overload from typing,import,,,,Import: overload from typing,scverse,scanpy,1.10.1,"from typing import TYPE_CHECKING, Literal, TypeVar, overload",typing,overload,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,numpy,import,,,,Import: numpy,scverse,scanpy,1.10.1,import numpy as np,,numpy,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,njit from numba,import,,,,Import: njit from numba,scverse,scanpy,1.10.1,from numba import njit,numba,njit,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,sparse from scipy,import,,,,Import: sparse from scipy,scverse,scanpy,1.10.1,from scipy import sparse,scipy,sparse,,,,,,,,,,,,,,,
scverse_scanpy_1.10.1,is_constant.py,python,Callable from collections.abc,local_import,,,,Import: Callable from collections.abc,scverse,scanpy,1.10.1,from collections.abc import Callable,collections.abc,Callable,,,collections.abc,,,,,,,,,,,,
,is_constant.py,python,,,,,,File: scanpy\_utils\compute,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
,is_constant.py,python,,,,,,Directory: scanpy\_utils\compute\is_constant.py,scverse,scanpy,1.10.1,,,,,,,,,,,,,,,,,,
