tactics:
  - quality_attribute: Availability
    tactic_categories:
      - category_name: Detect Faults
        tactics:
          - name: Ping / Echo
            description: A mechanism to check the presence and responsiveness of a component.
          - name: Monitor
            description: Continuously observe the system to detect anomalies.
          - name: Heartbeat
            description: Regular signals sent between components to confirm operation.
          - name: Timestamp
            description: Use of timestamps to detect delays and failures.
          - name: Sanity Checking
            description: Perform basic checks to ensure data or processes are within expected parameters.
          - name: Condition Monitoring
            description: Assess system conditions to predict and detect failures.
          - name: Voting
            description: Use multiple redundant components to decide correct operation.
          - name: Exception Detection
            description: Identify and handle exceptional conditions in the system.
          - name: Self-Test
            description: Components perform internal tests to check functionality.

      - category_name: Recover from Faults_Preparation and Repair
        tactics:
          - name: Active Redundancy
            description: Use multiple active components to take over in case of failure.
          - name: Passive Redundancy
            description: Standby components take over upon failure.
          - name: Spare
            description: Extra resources are available to replace failed ones.
          - name: Exception Handling
            description: Mechanism to handle unexpected errors.
          - name: Rollback
            description: Restore the system to a previous stable state.
          - name: Software Upgrade
            description: Replace software components without downtime.
          - name: Retry
            description: Reattempt a failed operation.
          - name: Ignore Faulty Behavior
            description: Continue operating despite minor faults.
          - name: Degradation
            description: Reduce functionality but maintain partial operation.
          - name: Reconfiguration
            description: Adjust system structure dynamically to bypass faults.

      - category_name: Recover from Faults_Reintroduction
        tactics:
          - name: Shadow
            description: Run a duplicate process in parallel to compare outputs.
          - name: State Resynchronization
            description: Synchronize state between components after failure.
          - name: Escalating Restart
            description: Gradually restart components with increasing impact.
          - name: Non-Stop Forwarding
            description: Maintain data flow even when components fail.

      - category_name: Prevent Faults
        tactics:
          - name: Removal from Service
            description: Temporarily remove components to prevent faults.
          - name: Transactions
            description: Ensure atomicity and consistency in operations.
          - name: Predictive Model
            description: Use predictive analytics to anticipate failures.
          - name: Exception Prevention
            description: Design mechanisms to avoid common faults.
          - name: Increase Competence Set
            description: Improve system adaptability and self-healing capabilities.

  - quality_attribute: Interoperability
    tactic_categories:
      - category_name: Locate
        tactics:
          - name: Discover Service
            description: Locate a service through searching a known directory service.
      - category_name: Manage Interfaces
        tactics:
          - name: Orchestrate
            description: Use a control mechanism to coordinate and manage and sequence the invocation of particular services.
          - name: Tailor Interface
            description: Add or remove capabilities to an interface.
  - quality_attribute: Modifiability
    tactic_categories:
      - category_name: Reduce Size of a Module
        tactics:
          - name: Split Module
            description: Refining the module into several smaller modules should reduce the average cost of future changes.
      - category_name: Increase Cohesion
        tactics:
          - name: Increase Semantic Coherence
            description: If the responsibilities A and B in a module do not serve the same purpose, they should be placed in different modules.
      - category_name: Reduce Coupling
        tactics:
          - name: Encapsulate
            description: Encapsulation introduces an explicit interface to a module.
          - name: Use an Intermediary
            description: Given a dependency between responsibility A and responsibility B, the dependency can be broken by using an intermediary.
          - name: Restrict Dependencies
            description: A tactic that restricts the modules that a given module interacts with or depends on.
          - name: Refactor
            description: Common responsibilities (and the code that implements them) are "factored out" of the modules where they exist and assigned an appropriate home of their own.
          - name: Abstract Common Services
            description: In the case where two modules provide not-quite-the-same but similar services, it may be cost-effective to implement the services just once in a more general (abstract) form.
      - category_name: Defer Binding
        tactics:
          - name: Component Replacement
            description: Enabling the replacement of components at build time, facilitating modifications without recompilation.
          - name: Compile-time Parameterization
            description: Using parameters to configure components at compile time, allowing customization without code changes.
          - name: Aspects
            description: Separating cross-cutting concerns into aspects, enabling modular modifications to system-wide behavior.
          - name: Configuration-time Binding
            description: Binding values at deployment time, allowing customization of the system without recompilation.
          - name: Resource Files
            description: Externalizing configuration data into resource files, enabling modifications without code changes.
          - name: Runtime Registration
            description: Registering components or services at runtime, allowing dynamic modification of system behavior.
          - name: Dynamic Lookup
            description: Discovering and binding services or components at runtime, enabling flexible system reconfiguration.
          - name: Interpret Parameters
            description: Interpreting parameters at runtime, allowing dynamic modification of system behavior.
          - name: Startup Time Binding
            description: Binding values at system startup, allowing customization of the system without recompilation.
          - name: Name Servers
            description: Using name servers to manage service bindings, enabling dynamic reconfiguration of distributed systems.
          - name: Plug-ins
            description: Supporting plug-ins to extend system functionality, enabling modifications without changing core code.
          - name: Publish-subscribe
            description: Using a publish-subscribe architecture, enabling decoupled communication and flexible system reconfiguration.
          - name: Shared Repositories
            description: Using shared repositories for configuration data, enabling modifications without code changes.
          - name: Polymorphism
            description: Enabling polymorphic behavior, allowing modifications by adding new subtypes without changing existing code.